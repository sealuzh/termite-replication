/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 03:45:13 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EmptyStackException;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Spliterator;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.15133290117123
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 54;
      SimpleNode simpleNode0 = new SimpleNode(54);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      linkedList1.clear();
      ArrayList<String> arrayList0 = new ArrayList<String>(list0);
      simpleNode0.identifiers = arrayList0;
      simpleNode0.toString();
      SimpleNode simpleNode1 = new SimpleNode(54);
      arrayList0.retainAll(linkedList1);
      simpleNode0.toString("PreDecrementExpression");
      linkedList0.removeAll(simpleNode0.identifiers);
      simpleNode0.parent = (Node) simpleNode1;
      simpleNode0.toString("S'c|]3tYH)6!G");
      simpleNode0.jjtAddChild(simpleNode1, 54);
      simpleNode0.jjtGetParent();
      Node node0 = simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild(node0, 54);
      simpleNode0.toString("PreDecrementExpression");
      simpleNode0.jjtGetChild(54);
      simpleNode0.jjtGetChild(54);
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      // Undeclared exception!
      try { 
        jJTJavaParserState0.popNode();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6997608016132726
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleNode simpleNode0 = new SimpleNode(18);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function2 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function1);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function3 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function2);
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function3);
      UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Object, ? extends String>) function3);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ? extends String>) unaryOperator1);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator1);
      arrayList0.add(")");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      SimpleNode simpleNode1 = new SimpleNode(18);
      ArrayList<String> arrayList2 = simpleNode1.identifiers;
      arrayList1.add(")");
      arrayList1.add("ForInit");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("VariableDeclaratorId", stringWriter0);
      assertEquals("<VariableDeclaratorId>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-51);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      StringWriter stringWriter0 = new StringWriter(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray1 = new byte[9];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PostfixExpression");
      byteArray1[1] = (byte) (-40);
      byteArray1[5] = (byte) (-51);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PostfixExpression");
      byteArray1[2] = (byte) (-51);
      byteArray1[4] = (byte) (-51);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (byte)63);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.setIdentifier("jBj;m}:g4&Ld $");
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      JJTJavaParserState jJTJavaParserState1 = new JJTJavaParserState();
      simpleNode0.dump("D\u0002t}P:m5=Y*", stringWriter0);
      assertEquals("<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      SimpleNode simpleNode0 = new SimpleNode(47);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("'");
      arrayList0.add((String) null);
      arrayList0.add("*gt");
      StringWriter stringWriter0 = new StringWriter(47);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      ArrayList<SimpleNode> arrayList1 = new ArrayList<SimpleNode>();
      arrayList0.containsAll(arrayList1);
      StringWriter stringWriter3 = new StringWriter();
      ArrayList<String> arrayList2 = simpleNode0.identifiers;
      arrayList2.add("FormalParameter");
      arrayList0.add("2lC7vH Xw^}%()<{");
      arrayList0.add("FormalParameter");
      stringWriter2.append('#');
      arrayList2.add("&&");
      arrayList2.add("VariableDeclaratorId");
      arrayList2.spliterator();
      arrayList2.add("VariableDeclaratorId");
      arrayList2.add("Ux#");
      StringWriter stringWriter4 = new StringWriter();
      simpleNode0.dump("*", stringWriter2);
      assertEquals("#<InstanceOfExpression>\n  <identifier>FormalParameter</identifier>\n  <identifier>*amp</identifier>\n  <identifier>VariableDeclaratorId</identifier>\n  <identifier>VariableDeclaratorId</identifier>\n  <identifier>Ux#</identifier>\n</InstanceOfExpression>\n", stringWriter2.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      UnaryOperator.identity();
      arrayList0.spliterator();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super String, ?>) function3);
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, InputStream> function5 = (Function<Object, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.andThen((Function<? super String, ? extends InputStream>) function5);
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.compose((Function<? super String, ?>) function6);
      unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      arrayList0.add("$SS08?zK,D9 n&C");
      arrayList0.add(",aEHBz#[}dvy[2om");
      arrayList0.add("$SS08?zK,D9 n&C");
      arrayList0.add(",aEHBz#[}dvy[2om");
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      arrayList0.add(";");
      arrayList1.add("</");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("$SS08?zK,D9 n&C", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>$SS08?zK,D9 n&C</identifier>\n  <identifier>,aEHBz#[}dvy[2om</identifier>\n  <identifier>$SS08?zK,D9 n&C</identifier>\n  <identifier>,aEHBz#[}dvy[2om</identifier>\n  <identifier></</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6061920506332319
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(14);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      arrayList0.spliterator();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator3);
      Function.identity();
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator3);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function1);
      Function.identity();
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, InputStream> function3 = (Function<Object, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super String, ? extends InputStream>) function3);
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.compose((Function<? super String, ?>) function4);
      function2.apply(unaryOperator1);
      Function.identity();
      unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator2);
      arrayList0.add(">>");
      UnaryOperator.identity();
      arrayList0.add(">>");
      arrayList0.add("AvKxlk-I#");
      arrayList0.add((String) null);
      function2.compose((Function<? super Integer, ?>) function1);
      arrayList0.add("Iwct;Q3<eM]:");
      arrayList0.add((String) null);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump("y]fc7d5J9", stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5788449127168476
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("{");
      arrayList0.add(" ");
      StringWriter stringWriter0 = new StringWriter();
      UnaryOperator.identity();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add("");
      arrayList0.add(">=");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(11);
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      StringWriter stringWriter5 = new StringWriter();
      StringWriter stringWriter6 = stringWriter4.append('g');
      StringWriter stringWriter7 = new StringWriter();
      arrayList0.add("");
      StringWriter stringWriter8 = new StringWriter();
      simpleNode0.dump(" ", stringWriter6);
      assertEquals("g<CompilationUnit>\n  <identifier> </identifier>\n  <identifier>*ge</identifier>\n</CompilationUnit>\n", stringWriter4.toString());
      assertEquals("g<CompilationUnit>\n  <identifier> </identifier>\n  <identifier>*ge</identifier>\n</CompilationUnit>\n", stringWriter6.toString());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.5788449127168476
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("{");
      arrayList0.add(" ");
      StringWriter stringWriter0 = new StringWriter();
      UnaryOperator.identity();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add("");
      arrayList0.add(">=");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(11);
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      StringWriter stringWriter5 = new StringWriter();
      StringWriter stringWriter6 = stringWriter4.append('g');
      StringWriter stringWriter7 = new StringWriter();
      arrayList0.add("");
      StringWriter stringWriter8 = new StringWriter();
      simpleNode0.dump(" ", stringWriter6);
      assertEquals("g<CompilationUnit>\n  <identifier> </identifier>\n  <identifier>*ge</identifier>\n</CompilationUnit>\n", stringWriter6.toString());
      assertEquals("g<CompilationUnit>\n  <identifier> </identifier>\n  <identifier>*ge</identifier>\n</CompilationUnit>\n", stringWriter4.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.parent = (Node) simpleNode0;
      SimpleNode simpleNode1 = (SimpleNode)simpleNode0.jjtGetParent();
      simpleNode1.id = 0;
      simpleNode0.jjtAddChild(simpleNode1, 0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Literal");
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetParent();
      // Undeclared exception!
      try { 
        simpleNode1.jjtGetChild(2048);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2048
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3454656929942979
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      SimpleNode simpleNode1 = new SimpleNode((-1));
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("Uib~~':K~l?;Rl0;");
      simpleNode1.dump("Literal", stringWriter0);
      simpleNode0.parent = (Node) simpleNode1;
      Node node0 = simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild(node0, 0);
      simpleNode0.jjtGetNumChildren();
      simpleNode1.jjtGetParent();
      simpleNode0.dump("!S^~q", stringWriter0);
      assertEquals("Uib~~':K~l?;Rl0;<CompilationUnit></CompilationUnit>\n", stringWriter0.toString());
      assertEquals(1, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1542);
      SimpleNode simpleNode1 = new SimpleNode(1542);
      simpleNode0.jjtSetParent(simpleNode1);
      Node node0 = simpleNode0.jjtGetParent();
      assertSame(node0, simpleNode1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString("(");
      StringReader stringReader0 = new StringReader("t");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 0);
      simpleNode0.parent = (Node) simpleNode1;
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtAddChild(simpleNode0, 0);
      stringReader0.markSupported();
      simpleNode0.jjtGetChild(0);
      simpleNode0.jjtGetChild(0);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.15133290117123
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 54;
      SimpleNode simpleNode0 = new SimpleNode(54);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      linkedList1.clear();
      ArrayList<String> arrayList0 = new ArrayList<String>(list0);
      simpleNode0.identifiers = arrayList0;
      simpleNode0.toString();
      simpleNode0.jjtGetParent();
      arrayList0.retainAll(linkedList1);
      simpleNode0.toString("PreDecrementExpression");
      linkedList0.removeAll(simpleNode0.identifiers);
      simpleNode0.parent = null;
      simpleNode0.toString("S'c|]3tYH)6!G");
      simpleNode0.jjtAddChild((Node) null, 54);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 54);
      simpleNode0.toString("PreDecrementExpression");
      simpleNode0.jjtGetChild(54);
      simpleNode0.jjtGetChild(54);
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      // Undeclared exception!
      try { 
        jJTJavaParserState0.popNode();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7828775651829014
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      StringWriter stringWriter0 = new StringWriter(57);
      stringWriter0.flush();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-45);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte) (-64);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (byte)86);
      SimpleNode simpleNode1 = (SimpleNode)javaParser0.currNode;
      simpleNode0.jjtSetParent(simpleNode1);
      int int0 = 102;
      simpleNode0.jjtAddChild(simpleNode1, 102);
      simpleNode0.jjtGetParent();
      // Undeclared exception!
      simpleNode0.dump("o[|b;JwtV1fzDEw;", stringWriter0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FUk=R/u,R9M1V9ca&)");
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3473, (-1141), 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.prevCharIsCR = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      JavaParser javaParser1 = new JavaParser(stringReader0);
      StringWriter stringWriter0 = new StringWriter(677);
      SimpleNode simpleNode0 = new SimpleNode((-2004786215));
      Node[] nodeArray0 = new Node[9];
      simpleNode0.children = nodeArray0;
      // Undeclared exception!
      try { 
        simpleNode0.dump("<=", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.7774035244144605
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.apply("oK,n>})35");
      Function.identity();
      unaryOperator1.apply((Object) null);
      Function.identity();
      unaryOperator1.compose((Function<? super String, ?>) unaryOperator0);
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator1);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator0.compose((Function<? super Integer, ? extends String>) function1);
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function2);
      UnaryOperator.identity();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("oK,n>})35", stringWriter0);
      simpleNode0.dump("oK,n>})35", stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      arrayList0.spliterator();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator3);
      Function.identity();
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator3);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function1);
      Function.identity();
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function3 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, InputStream> function4 = (Function<Object, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.andThen((Function<? super String, ? extends InputStream>) function4);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.compose((Function<? super String, ?>) function5);
      function2.apply(unaryOperator1);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator2);
      arrayList0.add("|");
      arrayList0.add("|");
      arrayList0.add("{");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add(">>>");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump(">>>", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>|</identifier>\n  <identifier>|</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.5788449127168476
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleNode simpleNode0 = new SimpleNode(18);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function4 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function5 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      unaryOperator1.compose((Function<? super Integer, ? extends String>) function5);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      Function.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) function4);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function4);
      unaryOperator1.compose((Function<? super String, ? extends String>) function3);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("<=");
      arrayList0.add("}");
      arrayList0.add("_()LaO0w<l_(7h4$");
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      arrayList1.add("}");
      arrayList0.add("IwcH;Q3<eM]:");
      arrayList1.add("InclusiveOrExpression");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("~(j4=/", stringWriter0);
      assertEquals("<VariableDeclaratorId>\n  <identifier>*le</identifier>\n  <identifier>_()LaO0w<l_(7h4$</identifier>\n  <identifier>IwcH;Q3<eM]:</identifier>\n  <identifier>InclusiveOrExpression</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(47);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      arrayList0.add("*amp");
      StringWriter stringWriter1 = new StringWriter((byte)39);
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      arrayList0.add("FormalParameter");
      arrayList0.add((String) null);
      arrayList0.add("*amp");
      arrayList1.add("uTH#*@oEYU");
      arrayList0.add("&&");
      arrayList1.spliterator();
      arrayList1.add("<<");
      arrayList1.add("=");
      StringWriter stringWriter5 = new StringWriter();
      StringWriter stringWriter6 = new StringWriter((byte)39);
      simpleNode0.dump((String) null, stringWriter6);
      assertEquals("<InstanceOfExpression>\n  <identifier>uTH#*@oEYU</identifier>\n  <identifier>*lshft</identifier>\n  <identifier>=</identifier>\n</InstanceOfExpression>\n", stringWriter6.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6061920506332319
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(14);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      arrayList0.spliterator();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<String, Object> function0 = unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      Function.identity();
      unaryOperator1.andThen((Function<? super String, ?>) function0);
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      Function.identity();
      Function<Object, String> function5 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      unaryOperator1.compose((Function<? super InputStream, ? extends String>) function5);
      Function<Object, String> function6 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, MockFileInputStream> function7 = (Function<Object, MockFileInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.andThen((Function<? super String, ? extends InputStream>) function7);
      Function<String, String> function8 = Function.identity();
      function5.compose((Function<? super String, ?>) function6);
      function3.apply(function8);
      Function.identity();
      unaryOperator0.compose((Function<? super Object, ? extends String>) function4);
      unaryOperator1.compose((Function<? super String, ? extends String>) function8);
      arrayList0.add("*lt");
      UnaryOperator.identity();
      arrayList0.add("&");
      arrayList0.add((String) null);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump("SE+iaJ!_", stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6145591551764051
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      SimpleNode simpleNode0 = new SimpleNode(57);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add(" %dXl");
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = function2.andThen((Function<? super String, ? extends String>) function3);
      Object object0 = new Object();
      function3.apply(arrayList0);
      Function<Object, String> function5 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, InputStream> function6 = (Function<Object, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, InputStream> function7 = function5.andThen((Function<? super String, ? extends InputStream>) function6);
      Function<Object, String> function8 = function5.compose((Function<? super Object, ?>) function4);
      Function<String, String> function9 = function8.compose((Function<? super String, ?>) function7);
      function8.apply(function9);
      Function<Object, String> function10 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function11 = function5.compose((Function<? super Object, ?>) function7);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function11);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function4);
      unaryOperator0.compose((Function<? super String, ? extends String>) function10);
      arrayList0.add((String) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      arrayList3.add((String) null);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump(" %dXl", stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleNode simpleNode0 = new SimpleNode(18);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function2 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator0.compose((Function<? super String, ? extends String>) function2);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add(">sP");
      Function.identity();
      Function<Object, String> function3 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = function3.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Object object0 = new Object();
      function3.apply(object0);
      Function<Object, String> function5 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function4);
      Function<String, InputStream> function6 = (Function<String, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.andThen((Function<? super String, ? extends InputStream>) function6);
      Function<Object, SimpleNode> function7 = (Function<Object, SimpleNode>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.compose((Function<? super Object, ?>) function7);
      Function<Object, String> function8 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      function8.compose((Function<? super String, ?>) function5);
      Object object1 = new Object();
      function4.apply(object1);
      Function<Object, String> function9 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function10 = function5.compose((Function<? super Object, ?>) function9);
      Function<Object, String> function11 = unaryOperator1.compose((Function<? super Object, ? extends String>) function10);
      unaryOperator1.compose((Function<? super String, ? extends String>) function11);
      Object object2 = new Object();
      unaryOperator2.apply(object2);
      arrayList0.add(">sP");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add(">sP");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump((String) null, stringWriter0);
      assertEquals("<VariableDeclaratorId>\n  <identifier>>sP</identifier>\n  <identifier>>sP</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.apply("oK,n>})35");
      Function.identity();
      unaryOperator1.apply((Object) null);
      Function.identity();
      unaryOperator1.compose((Function<? super String, ?>) unaryOperator0);
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator1);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator2.compose((Function<? super Integer, ? extends String>) function1);
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function.identity();
      unaryOperator2.compose((Function<? super String, ? extends String>) function2);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator3.andThen((Function<? super String, ? extends Integer>) function3);
      arrayList0.replaceAll(unaryOperator3);
      arrayList0.add("ForInit");
      arrayList0.add("oK,n>})35");
      arrayList0.add(">");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("5D|]C/", stringWriter1);
      assertEquals("<CompilationUnit>\n  <identifier>ForInit</identifier>\n  <identifier>oK,n>})35</identifier>\n  <identifier>*gt</identifier>\n</CompilationUnit>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.5985152433458726
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Spliterator<String> spliterator0 = arrayList0.spliterator();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      Function<String, String> function2 = unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      arrayList0.add("<");
      Function.identity();
      Function<Object, String> function3 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function4 = function3.andThen((Function<? super String, ? extends String>) function1);
      Object object0 = new Object();
      function3.apply(object0);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, MockFileInputStream> function5 = (Function<Object, MockFileInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, InputStream> function6 = function1.andThen((Function<? super String, ? extends InputStream>) function5);
      Function<Object, String> function7 = function3.compose((Function<? super Object, ?>) function6);
      function3.compose((Function<? super String, ?>) function6);
      function4.apply(spliterator0);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function8 = function7.compose((Function<? super Object, ?>) function4);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function8);
      unaryOperator0.compose((Function<? super String, ? extends String>) function2);
      unaryOperator1.apply(arrayList0);
      arrayList0.add("<");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add((String) null);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>*lt</identifier>\n  <identifier>*lt</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-1432583002));
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Spliterator<String> spliterator0 = arrayList0.spliterator();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      arrayList0.add("<");
      Function.identity();
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = function2.andThen((Function<? super String, ? extends String>) function1);
      Object object0 = new Object();
      function2.apply(object0);
      Function<Object, String> function4 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, MockFileInputStream> function5 = (Function<Object, MockFileInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, InputStream> function6 = function1.andThen((Function<? super String, ? extends InputStream>) function5);
      function2.compose((Function<? super Object, ?>) function6);
      Function<String, String> function7 = function2.compose((Function<? super String, ?>) function6);
      function3.apply(spliterator0);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      function2.compose((Function<? super Object, ?>) function4);
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function8);
      unaryOperator0.compose((Function<? super String, ? extends String>) function7);
      arrayList0.add("td,+8|D5i");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("<");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump("td,+8|D5i", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-BhwXD");
      SimpleNode simpleNode0 = new SimpleNode(7);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 7);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = null;
      nodeArray0[3] = null;
      nodeArray0[4] = null;
      nodeArray0[5] = null;
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtAddChild((Node) null, 492);
      simpleNode0.jjtGetParent();
      assertEquals(493, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtAddChild(simpleNode0, 0);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(1881);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1881
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      JavaParser javaParser0 = new JavaParser((Reader) null);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, '%');
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      nodeArray0[7] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      SimpleNode simpleNode1 = new SimpleNode(1006);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode1, (-2967));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2967
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      SystemInUtil.addInputLine("CompilationUnit : =J");
      SimpleNode simpleNode0 = new SimpleNode(1399);
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1399
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-BhwXD");
      SimpleNode simpleNode0 = new SimpleNode(7);
      SimpleNode simpleNode1 = new SimpleNode(7);
      simpleNode0.jjtAddChild(simpleNode1, 7);
      assertEquals(8, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-BhwXD");
      SimpleNode simpleNode0 = new SimpleNode(7);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 492);
      assertEquals(493, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",");
      char[] charArray0 = new char[3];
      charArray0[1] = 'A';
      charArray0[2] = '%';
      SimpleNode simpleNode0 = new SimpleNode(101);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 57;
      String string0 = " %dXl";
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('i');
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, 57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-94050379));
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.392317092923577
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("=J");
      simpleNode0.identifiers = arrayList0;
      simpleNode0.toString();
      simpleNode0.toString("");
      simpleNode0.jjtOpen();
      arrayList0.spliterator();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 0;
      simpleNode0.dump("CompilationUnit : =J", stringWriter0);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-314));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-15);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "YKZ S KglJ/n8zB!");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(18);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray1 = new byte[10];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "YKZ S KglJ/n8zB!");
      byteArray1[2] = (byte) (-15);
      byteArray1[5] = (byte) (-15);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "YKZ S KglJ/n8zB!");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "YKZ S KglJ/n8zB!");
      byteArray1[4] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "YKZ S KglJ/n8zB!");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "YKZ S KglJ/n8zB!");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "YKZ S KglJ/n8zB!");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      SimpleNode simpleNode0 = new SimpleNode(2852);
      Node node0 = simpleNode0.parent;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-38420141));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      SimpleNode simpleNode0 = new SimpleNode(47);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("'");
      arrayList0.add((String) null);
      arrayList0.add("*gt");
      StringWriter stringWriter0 = new StringWriter(47);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      arrayList0.removeIf(predicate3);
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      arrayList1.add("FormalParameter");
      arrayList0.add("InstanceOfExpression");
      arrayList1.add("gWzR6xvRt");
      arrayList1.add("=");
      arrayList0.add("'");
      arrayList1.spliterator();
      arrayList1.add("I=^kke@aScDqWHdNO^");
      arrayList1.add("8.vP;E?('");
      arrayList1.add("");
      StringWriter stringWriter4 = new StringWriter(47);
      stringWriter4.append('2');
      simpleNode0.dump("kHgn(VT|$Sjq<#ASl", stringWriter4);
      assertEquals("2<InstanceOfExpression>\n  <identifier>FormalParameter</identifier>\n  <identifier>gWzR6xvRt</identifier>\n  <identifier>=</identifier>\n  <identifier>I=^kke@aScDqWHdNO^</identifier>\n  <identifier>8.vP;E?('</identifier>\n</InstanceOfExpression>\n", stringWriter4.toString());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.002663334987299
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 0;
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add(" ");
      arrayList0.add("n9");
      StringWriter stringWriter0 = new StringWriter();
      arrayList0.add("VariableDeclaratorId");
      simpleNode0.dump("VariableDeclaratorId", stringWriter0);
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      javaParserTokenManager0.defaultLexState = 0;
      // Undeclared exception!
      try { 
        javaParser0.CastExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("wwQ5o");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-2999));
      simpleNode0.jjtClose();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      StringBuffer stringBuffer0 = new StringBuffer("rhaut");
      arrayList0.add("rhaut");
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      JavaParser javaParser0 = new JavaParser("2oW*y<k*gcO[");
      try { 
        javaParser0.NameList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.skip((byte)39);
      StringWriter stringWriter0 = new StringWriter();
      SystemInUtil.addInputLine((String) null);
      SimpleNode simpleNode0 = new SimpleNode(47);
      SystemInUtil.addInputLine("'");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      simpleNode0.children = null;
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      simpleNode0.setIdentifier(" ");
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = 'd';
      charArray0[3] = 'd';
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SystemInUtil.addInputLine(";");
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1262);
      // Undeclared exception!
      try { 
        simpleNode0.toString("2f<R<5.>rM(@aM{yR!");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1262
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }
}
