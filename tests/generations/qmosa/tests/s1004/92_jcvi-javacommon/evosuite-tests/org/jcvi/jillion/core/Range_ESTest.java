/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 15:19:45 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.91023282739918
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.ofLength(9223372036854775779L);
      Range.of(9223372036854775779L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3567L, 3567L);
      Long long0 = new Long((-5620L));
      Range range1 = Range.of(5306L);
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, (-1034L), (-470L));
      Range range3 = Range.of(range_CoordinateSystem1, (-470L), 1L);
      Long long1 = new Long((-5620L));
      Long long2 = new Long((-1383L));
      range2.equals(range3);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.SB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.672865169050072
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(0L, 4294967295L);
      Long long0 = new Long(0L);
      range0.equals(long0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range1 = Range.of((-1L));
      Range range2 = Range.of((-1L), 0L);
      range1.equals(range2);
      // Undeclared exception!
      try { 
        Range.of(418L, (-1121L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.7920296929410697
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range1 = range_Builder0.build();
      range_Builder0.expandEnd(1L);
      Range range2 = range0.asRange();
      range1.equals(range0);
      range_Builder0.shift(65535L);
      Range range3 = range0.intersection(range2);
      range0.complement(range2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range3.complementFrom(linkedList0);
      Object object0 = new Object();
      range3.equals(range1);
      Object object1 = new Object();
      long long0 = 2147488955L;
      Long long1 = new Long(715L);
      Object object2 = new Object();
      Object object3 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-3220L), 9223372036854775779L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.540574639619762
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range1 = range_Builder0.build();
      long long0 = 65535L;
      range_Builder0.expandEnd(1L);
      Range range2 = range0.asRange();
      range1.equals(range0);
      range_Builder0.shift(65535L);
      range0.intersection(range2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList3.removeAll(linkedList4);
      // Undeclared exception!
      try { 
        Range.ofLength((-1926L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.555552101368099
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder3 = new Range.Builder(0L);
      range_Builder0.build();
      Object object0 = new Object();
      range1.equals((Object) null);
      Object object1 = new Object();
      Long long0 = new Long(0L);
      Object object2 = new Object();
      Object object3 = new Object();
      range1.getBegin(range_CoordinateSystem0);
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.9223111189849944
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of(2630L);
      long long0 = 65562L;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(2630L, 65562L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      Range range2 = range0.asRange();
      range1.equals(range2);
      Range.of(2630L, 65562L);
      Range.ofLength(2630L);
      Range.ofLength(120L);
      Long long1 = new Long(2064L);
      Range range3 = Range.of(120L);
      range1.complement(range3);
      range1.complementFrom(list0);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(4294967289L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.470938137121345
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of((-1736L));
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-1621L));
      Range range1 = Range.of((-1736L), (-1621L));
      Object object2 = new Object();
      range1.equals(object2);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long1 = new Long((-1736L));
      Object object6 = new Object();
      Object object7 = new Object();
      range1.equals(range0);
      Object object8 = new Object();
      Long long2 = new Long(2147483647L);
      Object object9 = new Object();
      Object object10 = new Object();
      range1.equals((Object) null);
      Object object11 = new Object();
      Object object12 = new Object();
      range1.equals(object12);
      // Undeclared exception!
      try { 
        Range.of(255L, (-1621L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0646924500665085
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Long long1 = new Long(0L);
      long long2 = (-600L);
      Long long3 = new Long((-600L));
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.841419806070767
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), 5307L);
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals((Object) null);
      range0.spliterator();
      Range.ofLength(2150L);
      Range range2 = Range.of(1L);
      range2.intersection(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=4.24592404349071
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.ofLength(9223372036854775769L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1083L, 1083L);
      Range.Builder range_Builder0 = new Range.Builder(1083L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = range_Builder0.build();
      range1.equals(range_Builder0);
      Range range2 = Range.of(range_CoordinateSystem0, (-3319L), 2461L);
      range0.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 9223372036854775769L, 9223372036854775769L);
      range3.spliterator();
      Range range4 = Range.ofLength(9223372036854775807L);
      Range range5 = Range.of(127L, 484L);
      Object object0 = new Object();
      Long long0 = new Long((-3319L));
      Object object1 = new Object();
      Object object2 = new Object();
      range5.equals(long0);
      Range.of((-1806L), 2701L);
      List<Range> list0 = range4.complement(range5);
      range1.complementFrom(list0);
      Range.of(3183L, 9223372036854775807L);
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.950460112635002
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = 3567L;
      Range range0 = Range.ofLength(9223372036854775779L);
      Range range1 = Range.of(9223372036854775779L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.ofLength(3567L);
      range2.spliterator();
      Range.ofLength(3567L);
      range2.startsBefore(range2);
      range2.isSubRangeOf(range0);
      range0.complementFrom(list0);
      Range range3 = Range.of(9223372036854775779L);
      Range range4 = Range.of(9223372036854775779L, 9223372036854775779L);
      Long long1 = new Long(9223372036854775779L);
      Object object0 = new Object();
      range1.equals(object0);
      Object object1 = new Object();
      Long long2 = new Long(9223372036854775779L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range4.equals(range3);
      long long3 = 2629L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854775779L, (-2510L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2510 would make range [9223372036854775779 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=4.053885527356016
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(4294967295L);
      List<Range> list0 = range0.complement(range1);
      long long0 = 4294967294L;
      Range range2 = Range.ofLength(4294967294L);
      range2.spliterator();
      Range range3 = Range.ofLength(4294967295L);
      range3.endsBefore(range0);
      range3.equals("");
      range2.isSubRangeOf(range3);
      range0.complementFrom(list0);
      Range range4 = Range.of(4294967294L);
      Range range5 = Range.of(1663L, 4294967295L);
      Long long1 = new Long(4294967295L);
      Object object0 = new Object();
      range5.equals(object0);
      Range range6 = Range.of(4294967295L);
      range1.equals(range6);
      range2.endsBefore(range0);
      Object object1 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.clear();
      range4.complementFrom(list0);
      long long2 = 1111L;
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 1111L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.6939754166676773
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.ofLength(9223372036854775779L);
      Range.of(9223372036854775779L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3567L, 3567L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(range_CoordinateSystem0);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range.of(1183L);
      range0.equals(object0);
      long long0 = 9223372036854774677L;
      // Undeclared exception!
      try { 
        Range.of((-66L), (-3120L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.808657857840813
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(2630L);
      Range range0 = Range.of(range_CoordinateSystem0, 4619L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = range_Builder0.build();
      Range range2 = range1.asRange();
      Object object0 = new Object();
      Long long0 = new Long(9223372036854775807L);
      Object object1 = new Object();
      range2.equals(range_CoordinateSystem0);
      Range.of(4581L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 2368L, 2630L);
      Object object2 = new Object();
      range1.equals(range0);
      // Undeclared exception!
      try { 
        range1.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.178008108691081
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L));
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.6623505350255265
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long0 = new Long((-3000L));
      Object object5 = new Object();
      range0.equals((Object) null);
      Object object6 = new Object();
      Long long1 = new Long(9223372036854775387L);
      Object object7 = new Object();
      Object object8 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, 2147488955L, 2147488955L);
      range1.equals((Object) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.972143185942465
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-128L), (-128L));
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range range1 = range_Builder0.build();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range_Builder0.expandEnd(65535L);
      Range range2 = range1.asRange();
      range2.equals(range_CoordinateSystem0);
      Range.Builder range_Builder1 = new Range.Builder(779L);
      range_Builder0.shift(65535L);
      Range range3 = range0.intersection(range1);
      long long0 = 2818L;
      Range range4 = Range.ofLength(2818L);
      Long long1 = new Long(779L);
      range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.ofLength(2696L);
      range3.complement(range4);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372032559808513L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.5205911490748303
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = 1130L;
      Range range0 = Range.of(1130L, 4294967295L);
      Object object0 = new Object();
      Long long1 = new Long(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(range0);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range.of(0L);
      range0.equals((Object) null);
      long long2 = 9223372036854774677L;
      long long3 = (-4206L);
      // Undeclared exception!
      try { 
        Range.of((-66L), (-4206L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.8090405540550876
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(0L, 4294967295L);
      Long long0 = new Long(0L);
      range0.equals(long0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long1 = new Long(4294967295L);
      Object object4 = new Object();
      Object object5 = new Object();
      range0.equals(object5);
      Object object6 = new Object();
      Long long2 = new Long(4061L);
      Object object7 = new Object();
      Object object8 = new Object();
      range0.equals((Object) null);
      range0.spliterator();
      Range range1 = Range.ofLength(255L);
      Range range2 = Range.of(255L);
      range2.intersection(range1);
      range2.intersection(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.5211992970198702
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775779L);
      Object object0 = new Object();
      Long long0 = new Long(4294967295L);
      Range range1 = Range.of(3567L, 3567L);
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long1 = new Long((-1621L));
      Object object6 = new Object();
      Object object7 = new Object();
      range1.equals(object2);
      Object object8 = new Object();
      Long long2 = new Long(4294967295L);
      Object object9 = new Object();
      Object object10 = new Object();
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 3246L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.8047663798854474
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      range1.complement(range0);
      Range range2 = Range.ofLength(0L);
      Spliterator<Long> spliterator0 = range2.spliterator();
      range2.equals(spliterator0);
      range0.isSubRangeOf(range2);
      range0.equals(spliterator0);
      range2.intersection(range1);
      range1.asRange();
      Range.of(775L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 0L, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.746118955741862
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = 9223372036854775779L;
      Range range0 = Range.ofLength(9223372036854775779L);
      Range range1 = Range.of(9223372036854775779L);
      range0.complement(range1);
      Range range2 = Range.ofLength(3533L);
      range2.spliterator();
      Range.ofLength(3533L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775779L, (-779L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -780 would make range [9223372036854775778 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.918544494665927
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(2630L);
      Range range1 = Range.of(range_CoordinateSystem0, 2147483691L, 2147483691L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range_Builder0.build();
      range1.asRange();
      Object object0 = new Object();
      long long0 = 129L;
      range0.equals(range_CoordinateSystem0);
      Range.of(129L, 65563L);
      Range.of(2630L);
      Object object1 = new Object();
      Range range2 = Range.ofLength(65563L);
      range2.equals(range2);
      // Undeclared exception!
      try { 
        Range.of(129L, (-2349L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.732656905811251
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775779L);
      Object object0 = new Object();
      long long0 = (-1621L);
      Long long1 = new Long(4294967295L);
      Range range1 = Range.of(3567L, 3567L);
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long2 = new Long((-1621L));
      Object object6 = new Object();
      Object object7 = new Object();
      range1.equals((Object) null);
      Object object8 = new Object();
      Long long3 = new Long((-1621L));
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      range1.equals(object11);
      Range.of((-789L), 1L);
      // Undeclared exception!
      try { 
        range1.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.3853004153834694
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = 3567L;
      Range.ofLength(1L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775779L, (-1929L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1929 would make range [9223372036854775779 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=4.217418462445761
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(2147483647L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.ofLength(9223372036854775769L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem0);
      Spliterator<Long> spliterator0 = range2.spliterator();
      Range range3 = Range.ofLength(2434L);
      Long long0 = new Long(9223372036854775769L);
      range3.equals(long0);
      range0.isSubRangeOf(range3);
      range0.complementFrom(list0);
      Range.of(3567L, 3567L);
      Range range4 = Range.of(3567L, 2147483647L);
      Object object0 = new Object();
      Long long1 = new Long(9223372036854775769L);
      range0.equals(spliterator0);
      range4.equals(long1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$EmptyByteRange", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$EmptyByteRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.9815781889820587
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(120L, 4294967295L);
      Range range1 = Range.ofLength(65551L);
      Range range2 = Range.ofLength(4294967295L);
      range1.spliterator();
      Long long0 = new Long(120L);
      List<Range> list0 = range2.complement(range1);
      range0.complementFrom(list0);
      Object object0 = new Object();
      long long1 = 127L;
      Long long2 = new Long(127L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Range coordinates %d, %d are not valid %s coordinates");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Range coordinates %d, %d are not valid %s coordinates
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.420522103684808
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Range range0 = Range.ofLength(65562L);
      Long long0 = new Long(65562L);
      range0.equals(long0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long1 = new Long(65562L);
      Object object5 = new Object();
      Object object6 = new Object();
      range0.equals(object6);
      Object object7 = new Object();
      Long long2 = new Long(65562L);
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147488955L, 9223372036854772212L);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("unable to delete ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.unable to delete 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.790668893517231
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(1L);
      Range range1 = range0.asRange();
      range0.equals(range1);
      Range.Builder range_Builder1 = range_Builder0.shift(4294967289L);
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range1.complement(range2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(list0);
      Object object1 = new Object();
      Object object2 = new Object();
      Range.Builder range_Builder2 = new Range.Builder(0L);
      range_Builder2.contractBegin(0L);
      Range.Builder range_Builder3 = new Range.Builder(0L);
      range_Builder1.build();
      range_Builder1.shift((-1L));
      range_Builder3.expandEnd(1L);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.805267939183761
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-1736L));
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-1621L));
      Range range1 = Range.of((-1736L), (-1621L));
      Object object2 = new Object();
      range1.equals(object2);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Long long1 = new Long((-1736L));
      Object object7 = new Object();
      Object object8 = new Object();
      range1.equals(range0);
      Object object9 = new Object();
      Long long2 = new Long(2147483647L);
      Object object10 = new Object();
      Object object11 = new Object();
      range1.equals((Object) null);
      range1.spliterator();
      Range.ofLength(1L);
      Range range2 = Range.of(9223372036854774625L);
      // Undeclared exception!
      try { 
        range0.intersection(range2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1736 would make range [9223372036854774625 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=4.044875422742617
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(2630L);
      Range range1 = Range.of(range_CoordinateSystem0, 2630L, 9223372036854775776L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775776L, 9223372036854775776L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2630L);
      range1.asRange();
      range1.equals(range0);
      Range.Builder range_Builder2 = range_Builder1.shift(9223372036854775776L);
      Range range2 = range1.intersection(range0);
      range2.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Object object0 = new Object();
      Object object1 = new Object();
      long long0 = 1L;
      Range.Builder range_Builder3 = new Range.Builder(1L);
      Range.Builder range_Builder4 = range_Builder2.contractBegin((-31014L));
      Range.Builder range_Builder5 = new Range.Builder(1L);
      range_Builder4.build();
      Range.Builder range_Builder6 = range_Builder5.shift(1L);
      range_Builder6.expandEnd(1L);
      Range.Builder range_Builder7 = new Range.Builder(715L);
      Range.Builder range_Builder8 = null;
      try {
        range_Builder8 = new Range.Builder((-31014L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.877628851303807
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(0L, 4294967295L);
      Long long0 = new Long(0L);
      range0.equals(long0);
      Long long1 = new Long(1004L);
      Range range1 = Range.of(4294967289L);
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-1383L), 4294967295L);
      Range.of(range_CoordinateSystem0, (-2147483523L), 1955L);
      Long long2 = new Long(1989L);
      Long long3 = new Long(1989L);
      range2.equals(long3);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.SB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.747839188696569
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      range_Builder0.build();
      long long0 = 65535L;
      range_Builder0.expandEnd(1L);
      Range range1 = range0.asRange();
      range_Builder0.shift(65535L);
      Range range2 = range0.intersection(range1);
      range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(linkedList0);
      Object object0 = new Object();
      Object object1 = new Object();
      range_Builder0.expandEnd(9223372036854775779L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-5443L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.616184367738121
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.of(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      long long0 = 65535L;
      Object object2 = new Object();
      Object object3 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1621L), 509L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 5L, 9223372032559808483L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 255L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.945945757728038
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(2630L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(2630L, 2630L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      Range range2 = range0.asRange();
      Object object0 = new Object();
      range1.equals(range2);
      Range.of(2630L, 2630L);
      Range.ofLength(2630L);
      Range.ofLength(4294967295L);
      Long long0 = new Long(2064L);
      Range range3 = Range.of(120L);
      range1.complement(range3);
      range1.complementFrom(list0);
      Object object1 = new Object();
      long long1 = 127L;
      Long long2 = new Long(2547L);
      range2.complement(range3);
      String string0 = "+~GL<,@mh1A&";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("+~GL<,@mh1A&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.+~GL<,@mh1A&
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.6275970815332528
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-1621L));
      range0.equals(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long1 = new Long(255L);
      Object object6 = new Object();
      Object object7 = new Object();
      range0.equals(object3);
      Object object8 = new Object();
      Long long2 = new Long(658L);
      Object object9 = new Object();
      Object object10 = new Object();
      range0.equals(object0);
      Range.of((-1L), 2147483647L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1571L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.7010186887349854
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = 65535L;
      Range range0 = Range.of(3564L, 65563L);
      Range range1 = Range.ofLength(65535L);
      Long long1 = new Long(1004L);
      range0.complement(range1);
      Range.Comparators.valueOf("SHORTEST_TO_LONGEST");
      Range range2 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.6007751722505166
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(consumer0);
      Object object2 = new Object();
      range0.equals(object2);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range0.equals(object2);
      Range.of((-1682L), 32767L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1682L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.8080723915048305
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775779L);
      Range range1 = Range.of(9223372036854775779L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.ofLength(3567L);
      Range range3 = Range.of(9223372036854775779L, 9223372036854775779L);
      Object object0 = new Object();
      range3.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long0 = new Long(9223372036854775779L);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      range3.equals(object7);
      Long long1 = new Long(3567L);
      Object object8 = new Object();
      Object object9 = new Object();
      range2.spliterator();
      Range range4 = Range.ofLength(3567L);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      
      Range.of(9223372036854775779L);
      Range range5 = range1.intersection(range0);
      Range.Comparators.values();
      List<Range> list1 = range5.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list1.contains(range0));
      //  // Unstable assertion: assertFalse(range5.isEmpty());
      //  // Unstable assertion: assertSame(range1, range3);
      //  // Unstable assertion: assertNotSame(range5, range1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.7564526373651175
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Range range0 = Range.ofLength(65562L);
      Long long0 = new Long(65562L);
      range0.equals(long0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long1 = new Long(65562L);
      Object object5 = new Object();
      Object object6 = new Object();
      range0.equals(object6);
      Object object7 = new Object();
      Long long2 = new Long(65562L);
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Range.of(2147488955L);
      Range.of((-1165L), 856L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1165L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.719263515167462
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = 3567L;
      long long1 = 9223372036854775779L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 3567L, 9223372036854775779L);
      Range range0 = Range.of(9223372036854775779L);
      long long2 = 65535L;
      range_Builder0.expandEnd(9223372036854775779L);
      Range range1 = range0.asRange();
      range1.equals((Object) null);
      Range.Builder range_Builder1 = range_Builder0.shift(3567L);
      Range range2 = range1.intersection(range0);
      range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(linkedList0);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.Builder range_Builder2 = new Range.Builder(3282L);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(5299L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.478198242990235
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = 3567L;
      Range.ofLength(9223372036854775779L);
      Range range0 = Range.of(9223372036854775779L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 9223372036854775688L;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775688L, 9223372036854775779L);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294967295L, 2514L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=4.29885489117709
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775779L);
      Range range1 = Range.of(9223372036854775779L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.ofLength(3567L);
      Spliterator<Long> spliterator0 = range2.spliterator();
      Range.ofLength(3567L);
      range2.startsBefore(range2);
      range2.isSubRangeOf(range0);
      range0.complementFrom(list0);
      Range range3 = Range.of((-5443L));
      Range range4 = Range.of(4294967295L, 9223372036854775779L);
      Long long0 = new Long(4294967295L);
      range1.equals(spliterator0);
      range4.equals(range0);
      range2.endsBefore(range3);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(list0);
      Range range5 = Range.of(277L, 4294967295L);
      range5.complementFrom(list0);
      Range range6 = Range.ofLength(9223372036854775779L);
      range6.spliterator();
      // Undeclared exception!
      try { 
        Range.ofLength((-1496L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.681016697227275
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), 5307L);
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 5L, 9223372032559808513L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem2);
      assertEquals((-127L), long0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.792915855263332
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals("");
      Object object3 = new Object();
      Object object4 = new Object();
      Long long0 = new Long(0L);
      Object object5 = new Object();
      Object object6 = new Object();
      range0.equals((Object) null);
      Range range1 = Range.of(1L, 9223372036854775807L);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-837L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.8476023597433695
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.ofLength(37L);
      long long0 = 1L;
      Range range1 = Range.ofLength(1L);
      Range range2 = range0.asRange();
      Object object0 = new Object();
      Long long1 = new Long(2147483647L);
      range0.equals(range1);
      Range range3 = Range.ofLength(276L);
      Range.ofLength(2147483647L);
      long long2 = 1396L;
      Range.of(37L, 297L);
      range3.complement(range2);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.479586716606419
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.ofLength(9223372036854775769L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1083L, 1083L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-2147483648L);
      Range.of(range_CoordinateSystem0, 65535L, (-9223372036854775808L));
      long long1 = 1890L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1890L, 1083L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.732484362493961
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4595L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.shift(1732L);
      range_Builder0.shift(4595L);
      range_Builder1.expandEnd((-32750L));
      Range.Builder range_Builder2 = range_Builder0.copy();
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      range_Builder4.expandBegin(2836L);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.9852654330779
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(9223372036854775769L, 9223372036854775769L);
      Range range1 = Range.of(9223372036854775769L);
      List<Range> list0 = range0.complement(range1);
      Range.ofLength(4294967295L);
      range0.complementFrom(list0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(4294967295L);
      range1.startsBefore(range0);
      Range range2 = range_Builder1.build();
      range2.isSubRangeOf(range0);
      Range.Builder range_Builder2 = range_Builder1.shift((-898L));
      Range.Builder range_Builder3 = range_Builder2.contractBegin((-898L));
      range_Builder3.expandEnd((-9223372036854775806L));
      range_Builder1.shift(1619L);
      Range.Builder range_Builder4 = range_Builder1.expandBegin(4294967295L);
      // Undeclared exception!
      try { 
        range_Builder4.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.7721497648231543
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.of((-113L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), 5307L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 5L, 9223372032559808513L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, 255L, 65535L);
      Range range0 = Range.of((-2147483648L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.528000155968169
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of(1L);
      Long long1 = new Long(1L);
      long long2 = (-128L);
      Long long3 = new Long((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.parseRange("[ 1 .. 1 ]/0B", range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1L, (-412L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=4.106006385033337
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775769L);
      Range range1 = Range.of(9223372036854775769L);
      List<Range> list0 = range0.complement(range1);
      Range.ofLength(4294967295L);
      range0.complementFrom(list0);
      Range.of((-5443L), 4294967295L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(4294967295L);
      range1.startsBefore(range0);
      Range range2 = range_Builder1.build();
      range2.isSubRangeOf(range0);
      Range.Builder range_Builder2 = range_Builder1.shift((-898L));
      Range.Builder range_Builder3 = range_Builder2.contractBegin((-898L));
      range_Builder3.expandEnd((-9223372036854775806L));
      range_Builder1.shift(1619L);
      Range.Builder range_Builder4 = range_Builder1.expandBegin(4294967295L);
      // Undeclared exception!
      try { 
        range_Builder4.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=4.083684041188913
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = 3567L;
      Range range0 = Range.ofLength(9223372036854775779L);
      Range range1 = Range.of(9223372036854775779L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.ofLength(3567L);
      range2.spliterator();
      Range.ofLength(3567L);
      range2.startsBefore(range2);
      range2.isSubRangeOf(range0);
      range0.complementFrom(list0);
      Range.of((-5443L));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList1.removeAll(linkedList0);
      long long1 = (-1L);
      long long2 = (-1098L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1098L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.551515162784134
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L), (-1L));
      range0.getLength();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long1 = 65535L;
      Range range1 = range0.asRange();
      range1.equals(range0);
      long long2 = (-42L);
      // Undeclared exception!
      try { 
        Range.ofLength((-42L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.3132129167647397
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long0 = new Long((-128L));
      Object object6 = new Object();
      range0.equals(object6);
      Object object7 = new Object();
      Long long1 = new Long(2147488955L);
      Object object8 = new Object();
      Object object9 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(3566L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.623327719214134
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(37L);
      Range range1 = Range.ofLength(3L);
      range0.asRange();
      Object object0 = new Object();
      Long long0 = new Long(2147483647L);
      range0.equals(range1);
      Range.ofLength(276L);
      Range range2 = Range.ofLength(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      linkedList0.sort(comparator0);
      Long long1 = new Long(712L);
      Object object1 = new Object();
      Object object2 = new Object();
      range2.equals("-xbbB!^;rWQTnTfU");
      range2.spliterator();
      Range.ofLength(2688L);
      Range range3 = Range.of(1412L);
      range3.intersection(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.458219082550414
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(37L);
      Range range1 = Range.ofLength(1L);
      range0.asRange();
      Object object0 = new Object();
      range0.equals(range1);
      Range range2 = Range.ofLength(276L);
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long(1L);
      Object object3 = new Object();
      Long long1 = new Long((-1489L));
      Object object4 = new Object();
      Object object5 = new Object();
      range2.equals((Object) null);
      Object object6 = new Object();
      Long long2 = new Long(37L);
      Object object7 = new Object();
      Object object8 = new Object();
      Range range3 = Range.of(276L);
      Object object9 = new Object();
      range3.equals(object9);
      Object object10 = new Object();
      Object object11 = new Object();
      Object object12 = new Object();
      range0.equals(object12);
      // Undeclared exception!
      try { 
        Range.of(1L, (-1489L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=4.262692862400615
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775779L);
      Range range1 = Range.of(3567L, 9223372036854775779L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.ofLength(3567L);
      range2.spliterator();
      Range.ofLength(3567L);
      range2.startsBefore(range2);
      range2.isSubRangeOf(range0);
      range0.complementFrom(list0);
      Range range3 = Range.of((-5443L));
      Range range4 = Range.of(4294967295L, 9223372036854775779L);
      Long long0 = new Long(4294967295L);
      range4.isSubRangeOf(range1);
      range2.endsBefore(range4);
      range2.endsBefore(range3);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(list0);
      Range range5 = Range.of(272L, 4294967295L);
      range5.complementFrom(list0);
      Range range6 = Range.ofLength(9223372036854775779L);
      range6.spliterator();
      // Undeclared exception!
      try { 
        Range.ofLength((-1496L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.921100351966153
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = 9223372036854775769L;
      Range range0 = Range.ofLength(9223372036854775769L);
      range0.complement(range0);
      Range range1 = Range.ofLength(3567L);
      range1.spliterator();
      Range range2 = Range.ofLength(3567L);
      range1.equals(range2);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.of((-5443L), 9223372036854775769L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.178008108691081
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L));
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.446290125546826
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-270L), (-124L));
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("Residue Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Residue Based into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.3272954596351867
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = 1130L;
      long long1 = 4294967295L;
      Range.of(1130L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, (-396L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.3272954596351867
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = 9223372036854775769L;
      Range.of(3312L, 9223372036854775769L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 1004L;
      Long long2 = new Long(9223372036854775769L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 255L, (-3490L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.6639130978340195
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range range1 = range_Builder1.build();
      assertTrue(range1.isEmpty());
      
      Range.Builder range_Builder2 = range_Builder0.shift(2461L);
      range_Builder2.expandEnd(4294964893L);
      range_Builder0.shift(4294964893L);
      range_Builder1.expandBegin(4294967286L);
      range_Builder0.build();
      Range range2 = range_Builder2.build();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=4.037124592399603
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775769L);
      Range range1 = Range.of(9223372036854775769L);
      range0.complement(range1);
      Range range2 = Range.ofLength(3567L);
      range2.spliterator();
      Range range3 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      Long long0 = new Long(9223372036854775769L);
      range1.equals(range3);
      Range.of(9223372036854771496L, 9223372036854771496L);
      Range.ofLength(0L);
      Object object1 = new Object();
      Range range4 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range4.getEnd(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.split(2147483647L);
      range2.complementFrom(list0);
      range3.complement(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[t_g50pf|!xt}p@z6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[t_g50pf|!xt}p@z6
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.471978799944753
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of((-128L));
      Range.of((-128L));
      Range range0 = Range.of(range_CoordinateSystem0, (-57L), 147L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.9414213326409375
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775769L);
      Range range1 = Range.of(9223372036854775769L);
      range0.complement(range1);
      Range range2 = Range.ofLength(3567L);
      range2.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-846L);
      Range range3 = Range.of(range_CoordinateSystem0, (-846L), (-846L));
      Range.ofLength(9223372036854775769L);
      range3.intersects(range1);
      // Undeclared exception!
      try { 
        Range.of(9223372036854773178L, (-871L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=4.260561732235589
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range1 = range_Builder0.build();
      range_Builder0.expandEnd(1L);
      Range range2 = range0.asRange();
      range1.equals(range0);
      range_Builder0.shift(65535L);
      range0.intersection(range2);
      List<Range> list0 = range0.complement(range2);
      Range range3 = Range.of((-3189L), 4294967295L);
      Long long0 = new Long(4294967295L);
      range2.isSubRangeOf(range0);
      range2.endsBefore(range1);
      range0.endsBefore(range2);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(list0);
      Range range4 = Range.of(4294967295L, 9223372036854772212L);
      range3.complementFrom(linkedList0);
      Range.ofLength(4294967295L);
      range4.spliterator();
      Range range5 = Range.ofLength(1L);
      range5.intersection(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.7923914290054697
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.build();
      Range.Builder range_Builder3 = new Range.Builder(0L);
      range_Builder0.build();
      Range.of((-32768L));
      range_Builder1.contractBegin((-32768L));
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder((-1753L), (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.91938064817746
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range range1 = range_Builder0.build();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = 65535L;
      range_Builder0.expandEnd(65535L);
      range1.asRange();
      range1.isEmpty();
      long long1 = 4294967295L;
      Range.ofLength(4294967295L);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.2182034584016375
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.767251252242312
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(0L);
      Long long0 = new Long(0L);
      Long long1 = new Long((-600L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.asRange();
      Range.parseRange("[ 0 .. 0 ]/0B");
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList0.removeAll(linkedList2);
      Range range1 = Range.ofLength(1084L);
      range1.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 1990L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.69652477870758
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      range1.complement(range0);
      Range range2 = Range.ofLength(0L);
      range1.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.intersects(range2);
      long long1 = 1102L;
      // Undeclared exception!
      try { 
        Range.of(1102L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.917466646526693
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      range1.complement(range0);
      Range range2 = Range.ofLength(0L);
      Spliterator<Long> spliterator0 = range2.spliterator();
      range2.equals(spliterator0);
      range2.intersects(range0);
      range0.equals(spliterator0);
      range2.intersection(range1);
      range2.spliterator();
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Long long0 = new Long(127L);
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals(spliterator0);
      Range.of(0L, 0L);
      Range.ofLength(787L);
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.8046310783818953
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range0.equals("l>KN6\"");
      Range range1 = Range.of((-128L), 4294967295L);
      range1.intersects(range0);
      Range.ofLength(4294967295L);
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object5));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.785856964592873
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775769L);
      Range range1 = Range.of(9223372036854775769L);
      range0.complement(range1);
      Range range2 = Range.ofLength(3567L);
      Range range3 = Range.ofLength(9223372036854775806L);
      range1.intersects(range3);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 9223372036854775806L, 9223372036854775806L);
      long long0 = 2147483647L;
      Range range4 = Range.ofLength(2147483647L);
      range2.intersects(range4);
      Range.of(9223372036854775769L, 9223372036854775769L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        linkedList0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.498181208206836
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-2510L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Long long0 = new Long((-2510L));
      Object object7 = new Object();
      Object object8 = new Object();
      range0.equals(object5);
      Object object9 = new Object();
      Long long1 = new Long((-1272L));
      Object object10 = new Object();
      Object object11 = new Object();
      range0.intersects(range0);
      // Undeclared exception!
      try { 
        Range.of(62933L, (-1149L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.945057397505347
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(0L, 4294967295L);
      Long long0 = new Long(0L);
      Long long1 = new Long(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList3.removeAll(linkedList4);
      Range.ofLength(0L);
      range1.complementFrom(linkedList3);
      Range.of((-1L));
      // Undeclared exception!
      try { 
        Range.of(9223372036854775779L, 4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=4.246938765941616
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775779L);
      Range range1 = Range.of(9223372036854775779L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.ofLength(3567L);
      range2.spliterator();
      Range.ofLength(3567L);
      range2.startsBefore(range2);
      range2.isSubRangeOf(range0);
      range0.complementFrom(list0);
      Range range3 = Range.of((-5443L));
      Range range4 = Range.of(4294967295L, 9223372036854775779L);
      Long long0 = new Long(4294967295L);
      range4.isSubRangeOf(range1);
      range4.isSubRangeOf(range2);
      range2.endsBefore(range3);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(list0);
      Range range5 = Range.of(282L, 4294967295L);
      range5.complementFrom(list0);
      Range range6 = Range.ofLength(9223372036854775779L);
      range6.spliterator();
      // Undeclared exception!
      try { 
        Range.ofLength((-1496L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=4.327287406700319
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775779L);
      Range range1 = Range.of(9223372036854775779L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.ofLength(3567L);
      Spliterator<Long> spliterator0 = range2.spliterator();
      Range.ofLength(3567L);
      range2.startsBefore(range2);
      range2.isSubRangeOf(range0);
      range0.complementFrom(list0);
      Range range3 = Range.of((-5443L));
      Range range4 = Range.of(4294967295L, 9223372036854775779L);
      Long long0 = new Long(4294967295L);
      range1.equals(spliterator0);
      range4.equals(range0);
      range2.endsBefore(range3);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(list0);
      Range range5 = Range.of(277L, 4294967295L);
      range5.complementFrom(list0);
      Range range6 = Range.ofLength(9223372036854775779L);
      range6.getEnd();
      range6.spliterator();
      Range.ofLength(277L);
      range2.asRange();
      // Undeclared exception!
      try { 
        range4.split((-5443L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.8691416749439234
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L);
      range0.complement(range1);
      Range range2 = Range.ofLength(4294967295L);
      range2.spliterator();
      Range range3 = Range.ofLength(4294967295L);
      range2.isSubRangeOf(range3);
      range2.isEmpty();
      Range.of(4294967295L, 4294967295L);
      long long0 = 659L;
      Range.ofLength(659L);
      long long1 = 32767L;
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("im5/Wd{V,HsZyGn,o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.im5/Wd{V,HsZyGn,o
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.6044900423195103
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-1621L));
      range0.equals(long0);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long1 = new Long(2147483647L);
      Object object6 = new Object();
      Object object7 = new Object();
      range0.equals(object7);
      Object object8 = new Object();
      Long long2 = new Long((-1621L));
      Object object9 = new Object();
      Object object10 = new Object();
      Range range1 = Range.ofLength(0L);
      range1.spliterator();
      Range range2 = Range.ofLength(2147488955L);
      range2.intersection(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.66150732862055
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object1);
      Object object3 = new Object();
      Object object4 = new Object();
      Long long0 = new Long(9223372036854775807L);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      range0.equals(object7);
      Range range1 = Range.of(1L, 0L);
      range0.intersection(range1);
      Object object8 = new Object();
      Range.ofLength(3156L);
      Object object9 = new Object();
      assertFalse(object9.equals((Object)object5));
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.796179426502051
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range.ofLength(4294967295L);
      Range.of((-1753L), 427L);
      Range.ofLength(9223372036854775807L);
      Range.ofLength(1775L);
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.874526165645406
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-2510L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Long long0 = new Long(1818L);
      Object object8 = new Object();
      Object object9 = new Object();
      range0.endsBefore(range0);
      Object object10 = new Object();
      Long long1 = new Long(126L);
      Object object11 = new Object();
      Object object12 = new Object();
      range0.equals("Z;cJozF(p%3S");
      Range range1 = Range.of(127L, 1818L);
      range1.intersection(range0);
      Range.ofLength(1965L);
      Object object13 = new Object();
      assertFalse(object13.equals((Object)object5));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.4628693900395358
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-1736L));
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-1621L));
      Object object2 = new Object();
      range0.equals(object2);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      range0.equals(range0);
      Object object9 = new Object();
      Long long1 = new Long(2147483647L);
      Object object10 = new Object();
      Object object11 = new Object();
      range0.equals((Object) null);
      Range.ofLength(1L);
      Range.ofLength(127L);
      Object object12 = new Object();
      assertFalse(object12.equals((Object)object2));
  }

  /**
  //Test case number: 87
  /*Coverage entropy=4.251516938280575
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775779L);
      Range range1 = Range.of(9223372036854775779L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.ofLength(3567L);
      range2.spliterator();
      Range.ofLength(3567L);
      range2.startsBefore(range2);
      range2.isSubRangeOf(range0);
      range0.complementFrom(list0);
      Range range3 = Range.of((-5443L));
      range3.getBegin();
      Range range4 = Range.of(4294967295L, 9223372036854775779L);
      Long long0 = new Long(4294967295L);
      range4.isSubRangeOf(range1);
      range2.endsBefore(range4);
      range2.endsBefore(range3);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(list0);
      Range range5 = Range.of(272L, 4294967295L);
      range5.complementFrom(list0);
      Range range6 = Range.ofLength(9223372036854775779L);
      range6.spliterator();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.ofLength((-1496L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=4.25213332002628
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775779L);
      Range range1 = Range.of(9223372036854775779L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.ofLength(3567L);
      range2.spliterator();
      Range.ofLength(3567L);
      range2.startsBefore(range2);
      range2.isSubRangeOf(range0);
      range0.complementFrom(list0);
      Range range3 = Range.of((-5443L));
      Range range4 = Range.of(4294967295L, 9223372036854775779L);
      Long long0 = new Long(4294967295L);
      range4.isSubRangeOf(range1);
      range2.endsBefore(range4);
      range2.endsBefore(range3);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(list0);
      Range range5 = Range.of(272L, 4294967295L);
      range5.complementFrom(list0);
      Range range6 = Range.ofLength(9223372036854775779L);
      range6.spliterator();
      // Undeclared exception!
      try { 
        Range.ofLength((-1496L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.564038109214902
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-241L));
      range_Builder0.expandEnd((-241L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem2.getAbbreviatedName();
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.777485661072176
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.of(0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.expandEnd(4294967296L);
      Range.Builder range_Builder2 = new Range.Builder(0L);
      range_Builder1.shift((-9223372034707292159L));
      Range.Builder range_Builder3 = new Range.Builder(4294967296L);
      Range.Builder range_Builder4 = range_Builder3.expandBegin(3847L);
      Range range1 = range_Builder4.build();
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.433170419983134
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = 32767L;
      long long1 = 2147483647L;
      Range.Builder range_Builder0 = new Range.Builder(849L, 2147483647L);
      range_Builder0.shift(1L);
      Range.ofLength(1L);
      Long long2 = new Long((-2473L));
      range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.ofLength((-8L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=4.034308272103408
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range range1 = range_Builder0.build();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder1 = range_Builder0.expandEnd(65535L);
      Range range2 = range1.asRange();
      range2.equals(range_CoordinateSystem0);
      range_Builder1.shift((-128L));
      Range range3 = range1.intersection(range0);
      range3.getLength();
      List<Range> list0 = range2.complement(range1);
      range2.complementFrom(list0);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-2147483648L), 5307L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, (-548L), 32767L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem3, (-411L), 32767L);
      range4.startsBefore(range3);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range5 = Range.of(range_CoordinateSystem4, 711L, 2591L);
      assertFalse(range5.equals((Object)range0));
  }

  /**
  //Test case number: 93
  /*Coverage entropy=4.007952664933933
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long0 = new Long((-128L));
      range0.equals(long0);
      Range range1 = Range.of(4294967295L);
      range1.equals("ARRIVAL");
      range1.spliterator();
      Object object5 = new Object();
      Long long1 = new Long(2147488955L);
      Object object6 = new Object();
      Object object7 = new Object();
      range0.equals("l>KN6\"");
      Range range2 = Range.of((-128L), 4294967295L);
      Range.ofLength(4294967295L);
      Object object8 = new Object();
      // Undeclared exception!
      range2.split(243L);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=4.224442437708352
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775769L);
      Range range1 = Range.of(9223372036854775769L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.ofLength(3567L);
      range2.spliterator();
      Range range3 = Range.ofLength(4294967295L);
      range2.isSubRangeOf(range3);
      range2.isSubRangeOf(range0);
      range0.complementFrom(list0);
      Range.of((-5443L), 4294967295L);
      Range.of(4294967295L, 4294967295L);
      Object object0 = new Object();
      Range range4 = Range.of(9223372036854775769L, 9223372036854775769L);
      Range range5 = range0.intersection(range4);
      Range range6 = Range.ofLength(9223372036854775769L);
      range6.startsBefore(range4);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Comparators.values();
      Range.Builder range_Builder2 = new Range.Builder(range5);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("inputstream can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.inputstream can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=4.056902349654367
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775779L);
      List<Range> list0 = range0.complement(range0);
      Range range1 = Range.ofLength(3567L);
      range1.spliterator();
      range1.startsBefore(range1);
      range1.isSubRangeOf(range0);
      range0.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(3567L);
      range_Builder0.build();
      range_Builder1.shift(1L);
      range_Builder0.expandEnd(9223372036854775779L);
      Range.Builder range_Builder3 = range_Builder0.shift(1L);
      Range.Builder range_Builder4 = range_Builder3.expandBegin(2147483647L);
      assertSame(range_Builder3, range_Builder4);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.5745592321266955
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object1);
      Object object3 = new Object();
      Object object4 = new Object();
      Long long0 = new Long(9223372036854775807L);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      range0.equals(object7);
      Object object8 = new Object();
      Long long1 = new Long(0L);
      Object object9 = new Object();
      Object object10 = new Object();
      range0.equals(object4);
      Range.of((-546L), 0L);
      Object object11 = new Object();
      assertFalse(object11.equals((Object)object7));
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.811638077249671
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Object object2 = new Object();
      Long long0 = new Long((-128L));
      Object object3 = new Object();
      Long long1 = new Long(2147483647L);
      Object object4 = new Object();
      Long long2 = new Long((-883L));
      Object object5 = new Object();
      Object object6 = new Object();
      Range range0 = Range.of(1L, 526L);
      range0.getBegin();
      long long3 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long3);
      
      Range range1 = Range.ofLength(3321L);
      assertFalse(range1.isEmpty());
      
      Object object7 = new Object();
      Range range2 = Range.of(range_CoordinateSystem0, (-2564L), 4294967291L);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(2147483647L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.1668388922527644
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of(732L);
      range0.equals(object0);
      Object object3 = new Object();
      Object object4 = new Object();
      Long long0 = new Long(4294967285L);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Long long1 = Long.valueOf(1732L);
      range0.equals(long1);
      Object object8 = new Object();
      Long long2 = new Long(9223372036854775807L);
      Object object9 = new Object();
      Object object10 = new Object();
      range0.equals(object10);
      Object object11 = new Object();
      assertFalse(object11.equals((Object)object2));
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.7787649926612943
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(849L, 2147483647L);
      range_Builder0.shift(1L);
      Range range0 = Range.ofLength(1L);
      assertFalse(range0.isEmpty());
      
      Long long0 = new Long((-2494L));
      Range range1 = range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.ofLength(32767L);
      List<Range> list0 = range1.complement(range2);
      assertFalse(list0.contains(range1));
      assertEquals(1, list0.size());
      
      linkedList0.add(range2);
      assertNotSame(range2, range0);
      
      List<Range> list1 = range1.complementFrom(linkedList0);
      assertEquals(1, list1.size());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.6683687952891333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long1 = new Long((-128L));
      Object object6 = new Object();
      range0.equals(object6);
      Object object7 = new Object();
      Long long2 = new Long(2147488955L);
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Long long3 = new Long(9223372036854775779L);
      Range range1 = Range.of(127L);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.669446600651103
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of((-128L));
      Long long0 = new Long((-128L));
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("+~GL<,@mh1A&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.+~GL<,@mh1A&
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.5369422238626655
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 5L, 9223372032559808513L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 255L, 65535L);
      Range range2 = range1.intersection(range0);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.7226298654912022
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of(1130L, 4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long0 = new Long((-1621L));
      Object object5 = new Object();
      Object object6 = new Object();
      range0.equals(object6);
      Object object7 = new Object();
      Long long1 = new Long(4294967295L);
      Object object8 = new Object();
      Object object9 = new Object();
      range0.equals(object9);
      Range range1 = Range.of(1L);
      range0.intersection(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.7412075951352537
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.of(3567L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 5307L, 5307L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-2231L), 2147483647L);
      Range range1 = Range.of((-128L));
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.3132129167647393
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      long long0 = (-1621L);
      Long long1 = new Long((-1621L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Long long2 = new Long((-2266L));
      Object object8 = new Object();
      Object object9 = new Object();
      Long long3 = new Long((-1621L));
      range0.equals(long3);
      Object object10 = new Object();
      Long long4 = new Long((-1621L));
      Object object11 = new Object();
      Object object12 = new Object();
      range0.equals(object8);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-2266L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.937933789357378
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of(0L);
      range1.getEnd(range_CoordinateSystem0);
      range0.complement(range1);
      Range range2 = Range.ofLength(0L);
      range2.spliterator();
      range2.equals(range0);
      range0.getEnd();
      Range range3 = Range.of(0L, 0L);
      range0.startsBefore(range3);
      range0.isSubRangeOf(range2);
      String string0 = "X%)+1Ist$]";
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("d>$", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse d>$ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.5181739286962155
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), 5301L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 5L, 9223372032559808513L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, (-1035L), 65535L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem3);
      assertEquals(9223372032559808514L, long0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.9699488755728307
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of((-1736L));
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-1621L));
      Range range1 = Range.of((-1736L), (-1621L));
      Object object2 = new Object();
      range1.equals(object2);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Long long1 = new Long((-1736L));
      Object object7 = new Object();
      Object object8 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Object object9 = new Object();
      Long long2 = new Long(2147483647L);
      Object object10 = new Object();
      Object object11 = new Object();
      range1.equals((Object) null);
      Range range2 = Range.of(1L, 1L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range3 = range1.intersection(range0);
      assertFalse(range3.isEmpty());
      assertSame(range3, range0);
      
      Range range4 = Range.of(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 255L, 255L);
      Range range5 = range_Builder0.build();
      Range range6 = range2.intersection(range4);
      assertFalse(range2.isEmpty());
      assertNotSame(range2, range5);
      assertTrue(range6.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.336204530870105
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 9223372036854769371L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.826215601796299
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of(0L, 4294967295L);
      Long long0 = new Long(0L);
      Long long1 = new Long(4294967295L);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList3.removeAll(linkedList4);
      range0.getBegin();
      range1.complementFrom(linkedList3);
      Range.of((-1L));
      // Undeclared exception!
      try { 
        Range.of(9223372036854775779L, 4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.7358087939538813
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of((-128L));
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), 5307L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 5L, 9223372032559808513L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 255L, 65535L);
      Range range2 = Range.of((-2147483648L));
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      //  // Unstable assertion: assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.117734440816303
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.of((-128L));
      long long0 = (-2147483648L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.8116718804474545
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.of(0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 0L, 4294967286L);
      range_Builder1.build();
      range_Builder1.copy();
      Range.Builder range_Builder2 = range_Builder0.shift(2461L);
      range_Builder2.expandEnd(4294964893L);
      range_Builder0.shift(4294964893L);
      range_Builder1.expandBegin(4294967286L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder2.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.776483154806512
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.of(0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 0L, 4294967286L);
      range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.shift(2461L);
      Range.Builder range_Builder3 = range_Builder2.expandEnd(4294964893L);
      range_Builder0.shift(4294964893L);
      range_Builder2.expandEnd(9223372036854774678L);
      Range.Builder range_Builder4 = range_Builder2.shift(9223372036854774678L);
      Range.Builder range_Builder5 = new Range.Builder();
      Range.Builder range_Builder6 = range_Builder3.expandBegin(9223372036854775807L);
      assertSame(range_Builder6, range_Builder4);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.497202926885675
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Long long0 = new Long(1004L);
      Range.Builder range_Builder0 = new Range.Builder((-32768L), 1004L);
      range_Builder0.build();
      long long1 = 9223372032559808513L;
      Range.Builder range_Builder1 = new Range.Builder(9223372032559808513L);
      Range.of((-2620L));
      range_Builder1.contractBegin((-853L));
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_CoordinateSystem0, 4294967289L, 1004L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.6100986807947497
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.of(0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(255L);
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.shift(255L);
      Range.Builder range_Builder2 = range_Builder1.expandEnd(4294967296L);
      Range.Builder range_Builder3 = new Range.Builder(0L);
      range_Builder1.shift((-9223372034707292159L));
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = range_Builder4.expandBegin(3847L);
      assertFalse(range_Builder5.equals((Object)range_Builder2));
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.6118579157993924
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = 65562L;
      Range.Builder range_Builder0 = new Range.Builder();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Range.of(120L, 4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(2135L);
      range_Builder1.build();
      range_Builder1.shift(447L);
      Range.Builder range_Builder2 = new Range.Builder(254L);
      Range.Builder range_Builder3 = range_Builder2.shift(120L);
      range_Builder3.expandEnd((-255L));
      // Undeclared exception!
      try { 
        range_Builder2.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.445574843765466
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L), (-1L));
      range0.getLength();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.asRange();
      Object object0 = new Object();
      Long long1 = new Long(65535L);
      range0.getLength();
      Object object1 = new Object();
      range0.equals(object1);
      long long2 = (-167L);
      Long long3 = new Long((-167L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(object4);
      // Undeclared exception!
      try { 
        Range.of(1343L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.8639093539833977
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of(0L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Long long0 = new Long(1004L);
      Range.ofLength(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 1084L;
      Range.of(range_CoordinateSystem1, 0L, 1084L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, 0L, 5L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 1004L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.49260373139541
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-2510L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.getBegin(range_CoordinateSystem0);
      Object object5 = new Object();
      Long long0 = new Long((-2510L));
      Object object6 = new Object();
      Object object7 = new Object();
      range0.equals(object4);
      Object object8 = new Object();
      Long long1 = new Long((-1272L));
      Object object9 = new Object();
      Object object10 = new Object();
      range0.equals(object3);
      // Undeclared exception!
      try { 
        Range.of(62933L, (-1149L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.8863167796936327
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of(4582L);
      long long0 = (-964L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = range0.asRange();
      long long1 = (-2147483648L);
      Range range2 = Range.of((-2147483648L), 4582L);
      range1.isSubRangeOf(range2);
      // Undeclared exception!
      try { 
        range2.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.5099450491664066
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-128L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range.of((-128L));
      Range range1 = Range.of(range_CoordinateSystem0, (-57L), 127L);
      assertFalse(range1.isEmpty());
      
      List<Range> list0 = range0.split(363L);
      assertTrue(list0.contains(range0));
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.738687111899943
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.of((-128L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-1383L);
      Range.of(range_CoordinateSystem0, (-128L), 65535L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList0.removeAll(linkedList4);
      Range range0 = Range.ofLength(65535L);
      // Undeclared exception!
      try { 
        range0.split((-1383L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.497542793204923
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-2510L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.getBegin(range_CoordinateSystem0);
      Object object5 = new Object();
      Long long0 = new Long((-2510L));
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      range0.equals(object8);
      Object object9 = new Object();
      Long long1 = new Long(32767L);
      Object object10 = new Object();
      Object object11 = new Object();
      range0.equals(object0);
      Range.of((-1272L), (-1149L));
      Object object12 = new Object();
      assertFalse(object12.equals((Object)object8));
  }

  /**
  //Test case number: 126
  /*Coverage entropy=4.101635293739732
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      range1.complement(range0);
      Range range2 = Range.ofLength(0L);
      Spliterator<Long> spliterator0 = range2.spliterator();
      range2.equals(spliterator0);
      range0.isSubRangeOf(range2);
      range0.equals(spliterator0);
      long long0 = (-1008L);
      Range range3 = range2.intersection(range1);
      range3.toString();
      Range.ofLength(4294967287L);
      Range range4 = Range.of((-1806L), (-1806L));
      range1.intersects(range4);
      // Undeclared exception!
      try { 
        Range.of((-2755L), (-2143574708L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.50496754412194
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-32768L), (-2510L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range.of((-1462L));
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=4.214154373014001
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = 3567L;
      Range range0 = Range.ofLength(9223372036854775779L);
      Range range1 = Range.of(9223372036854775779L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.ofLength(3567L);
      range2.spliterator();
      Range range3 = Range.ofLength(3567L);
      range2.startsBefore(range2);
      range2.isSubRangeOf(range0);
      range0.complementFrom(list0);
      Range range4 = Range.of(255L);
      long long1 = 4294967295L;
      Range range5 = Range.of((-613L), (-302L));
      Long long2 = new Long((-1594L));
      Range range6 = Range.ofLength(9223372036854774678L);
      range6.isSubRangeOf(range3);
      range4.endsBefore(range1);
      range0.endsBefore(range5);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range4.complementFrom(list0);
      Range.of((-613L), 4294967295L);
      // Undeclared exception!
      try { 
        range5.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.445515746596187
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of(0L);
      Long long0 = new Long(0L);
      Long long1 = new Long((-600L));
      range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList0.removeAll(linkedList2);
      Range range1 = Range.ofLength(1084L);
      List<Range> list0 = range1.complementFrom(linkedList0);
      range0.complementFrom(list0);
      Range.ofLength(1990L);
      Range.ofLength(9223372036854775807L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.234578123667491
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.of(2630L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range.of(127L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1325L, 1325L);
      range_Builder0.shift(1325L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1325L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=4.130041442622322
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of(9223372036854775779L);
      Range range1 = Range.of(9223372036854775779L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.ofLength(3567L);
      range2.spliterator();
      Range.ofLength(3567L);
      range2.startsBefore(range2);
      range2.isSubRangeOf(range0);
      range0.complementFrom(list0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range3 = Range.of(3567L, 9223372036854775779L);
      Long long0 = new Long((-5443L));
      range3.isSubRangeOf(range1);
      range2.endsBefore(range3);
      range2.endsBefore(range0);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(list0);
      Range range4 = Range.of(272L, 4294967295L);
      range4.complementFrom(list0);
      Range range5 = Range.ofLength(9223372036854775779L);
      range5.spliterator();
      range0.iterator();
      Range range6 = Range.of(4294967295L);
      range6.intersection(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.2450666539626285
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      long long0 = range0.getLength();
      assertEquals(9223372036854775807L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder(11L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.709960329228896
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.build();
      Range.Builder range_Builder3 = new Range.Builder(0L);
      Range range1 = range_Builder0.build();
      range1.getEnd();
      Range.of((-32768L));
      range_Builder1.contractBegin((-32768L));
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(range_CoordinateSystem0, 0L, (-1753L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.836757513270436
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range range1 = range_Builder0.build();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder1 = range_Builder0.expandEnd(65535L);
      range_Builder1.contractEnd((-128L));
      Range range2 = range1.asRange();
      range2.equals(range_CoordinateSystem0);
      Range.Builder range_Builder2 = range_Builder1.shift((-128L));
      range1.intersection(range0);
      List<Range> list0 = range2.complement(range1);
      range2.complementFrom(list0);
      range0.complementFrom(list0);
      long long0 = 4294967289L;
      // Undeclared exception!
      try { 
        range_Builder2.contractBegin(4294967289L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.6944841801610684
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = 4294967295L;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of(1130L, 1130L);
      Object object0 = new Object();
      long long1 = (-1168L);
      Range.of((-1168L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-1L), 4294967295L);
      Range.Builder range_Builder2 = new Range.Builder(126L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1300L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.5014882033817587
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = 3567L;
      long long1 = 9223372036854775779L;
      Range range0 = Range.ofLength(9223372036854775779L);
      Range.of(9223372036854775779L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775779L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -59 would make range [9223372036854775779 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.4233776502736712
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      List<Range> list0 = range0.split(2147483647L);
      assertEquals(3, list0.size());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.573328177223594
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-1621L));
      range0.equals(long0);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long1 = new Long(2147483647L);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      range0.split(3594L);
      Long long2 = new Long((-1621L));
      Object object9 = new Object();
      Object object10 = new Object();
      range0.equals(object7);
      Range.of(1L, 2147488955L);
      Range.ofLength(4294967295L);
      Object object11 = new Object();
      assertFalse(object11.equals((Object)object0));
  }

  /**
  //Test case number: 140
  /*Coverage entropy=4.0409619545714754
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.build();
      Range.Builder range_Builder3 = new Range.Builder(0L);
      Range range1 = range_Builder0.build();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.of(0L);
      Range.Builder range_Builder4 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder5 = range_Builder3.contractBegin((-65662L));
      Range.Builder range_Builder6 = new Range.Builder(529L);
      range_Builder5.build();
      range_Builder5.shift(2379L);
      Range.Builder range_Builder7 = new Range.Builder(range_Builder5);
      range_Builder7.expandEnd(4294901761L);
      range_Builder7.shift(36L);
      Range.Builder range_Builder8 = new Range.Builder();
      Range.Builder range_Builder9 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      range_Builder9.expandBegin(6558L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.internal.core.util.JillionUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.internal.core.util.JillionUtil
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.806373803982308
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = 4294967295L;
      Range.of(0L, 4294967295L);
      Long long1 = new Long(1004L);
      Range.of(4294967289L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-1383L), 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-2147483523L), 1955L);
      Long long2 = new Long(1989L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, 378L, 378L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 1940L, (-762L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.5357594170716253
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of((-128L));
      assertFalse(range0.isEmpty());
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.2743775744652655
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range1 = Range.of(9223372032559808513L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-3L), (-3L));
      Range.Builder range_Builder1 = range_Builder0.expandBegin(127L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.425910149055313
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-3L), (-3L));
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-3L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.701226784673959
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.of(0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(188L);
      range_Builder0.build();
      Range.Builder range_Builder3 = range_Builder0.shift(65563L);
      range_Builder3.expandEnd(0L);
      range_Builder0.shift(2367L);
      Range.Builder range_Builder4 = range_Builder2.expandBegin((-660L));
      assertFalse(range_Builder4.equals((Object)range_Builder3));
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-3L), 0L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = range_Builder0.expandBegin(127L);
      assertSame(range_Builder0, range_Builder2);
  }
}
