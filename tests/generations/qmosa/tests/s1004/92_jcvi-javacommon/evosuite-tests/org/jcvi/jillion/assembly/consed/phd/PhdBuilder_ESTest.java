/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 15:00:21 GMT 2019
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.time.ZoneId;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jcvi.jillion.assembly.consed.phd.ArtificialPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.Phd;
import org.jcvi.jillion.assembly.consed.phd.PhdBuilder;
import org.jcvi.jillion.assembly.consed.phd.PhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.PhdWholeReadItem;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.internal.trace.chromat.BasicChromatogram;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannel;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannelGroup;
import org.jcvi.jillion.trace.chromat.Chromatogram;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhdBuilder_ESTest extends PhdBuilder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3034);
      shortArray0[1] = (short)2493;
      shortArray0[2] = (short)1283;
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel0, defaultChannel0, defaultChannel0, defaultChannel0);
      BasicChromatogram basicChromatogram0 = new BasicChromatogram("", nucleotideSequence0, qualitySequence1, positionSequence0, defaultChannelGroup0);
      PhdBuilder phdBuilder0 = new PhdBuilder(basicChromatogram0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("Ac<&>4nq#zQm?", nucleotideSequence0, qualitySequence0);
      Range range0 = Range.of(0L);
      MockDate mockDate0 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag("Ac<&>4nq#zQm?", "Ac<&>4nq#zQm?", range0, mockDate0, (String) null, (String) null);
      LinkedList<DefaultPhdReadTag> linkedList0 = new LinkedList<DefaultPhdReadTag>();
      MockDate mockDate1 = new MockDate(0L);
      Instant instant0 = mockDate1.toInstant();
      Date date0 = Date.from(instant0);
      DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag("Ac<&>4nq#zQm?", (String) null, range0, date0, (String) null, "");
      linkedList0.add(defaultPhdReadTag0);
      linkedList0.add(defaultPhdReadTag1);
      LinkedList<DefaultPhdReadTag> linkedList1 = new LinkedList<DefaultPhdReadTag>(linkedList0);
      LinkedList<DefaultPhdReadTag> linkedList2 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList3 = new LinkedList<DefaultPhdReadTag>();
      linkedList2.add(defaultPhdReadTag0);
      linkedList0.listIterator();
      LinkedList<PhdReadTag> linkedList4 = new LinkedList<PhdReadTag>();
      phdBuilder0.readTags(linkedList4);
      LinkedList<DefaultPhdReadTag> linkedList5 = new LinkedList<DefaultPhdReadTag>();
      linkedList3.toArray();
      LinkedList<DefaultPhdReadTag> linkedList6 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList7 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList8 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList9 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList10 = new LinkedList<DefaultPhdReadTag>();
      linkedList1.remove();
      // Undeclared exception!
      try { 
        phdBuilder0.readTags((List<PhdReadTag>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7842068034002128
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      DefaultPhd defaultPhd0 = new DefaultPhd("q9>5|uqF6aBu5i~ZI$", (NucleotideSequence) null, qualitySequence0, (PositionSequence) null);
      defaultPhd0.equals((Object) null);
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
      PhdBuilder phdBuilder1 = phdBuilder0.peaks((PositionSequence) null);
      phdBuilder1.build();
      defaultPhd0.toString();
      phdBuilder0.fakePeaks(837, 1149);
      // Undeclared exception!
      try { 
        phdBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.ArtificialPhd", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("Ac<[>4nq#zQm?", nucleotideSequence0, qualitySequence0);
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence2 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      NucleotideSequence nucleotideSequence2 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence3 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        phdBuilder0.wholeReadItems((List<PhdWholeReadItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("*I", (NucleotideSequence) null, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sequence can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "Ac<&>4nq#zQm?";
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("Ac<&>4nq#zQm?", nucleotideSequence0, qualitySequence0);
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder1 = phdBuilder0.fakePeaks(938, 938);
      phdBuilder1.build();
      String string1 = "";
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put("$2Ik", "_T}C9J");
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap1.put("Hk", "Hk");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap2.put((String) null, "$2Ik");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      hashMap4.put("$2Ik", (String) null);
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      hashMap7.put("", "_T}C9J");
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      hashMap13.put("b$Qm~-G<f6c.<P@z`", " into a Range");
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("qualities can not be null", nucleotideSequence0, qualitySequence0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      PhdBuilder phdBuilder1 = phdBuilder0.comments(hashMap15);
      // Undeclared exception!
      try { 
        phdBuilder1.comments((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      PositionSequence positionSequence0 = null;
      phdBuilder0.peaks((PositionSequence) null);
      byte[] byteArray0 = null;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-34);
      DefaultChannel defaultChannel0 = null;
      try {
        defaultChannel0 = new DefaultChannel((byte[]) null, shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableByteArray", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      hashMap0.put("hQUh6W-dl>ZAVD`R", "NotThymine");
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap9.replaceAll(biFunction0);
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      hashMap9.put("unable to mkdrs for ", "$MO\"");
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("NotThymine", nucleotideSequence0, qualitySequence0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      Map<String, String> map2 = ZoneId.SHORT_IDS;
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      Phd phd0 = phdBuilder0.build();
      assertEquals("NotThymine", phd0.getId());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put("$MO\"", "_T}C9J");
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("$MO\"", (String) null);
      hashMap2.put("hQUh6W-dl>ZAVD`R", (String) null);
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap0.put("_T}C9J", (String) null);
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      hashMap4.put((String) null, (String) null);
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      hashMap0.put("hQUh6W-dl>ZAVD`R", "NotThymine");
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap10.replaceAll(biFunction0);
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      hashMap10.put((String) null, (String) null);
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      hashMap10.put("unable to mkdrs for ", "$MO\"");
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("NotThymine", nucleotideSequence0, qualitySequence0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      Map<String, String> map2 = ZoneId.SHORT_IDS;
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      Phd phd0 = phdBuilder0.build();
      assertEquals("NotThymine", phd0.getId());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put("$2Ik", "_T}C9J");
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("", (String) null);
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap0.put("_T}C9J", (String) null);
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(biFunction0).apply(anyString() , any());
      hashMap0.replaceAll(biFunction0);
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      hashMap8.put("offset can not be negative", (String) null);
      BiFunction<String, Object, String> biFunction1 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap3.replaceAll(biFunction1);
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      hashMap6.put("Hk", "2Uo/(3>ebO@9");
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("H)OP]", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      PhdBuilder phdBuilder1 = phdBuilder0.fakePeaks();
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      ArtificialPhd artificialPhd0 = ArtificialPhd.createNewbler454Phd((String) null, nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(artificialPhd0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity should be > 0 :0
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      LinkedList<DefaultPhdReadTag> linkedList0 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList1 = new LinkedList<DefaultPhdReadTag>(linkedList0);
      LinkedList<DefaultPhdReadTag> linkedList2 = new LinkedList<DefaultPhdReadTag>();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      LinkedList<PhdWholeReadItem> linkedList3 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdReadTag> linkedList4 = new LinkedList<PhdReadTag>();
      DefaultPhd defaultPhd0 = new DefaultPhd("c3^'Z wgt57[9h", nucleotideSequence0, qualitySequence0, positionSequence0, (Map<String, String>) null, linkedList3, linkedList4);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(defaultPhd0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(77);
      Integer integer1 = new Integer(3788);
      Integer integer2 = new Integer((-1521));
      Integer integer3 = new Integer(82);
      Integer integer4 = new Integer((-1974));
      Integer integer5 = new Integer((-412));
      System.setCurrentTimeMillis((-1432L));
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Phd) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // phd to copy can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("org.jcvi.jillion.core.Range$UnsignedByteStartShortLengthRange", nucleotideSequence0, qualitySequence0);
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[4];
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-34);
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel0, defaultChannel0, defaultChannel0, defaultChannel0);
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannelGroup0.equals("\"EB7Wv7c#^]At}G4");
      defaultChannel1.equals(defaultChannelGroup0);
      System.setCurrentTimeMillis(335L);
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel1.equals((Object) null);
      DefaultChannelGroup defaultChannelGroup1 = new DefaultChannelGroup(defaultChannel1, defaultChannel1, defaultChannel0, defaultChannel2);
      DefaultChannel defaultChannel3 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel4 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup2 = new DefaultChannelGroup(defaultChannel1, defaultChannel4, defaultChannel1, defaultChannel2);
      DefaultChannel defaultChannel5 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel5.equals(defaultChannel2);
      DefaultChannelGroup defaultChannelGroup3 = new DefaultChannelGroup(defaultChannel0, defaultChannel4, defaultChannel5, defaultChannel4);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Object object0 = new Object();
      Object object1 = new Object();
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      phdBuilder0.wholeReadItems(linkedList0);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("\"EB7Wv7c#^]At}G4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=\"eb7wv7c#^]at}g4
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<DefaultPhdReadTag> linkedList0 = new LinkedList<DefaultPhdReadTag>();
      linkedList0.add((DefaultPhdReadTag) null);
      LinkedList<DefaultPhdReadTag> linkedList1 = new LinkedList<DefaultPhdReadTag>(linkedList0);
      LinkedList<DefaultPhdReadTag> linkedList2 = new LinkedList<DefaultPhdReadTag>();
      linkedList2.add((DefaultPhdReadTag) null);
      LinkedList<DefaultPhdReadTag> linkedList3 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList4 = new LinkedList<DefaultPhdReadTag>(linkedList0);
      LinkedList<DefaultPhdReadTag> linkedList5 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList6 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList7 = new LinkedList<DefaultPhdReadTag>();
      Range range0 = Range.of(691L);
      DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag("I/'D", "U-SM", range0, (Date) null, "U-SM", "I/'D");
      linkedList0.add(defaultPhdReadTag0);
      LinkedList<DefaultPhdReadTag> linkedList8 = new LinkedList<DefaultPhdReadTag>(linkedList4);
      LinkedList<DefaultPhdReadTag> linkedList9 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList10 = new LinkedList<DefaultPhdReadTag>();
      linkedList9.toArray();
      LinkedList<DefaultPhdReadTag> linkedList11 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList12 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList13 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList14 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList15 = new LinkedList<DefaultPhdReadTag>(linkedList5);
      LinkedList<DefaultPhdReadTag> linkedList16 = new LinkedList<DefaultPhdReadTag>();
      linkedList8.remove();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("sH,d:jS", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.copy();
      assertFalse(phdBuilder1.equals((Object)phdBuilder0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put("$2Ik", "_T}C9J");
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put((String) null, "`VIS/@^HLL0M");
      hashMap2.put("", (String) null);
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap0.put("_T}C9J", (String) null);
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(biFunction0).apply(anyString() , any());
      hashMap0.replaceAll(biFunction0);
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      hashMap8.put("offset can not be negative", (String) null);
      BiFunction<String, Object, String> biFunction1 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap3.replaceAll(biFunction1);
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      hashMap13.put("n!ri<C/Uk", "");
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((String) null, (NucleotideSequence) null, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put("$2Ik", "_T}C9J");
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("", (String) null);
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap0.put("_T}C9J", (String) null);
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      hashMap4.put((String) null, (String) null);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap3.replaceAll(biFunction0);
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      hashMap0.put("", "NotThymine");
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap10.replaceAll(biFunction1);
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      hashMap10.put("unable to mkdirs for ", "$2Ik");
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("NotThymine", nucleotideSequence0, qualitySequence0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      Map<String, String> map2 = ZoneId.SHORT_IDS;
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks(9, (-1745));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // peak spacing must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1114795332719003
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put("$2Ik", "$2Ik");
      hashMap0.put("$2Ik", "_T}C9J");
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("", "$2Ik");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap0.put("_T}C9J", "$2Ik");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      hashMap4.put((String) null, (String) null);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap3.replaceAll(biFunction0);
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      hashMap0.put("", "NotThymine");
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      hashMap10.put("unable to mkdrs for ", "$2Ik");
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("NotThymine", nucleotideSequence0, qualitySequence0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      Map<String, String> map2 = ZoneId.SHORT_IDS;
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      phdBuilder0.fakePeaks(127, 127);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks((-2057), (-2057));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first peak position must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "org.jcvi.jillion.core.Range$UnsignedByteStartShortLengthRange";
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("org.jcvi.jillion.core.Range$UnsignedByteStartShortLengthRange", nucleotideSequence0, qualitySequence0);
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      phdBuilder0.fakePeaks();
      String string1 = "\"EB7_Wv7c#^]6HtJG4";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-34);
      byte byte0 = (byte)88;
      byteArray0[1] = (byte)88;
      short[] shortArray0 = new short[0];
      DefaultChannel defaultChannel0 = null;
      try {
        defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // qualityScore of our range -34
         //
         verifyException("org.jcvi.jillion.core.qual.PhredQuality", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put("$2Ik", "_T}C9J");
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("", (String) null);
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap0.put("_T}C9J", (String) null);
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      hashMap4.put((String) null, (String) null);
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , anyString());
      hashMap4.replaceAll(biFunction0);
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      hashMap4.put("$2Ik", "");
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction1);
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      hashMap2.put("", "HCppmU&.YaHRc$FgCe");
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("", nucleotideSequence0, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualities can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Chromatogram chromatogram0 = null;
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Chromatogram) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chromatogram can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("org.jcvi.jillion.core.Range$UnsignedByteStartShortLengthRange", nucleotideSequence0, qualitySequence0);
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(positionSequence0).getLength();
      phdBuilder0.peaks(positionSequence0);
      String string0 = "30Baf";
      // Undeclared exception!
      try { 
        Range.parseRange("30Baf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 30Baf into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
