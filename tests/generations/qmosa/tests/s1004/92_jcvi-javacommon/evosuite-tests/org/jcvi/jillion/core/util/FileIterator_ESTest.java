/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 15:00:19 GMT 2019
 */

package org.jcvi.jillion.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jcvi.jillion.core.util.FileIterator;
import org.jcvi.jillion.core.util.MultipleFileFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileIterator_ESTest extends FileIterator_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.7939406589051283
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      MockFile mockFile1 = new MockFile("", "j~P5FY1");
      MockFile mockFile2 = new MockFile("", "");
      mockFile2.setExecutable(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile2);
      fileIterator_FileIteratorBuilder0.build();
      File file0 = MockFile.createTempFile("j~P5FY1", "", (File) null);
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      mockFile2.toURI();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeDirectories(false);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder1.fileFilter(multipleFileFilter0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile2);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder5 = fileIterator_FileIteratorBuilder4.includeHiddenFiles(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder3.build();
      fileIterator_FileIteratorBuilder5.build();
      fileIterator0.iterator();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile2);
      fileIterator0.iterator();
      fileIterator0.iterator();
      assertFalse(fileIterator0.hasNext());
      
      File file1 = fileIterator1.getNextFile();
      assertFalse(file1.isDirectory());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.8680419826376538
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      MockFile mockFile1 = new MockFile("", "j~P5FY1");
      mockFile0.setExecutable(false);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator0.updateFileIterator(mockFile1);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/j~P5FY1");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".Rw{QMTtx(C!&>A");
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder3.includeHiddenFiles(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      fileIterator1.iterator();
      fileIterator1.setUpInitialState(mockFile0);
      fileIterator_FileIteratorBuilder4.includeDirectories(false);
      fileIterator_FileIteratorBuilder2.includeDirectories(false);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder0.build();
      fileIterator2.iterator();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator0.iterator();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder5 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator3 = fileIterator_FileIteratorBuilder5.build();
      File file0 = fileIterator3.next();
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      assertFalse(fileIterator3.hasNext());
      assertTrue(file0.equals((Object)mockFile1));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.757115373721886
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      MockFile mockFile2 = new MockFile("D'j9L1f'B3^", "j~P5FY1");
      MockFile mockFile3 = new MockFile("org.jcvi.jillion.core.util.FileIterator$BreadthFirstFileIteratorBuilder", "");
      mockFile0.setExecutable(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator1.updateFileIterator(mockFile3);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile3);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder2.includeDirectories(false);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile3);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder2.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator2.forEachRemaining(consumer0);
      fileIterator2.setUpInitialState(mockFile3);
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder4.build();
      fileIterator1.iterator();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder2.build();
      fileIterator0.iterator();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder5 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      assertFalse(fileIterator_FileIteratorBuilder5.equals((Object)fileIterator_FileIteratorBuilder3));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.4619929911398493
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$DepthFirstFileIterator", "", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder1.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList2);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList3);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList3);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(linkedList2);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(linkedList5);
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(linkedList7);
      LinkedList<FileFilter> linkedList8 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList9 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter12 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter13 = new MultipleFileFilter(linkedList6);
      MultipleFileFilter multipleFileFilter14 = null;
      try {
        multipleFileFilter14 = new MultipleFileFilter((FileFilter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.011347148852949
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      MockFile mockFile1 = new MockFile(mockFile0, "|k5]kS");
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      // Undeclared exception!
      try { 
        fileIterator0.setUpInitialState((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.5587686432826797
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      MockFile.createTempFile("K1/^KRm\tDpi=)q^x", "org.jcvi.jllion.core.util.iter.IteratorUtil$EmptyIterator");
      fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      assertTrue(fileIterator0.hasNext());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.7390392027655768
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      MockFile mockFile1 = new MockFile("j~P5FY1");
      MockFile mockFile2 = new MockFile("", "");
      mockFile2.setExecutable(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile2);
      fileIterator_FileIteratorBuilder0.build();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator0.updateFileIterator(mockFile1);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileIterator_FileIteratorBuilder1.fileFilter(multipleFileFilter0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile2);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      fileIterator1.setUpInitialState(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder3.includeDirectories(false);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder4.build();
      mockFile0.deleteOnExit();
      fileIterator2.setUpInitialState(mockFile1);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile2);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile2);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder5 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder5.equals((Object)fileIterator_FileIteratorBuilder3));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.481792160669158
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Integer integer0 = new Integer(7);
      Integer integer1 = new Integer(7);
      boolean boolean0 = true;
      mockFile0.setExecutable(true);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      File file0 = null;
      FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      mockFile0.toURI();
      // Undeclared exception!
      try { 
        fileIterator0.updateFileIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.7967243282088585
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder3.includeDirectories(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder4.build();
      fileIterator_FileIteratorBuilder0.build();
      FileSystemHandling.shouldAllThrowIOExceptions();
      fileIterator0.setUpInitialState(mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder2.build();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      File file0 = fileIterator2.getNextFile();
      FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      File file1 = fileIterator1.next();
      assertNotSame(mockFile0, file1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3374560116297696
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/92_jcvi-javacommon");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(false, false);
      MockFile.createTempFile("K-j-]MP#@#]y|Y", "K-j-]MP#@#]y|Y", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator_FileIteratorBuilder0.build();
      MockFile mockFile1 = new MockFile("");
      MockFile mockFile2 = new MockFile("", "j~P5FY1");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendDataToFile(evoSuiteFile1, (byte[]) null);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator0.next();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder1.equals((Object)fileIterator_FileIteratorBuilder0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.5120122126771527
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeDirectories(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder3.build();
      fileIterator_FileIteratorBuilder3.build();
      fileIterator1.hasNext();
      fileIterator0.setUpInitialState(mockFile0);
      fileIterator_FileIteratorBuilder2.build();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator0.iterator();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator1.iterator();
      fileIterator1.getNextFile();
      fileIterator_FileIteratorBuilder3.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder5 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder5.equals((Object)fileIterator_FileIteratorBuilder4));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.4450047939551998
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter4 = null;
      try {
        multipleFileFilter4 = new MultipleFileFilter((List<FileFilter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.4905201885690227
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      Integer integer0 = new Integer((-2627));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(10);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer(1633);
      Integer integer6 = new Integer(0);
      Integer integer7 = new Integer(1450);
      Integer integer8 = new Integer(31);
      Integer integer9 = new Integer((-8));
      Integer integer10 = new Integer((-28));
      Integer integer11 = new Integer(1);
      Integer integer12 = new Integer(0);
      assertTrue(integer12.equals((Object)integer1));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1573766571289967
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/K-j-\\]MP#@#]y|Y0K-j-\\]MP#@#]y|Y");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(false, false);
      MockFile mockFile1 = new MockFile("", "K-j-]MP#@#]y|Y");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator_FileIteratorBuilder0.build();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/92_jcvi-javacommon");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      MockFile mockFile2 = new MockFile("");
      MockFile mockFile3 = new MockFile("", "j~P5FY1");
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendDataToFile(evoSuiteFile2, (byte[]) null);
      FileSystemHandling.appendStringToFile(evoSuiteFile2, "");
      mockFile0.setReadable(true, true);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.7282746983432244
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder3.includeDirectories(true);
      fileIterator_FileIteratorBuilder4.build();
      fileIterator_FileIteratorBuilder0.build();
      FileSystemHandling.shouldAllThrowIOExceptions();
      fileIterator0.setUpInitialState(mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder5 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder5.build();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder5.includeDirectories(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder6 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder6.equals((Object)fileIterator_FileIteratorBuilder0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2864704250356893
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      MockFile mockFile1 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder3.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder3.includeDirectories(false);
      fileIterator_FileIteratorBuilder4.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder1.build();
      fileIterator0.getNextFile();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder5 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder5.equals((Object)fileIterator_FileIteratorBuilder3));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.882836849907529
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      MockFile mockFile1 = new MockFile("", "j~P5FY1");
      MockFile mockFile2 = new MockFile("", "");
      fileIterator0.hasNext();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile2);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.updateFileIterator(mockFile1);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile2);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder0.build();
      fileIterator2.setUpInitialState(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeDirectories(false);
      FileIterator fileIterator3 = fileIterator_FileIteratorBuilder3.build();
      fileIterator3.iterator();
      fileIterator1.setUpInitialState(mockFile2);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator1.iterator();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile2);
      assertFalse(fileIterator_FileIteratorBuilder4.equals((Object)fileIterator_FileIteratorBuilder0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2140666558065463
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      Integer integer0 = new Integer(10);
      Integer integer1 = new Integer(10);
      Integer integer2 = new Integer(1369);
      Integer integer3 = new Integer((-403));
      Integer integer4 = new Integer((-2751));
      Integer integer5 = new Integer(1369);
      Integer integer6 = new Integer(10);
      Integer integer7 = new Integer((-1206));
      Integer integer8 = new Integer((-403));
      Integer integer9 = new Integer(10);
      Integer[] integerArray0 = new Integer[17];
      integerArray0[0] = integer2;
      integerArray0[1] = integer3;
      integerArray0[2] = integer4;
      integerArray0[11] = integer6;
      integerArray0[4] = integer6;
      integerArray0[5] = integer8;
      Integer integer10 = new Integer((-2751));
      integerArray0[6] = integer10;
      Integer integer11 = new Integer((-403));
      integerArray0[7] = integer3;
      integerArray0[8] = integer5;
      Integer integer12 = new Integer((int) integerArray0[5]);
      assertFalse(integer12.equals((Object)integer6));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^XOhCTC5~Ph", "^XOhCTC5~Ph");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.setExecutable(true, true);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.850986769527481
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      MockFile mockFile1 = new MockFile("", "j~P5FY1");
      MockFile mockFile2 = new MockFile("", "");
      mockFile2.setExecutable(false);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile2);
      mockFile1.getCanonicalPath();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator0.updateFileIterator(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile2);
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder0.build();
      fileIterator2.setUpInitialState(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator fileIterator3 = fileIterator_FileIteratorBuilder3.build();
      fileIterator3.iterator();
      fileIterator1.setUpInitialState(mockFile2);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      MockFile mockFile3 = new MockFile("");
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile3);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile3);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile3);
      // Undeclared exception!
      try { 
        fileIterator1.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^XOhCTC5~Ph", "^XOhCTC5~Ph");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.432757197408911
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      linkedList1.toArray();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList1);
      linkedList1.add((FileFilter) multipleFileFilter1);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList2);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList3);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      linkedList4.removeAll(linkedList1);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      linkedList6.retainAll(linkedList4);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList6);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter8 = null;
      try {
        multipleFileFilter8 = new MultipleFileFilter((List<FileFilter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.480153143193688
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder3.build();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.8020227520121237
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      fileIterator_FileIteratorBuilder3.build();
      fileIterator0.iterator();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.5972987238292515
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList2);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      linkedList4.removeAll(linkedList3);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      linkedList3.retainAll(linkedList5);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList4);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList3);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter7 = null;
      try {
        multipleFileFilter7 = new MultipleFileFilter((List<FileFilter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.6536889947382583
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(false);
      fileIterator_FileIteratorBuilder2.build();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator0.iterator();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder3.includeDirectories(false);
      assertFalse(fileIterator_FileIteratorBuilder4.equals((Object)fileIterator_FileIteratorBuilder2));
  }
}
