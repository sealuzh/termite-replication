/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 16:12:23 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.controller.StructuredMenuItemHolder;
import freemind.extensions.ExportHook;
import freemind.main.FreeMind;
import freemind.main.FreeMindApplet;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.filemode.FileController;
import freemind.modes.filemode.FileMode;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.Writer;
import java.time.temporal.ChronoField;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Stack;
import java.util.Vector;
import javax.swing.AbstractButton;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.JTree;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.metal.MetalComboBoxUI;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellEditor;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreePath;
import org.apache.batik.css.parser.Parser;
import org.apache.batik.gvt.renderer.StrokingTextPainter;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.ImageHandlerPNGEncoder;
import org.apache.fop.fonts.Font;
import org.apache.fop.fonts.MultiByteFont;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFPage;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.templates.StylesheetRoot;
import org.apache.xalan.transformer.CountersTable;
import org.apache.xalan.transformer.TransformerImpl;
import org.apache.xml.utils.DefaultErrorHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Coordinate;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.MemoryTileCache;
import org.openstreetmap.gui.jmapviewer.Tile;
import plugins.map.MapDialog;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KeyEvent.getExtendedKeyCodeForChar(0);
      String string0 = AbstractButton.TEXT_CHANGED_PROPERTY;
      PDFResources pDFResources0 = new PDFResources(0);
      PDFPage pDFPage0 = new PDFPage(pDFResources0, 0, 0);
      PDFDocument pDFDocument0 = new PDFDocument("text");
      pDFResources0.setObjectNumber(3218);
      pDFResources0.getObjectID();
      pDFPage0.setDocument(pDFDocument0);
      EmptyBorder emptyBorder0 = new EmptyBorder(167, 0, 8658, 0);
      MultiByteFont multiByteFont0 = new MultiByteFont();
      Font font0 = new Font("ISO-8859-1", multiByteFont0, 0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      BufferedImage bufferedImage0 = Tile.ERROR_IMAGE;
      Graphics graphics0 = bufferedImage0.getGraphics();
      jDayChooser_DecoratorButton0.paint(graphics0);
      System.setCurrentTimeMillis(0);
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2358379389334586
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = SwingConstants.NORTH_EAST;
      int int1 = SwingConstants.TOP;
      JTree jTree0 = new JTree((Vector<?>) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0);
      Stack<Integer> stack0 = new Stack<Integer>();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>();
      DefaultCellEditor defaultCellEditor0 = new DefaultCellEditor(jComboBox0);
      DefaultTreeCellEditor defaultTreeCellEditor1 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0, defaultCellEditor0);
      DefaultErrorHandler defaultErrorHandler0 = new DefaultErrorHandler(false);
      StylesheetRoot stylesheetRoot0 = new StylesheetRoot(defaultErrorHandler0);
      StylesheetRoot stylesheetRoot1 = stylesheetRoot0.getStylesheetRoot();
      TransformerImpl transformerImpl0 = new TransformerImpl(stylesheetRoot1);
      TransformerImpl transformerImpl1 = new TransformerImpl(stylesheetRoot0);
      transformerImpl1.getCountersTable();
      DefaultTreeCellEditor defaultTreeCellEditor2 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0);
      DefaultTreeCellEditor defaultTreeCellEditor3 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0, defaultCellEditor0);
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      DefaultTreeCellEditor defaultTreeCellEditor4 = new DefaultTreeCellEditor(jTree0, (DefaultTreeCellRenderer) null, defaultTreeCellEditor3);
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.BLUE;
      jDayChooser0.setForeground(color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getDecorationBackgroundColor();
      int int2 = jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, int2);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2123073721076065
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getAutoscrolls();
      jDayChooser0.setMaxDayCharacters((-1));
      StyleContext styleContext0 = new StyleContext();
      JTextPane jTextPane0 = new JTextPane();
      styleContext0.getStyleNames();
      Style style0 = jTextPane0.getLogicalStyle();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)StrokingTextPainter.ANCHOR_TYPE;
      ((StyleContext.NamedStyle) style0).removeAttribute(gVTAttributedCharacterIterator_TextAttribute0);
      ((StyleContext.NamedStyle) style0).addAttribute(jTextPane0, jTextPane0);
      styleContext0.getBackground(style0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setDay((-1));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addMouseListener((MouseListener) null);
      jDayChooser0.setMaxDayCharacters((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_INITIAL);
      jDayChooser0.getSelectedDay();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.updateUI();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KeyEvent.getExtendedKeyCodeForChar(0);
      InputEvent.getModifiersExText(0);
      PDFResources pDFResources0 = new PDFResources(0);
      PDFPage pDFPage0 = new PDFPage(pDFResources0, 0, 0);
      pDFPage0.getDocument();
      pDFResources0.setObjectNumber(3218);
      pDFPage0.setDocument((PDFDocument) null);
      EmptyBorder emptyBorder0 = new EmptyBorder(167, 0, 8658, 0);
      MultiByteFont multiByteFont0 = new MultiByteFont();
      Font font0 = new Font("ISO-8859-1", multiByteFont0, 0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ActionEvent actionEvent0 = new ActionEvent(pDFResources0, 0, (String) null);
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1424884148739936
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.setDay(3);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-73);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ExportHook exportHook0 = new ExportHook();
      Coordinate coordinate0 = new Coordinate((-1500.00148), (byte)28);
      FileMode fileMode0 = new FileMode();
      FileController fileController0 = null;
      try {
        fileController0 = new FileController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2921058708494164
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.KOREAN;
      jDayChooser0.setDay(33);
      MockDate mockDate0 = new MockDate(33, 33, 33);
      jDayChooser0.setMonth(33);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Stack<String> stack0 = new Stack<String>();
      JTree jTree0 = new JTree(stack0);
      jTree0.getClosestRowForLocation(160, 33);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jTree0, 202, 202, (-1), 37, ':', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jTree0, 98312, 160, 160, 202, 'Q', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent1);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addMouseListener((MouseListener) null);
      jDayChooser0.setMaxDayCharacters(2);
      jDayChooser0.getSelectedDay();
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2025867764677276
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.minSelectableDate;
      Date date1 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.isDayBordersVisible();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      Locale locale0 = jMonthChooser0.getLocale();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "N,=$\"tWTTzMoHa");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale0.getDisplayVariant();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      locale0.clone();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.isDayBordersVisible();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      
      DefaultErrorHandler defaultErrorHandler0 = new DefaultErrorHandler(true);
      StylesheetRoot stylesheetRoot0 = new StylesheetRoot(defaultErrorHandler0);
      TransformerImpl transformerImpl0 = new TransformerImpl(stylesheetRoot0);
      transformerImpl0.getCountersTable();
      Hashtable<JButton, Calendar> hashtable0 = new Hashtable<JButton, Calendar>();
      JTree jTree0 = new JTree(hashtable0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0);
      DefaultTreeCellEditor defaultTreeCellEditor1 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0, defaultTreeCellEditor0);
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      DefaultTreeCellEditor defaultTreeCellEditor2 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0);
      DefaultTreeCellEditor defaultTreeCellEditor3 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0, defaultTreeCellEditor2);
      DefaultTreeCellEditor defaultTreeCellEditor4 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer1, defaultTreeCellEditor3);
      JDayChooser jDayChooser1 = new JDayChooser();
      Color color0 = Color.BLUE;
      JDayChooser jDayChooser2 = new JDayChooser(true);
      Color color1 = Color.GREEN;
      jDayChooser2.setForeground(color1);
      assertTrue(jDayChooser2.isWeekOfYearVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PMP){7rct\"V");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.168986997596472
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(1326);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, (-1L), 1326, 39, 'F');
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getInputMethodListeners();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      menuSelectionManager0.isComponentPartOfCurrentMenu(jDayChooser0);
      MenuElement[] menuElementArray0 = new MenuElement[2];
      JMenu jMenu0 = new JMenu("neWj'u13", true);
      menuElementArray0[0] = (MenuElement) jMenu0;
      JMenuItem jMenuItem0 = new JMenuItem("day");
      menuElementArray0[1] = (MenuElement) jMenuItem0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(defaultTreeCellRenderer0, 90, 0L, 198, 4, 'Y', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      KeyEvent keyEvent1 = new KeyEvent(jMenu0, 714, 0L, 198, 90, '3');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawDays();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3020007824632276
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      jDayChooser0.setMaxDayCharacters(0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 63741, 11L, (-592), 0, '6', 0);
      KeyEvent.getExtendedKeyCodeForChar(0);
      InputEvent.getModifiersExText(0);
      keyEvent0.consume();
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.isDecorationBordersVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Properties properties0 = FreeMindApplet.userProps;
      SystemColor systemColor0 = SystemColor.info;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      System.setCurrentTimeMillis(11L);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.initDecorations();
      jDayChooser1.isDecorationBordersVisible();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser_DecoratorButton0, 0);
      jDayChooser1.focusLost(focusEvent0);
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertEquals(1, jDayChooser1.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3111907639903992
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.KOREAN;
      jDayChooser0.setDay(33);
      MockDate mockDate0 = new MockDate(33, 33, 33);
      jDayChooser0.setMonth(33);
      jDayChooser0.isDecorationBackgroundVisible();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Stack<String> stack0 = new Stack<String>();
      JTree jTree0 = new JTree(stack0);
      jTree0.getClosestRowForLocation(160, 33);
      jTree0.setFocusTraversalKeysEnabled(true);
      jTree0.setFocusTraversalPolicyProvider(true);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-125);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      defaultTreeCellRenderer0.getInputMethodListeners();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      defaultTreeCellRenderer0.getAncestorListeners();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(defaultTreeCellRenderer0, 500, 160, 2, 2, '%', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 287, (-2297), (-2297), 33, '%');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.221751970568936
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getAutoscrolls();
      jDayChooser0.setMaxDayCharacters((-1));
      StyleContext styleContext0 = new StyleContext();
      StyleContext styleContext1 = new StyleContext();
      JTextPane jTextPane0 = new JTextPane();
      Style style0 = jTextPane0.getLogicalStyle();
      Color color0 = styleContext0.getBackground(style0);
      jDayChooser0.setDayBordersVisible(false);
      jTextPane0.getNavigationFilter();
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1283.103F;
      floatArray0[1] = 0.0F;
      color0.getRGBComponents(floatArray0);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 3163;
      floatArray0[6] = 1283.103F;
      floatArray0[7] = 1283.103F;
      color0.getColorComponents(floatArray0);
      SystemColor systemColor0 = SystemColor.info;
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.isDayBordersVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1424884148739936
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.setDay(4);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-73);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ExportHook exportHook0 = new ExportHook();
      Coordinate coordinate0 = new Coordinate((-1500.00148), (byte)28);
      FileMode fileMode0 = new FileMode();
      FileController fileController0 = null;
      try {
        fileController0 = new FileController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.332938351813909
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Properties properties0 = FreeMindApplet.userProps;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 90, false);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setEnabled(false);
      SystemColor systemColor0 = SystemColor.window;
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.setMonth((-12));
      jDayChooser0.isDecorationBordersVisible();
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(31, int0);
      
      jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      JTextPane jTextPane0 = new JTextPane();
      Style style0 = jTextPane0.getLogicalStyle();
      styleContext0.getBackground(style0);
      JDayChooser jDayChooser0 = new JDayChooser();
      ChronoField chronoField0 = ChronoField.INSTANT_SECONDS;
      ActionEvent actionEvent0 = new ActionEvent(chronoField0, (-413), "PREFORMATTED");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.time.temporal.ChronoField cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2000930504389253
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.KOREAN;
      jDayChooser0.setDay(33);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMonth(33);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.322157729725919
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "6%BAXR");
      JDayChooser jDayChooser0 = new JDayChooser();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setMonth(90);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3284, 90, 11, 3284, 'H');
      keyEvent0.consume();
      keyEvent0.setKeyCode(318);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters(21);
      jDayChooser0.setDay(90);
      jDayChooser0.setDay(1312);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 3284, (-808L), (-3529), (-3529), 'H');
      jDayChooser0.keyPressed(keyEvent0);
      StructuredMenuHolder.StructuredMenuListener structuredMenuHolder_StructuredMenuListener0 = new StructuredMenuHolder.StructuredMenuListener();
      structuredMenuHolder_StructuredMenuListener0.addItem((StructuredMenuItemHolder) null);
      ActionEvent actionEvent0 = new ActionEvent(structuredMenuHolder_StructuredMenuListener0, 113, "zhAbXDv'N2", 11);
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.254507517541989
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(false);
      Color color0 = Color.BLACK;
      jDayChooser0.setWeekdayForeground(color0);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      Date date0 = jDayChooser1.minSelectableDate;
      MockDate mockDate0 = new MockDate((-1617), (-1617), (-1617), 27, (-1617));
      jDayChooser1.setSelectableDateRange(date0, mockDate0);
      jDayChooser0.setDay(13);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.addMouseListener((MouseListener) null);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jPanel0, 11, 1929L, 27, 27, 'D', 27);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      Class<StructuredMenuHolder.StructuredMenuListener> class0 = StructuredMenuHolder.StructuredMenuListener.class;
      jDayChooser0.isOptimizedDrawingEnabled();
      jDayChooser0.getListeners(class0);
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(164, color0.getRed());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1509776724370013
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      Color color0 = Color.BLACK;
      jDayChooser0.setWeekdayForeground(color0);
      MockFile mockFile0 = new MockFile("]?XX{", "]?XX{");
      // Undeclared exception!
      try { 
        java.awt.Font.createFont(8593, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // font format not recognized
         //
         verifyException("java.awt.Font", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.274594055977923
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-473), (-1L), 90, 90, '.', 0);
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.getDayPanel();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDay(0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addMouseListener((MouseListener) null);
      jDayChooser0.setMinSelectableDate((Date) null);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.165597431903902
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay((-109));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-165), 90, 312, 312, '(');
      keyEvent0.setKeyChar('Y');
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.096591278091726
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      JTextPane jTextPane0 = new JTextPane();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      styleContext0.getStyleNames();
      jTextPane0.getDragEnabled();
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet(styleContext_NamedStyle0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.init();
      int int0 = jDayChooser0.getDay();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1700419077878936
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(90);
      jDayChooser0.setFocus();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Properties properties0 = FreeMind.props;
      Properties properties1 = FreeMindApplet.userProps;
      int int0 = jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(31, int0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2054857020763965
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      JTextPane jTextPane0 = new JTextPane();
      Style style0 = jTextPane0.getLogicalStyle();
      Color color0 = styleContext0.getBackground(style0);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setFocus();
      jDayChooser0.drawWeeks();
      int int0 = jDayChooser0.getDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.3364286742442704
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(90);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3284, 90, 11, 3284, 'H');
      keyEvent0.consume();
      keyEvent0.setKeyCode(318);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters(21);
      jDayChooser0.setDay(90);
      jDayChooser0.setDay(1312);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.setText("day");
      jDayChooser_DecoratorButton1.addMouseListener((MouseListener) null);
      jDayChooser_DecoratorButton0.addMouseListener((MouseListener) null);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setWeekOfYearVisible(true);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      KeyEvent.getExtendedKeyCodeForChar(0);
      InputEvent.getModifiersExText(0);
      PDFResources pDFResources0 = new PDFResources(0);
      PDFPage pDFPage0 = new PDFPage(pDFResources0, 0, 0);
      pDFPage0.getDocument();
      pDFResources0.setObjectNumber(0);
      pDFPage0.setDocument((PDFDocument) null);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.2466573750711447
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getAutoscrolls();
      jDayChooser0.setMaxDayCharacters(3163);
      StyleContext styleContext0 = new StyleContext();
      JTextPane jTextPane0 = new JTextPane();
      Style style0 = jTextPane0.getLogicalStyle();
      styleContext0.getBackground(style0);
      jDayChooser0.setFocus();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Properties properties0 = FreeMind.props;
      Parser parser0 = new Parser();
      parser0.parseSelectors("<x _R$q.bW2M;");
      parser0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2515579499378946
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(13);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.addAncestorListener(ancestorListener0);
      jDayChooser0.setDayBordersVisible(false);
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      metalComboBoxUI_MetalComboBoxLayoutManager0.removeLayoutComponent(jDayChooser0);
      jDayChooser0.setLayout(metalComboBoxUI_MetalComboBoxLayoutManager0);
      jDayChooser0.setMaxDayCharacters((-1285));
      Color color0 = Color.GREEN;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2407;
      floatArray0[1] = (float) 13;
      floatArray0[2] = (float) 2407;
      floatArray0[3] = (float) 2407;
      floatArray0[4] = (float) (-1285);
      floatArray0[5] = (float) 13;
      floatArray0[6] = 0.0F;
      Color.RGBtoHSB(39, 13, 2407, floatArray0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.3305105411010687
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(761);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 761;
      floatArray0[1] = (float) 761;
      floatArray0[2] = (float) 761;
      floatArray0[6] = (float) 761;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) 761;
      floatArray0[7] = (float) 761;
      floatArray0[8] = (float) 761;
      color0.getRGBColorComponents(floatArray0);
      jDayChooser0.updateUI();
      java.awt.Font font0 = null;
      jDayChooser0.setFont((java.awt.Font) null);
      jDayChooser0.drawWeeks();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setYear(761);
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setForeground(color0);
      Parser parser0 = new Parser();
      KeyStroke.getKeyStroke("day");
      jDayChooser0.unregisterKeyboardAction((KeyStroke) null);
      jDayChooser0.setMonth(761);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2021652724202685
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      KeyEvent.getExtendedKeyCodeForChar(0);
      InputEvent.getModifiersExText(0);
      PDFResources pDFResources0 = new PDFResources(0);
      PDFPage pDFPage0 = new PDFPage(pDFResources0, 0, 0);
      pDFPage0.getDocument();
      pDFResources0.setObjectNumber(3218);
      pDFPage0.setDocument((PDFDocument) null);
      EmptyBorder emptyBorder0 = new EmptyBorder(167, 0, 8658, 0);
      MultiByteFont multiByteFont0 = new MultiByteFont();
      Font font0 = new Font("ISO-8859-1", multiByteFont0, 0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      BufferedImage bufferedImage0 = Tile.ERROR_IMAGE;
      Graphics graphics0 = bufferedImage0.getGraphics();
      jDayChooser_DecoratorButton0.paint(graphics0);
      System.setCurrentTimeMillis(0);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser_DecoratorButton0.paint(graphics0);
      jDayChooser0.setDecorationBackgroundColor(((SunGraphics2D) graphics0).foregroundColor);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2054857020763965
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setYear(0);
      BrowseMode browseMode0 = new BrowseMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      KeyEvent.getExtendedKeyCodeForChar(0);
      InputEvent.getModifiersExText(0);
      PDFResources pDFResources0 = new PDFResources(0);
      PDFPage pDFPage0 = new PDFPage(pDFResources0, 0, 0);
      pDFPage0.getDocument();
      pDFResources0.setObjectNumber(3218);
      pDFPage0.setDocument((PDFDocument) null);
      EmptyBorder emptyBorder0 = new EmptyBorder(167, 0, 8658, 0);
      MultiByteFont multiByteFont0 = new MultiByteFont();
      Font font0 = new Font("ISO-8859-1", multiByteFont0, 0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      BufferedImage bufferedImage0 = Tile.ERROR_IMAGE;
      System.setCurrentTimeMillis(0);
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.minSelectableDate;
      Date date1 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setDay(4);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isDefaultButton();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-73);
      jDayChooser_DecoratorButton0.requestFocusInWindow();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser_DecoratorButton0.setText("11");
      jDayChooser0.getBackground();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "Windows");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.200772577016608
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = FreeMindApplet.userProps;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileUtil fileUtil0 = FileUtil.getDefaultInstance();
      fileUtil0.delete("@s)+h/gq");
      jDayChooser0.setMonth(1181);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 'f', 62135596800000L, 11, 5, 'f');
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.1848015264965306
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.selectedDay = (JButton) jDayChooser_DecoratorButton0;
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMaxDayCharacters(1038);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(167);
      jDayChooser0.setDay(376);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addMouseListener((MouseListener) null);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-49);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.1708559617143055
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setVerifyInputWhenFocusTarget(false);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      Locale locale0 = jMonthChooser0.getLocale();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = Locale.UK;
      locale0.getDisplayScript(locale1);
      Boolean boolean0 = new Boolean("month");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("month", 0.0);
      linkedList0.add(locale_LanguageRange0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      locale0.clone();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.isDayBordersVisible();
      DefaultErrorHandler defaultErrorHandler0 = new DefaultErrorHandler((boolean) boolean0);
      StylesheetRoot stylesheetRoot0 = new StylesheetRoot(defaultErrorHandler0);
      TransformerImpl transformerImpl0 = new TransformerImpl(stylesheetRoot0);
      CountersTable countersTable0 = transformerImpl0.getCountersTable();
      JTree jTree0 = new JTree(countersTable0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      jTree0.getPathForRow((short)0);
      jTree0.getPathBounds((TreePath) null);
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0);
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      DefaultTreeCellEditor defaultTreeCellEditor1 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer1);
      DefaultTreeCellEditor defaultTreeCellEditor2 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0, defaultTreeCellEditor1);
      JDayChooser jDayChooser1 = new JDayChooser();
      MapDialog mapDialog0 = new MapDialog();
      Coordinate coordinate0 = new Coordinate((-1720.6), 1);
      FileMode fileMode0 = new FileMode();
      FileController fileController0 = null;
      try {
        fileController0 = new FileController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.191208839004363
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(842);
      MockDate mockDate0 = new MockDate(0, (-3478), 33);
      jDayChooser0.setMonth(33);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Stack<String> stack0 = new Stack<String>();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(mockDate0, date0);
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      JMapViewer jMapViewer0 = new JMapViewer(memoryTileCache0, 33);
      MindMapMode mindMapMode0 = new MindMapMode();
      MindMapMode mindMapMode1 = new MindMapMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(mindMapMode1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getWeekdayForeground();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.175592593151128
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      JTextPane jTextPane0 = new JTextPane();
      Style style0 = jTextPane0.getLogicalStyle();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      styleContext0.getBackground(style0);
      KeyEvent keyEvent0 = new KeyEvent(jTextPane0, 0, 0, 0, 45, 'r', 0);
      keyEvent0.setSource(jTextPane0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.202177847398577
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDecorationBackgroundVisible();
      KeyEvent.getExtendedKeyCodeForChar(0);
      jDayChooser0.isDecorationBordersVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(";9kf?Eah;~k;-95cK");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-6);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      EmptyBorder emptyBorder0 = new EmptyBorder(164, 0, 8658, 0);
      jDayChooser_DecoratorButton0.setBorder(emptyBorder0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile(";9kf?Eah;~k;-95cK");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, true, true);
      MultiByteFont multiByteFont0 = new MultiByteFont();
      Font font0 = new Font((String) null, multiByteFont0, 0);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.setEnabled(true);
      ImageHandlerPNGEncoder imageHandlerPNGEncoder0 = new ImageHandlerPNGEncoder(";9kf?Eah;~k;-95cK", "no");
      assertEquals(".png", imageHandlerPNGEncoder0.getSuffix());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = SwingConstants.NORTH_EAST;
      int int1 = SwingConstants.TOP;
      jDayChooser0.setDay(1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ExportHook exportHook0 = new ExportHook();
      // Undeclared exception!
      try { 
        exportHook0.createBufferedImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.extensions.ExportHook", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1647537927513762
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.addListeners(0);
      jDayChooser0.getDayPanel();
      jDayChooser0.setDay(0);
      jDayChooser0.getMaxSelectableDate();
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.1699680061509725
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxSelectableDate();
      Date date0 = jDayChooser0.maxSelectableDate;
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertSame(date1, date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.0489832613940764
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Properties properties0 = FreeMind.props;
      Properties properties1 = FreeMindApplet.userProps;
      System.setCurrentTimeMillis(62135596800000L);
      jDayChooser0.setVerifyInputWhenFocusTarget(true);
      jDayChooser0.getMouseMotionListeners();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getInputMap();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      jDayChooser1.getBounds(rectangle0);
      jDayChooser1.initDecorations();
      jDayChooser_DecoratorButton0.isRolloverEnabled();
      System.setCurrentTimeMillis((-2256L));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3820, 19, 2152);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2152);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, pipedOutputStream0, (-1099), 3899);
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = null;
      try {
        pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.1951877508042617
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      jDayChooser0.setMaxDayCharacters(0);
      KeyEvent.getExtendedKeyCodeForChar(0);
      InputEvent.getModifiersExText(0);
      jDayChooser0.isDecorationBordersVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.setBounds((-1096), 13, 727, 0);
      PDFResources pDFResources0 = new PDFResources(0);
      PDFPage pDFPage0 = new PDFPage(pDFResources0, 0, 0);
      pDFResources0.setObjectNumber(3218);
      EmptyBorder emptyBorder0 = new EmptyBorder(164, 0, 8658, 0);
      jDayChooser_DecoratorButton0.setBorder(emptyBorder0);
      MultiByteFont multiByteFont0 = new MultiByteFont();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.2054607286107037
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.KOREAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      Date date2 = jDayChooser0.getMinSelectableDate();
      assertSame(date2, date1);
      
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.208313128881091
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = SwingConstants.NORTH_EAST;
      int int1 = SwingConstants.TOP;
      JTree jTree0 = new JTree((Vector<?>) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0);
      Stack<Integer> stack0 = new Stack<Integer>();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(stack0);
      DefaultCellEditor defaultCellEditor0 = new DefaultCellEditor(jComboBox0);
      DefaultErrorHandler defaultErrorHandler0 = new DefaultErrorHandler(false);
      StylesheetRoot stylesheetRoot0 = new StylesheetRoot(defaultErrorHandler0);
      StylesheetRoot stylesheetRoot1 = stylesheetRoot0.getStylesheetRoot();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)1;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte) (-93);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(rowOutputBinary0, false);
      defaultTreeCellRenderer0.list((PrintStream) mockPrintStream0, (int) (byte) (-5));
      TransformerImpl transformerImpl0 = new TransformerImpl(stylesheetRoot1);
      TransformerImpl transformerImpl1 = new TransformerImpl(stylesheetRoot0);
      CountersTable countersTable0 = transformerImpl1.getCountersTable();
      JTree jTree1 = new JTree(countersTable0);
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      DefaultTreeCellEditor defaultTreeCellEditor1 = new DefaultTreeCellEditor(jTree1, defaultTreeCellRenderer0);
      DefaultTreeCellEditor defaultTreeCellEditor2 = new DefaultTreeCellEditor(jTree1, defaultTreeCellRenderer0, defaultTreeCellEditor0);
      DefaultTreeCellRenderer defaultTreeCellRenderer2 = new DefaultTreeCellRenderer();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jTree0, 1, 2, 3, 3, 'R');
      jDayChooser0.keyPressed(keyEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }
}
