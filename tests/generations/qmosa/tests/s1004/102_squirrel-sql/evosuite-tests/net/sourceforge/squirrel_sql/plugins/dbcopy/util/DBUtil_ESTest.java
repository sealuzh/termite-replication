/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 15:27:02 GMT 2019
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.gargoylesoftware.base.resource.jdbc.CallableStatementWrapper;
import com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper;
import java.awt.AWTEventMulticaster;
import java.awt.ComponentOrientation;
import java.awt.Graphics;
import java.awt.event.ComponentListener;
import java.awt.event.HierarchyListener;
import java.awt.event.MouseListener;
import java.awt.geom.Rectangle2D;
import java.io.PrintWriter;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.text.AttributedCharacterIterator;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.SynchronousQueue;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import javax.swing.Box;
import javax.swing.DebugGraphics;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;
import javax.swing.KeyStroke;
import javax.swing.plaf.basic.BasicCheckBoxUI;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.DefaultTreeCellRenderer;
import net.sourceforge.squirrel_sql.client.IApplication;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAlias;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfo;
import net.sourceforge.squirrel_sql.client.util.ApplicationFileWrappersImpl;
import net.sourceforge.squirrel_sql.client.util.ApplicationFiles;
import net.sourceforge.squirrel_sql.fw.id.IIdentifier;
import net.sourceforge.squirrel_sql.fw.id.IntegerIdentifier;
import net.sourceforge.squirrel_sql.fw.id.UidIdentifier;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectType;
import net.sourceforge.squirrel_sql.fw.sql.ForeignKeyInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.SQLDatabaseMetaData;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriver;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriverPropertyCollection;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import net.sourceforge.squirrel_sql.fw.util.FileWrapper;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperFactoryImpl;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl;
import net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin;
import net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.DBCopyPreferenceBean;
import net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.128183350293198
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      boolean boolean0 = DBUtil.typesAreEquivalent(16, (-7));
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.add((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-368.251607), (-368.251607), 0, 1.0);
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double((-368.251607), 1.0, (-2320.41263577), 0.0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "@_", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (-7), "|)#^H4_&1.<", (-4119), 2824, 16, 0, "{\"", "{\"", (-1321), 0, ">fn/taG-23yjP");
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      dBCopyPlugin0.getDestSession();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDF_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      dBCopyPlugin0.getSourceSession();
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals((-7), int0);
      
      int int1 = DBUtil.replaceDistinctDataType(1987, tableColumnInfo0, (ISession) null);
      assertEquals(1987, int1);
      
      boolean boolean1 = DBUtil.typesAreEquivalent((-602), 0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource1 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource2 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource3 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource4 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource4.createToolTip();
      defaultListCellRenderer_UIResource4.getFocusTraversalPolicy();
      defaultListCellRenderer_UIResource1.requestFocus(false);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource5 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource6 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource6.getContainerListeners();
      defaultListCellRenderer_UIResource6.setEnabled(false);
      Box box0 = Box.createVerticalBox();
      box0.getGraphics();
      DebugGraphics debugGraphics0 = new DebugGraphics((Graphics) null);
      defaultListCellRenderer_UIResource6.paint(debugGraphics0);
      defaultListCellRenderer_UIResource3.getVerifyInputWhenFocusTarget();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource7 = new DefaultListCellRenderer.UIResource();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      LinkedList<ITableInfo> linkedList0 = new LinkedList<ITableInfo>();
      List<IDatabaseObjectInfo> list0 = DBUtil.convertTableToObjectList(linkedList0);
      dBCopyPlugin0.setSourceDatabaseObjects(list0);
      dBCopyPlugin0.getPluginUserSettingsFolder();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.createFolder(evoSuiteFile0);
      // Undeclared exception!
      try { 
        DBUtil.getCreateTableSql(dBCopyPlugin0, (ITableInfo) null, "]d[u[(7z", "(", "Tw~Tb@|sk#_");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ISQLConnection iSQLConnection0 = null;
      ITableInfo iTableInfo0 = null;
      // Undeclared exception!
      try { 
        DBUtil.getColumnCount((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DBUtil.typesAreEquivalent(3, 3);
      System.setCurrentTimeMillis(3);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)73;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("ALTER TABLE ", "-0r", "C\"DXAn:^C6U5<0[", "C\"DXAn:^C6U5<0[", (byte) (-13), "DBUtil.error.bindblobfailure", (-797), 110, (-1344), 128, "PfbH=J*xK;h;X{P", "PfbH=J*xK;h;X{P", 1111, 1007, "ALTER TABLE ");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.CATALOG;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.BEST_ROW_ID;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      dBCopyPlugin0.getSourceSession();
      DBUtil.replaceDistinctDataType(0, tableColumnInfo0, (ISession) null);
      dBCopyPlugin0.getDestSession();
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.TRIGGER;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      ConnectionWrapper connectionWrapper0 = null;
      try {
        connectionWrapper0 = new ConnectionWrapper((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getCellImportExportSelectionsFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getEditWhereColsFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl4.getLicenceFile();
      applicationFileWrappersImpl4.getUserSettingsDirectory();
      ApplicationFileWrappersImpl applicationFileWrappersImpl5 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl4.getDatabaseDriversFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl6 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl4.getUserPreferencesFile();
      applicationFileWrappersImpl0.getDatabaseAliasesTreeStructureFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl7 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl8 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl9 = new ApplicationFileWrappersImpl();
      // Undeclared exception!
      try { 
        DBUtil.tableHasPrimaryKey((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4558487091517962
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      dBCopyPlugin0.setDestSession((ISession) null);
      dBCopyPlugin0.setDestSession((ISession) null);
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, (String) null, ":a1Hm", "net.sourceforge.squirrel_sql.fw.sql.SQLDriverManager", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBUtil.typesAreEquivalent(2, 2);
      DBUtil.typesAreEquivalent(16, (-3573));
      CallableStatementWrapper callableStatementWrapper0 = null;
      try {
        callableStatementWrapper0 = new CallableStatementWrapper((CallableStatement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(3, (-1789569704));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hW");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", length: ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = DBUtil.typesAreEquivalent((byte)16, 1700);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("R0F1'6DAw-d", false);
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.add((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0, 0, 0, 0.0);
      rectangle2D_Double0.contains((Rectangle2D) defaultCaret0);
      Rectangle2D.union(defaultCaret0, defaultCaret0, rectangle2D_Double0);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      defaultListCellRenderer0.removeMouseListener(defaultCaret0);
      DatabaseObjectType.createNewDatabaseObjectType("m");
      DBUtil.typesAreEquivalent((-7), 243);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Length function is null for dialect=", "DBUtil.info.bindbloblength", "Eh]?NW", "DBUtil.info.bindbloblength", 2004, "JDBCPieDataset - unknown data type", 2220, (-161), 2004, 540, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (byte)25, 2003, "2F?BFB)XXfdW/};**");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.COLUMN;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBUtil.isBinaryType(tableColumnInfo0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.CATALOG;
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      SQLAlias sQLAlias0 = new SQLAlias((IIdentifier) null);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      System.setCurrentTimeMillis(4991);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e]xternal");
      DBUtil.typesAreEquivalent(2, 16);
      System.setCurrentTimeMillis(1293L);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "I_]4gChKm-U3fFr[}jr";
      int int0 = (-1240);
      String string1 = "hpn&MYN";
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("NO", "I_]4gChKm-U3fFr[}jr", "E", "I_]4gChKm-U3fFr[}jr", (-2), "hpn&MYN", 4992, (-1240), 4992, (-1240), "oBRe=/H2LY", "I_]4gChKm-U3fFr[}jr", 1221, (-2), "2F?BFB)XXfdW/};**");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.FUNCTION;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.INDEX_TYPE_DBO;
      Icon icon0 = databaseObjectType1.getIcon();
      DatabaseObjectType.createNewDatabaseObjectType("", icon0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SCHEMA;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      DBUtil.isBinaryType(tableColumnInfo0);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.CATALOG;
      DatabaseObjectType.createNewDatabaseObjectType(".c}pSoU97- pj$");
      SQLAlias sQLAlias0 = new SQLAlias((IIdentifier) null);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getTableInfo((ISession) null, "9w1Yx\"m", "34Bs|%,^gS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("<c>O;h", "<c>O;h", "%Ql`<=T>Bs5\";AS,", "1-B&FXvRxOdS)o6J", (-3), "<c>O;h", 273, (-3), 12, (-3), "%Ql`<=T>Bs5\";AS,", "%La@( 4l5m", (-1), (-1258), "jC_zu@v'{nddHF2z");
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource1 = new DefaultListCellRenderer.UIResource();
      ComponentOrientation componentOrientation0 = ComponentOrientation.RIGHT_TO_LEFT;
      defaultListCellRenderer_UIResource0.applyComponentOrientation(componentOrientation0);
      defaultListCellRenderer_UIResource1.getVerifyInputWhenFocusTarget();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "X[}Wydi", "K0K_#$SIwP)-~*?^o");
      // Undeclared exception!
      try { 
        DBUtil.getColumnNames((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2T#nAP&\"a4");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", length: ");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2T#nAP&\"a4");
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "X[}Wydi", "ms[Mj |2gK<");
      // Undeclared exception!
      try { 
        DBUtil.getColumnNames((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("sx6.Ntf", (String) null, "com.jidesoft.plaf.basic.BasicFileSystemTree$FolderTreeListener", "z{7\".v", 0, "com.jidesoft.plaf.basic.BasicFileSystemTree$FolderTreeListener", 1111, 0, 1111, 0, "sx6.Ntf", "multiple or zero characters found parsing string", 1111, 662, "multiple or zero characters found parsing string");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.USER;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBUtil.isBinaryType(tableColumnInfo0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.CATALOG;
      DatabaseObjectType.createNewDatabaseObjectType("sx6.Ntf");
      SQLAlias sQLAlias0 = new SQLAlias((IIdentifier) null);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      System.setCurrentTimeMillis(662);
      // Undeclared exception!
      try { 
        DBUtil.convertTableToObjectList((List<ITableInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getCellImportExportSelectionsFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getSQuirrelJarFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl1.getCellImportExportSelectionsFile();
      applicationFileWrappersImpl0.getUserSettingsDirectory();
      applicationFileWrappersImpl0.getSquirrelHomeDir();
      applicationFileWrappersImpl0.getEditWhereColsFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl4.setFileWrapperFactory(fileWrapperFactoryImpl0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl5 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl4.getQuickStartGuideFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl6 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getDatabaseAliasesFile_before_version_2_3();
      ApplicationFileWrappersImpl applicationFileWrappersImpl7 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl5.getFAQFile();
      applicationFileWrappersImpl3.getDatabaseAliasesTreeStructureFile();
      applicationFileWrappersImpl0.getUserPreferencesFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl8 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl9 = new ApplicationFileWrappersImpl();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl7);
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, (String) null, (String) null);
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "DBUtil.getTableInfo: found ", ".^^r");
      // Undeclared exception!
      try { 
        DBUtil.getColumnName((ISQLConnection) null, (ITableInfo) null, (-332));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getSchemaNameFromDbObject((IDatabaseObjectInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e]xternal");
      mockPrintWriter0.print((-834.70514F));
      DebugGraphics debugGraphics0 = new DebugGraphics();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      mockPrintWriter0.print((-1507));
      mockPrintWriter0.checkError();
      PrintWriter printWriter0 = mockPrintWriter0.format(".", (Object[]) null);
      printWriter0.print(1516L);
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[0] = '{';
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      TableColumnInfo tableColumnInfo0 = null;
      // Undeclared exception!
      try { 
        DBUtil.replaceOtherDataType((TableColumnInfo) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e]xternal");
      mockPrintWriter0.print((-834.70514F));
      DebugGraphics debugGraphics0 = new DebugGraphics();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      mockPrintWriter0.print((-1507));
      PrintWriter printWriter0 = mockPrintWriter0.format(".", (Object[]) null);
      printWriter0.print(1516L);
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[0] = '{';
      charArray0[2] = 'y';
      charArray0[4] = 'v';
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("o1aiyYJz|/SR", "jC_zu@v'{nddHF2z", "KY", "jC_zu@v'{nddHF2z", 2734, "SELECT data_type FROM information_schema.columns where column_name = ? ", (-1042), (-1507), 2734, 565, "-t2& 4C", ") REFERENCES ", 123, (-1258), "squirrelsql.version");
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)73;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, "={eU)", "={eU)", (String) null, 0, "={eU)", (byte)73, (byte)73, 1596, (byte)73, "={eU)", "={eU)", 1596, 220, "mK@|");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getWebSite();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.TRIGGER;
      DatabaseObjectType.createNewDatabaseObjectType("mK@|");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SEQUENCE;
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getDefaultIcon();
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.createNewDatabaseObjectType(".", (Icon) null);
      DatabaseObjectType.createNewDatabaseObjectType("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType.createNewDatabaseObjectType("<Lj#\"w5AzsB!JTN");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      dBCopyPlugin0.getSourceSession();
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(0, int0);
      
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(0);
      DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      SQLDriver sQLDriver0 = new SQLDriver();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getDestSession();
      boolean boolean0 = DBUtil.typesAreEquivalent(2837, (-1684));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      defaultListCellRenderer_UIResource0.removeComponentListener((ComponentListener) null);
      defaultListCellRenderer_UIResource0.requestFocus(true);
      DBUtil.typesAreEquivalent((-7), (-161));
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList((IDatabaseObjectInfo[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "", "", "", (-754), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (-754), (-3537), (-3537), (-754), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (-3537), (-3537), "6lFm(. o-ksGUe");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.createNewDatabaseObjectType(" fs");
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      defaultListCellRenderer0.getDisabledIcon();
      DatabaseObjectType.createNewDatabaseObjectType(" fs", (Icon) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType("");
      DefaultListCellRenderer defaultListCellRenderer1 = new DefaultListCellRenderer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      dBCopyPlugin0.getWebSite();
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.TRIGGER;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.SEQUENCE;
      DatabaseObjectType.createNewDatabaseObjectType(":9hmHfa");
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.SCHEMA;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType4);
      dBCopyPlugin0.getSourceSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      DBUtil.getLastStatement();
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(2000);
      DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      SQLDriver sQLDriver0 = new SQLDriver();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      ITableInfo iTableInfo0 = null;
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject((IDatabaseObjectInfo) null, schemaInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "metaDataOutputCassName";
      String string1 = null;
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("metaDataOutputCassName", (String) null, "p'B");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDT_TYPE_DBO;
      String string2 = "org.jboss.util.file.FilePrefixFilter";
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getOpenIcon();
      DatabaseObjectType.createNewDatabaseObjectType("org.jboss.util.file.FilePrefixFilter", icon0);
      String string3 = "4,\"}ahL2jOO";
      DatabaseObjectType.createNewDatabaseObjectType("4,\"}ahL2jOO");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      ArrayList<IDatabaseObjectInfo> arrayList0 = new ArrayList<IDatabaseObjectInfo>();
      arrayList0.add((IDatabaseObjectInfo) databaseObjectInfo0);
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList(arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      int int0 = 2267;
      int int1 = 2006;
      String string0 = null;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "GBF/Y7S);^*ZR)3jB", "DROP TABLE ", "tv", Integer.MIN_VALUE, (String) null, 5432, 5432, 2006, 2267, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (String) null, 1650, 1965, (String) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.COLUMN;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      dBCopyPlugin0.getApplication();
      DBUtil.getLastStatementValues();
      int int2 = 1;
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "hpn&MYN", "tE", "3S5", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string0 = "";
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "", "", "", (-754), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (-754), (-3537), (-3537), (-754), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (-3537), (-3537), "6lFm(. o-ksGUe");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.createNewDatabaseObjectType(" fs");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType("");
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultListCellRenderer0.setRequestFocusEnabled(false);
      dBCopyPlugin0.getWebSite();
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.TRIGGER;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.SEQUENCE;
      DatabaseObjectType.createNewDatabaseObjectType(":9hmHfa");
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.createNewDatabaseObjectType(".");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType4);
      dBCopyPlugin0.getSourceSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      DBUtil.getLastStatement();
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(2000);
      DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      SQLDriver sQLDriver0 = new SQLDriver();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      ITableInfo iTableInfo0 = null;
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getSelectQuery(dBCopyPlugin2, "DBUtil.mappingErrorKeyword", (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      locale0.getDisplayLanguage();
      locale0.hasExtensions();
      Locale.getISOLanguages();
      Locale locale1 = JComponent.getDefaultLocale();
      locale1.getUnicodeLocaleKeys();
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      PriorityQueue<ForeignKeyInfo> priorityQueue0 = new PriorityQueue<ForeignKeyInfo>();
      UnaryOperator<ITableInfo> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      Predicate<ForeignKeyInfo> predicate0 = Predicate.isEqual((Object) priorityQueue0);
      Predicate<ForeignKeyInfo> predicate1 = predicate0.negate();
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      predicate0.negate();
      priorityQueue0.add(foreignKeyInfo0);
      Predicate<ForeignKeyInfo> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) unaryOperator0);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate4.negate();
      Predicate<Object> predicate5 = predicate3.or(predicate4);
      predicate5.and(predicate4);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      priorityQueue0.removeIf(predicate6);
      arrayList0.removeAll(priorityQueue0);
      System.setCurrentTimeMillis(1L);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.isBinaryType((TableColumnInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      DBUtil.fixCase((ISession) null, (String) null);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareCall(anyString());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      // Undeclared exception!
      try { 
        connectionWrapper0.prepareCall("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource1 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource2 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource3 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource4 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource5 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource5.getFocusTraversalPolicy();
      defaultListCellRenderer_UIResource1.requestFocus(false);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource6 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource6.getContainerListeners();
      defaultListCellRenderer_UIResource5.transferFocus();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource7 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource5.getContainerListeners();
      defaultListCellRenderer_UIResource6.setEnabled(false);
      defaultListCellRenderer_UIResource0.getContainerListeners();
      defaultListCellRenderer_UIResource1.setEnabled(false);
      Box box0 = Box.createVerticalBox();
      box0.getGraphics();
      DebugGraphics debugGraphics0 = new DebugGraphics((Graphics) null);
      defaultListCellRenderer_UIResource1.paint((Graphics) null);
      defaultListCellRenderer_UIResource3.getVerifyInputWhenFocusTarget();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource8 = new DefaultListCellRenderer.UIResource();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getCreateTableSql(dBCopyPlugin0, (ITableInfo) null, "1<\"u>f<Si", " (default keywords)", "Qz}-vUn/&+S8Xqm/L");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      defaultListCellRenderer_UIResource0.removeComponentListener((ComponentListener) null);
      defaultListCellRenderer_UIResource0.requestFocus(true);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource1 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource1.paint((Graphics) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "&2FI", "&2FI");
      DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, "Could not find value for key ");
      // Undeclared exception!
      try { 
        DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, 2095);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setPasteToTableName(")@mJe{^`");
      dBCopyPlugin0.getSourceDatabaseObjects();
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList((List<IDatabaseObjectInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?n&l=E7ifW-GpyNt");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "R1,K( N");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[0];
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      FileWrapper fileWrapper0 = applicationFileWrappersImpl1.getCellImportExportSelectionsFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      fileWrapper0.getParentFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl(fileWrapper0, "%Ql`<=T>Bs5\";AS,");
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl5 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl3.getUserSettingsDirectory();
      ApplicationFileWrappersImpl applicationFileWrappersImpl6 = new ApplicationFileWrappersImpl();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      applicationFileWrappersImpl2.setFileWrapperFactory(fileWrapperFactoryImpl0);
      applicationFileWrappersImpl6.getQuickStartGuideFile();
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFileWrappersImpl5.setApplicationFiles(applicationFiles0);
      applicationFileWrappersImpl5.getQuickStartGuideFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl7 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl6.getDatabaseAliasesTreeStructureFile();
      applicationFileWrappersImpl0.getUserPreferencesFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl8 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl9 = new ApplicationFileWrappersImpl();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("%Ql`<=T>Bs5\";AS,", "%Ql`<=T>Bs5\";AS,", "\".", "\".", (-141), "net.sourceforge.squirrel_sql.fw.dialects.DerbyDialectExt$DerbyDialectHelper", 61, (-1741), (-141), 61, ", ", ", ", 1458, (-141), "%Ql`<=T>Bs5\";AS,");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[6];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      tableColumnInfoArray0[1] = tableColumnInfo0;
      tableColumnInfoArray0[2] = tableColumnInfo0;
      tableColumnInfoArray0[3] = tableColumnInfo0;
      tableColumnInfoArray0[4] = tableColumnInfo0;
      tableColumnInfoArray0[5] = tableColumnInfo0;
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("\"., \"., \"., \"., \"., \".", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource1 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource2 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource2.requestFocus(true);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource3 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource3.getVerifyInputWhenFocusTarget();
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[1];
      // Undeclared exception!
      try { 
        DBUtil.getColumnList(tableColumnInfoArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBUtil.validateColumnNames((ITableInfo) null, dBCopyPlugin0);
      dBCopyPlugin0.getPluginUserSettingsFolder();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      CallableStatementWrapper callableStatementWrapper0 = null;
      try {
        callableStatementWrapper0 = new CallableStatementWrapper((CallableStatement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(667L);
      Stack<IDatabaseObjectInfo> stack0 = new Stack<IDatabaseObjectInfo>();
      stack0.setSize(2742);
      List<ITableInfo> list0 = DBUtil.convertObjectToTableList(stack0);
      DBUtil.convertTableToObjectList(list0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      SQLDatabaseMetaData sQLDatabaseMetaData0 = schemaInfo0.getSQLDatabaseMetaData();
      assertNull(sQLDatabaseMetaData0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo(" zCQ_f+", " zCQ_f+", "R0F1'6DAw-d");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDT_TYPE_DBO;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType("_.K");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.OTHER;
      DatabaseObjectType.createNewDatabaseObjectType("R0F1'6DAw-d");
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.PRIMARY_KEY;
      JInternalFrame jInternalFrame0 = new JInternalFrame("_.K", false, false);
      jInternalFrame0.getGraphics();
      jInternalFrame0.getFrameIcon();
      JCheckBox jCheckBox0 = new JCheckBox(" zCQ_f+", true);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getDefaultTextIconGap(jCheckBox0);
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.UDT;
      DatabaseObjectType.createNewDatabaseObjectType("R0F1'6DAw-d");
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      SQLAlias sQLAlias0 = new SQLAlias();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      System.setCurrentTimeMillis(1972);
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[1];
      iDatabaseObjectInfoArray0[0] = (IDatabaseObjectInfo) databaseObjectInfo0;
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      FileWrapper fileWrapper0 = applicationFileWrappersImpl1.getCellImportExportSelectionsFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl(fileWrapper0, "%Ql`<=T>Bs5\";AS,");
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl5 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl3.getUserSettingsDirectory();
      ApplicationFileWrappersImpl applicationFileWrappersImpl6 = new ApplicationFileWrappersImpl();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      applicationFileWrappersImpl2.setFileWrapperFactory(fileWrapperFactoryImpl0);
      applicationFileWrappersImpl6.getQuickStartGuideFile();
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFileWrappersImpl5.setApplicationFiles(applicationFiles0);
      applicationFileWrappersImpl5.getQuickStartGuideFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl7 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl6.getDatabaseAliasesTreeStructureFile();
      applicationFileWrappersImpl0.getUserPreferencesFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl8 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl9 = new ApplicationFileWrappersImpl();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      System.setCurrentTimeMillis((-9223372036854775808L));
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getSourceSession();
      int int0 = DBUtil.replaceDistinctDataType((-1711), (TableColumnInfo) null, (ISession) null);
      assertEquals((-1711), int0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ' ';
      charArray0[1] = ',';
      charArray0[2] = 'c';
      charArray0[3] = 'd';
      PriorityQueue<ForeignKeyInfo> priorityQueue0 = new PriorityQueue<ForeignKeyInfo>();
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      priorityQueue0.add(foreignKeyInfo0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Predicate<ForeignKeyInfo> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<ForeignKeyInfo> predicate1 = predicate0.negate();
      Predicate<ForeignKeyInfo> predicate2 = predicate0.and(predicate1);
      Predicate<ForeignKeyInfo> predicate3 = predicate2.or(predicate0);
      predicate3.or(predicate1);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate5.or(predicate4);
      predicate6.and(predicate7);
      Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate8 = predicate6.and(predicate7);
      priorityQueue0.removeIf(predicate8);
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      arrayList0.removeAll(priorityQueue0);
      System.setCurrentTimeMillis(0L);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      int int0 = DBUtil.replaceDistinctDataType(2103, (TableColumnInfo) null, (ISession) null);
      assertEquals(2103, int0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      locale0.getDisplayLanguage();
      locale0.hasExtensions();
      Locale.getISOLanguages();
      Locale locale1 = JComponent.getDefaultLocale();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      SynchronousQueue<Locale> synchronousQueue0 = new SynchronousQueue<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) synchronousQueue0, locale_FilteringMode0);
      locale1.getUnicodeLocaleKeys();
      ArrayList<ITableInfo> arrayList1 = new ArrayList<ITableInfo>();
      PriorityQueue<ForeignKeyInfo> priorityQueue0 = new PriorityQueue<ForeignKeyInfo>();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Chinese", "jC_zu@v'{nddHF2z", "Could not locate resource: ", "4U*vIo/gJfH;CTX/P", (-1258), "jC_zu@v'{nddHF2z", (-1258), (-1258), (-1258), 82, "Chinese", "", (-1258), 82, "C");
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      defaultListCellRenderer_UIResource0.removeComponentListener((ComponentListener) null);
      defaultListCellRenderer_UIResource0.requestFocus(true);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource1 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource1.paint((Graphics) null);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource2 = new DefaultListCellRenderer.UIResource();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("<jrZ=\"H5[r'|Vm)7YE", "<jrZ=\"H5[r'|Vm)7YE", "T.(H&=k5P[v\"#Dmr[^q", "net.sourceforge.squirrel_sql.fw.sql.SQLDriverProperty", 7, "t.", 7, 2584, 7, 7, (String) null, "0k", 2, 2584, "CREATE TABLE ");
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo(" zCQ_f+", " zCQ_f+", "R0F1'6DAw-d");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDT_TYPE_DBO;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType("_.K");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.OTHER;
      DatabaseObjectType.createNewDatabaseObjectType("R0F1'6DAw-d");
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.PRIMARY_KEY;
      JInternalFrame jInternalFrame0 = new JInternalFrame("_.K", false, false);
      Icon icon0 = jInternalFrame0.getFrameIcon();
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.createNewDatabaseObjectType("S_!h'f[", icon0);
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.TRIGGER;
      Icon icon1 = databaseObjectType6.getIcon();
      DatabaseObjectType.createNewDatabaseObjectType((String) null, icon0);
      DatabaseObjectType.createNewDatabaseObjectType((String) null, icon1);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType5);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(databaseObjectInfo0, schemaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      locale0.getDisplayLanguage();
      locale0.hasExtensions();
      Locale.getISOLanguages();
      Locale locale1 = JComponent.getDefaultLocale();
      locale1.getUnicodeLocaleKeys();
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      PriorityQueue<ForeignKeyInfo> priorityQueue0 = new PriorityQueue<ForeignKeyInfo>();
      Predicate<ForeignKeyInfo> predicate0 = Predicate.isEqual((Object) priorityQueue0);
      Predicate<ForeignKeyInfo> predicate1 = predicate0.negate();
      priorityQueue0.removeIf(predicate1);
      arrayList0.removeAll(priorityQueue0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("M'*T", "irq;k{+'bHgs", "M'*T", "irq;k{+'bHgs", 2001, "irq;k{+'bHgs", 2001, (-1789569704), (-1789569704), (-1789569704), "irq;k{+'bHgs", "TyhqrWtfJ%=1-", 946, 2001, "M'*T");
      arrayList0.add((ITableInfo) null);
      ArrayList<ITableInfo> arrayList1 = new ArrayList<ITableInfo>();
      arrayList1.add((ITableInfo) null);
      arrayList0.add((ITableInfo) null);
      arrayList1.add((ITableInfo) null);
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo("M'*T", "TyhqrWtfJ%=1-", "AcC", "PreferencesPanel.writeScript", 1351, ":bG1vLMC:eVJ=", 946, 3047, (-1888), (-2264), "M'*T", "PHt\"5?* >A", 946, (-5626), ":bG1vLMC:eVJ=");
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(2001, int0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = ';';
      charArray0[3] = ';';
      charArray0[4] = '-';
      charArray0[5] = 'T';
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI1 = new BasicCheckBoxUI();
      basicCheckBoxUI1.getDefaultIcon();
      basicCheckBoxUI1.getDefaultIcon();
      basicCheckBoxUI1.getAccessibleChild(defaultListCellRenderer_UIResource0, (-6));
      basicCheckBoxUI1.getDefaultIcon();
      JCheckBox jCheckBox0 = new JCheckBox("a'jwTdSO[8cIhL>&$", true);
      jCheckBox0.getActionForKeyStroke((KeyStroke) null);
      jCheckBox0.getCursor();
      jCheckBox0.getTopLevelAncestor();
      basicCheckBoxUI1.getDefaultTextIconGap(jCheckBox0);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDT;
      DatabaseObjectType.createNewDatabaseObjectType("");
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      //  // Unstable assertion: assertEquals("2da7b673:16e6fa66127:-7f1b", uidIdentifier0.toString());
      
      SQLAlias sQLAlias0 = new SQLAlias();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      System.setCurrentTimeMillis(0L);
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[1];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = ',';
      charArray0[3] = ',';
      charArray0[4] = '-';
      charArray0[5] = 'T';
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI1 = new BasicCheckBoxUI();
      basicCheckBoxUI1.getDefaultIcon();
      basicCheckBoxUI1.getDefaultIcon();
      basicCheckBoxUI1.getAccessibleChild(defaultListCellRenderer_UIResource0, (-6));
      basicCheckBoxUI1.getDefaultIcon();
      JCheckBox jCheckBox0 = new JCheckBox("a'jwTdSO[8cIhL>&$", true);
      jCheckBox0.getActionForKeyStroke((KeyStroke) null);
      jCheckBox0.getCursor();
      jCheckBox0.getTopLevelAncestor();
      basicCheckBoxUI1.getDefaultTextIconGap(jCheckBox0);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDT;
      DatabaseObjectType.createNewDatabaseObjectType("");
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      SQLAlias sQLAlias0 = new SQLAlias();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      System.setCurrentTimeMillis(0L);
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[0];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e]xternal");
      mockPrintWriter0.println(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintWriter0.append((CharSequence) "e]xternal");
      mockPrintWriter0.println((long) (-1507));
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("e]xternal");
      mockPrintWriter1.print((-1507));
      mockPrintWriter1.println(1L);
      mockPrintWriter1.println((-3006.34787939191));
      int int0 = (-419);
      ImageIcon imageIcon0 = new ImageIcon("e]xternal");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("e]xternal");
      mockPrintWriter2.close();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      arrayList0.add((ITableInfo) null);
      // Undeclared exception!
      try { 
        DBUtil.getForeignKeySQL(dBCopyPlugin0, (ITableInfo) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "].";
      // Undeclared exception!
      try { 
        DBUtil.deleteDataInExistingTable((ISession) null, "].", "].", "].");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "DBUtil.error.tablenotfound";
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "={eU)";
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("DBUtil.error.tablenotfound", (String) null, (String) null, "DBUtil.error.tablenotfound", 1009, (String) null, (-161), (-161), 859, 1596, "DBUtil.error.tablenotfound", "={eU)", 0, 0, "DBUtil.error.tablenotfound");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getWebSite();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.TRIGGER;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SEQUENCE;
      DatabaseObjectType.createNewDatabaseObjectType("DBUtil.error.tablenotound");
      DatabaseObjectType.createNewDatabaseObjectType((String) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      dBCopyPlugin0.getSourceSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      DBUtil.getLastStatement();
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(0);
      DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      SQLDriver sQLDriver0 = new SQLDriver();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      ITableInfo iTableInfo0 = null;
      // Undeclared exception!
      try { 
        DBUtil.getSelectQuery(dBCopyPlugin0, (String) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl1.getCellImportExportSelectionsFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl4.getSQuirrelJarFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl5 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl6 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.getUserSettingsDirectory();
      ApplicationFileWrappersImpl applicationFileWrappersImpl7 = new ApplicationFileWrappersImpl();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      applicationFileWrappersImpl1.setFileWrapperFactory(fileWrapperFactoryImpl0);
      applicationFileWrappersImpl7.getQuickStartGuideFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl8 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl8.getQuickStartGuideFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl9 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl3.getDatabaseAliasesTreeStructureFile();
      applicationFileWrappersImpl4.getUserPreferencesFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl10 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl11 = new ApplicationFileWrappersImpl();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "L5(N0r%wQ'W1|", "L5(N0r%wQ'W1|");
      // Undeclared exception!
      try { 
        DBUtil.getInsertSQL(dBCopyPlugin0, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (ITableInfo) null, 102);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "nF!(,F]z";
      // Undeclared exception!
      try { 
        DBUtil.executeQuery((ISession) null, "nF!(,F]z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDT_TYPE_DBO;
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      ArrayList<IDatabaseObjectInfo> arrayList0 = new ArrayList<IDatabaseObjectInfo>();
      List<ITableInfo> list0 = DBUtil.convertObjectToTableList(arrayList0);
      List<IDatabaseObjectInfo> list1 = DBUtil.convertTableToObjectList(list0);
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e]xternal");
      mockPrintWriter0.println(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintWriter0.append((CharSequence) "e]xternal");
      mockPrintWriter0.println((long) (-1507));
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("e]xternal");
      mockPrintWriter1.print((-1507));
      mockPrintWriter1.println(1L);
      mockPrintWriter1.println((-3006.34787939191));
      ImageIcon imageIcon0 = new ImageIcon("e]xternal");
      boolean boolean0 = DBUtil.typesAreEquivalent(2003, (-10));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DBUtil.setLastStatementValues("BP");
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}JAwT4'w9a!^WsW!w");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}JAwT4'w9a!^WsW!w");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\".\"");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(PNs>0&VW~Ms/u`b");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\".\"");
      // Undeclared exception!
      try { 
        DBUtil.sameDatabaseType((ISession) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      locale0.clone();
      locale0.getDisplayLanguage();
      locale0.hasExtensions();
      Locale.getISOLanguages();
      Locale locale1 = locale0.stripExtensions();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) set0, locale_FilteringMode0);
      Locale locale2 = Locale.ROOT;
      locale1.getUnicodeLocaleKeys();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.READING;
      boolean boolean0 = DBUtil.typesAreEquivalent((-1853), (-1853));
      assertTrue(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hW");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", length: ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hW");
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "?6*#)7ti71MNW", ", length: ");
      // Undeclared exception!
      try { 
        DBUtil.getPKColumnString((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = 'c';
      PriorityQueue<ForeignKeyInfo> priorityQueue0 = new PriorityQueue<ForeignKeyInfo>();
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Predicate<ForeignKeyInfo> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<ForeignKeyInfo> predicate1 = predicate0.negate();
      Predicate<ForeignKeyInfo> predicate2 = predicate0.and(predicate1);
      predicate1.or(predicate2);
      predicate2.or(predicate0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) "p){_<A!$O#5*xqs");
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate5.or(predicate4);
      Predicate<Object> predicate8 = predicate7.and(predicate3);
      Predicate<Object> predicate9 = predicate6.negate();
      predicate3.and(predicate9);
      Predicate.isEqual((Object) "4Q,>8pK!Vi|Z. p?6@ ");
      predicate7.and(predicate8);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.setSourceSession((ISession) null);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.dropTable("TVxuN2t4}>#LZD", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "TVxuN2t4}>#LZD", (ISession) null, true, (-703));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.isKeyword((ISession) null, "java.io.Serializable");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.checkKeyword((ISession) null, ":}{ZA Nhfq>?Cx*zwD", "jl:i._");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = ',';
      charArray0[4] = '-';
      charArray0[5] = ',';
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      BasicCheckBoxUI basicCheckBoxUI1 = new BasicCheckBoxUI();
      basicCheckBoxUI1.getDefaultIcon();
      basicCheckBoxUI1.getDefaultIcon();
      basicCheckBoxUI1.getAccessibleChild(defaultListCellRenderer_UIResource0, (-6));
      basicCheckBoxUI1.getDefaultIcon();
      JCheckBox jCheckBox0 = new JCheckBox("a'jwTdSO[8cIhL>&$", true);
      Box box0 = Box.createHorizontalBox();
      box0.getGraphics();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DebugGraphics debugGraphics0 = new DebugGraphics((Graphics) null);
      box0.getGraphics();
      defaultListCellRenderer_UIResource0.paint((Graphics) null);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getCatSep((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      defaultListCellRenderer_UIResource0.removeComponentListener((ComponentListener) null);
      defaultListCellRenderer_UIResource0.requestFocus(false);
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, "I", (String) null, "<jrZ=\"H5[r'|Vm)7YE", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      String string0 = ".";
      // Undeclared exception!
      try { 
        DBUtil.fixCase((ISession) null, ".");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = DBUtil.fixCase((ISession) null, "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = ") REFEREN)CES ";
      // Undeclared exception!
      try { 
        DBUtil.getTables((ISession) null, ") REFEREN)CES ", "7Uc n7", "7Uc n7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e]xternal");
      mockPrintWriter0.print((-834.70514F));
      DebugGraphics debugGraphics0 = new DebugGraphics();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      mockPrintWriter0.print((-1512));
      mockPrintWriter0.checkError();
      PrintWriter printWriter0 = mockPrintWriter0.format(".", (Object[]) null);
      printWriter0.print(1516L);
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      mockPrintWriter0.print(1516L);
      charArray0[0] = '{';
      charArray0[2] = 'y';
      charArray0[4] = ';';
      printWriter0.write(charArray0);
      mockPrintWriter0.println();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(".");
      mockPrintWriter0.print((-1512));
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, ".", (String) null, "oT4 pe3:Z'S*c@(", (-1512), "\"uHZSkVnUK$Da+nS", 1231, '\u0000', (-1994091956), 545, "e]xternal", "CREATE TABLE ", (-1512), 'y', "\"uHZSkVnUK$Da+nS");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getColumnSql(dBCopyPlugin0, tableColumnInfo0, "5uK=1;zdRu#+9pZ~", "6kY26>t8HUfn5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e]xternal");
      mockPrintWriter0.print((-834.70514F));
      DebugGraphics debugGraphics0 = new DebugGraphics();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      mockPrintWriter0.print((-1512));
      mockPrintWriter0.checkError();
      PrintWriter printWriter0 = mockPrintWriter0.format(".", (Object[]) null);
      printWriter0.print(1516L);
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      mockPrintWriter0.print(1516L);
      charArray0[0] = '{';
      charArray0[2] = 'y';
      charArray0[4] = '\u0086';
      printWriter0.write(charArray0);
      mockPrintWriter0.println();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(".");
      mockPrintWriter0.print((-1512));
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, ".", (String) null, "oT4 pe3:Z'S*c@(", (-1512), "\"uHZSkVnUK$Da+nS", 1231, '\u0000', (-1994091956), 545, "e]xternal", "CREATE TABLE ", (-1512), 'y', "\"uHZSkVnUK$Da+nS");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getColumnSql(dBCopyPlugin0, tableColumnInfo0, "5uK=1;zdRu#+9pZ~", "6kY26>t8HUfn5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      locale0.getDisplayLanguage();
      locale0.hasExtensions();
      Locale.getISOLanguages();
      Locale locale1 = JComponent.getDefaultLocale();
      Locale.forLanguageTag("Chinese");
      locale1.getUnicodeLocaleKeys();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.READING;
      Locale.setDefault(locale0);
      Predicate.isEqual((Object) locale0);
      locale0.getDisplayLanguage(locale1);
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate((ISQLConnection) null, "Chinese", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("DBUtil.error.tablenotfound", "DBUtil.error.tablenotfound", "DBUtil.error.tablenotfound", "DBUtil.error.tablenotfound", 1019, "DBUtil.error.tablenotfound", (-161), (-161), 859, 1576, "DBUtil.error.tablenotfound", "DBUtil.error.tablenotfound", 859, 859, "DBUtil.error.tablenotfound");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getWebSite();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.FUNCTION;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.TRIGGER;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-47);
      byteArray0[8] = (byte)6;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SEQUENCE;
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getDefaultIcon();
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.TABLE_TYPE_DBO;
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.createNewDatabaseObjectType("DBUtil.error.tablenotfound");
      DatabaseObjectType.createNewDatabaseObjectType("DBUtil.error.tablenotfound", (Icon) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType4);
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.SCHEMA;
      DatabaseObjectType.createNewDatabaseObjectType("DBUtil.error.tablenotfound");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      dBCopyPlugin0.getSourceSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      SQLAlias sQLAlias0 = new SQLAlias();
      sQLAlias0.getDriverPropertiesClone();
      sQLAlias0.getDriverPropertiesClone();
      SQLDriver sQLDriver0 = new SQLDriver();
      databaseObjectType2.getIdentifier();
      SQLAlias sQLAlias1 = new SQLAlias((IIdentifier) null);
      assertEquals("", sQLAlias1.toString());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 498, 0, 0);
      DBUtil.typesAreEquivalent(0, 0);
      Rectangle2D.union(defaultCaret0, rectangle2D_Double0, rectangle2D_Double0);
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.sanityCheckPreferences((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DBUtil.setLastStatement("");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string0 = "Z0[+?'On";
      ConnectionWrapper connectionWrapper0 = null;
      try {
        connectionWrapper0 = new ConnectionWrapper((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource1 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource2 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource3 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource4 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource5 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource5.getFocusTraversalPolicy();
      defaultListCellRenderer_UIResource1.requestFocus(false);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource6 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource6.getContainerListeners();
      defaultListCellRenderer_UIResource5.transferFocus();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource7 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource6.getGraphicsConfiguration();
      defaultListCellRenderer_UIResource5.getContainerListeners();
      defaultListCellRenderer_UIResource6.setEnabled(false);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("W4j-aWq|; cWd", "W4j-aWq|; cWd", "v0", "X(;H(:T", (-4), "@MiB^FsBm(:62dhBu", (-74), 305, 2004, 995, "hL2JPNam<5|", "X(;H(:T", (-271), (-271), "");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getMaxColumnLengthSQL((ISession) null, tableColumnInfo0, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = 'c';
      PriorityQueue<ForeignKeyInfo> priorityQueue0 = new PriorityQueue<ForeignKeyInfo>();
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Predicate<ForeignKeyInfo> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<ForeignKeyInfo> predicate1 = predicate0.negate();
      Predicate<ForeignKeyInfo> predicate2 = predicate0.and(predicate1);
      predicate1.or(predicate2);
      predicate2.or(predicate0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) "\".\"");
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate5.or(predicate4);
      Predicate<Object> predicate8 = predicate7.and(predicate3);
      Predicate<Object> predicate9 = predicate6.negate();
      predicate3.and(predicate9);
      Predicate.isEqual((Object) "4Q,>8pK!Vi|Z. p?6@ ");
      predicate7.and(predicate8);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.setSourceSession((ISession) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.tableHasForeignKey(". Skipping FK constraint", "\".\"", "\".\"", foreignKeyInfo0, dBCopyPlugin1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = 'c';
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Predicate<ForeignKeyInfo> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<ForeignKeyInfo> predicate1 = predicate0.negate();
      Predicate<ForeignKeyInfo> predicate2 = predicate1.negate();
      Predicate<ForeignKeyInfo> predicate3 = predicate2.or(predicate0);
      Predicate<ForeignKeyInfo> predicate4 = predicate3.or(predicate1);
      predicate4.or(predicate3);
      DBUtil dBUtil0 = new DBUtil();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) dBUtil0);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate5.negate();
      predicate6.or(predicate5);
      Predicate<Object> predicate8 = predicate5.and(predicate7);
      predicate7.and(predicate5);
      Predicate.isEqual((Object) null);
      predicate7.and(predicate8);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertNull(iSession0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "/H", "='l4Kn5t+j5(w\"q=Dk", "net.sourceforge.squirrel_sql.fw.dialects.DerbyDialectExt$DerbyDialectHelper", 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setCopyIndexDefs(false);
      dBCopyPreferenceBean0.setCopyForeignKeys(false);
      DBUtil.setPreferences(dBCopyPreferenceBean0);
      assertEquals(100, dBCopyPreferenceBean0.getCommitCount());
  }
}
