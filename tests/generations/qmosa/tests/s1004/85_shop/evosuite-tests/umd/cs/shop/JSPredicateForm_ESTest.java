/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 16:11:27 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4019864501937878
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mperato namn epetQd");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      Integer integer0 = new Integer(32);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm2);
      jSTerm1.add((Object) integer0);
      jSTerm1.makeFunction();
      jSTerm0.add((Object) jSTerm0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function0);
      System.setCurrentTimeMillis(1081L);
      System.setCurrentTimeMillis(1081L);
      System.setCurrentTimeMillis(1081L);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(f3gl,? ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.nextToken();
      streamTokenizer0.wordChars(40, 40);
      streamTokenizer0.wordChars(40, 40);
      streamTokenizer0.nval = (double) 40;
      streamTokenizer0.quoteChar(40);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.commentChar(40);
      streamTokenizer0.whitespaceChars(40, 40);
      streamTokenizer0.quoteChar(40);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = 40;
      streamTokenizer1.pushBack();
      streamTokenizer1.quoteChar(40);
      streamTokenizer1.ttype = 2894;
      streamTokenizer1.nextToken();
      streamTokenizer1.resetSyntax();
      streamTokenizer0.quoteChar(2894);
      streamTokenizer1.whitespaceChars(2894, 40);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(f3gl,? ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "(~xs,7G";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(~xs,7G");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("((&3S)lr.yC");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mperato namn epetQd");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      Integer integer0 = new Integer(32);
      jSTerm1.add((Object) integer0);
      jSTerm1.makeFunction();
      jSTerm0.add((Object) jSTerm0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1539755909366955
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Operator name expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeFunction();
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.addElements(jSSubstitution0);
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution3);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) streamTokenizer0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm0.matches(jSPredicateForm0, jSSubstitution5);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      System.setCurrentTimeMillis(3L);
      jSTerm2.equals((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis((-779L));
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution9);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.455848709151796
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "V?+)";
      StringReader stringReader0 = new StringReader("V?+)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.setSize(41);
      jSPredicateForm0.clone();
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "(";
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      System.setCurrentTimeMillis((-1624L));
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      jSTerm0.replaceAll(unaryOperator0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2944);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.024527347486
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X}?W)2T");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.addAll((Collection) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      stringReader0.reset();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution0.spliterator();
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.clonePF();
      jSSubstitution2.add((Object) jSTerm2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.clear();
      jSSubstitution2.removeElements(jSSubstitution4);
      jSTerm0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution0.addAll((Collection) jSTerm2);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm1.standarizerPredicateForm();
      jSPredicateForm1.trimToSize();
      jSPredicateForm1.firstElement();
      JSJshopVars.minus = (-1612035422);
      System.setCurrentTimeMillis(0);
      jSPredicateForm1.print();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "(nVs,7G";
      long long0 = (-34L);
      StringReader stringReader0 = new StringReader("(nVs,7G");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.13243989994744
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Operator name expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.addElements(jSSubstitution0);
      jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm0.matches(jSPredicateForm0, jSSubstitution5);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm1.addAll((Collection) jSSubstitution6);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      jSSubstitution7.add((Object) jSSubstitution4);
      System.setCurrentTimeMillis((-779L));
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution8);
      JSJshopVars.exclamation = (-1103839017);
      jSTerm0.applySubstitutionPF(jSSubstitution7);
      System.setCurrentTimeMillis(1180L);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1148309362237407
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Operator name expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.addElements(jSSubstitution0);
      jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution3);
      jSTerm1.add((Object) streamTokenizer0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm0.matches(jSPredicateForm0, jSSubstitution5);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm1.addAll((Collection) jSSubstitution6);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis((-779L));
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution8);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XW)2");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer(80);
      jSSubstitution0.add((Object) integer0);
      jSSubstitution0.addAll((Collection) jSTerm0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = unaryOperator0.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      jSTerm1.add((Object) jSSubstitution0);
      Function<Integer, Integer> function1 = unaryOperator0.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      Function.identity();
      Function<String, Integer> function2 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends Integer>) function2);
      Integer integer1 = new Integer(48);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.andThen((Function<? super Integer, ? extends String>) function3);
      Integer integer2 = new Integer(48);
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function5 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function4);
      unaryOperator0.andThen((Function<? super Integer, ? extends Integer>) function0);
      Integer integer3 = new Integer((-1084518693));
      Function<Object, Integer> function6 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function5);
      unaryOperator0.andThen((Function<? super Integer, ?>) function1);
      function6.compose((Function<? super JSTerm, ?>) function5);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Function.identity();
      Function.identity();
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) jSTerm1, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.stream();
      jSPredicateForm0.addElement((Object) null);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm((String) null);
      jSSubstitution0.add((Object) jSPredicateForm1);
      jSSubstitution0.add((Object) jSPredicateForm0);
      jSSubstitution0.add((Object) jSPredicateForm0);
      JSJshopVars.greaterT = (-1879791106);
      jSSubstitution0.add((Object) jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.stream();
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0F%=VL%hTgS%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.pushBack();
      streamTokenizer0.ordinaryChar(33);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      // Undeclared exception!
      try { 
        unaryOperator0.compose((Function<? super Object, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3215057425739665
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mperato name epetQd");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "Mperato name epetQd");
      jSTerm1.makeFunction();
      jSTerm0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply(jSTerm1);
      jSTerm0.replaceAll(unaryOperator0);
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function4 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function5 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function6 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function7 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Integer> function8 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function9 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function8);
      Function<Object, Integer> function10 = function3.andThen((Function<? super Integer, ? extends Integer>) function7);
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Integer> function11 = unaryOperator3.compose((Function<? super Object, ? extends Integer>) function10);
      function7.compose((Function<? super Object, ?>) function11);
      function5.andThen((Function<? super Integer, ?>) function1);
      Function.identity();
      Function<Object, Integer> function12 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function4);
      unaryOperator2.compose((Function<? super Object, ? extends Integer>) function12);
      Function<Object, Integer> function13 = function7.compose((Function<? super Object, ?>) function4);
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator5 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super Object, ? extends Integer>) function9);
      unaryOperator5.compose((Function<? super Object, ? extends Integer>) function3);
      UnaryOperator<Integer> unaryOperator6 = UnaryOperator.identity();
      unaryOperator6.compose((Function<? super Object, ? extends Integer>) function13);
      Function<Object, Integer> function14 = unaryOperator5.compose((Function<? super Object, ? extends Integer>) function12);
      assertNotSame(function14, function6);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7914765784434397
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X}?W)2T");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm0.add((Object) jSTerm1);
      jSSubstitution0.addAll((Collection) jSTerm0);
      Function.identity();
      jSTerm0.parseList(streamTokenizer0);
      streamTokenizer0.whitespaceChars(0, (-3));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.retainAll(jSSubstitution0);
      jSSubstitution1.removeElement(jSSubstitution2);
      jSSubstitution1.spliterator();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.removeElements(jSSubstitution0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution1.addAll((Collection) jSSubstitution1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      streamTokenizer0.quoteChar(0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer3.quoteChar(0);
      streamTokenizer0.nextToken();
      streamTokenizer3.resetSyntax();
      streamTokenizer0.whitespaceChars((-3216), (-4));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("x?w");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StringReader stringReader1 = new StringReader(".");
      StringReader stringReader2 = new StringReader("0F%=VL%hTgS%");
      StringReader stringReader3 = new StringReader("Predicateform.print(): 0 elements");
      char[] charArray0 = new char[2];
      stringReader3.markSupported();
      StringReader stringReader4 = new StringReader("expected");
      stringReader4.reset();
      StringReader stringReader5 = new StringReader("operator");
      stringReader1.close();
      stringReader4.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StringReader stringReader6 = new StringReader("0F%=VL%hTgS%");
      StringReader stringReader7 = new StringReader("#RVb]o}(Q[(");
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0265183878045665
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mperato name epetQd");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) "Mperato name epetQd");
      jSTerm1.makeFunction();
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = null;
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF((JSSubstitution) null);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.sort(comparator0);
      jSPredicateForm1.clonePF();
      JSPredicateForm jSPredicateForm2 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSPredicateForm2.applySubstitutionPF(jSSubstitution2);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.applySubstitutionPF(jSSubstitution2);
      jSSubstitution2.add((Object) jSPredicateForm3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSPredicateForm0.toStr();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      System.setCurrentTimeMillis((-1L));
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSSubstitution2.listIterator((-2376));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2376
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2Xg`$`|");
      stringReader0.skip(2L);
      stringReader0.read();
      StringReader stringReader1 = new StringReader("2Xg`$`|");
      char[] charArray0 = new char[6];
      stringReader1.read(charArray0);
      stringReader1.read(charArray0);
      StringReader stringReader2 = new StringReader(";");
      stringReader1.ready();
      StringReader stringReader3 = new StringReader("2Xg`$`|");
      stringReader3.markSupported();
      StringReader stringReader4 = new StringReader(";");
      stringReader3.mark(6);
      stringReader2.read();
      stringReader0.reset();
      stringReader1.read(charArray0);
      StringReader stringReader5 = new StringReader("2Xg`$`|");
      stringReader5.ready();
      StringReader stringReader6 = new StringReader("2Xg`$`|");
      stringReader2.markSupported();
      stringReader2.read(charArray0);
      stringReader0.skip(2L);
      StringReader stringReader7 = new StringReader("=vcIl");
      stringReader7.read();
      stringReader7.ready();
      stringReader7.ready();
      StringReader stringReader8 = new StringReader("=vcIl");
      stringReader2.ready();
      stringReader5.read(charArray0);
      stringReader1.reset();
      StringReader stringReader9 = new StringReader("2Xg`$`|");
      StringReader stringReader10 = new StringReader("2Xg`$`|");
      StringReader stringReader11 = new StringReader(";");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) stringReader3);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "n2@$`gWIAwF[";
      Object[] objectArray0 = new Object[14];
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StringReader stringReader1 = new StringReader(".");
      stringReader1.skip(0L);
      StringReader stringReader2 = new StringReader("cP/==`l");
      stringReader0.read();
      StringReader stringReader3 = new StringReader("");
      stringReader1.reset();
      stringReader3.mark(2147483645);
      StringReader stringReader4 = new StringReader("");
      stringReader2.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader3);
      long long0 = 0L;
      stringReader3.skip(0L);
      StringReader stringReader5 = new StringReader("!#v9-Eu{vc6");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader6 = new StringReader(".");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader6);
      StringReader stringReader7 = new StringReader("perator");
      StringReader stringReader8 = new StringReader("call");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      jSTerm0.add((Object) "unexpected");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StringReader stringReader1 = new StringReader(".");
      stringReader1.skip(0L);
      StringReader stringReader2 = new StringReader("cP/==`l");
      stringReader0.read();
      StringReader stringReader3 = new StringReader("");
      stringReader1.reset();
      StringReader stringReader4 = new StringReader("");
      stringReader2.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader3);
      stringReader3.skip(0L);
      StringReader stringReader5 = new StringReader("!#v9-Eu{vc6");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader6 = new StringReader(".");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader6);
      StringReader stringReader7 = new StringReader("perator");
      StringReader stringReader8 = new StringReader("call");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      jSTerm0.add((Object) "unexpected");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9448468679826323
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0F:=VL%h%gz%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      jSTerm1.add((Object) "0F:=VL%h%gz%");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, Integer> function1 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function0);
      Function<String, Integer> function2 = function1.compose((Function<? super String, ?>) unaryOperator0);
      function1.compose((Function<? super String, ?>) function2);
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      // Undeclared exception!
      try { 
        function1.compose((Function<? super Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(f3gl,? ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.quoteChar(1257);
      streamTokenizer0.nextToken();
      streamTokenizer0.wordChars(40, 40);
      streamTokenizer0.wordChars(40, 40);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.quoteChar(40);
      Function.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSPredicateForm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0F%=L%TS%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSTerm1;
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function4 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function5 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function6 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Integer> function7 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Integer, ?>) function4);
      UnaryOperator.identity();
      Function<Object, Integer> function8 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function7);
      function5.andThen((Function<? super Integer, ?>) function1);
      UnaryOperator.identity();
      function7.andThen((Function<? super Integer, ? extends Integer>) unaryOperator1);
      function6.compose((Function<? super String, ?>) function2);
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, String> function10 = unaryOperator2.andThen((Function<? super Integer, ? extends String>) function9);
      Function<Object, Integer> function11 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function12 = function11.compose((Function<? super Object, ?>) function5);
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function12);
      Function.identity();
      unaryOperator2.andThen((Function<? super Integer, ? extends String>) function10);
      Function.identity();
      UnaryOperator.identity();
      unaryOperator4.compose((Function<? super Object, ? extends Integer>) function7);
      Function<Object, Integer> function13 = unaryOperator3.compose((Function<? super Object, ? extends Integer>) function12);
      assertNotSame(function13, function8);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      streamTokenizer0.slashStarComments(true);
      stringReader0.skip((-4));
      streamTokenizer0.sval = "(";
      streamTokenizer0.wordChars((-4), 592);
      streamTokenizer0.quoteChar(592);
      streamTokenizer0.wordChars(1344, 592);
      streamTokenizer0.commentChar(3305);
      streamTokenizer0.pushBack();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.ttype = 592;
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.eolIsSignificant(false);
      stringReader0.skip(592);
      streamTokenizer0.eolIsSignificant(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("6!UH(dS");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.semicolon = 592;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer((-403));
      jSTerm0.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.8950056533107491
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XW)2");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer(41);
      jSSubstitution0.add((Object) integer0);
      jSSubstitution0.addAll((Collection) jSTerm0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = unaryOperator0.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      Function<Integer, Integer> function1 = unaryOperator0.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      Function.identity();
      Function<String, Integer> function2 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends Integer>) function2);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.andThen((Function<? super Integer, ? extends String>) function3);
      Integer integer1 = new Integer(48);
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function5 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function4);
      unaryOperator0.andThen((Function<? super Integer, ? extends Integer>) function0);
      Integer integer2 = new Integer((-1084518693));
      Function<Object, Integer> function6 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function5);
      unaryOperator0.andThen((Function<? super Integer, ?>) function1);
      function6.compose((Function<? super JSTerm, ?>) function5);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Function<Object, Object> function7 = Function.identity();
      Function.identity();
      JSSubstitution jSSubstitution2 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution1);
      assertFalse(jSSubstitution2.fail());
      
      Function<Object, Integer> function8 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function6);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function9 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function10 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function9);
      function9.compose((Function<? super String, ?>) function7);
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function10);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function8);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution3 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution3.fail());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0F%=VL%hTgS%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<String, Integer> function2 = unaryOperator0.compose((Function<? super String, ? extends Integer>) function1);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function4 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function3);
      Integer integer0 = new Integer((-1084518693));
      Function.identity();
      Function<Object, Integer> function5 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function4);
      unaryOperator0.andThen((Function<? super Integer, ?>) function5);
      Function<Object, Integer> function6 = function4.compose((Function<? super Object, ?>) function5);
      function1.compose((Function<? super JSTerm, ?>) function4);
      Function<Object, Object> function7 = Function.identity();
      Function.identity();
      jSTerm0.matches((JSPredicateForm) jSTerm1, (JSSubstitution) null);
      function4.compose((Function<? super String, ?>) function7);
      Function<Object, Integer> function8 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function6);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      function6.compose((Function<? super String, ?>) function2);
      Integer integer1 = new Integer((-1134076621));
      unaryOperator1.apply(integer1);
      Function<Object, Integer> function9 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function8);
      Function<Object, Integer> function10 = function5.compose((Function<? super Object, ?>) function9);
      UnaryOperator.identity();
      Function<Object, Integer> function11 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Integer> function12 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function9);
      Function.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      function4.compose((Function<? super JSTerm, ?>) function5);
      unaryOperator2.compose((Function<? super Object, ? extends Integer>) function12);
      Function<Object, Integer> function13 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function11);
      assertNotSame(function13, function10);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis((-2869L));
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V?+)");
      StringReader stringReader1 = new StringReader("B1");
      char[] charArray0 = new char[1];
      stringReader1.read(charArray0);
      stringReader0.markSupported();
      stringReader1.skip(0L);
      StringReader stringReader2 = new StringReader("Ynu3I'");
      StringReader stringReader3 = new StringReader("V?+)");
      StringReader stringReader4 = new StringReader("");
      StringReader stringReader5 = new StringReader("iKU");
      StringReader stringReader6 = new StringReader("0fG2RNJOfj");
      stringReader6.ready();
      StringReader stringReader7 = new StringReader("-");
      stringReader1.ready();
      stringReader2.read(charArray0);
      stringReader4.reset();
      StringReader stringReader8 = new StringReader("iKU");
      StringReader stringReader9 = new StringReader("-J");
      StringReader stringReader10 = new StringReader("B1");
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader5);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis(1792L);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.2738706471394226
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H;!zkh6!$&muaXN$mZ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Integer> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = predicate1.and(predicate0);
      jSSubstitution0.removeIf(predicate2);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm3.spliterator();
      jSPredicateForm1.equals(jSPredicateForm3);
      jSPredicateForm0.matches(jSPredicateForm2);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm4.sort((Comparator) null);
      JSPredicateForm jSPredicateForm5 = jSTerm0.standarizerPredicateForm();
      assertTrue(jSPredicateForm5.equals((Object)jSPredicateForm4));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(f3gl,? ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.nextToken();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.wordChars((-1), 38);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.nextToken();
      streamTokenizer0.wordChars((-3), (-1102));
      streamTokenizer0.wordChars((-3), (-3));
      streamTokenizer0.quoteChar((-3));
      streamTokenizer0.commentChar((-3));
      streamTokenizer0.whitespaceChars((-1102), (-3));
      streamTokenizer0.quoteChar((-3));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ttype = 38;
      streamTokenizer1.ttype = 38;
      streamTokenizer2.pushBack();
      streamTokenizer2.quoteChar((-3));
      streamTokenizer2.nextToken();
      streamTokenizer2.nval = (double) 38;
      streamTokenizer2.whitespaceChars(38, (-3216));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.percent = 33;
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V?+)");
      stringReader0.skip(2L);
      stringReader0.read();
      StringReader stringReader1 = new StringReader("B1");
      stringReader0.mark(43);
      stringReader0.markSupported();
      char[] charArray0 = new char[1];
      stringReader1.read(charArray0);
      stringReader1.markSupported();
      stringReader1.skip(2L);
      StringReader stringReader2 = new StringReader("c?w");
      StringReader stringReader3 = new StringReader("V?+)");
      StringReader stringReader4 = new StringReader("c?w");
      stringReader2.ready();
      stringReader2.read();
      StringReader stringReader5 = new StringReader("DKU");
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      stringReader5.read(charBuffer0);
      StringReader stringReader6 = new StringReader("V?+)");
      stringReader5.skip(2L);
      StringReader stringReader7 = new StringReader("UY#.$)CLx");
      StringReader stringReader8 = new StringReader("UY#.$)CLx");
      stringReader2.ready();
      stringReader5.read(charArray0);
      stringReader6.reset();
      StringReader stringReader9 = new StringReader("fG2NJOfj");
      StringReader stringReader10 = new StringReader("DKU");
      StringReader stringReader11 = new StringReader("DKU");
      StringReader stringReader12 = new StringReader("V?+)");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.sval = "(";
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.pushBack();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars((-4), (-4));
      stringReader0.read();
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.sval = null;
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.sval = null;
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.whitespaceChars(177, 177);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Integer integer0 = new Integer(0);
      jSTerm0.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSPredicateForm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X9qSkEW)o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator.identity();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution2.retainAll(jSSubstitution0);
      jSSubstitution2.spliterator();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution2.removeElements(jSSubstitution0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution2.addAll((Collection) jSSubstitution2);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(3758L);
      JSSubstitution jSSubstitution7 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution7.fail());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.sval = "(";
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.pushBack();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars((-4), (-4));
      stringReader0.read();
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.sval = null;
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.sval = null;
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.whitespaceChars(177, 177);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.9991455437217942
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X}?W)ST");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      jSSubstitution0.addAll((Collection) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      stringReader0.reset();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm0.clonePF();
      jSSubstitution2.trimToSize();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSTerm0.firstElement();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.toStr();
      jSTerm0.removeAll(jSSubstitution4);
      jSTerm0.toStr();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "Kn2@$`gWIAwF[";
      Object[] objectArray0 = new Object[13];
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.removeAllElements();
      jSPredicateForm0.setSize(1);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object[] objectArray0 = new Object[14];
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      objectArray0[0] = (Object) "Kn2@$`gWIAwF[";
      objectArray0[2] = (Object) "Kn2@$`gWIAwF[";
      objectArray0[3] = (Object) "Kn2@$`gWIAwF[";
      objectArray0[7] = (Object) "Kn2@$`gWIAwF[";
      objectArray0[6] = (Object) "Kn2@$`gWIAwF[";
      objectArray0[7] = (Object) "Kn2@$`gWIAwF[";
      Object[] objectArray1 = new Object[27];
      objectArray0[12] = (Object) "Kn2@$`gWIAwF[";
      objectArray1[1] = (Object) "Kn2@$`gWIAwF[";
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.0012159370965357
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "V?+)";
      StringReader stringReader0 = new StringReader("V?+)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.clone();
      jSPredicateForm0.print();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm3.clear();
      jSPredicateForm2.removeAllElements();
      // Undeclared exception!
      try { 
        jSPredicateForm3.equals(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V?+)");
      StringReader stringReader1 = new StringReader("B1");
      char[] charArray0 = new char[1];
      stringReader1.read(charArray0);
      stringReader0.markSupported();
      stringReader1.skip(0L);
      StringReader stringReader2 = new StringReader("Ynu3I'");
      StringReader stringReader3 = new StringReader("V?+)");
      StringReader stringReader4 = new StringReader("");
      StringReader stringReader5 = new StringReader("iKU");
      StringReader stringReader6 = new StringReader("0fG2RNJOfj");
      stringReader6.ready();
      char[] charArray1 = new char[4];
      charArray1[0] = '3';
      charArray1[1] = '3';
      CharBuffer charBuffer0 = CharBuffer.allocate('1');
      stringReader6.read(charBuffer0);
      charArray1[2] = '.';
      charArray1[3] = '1';
      stringReader6.read(charArray1);
      StringReader stringReader7 = new StringReader("");
      StringReader stringReader8 = new StringReader("B1");
      StringReader stringReader9 = new StringReader("?");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      jSPredicateForm0.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-2330L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-324L));
      System.setCurrentTimeMillis(317L);
      System.setCurrentTimeMillis(1125L);
      System.setCurrentTimeMillis(317L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1878L));
      System.setCurrentTimeMillis(528L);
      System.setCurrentTimeMillis(3802L);
      System.setCurrentTimeMillis((-2330L));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6868359830561608
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "(nVs,7G";
      long long0 = (-4L);
      StringReader stringReader0 = new StringReader("(nVs,7G");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6868359830561608
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "(nVs,7G";
      long long0 = 0L;
      StringReader stringReader0 = new StringReader("(nVs,7G");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.sval = "(";
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.pushBack();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.sval = null;
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.sval = null;
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.whitespaceChars(177, 177);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-2330L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-324L));
      System.setCurrentTimeMillis(317L);
      System.setCurrentTimeMillis((-2821L));
      System.setCurrentTimeMillis((-2330L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2821L));
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      assertEquals(10, jSPredicateForm0.capacity());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(fugl,?]");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
