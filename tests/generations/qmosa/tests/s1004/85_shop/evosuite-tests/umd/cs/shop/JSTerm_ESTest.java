/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 15:02:03 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Iterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6445801009239784
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis((-405L));
      StringReader stringReader0 = new StringReader("kEb~rW,h)??[m=Qa\"8@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.whiteSpace = (-4034);
      jSTerm0.isEval();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.print();
      streamTokenizer0.pushBack();
      JSTerm jSTerm2 = jSTerm0.parseList(streamTokenizer0);
      jSTerm2.clonePF();
      boolean boolean0 = jSTerm2.equals(jSTerm1);
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      
      boolean boolean1 = jSTerm2.isGround();
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm2.isConstant());
      assertFalse(boolean1 == boolean0);
      assertEquals("[nil]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.391907802251001
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "JD");
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.or(predicate1);
      Predicate<String> predicate3 = predicate0.and(predicate2);
      Predicate<String> predicate4 = predicate2.or(predicate0);
      predicate2.and(predicate4);
      Predicate<String> predicate5 = predicate3.negate();
      predicate5.or(predicate4);
      jSTerm0.removeIf(predicate5);
      StringReader stringReader0 = new StringReader("JD");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'G';
      stringReader0.read(charArray0);
      JSTerm jSTerm1 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("o$Gq#(aZn)42J");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer4.slashStarComments(false);
      jSTerm0.parseList(streamTokenizer4);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.594375165740439
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1(%");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm0.makeFunction();
      StringReader stringReader1 = new StringReader("1(%");
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm1.isGround();
      jSSubstitution3.ensureCapacity(46);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.containsAll(jSTerm2);
      jSTerm1.addElement(jSTerm0);
      jSTerm2.toStr();
      jSTerm1.toStr();
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm1.isFunction());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.070357175308493
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(3617);
      Integer integer0 = new Integer(3617);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Object object0 = new Object();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, Object> function0 = unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      Function.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) function0);
      Function<Object, Object> function1 = Function.identity();
      unaryOperator1.compose((Function<? super Object, ?>) function1);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      int int0 = (-108);
      jSTerm0.ensureCapacity(539);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.isEmpty();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 3700;
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(3700);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.setSize(3617);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer(852);
      Function.identity();
      jSSubstitution0.clear();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9871682507824033
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clonePF();
      stringReader0.ready();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      jSSubstitution0.instance(jSTerm0);
      streamTokenizer0.quoteChar(44);
      jSSubstitution0.add((Object) jSTerm0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.isGround();
      jSTerm1.makeEval(true);
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm0.isGround();
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm5 = jSTerm4.applySubstitutionT(jSSubstitution0);
      jSTerm1.spliterator();
      JSTerm jSTerm6 = jSTerm5.applySubstitutionT(jSSubstitution0);
      jSTerm6.cloneT();
      System.setCurrentTimeMillis(1240L);
      jSTerm1.matches(jSTerm3, jSSubstitution0);
      jSTerm0.matches(jSTerm3, jSSubstitution0);
      assertTrue(jSTerm1.isEval());
      
      jSTerm0.isEval();
      jSTerm4.matches(jSTerm2, jSSubstitution0);
      jSTerm2.cloneT();
      jSTerm0.print();
      System.setCurrentTimeMillis(1240L);
      jSTerm5.toStr();
      JSTerm jSTerm7 = jSTerm2.standardizerTerm();
      assertFalse(jSTerm7.isFunction());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6385057938676937
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1(%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm0.makeFunction();
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      jSSubstitution3.add((Object) streamTokenizer0);
      jSSubstitution3.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution6.add(object0);
      jSSubstitution5.add((Object) jSSubstitution6);
      jSSubstitution4.add((Object) jSSubstitution5);
      jSSubstitution3.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution4);
      Integer integer0 = new Integer(125);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution9.replaceAll(unaryOperator1);
      jSSubstitution5.add((Object) jSSubstitution3);
      jSTerm1.addElement(streamTokenizer0);
      CharBuffer.wrap((CharSequence) "1(%");
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.294563616868463
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cMz{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      jSTerm0.makeFunction();
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.removeAll(jSSubstitution0);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      jSSubstitution3.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      Integer integer0 = new Integer(1009);
      jSSubstitution5.add((Object) integer0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution5.add((Object) jSSubstitution6);
      jSSubstitution4.add((Object) jSSubstitution5);
      jSSubstitution3.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution4);
      Integer integer1 = new Integer(1009);
      jSSubstitution4.add((Object) integer1);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution5.replaceAll(unaryOperator1);
      jSSubstitution4.add((Object) jSTerm1);
      jSTerm1.addElement("cMz{");
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.572266529533325
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1(%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm0.makeFunction();
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution2.add((Object) streamTokenizer0);
      jSSubstitution2.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution5.add(object0);
      jSSubstitution4.add((Object) jSSubstitution5);
      jSSubstitution3.add((Object) jSSubstitution4);
      jSSubstitution2.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      Integer integer0 = new Integer(125);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSTerm1.cloneT();
      jSSubstitution8.replaceAll(unaryOperator1);
      jSSubstitution4.add((Object) jSSubstitution2);
      jSTerm1.addElement(streamTokenizer0);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSTerm0.toStr();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution9);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis((-2835L));
      StringReader stringReader0 = new StringReader("I");
      StringReader stringReader1 = new StringReader("I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.slashStarComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.ordinaryChar(93);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clear();
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals(0, jSTerm1.size());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5921054158833692
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1(%");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) stringReader0);
      jSSubstitution0.assignFailure();
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.listIterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution2);
      jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.makeEval(true);
      jSSubstitution3.ensureCapacity((-2));
      jSTerm0.cloneT();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.addElement((Object) null);
      jSSubstitution4.add((Object) null);
      jSSubstitution0.removeAllElements();
      jSSubstitution4.spliterator();
      JSJshopVars.slash = (-2);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.430399078980582
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1(%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm0.makeFunction();
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution3.add((Object) streamTokenizer0);
      jSSubstitution3.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution5.add((Object) jSSubstitution6);
      jSSubstitution4.add((Object) jSSubstitution5);
      jSSubstitution3.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution4);
      Integer integer0 = new Integer(125);
      jSSubstitution4.add((Object) integer0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution9.replaceAll(unaryOperator1);
      jSSubstitution8.add((Object) jSSubstitution4);
      jSTerm1.addElement(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5490252973436593
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Error flag1 : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(46, (-2071));
      streamTokenizer0.wordChars(46, 47);
      streamTokenizer0.pushBack();
      streamTokenizer0.quoteChar(46);
      stringReader0.mark(46);
      stringReader0.ready();
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSEvaluate.numericValue(jSTerm0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer0.lowerCaseMode(true);
      jSTerm0.matches(jSTerm1);
      JSJshopVars.equalT = 782;
      jSTerm1.toStr();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      streamTokenizer0.lowerCaseMode(true);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      char[] charArray0 = new char[3];
      char char0 = '%';
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSSubstitution0.set(2509, jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2509
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%XS'Q2,n!d{");
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals("[%XS]", jSTerm1.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1060057805858308
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1(%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      StringReader stringReader1 = new StringReader("1(%");
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution5);
      jSSubstitution3.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution4);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution8.replaceAll(unaryOperator0);
      jSSubstitution7.add((Object) jSSubstitution4);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSTerm2.isGround();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution3);
      JSJshopVars.plus = (-2);
      jSTerm1.call();
      jSTerm2.remove((Object) jSTerm3);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.572443330486185
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1(%");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm0.makeFunction();
      StringReader stringReader1 = new StringReader("1(%");
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution1.add((Object) stringReader1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) stringReader0);
      jSSubstitution1.add((Object) streamTokenizer0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution5);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.isGround();
      jSSubstitution0.ensureCapacity(46);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm1.stream();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm3.makeEval(true);
      jSTerm2.matches(jSTerm0, jSSubstitution6);
      jSTerm3.isGround();
      jSTerm3.applySubstitutionT(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3960622774428213
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cpll");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      streamTokenizer0.pushBack();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.skip((-1818L));
      jSTerm0.removeAll(jSTerm0);
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "1(*";
      StringReader stringReader0 = new StringReader("1(*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.883386103349204
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ldE*!!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.iterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeVariable();
      jSTerm0.clone();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.listIterator();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.isGround();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm2, jSSubstitution0);
      JSTerm jSTerm4 = jSTerm0.call();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.matches(jSTerm4, jSSubstitution1);
      jSTerm3.clone();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9136120348775867
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cpll");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      streamTokenizer0.pushBack();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      stringReader0.skip((-1818L));
      jSTerm0.removeAll(jSPredicateForm0);
      jSTerm0.equals(jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.matches((JSPredicateForm) jSTerm0);
      jSTerm2.spliterator();
      jSTerm1.isGround();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      jSTerm0.iterator();
      JSTerm jSTerm5 = jSTerm0.call();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm4.standarizerPredicateForm();
      jSTerm5.equals((JSPredicateForm) jSTerm1);
      jSTerm0.ensureCapacity((-85));
      jSTerm3.matches(jSTerm0, jSSubstitution0);
      jSTerm6.isEmpty();
      jSTerm5.cloneT();
      Object object0 = jSTerm2.clone();
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.or(predicate1);
      Predicate<String> predicate3 = predicate0.and(predicate2);
      Predicate.isEqual((Object) predicate0);
      Predicate<String> predicate4 = predicate3.negate();
      jSTerm0.removeIf(predicate4);
      System.setCurrentTimeMillis(0L);
      jSTerm1.equals(jSTerm6);
      // Undeclared exception!
      try { 
        jSTerm5.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.964599648847144
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      streamTokenizer0.pushBack();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      stringReader0.skip((-1818L));
      jSTerm0.removeAll(jSPredicateForm0);
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.matches((JSPredicateForm) jSTerm0);
      jSTerm3.spliterator();
      jSTerm2.isGround();
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution0);
      streamTokenizer0.ordinaryChar(4307);
      JSTerm jSTerm5 = jSTerm0.standardizerTerm();
      jSTerm1.iterator();
      JSTerm jSTerm6 = jSTerm0.call();
      JSTerm jSTerm7 = new JSTerm();
      JSTerm jSTerm8 = new JSTerm();
      jSTerm5.standarizerPredicateForm();
      jSTerm6.equals((JSPredicateForm) jSTerm2);
      jSTerm1.ensureCapacity((-85));
      JSSubstitution jSSubstitution1 = jSTerm4.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      boolean boolean1 = jSTerm6.isGround();
      assertTrue(boolean1 == boolean0);
      
      JSTerm jSTerm9 = jSTerm6.cloneT();
      assertFalse(jSTerm9.isConstant());
      
      System.setCurrentTimeMillis(0L);
      boolean boolean2 = jSTerm2.equals(jSTerm8);
      assertFalse(boolean2);
      
      jSTerm6.matches(jSTerm0);
      assertNotSame(jSTerm6, jSTerm9);
      assertEquals(10, jSTerm6.capacity());
      
      JSSubstitution jSSubstitution2 = jSTerm7.matches(jSTerm4);
      assertTrue(jSSubstitution2.fail());
      assertFalse(jSTerm4.isEval());
      assertTrue(jSTerm4.isFunction());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6602162707648
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(3617);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) ".");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      Object object0 = new Object();
      jSSubstitution0.add((Object) null);
      Integer integer0 = new Integer(3617);
      jSSubstitution0.add((Object) integer0);
      jSSubstitution0.add((Object) function0);
      StringReader stringReader0 = new StringReader("?Is%&4T=tF0D$l]");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.960223636974175
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a9hrx$l8B3j;m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.iterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm1.listIterator();
      jSTerm2.isGround();
      jSTerm1.cloneT();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm2.applySubstitutionT(jSSubstitution1);
      jSTerm2.call();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm3.matches(jSTerm0, jSSubstitution1);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution2));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.356483973602372
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      streamTokenizer0.pushBack();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm1.removeAll(jSTerm0);
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7766445221535783
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a9hrx$l8B3j;m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.iterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeVariable();
      jSTerm0.clone();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isEval();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.equals(jSTerm2);
      jSTerm1.equals(jSTerm0);
      jSTerm0.isVariable();
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm4.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.978265617659607
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      streamTokenizer0.pushBack();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      stringReader0.skip((-1818L));
      jSTerm0.removeAll(jSPredicateForm0);
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.matches((JSPredicateForm) jSTerm0);
      jSTerm3.spliterator();
      jSTerm2.isGround();
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm5 = jSTerm0.standardizerTerm();
      jSTerm1.iterator();
      JSTerm jSTerm6 = jSTerm0.call();
      JSTerm jSTerm7 = new JSTerm();
      JSTerm jSTerm8 = new JSTerm();
      jSTerm5.standarizerPredicateForm();
      jSTerm6.equals((JSPredicateForm) jSTerm2);
      jSTerm5.isGround();
      jSTerm1.ensureCapacity((-85));
      jSTerm4.matches(jSTerm1, jSSubstitution0);
      jSTerm6.isGround();
      jSTerm6.cloneT();
      Object object0 = jSTerm3.clone();
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.or(predicate1);
      Predicate<String> predicate3 = predicate0.and(predicate2);
      Predicate<String> predicate4 = predicate3.negate();
      jSTerm0.removeIf(predicate4);
      System.setCurrentTimeMillis(0L);
      jSTerm2.equals(jSTerm8);
      // Undeclared exception!
      try { 
        jSTerm6.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6221841167913795
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cMz{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      jSTerm0.makeFunction();
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.clear();
      jSSubstitution2.removeAll(jSSubstitution0);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution3.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      Integer integer0 = new Integer(1009);
      jSSubstitution5.add((Object) integer0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution5.add((Object) jSSubstitution6);
      jSSubstitution4.add((Object) jSSubstitution5);
      jSSubstitution3.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution4);
      Integer integer1 = new Integer(1009);
      jSSubstitution4.add((Object) integer1);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution9.replaceAll(unaryOperator1);
      jSTerm0.equals(jSTerm0);
      jSTerm1.addElement(streamTokenizer0);
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.2243459334381526
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      CharBuffer.allocate(44);
      jSTerm0.isEmpty();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.replaceAll(unaryOperator0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ?>) unaryOperator1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.addElement(unaryOperator0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSJshopVars.exclamation = 4561;
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.UnaryOperator$$Lambda$48/1656969068 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5489368099799905
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cMz{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      jSTerm0.makeFunction();
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.clear();
      jSSubstitution2.removeAll(jSSubstitution0);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution3.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      Integer integer0 = new Integer(1009);
      jSSubstitution5.spliterator();
      jSSubstitution5.add((Object) integer0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm0.isFunction();
      jSSubstitution4.add((Object) jSSubstitution5);
      jSSubstitution3.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution4);
      Integer integer1 = new Integer(1009);
      jSSubstitution4.add((Object) integer1);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution9.replaceAll(unaryOperator1);
      jSSubstitution8.add((Object) jSSubstitution4);
      jSTerm1.addElement(streamTokenizer0);
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.623717663816699
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("expected '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer0.nval = 0.0;
      streamTokenizer1.commentChar((-4));
      streamTokenizer3.pushBack();
      streamTokenizer0.sval = null;
      streamTokenizer0.quoteChar((-4));
      streamTokenizer3.commentChar((-4));
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer2.lowerCaseMode(false);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.nval = streamTokenizer1.nval;
      streamTokenizer3.quoteChar((-4));
      streamTokenizer3.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer3.quoteChar((-4));
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      streamTokenizer3.ttype = streamTokenizer3.ttype;
      streamTokenizer0.ttype = (-4);
      streamTokenizer2.pushBack();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.cloneT();
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      streamTokenizer1.sval = null;
      streamTokenizer4.wordChars((-4), (-4));
      streamTokenizer4.nextToken();
      System.setCurrentTimeMillis(39);
      System.setCurrentTimeMillis(39);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Zf|$UO?8U}RrH`Cg,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "1(";
      StringReader stringReader0 = new StringReader("1(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9092965501847785
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?UkR<!K6Z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "?UkR<!K6Z");
      jSTerm1.removeIf(predicate0);
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = new JSTerm();
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(boolean0);
      
      JSTerm jSTerm4 = jSTerm2.cloneT();
      assertTrue(jSTerm4.isVariable());
      assertFalse(jSTerm4.isConstant());
      assertFalse(jSTerm4.isFunction());
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm3);
      assertFalse(jSSubstitution0.isEmpty());
      
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertEquals("?%%% ", stringBuffer0.toString());
      assertNotSame(jSTerm2, jSTerm4);
      assertFalse(jSTerm2.isFunction());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(3617);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      int int0 = 852;
      Integer integer0 = new Integer(852);
      jSSubstitution0.add((Object) integer0);
      Function.identity();
      jSSubstitution0.clear();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5878861544337055
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "JD");
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.or(predicate1);
      Predicate<String> predicate3 = predicate0.and(predicate2);
      Predicate<String> predicate4 = predicate2.or(predicate0);
      predicate2.and(predicate4);
      Predicate<String> predicate5 = predicate3.negate();
      predicate0.and(predicate3);
      predicate5.or(predicate4);
      jSTerm0.removeIf(predicate5);
      StringReader stringReader0 = new StringReader("JD");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      CharBuffer.allocate(44);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stringReader0.ready();
      streamTokenizer0.commentChar((-285));
      jSTerm0.sort(comparator0);
      Integer integer0 = new Integer(3723);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) predicate2);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.replaceAll(unaryOperator0);
      Object object0 = new Object();
      jSSubstitution0.add(object0);
      Integer integer1 = new Integer((-285));
      jSTerm0.addElement(integer1);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.505735716471507
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("?^zVZ(hv]\"YQ'_");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm2, jSSubstitution0);
      jSTerm1.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.55044163432342
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?UkR<!K6Z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.232026424989612
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.clone();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.958277627629083
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l3W0]bvU$L1@3\"c");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer3.commentChar((-4));
      streamTokenizer1.ordinaryChars((-4), (-3));
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer1.nval = 0.0;
      streamTokenizer3.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer3.quoteChar((-4));
      jSTerm0.toStr();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.723260514922915
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?UkR<!K6Z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      jSTerm0.print();
      JSTerm jSTerm1 = null;
      jSTerm0.matches((JSTerm) null);
      jSTerm0.cloneT();
      jSTerm0.matches((JSTerm) null);
      jSTerm0.print();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1(*");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.948720592834763
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.setSize(3629);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      Object object0 = new Object();
      jSSubstitution1.add(object0);
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution0.clear();
      jSSubstitution1.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution1.add(object0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution1.containsAll(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution0.ensureCapacity(46);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(46);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.8419214422177115
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1(%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm0.makeFunction();
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution5.add((Object) jSSubstitution6);
      jSSubstitution4.add((Object) jSSubstitution5);
      jSSubstitution3.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution4);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution9.clear();
      jSSubstitution9.replaceAll(unaryOperator0);
      jSSubstitution8.add((Object) jSSubstitution4);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSTerm2.isGround();
      jSTerm2.applySubstitutionT(jSSubstitution3);
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm3.print();
      jSTerm3.cloneT();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution4);
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm4.isFunction());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.removeElements(jSSubstitution3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.stream();
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.928551319792604
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1(%");
      stringReader0.skip(0L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "1(%");
      jSSubstitution0.add((Object) stringReader0);
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution0.addElement((Object) null);
      jSSubstitution3.add((Object) jSSubstitution4);
      jSSubstitution2.assignFailure();
      jSSubstitution1.add((Object) jSSubstitution3);
      jSTerm0.toString();
      jSSubstitution2.add((Object) "[1.0]");
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution2.add((Object) streamTokenizer0);
      jSSubstitution5.add((Object) "1(%");
      jSSubstitution5.add((Object) jSSubstitution0);
      jSSubstitution5.add((Object) jSSubstitution2);
      streamTokenizer0.resetSyntax();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      stringReader0.ready();
      jSSubstitution6.addElement((Object) null);
      jSSubstitution6.add((Object) "1(%");
      jSSubstitution6.add((Object) null);
      jSSubstitution6.spliterator();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution8 = jSTerm0.matches(jSTerm1, jSSubstitution7);
      assertTrue(jSSubstitution8.fail());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 3617;
      jSTerm0.setSize(3617);
      Integer integer0 = new Integer(3617);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      Object object0 = new Object();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, Object> function1 = unaryOperator1.andThen((Function<? super Object, ?>) function0);
      Function<Integer, Integer> function2 = Function.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) function1);
      Function<Object, Object> function3 = Function.identity();
      Function<Object, Object> function4 = unaryOperator1.compose((Function<? super Object, ?>) function3);
      function3.andThen((Function<? super Object, ?>) function4);
      Integer integer1 = new Integer(3617);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.compose((Function<? super Object, ? extends Integer>) function5);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElement(function2);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6105981585090816
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1(%");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      StringReader stringReader1 = new StringReader("1(%");
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      jSTerm0.clear();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.8978141278730893
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1(%");
      stringReader0.skip(0L);
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      streamTokenizer0.nextToken();
      streamTokenizer0.wordChars(1831, 40);
      stringReader0.ready();
      streamTokenizer0.pushBack();
      streamTokenizer0.wordChars(1831, 1831);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm1.matches(jSTerm0);
      System.setCurrentTimeMillis(2805);
      System.setCurrentTimeMillis((-4192L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(40);
      System.setCurrentTimeMillis(40);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.9466429619294019
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1(%");
      stringReader0.skip(0L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "1(%");
      jSSubstitution0.add((Object) stringReader0);
      jSSubstitution0.assignFailure();
      Iterator iterator0 = jSSubstitution0.iterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.equals(jSTerm0);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution0.addElement(jSSubstitution5);
      jSSubstitution3.add((Object) iterator0);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution3.add((Object) "1(%");
      jSSubstitution3.add((Object) jSSubstitution0);
      jSSubstitution3.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution5.add((Object) iterator0);
      Object[] objectArray0 = new Object[0];
      jSSubstitution5.toArray(objectArray0);
      jSSubstitution6.forEach(consumer0);
      stringReader0.ready();
      jSSubstitution6.addElement((Object) null);
      jSSubstitution6.add((Object) "1(%");
      jSSubstitution6.add((Object) jSSubstitution5);
      jSSubstitution6.spliterator();
      JSJshopVars.slash = (-2);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.iterator();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?UkR<!K6Z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      jSTerm0.print();
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.8508947717022264
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a9hrx$l8B3j;m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.iterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm0.isEval();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm0.print();
      JSTerm jSTerm4 = new JSTerm();
      JSJshopVars.VarCounter = 42;
      jSTerm2.equals(jSTerm4);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      char char0 = 'I';
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "JD");
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.or(predicate1);
      Predicate<String> predicate3 = predicate0.and(predicate2);
      Predicate<String> predicate4 = predicate2.or(predicate0);
      predicate2.and(predicate4);
      predicate3.or(predicate0);
      Predicate<String> predicate5 = predicate3.negate();
      predicate0.and(predicate3);
      predicate5.or(predicate4);
      jSTerm0.removeIf(predicate5);
      StringReader stringReader0 = new StringReader("JD");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      CharBuffer.allocate(44);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stringReader0.ready();
      streamTokenizer0.commentChar((-285));
      jSTerm0.sort(comparator0);
      jSTerm0.containsAll(jSTerm0);
      jSTerm0.addElement((Object) null);
      jSTerm0.toStr();
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(461L);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 3672;
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.makeConstant();
      StringReader stringReader0 = new StringReader(", ");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.74860594619793
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?UkR<!K6Z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.stream();
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(boolean0);
      
      JSTerm jSTerm4 = jSTerm2.cloneT();
      JSTerm jSTerm5 = jSTerm4.standardizerTerm();
      assertTrue(jSTerm5.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm5.isEval());
      assertEquals(1, jSTerm2.capacity());
      assertEquals(10, jSTerm4.capacity());
      assertEquals("[?%%%0]", jSTerm5.toString());
      assertFalse(jSTerm4.isFunction());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1(%");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nextToken();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.wordChars(0, (-2));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.wordChars(60, (-2));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6429596877903171
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1(%");
      stringReader0.skip(0L);
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "1(%");
      jSSubstitution0.add((Object) stringReader0);
      jSSubstitution0.assignFailure();
      jSSubstitution0.iterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.retainAll(jSSubstitution2);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.clone();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution0.addElement(jSSubstitution4);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution3.add((Object) "1(%");
      jSSubstitution3.add((Object) jSSubstitution0);
      jSSubstitution3.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution5.forEach(consumer0);
      jSTerm0.isConstant();
      jSSubstitution5.addElement((Object) null);
      jSSubstitution5.add((Object) "1(%");
      jSSubstitution5.add((Object) jSSubstitution4);
      jSSubstitution5.spliterator();
      JSJshopVars.slash = (-2);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "1(*";
      StringReader stringReader0 = new StringReader("1(*");
      System.setCurrentTimeMillis((-2374L));
      int int0 = 0;
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(3617);
      Integer integer0 = new Integer(3617);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      Object object0 = new Object();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, Object> function1 = unaryOperator1.andThen((Function<? super Object, ?>) function0);
      Function<Integer, Integer> function2 = Function.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) function1);
      Function<Object, Object> function3 = Function.identity();
      Function<Object, Object> function4 = unaryOperator1.compose((Function<? super Object, ?>) function3);
      function3.andThen((Function<? super Object, ?>) function4);
      Integer integer1 = new Integer(3617);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.compose((Function<? super Object, ? extends Integer>) function5);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElement(function2);
      StringReader stringReader0 = new StringReader("[OVi< ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-2));
      streamTokenizer0.wordChars(2, 2);
      streamTokenizer1.slashStarComments(true);
      System.setCurrentTimeMillis((-4));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(3700);
      jSTerm0.isVariable();
      StringReader stringReader0 = new StringReader("3");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      streamTokenizer0.ordinaryChars((-2), 1223);
      int int0 = 64;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "3", 3700, 64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("expected '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer0.nval = 0.0;
      streamTokenizer1.commentChar((-4));
      streamTokenizer3.pushBack();
      streamTokenizer0.sval = null;
      streamTokenizer0.quoteChar((-4));
      streamTokenizer3.commentChar((-4));
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer2.wordChars(1171, (-1723));
      streamTokenizer2.lowerCaseMode(false);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.nval = streamTokenizer1.nval;
      streamTokenizer3.quoteChar((-4));
      streamTokenizer3.parseNumbers();
      streamTokenizer3.quoteChar((-4));
      streamTokenizer2.nval = (double) (-4);
      streamTokenizer0.ttype = (-4);
      streamTokenizer2.pushBack();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.sval = "GS";
      streamTokenizer4.nextToken();
      System.setCurrentTimeMillis((-3));
      System.setCurrentTimeMillis((-3));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = "(HzS";
      StringReader stringReader0 = new StringReader("(HzS");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      int int0 = (-3565);
      int int1 = 1;
      int int2 = 0;
      streamTokenizer0.whitespaceChars(1, 0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.958277627629083
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = "0u\"j+s[,r4VyD";
      StringReader stringReader0 = new StringReader("0u\"j+s[,r4VyD");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 0.0;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      System.setCurrentTimeMillis(0L);
      int int0 = 0;
      int int1 = 37;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "0u\"j+s[,r4VyD", 0, 37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6429596877903171
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1(%");
      stringReader0.skip(0L);
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = jSTerm0.clone();
      jSSubstitution0.add(object0);
      jSSubstitution0.add((Object) "1(%");
      jSSubstitution0.add((Object) stringReader0);
      jSSubstitution0.assignFailure();
      jSSubstitution0.iterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.retainAll(jSSubstitution2);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.clone();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution0.addElement(jSSubstitution4);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution3.add((Object) "1(%");
      jSSubstitution3.add((Object) jSSubstitution0);
      jSSubstitution3.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.add((Object) streamTokenizer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution5.forEach(consumer0);
      jSTerm0.isConstant();
      jSSubstitution5.addElement((Object) null);
      jSSubstitution5.add((Object) "1(%");
      jSSubstitution5.add((Object) jSSubstitution4);
      jSSubstitution5.spliterator();
      JSJshopVars.slash = (-2);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(3672);
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(3672);
      jSTerm0.isConstant();
      StringReader stringReader0 = new StringReader("3");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.ordinaryChars((-2), 1223);
      int int0 = 64;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "3", 3672, 64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(HnS");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.close();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "]ahrx$|83j;m";
      JSTerm jSTerm0 = new JSTerm();
      String string1 = ", ";
      StringReader stringReader0 = new StringReader(", ");
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = "]hx|MKj;";
      JSTerm jSTerm0 = new JSTerm();
      String string1 = "r/$";
      StringReader stringReader0 = new StringReader("r/$");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution3.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      Integer integer0 = new Integer(983);
      jSSubstitution5.add((Object) integer0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution5.add((Object) jSSubstitution6);
      jSSubstitution4.add((Object) jSSubstitution5);
      jSSubstitution3.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      Integer integer1 = new Integer(125);
      jSSubstitution4.add((Object) integer1);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution9.parallelStream();
      jSSubstitution9.replaceAll(unaryOperator1);
      jSSubstitution8.add((Object) jSSubstitution4);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.623717663816699
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("expected '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer0.nval = 0.0;
      streamTokenizer1.commentChar((-4));
      streamTokenizer3.pushBack();
      streamTokenizer0.sval = null;
      streamTokenizer0.quoteChar((-4));
      streamTokenizer3.commentChar((-4));
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer2.lowerCaseMode(false);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.nval = streamTokenizer1.nval;
      streamTokenizer3.quoteChar((-4));
      streamTokenizer3.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer3.quoteChar((-4));
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      streamTokenizer2.nval = (double) (-4);
      streamTokenizer0.ttype = (-4);
      streamTokenizer2.pushBack();
      jSTerm0.removeAll(jSTerm1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.750884973770687
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l3W0]bvU$L1@3\"c");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(1);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer3.commentChar((-4));
      streamTokenizer1.ordinaryChars((-4), (-3));
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer1.nval = 0.0;
      streamTokenizer3.quoteChar(4197);
      streamTokenizer3.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer3.quoteChar((-4));
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      jSTerm1.cloneT();
      JSJshopVars.percent = (-4);
      jSSubstitution0.add((Object) streamTokenizer3);
      JSJshopVars.rightPar = (-4);
      JSJshopVars.interrogation = (-4);
      streamTokenizer2.pushBack();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.makeVariable();
      jSTerm3.cloneT();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm3, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5296847785508279
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader("expected '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer1.commentChar((-4));
      streamTokenizer3.pushBack();
      streamTokenizer0.sval = null;
      streamTokenizer0.quoteChar((-4));
      streamTokenizer3.commentChar((-4));
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer2.lowerCaseMode(false);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer3.quoteChar((-4));
      streamTokenizer3.parseNumbers();
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.resetSyntax();
      streamTokenizer1.wordChars(2123, (-4));
      streamTokenizer3.slashStarComments(true);
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(3700);
      jSTerm0.isFunction();
      StringReader stringReader0 = new StringReader("3");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      streamTokenizer0.ordinaryChars((-2), 1223);
      int int0 = 64;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "3", 3700, 64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1(Q");
      char[] charArray0 = new char[0];
      stringReader0.markSupported();
      stringReader0.read(charArray0);
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("1(Q");
      stringReader1.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      int int0 = 127;
      streamTokenizer0.ordinaryChars(127, 127);
      streamTokenizer0.pushBack();
      stringReader1.read(charArray0);
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.04776041683849
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) "Expecting elements of the list");
      Predicate<Integer> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<Integer> predicate3 = predicate1.or(predicate2);
      Predicate<Integer> predicate4 = predicate3.negate();
      jSTerm0.removeIf(predicate4);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "JD");
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.or(predicate1);
      Predicate<String> predicate3 = predicate0.and(predicate2);
      Predicate<String> predicate4 = predicate2.or(predicate0);
      predicate2.and(predicate4);
      predicate3.or(predicate0);
      Predicate<String> predicate5 = predicate3.negate();
      predicate0.and(predicate3);
      predicate5.or(predicate4);
      jSTerm0.removeIf(predicate5);
      CharBuffer.allocate(44);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.containsAll(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
