/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 07:59:47 GMT 2020
 */

package org.jsecurity.web;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.security.Key;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletInputStream;
import javax.servlet.ServletRequest;
import javax.servlet.ServletRequestWrapper;
import javax.servlet.ServletResponse;
import javax.servlet.ServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsecurity.authc.AuthenticationToken;
import org.jsecurity.authc.UsernamePasswordToken;
import org.jsecurity.authc.credential.CredentialsMatcher;
import org.jsecurity.authc.credential.Md2CredentialsMatcher;
import org.jsecurity.authc.credential.Md5CredentialsMatcher;
import org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy;
import org.jsecurity.authz.permission.WildcardPermission;
import org.jsecurity.authz.permission.WildcardPermissionResolver;
import org.jsecurity.cache.Cache;
import org.jsecurity.codec.CodecSupport;
import org.jsecurity.crypto.BlowfishCipher;
import org.jsecurity.crypto.Cipher;
import org.jsecurity.mgt.DefaultSecurityManager;
import org.jsecurity.realm.Realm;
import org.jsecurity.realm.SimpleAccountRealm;
import org.jsecurity.session.Session;
import org.jsecurity.session.mgt.SessionManager;
import org.jsecurity.subject.DelegatingSubject;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.jsecurity.subject.Subject;
import org.jsecurity.web.DefaultWebSecurityManager;
import org.jsecurity.web.WebRememberMeManager;
import org.jsecurity.web.attr.CookieAttribute;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultWebSecurityManager_ESTest extends DefaultWebSecurityManager_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Md2CredentialsMatcher md2CredentialsMatcher0 = new Md2CredentialsMatcher();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      char[] charArray0 = new char[2];
      charArray0[1] = 'E';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("UTF-8", "UTF-8", false);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("UTF-8", "UTF-8", false);
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken();
      simpleAccountRealm0.supports((AuthenticationToken) null);
      UsernamePasswordToken usernamePasswordToken3 = new UsernamePasswordToken("UTF-8", charArray0, (InetAddress) null);
      Md5CredentialsMatcher md5CredentialsMatcher0 = new Md5CredentialsMatcher();
      simpleAccountRealm0.setCredentialsMatcher(md5CredentialsMatcher0);
      usernamePasswordToken3.setUsername("UTF-8");
      UsernamePasswordToken usernamePasswordToken4 = new UsernamePasswordToken("UTF-8", "There is an existing session alre dy created with session id [", false, (InetAddress) null);
      UsernamePasswordToken usernamePasswordToken5 = new UsernamePasswordToken((String) null, "D vq'1gwN#jy-}", false);
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      ServletRequest servletRequest0 = null;
      ServletResponse servletResponse0 = null;
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.getPrincipals((Session) null, (ServletRequest) null, (ServletResponse) null);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((PrincipalCollection) null, false, (Session) null, (ServletRequest) null, (ServletResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3592367006650063
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null).when(servletResponse0).getWriter();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper4);
      servletResponseWrapper2.getWriter();
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper8);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper2);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      Locale locale0 = Locale.KOREAN;
      servletResponseWrapper3.setLocale(locale0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getParameter(anyString());
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      doReturn((RequestDispatcher) null).when(servletRequest0).getRequestDispatcher(anyString());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      servletRequestWrapper0.getParameter("jsecurity");
      servletRequestWrapper1.getRequestDispatcher("', with '");
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper10);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      Subject subject0 = defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection0, true, (Session) null, (ServletRequest) servletRequestWrapper3, (ServletResponse) servletResponseWrapper1);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(subject0, servletRequestWrapper1, servletResponseWrapper4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1383330595080277
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Md2CredentialsMatcher md2CredentialsMatcher0 = new Md2CredentialsMatcher();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      char[] charArray0 = new char[2];
      charArray0[1] = 'E';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("UTF-8", "UTF-8", false);
      usernamePasswordToken1.setRememberMe(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-48);
      CodecSupport.toChars(byteArray0, "UTF-8");
      usernamePasswordToken1.clear();
      usernamePasswordToken1.clear();
      simpleAccountRealm0.supports(usernamePasswordToken0);
      simpleAccountRealm0.setCredentialsMatcher(md2CredentialsMatcher0);
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("UTF-8", "UTF-8", false);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm1);
      defaultWebSecurityManager0.isAuthenticated((Session) null, (ServletRequest) null, (ServletResponse) null);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) null, (ServletResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9133036567531656
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      defaultWebSecurityManager0.setRememberMeManager(webRememberMeManager0);
      defaultWebSecurityManager0.setSessionManager((SessionManager) null);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      System.setCurrentTimeMillis(1000L);
      defaultWebSecurityManager0.setSessionIdCookieName("CZntPa6");
      defaultWebSecurityManager0.getSessionMode();
      defaultWebSecurityManager0.setSessionIdCookiePath("', with '");
      defaultWebSecurityManager0.setSessionIdCookieSecure(false);
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5481155268740174
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      WebRememberMeManager webRememberMeManager1 = new WebRememberMeManager();
      Cipher cipher0 = webRememberMeManager1.getCipher();
      BlowfishCipher.generateNewKey();
      BlowfishCipher.generateNewKey();
      webRememberMeManager0.setCipher(cipher0);
      webRememberMeManager0.getCookiePath();
      defaultWebSecurityManager0.setRememberMeManager(webRememberMeManager0);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.setSessionIdCookieMaxAge((-1636728273));
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      char[] charArray0 = new char[2];
      charArray0[0] = '_';
      charArray0[1] = '_';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("v?", charArray0, false);
      usernamePasswordToken0.toString();
      simpleAccountRealm0.supports(usernamePasswordToken0);
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm("BH<EU`XP9");
      Md2CredentialsMatcher md2CredentialsMatcher0 = new Md2CredentialsMatcher();
      simpleAccountRealm2.setCredentialsMatcher(md2CredentialsMatcher0);
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm("BH<EU`XP9");
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultSecurityManager0);
      Session session0 = delegatingSubject0.getSession(true);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      defaultWebSecurityManager0.getPrincipals(session0, (ServletRequest) null, servletResponseWrapper0);
      defaultWebSecurityManager0.checkPermissions((PrincipalCollection) null, (String[]) null);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(delegatingSubject0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6417347121875212
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      defaultWebSecurityManager0.getSubject();
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet2 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      DefaultSecurityManager defaultSecurityManager0 = new DefaultSecurityManager();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultSecurityManager0);
      Session session0 = delegatingSubject0.getSession(true);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("]...");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      boolean boolean0 = defaultWebSecurityManager0.isAuthenticated(session0, servletRequestWrapper1, servletResponseWrapper0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.2396593920543857
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      WebRememberMeManager webRememberMeManager1 = new WebRememberMeManager();
      Cipher cipher0 = webRememberMeManager1.getCipher();
      webRememberMeManager0.setCipher(cipher0);
      webRememberMeManager0.getCookiePath();
      defaultWebSecurityManager0.setRememberMeManager(webRememberMeManager0);
      defaultWebSecurityManager0.setSessionManager((SessionManager) null);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      boolean boolean0 = defaultWebSecurityManager0.isHttpSessionMode();
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4019454593787288
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fQzKqx+WU>so<");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fQzKqx+WU>so<");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fQzKqx+WU>so<");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("fQzKqx+WU>so<");
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("fQzKqx+WU>so<");
      simpleAccountRealm1.getAuthorizationCache();
      simpleAccountRealm0.setAuthorizationCache((Cache) null);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.getSessionMode();
      assertFalse(defaultWebSecurityManager0.isHttpSessionMode());
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null).when(servletResponse0).getWriter();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper3);
      servletResponseWrapper2.getWriter();
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper7);
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper2);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getParameter(anyString());
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      doReturn((RequestDispatcher) null).when(servletRequest0).getRequestDispatcher(anyString());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper1);
      servletRequestWrapper1.getParameter("li");
      servletRequestWrapper3.getRequestDispatcher("http");
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper8);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(servletResponseWrapper10, "org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      Subject subject0 = defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection0, true, (Session) null, (ServletRequest) servletRequestWrapper1, (ServletResponse) servletResponseWrapper5);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(subject0, servletRequestWrapper1, servletResponseWrapper7);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Md2CredentialsMatcher md2CredentialsMatcher0 = new Md2CredentialsMatcher();
      char[] charArray0 = new char[2];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("UTF-8", "UTF-8", false);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("UTF-8", "UTF-8", false);
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("UTF-8", "UTF-8", false);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("UTF-8");
      UsernamePasswordToken usernamePasswordToken3 = new UsernamePasswordToken("UTF-8", "UTF-8", false, (InetAddress) null);
      Md5CredentialsMatcher md5CredentialsMatcher0 = new Md5CredentialsMatcher();
      usernamePasswordToken3.setUsername("UTF-8");
      CodecSupport.toBytes("UTF-8");
      UsernamePasswordToken usernamePasswordToken4 = new UsernamePasswordToken("oEXo|)XX*3&{IiWZ", "8%q", false, (InetAddress) null);
      UsernamePasswordToken usernamePasswordToken5 = new UsernamePasswordToken("<ux?EaLmz", "UTF-8", true);
      Object object0 = new Object();
      Object object1 = new Object();
      Boolean boolean0 = Boolean.TRUE;
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(boolean0, "_PRINCIPALS_SESSION_KEY");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      Subject subject0 = defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection0, false, (Session) null, (ServletRequest) servletRequestWrapper0, (ServletResponse) null);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(subject0, servletRequestWrapper1, (ServletResponse) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Md2CredentialsMatcher md2CredentialsMatcher0 = new Md2CredentialsMatcher();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      char[] charArray0 = new char[2];
      charArray0[1] = 'E';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("UTF-8", "UTF-8", false);
      usernamePasswordToken0.setRememberMe(false);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("UTF-8", "UTF-8", false);
      usernamePasswordToken1.clear();
      usernamePasswordToken1.setRememberMe(false);
      usernamePasswordToken1.setRememberMe(true);
      usernamePasswordToken1.clear();
      usernamePasswordToken0.clear();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("UTF-8", charArray0, inetAddress0);
      simpleAccountRealm0.supports(usernamePasswordToken0);
      simpleAccountRealm0.setCredentialsMatcher((CredentialsMatcher) null);
      UsernamePasswordToken usernamePasswordToken3 = new UsernamePasswordToken("UTF-8", "vYnvFZM~8", true);
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.isAuthenticated((Session) null, (ServletRequest) null, (ServletResponse) null);
      boolean boolean0 = defaultWebSecurityManager0.isAuthenticated((Session) null);
      assertFalse(boolean0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Md2CredentialsMatcher md2CredentialsMatcher0 = new Md2CredentialsMatcher();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      wildcardPermissionResolver0.resolvePermission("hhNm>n");
      wildcardPermissionResolver0.resolvePermission("jsecurity");
      wildcardPermissionResolver0.resolvePermission("hhNm>n");
      WildcardPermission wildcardPermission0 = new WildcardPermission("knNmx");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setPermissionResolver(wildcardPermissionResolver0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [null].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1383330595080277
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      Subject subject0 = defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper0, (ServletResponse) servletResponseWrapper0);
      assertFalse(subject0.isAuthenticated());
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1490596969706202
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(servletResponse0).isCommitted();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper4);
      servletResponseWrapper2.isCommitted();
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper1);
      servletResponseWrapper7.setResponse(servletResponseWrapper5);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((ServletInputStream) null).when(servletRequest0).getInputStream();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper3);
      servletRequestWrapper2.getInputStream();
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper8);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper4);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("http");
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Md2CredentialsMatcher md2CredentialsMatcher0 = new Md2CredentialsMatcher();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      char[] charArray0 = new char[2];
      charArray0[1] = 'E';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("UTF-8", "UTF-8", false);
      usernamePasswordToken0.setRememberMe(false);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("UTF-8", "UTF-8", false);
      usernamePasswordToken0.toString();
      usernamePasswordToken1.clear();
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken1.setRememberMe(true);
      usernamePasswordToken1.clear();
      usernamePasswordToken0.clear();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("UTF-8", charArray0, inetAddress0);
      usernamePasswordToken2.setUsername("7/!=zP~#L_+");
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      UsernamePasswordToken usernamePasswordToken3 = new UsernamePasswordToken("ly", "3/H,k!PiF A+@&p<&{a", true, inetAddress0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((ServletRequest) null, (ServletResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(servletResponse0).isCommitted();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper5);
      servletResponseWrapper1.isCommitted();
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper7);
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper8);
      servletResponseWrapper0.setResponse(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper9);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper10);
      ServletResponseWrapper servletResponseWrapper12 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((ServletInputStream) null).when(servletRequest0).getInputStream();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper1);
      servletRequestWrapper4.getInputStream();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      delegatingSubject0.logout();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      delegatingSubject0.hasRoles(list0);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper4);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind((Subject) null, servletRequestWrapper2, servletResponseWrapper12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      linkedHashSet1.retainAll(linkedList1);
      linkedList1.stream();
      linkedHashSet1.parallelStream();
      Comparator<Locale.LanguageRange> comparator0 = (Comparator<Locale.LanguageRange>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      LinkedHashSet<String> linkedHashSet2 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedHashSet1, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager0);
      delegatingSubject0.hasRoles(list0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      defaultWebSecurityManager0.bind(delegatingSubject0, servletRequestWrapper2, servletResponseWrapper0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CookieAttribute<String> cookieAttribute0 = new CookieAttribute<String>("_PRINCIPALS_ESSION_KEY");
      cookieAttribute0.setMaxAge(Integer.MAX_VALUE);
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      BlowfishCipher blowfishCipher0 = new BlowfishCipher();
      BlowfishCipher.generateNewKey();
      BlowfishCipher.generateNewKey();
      BlowfishCipher.generateNewKey();
      Key key0 = BlowfishCipher.generateNewKey();
      blowfishCipher0.setKey(key0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)105;
      blowfishCipher0.encrypt(byteArray0, byteArray0);
      BlowfishCipher.generateNewKey();
      BlowfishCipher.generateNewKey();
      BlowfishCipher blowfishCipher1 = new BlowfishCipher();
      webRememberMeManager0.setCipher(blowfishCipher1);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("b`]@5p:7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [b`]@5p:7].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320/org.jsecurity.realm.text.PropertiesRealm-0-accounts.data");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = null;
      defaultWebSecurityManager0.setRememberMeDecryptionCipherKey((byte[]) null);
      Integer integer0 = new Integer(2910);
      String string0 = "(Z^";
      Integer.getInteger("(Z^");
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookieMaxAge((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(servletResponse0).isCommitted();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper5);
      servletResponseWrapper1.isCommitted();
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper7);
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper8);
      servletResponseWrapper0.setResponse(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper9);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper10);
      ServletResponseWrapper servletResponseWrapper12 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((ServletInputStream) null).when(servletRequest0).getInputStream();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper1);
      servletRequestWrapper4.getInputStream();
      ServletResponseWrapper servletResponseWrapper13 = new ServletResponseWrapper(servletResponseWrapper11);
      ServletResponseWrapper servletResponseWrapper14 = new ServletResponseWrapper(servletResponseWrapper8);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponseWrapper servletResponseWrapper15 = new ServletResponseWrapper(servletResponseWrapper2);
      defaultWebSecurityManager0.getPrincipals((Session) null, servletRequestWrapper5, servletResponseWrapper12);
      System.setCurrentTimeMillis(1073741824L);
      defaultWebSecurityManager0.getPrincipals((Session) null);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(simpleAccountRealm0, "sessionMode is 'jsecurity'.");
      Class<Realm> class0 = Realm.class;
      Collection<Realm> collection0 = simplePrincipalCollection0.byType(class0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(collection0);
      System.setCurrentTimeMillis(889L);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0114042647073518
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletResponse0).getCharacterEncoding();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      servletResponseWrapper3.setResponse(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper4);
      servletResponseWrapper5.getCharacterEncoding();
      defaultWebSecurityManager0.newSessionManagerInstance();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0114042647073518
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_-2504");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=y");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=y");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendDataToFile(evoSuiteFile1, (byte[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.isHttpSessionMode();
      System.setCurrentTimeMillis(1004L);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_-2504");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`|CR");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Boolean boolean0 = new Boolean("`|CR");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieSecure(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletResponse0).getCharacterEncoding();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper4);
      servletResponseWrapper5.setResponse(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper1);
      servletResponseWrapper0.getCharacterEncoding();
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager((Realm) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realm argument cannot be null
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      wildcardPermissionResolver0.resolvePermission("> does not allow nested <");
      wildcardPermissionResolver0.resolvePermission("hhNm>n");
      wildcardPermissionResolver0.resolvePermission("org.jsecurity.authc.credential.Md2CredentialsMatcher");
      System.setCurrentTimeMillis(1073741824L);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      String string0 = defaultWebSecurityManager0.getSessionMode();
      assertEquals("http", string0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      wildcardPermissionResolver0.resolvePermission("> does not allow nested <");
      FileSystemHandling.shouldAllThrowIOExceptions();
      wildcardPermissionResolver0.resolvePermission("hhNm>n");
      wildcardPermissionResolver0.resolvePermission("org.jsecurity.authc.credential.Md2CredentialsMatcher");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieMaxAge((-1935685806));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      simpleAccountRealm0.initAuthorizationCache();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookiePath("sessionMode is 'jsecurity'.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setRememberMeCookiePath("5XOQ[l:F=-o37>\tcr");
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Md2CredentialsMatcher md2CredentialsMatcher0 = new Md2CredentialsMatcher();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      char[] charArray0 = new char[2];
      charArray0[1] = 'E';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("UTF-8", "UTF-8", false);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("UTF-8", "UTF-8", false);
      usernamePasswordToken1.setRememberMe(true);
      usernamePasswordToken1.clear();
      usernamePasswordToken0.clear();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("UTF-8", charArray0, inetAddress0);
      simpleAccountRealm0.supports(usernamePasswordToken0);
      simpleAccountRealm0.setCredentialsMatcher((CredentialsMatcher) null);
      UsernamePasswordToken usernamePasswordToken3 = new UsernamePasswordToken("UTF-8", "vYnvFZM~8", true);
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      System.setCurrentTimeMillis((-373L));
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieName("UTF-8");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      linkedHashSet1.retainAll(linkedHashSet0);
      LinkedHashSet<String> linkedHashSet2 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedHashSet1, locale_FilteringMode0);
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = '<';
      charArray0[2] = '0';
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookiePath("UdG{");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Md2CredentialsMatcher md2CredentialsMatcher0 = new Md2CredentialsMatcher();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      char[] charArray0 = new char[2];
      charArray0[1] = 'E';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("UTF-8", "UTF-8", false);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("UTF-8", "UTF-8", false);
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("UTF-8", "a,@,_Z@zA", false);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("a,@,_Z@zA");
      simpleAccountRealm0.supports((AuthenticationToken) null);
      UsernamePasswordToken usernamePasswordToken3 = new UsernamePasswordToken("UTF-8", charArray0, (InetAddress) null);
      Md5CredentialsMatcher md5CredentialsMatcher0 = new Md5CredentialsMatcher();
      simpleAccountRealm0.setCredentialsMatcher(md5CredentialsMatcher0);
      usernamePasswordToken3.setUsername("UTF-8");
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm("There is an existing session already created with session id [");
      UsernamePasswordToken usernamePasswordToken4 = new UsernamePasswordToken("UTF-8", "UTF-8", false);
      usernamePasswordToken0.toString();
      Md2CredentialsMatcher md2CredentialsMatcher1 = new Md2CredentialsMatcher();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm1);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("log4j.category.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [log4j.category.].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0, "org.jsecurity.authz.SimpleRole");
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection(simplePrincipalCollection1);
      Class<Realm> class0 = Realm.class;
      Collection<Realm> collection0 = simplePrincipalCollection2.byType(class0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager(collection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realms collection argument cannot be empty.
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0, "org.jsecurity.authz.SimpleRole");
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection(simplePrincipalCollection1);
      Class<Realm> class0 = Realm.class;
      simplePrincipalCollection2.byType(class0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)0;
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      defaultWebSecurityManager0.setModularAuthenticationStrategy(firstSuccessfulAuthenticationStrategy0);
      Integer integer0 = new Integer((byte)71);
      defaultWebSecurityManager0.setRememberMeCookieMaxAge(integer0);
      System.setCurrentTimeMillis((byte)71);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletResponse0).getCharacterEncoding();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper3);
      servletResponseWrapper2.setResponse(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper7);
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper0);
      servletResponseWrapper2.getCharacterEncoding();
      servletResponseWrapper10.setContentType((String) null);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((ServletRequest) servletRequestWrapper0, (ServletResponse) servletResponseWrapper10);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.servlet.ServletRequestWrapper cannot be cast to javax.servlet.http.HttpServletRequest
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }
}
