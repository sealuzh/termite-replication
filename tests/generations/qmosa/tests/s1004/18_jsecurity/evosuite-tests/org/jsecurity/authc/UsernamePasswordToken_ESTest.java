/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 15:32:50 GMT 2019
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = 'a';
      charArray0[2] = 'l';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)10;
      InetAddress inetAddress0 = MockInetAddress.getByAddress("", byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("K,Qd", "K,Qd", true, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, false);
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object4));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("FJ", "");
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "I=JJXs#'\"e_>}^O)D");
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress("j^+!ieilH=|q42K.`", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("j^+!ieilH=|q42K.`", charArray0, false, inetAddress0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress("j^+!i=ilH=|q42K.`", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("j^+!i=ilH=|q42K.`", "j^+!i=ilH=|q42K.`", inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress("j^+!i=ilH=|q42K.`", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("V@qN\"m_sBvuA^X", (char[]) null, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = 'a';
      charArray0[2] = 'l';
      charArray0[0] = 'f';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" =)!o_", ", rememberMe=");
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress("Tjih~Z*+7fe<2VKx", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Tjih~Z*+7fe<2VKx", (String) null, (InetAddress) null);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(".#0nB;FX*", ".#0nB;FX*");
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = '@';
      charArray0[2] = 'Q';
      charArray0[3] = 'J';
      charArray0[4] = 'U';
      charArray0[5] = 'z';
      charArray0[6] = 'I';
      charArray0[7] = 'i';
      usernamePasswordToken0.setPassword(charArray0);
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object1));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("up[ ,T0}SDI{sswQa", (String) null);
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" - ", " - ");
      assertFalse(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.setRememberMe(true);
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, "I=JJXs#'\"e_>}^O)D", false);
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.059354619737041
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = 'a';
      charArray0[2] = 'l';
      charArray0[3] = 'f';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" =)!o_", charArray0, true);
      usernamePasswordToken0.setPassword(charArray0);
      char[] charArray1 = new char[7];
      charArray1[0] = 'f';
      charArray1[1] = 'l';
      charArray1[2] = ':';
      charArray1[3] = 'z';
      charArray1[4] = '9';
      charArray1[5] = ':';
      char[] charArray2 = new char[8];
      charArray2[0] = 'a';
      charArray2[1] = 'l';
      charArray2[2] = 'Y';
      charArray2[3] = '#';
      charArray2[4] = ':';
      charArray2[5] = '<';
      charArray2[6] = 'Y';
      charArray2[7] = 'z';
      usernamePasswordToken0.setPassword(charArray2);
      charArray1[6] = 'Y';
      usernamePasswordToken0.setPassword(charArray1);
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress("", byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "5{L_xwvHGHp", false, inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=false (/127.0.0.1)", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("ha984>f|= j", (String) null, inetAddress0);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("dr~Lzk$oFU=}V$r1*h", "$U]t*Crz&S6{=T", false);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - dr~Lzk$oFU=}V$r1*h, rememberMe=false", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("UH-uhAgEKDQa{`z", "UH-uhAgEKDQa{`z", true);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("A,9s[%$9})", ";(/9Uxbrki AAm2}u5Ng", inetAddress0);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" - ", " - ");
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)52;
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress1 = MockInetAddress.getByAddress(byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("m*I=U$r'M8hsKD7", (String) null, inetAddress0);
      MockInetAddress.getLoopbackAddress();
      usernamePasswordToken0.setInetAddress(inetAddress1);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(".#0nB;FX*", ".#0nB;FX*", false);
      usernamePasswordToken0.getCredentials();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, "o#8W+h/y_BG*N=O");
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("WpRz5yOCkZG!oHF7R&E", "FJ", true);
      usernamePasswordToken0.getPassword();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("4`trIM>lJ(Dj5g|B", "9~1VYx%MX5:^Cu", true);
      usernamePasswordToken0.setUsername("9~1VYx%MX5:^Cu");
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object4));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-3);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("I=JJXs#'\"e_>}^O)D", "", false);
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress("n", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, true, inetAddress0);
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = 'A';
      charArray0[2] = '<';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, charArray0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }
}
