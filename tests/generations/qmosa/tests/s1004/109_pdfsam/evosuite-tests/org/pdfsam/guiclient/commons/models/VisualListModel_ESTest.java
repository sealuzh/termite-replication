/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 16:10:43 GMT 2019
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.pdf.PdfGraphics2D;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.RenderingHints;
import java.awt.color.ICC_Profile;
import java.awt.event.AdjustmentListener;
import java.awt.event.ComponentListener;
import java.awt.event.ContainerListener;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.awt.event.ItemListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.event.TextListener;
import java.awt.event.WindowFocusListener;
import java.awt.event.WindowListener;
import java.awt.image.renderable.ParameterBlock;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.EventListener;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import javax.media.jai.CollectionOp;
import javax.media.jai.OperationRegistry;
import javax.media.jai.operator.FPXDescriptor;
import javax.media.jai.operator.IIPResolutionDescriptor;
import javax.swing.Icon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLayeredPane;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JSpinner;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.VisualPageListItem;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.data = null;
      // Undeclared exception!
      try { 
        visualListModel0.clearData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.524809246073585
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      visualListModel0.rotateClockwiseElements(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      visualListModel0.reverseElements(intArray0);
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      ParameterBlock parameterBlock0 = new ParameterBlock();
      parameterBlock0.add((float) (-47));
      ParameterBlock parameterBlock1 = new ParameterBlock();
      parameterBlock0.set((float) 1, 6);
      visualListModel0.moveUpIndex(1);
      ParameterBlock parameterBlock2 = parameterBlock0.add((float) (-47));
      parameterBlock2.clone();
      Vector<Object> vector0 = new Vector<Object>(10);
      parameterBlock2.setSources(vector0);
      parameterBlock2.set(10000, 10000);
      parameterBlock2.set((byte)70, 725);
      ParameterBlock parameterBlock3 = new ParameterBlock();
      parameterBlock0.set((Object) parameterBlock2, 1);
      Stack<Object> stack0 = new Stack<Object>();
      System.setCurrentTimeMillis(1024L);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JMenu jMenu0 = new JMenu("v-OS_J>I6wyrqB!x\"8");
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      jPopupMenu0.getName();
      Class<DefaultEditorKit.InsertTabAction> class0 = DefaultEditorKit.InsertTabAction.class;
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel(433.89, 0.0, 433.89, 0.0);
      JSpinner jSpinner0 = new JSpinner(spinnerNumberModel0);
      JSpinner.DefaultEditor jSpinner_DefaultEditor0 = new JSpinner.DefaultEditor(jSpinner0);
      AWTEventMulticaster.getListeners((EventListener) jSpinner_DefaultEditor0, class0);
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(windowListener0, windowListener0);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      WindowFocusListener windowFocusListener0 = mock(WindowFocusListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(windowFocusListener0, windowFocusListener0);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      AWTEventMulticaster.add((HierarchyListener) null, hierarchyListener1);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, hierarchyListener1);
      AWTEventMulticaster.add(hierarchyListener1, hierarchyListener1);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      visualListModel0.getSize();
      OperationRegistry operationRegistry0 = OperationRegistry.getThreadSafeOperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      Vector<Object> vector0 = parameterBlock0.getParameters();
      ParameterBlock parameterBlock1 = new ParameterBlock(vector0);
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      Object object0 = new Object();
      RenderingHints renderingHints0 = new RenderingHints(sunHints_LCDContrastKey0, object0);
      CollectionOp collectionOp0 = new CollectionOp(operationRegistry0, "", parameterBlock1, renderingHints0);
      // Undeclared exception!
      try { 
        visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) collectionOp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No descriptor by name \"\" is registered under mode \"collection\".
         //
         verifyException("javax.media.jai.OperationRegistry", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.344039972848683
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      arrayDeque0.removeFirstOccurrence(vector0);
      arrayDeque0.iterator();
      vector0.add((VisualPageListItem) null);
      visualListModel0.addElementAt((VisualPageListItem) null, 0);
      visualListModel0.removeElements(0, 0, true);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.elementChanged((VisualPageListItem) null);
      Boolean boolean0 = new Boolean(false);
      vector0.parallelStream();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "pj:;)jj&b");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pj:;)jj&b");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pj:;)jj&b");
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-930);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-929)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      vector0.add((VisualPageListItem) null);
      JMenu jMenu0 = new JMenu();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("ibn9-", (Icon) null);
      jCheckBoxMenuItem0.firePropertyChange("ibn9-", (byte)96, (byte) (-107));
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Icon) null);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)96;
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 96
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4917058533980443
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      visualListModel0.rotateClockwiseElements(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      visualListModel0.reverseElements(intArray0);
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      ParameterBlock parameterBlock0 = new ParameterBlock();
      ParameterBlock parameterBlock1 = parameterBlock0.add((float) (-47));
      ParameterBlock parameterBlock2 = new ParameterBlock();
      parameterBlock0.set((float) 1, 6);
      visualListModel0.moveUpIndex(1);
      ParameterBlock parameterBlock3 = parameterBlock0.add((float) (-47));
      ParameterBlock parameterBlock4 = new ParameterBlock();
      parameterBlock3.clone();
      parameterBlock3.add((Object) parameterBlock1);
      parameterBlock3.set((byte)70, 725);
      parameterBlock3.add('h');
      ParameterBlock parameterBlock5 = new ParameterBlock();
      parameterBlock0.set((Object) parameterBlock3, 1);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.2825888230928486
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int[] intArray0 = new int[2];
      intArray0[0] = (-47);
      intArray0[0] = 1;
      visualListModel0.rotateClockwiseElements(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.removeElementAt(1, true);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      ParameterBlock parameterBlock0 = new ParameterBlock();
      ParameterBlock parameterBlock1 = parameterBlock0.add((float) (-47));
      ParameterBlock parameterBlock2 = new ParameterBlock();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      parameterBlock0.set((Object) parameterBlock1, 1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Stack<Object> stack0 = new Stack<Object>();
      DefaultTableModel[] defaultTableModelArray0 = new DefaultTableModel[3];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, 1);
      defaultTableModelArray0[0] = defaultTableModel0;
      DefaultTableModel defaultTableModel1 = null;
      try {
        defaultTableModel1 = new DefaultTableModel((-2913), 46);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2913
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5726203641018985
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      int[] intArray0 = new int[6];
      intArray0[2] = 1125;
      intArray0[3] = 3494;
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray0[4] = 3986;
      intArray0[5] = 3986;
      visualListModel0.moveDownIndexes(intArray0);
      vector0.stream();
      intArray0[2] = 3239;
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.rotateClockwiseElements(intArray0);
      int[] intArray1 = new int[2];
      intArray1[1] = 3986;
      visualListModel0.moveDownIndexes(intArray1);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[3];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray2 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray2);
      visualListModel0.moveDownIndexes(intArray0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.getListDataListeners();
      visualListModel0.moveDownIndexes(intArray1);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ibn9-");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      vector0.add((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)11;
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      Integer integer0 = FPXDescriptor.MAX_RESOLUTION;
      Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      try { 
        visualListModel0.removeElements(intArray0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 12
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3558258304206885
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.elementChanged((VisualPageListItem) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      Vector<InputStream> vector1 = new Vector<InputStream>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "60I";
      vector0.iterator();
      stringArray0[2] = "60I";
      visualListModel0.addElementAt((VisualPageListItem) null, 1000);
      Boolean boolean0 = new Boolean(true);
      visualListModel0.prependAllElements(vector0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction0 = new DefaultEditorKit.InsertTabAction();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key1);
      visualListModel0.moveDownIndex(0);
      visualListModel0.getElementAt(1);
      // Undeclared exception!
      try { 
        renderingHints0.put("60I", (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.awt.RenderingHints$Key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d}n-nv[");
      vector0.add((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)10;
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 10
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2388060551041953
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      arrayDeque0.removeFirstOccurrence(vector0);
      arrayDeque0.iterator();
      vector0.add((VisualPageListItem) null);
      visualListModel0.addElementAt((VisualPageListItem) null, 0);
      visualListModel0.removeElements(0, 0, true);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      JMenu jMenu0 = new JMenu();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem((String) null, (Icon) null);
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem((String) null, true);
      jCheckBoxMenuItem1.firePropertyChange("", (byte) (-102), (byte) (-102));
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Icon) null);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte) (-22);
      intArray0[2] = 0;
      intArray0[3] = 0;
      visualListModel0.removeElements(intArray0, true);
      assertEquals(4, visualListModel0.getSize());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.elementChanged((VisualPageListItem) null);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      Vector<InputStream> vector1 = new Vector<InputStream>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@";
      stringArray0[1] = "60I";
      vector0.iterator();
      visualListModel0.addElementAt((VisualPageListItem) null, 1000);
      Boolean boolean0 = new Boolean(true);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      visualListModel0.moveDownIndex(0);
      Object object0 = new Object();
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke(1000, (-1557), false);
      RenderingHints renderingHints1 = new RenderingHints(sunHints_Key0, aWTKeyStroke0);
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      SunHints.Key sunHints_Key3 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      // Undeclared exception!
      try { 
        visualListModel0.setData((Vector<VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.add((VisualPageListItem) null);
      vector0.add((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      vector0.add((VisualPageListItem) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      vector0.add((VisualPageListItem) null);
      vector0.trimToSize();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ibn9-");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      byteArray0[3] = (byte)11;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ibn9-");
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)23;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ibn9-");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ibn9-");
      int[] intArray0 = new int[1];
      System.setCurrentTimeMillis(149L);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      vector0.add((VisualPageListItem) null);
      vector0.trimToSize();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ibn9-");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[3] = (byte)11;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ibn9-");
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ibn9-");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ibn9-");
      int[] intArray0 = new int[1];
      System.setCurrentTimeMillis(149L);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(windowListener0, windowListener0);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, windowListener0);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)9;
      vector0.containsAll(arrayDeque0);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[5] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      vector0.add((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      visualListModel0.removeElements(intArray0, true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1982020749289486
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.retainAll(visualListModel0.data);
      int int0 = (-2);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2);
      intArray0[1] = 1;
      visualListModel0.rotateClockwiseElements(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray1 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      try { 
        visualListModel0.moveDownIndexes(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(windowListener0, windowListener0);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, windowListener0);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[8] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      vector0.add((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)14;
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      visualListModel0.moveDownIndexes(intArray0);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.log4j.or.ObjectRenderer");
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      vector0.add((VisualPageListItem) null);
      vector0.trimToSize();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Comparator<VisualPageListItem> comparator0 = (Comparator<VisualPageListItem>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.log4j.or.ObjectRenderer");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-114);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      vector0.add((VisualPageListItem) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-26);
      try { 
        visualListModel0.moveDownIndexes(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -25
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.add((VisualPageListItem) null);
      vector0.trimToSize();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ibn9-");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)11;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      vector0.add((VisualPageListItem) null);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)10;
      intArray0[1] = 623;
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 10
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.576408258700284
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = new Boolean("");
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      VisualPageListItem visualPageListItem0 = null;
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.setData(vector0);
      visualListModel0.setData(visualPageListItemArray0);
      vector0.add((VisualPageListItem) null);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 2518;
      intArray0[2] = 2518;
      visualListModel0.getElements();
      intArray0[3] = (-1380);
      intArray0[4] = 2518;
      visualListModel0.addAllElements((Collection<VisualPageListItem>) vector0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.data = (Vector<VisualPageListItem>) stack0;
      intArray0[5] = 2518;
      intArray0[6] = 2518;
      intArray0[7] = 2518;
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.addElementAt((VisualPageListItem) null, 2518);
      visualListModel0.moveUpIndex(2518);
      // Undeclared exception!
      try { 
        vector0.insertElementAt((VisualPageListItem) null, 1902);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1902 > 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.spliterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      vector0.add((VisualPageListItem) null);
      vector0.trimToSize();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ib9");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      vector0.add((VisualPageListItem) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)10;
      visualListModel0.moveDownIndexes(intArray0);
      assertEquals(2, visualListModel0.getSize());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T|Y>F");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ew%}b7%eVi\"Ec");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      vector0.add((VisualPageListItem) null);
      vector0.trimToSize();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ew%}b7%eVi\"Ec");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ib9");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-21);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-21);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T|Y>F");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T|Y>F");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      vector0.add((VisualPageListItem) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-21);
      try { 
        visualListModel0.reverseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -21
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T|Y>F");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ew%}b7%eVi\"Ec");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      vector0.add((VisualPageListItem) null);
      vector0.trimToSize();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ew%}b7%eVi\"Ec");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ib9");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-21);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-21);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T|Y>F");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-21);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      vector0.add((VisualPageListItem) null);
      int[] intArray0 = new int[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ew%}b7%eVi\"Ec");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T|Y>F");
      visualListModel0.reverseElements(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(windowListener0, windowListener0);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, windowListener0);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.add(windowListener0, (WindowListener) null);
      vector0.containsAll(arrayDeque0);
      vector0.add((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      VisualListModel visualListModel1 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.data = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 0;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        visualListModel0.subList(0, 0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(windowListener0, windowListener0);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, windowListener0);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      vector0.add((VisualPageListItem) null);
      AWTEventMulticaster.add(windowListener0, (WindowListener) null);
      vector0.containsAll(arrayDeque0);
      vector0.add((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)11;
      VisualListModel visualListModel1 = new VisualListModel();
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 11
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(windowListener0, windowListener0);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, windowListener0);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.add(windowListener0, (WindowListener) null);
      vector0.containsAll(arrayDeque0);
      vector0.add((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)11;
      VisualListModel visualListModel1 = new VisualListModel();
      System.setCurrentTimeMillis(60000L);
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 11
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T|Y>F");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ew%}b7%eVi\"Ec");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      vector0.add((VisualPageListItem) null);
      vector0.trimToSize();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ib9");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-21);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-21);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T|Y>F");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-21);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      vector0.add((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ew%}b7%eVi\"Ec");
      vector0.add((VisualPageListItem) null);
      visualListModel0.reverseElements(intArray0);
      assertEquals(1, intArray0.length);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.add((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.1660930735128656
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      arrayDeque0.removeFirstOccurrence(vector0);
      arrayDeque0.iterator();
      vector0.add((VisualPageListItem) null);
      visualListModel0.addElementAt((VisualPageListItem) null, 0);
      visualListModel0.removeElements(0, 0, false);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.elementChanged((VisualPageListItem) null);
      Boolean boolean0 = new Boolean(true);
      DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction0 = new DefaultEditorKit.InsertTabAction();
      vector0.trimToSize();
      defaultEditorKit_InsertTabAction0.isEnabled();
      Vector<VisualPageListItem> vector1 = visualListModel0.data;
      DefaultEditorKit.InsertTabAction[] defaultEditorKit_InsertTabActionArray0 = new DefaultEditorKit.InsertTabAction[5];
      defaultEditorKit_InsertTabActionArray0[0] = defaultEditorKit_InsertTabAction0;
      defaultEditorKit_InsertTabActionArray0[1] = defaultEditorKit_InsertTabAction0;
      defaultEditorKit_InsertTabActionArray0[2] = defaultEditorKit_InsertTabAction0;
      DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction1 = new DefaultEditorKit.InsertTabAction();
      defaultEditorKit_InsertTabActionArray0[3] = defaultEditorKit_InsertTabAction1;
      defaultEditorKit_InsertTabActionArray0[4] = defaultEditorKit_InsertTabAction0;
      vector0.toArray(defaultEditorKit_InsertTabActionArray0);
      int int0 = 39;
      Random.setNextRandom(39);
      arrayDeque0.clone();
      visualListModel0.setData(visualPageListItemArray0);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.log4j.or.ObjectRenderer");
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xqn9-");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.pdfsam.guiclient.commons.models.VisualListModel");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      vector0.remove((Object) fileSystemHandling0);
      vector0.add((VisualPageListItem) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      vector0.ensureCapacity((-2056));
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      vector0.add((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(windowListener0, windowListener0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster4, (WindowFocusListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster5, (WindowFocusListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster8, (WindowFocusListener) aWTEventMulticaster7);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster8, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster9);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster7, (WindowFocusListener) aWTEventMulticaster10);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster4, (WindowFocusListener) aWTEventMulticaster10);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster11, (WindowFocusListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster0, (HierarchyListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((HierarchyListener) aWTEventMulticaster12, (HierarchyListener) aWTEventMulticaster12);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(comparator0);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>((Collection<? extends Integer>) treeSet0);
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate1.and(predicate2);
      priorityQueue0.removeIf(predicate0);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.add((VisualPageListItem) null);
      vector0.retainAll(treeSet0);
      vector0.add((VisualPageListItem) null);
      Boolean.valueOf(true);
      // Undeclared exception!
      try { 
        visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) vector0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(windowListener0, windowListener0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster4, (WindowFocusListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster5, (WindowFocusListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster8, (WindowFocusListener) aWTEventMulticaster7);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster8, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster7, (InputMethodListener) aWTEventMulticaster6);
      Class<DefaultEditorKit.InsertTabAction> class0 = DefaultEditorKit.InsertTabAction.class;
      AWTEventMulticaster.getListeners((EventListener) aWTEventMulticaster6, class0);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster7, (WindowFocusListener) aWTEventMulticaster11);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster4, (WindowFocusListener) aWTEventMulticaster13);
      AWTEventMulticaster aWTEventMulticaster15 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster0, (HierarchyListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster16 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowListener) aWTEventMulticaster7, (WindowListener) aWTEventMulticaster14);
      AWTEventMulticaster aWTEventMulticaster17 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowListener) aWTEventMulticaster16, (WindowListener) aWTEventMulticaster9);
      AWTEventMulticaster.add((WindowListener) aWTEventMulticaster9, (WindowListener) aWTEventMulticaster17);
      AWTEventMulticaster.remove((HierarchyListener) aWTEventMulticaster15, (HierarchyListener) aWTEventMulticaster15);
      AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster15, (HierarchyListener) aWTEventMulticaster15);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster8, (WindowFocusListener) aWTEventMulticaster12);
      AWTEventMulticaster aWTEventMulticaster18 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster14, (WindowFocusListener) aWTEventMulticaster10);
      AWTEventMulticaster aWTEventMulticaster19 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster18, (WindowFocusListener) aWTEventMulticaster8);
      AWTEventMulticaster aWTEventMulticaster20 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster19);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster8, (WindowFocusListener) aWTEventMulticaster20);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster18);
      AWTEventMulticaster aWTEventMulticaster21 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster8, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster21);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      vector0.add((VisualPageListItem) null);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) vector0);
      assertEquals(2, visualListModel0.getSize());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(windowListener0, windowListener0);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, windowListener0);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.add(windowListener0, (WindowListener) null);
      vector0.containsAll(arrayDeque0);
      vector0.add((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      Integer integer0 = new Integer(356);
      Integer.divideUnsigned(8, 1);
      Integer.sum((byte)11, 8);
      Integer.toUnsignedString(9);
      Integer integer1 = IIPResolutionDescriptor.MAX_RESOLUTION;
      visualListModel0.moveUpIndexes(intArray0);
      assertEquals(1, intArray0.length);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      vector0.add((VisualPageListItem) null);
      vector0.trimToSize();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ibn9-");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)11;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ibn9-");
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      vector0.add((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) "ibn9-");
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      visualListModel0.moveDownIndexes(intArray0);
      assertEquals(1, intArray0.length);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      arrayDeque0.poll();
      vector0.add((VisualPageListItem) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ibn9-");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ibn9-");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      vector0.add((VisualPageListItem) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[1];
      intArray1[0] = (int) (byte)10;
      try { 
        visualListModel0.moveUpIndexes(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 9
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.log4j.or.ObjectRenderer");
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xqn9-");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.log4j.or.ObjectRenderer");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.log4j.or.ObjectRenderer");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      vector0.remove((Object) fileSystemHandling0);
      byte[] byteArray1 = new byte[7];
      byteArray1[3] = (byte)10;
      vector0.ensureCapacity((-2056));
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      byteArray1[2] = (byte)10;
      byteArray1[3] = (byte)10;
      byteArray1[4] = (byte)10;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      vector0.add((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      vector0.spliterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      vector0.add((VisualPageListItem) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      vector0.add((VisualPageListItem) null);
      int[] intArray0 = new int[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      visualListModel0.moveUpIndexes(intArray0);
      assertEquals(2, visualListModel0.getSize());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(windowListener0, windowListener0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster4, (WindowFocusListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster5, (WindowFocusListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster8, (WindowFocusListener) aWTEventMulticaster7);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster8, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster10);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster7, (WindowFocusListener) aWTEventMulticaster11);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster4, (WindowFocusListener) aWTEventMulticaster11);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster0, (HierarchyListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((HierarchyListener) aWTEventMulticaster13, (HierarchyListener) aWTEventMulticaster13);
      AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster13, (HierarchyListener) aWTEventMulticaster13);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster8, (WindowFocusListener) aWTEventMulticaster10);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster12, (WindowFocusListener) aWTEventMulticaster9);
      AWTEventMulticaster aWTEventMulticaster15 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster14, (WindowFocusListener) aWTEventMulticaster8);
      AWTEventMulticaster aWTEventMulticaster16 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster15);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster8, (WindowFocusListener) aWTEventMulticaster16);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster14);
      AWTEventMulticaster aWTEventMulticaster17 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster8, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster17);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      Vector<VisualPageListItem> vector1 = visualListModel0.data;
      vector1.add((VisualPageListItem) null);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) arrayDeque0);
      arrayDeque0.stream();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.add((VisualPageListItem) null);
      visualListModel0.data = vector0;
      visualListModel0.getSize();
      visualListModel0.moveUpIndex(1);
      vector0.retainAll(visualListModel0.data);
      visualListModel0.clearData();
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.clone();
      OperationRegistry operationRegistry0 = OperationRegistry.getThreadSafeOperationRegistry();
      Stack<Object> stack0 = new Stack<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(stack0, stack0);
      stack0.containsAll(vector0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, visualListModel0);
      parameterBlock0.add('p');
      parameterBlock0.set((byte)107, 8);
      parameterBlock0.add(4281);
      CollectionOp collectionOp0 = new CollectionOp(operationRegistry0, "9Q>zFb'F]omr.~)l", parameterBlock0);
      // Undeclared exception!
      try { 
        visualListModel0.prependAllElements(collectionOp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No descriptor by name \"9Q>zFb'F]omr.~)l\" is registered under mode \"collection\".
         //
         verifyException("javax.media.jai.OperationRegistry", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) arrayDeque0);
      arrayDeque0.stream();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.add((VisualPageListItem) null);
      // Undeclared exception!
      try { 
        visualListModel0.addAllElements((Collection<VisualPageListItem>) vector0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(windowListener0, windowListener0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowListener) aWTEventMulticaster0, (WindowListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowListener) aWTEventMulticaster0, (WindowListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowListener) aWTEventMulticaster0, (WindowListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowListener) aWTEventMulticaster0, (WindowListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowListener) aWTEventMulticaster0, (WindowListener) null);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowListener) aWTEventMulticaster0, (WindowListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.remove((ItemListener) aWTEventMulticaster3, (ItemListener) aWTEventMulticaster5);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster7, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((WindowListener) aWTEventMulticaster6, (WindowListener) aWTEventMulticaster3);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster4);
      AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster7, (ComponentListener) aWTEventMulticaster1);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster2, (HierarchyListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster9, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster3, (WindowFocusListener) aWTEventMulticaster6);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster11);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster10, (WindowFocusListener) aWTEventMulticaster4);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster6, (WindowFocusListener) aWTEventMulticaster5);
      AWTEventMulticaster.add((FocusListener) aWTEventMulticaster12, (FocusListener) aWTEventMulticaster8);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster7);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster12);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster7, (WindowFocusListener) aWTEventMulticaster10);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      Integer integer0 = FPXDescriptor.MAX_RESOLUTION;
      assertEquals((-1), (int)integer0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.add((VisualPageListItem) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ibn9-");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)11;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ibn9-");
      byteArray0[4] = (byte)10;
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      ComponentListener componentListener2 = AWTEventMulticaster.add(componentListener1, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, componentListener2);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction0 = new DefaultEditorKit.InsertTabAction();
      Object object0 = new Object();
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      assertEquals(1, visualPageListItemArray0.length);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4659497192528064
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(windowListener0, windowListener0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster3, (WindowFocusListener) null);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster4);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster5, (InputMethodListener) aWTEventMulticaster4);
      Class<DefaultEditorKit.InsertTabAction> class0 = DefaultEditorKit.InsertTabAction.class;
      AWTEventMulticaster.getListeners((EventListener) aWTEventMulticaster4, class0);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster5, (WindowFocusListener) aWTEventMulticaster8);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster3, (WindowFocusListener) null);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster0, (HierarchyListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowListener) aWTEventMulticaster5, (WindowListener) aWTEventMulticaster10);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowListener) aWTEventMulticaster12, (WindowListener) aWTEventMulticaster6);
      AWTEventMulticaster.add((WindowListener) aWTEventMulticaster6, (WindowListener) aWTEventMulticaster13);
      AWTEventMulticaster.remove((HierarchyListener) aWTEventMulticaster11, (HierarchyListener) aWTEventMulticaster11);
      AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster11, (HierarchyListener) aWTEventMulticaster11);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster9);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster10, (WindowFocusListener) aWTEventMulticaster7);
      AWTEventMulticaster aWTEventMulticaster15 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) null);
      AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster2, (InputMethodListener) aWTEventMulticaster11);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster15);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster14);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster2);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualListModel0.setData(visualPageListItemArray0);
      Integer integer0 = FPXDescriptor.MAX_RESOLUTION;
      visualListModel0.setData(visualPageListItemArray0);
      assertEquals(7, visualListModel0.getSize());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>(2375, (-1086));
      visualListModel0.data = vector0;
      visualListModel0.addElement((VisualPageListItem) null);
      Vector<VisualPageListItem> vector1 = new Vector<VisualPageListItem>();
      Vector<InputStream> vector2 = new Vector<InputStream>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "80I";
      stringArray0[3] = "fS1fGN)6.y";
      vector1.add((VisualPageListItem) null);
      stringArray0[4] = "";
      stringArray0[5] = "&;Di?FS>[EpV3";
      stringArray0[6] = "W";
      vector2.toArray(stringArray0);
      vector2.add((InputStream) null);
      vector1.addAll((Collection<? extends VisualPageListItem>) visualListModel0.data);
      visualListModel0.setData(vector1);
      assertEquals(2, visualListModel0.getSize());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      MenuElement[] menuElementArray0 = new MenuElement[4];
      JMenuItem jMenuItem0 = new JMenuItem();
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      JMenu jMenu0 = new JMenu(" ");
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      jPopupMenu0.add(" ");
      JMenu jMenu1 = new JMenu();
      JMenu jMenu2 = new JMenu((String) null);
      jMenu2.isFocusPainted();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Icon) null);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      // Undeclared exception!
      try { 
        visualListModel0.moveUpIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[9];
      intArray0[0] = (-2955);
      intArray0[1] = (-4804);
      intArray0[1] = (-2955);
      MenuElement[] menuElementArray0 = new MenuElement[4];
      JMenuItem jMenuItem0 = new JMenuItem();
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      JMenu jMenu0 = new JMenu(" ");
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      JMenuItem jMenuItem1 = jPopupMenu0.add(" ");
      menuElementArray0[1] = (MenuElement) jMenuItem1;
      JMenu jMenu1 = new JMenu();
      menuElementArray0[2] = (MenuElement) jMenu1;
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem(" ", (Icon) null);
      HashMap<RenderingHints.Key, AWTKeyStroke> hashMap0 = new HashMap<RenderingHints.Key, AWTKeyStroke>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      SunHints.LCDContrastKey sunHints_LCDContrastKey1 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.LCDContrastKey sunHints_LCDContrastKey2 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.LCDContrastKey sunHints_LCDContrastKey3 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.LCDContrastKey sunHints_LCDContrastKey4 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      Integer integer1 = FPXDescriptor.MAX_RESOLUTION;
      Object object0 = visualListModel0.getElementAt(0);
      assertNull(object0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "9bY7qa");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      predicate0.or(predicate4);
      predicate3.or(predicate2);
      arrayDeque0.removeIf(predicate2);
      Boolean boolean0 = new Boolean(false);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Vector<VisualPageListItem> vector1 = visualListModel0.data;
      vector1.retainAll(priorityQueue0);
      Predicate.isEqual((Object) predicate2);
      priorityQueue0.removeIf(predicate0);
      vector1.add((VisualPageListItem) null);
      vector1.retainAll(vector0);
      vector1.add((VisualPageListItem) null);
      Boolean boolean1 = new Boolean(false);
      visualListModel0.addAllElements((-1), (Collection<VisualPageListItem>) vector0);
      assertSame(vector0, vector1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[9];
      intArray0[0] = (-3670);
      intArray0[1] = (-538);
      intArray0[2] = 0;
      intArray0[3] = 1571;
      intArray0[4] = 1241;
      intArray0[5] = 2846;
      intArray0[6] = (-1);
      intArray0[7] = (-1717);
      intArray0[8] = 0;
      visualListModel0.reverseElements(intArray0);
      int[] intArray1 = new int[0];
      visualListModel0.reverseElements(intArray1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream0.flush();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_DITHERING;
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      SunHints.Key sunHints_Key3 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      SunHints.Key sunHints_Key4 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.LCDContrastKey sunHints_LCDContrastKey1 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.LCDContrastKey sunHints_LCDContrastKey2 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.LCDContrastKey sunHints_LCDContrastKey3 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      MenuElement[] menuElementArray0 = new MenuElement[4];
      JMenuItem jMenuItem0 = new JMenuItem();
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      JMenu jMenu0 = new JMenu(" ");
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      JMenuItem jMenuItem1 = jPopupMenu0.add(" ");
      menuElementArray0[1] = (MenuElement) jMenuItem1;
      JMenu jMenu1 = new JMenu();
      menuElementArray0[2] = (MenuElement) jMenu1;
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem(" ", (Icon) null);
      jCheckBoxMenuItem0.firePropertyChange(" ", (byte) (-22), (byte) (-22));
      menuElementArray0[3] = (MenuElement) jCheckBoxMenuItem0;
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Icon) null);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int[] intArray0 = new int[0];
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.removeElements((int) (byte) (-22), (int) (byte) (-22), true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.removeElements(0, 0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultEditorKit.InsertTabAction[] defaultEditorKit_InsertTabActionArray0 = new DefaultEditorKit.InsertTabAction[1];
      DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction0 = new DefaultEditorKit.InsertTabAction();
      defaultEditorKit_InsertTabAction0.isEnabled();
      defaultEditorKit_InsertTabActionArray0[0] = defaultEditorKit_InsertTabAction0;
      vector0.toArray(defaultEditorKit_InsertTabActionArray0);
      Random.setNextRandom(0);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        visualListModel0.subList(0, (-2660), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-2660)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      // Undeclared exception!
      try { 
        visualListModel0.setData((VisualPageListItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 1;
      // Undeclared exception!
      try { 
        visualListModel0.subList(1, (-438));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1) > toIndex(-438)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\" was loaded by [");
      int int0 = 36;
      ItemListener itemListener0 = mock(ItemListener.class, new ViolatedAssumptionAnswer());
      ItemListener itemListener1 = AWTEventMulticaster.add(itemListener0, itemListener0);
      AWTEventMulticaster.remove(itemListener1, itemListener1);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame("\" was loaded by [");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeElements(1955, 1955, false);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements((int[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(windowListener0, windowListener0);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((WindowListener) aWTEventMulticaster0, (WindowListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowListener) aWTEventMulticaster0, (WindowListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowListener) aWTEventMulticaster0, (WindowListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowListener) aWTEventMulticaster0, (WindowListener) null);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowListener) aWTEventMulticaster0, (WindowListener) null);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowListener) aWTEventMulticaster0, (WindowListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster6, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster1, (HierarchyListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster7, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster5);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster4, (HierarchyBoundsListener) aWTEventMulticaster9);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster9);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster10, (WindowFocusListener) aWTEventMulticaster6);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster8, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster6, (WindowFocusListener) aWTEventMulticaster8);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      stack1.retainAll(stack0);
      stack1.add((VisualPageListItem) null);
      Boolean.valueOf(false);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addAllElements(321, (Collection<VisualPageListItem>) stack0);
      assertNotSame(stack0, stack1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      MenuElement[] menuElementArray0 = new MenuElement[4];
      JMenu jMenu0 = new JMenu(" ");
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      Color color0 = Color.LIGHT_GRAY;
      jPopupMenu0.setForeground(color0);
      jPopupMenu0.add(" ");
      jMenu0.getRolloverSelectedIcon();
      menuElementArray0[1] = (MenuElement) jMenu0;
      JMenu jMenu1 = new JMenu();
      menuElementArray0[2] = (MenuElement) jMenu0;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 36;
      ItemListener itemListener0 = mock(ItemListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(itemListener0, itemListener0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((TextListener) aWTEventMulticaster0, (TextListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((KeyListener) aWTEventMulticaster0, (KeyListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((ItemListener) aWTEventMulticaster0, (ItemListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((ItemListener) aWTEventMulticaster0, (ItemListener) aWTEventMulticaster1);
      Integer[] integerArray0 = new Integer[1];
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(integerArray0);
      jComboBox0.isValidateRoot();
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      JComboBox<Integer> jComboBox1 = new JComboBox<Integer>(vector0);
      jComboBox1.addItemListener((ItemListener) null);
      // Undeclared exception!
      try { 
        visualListModel0.setData((Vector<VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-66);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+v~YRz7R1Jpy[!xTX");
      byteArray0[3] = (byte) (-66);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((byte) (-66));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.rotateClockwiseElements(intArray0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      Integer integer2 = JLayeredPane.FRAME_CONTENT_LAYER;
      Integer integer3 = JLayeredPane.PALETTE_LAYER;
      Integer integer4 = JLayeredPane.POPUP_LAYER;
      Integer integer5 = JLayeredPane.POPUP_LAYER;
      Integer integer6 = JLayeredPane.DEFAULT_LAYER;
      int int0 = 13;
      Integer.sum(13, 13);
      Integer integer7 = JLayeredPane.MODAL_LAYER;
      String string0 = "_!wwYjMPJ21,S8";
      try { 
        Integer.parseUnsignedInt("_!wwYjMPJ21,S8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"_!wwYjMPJ21,S8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      MenuElement[] menuElementArray0 = new MenuElement[4];
      JMenu jMenu0 = new JMenu("v-O!_J>I6wy-(rqBex\"8");
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jMenu0, (-1813), 0L, (-1813), (-1791), (-1791), (-1791), (-1), (-1), false, (-2406), (-2447), (-1791), 0L);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager.defaultManager();
      jPopupMenu0.add((Component) jMenu0, (Object) menuSelectionManager0);
      jPopupMenu0.processMouseEvent(mouseWheelEvent0, menuElementArray0, menuSelectionManager0);
      jPopupMenu0.getMouseWheelListeners();
      menuElementArray0[1] = (MenuElement) jMenu0;
      JMenu jMenu1 = new JMenu("v-O!_J>I6wy-(rqBex\"8");
      menuElementArray0[0] = (MenuElement) jMenu0;
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      Integer integer0 = IIPResolutionDescriptor.MAX_RESOLUTION;
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndexes(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 88);
      assertNull(collection0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.spliterator();
      visualListModel0.prependAllElements(vector0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_DITHERING;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      SunHints.Key sunHints_Key3 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.LCDContrastKey sunHints_LCDContrastKey1 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.LCDContrastKey sunHints_LCDContrastKey2 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.LCDContrastKey sunHints_LCDContrastKey3 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.LCDContrastKey sunHints_LCDContrastKey4 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      assertSame(sunHints_LCDContrastKey4, sunHints_LCDContrastKey3);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(windowListener0, windowListener0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster4, (WindowFocusListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster5, (WindowFocusListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster8, (WindowFocusListener) aWTEventMulticaster7);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster8, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster7, (WindowFocusListener) aWTEventMulticaster8);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster4, (WindowFocusListener) aWTEventMulticaster10);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster0, (HierarchyListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((HierarchyListener) aWTEventMulticaster12, (HierarchyListener) aWTEventMulticaster12);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster12, (HierarchyListener) aWTEventMulticaster12);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster8, (WindowFocusListener) aWTEventMulticaster10);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster11, (WindowFocusListener) aWTEventMulticaster9);
      AWTEventMulticaster.remove((TextListener) aWTEventMulticaster5, (TextListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster15 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster2, (WindowFocusListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster16 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster8, (WindowFocusListener) aWTEventMulticaster15);
      AWTEventMulticaster aWTEventMulticaster17 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseWheelListener) aWTEventMulticaster2, (MouseWheelListener) aWTEventMulticaster16);
      AWTEventMulticaster aWTEventMulticaster18 = (AWTEventMulticaster)AWTEventMulticaster.remove((MouseWheelListener) aWTEventMulticaster17, (MouseWheelListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster19 = (AWTEventMulticaster)AWTEventMulticaster.remove((MouseWheelListener) aWTEventMulticaster4, (MouseWheelListener) aWTEventMulticaster10);
      AWTEventMulticaster.add((MouseWheelListener) aWTEventMulticaster5, (MouseWheelListener) aWTEventMulticaster19);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster18, (WindowFocusListener) aWTEventMulticaster13);
      AWTEventMulticaster aWTEventMulticaster20 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster3, (WindowFocusListener) aWTEventMulticaster15);
      AWTEventMulticaster aWTEventMulticaster21 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster20, (WindowFocusListener) aWTEventMulticaster15);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster10, (WindowFocusListener) aWTEventMulticaster21);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster18);
      AWTEventMulticaster aWTEventMulticaster22 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster3, (WindowFocusListener) aWTEventMulticaster11);
      AWTEventMulticaster aWTEventMulticaster23 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster4, (WindowFocusListener) aWTEventMulticaster14);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster23, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster24 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster15, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster22, (WindowFocusListener) aWTEventMulticaster24);
      visualListModel0.moveUpIndex(386);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(9, 9, true);
      Boolean boolean0 = Boolean.FALSE;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey1 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      Integer integer0 = FPXDescriptor.MAX_RESOLUTION;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      Integer integer2 = JLayeredPane.FRAME_CONTENT_LAYER;
      Integer integer3 = JLayeredPane.PALETTE_LAYER;
      Integer integer4 = JLayeredPane.POPUP_LAYER;
      Integer integer5 = JLayeredPane.POPUP_LAYER;
      Integer integer6 = JLayeredPane.DEFAULT_LAYER;
      Integer.sum(13, 13);
      Integer integer7 = JLayeredPane.MODAL_LAYER;
      try { 
        Integer.parseUnsignedInt("_!wwYjMPJ21,S8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"_!wwYjMPJ21,S8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(windowListener0, windowListener0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster3, (WindowFocusListener) null);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster4);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster5, (InputMethodListener) aWTEventMulticaster4);
      Class<DefaultEditorKit.InsertTabAction> class0 = DefaultEditorKit.InsertTabAction.class;
      AWTEventMulticaster.getListeners((EventListener) aWTEventMulticaster4, class0);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster5, (WindowFocusListener) aWTEventMulticaster7);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster3, (WindowFocusListener) null);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster0, (HierarchyListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((WindowListener) aWTEventMulticaster6, (WindowListener) aWTEventMulticaster6);
      AWTEventMulticaster.add((WindowListener) aWTEventMulticaster6, (WindowListener) null);
      AWTEventMulticaster.remove((HierarchyListener) aWTEventMulticaster10, (HierarchyListener) aWTEventMulticaster10);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster8);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster9, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster12);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster11);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster2);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.updateElementAt(6, (VisualPageListItem) null);
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>();
      assertFalse(jComboBox0.getIgnoreRepaint());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(1000);
      HashMap<RenderingHints.Key, Integer> hashMap0 = new HashMap<RenderingHints.Key, Integer>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      HashMap<RenderingHints.Key, Integer> hashMap1 = new HashMap<RenderingHints.Key, Integer>();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      hashMap0.put(sunHints_Key0, integer0);
      ICC_Profile[] iCC_ProfileArray0 = null;
      HashMap<RenderingHints.Key, Integer> hashMap2 = new HashMap<RenderingHints.Key, Integer>();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      HashMap<RenderingHints.Key, Integer> hashMap3 = new HashMap<RenderingHints.Key, Integer>();
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap4 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(sequenceInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      MenuElement[] menuElementArray0 = new MenuElement[4];
      JMenu jMenu0 = new JMenu("v-OS_J>I6wyrqB!x\"8");
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      jPopupMenu0.getName();
      jPopupMenu0.getMouseWheelListeners();
      jPopupMenu0.add("v-OS_J>I6wyrqB!x\"8");
      menuElementArray0[1] = (MenuElement) jMenu0;
      JMenu jMenu1 = new JMenu("v-OS_J>I6wyrqB!x\"8");
      menuElementArray0[0] = (MenuElement) jMenu0;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      int[] intArray0 = new int[0];
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.removeElements(91, (-1528), false);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Integer integer0 = IIPResolutionDescriptor.MAX_RESOLUTION;
      Integer integer1 = new Integer(5833);
      Integer integer2 = FPXDescriptor.MAX_RESOLUTION;
      Integer.compare((-5061), 5833);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer1;
      Integer.min(1917, 951);
      integerArray0[0] = integer0;
      Integer integer3 = JLayeredPane.DRAG_LAYER;
      integerArray0[2] = integer3;
      integerArray0[7] = integer0;
      integerArray0[5] = integer0;
      Integer integer4 = FPXDescriptor.MAX_RESOLUTION;
      Integer.compareUnsigned((int) integerArray0[0], (-5061));
      Integer.compareUnsigned((int) integerArray0[0], 3483);
      Integer.divideUnsigned((int) integerArray0[0], 1377);
      Integer.getInteger("\" was loaded by ", integer4);
      integerArray0[2] = integer1;
      integerArray0[6] = integer1;
      Integer.divideUnsigned((int) integerArray0[2], (int) integerArray0[6]);
      Integer integer5 = new Integer((int) integerArray0[7]);
      Integer.divideUnsigned((int) integerArray0[5], 1645);
      Integer.sum((int) integerArray0[6], (int) integerArray0[0]);
      Integer.toUnsignedString(5833);
      integerArray0[7] = integer0;
      integerArray0[8] = integer1;
      Integer integer6 = IIPResolutionDescriptor.MAX_RESOLUTION;
      System.setCurrentTimeMillis(1L);
      Object object0 = visualListModel0.getElementAt(3483);
      assertNull(object0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(windowListener0, windowListener0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster3, (WindowFocusListener) null);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster4);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster5, (InputMethodListener) aWTEventMulticaster4);
      Class<DefaultEditorKit.InsertTabAction> class0 = DefaultEditorKit.InsertTabAction.class;
      AWTEventMulticaster.getListeners((EventListener) aWTEventMulticaster4, class0);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster5, (WindowFocusListener) aWTEventMulticaster8);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster3, (WindowFocusListener) null);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster0, (HierarchyListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowListener) aWTEventMulticaster5, (WindowListener) aWTEventMulticaster11);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowListener) aWTEventMulticaster13, (WindowListener) aWTEventMulticaster6);
      AWTEventMulticaster.add((WindowListener) aWTEventMulticaster6, (WindowListener) aWTEventMulticaster14);
      AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster0, (HierarchyListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster12, (HierarchyListener) aWTEventMulticaster12);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster9);
      AWTEventMulticaster aWTEventMulticaster15 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster11, (WindowFocusListener) aWTEventMulticaster7);
      AWTEventMulticaster aWTEventMulticaster16 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) null);
      AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster2, (InputMethodListener) aWTEventMulticaster12);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster16);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster15);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster7, (WindowFocusListener) aWTEventMulticaster10);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      List<VisualPageListItem> list0 = visualListModel0.getValidElements();
      assertNull(list0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.undeleteElements(intArray0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      Integer integer0 = FPXDescriptor.MAX_RESOLUTION;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_DITHERING;
      SunHints.Key sunHints_Key3 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      HashMap<RenderingHints.Key, Integer> hashMap0 = new HashMap<RenderingHints.Key, Integer>();
      SunHints.Key sunHints_Key4 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      SunHints.Key sunHints_Key5 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      SunHints.Key sunHints_Key6 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      SunHints.LCDContrastKey sunHints_LCDContrastKey1 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.LCDContrastKey sunHints_LCDContrastKey2 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.LCDContrastKey sunHints_LCDContrastKey3 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.LCDContrastKey sunHints_LCDContrastKey4 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      Integer integer2 = FPXDescriptor.MAX_RESOLUTION;
      assertFalse(integer2.equals((Object)integer1));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      MenuElement[] menuElementArray0 = new MenuElement[4];
      JMenu jMenu0 = new JMenu("v-O!_J>I6wy-(rqBex\"8");
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jMenu0, (-1813), 0L, (-1813), (-1791), 7, 7, (-1), (-1), false, (-2388), (-2447), 7, 0L);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jPopupMenu0.processMouseEvent(mouseWheelEvent0, menuElementArray0, menuSelectionManager0);
      jPopupMenu0.getName();
      jPopupMenu0.getMouseWheelListeners();
      menuElementArray0[1] = (MenuElement) jMenu0;
      JMenu jMenu1 = new JMenu("v-O!_J>I6wy-(rqBex\"8");
      menuElementArray0[0] = (MenuElement) jMenu0;
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      int[] intArray0 = new int[0];
      visualListModel0.undeleteElements(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(windowListener0, windowListener0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster3, (WindowFocusListener) null);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster4);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((AdjustmentListener) aWTEventMulticaster3, (AdjustmentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster5, (InputMethodListener) aWTEventMulticaster4);
      Class<DefaultEditorKit.InsertTabAction> class0 = DefaultEditorKit.InsertTabAction.class;
      AWTEventMulticaster.getListeners((EventListener) aWTEventMulticaster4, class0);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster5, (WindowFocusListener) aWTEventMulticaster7);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster3, (WindowFocusListener) null);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster0, (HierarchyListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowListener) aWTEventMulticaster5, (WindowListener) aWTEventMulticaster10);
      AWTEventMulticaster.add((MouseListener) aWTEventMulticaster0, (MouseListener) aWTEventMulticaster8);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowListener) aWTEventMulticaster12, (WindowListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster8, (ComponentListener) aWTEventMulticaster5);
      AWTEventMulticaster.add((WindowListener) aWTEventMulticaster1, (WindowListener) aWTEventMulticaster13);
      AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster10, (HierarchyListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster11, (HierarchyListener) aWTEventMulticaster11);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster8);
      AWTEventMulticaster aWTEventMulticaster15 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster10, (WindowFocusListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster16 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseMotionListener) aWTEventMulticaster2, (MouseMotionListener) null);
      AWTEventMulticaster.remove((MouseMotionListener) aWTEventMulticaster14, (MouseMotionListener) aWTEventMulticaster16);
      AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster6, (HierarchyListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster17 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster17);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster15);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster6, (WindowFocusListener) aWTEventMulticaster9);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.clearData();
      visualListModel0.clearData();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Integer integer0 = IIPResolutionDescriptor.MAX_RESOLUTION;
      Integer integer1 = new Integer(5833);
      Integer integer2 = Integer.getInteger("", (-5115));
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer1;
      Integer.min(1917, 2006);
      Integer.min(951, (int) integerArray0[0]);
      integerArray0[0] = integer0;
      Integer integer3 = JLayeredPane.DEFAULT_LAYER;
      integerArray0[2] = integer3;
      integerArray0[0] = integer0;
      integerArray0[5] = integer2;
      Integer integer4 = FPXDescriptor.MAX_RESOLUTION;
      Integer.compareUnsigned(951, (-5115));
      Integer.divideUnsigned((int) integerArray0[0], 1377);
      Integer.getInteger("", integer4);
      integerArray0[2] = integer1;
      integerArray0[6] = integer1;
      Integer.divideUnsigned((int) integerArray0[2], (int) integerArray0[6]);
      Integer.toUnsignedLong((-1));
      Integer.divideUnsigned((int) integerArray0[5], 1645);
      Integer.sum((int) integerArray0[6], (int) integerArray0[0]);
      Integer.toUnsignedString(5833);
      integerArray0[7] = integerArray0[3];
      integerArray0[8] = integer1;
      Integer.getInteger("5833");
      int[] intArray0 = new int[1];
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      Integer integer5 = IIPResolutionDescriptor.MAX_RESOLUTION;
      Integer integer6 = FPXDescriptor.MAX_RESOLUTION;
      assertFalse(integer6.equals((Object)integer3));
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      VisualListModel visualListModel0 = new VisualListModel();
      JMenu jMenu0 = new JMenu("Tsh{8840+YL)_&V3.|");
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      JPopupMenu jPopupMenu1 = new JPopupMenu();
      jPopupMenu1.add("org.pdfsam.guiclient.commons.models.VisualListModel");
      jPopupMenu1.setFocusCycleRoot(false);
      DefaultEditorKit.InsertTabAction[] defaultEditorKit_InsertTabActionArray0 = new DefaultEditorKit.InsertTabAction[7];
      DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction0 = new DefaultEditorKit.InsertTabAction();
      defaultEditorKit_InsertTabActionArray0[0] = defaultEditorKit_InsertTabAction0;
      DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction1 = new DefaultEditorKit.InsertTabAction();
      defaultEditorKit_InsertTabActionArray0[1] = defaultEditorKit_InsertTabAction1;
      DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction2 = new DefaultEditorKit.InsertTabAction();
      defaultEditorKit_InsertTabActionArray0[2] = defaultEditorKit_InsertTabAction2;
      DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction3 = new DefaultEditorKit.InsertTabAction();
      defaultEditorKit_InsertTabActionArray0[3] = defaultEditorKit_InsertTabAction3;
      DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction4 = new DefaultEditorKit.InsertTabAction();
      defaultEditorKit_InsertTabActionArray0[4] = defaultEditorKit_InsertTabAction4;
      DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction5 = new DefaultEditorKit.InsertTabAction();
      defaultEditorKit_InsertTabActionArray0[5] = defaultEditorKit_InsertTabAction5;
      DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction6 = new DefaultEditorKit.InsertTabAction();
      defaultEditorKit_InsertTabActionArray0[6] = defaultEditorKit_InsertTabAction6;
      JComboBox<DefaultEditorKit.InsertTabAction> jComboBox0 = new JComboBox<DefaultEditorKit.InsertTabAction>(defaultEditorKit_InsertTabActionArray0);
      jComboBox0.getGraphics();
      jPopupMenu0.paintAll((Graphics) null);
      JMenu jMenu1 = new JMenu();
      jMenu0.getMaximumSize();
      jMenu1.isFocusPainted();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Icon) null);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      int[] intArray0 = new int[1];
      intArray0[0] = 32767;
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.moveDownIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex((-12));
      HashMap<RenderingHints.Key, Integer> hashMap0 = new HashMap<RenderingHints.Key, Integer>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      HashMap<RenderingHints.Key, Integer> hashMap1 = new HashMap<RenderingHints.Key, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap2 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap1);
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      SunHints.LCDContrastKey sunHints_LCDContrastKey1 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      Integer integer2 = FPXDescriptor.MAX_RESOLUTION;
      Integer integer3 = JLayeredPane.FRAME_CONTENT_LAYER;
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      assertTrue(linkedHashSet0.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(0);
      HashMap<RenderingHints.Key, Integer> hashMap0 = new HashMap<RenderingHints.Key, Integer>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      HashMap<RenderingHints.Key, Integer> hashMap1 = new HashMap<RenderingHints.Key, Integer>();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      hashMap1.put(sunHints_Key0, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap1.replaceAll(biFunction0);
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap2 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap1);
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, (-366));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Vector<AWTKeyStroke> vector0 = new Vector<AWTKeyStroke>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_DITHERING;
      HashMap<RenderingHints.Key, Integer> hashMap0 = new HashMap<RenderingHints.Key, Integer>();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey> hashMap1 = new HashMap<RenderingHints.Key, PdfGraphics2D.HyperLinkKey>();
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      SunHints.Key sunHints_Key3 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      SunHints.LCDContrastKey sunHints_LCDContrastKey1 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.LCDContrastKey sunHints_LCDContrastKey2 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.LCDContrastKey sunHints_LCDContrastKey3 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(73, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 73
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(73, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 73
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(1, 1);
      assertNull(collection0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 0, true);
      Boolean boolean0 = new Boolean(true);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      Integer integer2 = JLayeredPane.POPUP_LAYER;
      Integer integer3 = JLayeredPane.POPUP_LAYER;
      Integer integer4 = JLayeredPane.DEFAULT_LAYER;
      Integer integer5 = JLayeredPane.DEFAULT_LAYER;
      Integer integer6 = JLayeredPane.MODAL_LAYER;
      Integer.toUnsignedString(0);
      Integer integer7 = JLayeredPane.DEFAULT_LAYER;
      Integer integer8 = FPXDescriptor.MAX_RESOLUTION;
      Integer.getInteger("bVy{2!}qO6Ja", 1024);
      Integer integer9 = new Integer(0);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer3;
      integerArray0[1] = integer6;
      integerArray0[2] = integer8;
      integerArray0[3] = integer8;
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(integerArray0);
      JComboBox<Integer> jComboBox1 = new JComboBox<Integer>();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList((int) integerArray0[3], 731, true);
      assertNull(collection0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      int int0 = (-1477);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel0.reverseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(windowListener0, windowListener0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster3, (WindowFocusListener) null);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster4);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((AdjustmentListener) aWTEventMulticaster3, (AdjustmentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster5, (InputMethodListener) aWTEventMulticaster4);
      Class<DefaultEditorKit.InsertTabAction> class0 = DefaultEditorKit.InsertTabAction.class;
      AWTEventMulticaster.getListeners((EventListener) aWTEventMulticaster4, class0);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster5, (WindowFocusListener) aWTEventMulticaster8);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster3, (WindowFocusListener) null);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster0, (HierarchyListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowListener) aWTEventMulticaster5, (WindowListener) aWTEventMulticaster11);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowListener) aWTEventMulticaster13, (WindowListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster15 = (AWTEventMulticaster)AWTEventMulticaster.add((ComponentListener) aWTEventMulticaster9, (ComponentListener) aWTEventMulticaster5);
      AWTEventMulticaster.add((WindowListener) aWTEventMulticaster6, (WindowListener) aWTEventMulticaster14);
      AWTEventMulticaster.remove((HierarchyListener) aWTEventMulticaster12, (HierarchyListener) aWTEventMulticaster12);
      AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster12, (HierarchyListener) aWTEventMulticaster12);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster9);
      AWTEventMulticaster aWTEventMulticaster16 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster11, (WindowFocusListener) aWTEventMulticaster7);
      AWTEventMulticaster aWTEventMulticaster17 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseMotionListener) aWTEventMulticaster2, (MouseMotionListener) null);
      AWTEventMulticaster.remove((MouseMotionListener) aWTEventMulticaster15, (MouseMotionListener) aWTEventMulticaster17);
      AWTEventMulticaster aWTEventMulticaster18 = (AWTEventMulticaster)AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster0, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) aWTEventMulticaster18);
      AWTEventMulticaster.remove((WindowFocusListener) aWTEventMulticaster1, (WindowFocusListener) aWTEventMulticaster16);
      AWTEventMulticaster.add((WindowFocusListener) aWTEventMulticaster7, (WindowFocusListener) aWTEventMulticaster10);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addAllElements(395, (Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        visualListModel0.subList(0, (-2660), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-2660)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 0);
      Boolean boolean0 = new Boolean(true);
      Integer integer0 = FPXDescriptor.MAX_RESOLUTION;
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      Integer integer2 = JLayeredPane.POPUP_LAYER;
      Integer integer3 = JLayeredPane.POPUP_LAYER;
      Integer integer4 = JLayeredPane.DEFAULT_LAYER;
      Integer integer5 = JLayeredPane.DEFAULT_LAYER;
      Integer integer6 = JLayeredPane.MODAL_LAYER;
      Integer.toUnsignedString(0);
      Integer integer7 = JLayeredPane.DEFAULT_LAYER;
      Integer integer8 = FPXDescriptor.MAX_RESOLUTION;
      Integer integer9 = new Integer(0);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer3;
      integerArray0[1] = integer6;
      integerArray0[2] = integer8;
      integerArray0[3] = integer8;
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(integerArray0);
      JComboBox<Integer> jComboBox1 = new JComboBox<Integer>();
      assertFalse(jComboBox1.isFocusTraversalPolicyProvider());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.appendAllElements(stack0);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_DITHERING;
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      SunHints.Key sunHints_Key3 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.LCDContrastKey sunHints_LCDContrastKey1 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.LCDContrastKey sunHints_LCDContrastKey2 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.LCDContrastKey sunHints_LCDContrastKey3 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      System.setCurrentTimeMillis(0L);
  }
}
