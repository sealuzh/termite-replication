/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 15:16:20 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.net.SocketOption;
import java.nio.ByteBuffer;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;
import java.util.logging.ConsoleHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.qsadmin.QSAdminServer;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.DataType;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;
import org.quickserver.util.xmlreader.QuickServerConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1279462185041473
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      ClientEvent clientEvent0 = ClientEvent.WRITE;
      theClient0.setClientEvent(clientEvent0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      theClient0.toString();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 201);
      mockSocket0.bind(mockInetSocketAddress0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      theClient0.setSocket(mockSocket0);
      theClient0.getClientObjectHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientObjectHandler();
      theClient0.getSocket();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocket();
      theClient0.getClientBinaryHandler();
      theClient0.getServer();
      theClient0.getSocket();
      theClient0.getSocketChannel();
      theClient0.getServer();
      theClient0.getClientExtendedEventHandler();
      theClient0.getServer();
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("");
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      quickServer0.initService(quickServerConfig0);
      theClient0.setServer(quickServer0);
      theClient0.setServer(quickServer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.getAuthenticator();
      theClient0.getServer();
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getSocketChannel();
      theClient0.getClientWriteHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.969755134636486
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      QuickServer quickServer0 = new QuickServer("{TheClient ");
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      quickServer0.makeServerSocket();
      theClient0.toString();
      quickServer0.setAppLogger((Logger) null);
      quickServer0.setClientEventHandler("{TheClient ");
      theClient0.setServer(quickServer0);
      theClient0.getClientWriteHandler();
      theClient0.getServer();
      theClient0.getClientObjectHandler();
      System.setCurrentTimeMillis(0L);
      theClient0.getSocketChannel();
      theClient0.getClientWriteHandler();
      theClient0.toString();
      TheClient theClient1 = new TheClient();
      theClient1.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getSocket();
      System.setCurrentTimeMillis(0L);
      QuickServer quickServer1 = new QuickServer("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      assertTrue(quickServer1.getBlockingMode());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9713931362744876
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getSocketChannel();
      theClient0.getClientBinaryHandler();
      QuickServer quickServer0 = new QuickServer(", Event: ", 9877);
      quickServer0.setConsoleLoggingToMicro();
      theClient0.setMaxConnectionMsg("#7r");
      quickServer0.setName("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      quickServer0.setClientData((String) null);
      ConsoleHandler consoleHandler0 = new ConsoleHandler();
      quickServer0.setQSAdminServerPort(9877);
      quickServer0.getSelector();
      quickServer0.setSelector((Selector) null);
      Level level0 = consoleHandler0.getLevel();
      quickServer0.setConsoleLoggingLevel(level0);
      quickServer0.setRunningSecure(true);
      theClient0.setServer(quickServer0);
      theClient0.getClientBinaryHandler();
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      theClient0.getAuthenticator();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.getSocketChannel();
      theClient0.getSocketChannel();
      theClient0.getClientObjectHandler();
      theClient0.getSocket();
      theClient0.getClientObjectHandler();
      System.setCurrentTimeMillis(1647L);
      System.setCurrentTimeMillis((-652L));
      theClient0.getClientBinaryHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      QuickServer quickServer0 = new QuickServer();
      quickServer0.resumeService();
      QSAdminServer qSAdminServer0 = new QSAdminServer(quickServer0);
      quickServer0.getPort();
      quickServer0.setClientEventHandler("Could not bind to 127.0.0.1 : ");
      quickServer0.setConfig((QuickServerConfig) null);
      DataType dataType0 = DataType.OUT;
      quickServer0.getDefaultDataMode(dataType0);
      quickServer0.setCommunicationLogging(false);
      theClient0.setServer(quickServer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-116);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      theClient0.getSocket();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientObjectHandler();
      theClient0.getClientBinaryHandler();
      System.setCurrentTimeMillis(0L);
      theClient0.getSocketChannel();
      theClient0.getServer();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocket();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.MAX_CON;
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "c|bgk");
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.setMaxConnectionMsg("hU}!tk,h'4");
      boolean boolean0 = theClient0.getTrusted();
      theClient0.setSocket((Socket) null);
      theClient0.getMaxConnectionMsg();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getTrusted();
      theClient0.setMaxAuthTryMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      boolean boolean1 = theClient0.getCommunicationLogging();
      assertFalse(boolean1 == boolean0);
      
      theClient0.getMaxAuthTryMsg();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getSocket();
      theClient0.getClientWriteHandler();
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.047707978151193
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setMaxAuthTryMsg("");
      QuickServer quickServer0 = new QuickServer();
      quickServer0.setConsoleLoggingToMicro();
      quickServer0.setConsoleLoggingToMini();
      quickServer0.suspendService();
      quickServer0.setTimeoutMsg("");
      quickServer0.setMaxAuthTry(0);
      theClient0.setServer(quickServer0);
      theClient0.setTimeoutMsg("");
      theClient0.getClientEventHandler();
      theClient0.getSocket();
      theClient0.getAuthenticator();
      theClient0.getTimeout();
      theClient0.getTrusted();
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientEvent();
      theClient0.getMaxAuthTry();
      theClient0.getServer();
      System.setCurrentTimeMillis((-2497L));
      theClient0.getSocket();
      System.setCurrentTimeMillis(2L);
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1239058144637433
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setTimeout(1329);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setTrusted(true);
      theClient0.getClientBinaryHandler();
      theClient0.getAuthenticator();
      theClient0.getTimeout();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[3];
      theClient0.getClientObjectHandler();
      theClient0.getClientBinaryHandler();
      // Undeclared exception!
      try { 
        ByteBuffer.allocate((-1164));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getSocketChannel();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      mockSocket0.getLocalPort();
      theClient0.setSocket(mockSocket0);
      theClient0.getClientObjectHandler();
      theClient0.getSocket();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-2106));
      int int0 = theClient0.getMaxAuthTry();
      assertEquals((-2106), int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.getClientEventHandler();
      theClient0.getClientData();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.getSocket();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      SocketChannel socketChannel0 = SocketChannel.open();
      Socket socket0 = socketChannel0.socket();
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.setSocket(socket0);
      theClient0.getSocket();
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout((-4762));
      theClient0.getTimeout();
      System.setCurrentTimeMillis((-4762));
      System.setCurrentTimeMillis(731L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q])`_FF");
      theClient0.setTimeoutMsg("");
      theClient0.getTimeoutMsg();
      // Undeclared exception!
      try { 
        commandHandler0.gotConnected((ClientHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.qsadmin.CommandHandler", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(2403);
      theClient0.getMaxAuthTry();
      theClient0.getClientEventHandler();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientEvent();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2403);
      assertEquals(2403, byteBuffer0.limit());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1262368167947456
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientEventHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      commandHandler0.lostConnection(nonBlockingClientHandler0);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:29>", nonBlockingClientHandler0.getName());
      
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.toString();
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getMaxConnectionMsg();
      theClient0.setMaxConnectionMsg("Zv<Yt+K&2HQNKR)ed");
      theClient0.getMaxConnectionMsg();
      theClient0.getTrusted();
      theClient0.toString();
      theClient0.getTrusted();
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.toString();
      theClient0.getClientWriteHandler();
      //  // Unstable assertion: assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setMaxAuthTryMsg("#y3,5e,f");
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H>Q]<,");
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.getMaxAuthTryMsg();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SocketOption<Object> socketOption0 = (SocketOption<Object>) mock(SocketOption.class, new ViolatedAssumptionAnswer());
      TheClient theClient0 = new TheClient();
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.196939089991099
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.toString();
      theClient0.getClientEventHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      commandHandler0.lostConnection(nonBlockingClientHandler0);
      commandHandler0.lostConnection(nonBlockingClientHandler0);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:16>", nonBlockingClientHandler0.getName());
      
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.toString();
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getMaxConnectionMsg();
      theClient0.setMaxConnectionMsg("");
      theClient0.getMaxConnectionMsg();
      theClient0.getTrusted();
      theClient0.getClientEvent();
      theClient0.toString();
      theClient0.getTrusted();
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.toString();
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      //  // Unstable assertion: assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientData();
      theClient0.getClientData();
      theClient0.getCommunicationLogging();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setMaxAuthTryMsg("");
      theClient0.getCommunicationLogging();
      theClient0.getMaxAuthTryMsg();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(1926);
      // Undeclared exception!
      try { 
        authenticator0.handleAuthentication((ClientHandler) blockingClientHandler0, "no socket");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.qsadmin.Authenticator", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Data data0 = new Data();
      TheClient theClient0 = new TheClient();
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      boolean boolean0 = theClient0.getTrusted();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler((-1994));
      commandHandler0.closingConnection(blockingClientHandler0);
      assertEquals("<ClientHandler-Pool#-1994-ID:1>", blockingClientHandler0.getName());
      
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setMaxAuthTryMsg("");
      theClient0.getClientCommandHandler();
      theClient0.getClientObjectHandler();
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientBinaryHandler();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(563);
      ClientEvent clientEvent0 = ClientEvent.ACCEPT;
      blockingClientHandler0.addEvent(clientEvent0);
      // Undeclared exception!
      try { 
        defaultClientEventHandler0.lostConnection(blockingClientHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("QIAO8NpX");
      theClient0.getTimeoutMsg();
      boolean boolean0 = theClient0.getTrusted();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2603936002885616
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setMaxAuthTryMsg("");
      QuickServer quickServer0 = new QuickServer();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) authenticator0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      quickServer0.setStoreObjects(objectArray0);
      quickServer0.setTimeoutMsg("");
      quickServer0.setConsoleLoggingToMini();
      theClient0.setServer(quickServer0);
      theClient0.setTimeoutMsg("");
      theClient0.getClientEventHandler();
      theClient0.getSocket();
      theClient0.getAuthenticator();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientEvent();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      QuickServer quickServer1 = new QuickServer("");
      System.setCurrentTimeMillis((-2425L));
      theClient0.getClientObjectHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getAuthenticator();
      System.setCurrentTimeMillis(0L);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientObjectHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientData();
      theClient0.getClientBinaryHandler();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      // Undeclared exception!
      try { 
        authenticator0.askAuthentication(nonBlockingClientHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.qsadmin.Authenticator", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.getTimeoutMsg();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SocketChannel socketChannel0 = SocketChannel.open();
      socketChannel0.configureBlocking(true);
      TheClient theClient0 = new TheClient();
      theClient0.setSocketChannel(socketChannel0);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) quickServer0;
      objectArray0[1] = (Object) theClient0;
      objectArray0[2] = (Object) theClient0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) quickServer0;
      objectArray0[6] = (Object) quickServer0;
      quickServer0.setStoreObjects(objectArray0);
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }
}
