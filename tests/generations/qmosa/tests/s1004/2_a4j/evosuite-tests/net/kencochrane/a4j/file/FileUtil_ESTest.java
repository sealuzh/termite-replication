/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 14:23:06 GMT 2019
 */

package net.kencochrane.a4j.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import net.kencochrane.a4j.file.FileUtil;
import net.kencochrane.a4j.util.LoadProperties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileUtil_ESTest extends FileUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&BlendedSearch=%2C&type=,&f=xml");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, ",");
      fileUtil0.downloadBlendedSearchFile(",", ",");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      FileUtil fileUtil1 = new FileUtil();
      assertFalse(fileUtil1.equals((Object)fileUtil0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9253539308675658
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "oJB");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/A_OJB.XML");
      Predicate.isEqual((Object) predicate1);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "tc5-8taE??;Hv=");
      Predicate<Object> predicate2 = predicate0.negate();
      predicate2.and(predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate.isEqual((Object) predicate3);
      Object object0 = new Object();
      predicate0.test(object0);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate3.negate();
      predicate5.or(predicate0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Predicate<Object> predicate8 = predicate6.negate();
      predicate8.or(predicate0);
      predicate0.test("ShoppingCart=clear&f=xml&dev-t=");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      Predicate.isEqual((Object) "GO+9\"aU2,TT%l6]2z");
      predicate0.and(predicate0);
      arrayList0.removeIf(predicate0);
      predicate4.and(predicate2);
      predicate4.or(predicate6);
      predicate5.test(object0);
      predicate4.or(predicate8);
      arrayList0.add((Object) predicate8);
      fileUtil0.getAccessories("oJB", arrayList0);
      predicate7.and(predicate5);
      Object object1 = new Object();
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9714549503478573
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&SimilaritySearch=null&type=lite&offerpage=GO+9\"aU2,TT%l6]2z&offer=all&f=xml");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "oJB");
      fileUtil0.getAccessories("oJB", arrayList0);
      fileUtil0.getSimilarItems((String) null, "GO+9\"aU2,TT%l6]2z");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      arrayList0.removeIf(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      predicate3.test((Object) null);
      predicate2.or(predicate4);
      arrayList0.add((Object) "86400000");
      fileUtil0.getAccessories("oJB", arrayList0);
      predicate3.and(predicate1);
      Object object0 = new Object();
      System.setCurrentTimeMillis(39L);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.455848709151796
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "oJB");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      Object object0 = new Object();
      predicate1.test(object0);
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate3.negate();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&AsinSearch=oJB&type=v:.& }\"K1B>v&offerpage=oJB&offer=oJB&f=xml");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "oJB");
      predicate0.negate();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Predicate<Object> predicate9 = predicate2.negate();
      predicate9.negate();
      Predicate<Object> predicate10 = predicate1.negate();
      predicate7.and(predicate4);
      predicate9.negate();
      predicate2.or(predicate10);
      Predicate<Object> predicate11 = predicate7.negate();
      predicate4.negate();
      Predicate<Object> predicate12 = Predicate.isEqual((Object) predicate11);
      predicate10.negate();
      predicate12.and(predicate8);
      Predicate<Object> predicate13 = predicate10.or(predicate12);
      Object object1 = new Object();
      Object object2 = new Object();
      predicate5.test(predicate11);
      predicate6.negate();
      Predicate.isEqual((Object) predicate5);
      predicate5.or(predicate7);
      predicate13.negate();
      FileUtil fileUtil1 = new FileUtil();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      File file0 = fileUtil1.getASINFile("oJB", "v:.& }\"K1B>v", "oJB", "oJB");
      assertNull(file0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1032731737259827
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator.identity();
      unaryOperator1.apply(fileUtil0);
      LoadProperties.instance();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) unaryOperator0);
      unaryOperator2.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ?>) function0);
      Function<Object, String> function2 = unaryOperator3.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator4.andThen((Function<? super Object, ? extends String>) function2);
      unaryOperator4.andThen((Function<? super Object, ?>) function2);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/_NULL__VUS8OOS7SJW[SK6~*.XML");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)80;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      unaryOperator3.apply("+V,YVVp`o-HI");
      function4.compose((Function<? super String, ?>) unaryOperator2);
      unaryOperator3.compose((Function<? super Object, ? extends String>) function2);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/_NULL__VUS8OOS7SJW[SK6~*.XML");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "");
      arrayList0.replaceAll(unaryOperator1);
      arrayList0.listIterator(0);
      Object object0 = new Object();
      arrayList0.add(object0);
      FileInputStream fileInputStream0 = fileUtil0.fetchASINFile("", "", (String) null, "Vus8OoS7SJW[SK6~*");
      assertEquals(5, fileInputStream0.available());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-1066));
      Integer integer1 = new Integer((-1066));
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      Integer integer2 = new Integer((-1066));
      Integer integer3 = new Integer((-1066));
      Integer integer4 = new Integer((-2145285608));
      Integer integer5 = new Integer((-2145285608));
      Integer integer6 = new Integer((-1066));
      Integer integer7 = new Integer((-1983));
      Integer integer8 = new Integer((-1066));
      ArrayList<Integer> arrayList3 = new ArrayList<Integer>();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&KeywordSearch=%7FXo&mode=Xo&type=g_&page=pIkbR>6j+iR#&f=xml");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "cacheDir");
      Integer integer9 = new Integer((-2145285608));
      Integer integer10 = new Integer((-1));
      Integer integer11 = new Integer((-651));
      Integer integer12 = new Integer((-541));
      Integer integer13 = new Integer((-541));
      Integer integer14 = new Integer((-1393));
      Integer integer15 = new Integer((-611));
      FileUtil fileUtil0 = new FileUtil();
      System.setCurrentTimeMillis((-1393));
      FileInputStream fileInputStream0 = fileUtil0.fetchKeywordSearchFile("Xo", "Xo", "g_", "pIkbR>6j+iR#");
      assertNull(fileInputStream0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.925353930867566
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/86400000_86400000_86400000.XML");
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-23);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[5] = (byte)0;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      fileUtil0.getBrowseNodeFile("86400000", "86400000", "86400000");
      System.setCurrentTimeMillis((byte)0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.74352987314321
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) unaryOperator1);
      Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator3.compose((Function<? super Object, ? extends String>) function2);
      unaryOperator2.compose((Function<? super Integer, ? extends String>) function3);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/NULL___ASINSEARCH.XML");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function5 = unaryOperator2.compose((Function<? super Object, ? extends String>) function4);
      UnaryOperator.identity();
      UnaryOperator.identity();
      fileUtil0.getSimilarItems("", "");
      Function<Object, String> function6 = unaryOperator2.compose((Function<? super Object, ? extends String>) function5);
      function5.compose((Function<? super Object, ?>) unaryOperator0);
      function5.apply(unaryOperator0);
      Function<Object, String> function7 = unaryOperator2.compose((Function<? super Object, ? extends String>) function6);
      unaryOperator2.andThen((Function<? super String, ?>) function7);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function5);
      Object object0 = new Object();
      Object object1 = new Object();
      File file0 = fileUtil0.getASINFile((String) null, "", "", "AsinSearch");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      fileUtil0.isAgeGood(file0);
      fileUtil0.getBrowseNodeFile("", "", "9");
      File file1 = fileUtil0.getAccessories("&Hmac=", arrayList0);
      assertNull(file1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      arrayList1.trimToSize();
      Integer integer0 = new Integer((-1066));
      arrayList1.add(integer0);
      Integer integer1 = new Integer((-1066));
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      Integer integer2 = new Integer((-670));
      Integer integer3 = new Integer((-1066));
      Integer integer4 = new Integer(2777);
      Integer integer5 = new Integer((-2145336163));
      Integer integer6 = new Integer((-2145336163));
      Integer integer7 = new Integer((-75));
      Integer integer8 = new Integer((-1));
      Integer integer9 = new Integer((-3522));
      arrayList1.add(integer3);
      Integer integer10 = new Integer(2840);
      Integer integer11 = new Integer((-1066));
      Integer integer12 = new Integer((-1));
      Integer integer13 = new Integer(2840);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&BlendedSearch=_&type=&f=xml");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "-");
      Integer integer14 = new Integer((-2145251335));
      ArrayList<Integer> arrayList3 = new ArrayList<Integer>();
      Integer integer15 = new Integer(2051);
      FileUtil fileUtil0 = new FileUtil();
      FileInputStream fileInputStream0 = fileUtil0.fetchBlendedSearchFile("_", "");
      assertNull(fileInputStream0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&'=&mode=mg_cL_uWrZ]7l8UT^b&type=&page=htZ&offer=WI&dE+,DW('&f=xml");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, ",");
      fileUtil0.downloadKeywordSearchFile(",", ";1LYw4zX", ";1LYw4zX", ",");
      File file0 = fileUtil0.downloadGenericSearchFile("'", "", "mg_cL_uWrZ]7l8UT^b", "", "htZ", "WI&dE+,DW('");
      assertNull(file0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1032731737259827
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/S_NULL.XML");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Function<String, String> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator2.apply(function0);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator3.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator3.compose((Function<? super Object, ? extends String>) function2);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, Object> function5 = unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator4);
      Function<Object, String> function6 = unaryOperator3.compose((Function<? super Object, ? extends String>) function2);
      unaryOperator3.compose((Function<? super Object, ? extends String>) function4);
      UnaryOperator.identity();
      Function<Object, String> function7 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function8 = unaryOperator3.compose((Function<? super Object, ? extends String>) function7);
      function2.compose((Function<? super String, ?>) unaryOperator4);
      Function<Object, String> function9 = function8.andThen((Function<? super String, ? extends String>) function4);
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      Function<Object, String> function10 = unaryOperator6.andThen((Function<? super Object, ? extends String>) function6);
      Object object0 = new Object();
      function4.apply(object0);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      function10.apply(function5);
      function7.compose((Function<? super String, ?>) unaryOperator5);
      UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super Object, ? extends String>) function3);
      UnaryOperator<String> unaryOperator7 = UnaryOperator.identity();
      unaryOperator7.compose((Function<? super Object, ? extends String>) function3);
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function9);
      FileUtil fileUtil0 = new FileUtil();
      FileInputStream fileInputStream0 = fileUtil0.fetchSimilarItems((String) null, "daliAWI8Qevqs");
      assertNull(fileInputStream0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1084013788541878
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "oJB");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/A_OJB.XML");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "tc5-8taE??;Hv=");
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      Object object0 = new Object();
      predicate1.test(object0);
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate2.negate();
      Predicate<Object> predicate10 = predicate2.or(predicate0);
      Predicate<Object> predicate11 = predicate8.negate();
      predicate3.negate();
      predicate4.and(predicate7);
      predicate11.or(predicate7);
      Object object1 = new Object();
      Object object2 = new Object();
      predicate10.test(predicate11);
      predicate5.negate();
      predicate9.or(predicate0);
      predicate6.and(predicate7);
      FileUtil fileUtil1 = new FileUtil();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      FileInputStream fileInputStream0 = fileUtil0.fetchAccessories("oJB", arrayList0);
      assertEquals(15, fileInputStream0.available());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9253539308675658
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "oJB");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/A_OJB.XML");
      Predicate.isEqual((Object) predicate1);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "tc5-8taE??;Hv=");
      Predicate<Object> predicate2 = predicate0.negate();
      predicate2.and(predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate.isEqual((Object) predicate3);
      Object object0 = new Object();
      predicate0.test(object0);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate3.negate();
      predicate5.or(predicate0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Predicate<Object> predicate8 = predicate6.negate();
      predicate8.or(predicate0);
      predicate0.test("ShoppingCart=clear&f=xml&dev-t=");
      Predicate.isEqual((Object) "GO+9\"aU2,TT%l6]2z");
      predicate0.and(predicate0);
      arrayList0.removeIf(predicate0);
      predicate4.and(predicate2);
      predicate4.or(predicate6);
      predicate5.test(object0);
      predicate4.or(predicate8);
      arrayList0.add((Object) predicate8);
      fileUtil0.getAccessories("oJB", arrayList0);
      predicate7.and(predicate5);
      Object object1 = new Object();
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2761809225159486
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) unaryOperator1);
      Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/NULL___ASINSEARCH.XML");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "net.kencochrane.a4j.util.LoadProperties");
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator2.compose((Function<? super Object, ? extends String>) function1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      fileUtil0.getSimilarItems("net.kencochrane.a4j.util.LoadProperties", "net.kencochrane.a4j.util.LoadProperties");
      function2.compose((Function<? super Object, ?>) unaryOperator0);
      function2.apply(unaryOperator0);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Object object0 = new Object();
      Object object1 = new Object();
      fileUtil0.getASINFile((String) null, "", "", "AsinSearch");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertTrue(arrayList1.isEmpty());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1032731737259827
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator.identity();
      unaryOperator1.apply(fileUtil0);
      LoadProperties.instance();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) unaryOperator0);
      Function<String, String> function0 = Function.identity();
      unaryOperator2.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ?>) function0);
      Function<Object, String> function2 = unaryOperator3.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator4.andThen((Function<? super Object, ? extends String>) function2);
      unaryOperator4.andThen((Function<? super Object, ?>) function2);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      unaryOperator3.apply("+V,YVVp`o-HI");
      function4.compose((Function<? super String, ?>) unaryOperator2);
      unaryOperator3.compose((Function<? super Object, ? extends String>) function2);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/_NULL__VUS8OOS7SJW[SK6~*.XML");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      arrayList0.replaceAll(unaryOperator1);
      arrayList0.listIterator(0);
      Object object0 = new Object();
      arrayList0.add(object0);
      Object object1 = new Object();
      arrayList0.add(object1);
      FileInputStream fileInputStream0 = fileUtil0.fetchASINFile("", "", (String) null, "Vus8OoS7SJW[SK6~*");
      assertEquals(0, fileInputStream0.available());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1032731737259827
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/S_NULL.XML");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator3.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator4.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator3.compose((Function<? super Object, ? extends String>) function1);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, Object> function5 = unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator4);
      Function<Object, String> function6 = unaryOperator3.compose((Function<? super Object, ? extends String>) function2);
      unaryOperator3.compose((Function<? super Object, ? extends String>) function4);
      UnaryOperator.identity();
      Function<Object, String> function7 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function8 = unaryOperator3.compose((Function<? super Object, ? extends String>) function7);
      Function<Object, String> function9 = function8.andThen((Function<? super String, ? extends String>) function4);
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      Function<Object, String> function10 = unaryOperator6.andThen((Function<? super Object, ? extends String>) function6);
      Object object0 = new Object();
      function4.apply(object0);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      function10.apply(function5);
      function7.compose((Function<? super String, ?>) unaryOperator5);
      UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super Object, ? extends String>) function3);
      UnaryOperator<String> unaryOperator7 = UnaryOperator.identity();
      unaryOperator7.compose((Function<? super Object, ? extends String>) function3);
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function9);
      FileUtil fileUtil0 = new FileUtil();
      FileInputStream fileInputStream0 = fileUtil0.fetchSimilarItems((String) null, "daliAW<I8Qevq(s");
      assertEquals(0, fileInputStream0.available());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1032731737259827
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      arrayList1.trimToSize();
      Integer integer0 = new Integer((-1066));
      arrayList1.add(integer0);
      Integer integer1 = new Integer((-1066));
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      Integer integer2 = new Integer((-670));
      Integer integer3 = new Integer((-1066));
      Integer integer4 = new Integer((-1066));
      Integer integer5 = new Integer(52);
      Integer integer6 = new Integer((-3539));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/NULL_}H^UHK~6O.1W6(V?_NULL.XML");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-7);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Integer integer7 = new Integer((-2145307878));
      ArrayList<Integer> arrayList3 = new ArrayList<Integer>();
      Integer integer8 = new Integer(52);
      Integer integer9 = new Integer((-3539));
      Integer integer10 = new Integer((-3539));
      Integer integer11 = new Integer((-2145307878));
      Integer integer12 = new Integer(333);
      Integer integer13 = new Integer((-2145307878));
      FileUtil fileUtil0 = new FileUtil();
      System.setCurrentTimeMillis((-165L));
      FileInputStream fileInputStream0 = fileUtil0.fetchBNFile((String) null, "}H^uHk~6o.1w6(V?", (String) null);
      assertEquals(7, fileInputStream0.available());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1032731737259827
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Integer integer0 = new Integer(1502);
      arrayList1.add(integer0);
      Integer integer1 = new Integer((-1066));
      Integer integer2 = new Integer((-1066));
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      Integer integer3 = new Integer((-1066));
      Integer integer4 = new Integer(2777);
      Integer integer5 = new Integer((-2145336163));
      Integer integer6 = new Integer((-2145336163));
      arrayList1.ensureCapacity(1502);
      Integer integer7 = new Integer((-75));
      Integer integer8 = new Integer((-1));
      Integer integer9 = new Integer((-3526));
      arrayList1.add(integer3);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/-_NULL_.XML");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Integer integer10 = new Integer((-1));
      Integer integer11 = new Integer((-1066));
      Integer integer12 = new Integer((-1));
      Integer integer13 = new Integer((-2145336163));
      Integer integer14 = new Integer((-2145251335));
      ArrayList<Integer> arrayList3 = new ArrayList<Integer>();
      Integer integer15 = new Integer(2051);
      FileUtil fileUtil0 = new FileUtil();
      FileInputStream fileInputStream0 = fileUtil0.fetchBNFile("-", (String) null, "");
      assertNull(fileInputStream0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.925353930867566
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/86400000_86400000_86400000.XML");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      fileUtil0.getBrowseNodeFile("86400000", "86400000", "86400000");
      System.setCurrentTimeMillis(7L);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9487205928347628
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/86400000_86400000_86400000.XML");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      fileUtil0.downloadBlendedSearchFile((String) null, (String) null);
      byteArray0[4] = (byte)0;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      LoadProperties.instance();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&BrowseNodeSearch=86400000&mode=86400000&type=lite&page=86400000&offer=new&f=xml");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, ".^.}`Y+d:j{+");
      File file0 = fileUtil0.getBrowseNodeFile("86400000", "86400000", "86400000");
      assertNull(file0);
      
      System.setCurrentTimeMillis(7L);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = fileUtil0.downloadAccessoriesFile("86400000", arrayList0, "86400000");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      function0.andThen((Function<? super String, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) unaryOperator1);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ?>) function0);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator4.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function4 = unaryOperator4.compose((Function<? super Object, ? extends String>) function2);
      function2.compose((Function<? super String, ?>) unaryOperator3);
      Function<Object, String> function5 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      unaryOperator5.compose((Function<? super Object, ? extends String>) function4);
      UnaryOperator.identity();
      unaryOperator4.compose((Function<? super Object, ? extends String>) function4);
      unaryOperator5.compose((Function<? super Object, ? extends String>) function2);
      function2.andThen((Function<? super String, ?>) function4);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function5);
      UnaryOperator<String> unaryOperator6 = UnaryOperator.identity();
      unaryOperator6.compose((Function<? super Object, ? extends String>) function2);
      function2.andThen((Function<? super String, ? extends String>) function2);
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      unaryOperator7.compose((Function<? super Object, ?>) unaryOperator0);
      FileUtil fileUtil0 = new FileUtil();
      String string0 = "av|C'uw)m7_n~c^WNt";
      // Undeclared exception!
      try { 
        fileUtil0.deleteFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte) (-23);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Object object0 = new Object();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      Predicate<Object> predicate5 = predicate1.or(predicate0);
      Predicate<Object> predicate6 = predicate5.or(predicate1);
      predicate6.test(object0);
      predicate5.or(predicate0);
      Predicate<Object> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate1.negate();
      predicate1.negate();
      predicate6.negate();
      Predicate<Object> predicate9 = predicate0.negate();
      Predicate.isEqual((Object) null);
      predicate8.negate();
      predicate4.and(predicate9);
      predicate3.test(predicate2);
      Predicate<Object> predicate10 = predicate8.and(predicate6);
      predicate5.or(predicate2);
      predicate2.or(predicate7);
      Predicate<Object> predicate11 = predicate6.negate();
      predicate10.or(predicate11);
      predicate5.negate();
      predicate5.negate();
      // Undeclared exception!
      try { 
        fileUtil0.renameFile("&", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-1066));
      Integer integer1 = new Integer((-1066));
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      Integer integer2 = new Integer((-670));
      Integer integer3 = new Integer((-1066));
      Integer integer4 = new Integer((-2145285608));
      Integer integer5 = new Integer((-2145285608));
      Integer integer6 = new Integer((-670));
      Integer integer7 = new Integer((-1983));
      Integer integer8 = new Integer((-670));
      ArrayList<Integer> arrayList3 = new ArrayList<Integer>();
      Integer integer9 = new Integer((-2145285608));
      Integer integer10 = new Integer((-670));
      Integer integer11 = new Integer((-611));
      Integer integer12 = new Integer(1073);
      Integer integer13 = new Integer((-2145285608));
      Integer integer14 = new Integer((-2145327538));
      Integer integer15 = new Integer((-611));
      FileUtil fileUtil0 = new FileUtil();
      FileInputStream fileInputStream0 = fileUtil0.fetchKeywordSearchFile("g_", "Xo", "g_", "Xo");
      assertNull(fileInputStream0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-1066));
      Integer integer1 = new Integer((-1066));
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      Integer integer2 = new Integer((-670));
      Integer integer3 = new Integer((-1066));
      Integer integer4 = new Integer((-2145285608));
      Integer integer5 = new Integer((-2145285608));
      Integer integer6 = new Integer((-670));
      Integer integer7 = new Integer((-1983));
      Integer integer8 = new Integer((-670));
      ArrayList<Integer> arrayList3 = new ArrayList<Integer>();
      Integer integer9 = new Integer((-2145285608));
      Integer integer10 = new Integer((-670));
      Integer integer11 = new Integer((-611));
      Integer integer12 = new Integer(1073);
      Integer integer13 = new Integer((-541));
      Integer integer14 = new Integer((-611));
      Integer integer15 = new Integer((-1983));
      FileUtil fileUtil0 = new FileUtil();
      System.setCurrentTimeMillis((-458L));
      FileInputStream fileInputStream0 = fileUtil0.fetchASINFile("ta_", "Xl", "ta_", "g_");
      assertNull(fileInputStream0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function1 = Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ?>) function1);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.compose((Function<? super String, ?>) unaryOperator1);
      Function<Object, String> function3 = unaryOperator3.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function5 = unaryOperator3.compose((Function<? super Object, ? extends String>) function3);
      function3.compose((Function<? super String, ?>) unaryOperator2);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      Function.identity();
      unaryOperator1.apply(function0);
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator3.compose((Function<? super Object, ? extends String>) function5);
      unaryOperator4.compose((Function<? super Object, ? extends String>) function3);
      function3.andThen((Function<? super String, ?>) function5);
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      Function.identity();
      unaryOperator5.compose((Function<? super Object, ? extends String>) function3);
      function3.andThen((Function<? super String, ? extends String>) function3);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      FileUtil fileUtil0 = new FileUtil();
      FileInputStream fileInputStream0 = fileUtil0.fetchASINFile("Vus8OoS7SJW[SK6~*", (String) null, "", "");
      assertNull(fileInputStream0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function1 = Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ?>) function1);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.compose((Function<? super String, ?>) unaryOperator1);
      Function<Object, String> function3 = unaryOperator3.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function5 = unaryOperator3.compose((Function<? super Object, ? extends String>) function3);
      function3.compose((Function<? super String, ?>) unaryOperator2);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      unaryOperator1.apply(function0);
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator3.compose((Function<? super Object, ? extends String>) function5);
      unaryOperator4.compose((Function<? super Object, ? extends String>) function3);
      function3.andThen((Function<? super String, ?>) function5);
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      Function.identity();
      unaryOperator5.compose((Function<? super Object, ? extends String>) function3);
      function3.andThen((Function<? super String, ? extends String>) function3);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      FileUtil fileUtil0 = new FileUtil();
      fileUtil0.deleteFile("g3O 9'USDv^|");
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)60;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileUtil fileUtil0 = new FileUtil();
      MockFile mockFile0 = new MockFile("P!%Wjhr3L\t|J_&%", "'xa!Qdd");
      fileUtil0.isAgeGood(mockFile0);
      MockFile mockFile1 = new MockFile((String) null, "c_");
      boolean boolean0 = fileUtil0.isAgeGood(mockFile1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.20571469225704
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      fileUtil0.downloadSimilaritesFile("t_", "ts_", "");
      fileUtil0.downloadThirdPartySearchFile("g_", "", "K}tq&a", "'");
      fileUtil0.downloadKeywordSearchFile(",^yh~@xp4y", ";1LYw4zX", ";1LYw4zX", ",^yh~@xp4y");
      fileUtil0.downloadGenericSearchFile(";1LYw4zX", "", "qbr(SyOk*<0huB~", ";1LYw4zX", "<S=#<", "r\u0007=D2/");
      fileUtil0.downloadGenericSearchFile("", "K}tq&a", "L", "qbr(SyOk*<0huB~", "'", "");
      fileUtil0.isAgeGood((File) null);
      boolean boolean0 = fileUtil0.isAgeGood((File) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.925353930867566
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/86400000_86400000_86400000.XML");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      fileUtil0.getBrowseNodeFile("86400000", "86400000", "86400000");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(7L);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-1066));
      Integer integer1 = new Integer((-1066));
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      Integer integer2 = new Integer((-670));
      Integer integer3 = new Integer((-1066));
      Integer integer4 = new Integer(2777);
      Integer integer5 = new Integer((-2145336163));
      Integer integer6 = new Integer((-2145285608));
      Integer integer7 = new Integer(1073);
      ArrayList<Integer> arrayList3 = new ArrayList<Integer>();
      Integer integer8 = new Integer(0);
      Integer integer9 = new Integer(2777);
      Integer integer10 = new Integer(2777);
      Integer integer11 = new Integer((-541));
      Integer integer12 = new Integer(788);
      Integer integer13 = new Integer((-670));
      Integer integer14 = new Integer(2777);
      FileUtil fileUtil0 = new FileUtil();
      boolean boolean0 = fileUtil0.downloadBrowseNodeFile("c_", "MV']-W1S)kAotNz", "", "MV']-W1S)kAotNz");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&'=&mode=mg_cL_uWrZ]7l8UT^b&type=&page=htZ&offer=WI&dE+,DW('&f=xml");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, ",");
      FileInputStream fileInputStream0 = fileUtil0.fetchThirdPartySearchFile("", ";1LYw4zX", "", "'");
      assertNull(fileInputStream0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-1058));
      Integer integer1 = new Integer((-1058));
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      Integer integer2 = new Integer((-670));
      Integer integer3 = new Integer((-1058));
      Integer integer4 = new Integer((-2145285608));
      Integer integer5 = new Integer((-2145285608));
      Integer integer6 = new Integer((-670));
      Integer integer7 = new Integer((-1983));
      Integer integer8 = new Integer((-670));
      ArrayList<Integer> arrayList3 = new ArrayList<Integer>();
      Integer integer9 = new Integer((-2145285576));
      Integer integer10 = new Integer((-670));
      Integer integer11 = new Integer((-611));
      Integer integer12 = new Integer(1073);
      Integer integer13 = new Integer((-541));
      Integer integer14 = new Integer((-611));
      Integer integer15 = new Integer((-1983));
      FileUtil fileUtil0 = new FileUtil();
      System.setCurrentTimeMillis(5L);
      File file0 = fileUtil0.downloadKeywordSearchFile("S%44}Yk}", "", "g_", "g_");
      assertNull(file0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      File file0 = fileUtil0.downloadCart((String) null);
      assertNull(file0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) unaryOperator0);
      Function.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator3.compose((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function5 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function6 = unaryOperator3.compose((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function7 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      Function<Object, String> function8 = unaryOperator3.compose((Function<? super Object, ? extends String>) function5);
      Function<Object, String> function9 = unaryOperator3.compose((Function<? super Object, ? extends String>) function6);
      UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function10 = unaryOperator3.compose((Function<? super Object, ? extends String>) function7);
      Function<Object, String> function11 = function10.andThen((Function<? super String, ? extends String>) function7);
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function12 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function12);
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function8);
      unaryOperator3.compose((Function<? super Object, ? extends String>) function9);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function11);
      Object object0 = new Object();
      FileUtil fileUtil0 = new FileUtil();
      FileInputStream fileInputStream0 = fileUtil0.fetchAccessories("_", arrayList0);
      assertNull(fileInputStream0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Integer integer0 = new Integer(1502);
      arrayList1.add(integer0);
      Integer integer1 = new Integer((-1066));
      arrayList1.add(integer1);
      Integer integer2 = new Integer((-1066));
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      Integer integer3 = new Integer((-670));
      Integer integer4 = new Integer((-1066));
      Integer integer5 = new Integer(2777);
      Integer integer6 = new Integer((-2145336163));
      Integer integer7 = new Integer((-2145336163));
      Integer integer8 = new Integer((-75));
      Integer integer9 = new Integer((-1));
      Integer integer10 = new Integer((-3522));
      arrayList1.add(integer4);
      Integer integer11 = new Integer((-1));
      Integer integer12 = new Integer((-1066));
      Integer integer13 = new Integer((-1));
      Integer integer14 = new Integer((-2145336163));
      Integer integer15 = new Integer((-2145251335));
      ArrayList<Integer> arrayList3 = new ArrayList<Integer>();
      Integer integer16 = new Integer(2051);
      FileUtil fileUtil0 = new FileUtil();
      FileInputStream fileInputStream0 = fileUtil0.fetchBNFile("-", (String) null, "");
      assertNull(fileInputStream0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "'");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate0);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate3);
      Predicate<Object> predicate7 = predicate6.negate();
      predicate0.or(predicate1);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&SellerSearch=Htix=HUv#^-&type=K}tq&a&page=K}tq&a&offerstatus=Htix=HUv#^-&f=xml");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "type=");
      Predicate<Object> predicate8 = predicate0.negate();
      Predicate<Object> predicate9 = predicate8.negate();
      Object object0 = new Object();
      Predicate<String> predicate10 = Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate11 = predicate9.negate();
      Predicate<Object> predicate12 = predicate11.negate();
      predicate0.or(predicate11);
      Predicate<Object> predicate13 = predicate1.and(predicate7);
      Predicate<Object> predicate14 = Predicate.isEqual((Object) predicate5);
      predicate5.test("type=");
      predicate14.negate();
      Object object1 = new Object();
      predicate12.test(object1);
      predicate1.negate();
      predicate14.or(predicate6);
      Predicate<Object> predicate15 = predicate4.negate();
      Predicate.isEqual((Object) predicate10);
      Predicate.isEqual((Object) predicate13);
      predicate15.negate();
      File file0 = fileUtil0.downloadThirdPartySearchFile("Htix=HUv#^-", "K}tq&a", "K}tq&a", "Htix=HUv#^-");
      assertNull(file0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) unaryOperator1);
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) unaryOperator0);
      Function<String, String> function0 = Function.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Integer, ?>) unaryOperator2);
      unaryOperator3.compose((Function<? super String, ?>) function0);
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      FileUtil fileUtil0 = new FileUtil();
      FileInputStream fileInputStream0 = fileUtil0.fetchThirdPartySearchFile("", "", " ", "");
      assertNull(fileInputStream0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-1066));
      Integer integer1 = new Integer((-1066));
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      Integer integer2 = new Integer((-1066));
      Integer integer3 = new Integer((-1066));
      Integer integer4 = new Integer((-2145285608));
      Integer integer5 = new Integer((-2145285608));
      Integer integer6 = new Integer((-1066));
      Integer integer7 = new Integer((-2145285608));
      Integer integer8 = new Integer((-1066));
      ArrayList<Integer> arrayList3 = new ArrayList<Integer>();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&KeywordSearch=%7FXo&mode=Xo&type=g_&page=pIkbR>6j+iR#&f=xml");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "c_KacheYqDir");
      Integer integer9 = new Integer((-2145285608));
      Integer integer10 = new Integer((-1));
      Integer integer11 = new Integer((-651));
      Integer integer12 = new Integer((-541));
      Integer integer13 = new Integer((-1393));
      Integer integer14 = new Integer((-611));
      FileUtil fileUtil0 = new FileUtil();
      LoadProperties.instance();
      LoadProperties.instance();
      File file0 = fileUtil0.getSimilarItems("s_", "B9>?_m{>//KC.~");
      assertNull(file0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "'");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate0);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate3);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate0.or(predicate1);
      Predicate<Object> predicate9 = predicate2.or(predicate4);
      Object object0 = new Object();
      Predicate<Object> predicate10 = predicate6.or(predicate5);
      Predicate<Object> predicate11 = predicate8.negate();
      predicate9.negate();
      predicate2.negate();
      predicate5.negate();
      Predicate<Object> predicate12 = predicate7.or(predicate1);
      predicate8.negate();
      predicate5.negate();
      Predicate<Object> predicate13 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate14 = predicate0.and(predicate10);
      predicate11.negate();
      Predicate<Object> predicate15 = predicate14.negate();
      predicate13.or(predicate4);
      predicate6.or(predicate1);
      predicate15.and(predicate8);
      Object object1 = new Object();
      predicate13.test("");
      predicate10.negate();
      Predicate.isEqual((Object) predicate12);
      predicate0.or(predicate12);
      predicate4.negate();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      File file0 = fileUtil0.getASINFile("'", "'", "", "v:.& }\"K1B>v");
      assertNull(file0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "'");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate0);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate3);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate0.or(predicate1);
      Predicate<Object> predicate9 = predicate2.or(predicate4);
      Object object0 = new Object();
      Predicate<Object> predicate10 = predicate6.or(predicate5);
      predicate8.negate();
      Predicate<Object> predicate11 = predicate9.negate();
      Predicate<Object> predicate12 = predicate2.negate();
      Predicate<Object> predicate13 = predicate5.negate();
      predicate8.negate();
      Predicate.isEqual((Object) predicate8);
      predicate10.negate();
      Predicate<Object> predicate14 = predicate10.and(predicate2);
      predicate11.test(predicate7);
      Predicate<Object> predicate15 = predicate12.and(predicate9);
      predicate15.or(predicate5);
      predicate0.or(predicate4);
      Predicate<Object> predicate16 = predicate14.negate();
      predicate16.negate();
      predicate14.test(predicate5);
      Predicate<Object> predicate17 = predicate0.or(predicate2);
      predicate17.negate();
      predicate17.or(predicate8);
      predicate16.or(predicate13);
      predicate11.negate();
      predicate16.negate();
      Random.setNextRandom(1193);
      boolean boolean0 = fileUtil0.downloadOneASINFile("fr[7qeLU\"_n7Yd", "6VBSgP", "'", "6VBSgP", "6VBSgP");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      LoadProperties.instance();
      fileUtil0.fetchBlendedSearchFile("?x`#H*=VEkT5", "(\"|':v*");
      Random.setNextRandom((-1));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate5.and(predicate3);
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate4.or(predicate0);
      predicate8.or(predicate1);
      predicate6.or(predicate4);
      Object object0 = new Object();
      Predicate<Object> predicate9 = predicate5.or(predicate1);
      predicate7.negate();
      predicate4.negate();
      Predicate<Object> predicate10 = predicate3.negate();
      predicate0.negate();
      Object object1 = new Object();
      Predicate.isEqual(object1);
      Predicate<Object> predicate11 = predicate2.negate();
      predicate7.and(predicate11);
      predicate2.test(predicate3);
      predicate8.and(predicate0);
      Predicate<Object> predicate12 = predicate6.or(predicate10);
      predicate12.or(predicate1);
      predicate9.negate();
      predicate8.negate();
      predicate7.or(predicate8);
      predicate3.or(predicate10);
      predicate12.negate();
      predicate7.negate();
      fileUtil0.renameFile("", ">9v");
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "'");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate0);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate3);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate0.or(predicate1);
      Predicate<Object> predicate9 = predicate2.or(predicate4);
      Object object0 = new Object();
      Predicate<Object> predicate10 = predicate6.or(predicate5);
      predicate8.negate();
      Predicate<Object> predicate11 = predicate9.negate();
      Predicate<Object> predicate12 = predicate2.negate();
      predicate5.negate();
      predicate8.negate();
      Predicate.isEqual((Object) predicate8);
      predicate10.negate();
      Predicate<Object> predicate13 = predicate10.and(predicate2);
      predicate11.test(predicate7);
      Predicate<Object> predicate14 = predicate12.and(predicate9);
      predicate14.or(predicate5);
      predicate0.or(predicate4);
      Predicate<Object> predicate15 = predicate13.negate();
      predicate15.negate();
      Predicate<Object> predicate16 = predicate0.or(predicate2);
      predicate16.or(predicate8);
      predicate11.negate();
      predicate15.negate();
      fileUtil0.renameFile(">9v", "");
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-23);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Object object0 = new Object();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate2.negate();
      predicate0.or(predicate2);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      predicate4.test(object0);
      Predicate<Object> predicate5 = predicate3.or(predicate0);
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate1.negate();
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate0.negate();
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate11 = predicate4.negate();
      Predicate<Object> predicate12 = predicate10.and(predicate11);
      predicate12.test(predicate1);
      predicate10.and(predicate5);
      predicate9.or(predicate8);
      predicate3.or(predicate2);
      predicate0.negate();
      predicate6.or(predicate3);
      predicate3.negate();
      predicate12.negate();
      fileUtil0.deleteFile("");
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileUtil fileUtil0 = new FileUtil();
      fileUtil0.cacheDir = "86400000";
      FileInputStream fileInputStream0 = fileUtil0.fetchASINFile("&", "AsinSearch", "2C", "86400000");
      assertNull(fileInputStream0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "'");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate0);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate3);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate0.or(predicate1);
      Predicate<Object> predicate9 = predicate2.or(predicate4);
      Object object0 = new Object();
      Predicate<Object> predicate10 = predicate6.or(predicate5);
      predicate8.negate();
      Predicate<Object> predicate11 = predicate9.negate();
      Predicate<Object> predicate12 = predicate2.negate();
      Predicate<Object> predicate13 = predicate5.negate();
      predicate2.and(predicate10);
      predicate8.negate();
      Predicate.isEqual((Object) predicate8);
      predicate10.negate();
      Predicate<Object> predicate14 = predicate10.and(predicate2);
      predicate11.test(predicate7);
      Predicate<Object> predicate15 = predicate12.and(predicate9);
      predicate15.or(predicate5);
      predicate0.or(predicate4);
      Predicate<Object> predicate16 = predicate14.negate();
      predicate16.negate();
      predicate14.test(predicate5);
      Predicate<Object> predicate17 = predicate0.or(predicate2);
      predicate17.or(predicate8);
      predicate16.or(predicate13);
      predicate11.negate();
      predicate16.negate();
      File file0 = fileUtil0.downloadKeywordSearchFile("", "", "", ".0123456789");
      assertNull(file0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "w");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate0.or(predicate1);
      Predicate<Object> predicate5 = predicate3.or(predicate1);
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate2.and(predicate6);
      Predicate<Object> predicate8 = predicate4.negate();
      predicate5.or(predicate4);
      predicate4.negate();
      Predicate<Object> predicate9 = predicate7.or(predicate0);
      predicate5.and(predicate9);
      predicate5.negate();
      predicate9.negate();
      Predicate<Object> predicate10 = predicate4.and(predicate5);
      predicate3.or(predicate10);
      Object object1 = new Object();
      Object object2 = new Object();
      predicate8.test(object2);
      predicate0.negate();
      FileUtil fileUtil0 = new FileUtil();
      FileInputStream fileInputStream0 = fileUtil0.fetchGenericSearchFile("nHR7}\"2&OU-t", "", "k_", "", "k_", "g_");
      assertNull(fileInputStream0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Integer integer0 = new Integer(1502);
      arrayList1.add(integer0);
      Integer integer1 = new Integer((-1066));
      arrayList1.add(integer1);
      Integer integer2 = new Integer((-1066));
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      Integer integer3 = new Integer((-670));
      Integer integer4 = new Integer((-1066));
      Integer integer5 = new Integer(2777);
      Integer integer6 = new Integer((-2145336163));
      Integer integer7 = new Integer((-2145336163));
      Integer integer8 = new Integer((-75));
      Integer integer9 = new Integer((-1));
      Integer integer10 = new Integer((-3501));
      arrayList1.add(integer4);
      Integer integer11 = new Integer((-1));
      Integer integer12 = new Integer((-1066));
      Integer integer13 = new Integer((-1));
      Integer integer14 = new Integer((-2145336163));
      Integer integer15 = new Integer((-2145251335));
      ArrayList<Integer> arrayList3 = new ArrayList<Integer>();
      Integer integer16 = new Integer(2051);
      FileUtil fileUtil0 = new FileUtil();
      FileInputStream fileInputStream0 = fileUtil0.fetchBNFile("-", (String) null, "");
      assertNull(fileInputStream0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function1 = Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ?>) function1);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function2).apply(any());
      unaryOperator2.compose((Function<? super String, ?>) unaryOperator1);
      Function<Object, String> function3 = unaryOperator3.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function5 = unaryOperator3.compose((Function<? super Object, ? extends String>) function3);
      function3.compose((Function<? super String, ?>) unaryOperator2);
      Function<Object, String> function6 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      Function.identity();
      unaryOperator1.apply(function0);
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      Function.identity();
      unaryOperator3.compose((Function<? super Object, ? extends String>) function5);
      Function<Object, String> function7 = unaryOperator4.compose((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function6);
      Object object0 = new Object();
      Function<Object, String> function9 = unaryOperator4.compose((Function<? super Object, ? extends String>) function8);
      function9.apply(unaryOperator5);
      Function<Object, String> function10 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      Object object1 = new Object();
      function10.apply(object1);
      function8.compose((Function<? super String, ?>) function7);
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function9);
      UnaryOperator<String> unaryOperator6 = UnaryOperator.identity();
      unaryOperator6.compose((Function<? super Object, ? extends String>) function9);
      unaryOperator5.andThen((Function<? super Object, ? extends String>) function6);
      FileUtil fileUtil0 = new FileUtil();
      FileInputStream fileInputStream0 = fileUtil0.fetchSimilarItems("daliAWI8Qevqs", (String) null);
      assertNull(fileInputStream0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-1046));
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      Integer integer1 = new Integer((-2145336163));
      Integer integer2 = new Integer(3296);
      Integer integer3 = new Integer(649);
      Integer integer4 = new Integer((-2145336163));
      Integer integer5 = new Integer((-643));
      arrayList1.add(integer5);
      Integer integer6 = new Integer((-1));
      Integer integer7 = new Integer((-1046));
      ArrayList<Integer> arrayList3 = new ArrayList<Integer>();
      Integer integer8 = new Integer((-1046));
      Integer integer9 = new Integer(3296);
      FileUtil fileUtil0 = new FileUtil();
      FileInputStream fileInputStream0 = fileUtil0.fetchGenericSearchFile("", "i\"}i>_L)a", "b_", "", (String) null, "i\"}i>_L)a");
      assertNull(fileInputStream0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-1066));
      Integer integer1 = new Integer((-1066));
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      Integer integer2 = new Integer((-1066));
      Integer integer3 = new Integer((-1066));
      Integer integer4 = new Integer((-2145285608));
      Integer integer5 = new Integer((-2145285608));
      Integer integer6 = new Integer((-1066));
      Integer integer7 = new Integer((-2145285608));
      Integer integer8 = new Integer((-1066));
      ArrayList<Integer> arrayList3 = new ArrayList<Integer>();
      Integer integer9 = new Integer((-2145285608));
      Integer integer10 = new Integer((-1));
      Integer integer11 = new Integer((-651));
      Integer integer12 = new Integer((-541));
      Integer integer13 = new Integer((-1393));
      Integer integer14 = new Integer((-611));
      FileUtil fileUtil0 = new FileUtil();
      FileInputStream fileInputStream0 = fileUtil0.fetchKeywordSearchFile("Xo", "Xo", "g_", "pIkbR>6j+iR#");
      assertNull(fileInputStream0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      function0.apply("Y~aL");
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ?>) function0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      FileUtil fileUtil0 = new FileUtil();
      fileUtil0.getBrowseNodeFile("z8d;lUQ|", "@I<`O-7e]+T'5", "0Pd_");
      System.setCurrentTimeMillis(8L);
  }
}
