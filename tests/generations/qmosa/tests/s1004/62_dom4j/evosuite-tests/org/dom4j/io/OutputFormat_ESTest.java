/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 14:44:50 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.2187997334734537
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent("-omitEncoding");
      outputFormat0.setIndent("-xhtmlw");
      outputFormat0.setIndent("-xhtmlw");
      outputFormat0.setIndentSize(0);
      outputFormat0.setIndent(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-xhtmlw";
      stringArray0[1] = "-omitEncoding";
      stringArray0[2] = "/k@";
      stringArray0[3] = "/k@";
      stringArray0[4] = "-omitEncoding";
      stringArray0[5] = "-xhtmlw";
      stringArray0[6] = "-omitEncoding";
      stringArray0[7] = "-xhtmlw";
      stringArray0[8] = "-xhtmlw";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setIndent("-xhtmlw");
      outputFormat0.setIndent("Zzt[]*|)b+6X7?W}");
      outputFormat0.setIndent("-omitEncoding");
      outputFormat0.setIndent("*m-1");
      outputFormat0.setIndent("-omitEncoding");
      outputFormat0.setIndent("-suppressDeclaration");
      outputFormat0.setIndent("*m-1");
      assertEquals("*m-1", outputFormat0.getIndent());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0204142811723194
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("F2y6)W%',", true);
      outputFormat0.setIndent("-lineSeparator");
      outputFormat0.setIndentSize(6064);
      String string0 = "~(Nv!BHP~>a";
      outputFormat0.setIndent("~(Nv!BHP~>a");
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat1.setIndent(false);
      outputFormat1.setIndent("x\": dh9L]y)*");
      // Undeclared exception!
      outputFormat1.setIndentSize(6064);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7230997172737397
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndentSize((-1794741619));
      outputFormat0.setIndent(true);
      outputFormat0.setIndent("U");
      outputFormat0.setIndentSize((-1794741619));
      outputFormat0.setIndent("-pndentSize");
      String[] stringArray0 = new String[6];
      outputFormat0.setIndent(false);
      stringArray0[0] = "-trimText";
      outputFormat0.setIndent(false);
      stringArray0[1] = "U";
      stringArray0[4] = "-trimText";
      stringArray0[5] = "-pndentSize";
      outputFormat0.setIndent("-trimText");
      outputFormat0.setIndentSize((-1794741619));
      outputFormat0.setIndent(false);
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setIndent("U");
      outputFormat0.setIndent(stringArray0[2]);
      outputFormat0.setIndent(false);
      outputFormat0.setIndent("-encoding");
      outputFormat0.setIndent(")");
      outputFormat0.setIndent("-trimText");
      outputFormat0.setIndent("i9m{vK0CSf${TE");
      outputFormat0.setIndent("U");
      outputFormat0.setIndent("-trimText");
      outputFormat0.setIndent("U");
      assertEquals("U", outputFormat0.getIndent());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.486754008832586
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent("");
      outputFormat0.setIndent("");
      outputFormat0.setIndentSize((-182363149));
      String string0 = "";
      outputFormat0.setIndent("");
      String string1 = "-trimText";
      outputFormat0.setIndent(false);
      outputFormat0.setIndent("/k@");
      outputFormat0.setIndentSize((-182363149));
      outputFormat0.setIndent(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-indentSize";
      stringArray0[1] = "-trimText";
      stringArray0[2] = "";
      stringArray0[3] = "/k@";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-trimText\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8068505695533634
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String string0 = "-lineSeparator";
      outputFormat0.setIndentSize((-1794741619));
      outputFormat0.setIndent("");
      outputFormat0.setIndentSize((-1794741619));
      outputFormat0.setIndent("-pndeJntSize");
      String[] stringArray0 = new String[9];
      outputFormat0.setIndent(false);
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "";
      stringArray0[4] = "-tYimTebt";
      outputFormat0.setIndent("x\": dh9L]y)*");
      outputFormat0.setIndentSize((-1794741619));
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3653496399444975
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = new OutputFormat("-encoding", true, "-xhtml-");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-encoding";
      stringArray0[1] = "-expandEmptyU";
      stringArray0[2] = "-expandEmptyU";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.20571469225704
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-suppressDeclaration");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-suppressDeclaration";
      stringArray0[1] = "-suppressDeclaration";
      outputFormat0.setIndentSize(1);
      outputFormat0.setIndent("-suppressDeclaration");
      outputFormat0.setIndent(false);
      String string0 = "f x!ml";
      outputFormat0.setIndent("f x!ml");
      outputFormat0.setIndentSize(1);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0935773141956315
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = null;
      OutputFormat outputFormat0 = new OutputFormat("-newlines");
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "-newlines";
      stringArray0[3] = "-newlines";
      stringArray0[4] = "-newlines";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.707529922879126
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, false, (String) null);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setLineSeparator("VGv");
      OutputFormat outputFormat1 = new OutputFormat();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setTrimText(false);
      outputFormat1.isOmitEncoding();
      OutputFormat outputFormat3 = new OutputFormat("D+O&");
      outputFormat3.setIndentSize(0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "D+O&";
      stringArray0[1] = null;
      outputFormat2.parseOptions(stringArray0, 0);
      outputFormat0.setIndentSize((-3878));
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.getEncoding();
      assertEquals("VGv", outputFormat0.getLineSeparator());
      
      OutputFormat outputFormat4 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat4.isOmitEncoding());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewlines(false);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('!');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (!)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3188253591622967
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("L;c[YU:7OQ-");
      outputFormat0.setIndent("L;c[YU:7OQ-");
      outputFormat0.setIndent("UNY8+a!");
      outputFormat0.setIndentSize((-5563));
      outputFormat0.setIndentSize((-5563));
      outputFormat0.setIndent(true);
      outputFormat0.setTrimText(true);
      outputFormat0.setIndent("UNY8+a!");
      outputFormat0.setIndent("3kxwufyek+2 k4");
      outputFormat0.setPadText(true);
      outputFormat0.setIndent("b9Ma0X");
      outputFormat0.setIndent("BF07j!AigWsMzg5B!V");
      outputFormat0.setIndent("z@<klJsAj1?K");
      outputFormat0.setIndent("");
      outputFormat0.setAttributeQuoteCharacter('\'');
      outputFormat0.setIndentSize((-1720793810));
      outputFormat0.setIndent("8Wh;C");
      outputFormat0.setIndent("3kxwufyek+2 k4");
      outputFormat0.setIndent("");
      assertEquals('\'', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1435839656142717
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setNewlines(true);
      outputFormat0.setTrimText(true);
      outputFormat0.setNewLineAfterNTags((-1428));
      outputFormat0.setLineSeparator("");
      outputFormat0.setEncoding("");
      outputFormat0.getIndent();
      outputFormat0.setIndent((String) null);
      outputFormat0.setNewlines(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setLineSeparator((String) null);
      outputFormat0.setEncoding("");
      outputFormat0.setIndentSize(1311);
      outputFormat0.setIndent(true);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setIndent("");
      outputFormat1.getLineSeparator();
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      outputFormat0.setIndent("Fe");
      OutputFormat.createPrettyPrint();
      outputFormat0.getLineSeparator();
      assertEquals("Fe", outputFormat0.getIndent());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      String string0 = outputFormat0.getEncoding();
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("", outputFormat0.getIndent());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("", string0);
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1552486438876346
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndentSize((-1794741619));
      outputFormat0.setIndent("");
      outputFormat0.setIndentSize((-1794741619));
      outputFormat0.setIndent("-pndeJntSize");
      String[] stringArray0 = new String[1];
      outputFormat0.setIndent(true);
      outputFormat0.setIndent("UTF-8");
      outputFormat0.setNewLineAfterNTags((-1794741619));
      outputFormat0.setIndentSize(2);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setIndent("-pndeJntSize");
      assertEquals("-pndeJntSize", outputFormat0.getIndent());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0784659454412555
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent(false);
      outputFormat0.setIndentSize((-1794741619));
      outputFormat0.setIndent("");
      outputFormat0.setIndentSize(39);
      outputFormat0.setIndent("");
      outputFormat0.setIndent("-lineSeparator");
      outputFormat0.setIndentSize((-1456));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-indent";
      stringArray0[1] = "x\": dh9L]y)*";
      stringArray0[2] = "";
      stringArray0[3] = "-imTebt";
      stringArray0[4] = "-imTebt";
      stringArray0[5] = "-pndeJntSize";
      stringArray0[6] = "";
      stringArray0[7] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setIndent("TG<Rj y.oWVa.");
      assertEquals("TG<Rj y.oWVa.", outputFormat0.getIndent());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.138284360394208
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "-expandEmptyA$NxD.PwLR=Z<I#+";
      stringArray0[2] = "-expandEmptyA$NxD.PwLR=Z<I#+";
      outputFormat0.parseOptions(stringArray0, 1);
      int int0 = outputFormat0.parseOptions(stringArray0, 3);
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat0.setOmitEncoding(true);
      outputFormat1.setEncoding((String) null);
      outputFormat0.setSuppressDeclaration(true);
      String[] stringArray0 = new String[7];
      stringArray0[1] = "bwdUq<AQX1>";
      stringArray0[2] = "Jxf?w#/'-7E";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "bwdUq<AQX1>";
      stringArray0[6] = "bwdUq<AQX1>";
      outputFormat0.setOmitEncoding(false);
      assertFalse(outputFormat0.isOmitEncoding());
      
      outputFormat1.setOmitEncoding(true);
      assertTrue(outputFormat1.isOmitEncoding());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-expandEmpty";
      outputFormat0.setLineSeparator("`+u[b[w");
      outputFormat0.setNewLineAfterNTags((-898));
      outputFormat0.setNewLineAfterNTags(33);
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals("`+u[b[w", outputFormat0.getLineSeparator());
      assertEquals(33, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.124771615329544
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("qh+DEU^=;");
      outputFormat0.setNewlines(false);
      outputFormat0.setIndent(false);
      outputFormat0.setTrimText(false);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setPadText(true);
      outputFormat0.setOmitEncoding(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "qh+DEU^=;";
      stringArray0[1] = "qh+DEU^=;";
      stringArray0[2] = "qh+DEU^=;";
      stringArray0[3] = "qh+DEU^=;";
      stringArray0[4] = "qh+DEU^=;";
      stringArray0[5] = "qh+DEU^=;";
      stringArray0[6] = "qh+DEU^=;";
      stringArray0[7] = "";
      outputFormat0.parseOptions(stringArray0, 2609);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.isXHTML();
      outputFormat0.isXHTML();
      outputFormat0.setNewLineAfterNTags((-10));
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setTrimText(false);
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.isNewlines();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0e>&7NWw)H#`I*J%";
      stringArray0[1] = "s-!?_";
      stringArray0[2] = "0e>&7NWw)H#`I*J%";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-2526));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2526
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      boolean boolean0 = outputFormat0.isNewlines();
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9828215546090028
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-padText");
      assertFalse(outputFormat0.isPadText());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-padText";
      stringArray0[1] = "-padText";
      stringArray0[2] = "-padText";
      stringArray0[3] = "-padText";
      stringArray0[4] = "-padText";
      stringArray0[5] = "-padText";
      stringArray0[6] = "-padText";
      stringArray0[7] = "-padText";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isPadText());
      assertEquals(8, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.547259234050069
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setNewLineAfterNTags((-1779));
      outputFormat1.setNewLineAfterNTags(0);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setPadText(true);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.setTrimText(true);
      outputFormat0.isOmitEncoding();
      outputFormat1.setLineSeparator("D+O&");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "sk&9H*64O.WL)!fDcc";
      stringArray0[1] = "D+O&";
      stringArray0[2] = "D+O&";
      stringArray0[3] = "D+O&";
      stringArray0[4] = "D+O&";
      outputFormat0.setIndentSize(0);
      stringArray0[5] = "D+O&";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat1.setIndentSize(0);
      outputFormat1.setOmitEncoding(true);
      outputFormat1.setIndent(true);
      outputFormat1.setNewLineAfterNTags((-181));
      outputFormat1.setOmitEncoding(true);
      outputFormat0.getIndent();
      assertTrue(outputFormat0.isPadText());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.setOmitEncoding(false);
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertFalse(boolean0);
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("", outputFormat0.getIndent());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("UTF-8", false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setPadText(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setLineSeparator("VGv");
      outputFormat0.setTrimText(true);
      outputFormat0.isOmitEncoding();
      outputFormat0.setEncoding(")");
      outputFormat0.setLineSeparator((String) null);
      String[] stringArray0 = new String[0];
      outputFormat0.setOmitEncoding(false);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("UTF-8", false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setPadText(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setLineSeparator("VGv");
      outputFormat0.setTrimText(true);
      outputFormat0.isOmitEncoding();
      assertEquals("VGv", outputFormat0.getLineSeparator());
      
      outputFormat0.setLineSeparator((String) null);
      String[] stringArray0 = new String[0];
      outputFormat0.setOmitEncoding(false);
      assertEquals("UTF-8", outputFormat0.getIndent());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.046743496500208
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setLineSeparator("");
      outputFormat0.setEncoding("");
      outputFormat0.getIndent();
      outputFormat0.setIndent((String) null);
      assertFalse(outputFormat0.isNewlines());
      
      outputFormat0.setNewlines(true);
      String[] stringArray0 = new String[1];
      outputFormat0.setIndent("(`6/@z");
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      stringArray0[0] = "";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat1.setEncoding("");
      outputFormat0.setIndentSize(1311);
      outputFormat1.setIndent(true);
      outputFormat2.getLineSeparator();
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      outputFormat0.setIndent("Fe");
      assertTrue(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.118875319226367
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setLineSeparator("");
      outputFormat0.setEncoding("");
      outputFormat0.getIndent();
      outputFormat0.setIndent((String) null);
      assertFalse(outputFormat0.isNewlines());
      
      outputFormat0.setNewlines(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      String[] stringArray0 = new String[1];
      outputFormat0.setIndent("(`6/@z");
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.setLineSeparator((String) null);
      stringArray0[0] = "";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat1.setEncoding("");
      outputFormat0.setIndentSize(1311);
      outputFormat1.setIndent(true);
      outputFormat2.getLineSeparator();
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      outputFormat0.setIndent("Fe");
      assertEquals("", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6711893730418441
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Sh~*");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Sh~*";
      stringArray0[1] = "Sh~*";
      stringArray0[2] = "Sh~*";
      stringArray0[3] = "Sh~*";
      stringArray0[4] = "Sh~*";
      stringArray0[5] = "Sh~*";
      stringArray0[6] = "Sh~*";
      stringArray0[7] = "Sh~*";
      stringArray0[8] = "Sh~*";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("Sh~*", outputFormat0.getIndent());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, int0);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6711893730418441
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "c9 j_7Uz-W";
      stringArray0[1] = "ywi:5Xt&(j`5Yt#V";
      stringArray0[2] = "-xhtmlUTF-8";
      stringArray0[3] = "";
      stringArray0[4] = "2tVd`1ug@%gth";
      stringArray0[5] = "c9 j_7Uz-W";
      stringArray0[6] = "ho@$Bacm.";
      stringArray0[7] = "-xhtmlUTF-8";
      stringArray0[8] = "`m+uk0:C$s7";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals(1, int0);
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7kI)>xbm{$";
      stringArray0[1] = "P[qpaJutt]";
      stringArray0[2] = "jo?CkwwS0h[";
      stringArray0[3] = "zRL XPGiXDcox{ONQh";
      stringArray0[4] = "q;G8Rxl+wp!cuyE[1p";
      stringArray0[5] = "it!owqo";
      stringArray0[6] = "";
      stringArray0[7] = "i?q5/wlhz+=]`HwZkg";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-2161));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2161
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setEncoding("9\"#^BE[<u,@.9*");
      assertEquals("9\"#^BE[<u,@.9*", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("c<wwLC'/iBeyTyP1#&H", false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "wXs^b|f=r";
      stringArray0[1] = "c<wwLC'/iBeyTyP1#&H";
      stringArray0[2] = "c<wwLC'/iBeyTyP1#&H";
      stringArray0[3] = "c<wwLC'/iBeyTyP1#&H";
      stringArray0[4] = "c<wwLC'/iBeyTyP1#&H";
      stringArray0[5] = "c<wwLC'/iBeyTyP1#&H";
      stringArray0[6] = "c<wwLC'/iBeyTyP1#&H";
      stringArray0[7] = "-suppressDeclaraAion";
      stringArray0[8] = "c<wwLC'/iBeyTyP1#&H";
      int int0 = outputFormat0.parseOptions(stringArray0, 205);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("c<wwLC'/iBeyTyP1#&H", outputFormat0.getIndent());
      assertFalse(outputFormat0.isNewlines());
      assertEquals(205, int0);
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-newlines", true, "-newlines");
      assertEquals("-newlines", outputFormat0.getIndent());
      
      outputFormat0.setIndentSize(2);
      assertFalse(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5231918705451206
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterNTags((-1779));
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setIndent(true);
      outputFormat0.setPadText(false);
      outputFormat0.setSuppressDeclaration(true);
      String[] stringArray0 = new String[9];
      stringArray0[5] = "vV=Uq5b/(%";
      stringArray0[1] = "-expandEmptysk&9H*64.WL)!fDcc";
      stringArray0[2] = "org.dom4j.io.OutputFormat";
      stringArray0[4] = "UTF-8";
      stringArray0[5] = "-omitEncoding";
      stringArray0[6] = "=qd,8):Qy=7GwNDl;%";
      int int0 = (-1936849554);
      outputFormat0.setNewLineAfterNTags((-1936849554));
      outputFormat0.isXHTML();
      outputFormat0.setIndent(false);
      boolean boolean0 = true;
      outputFormat0.setPadText(true);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1936849554));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1936849554
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.4584737365739455
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setLineSeparator((String) null);
      OutputFormat.createPrettyPrint();
      outputFormat0.setXHTML(false);
      outputFormat0.setExpandEmptyElements(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`;TwFf]XeqsAH2t";
      stringArray0[2] = null;
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.isPadText();
      outputFormat0.setPadText(false);
      outputFormat0.isXHTML();
      outputFormat0.setSuppressDeclaration(false);
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.501516696960544
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setTrimText(true);
      outputFormat0.setNewlines(true);
      outputFormat0.isTrimText();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('s');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (s)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expan^Empty-suppressDeclaraAion");
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setAttributeQuoteCharacter('\"');
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("-expan^Empty-suppressDeclaraAion", outputFormat0.getIndent());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-padText", true, "Invalid attribute quote character (");
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("-padText", outputFormat0.getIndent());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertEquals("Invalid attribute quote character (", outputFormat0.getEncoding());
      assertEquals('\"', char0);
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertTrue(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-expandEmptyywi:5Xt&(j`5Yt#V";
      stringArray0[1] = "&Z*\"LMI7xfw|lvL}A{Z";
      stringArray0[2] = "-expandEmpty";
      stringArray0[3] = "wA<~}`+N";
      stringArray0[4] = "QOR%Tlo:V@6p";
      stringArray0[5] = "w0re_&7xb8lkDPPtb%";
      stringArray0[6] = "";
      stringArray0[8] = "";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, int0);
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("\n");
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setEncoding("hT0Nqf1/yL+62");
      outputFormat0.setEncoding("");
      outputFormat0.isXHTML();
      outputFormat0.setTrimText(true);
      assertEquals("", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.setEncoding(".g)#r{Apw=7gE");
      outputFormat0.setOmitEncoding(true);
      boolean boolean0 = outputFormat0.isPadText();
      assertEquals(".g)#r{Apw=7gE", outputFormat0.getEncoding());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "S8!3hN:O8byYS/]0StVM";
      OutputFormat outputFormat0 = new OutputFormat("S8!3hN:O8byYS/]0StVM");
      outputFormat0.setIndent("S8!3hN:O8byYS/]0StVM");
      outputFormat0.setIndent("S8!3hN:O8byYS/]0StVM");
      outputFormat0.setTrimText(false);
      outputFormat0.isTrimText();
      char char0 = 'g';
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('g');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (g)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.4985837518868388
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("L;c[YU:7OQ-");
      outputFormat0.setIndent(false);
      outputFormat0.setIndent("VHu0c,moVf#6rMesXL");
      outputFormat0.setIndent("");
      outputFormat0.setIndent(true);
      outputFormat0.setIndent(true);
      outputFormat0.setIndent("");
      outputFormat0.setIndent("-xhtml");
      String[] stringArray0 = new String[8];
      outputFormat0.setIndent(true);
      stringArray0[0] = "-xhtml";
      stringArray0[1] = "-xhtml";
      outputFormat0.setIndent("G<W9");
      outputFormat0.setIndent("EM{B0>3'Sf:\nV8~#");
      outputFormat0.setIndent("EM{B0>3'Sf:\nV8~#");
      outputFormat0.setIndent(":YnO)T8V,foU@Vmj");
      outputFormat0.setIndent("L;c[YU:7OQ-");
      outputFormat0.setIndent("1w.Awf~j!0Ju]8P?kl/");
      outputFormat0.setIndent("-trimText");
      outputFormat0.setIndent("-omitEncoding");
      outputFormat0.setIndent("-trimText");
      assertEquals("-trimText", outputFormat0.getIndent());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.isExpandEmptyElements();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-encoding";
      outputFormat0.setEncoding("-encoding");
      stringArray0[1] = "";
      stringArray0[2] = " G8NF}C)}8bML;wt&";
      stringArray0[3] = "-omitEncoding";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "q[";
      stringArray0[7] = "@JAM5r]/?SU54";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.950619021990777
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("|57Bm", false);
      outputFormat0.setTrimText(false);
      outputFormat0.setPadText(false);
      outputFormat0.isTrimText();
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("|57Bm", outputFormat0.getIndent());
      assertFalse(boolean0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setSuppressDeclaration(false);
      assertFalse(outputFormat1.isSuppressDeclaration());
      
      OutputFormat.createCompactFormat();
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat2.isNewlines());
      assertTrue(outputFormat2.isTrimText());
      assertEquals("  ", outputFormat2.getIndent());
      assertTrue(outputFormat2.isPadText());
      
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat3.isNewlines());
      assertTrue(outputFormat3.isNewLineAfterDeclaration());
      assertFalse(outputFormat3.isExpandEmptyElements());
      assertTrue(outputFormat3.isTrimText());
      assertEquals(0, outputFormat3.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat3.getEncoding());
      assertFalse(outputFormat3.isPadText());
      assertEquals('\"', outputFormat3.getAttributeQuoteCharacter());
      assertFalse(outputFormat3.isOmitEncoding());
      assertEquals("\n", outputFormat3.getLineSeparator());
      assertFalse(outputFormat3.isXHTML());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.929538535746656
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "c9 j_7Uz-W";
      stringArray0[1] = "ywi:5Xt&(j`5Yt#V";
      stringArray0[2] = "-xhtmlUTF-8";
      stringArray0[3] = "";
      stringArray0[4] = "2tVd`1ug@%gth";
      stringArray0[5] = "-encoding";
      stringArray0[6] = "ho@$Bacm.";
      stringArray0[7] = "-xhtmlUTF-8";
      int int0 = 11;
      outputFormat0.parseOptions(stringArray0, 11);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("c<wwLC'/iBeyTyP1#&H", false);
      outputFormat0.setExpandEmptyElements(false);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("c<wwLC'/iBeyTyP1#&H", outputFormat0.getIndent());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.0284083968442363
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent((String) null);
      outputFormat0.setNewLineAfterNTags(1383);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setNewLineAfterDeclaration(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setNewLineAfterNTags(1);
      outputFormat1.setNewLineAfterDeclaration(false);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat1.getEncoding();
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[4] = "UTF-8";
      stringArray0[3] = "UTF-8";
      stringArray0[4] = "UTF-8";
      stringArray0[5] = "UTF-8";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals(1383, int0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.3547427156609484
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent((String) null);
      outputFormat0.setIndent(false);
      outputFormat0.setIndent("VHu0c,moVf#6rMesXL");
      outputFormat0.setIndent("");
      outputFormat0.setIndent(false);
      outputFormat0.setIndent(false);
      outputFormat0.setIndent("");
      outputFormat0.setIndent("-xhtml");
      String[] stringArray0 = new String[8];
      outputFormat0.setIndent(false);
      stringArray0[0] = "-xhtml";
      stringArray0[1] = "-xhtml";
      outputFormat0.setIndent("G<W9");
      outputFormat0.setIndent("EM{B0>3'Sf:\nV8~#");
      outputFormat0.setIndent("EM{B0>3'Sf:\nV8~#");
      outputFormat0.setIndent(":YnO)T8V,foU@Vmj");
      outputFormat0.setIndent("L;c[YU:7OQ-");
      outputFormat0.setIndent("1w.Awf~j!0Ju]8P?kl/");
      outputFormat0.setIndent("-trimText");
      outputFormat0.setIndent("-omitEncoding");
      outputFormat0.setIndent("-trimText");
      assertEquals("-trimText", outputFormat0.getIndent());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.33998687964136
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setLineSeparator("+");
      OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterNTags((-2303));
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent("Phi");
      outputFormat0.setXHTML(false);
      outputFormat1.setSuppressDeclaration(false);
      outputFormat0.setIndent("+");
      outputFormat0.setIndent(true);
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      OutputFormat.createCompactFormat();
      outputFormat2.setNewLineAfterNTags(0);
      outputFormat2.setNewLineAfterDeclaration(true);
      outputFormat1.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent(true);
      outputFormat2.isSuppressDeclaration();
      outputFormat1.getIndent();
      outputFormat0.isNewLineAfterDeclaration();
      assertEquals((-2303), outputFormat0.getNewLineAfterNTags());
      
      boolean boolean0 = outputFormat1.isXHTML();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("0", false, "Invalid attribute quote character (");
      String string0 = outputFormat0.getEncoding();
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("Invalid attribute quote character (", string0);
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("0", outputFormat0.getIndent());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ho@$Bacm.";
      stringArray0[1] = "*ODFOIP(6w:RR";
      stringArray0[2] = "ho@$Bacm.";
      stringArray0[3] = "C'1{BK'";
      stringArray0[4] = "*ODFOIP(6w:RR";
      stringArray0[5] = "2tVd`1ug@%gth";
      OutputFormat outputFormat0 = new OutputFormat("#<;d!D1*BDjt9", true, "r'?uY(");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('S');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (S)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }
}
