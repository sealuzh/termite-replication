/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 14:07:48 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Enumeration;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.Document;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanElement;
import org.dom4j.dom.DOMDocument;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultAttribute;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultElement;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.UserDataAttribute;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.Parser;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.38995317957443
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream(63);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.endDocument();
      SAXReader sAXReader1 = new SAXReader();
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      sAXReader1.getXMLReader();
      InputStream inputStream0 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.4061086918934302
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockException mockException0 = new MockException();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endDocument();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.getXMLReader();
      XMLFilter xMLFilter0 = sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter(xMLFilter0);
      String string0 = "//tmp/tmp/Dqo/0@I0#Tf6nr@@rf0/tmp/org.dom4j.Namespace0'd~3k&j\"<";
      StringReader stringReader0 = new StringReader("//tmp/tmp/Dqo/0@I0#Tf6nr@@rf0/tmp/org.dom4j.Namespace0'd~3k&j\"<");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader1.read((Reader) stringReader0, "2*:$");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document 2*:$ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.349742765197841
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl1.setColumnNumber(9);
      Locator2Impl locator2Impl2 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      locatorImpl0.setColumnNumber(0);
      Locator2Impl locator2Impl4 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl4);
      locator2Impl3.getPublicId();
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl7 = new Locator2Impl(locator2Impl2);
      LocatorImpl locatorImpl3 = new LocatorImpl(locatorImpl2);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, bufferedInputStream0);
      File file0 = MockFile.createTempFile("UxFM", "ex0$}<I4tVmby#(");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("ex0$}<I4tVmby#(");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"EX0$}<I4TVMBY#(\". Nested exception: Invalid encoding name \"EX0$}<I4TVMBY#(\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.257437207088266
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      char[] charArray0 = new char[3];
      xMLFilterImpl2.characters(charArray0, 3219, (-2762));
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      xMLFilterImpl0.setParent(xMLFilterImpl2);
      locatorImpl0.setColumnNumber(3219);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      locator2Impl2.getPublicId();
      Locator2Impl locator2Impl3 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl1);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl3);
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl2);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl((XMLReader) null);
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl3);
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl();
      xMLFilterImpl6.getContentHandler();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl5);
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.242729277843666
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)34;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sAXReader0.getXMLReader();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.startDTD("Ow", "Ow", "Ow");
      sAXReader0.setEntityResolver(defaultHandler2_0);
      defaultHandler2_0.resolveEntity("Ow", "Ow", "#Mw0(6#JT", "Ow");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createDocument();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      BeanElement beanElement0 = new BeanElement("//tmp/ mapped to URI \"0M|C_clT&Ea[E", namespace0, "//tmp/ mapped to URI \"0M|C_clT&Ea[E");
      namespace0.getUniquePath();
      BeanElement beanElement1 = new BeanElement((String) null, namespace0, namespace0);
      beanElement1.getNamespaceForPrefix("<1<lYYGx=");
      beanElement1.setName("Cl=ss [");
      beanElement1.hasContent();
      defaultDocumentFactory0.setXPathNamespaceURIs((Map<String, String>) null);
      QName.get("[.");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.contains(namespace0);
      namespaceStack0.getQName("#Tf6nr@@rf", "~e;$yxr", ".:y7");
      QName.get("#Tf6nr@@rf", namespace0, "[.");
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setEncoding("//tmp/~e;$yxr0org.jaxen.expr.DefaultPathExpr");
      try { 
        sAXReader0.read((InputStream) null, "[.");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: [. Nested exception: no protocol: [.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      InputSource inputSource0 = new InputSource();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl0);
      xMLFilterImpl0.startElement("}L}b+7/P1iC", "http://xml.org/sax/features/validatio=", "}L}b+7/P1iC", attributesImpl0);
      sAXReader0.setEncoding("E7O;4gFZ8kLoY");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-65);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("[(DefaultFilterExpr): expr: ");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      char[] charArray0 = new char[8];
      xMLFilterImpl0.setParent(xMLFilterImpl2);
      charArray0[0] = 'B';
      charArray0[1] = 'N';
      charArray0[2] = '1';
      charArray0[4] = 'p';
      charArray0[5] = '`';
      charArray0[6] = 'U';
      charArray0[7] = '1';
      xMLFilterImpl0.characters(charArray0, 58, 77);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/ mapped to URI \"0M=C_clT&Ea[E");
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl1);
      InputSource inputSource0 = new InputSource();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl2);
      xMLFilterImpl0.getContentHandler();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl4);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature("twL", false);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getErrorHandler();
      Parser parser0 = null;
      String string0 = "http://xml.org/sax/features/string-interning";
      try { 
        sAXReader0.setFeature("http://xml.org/sax/features/string-interning", false);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // False state for feature 'http://xml.org/sax/features/string-interning' is not supported.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockURL.getFtpExample();
      SAXReader sAXReader0 = new SAXReader();
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.604931680188979
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      SAXReader sAXReader1 = new SAXReader();
      sAXReader1.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      sAXReader0.setEncoding("[_0/+$rLHEP1o5/6c2");
      sAXReader0.setIgnoreComments(false);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHahMap0>U{a&hSLOgjZ]");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHahMap0>U{a&hSLOgjZ]", "");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(xMLReader0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0, "(mBnB!+");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3594545031847076
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream(63);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      xMLFilterImpl0.endDocument();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      try { 
        sAXReader0.read("6");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/6 (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/6 (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.420295386033961
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockException mockException0 = new MockException();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockException0.getSuppressed();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.getStackTrace();
      Throwable throwable0 = mockException0.initCause(mockThrowable0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockException0.getSuppressed();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockThrowable mockThrowable1 = new MockThrowable("//tmp/tmp/org.jaxen.expr.DefaultPathExpr0/tmp/ mapped to URI \"0M=C_clT&Ea[E0An");
      throwable0.getStackTrace();
      throwable0.getStackTrace();
      MockThrowable mockThrowable2 = new MockThrowable("org.jaxen.expr.DefaultXPathExpr");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createAttribute((Element) null, (QName) null, "F");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory2);
      HandlerBase handlerBase0 = new HandlerBase();
      sAXReader0.setErrorHandler(handlerBase0);
      InputSource inputSource0 = new InputSource();
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      char[] charArray0 = new char[3];
      xMLFilterImpl0.characters(charArray0, 963, 1341);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      xMLFilterImpl0.setParent((XMLReader) null);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl1.setColumnNumber(9);
      Locator2Impl locator2Impl2 = new Locator2Impl(locatorImpl0);
      locator2Impl2.getPublicId();
      Locator2Impl locator2Impl3 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl4.endPrefixMapping((String) null);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl((XMLReader) null);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl();
      locator2Impl3.setSystemId((String) null);
      xMLFilterImpl2.getContentHandler();
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl3);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      SAXReader sAXReader1 = new SAXReader();
      // Undeclared exception!
      try { 
        sAXReader1.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl1.setColumnNumber(9);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      locatorImpl0.setColumnNumber(0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.setParent((XMLReader) null);
      locator2Impl1.setColumnNumber(0);
      LocatorImpl locatorImpl3 = new LocatorImpl(locatorImpl1);
      Locator2Impl locator2Impl3 = new Locator2Impl(locatorImpl3);
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl1);
      locator2Impl4.setColumnNumber(3782);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl1);
      locator2Impl4.getPublicId();
      Locator2Impl locator2Impl6 = new Locator2Impl(locatorImpl0);
      locator2Impl3.getPublicId();
      LocatorImpl locatorImpl4 = new LocatorImpl(locatorImpl2);
      Locator2Impl locator2Impl7 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl5 = new LocatorImpl(locator2Impl6);
      locator2Impl5.getPublicId();
      LocatorImpl locatorImpl6 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl8 = new Locator2Impl(locatorImpl3);
      LocatorImpl locatorImpl7 = new LocatorImpl(locator2Impl8);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockException mockException0 = new MockException();
      MockException mockException1 = new MockException();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockException0.getSuppressed();
      mockException0.printStackTrace();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";X87!ZJ{W");
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.printStackTrace();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockThrowable mockThrowable1 = new MockThrowable();
      MockThrowable mockThrowable2 = new MockThrowable();
      mockException0.getSuppressed();
      SAXParseException sAXParseException0 = new SAXParseException("k COv+1h;x7hYuDFe", "3Gqk#4K $T", (String) null, (-3336), 1741, mockException0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("k COv+1h;x7hYuDFe");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q<nLB}4'kvP$aG,Y^");
      sAXReader_SAXEntityResolver0.resolveEntity("`~`tR", "");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[2] = (byte) (-64);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null, true);
      SAXContentHandler sAXContentHandler0 = sAXReader1.createContentHandler((XMLReader) null);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, sAXContentHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl((XMLReader) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      xMLFilterImpl0.characters(charArray0, 47, 1341);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      xMLFilterImpl2.setParent((XMLReader) null);
      locator2Impl0.setColumnNumber(319);
      locator2Impl0.getPublicId();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl2);
      xMLFilterImpl2.endPrefixMapping((String) null);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl();
      locatorImpl0.setSystemId((String) null);
      xMLFilterImpl0.getContentHandler();
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl4);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl7);
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setErrorHandler(xMLFilterImpl8);
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: null
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.253253709276892
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDocumentFactory.getInstance();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      InputSource inputSource0 = new InputSource();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      inputSource0.setByteStream(sequenceInputStream1);
      inputSource0.setSystemId("VkG09UuGB.");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getEncoding();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream(63);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Xj:ha@9q");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/org.jaxen.expr.iter.IterableNamespaceAxis0C h");
      sAXReader_SAXEntityResolver0.resolveEntity("", "n_f|RiM");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-37);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("n_f|RiM", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class n_f|RiM not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl1.setColumnNumber(9);
      Locator2Impl locator2Impl2 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      locator2Impl0.setColumnNumber(7840);
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.setParent((XMLReader) null);
      locatorImpl0.setColumnNumber(0);
      Locator2Impl locator2Impl4 = new Locator2Impl(locatorImpl0);
      locatorImpl0.setColumnNumber(3782);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl4);
      locator2Impl3.getPublicId();
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl0);
      locator2Impl4.getPublicId();
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl7 = new Locator2Impl(locator2Impl2);
      LocatorImpl locatorImpl3 = new LocatorImpl(locatorImpl2);
      locator2Impl3.getPublicId();
      LocatorImpl locatorImpl4 = new LocatorImpl(locator2Impl4);
      Locator2Impl locator2Impl8 = new Locator2Impl(locator2Impl5);
      LocatorImpl locatorImpl5 = new LocatorImpl(locator2Impl5);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader((String) null);
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" : ");
      SAXReader sAXReader0 = new SAXReader();
      StackTraceElement stackTraceElement0 = new StackTraceElement("//tmp/Dqo/0@I0#Tf6nr@@rf", " : ", "//tmp/Dqo/0@I0#Tf6nr@@rf", 58);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockException mockException0 = new MockException("/[(HZsY");
      mockException0.getSuppressed();
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable();
      mockThrowable1.getStackTrace();
      mockThrowable0.getStackTrace();
      MockThrowable mockThrowable2 = new MockThrowable("http://xml.org/sax/features/validation");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultAttribute defaultAttribute0 = new DefaultAttribute(" : ", (String) null);
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      InputSource inputSource0 = new InputSource();
      try { 
        sAXReader1.read("/[(HZsY");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: /[(HZsY Nested exception: no protocol: /[(HZsY
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      Namespace namespace0 = new Namespace("//tmp/ mapped to URI \"0M=C_clT&Ea[E", "[.");
      BeanElement beanElement0 = new BeanElement("//tmp/ mapped to URI \"0M=C_clT&Ea[E", namespace0, "//tmp/ mapped to URI \"0M=C_clT&Ea[E");
      BeanElement beanElement1 = new BeanElement((String) null, namespace0, namespace0);
      beanElement1.setName("Class [");
      QName qName0 = new QName((String) null);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.push(namespace0);
      QName qName1 = namespaceStack0.getQName("#T6nr@@rf", "~e;$yxr", ".:y7");
      documentFactory0.createAttribute((Element) beanElement0, qName1, "/");
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      MockException mockException0 = new MockException();
      MockException mockException1 = new MockException("~e;$yxr", mockException0);
      SAXParseException sAXParseException0 = new SAXParseException("org.dom4j.bean.BeanDocumentFactory", locatorImpl0, mockException1);
      SAXParseException sAXParseException1 = new SAXParseException("//tmp/ mapped to URI \"0M=C_clT&Ea[E", "x):VE**e?/-#lyrLR", "//tmp/tmp/tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0>S{a&hSLOgjZ]0org.jaxen.expr.DefaultPathExpr", 40, 40, sAXParseException0);
      try { 
        sAXReader0.setProperty("http://xml.org/sax/properties/lexical-handler", sAXParseException1);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // The value specified for property 'http://xml.org/sax/properties/lexical-handler' cannot be casted to org.xml.sax.ext.LexicalHandler.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.275805525146526
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createDocument();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      DOMDocument dOMDocument0 = new DOMDocument();
      InputSource inputSource0 = new InputSource();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      inputSource0.setSystemId("");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl0.setColumnNumber(9);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      locator2Impl1.getColumnNumber();
      LocatorImpl locatorImpl1 = new LocatorImpl();
      locator2Impl2.setColumnNumber((-69));
      locator2Impl1.getColumnNumber();
      Locator2Impl locator2Impl3 = new Locator2Impl(locatorImpl1);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl2 = new LocatorImpl();
      locatorImpl2.setColumnNumber((-3));
      locator2Impl0.setColumnNumber(50);
      Locator2Impl locator2Impl4 = new Locator2Impl();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl0);
      locator2Impl3.getPublicId();
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl5);
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl3);
      Locator2Impl locator2Impl7 = new Locator2Impl(locator2Impl2);
      locator2Impl5.setPublicId("//tmp/ex0$}<I4tVmby#(0content");
      LocatorImpl locatorImpl4 = new LocatorImpl();
      Locator2Impl locator2Impl8 = new Locator2Impl();
      locator2Impl8.getPublicId();
      locator2Impl0.getXMLVersion();
      LocatorImpl locatorImpl5 = new LocatorImpl(locator2Impl8);
      Locator2Impl locator2Impl9 = new Locator2Impl(locatorImpl5);
      LocatorImpl locatorImpl6 = new LocatorImpl(locator2Impl6);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader((String) null);
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, locatorImpl2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      QName qName0 = new QName("org.jaxen.XPathSyntaxException");
      AttributesImpl attributesImpl1 = new AttributesImpl();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      AttributesImpl attributesImpl2 = new AttributesImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl(attributesImpl1);
      AttributesImpl attributesImpl3 = new AttributesImpl(attributes2Impl0);
      AttributesImpl attributesImpl4 = new AttributesImpl(attributesImpl0);
      attributesImpl3.addAttribute("+S|<P^%1\"-@j!.P", "h#Ql_jK$3", "+S|<P^%1\"-@j!.P", "+S|<P^%1\"-@j!.P", "http://xml.org/sax/features/validation");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(boolean0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      locator2Impl0.setColumnNumber(3219);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      locator2Impl1.getPublicId();
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader();
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8239329813080194
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endDocument();
      sAXReader0.setStripWhitespaceText(true);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.installXMLFilter(xMLReader0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      MockThrowable mockThrowable0 = new MockThrowable("VB2S");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockThrowable mockThrowable1 = new MockThrowable();
      MockThrowable mockThrowable2 = new MockThrowable();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("VB2S");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[(DefaultEqualsExpr): ");
      sAXReader_SAXEntityResolver0.resolveEntity("q<nLB}4'kvP$aG,Y^", "' 3(me1q^)z/;)'LD");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-37);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sAXReader0.getDocumentFactory();
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("'", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class ' not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("This should never happen. Caught: ");
      sAXReader_SAXEntityResolver0.uriPrefix = "//tmp/tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0Error on line ";
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "-i8ERL($_.56H|&F7");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.installXMLFilter((XMLReader) null);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      charArray0[1] = '`';
      charArray0[2] = 'k';
      charArray0[3] = '[';
      charArray0[4] = 'x';
      xMLReaderAdapter0.ignorableWhitespace(charArray0, (-685), 58);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl(attributesImpl0);
      xMLFilterImpl0.startElement("//tmp/&HS1$*yKp;IVP&F!l0FE@", "m5!+", "//tmp/) ]0[.", attributes2Impl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      char[] charArray0 = new char[3];
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl3.characters(charArray0, (-455), 1341);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      xMLFilterImpl3.setParent(xMLFilterImpl2);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      locatorImpl0.setColumnNumber(1019);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      locator2Impl2.getPublicId();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl1);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl1);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(parserAdapter0);
      xMLFilterImpl3.endPrefixMapping((String) null);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl((XMLReader) null);
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl();
      locatorImpl1.setSystemId("6,-^aUv7kZwLI");
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl(xMLFilterImpl7);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8885995049191862
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockException mockException0 = new MockException();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";X87!ZJ{W");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";X87!ZJ{W");
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockThrowable mockThrowable1 = new MockThrowable();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sAXReader_SAXEntityResolver0.resolveEntity("", "Exception cannot be its own cause");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q<nLB}4'kvP$aG,Y^");
      sAXReader_SAXEntityResolver0.resolveEntity("`~`tR", "");
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte) (-37);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.getDocumentFactory();
      byteArray1[1] = (byte) (-64);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("`~`tR", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class `~`tR not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl1.setColumnNumber(9);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      locator2Impl0.setColumnNumber(7840);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.setParent((XMLReader) null);
      locatorImpl0.setColumnNumber(0);
      Locator2Impl locator2Impl3 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl3);
      locator2Impl2.getPublicId();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl0);
      locator2Impl2.getPublicId();
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl3);
      LocatorImpl locatorImpl4 = new LocatorImpl(locator2Impl4);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      MockFile mockFile0 = new MockFile("[$KP'g<m-U1q}");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.4401405002515815
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createDocument();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      DOMDocument dOMDocument0 = new DOMDocument();
      DefaultDocumentFactory.getInstance();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DOMDocument dOMDocument1 = new DOMDocument();
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = 'N';
      charArray0[2] = '1';
      charArray0[3] = '%';
      charArray0[4] = 'p';
      charArray0[5] = '`';
      charArray0[6] = 'U';
      charArray0[7] = '=';
      xMLFilterImpl0.characters(charArray0, 3257, 77);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.getLineNumber();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      locatorImpl0.setColumnNumber(35);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      locator2Impl1.setColumnNumber(137);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl2);
      xMLFilterImpl0.getContentHandler();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLReader();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertNotNull(xMLReader0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3660231847196305
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl((XMLReader) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      xMLFilterImpl1.characters(charArray0, 14, 14);
      xMLFilterImpl0.characters(charArray0, 14, 1);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl();
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      xMLFilterImpl1.setErrorHandler(xMLFilterImpl0);
      xMLFilterImpl1.characters(charArray0, 7, 1798);
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl1);
      locator2Impl1.setColumnNumber(14);
      locator2Impl0.getPublicId();
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl();
      xMLFilterImpl5.getContentHandler();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl2);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockException mockException0 = new MockException();
      MockException mockException1 = new MockException();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      mockException0.addSuppressed(mockException1);
      mockException0.getSuppressed();
      mockException0.printStackTrace();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M;X87!kJG;");
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      mockThrowable0.addSuppressed(mockException1);
      mockThrowable0.getStackTrace();
      mockThrowable0.printStackTrace();
      MockThrowable mockThrowable1 = new MockThrowable((String) null);
      mockException0.getMessage();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " COv+1h;x7hYDFe");
      MockThrowable mockThrowable2 = new MockThrowable();
      mockException0.printStackTrace();
      MockThrowable mockThrowable3 = new MockThrowable();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      mockException0.getSuppressed();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" COv+1h;x7hYDFe");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sAXReader_SAXEntityResolver0.resolveEntity("`~`tR", "M;X87!kJG;");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      sAXReader0.getEntityResolver();
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("\"H8&?u6Rth", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class \"H8&?u6Rth not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      InputSource inputSource0 = new InputSource();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      char[] charArray0 = new char[5];
      charArray0[0] = 'O';
      charArray0[1] = '8';
      charArray0[2] = '7';
      charArray0[3] = 'e';
      charArray0[4] = '5';
      xMLFilterImpl0.ignorableWhitespace(charArray0, 710, (-1322));
      attributes2Impl0.getType("B9~e#1h");
      xMLFilterImpl0.startElement("}L}b+7/P1iC", "http://xml.org/sax/features/validation", "}L}b+7/P1iC", attributes2Impl0);
      sAXReader0.setEncoding("E7O;4gFZ8kLoY");
      try { 
        sAXReader0.read("B9~e#1h");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/B9~e (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/B9~e (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2251550429852736
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl((XMLReader) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      xMLFilterImpl0.characters(charArray0, 47, 1341);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      xMLFilterImpl2.setParent((XMLReader) null);
      locator2Impl0.setColumnNumber(319);
      locator2Impl0.getPublicId();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl2);
      xMLFilterImpl2.endPrefixMapping((String) null);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl();
      locatorImpl0.setSystemId((String) null);
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl();
      xMLFilterImpl7.getContentHandler();
      File file0 = MockFile.createTempFile("ex0$}<I4tVmby#(", "content");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl4, true);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@ad232a2 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@ad232a2 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.504490492560509
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      DispatchHandler dispatchHandler1 = sAXReader0.getDispatchHandler();
      dispatchHandler0.addHandler("x`", dispatchHandler1);
      dispatchHandler0.removeHandler((String) null);
      sAXReader0.setDefaultHandler((ElementHandler) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader_SAXEntityResolver0.resolveEntity("?+z( g`z9;<", "]Io}f%5h45GF");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = '*';
      charArray0[2] = '7';
      parserAdapter0.characters(charArray0, 39, 39);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      try { 
        sAXReader0.configureReader(parserAdapter0, defaultHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@6f4caa70 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Namespace namespace0 = Namespace.get("gq@r''qg(Y#nF");
      BeanElement beanElement0 = new BeanElement((String) null, (Namespace) null, "//tmp/ mapped to URI \"0M=C_clT&EA[E");
      namespace0.getUniquePath();
      BeanElement beanElement1 = new BeanElement((String) null, (Namespace) null, namespace0);
      Namespace namespace1 = beanElement1.getNamespaceForPrefix((String) null);
      beanElement1.setName("Class [");
      Namespace namespace2 = Namespace.NO_NAMESPACE;
      QName qName0 = QName.get("//tmp/ mapped to URI \"0M=C_clT&EA[E");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      beanElement0.elements();
      namespaceStack0.contains(namespace0);
      beanElement1.isRootElement();
      QName qName1 = namespaceStack0.getQName("//tmp/lg*ATylhp=0org.jaxen.exp#.iter.IterableNamespaceAxis", "//tmp/ mapped to URI \"0M=C_clT&EA[E", "//tmp/ mapped to URI \"0M=C_clT&EA[E");
      namespace2.getUniquePath((Element) beanElement0);
      namespaceStack0.getAttributeQName((String) null, "+h%jlva.Z'1U l", ">\u0007KElQKl03@~Omj");
      namespaceStack0.contains(namespace2);
      namespaceStack0.addNamespace("eo!", "+h%jlva.Z'1U l");
      QName qName2 = new QName("//tmp/lg*ATylhp=0org.jaxen.exp#.iter.IterableNamespaceAxis", namespace2);
      QName.get("//tmp/ mapped to URI \"0M=C_clT&EA[E", namespace0, "//tm\"p/) (0) (");
      QName.get("//tmp/lg*ATylhp=0org.jaxen.exp#.iter.IterableNamespaceAxis", namespace1);
      BeanElement beanElement2 = new BeanElement(qName0);
      qName1.getQualifiedName();
      DefaultElement defaultElement0 = new DefaultElement("ZPaac2%0#yzw\"4", namespace2);
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.setFeature("//tmp/lg*ATylhp=0org.jaxen.exp#.iter.IterableNamespaceAxis", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '//tmp/lg*ATylhp=0org.jaxen.exp#.iter.IterableNamespaceAxis' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      InputSource inputSource0 = new InputSource();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      char[] charArray0 = new char[5];
      charArray0[0] = 'O';
      charArray0[1] = '8';
      charArray0[2] = '7';
      charArray0[3] = 'e';
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createNamespace("org.dom4j.jaxb.JAXBReader$PruningElementHandler", "&");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.pop("@dF");
      QName qName0 = QName.get("&", (Namespace) null, "}L}b+7/P1iC");
      qName0.getDocumentFactory();
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      InputSource inputSource1 = new InputSource();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      Document document0 = defaultDocumentFactory0.createDocument();
      assertFalse(document0.isReadOnly());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.removeHandler("`dmDr}lU");
      sAXReader0.addHandler("//tmp/~e;$yxr0.:~e;$yxr", (ElementHandler) null);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      assertTrue(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl((XMLReader) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      xMLFilterImpl2.characters(charArray0, 99, 58);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      xMLFilterImpl1.characters(charArray0, 248, 58);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl((XMLReader) null);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl1);
      sAXReader0.setXMLReader(xMLFilterImpl1);
      Object object0 = new Object();
      try { 
        sAXReader0.setProperty("s_N)ejN", object0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: s_N)ejN
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "<U`5~@sBvpul@``\\.'";
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      try { 
        MockURL.URL("", "", 12, "");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      documentFactory0.createDocument();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      DOMDocument dOMDocument0 = new DOMDocument();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      sAXReader0.isMergeAdjacentText();
      Document document0 = documentFactory0.createDocument();
      assertNull(document0.getXMLEncoding());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.setValidation(false);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl0);
      xMLFilterImpl1.setDocumentLocator(locator2Impl0);
      sAXReader0.createXMLReader();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl(attributesImpl0);
      AttributesImpl attributesImpl1 = new AttributesImpl(attributes2Impl0);
      assertFalse(attributesImpl1.equals((Object)attributesImpl0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.2390954562106087
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl((XMLReader) null);
      char[] charArray0 = new char[7];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      xMLFilterImpl1.characters(charArray0, 14, 14);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.setPublicId(";]");
      xMLFilterImpl1.characters(charArray0, 2402, 14);
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      locatorImpl0.setColumnNumber(32);
      locator2Impl0.getPublicId();
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl();
      xMLFilterImpl6.getContentHandler();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.read((InputStream) null, ";]");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl3.setDocumentLocator(locatorImpl1);
      sAXReader0.setStringInternEnabled(true);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      xMLFilterImpl2.endPrefixMapping("//tmp/qEN{m A5nevA4D|5Y`@0org.jaxen.expr.iter.IterableNamespaceAxis");
      String string0 = "*M\\\"Sc|~BE5'5";
      try { 
        sAXReader0.setXMLReaderClassName("*M\"Sc|~BE5'5");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class *M\"Sc|~BE5'5 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockException mockException0 = new MockException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("3Gqk#4K $T", ";X87!ZJ{W", "3Gqk#4K $T", 58);
      stackTraceElementArray0[0] = stackTraceElement0;
      mockException0.getCause();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockException0.getSuppressed();
      mockException0.printStackTrace();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";X87!ZJ{W");
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      mockThrowable0.printStackTrace();
      mockThrowable0.fillInStackTrace();
      mockThrowable0.getStackTrace();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockThrowable mockThrowable1 = new MockThrowable();
      mockException0.getCause();
      mockException0.getSuppressed();
      SAXParseException sAXParseException0 = new SAXParseException("k COv+1h;x7hYuDFe", "3Gqk#4K $T", (String) null, (-3336), 1740, mockException0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q<nLB}4'kvP$aG,Y^");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-64);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.0426322117102855
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      BeanElement beanElement0 = new BeanElement("//tmp/ mapped to URI \"0M=C_clT&Ea[E", namespace0, "//tmp/ mapped to URI \"0M=C_clT&Ea[E");
      namespace0.getUniquePath();
      BeanElement beanElement1 = new BeanElement((String) null, (Namespace) null, namespace0);
      beanElement1.getNamespaceForPrefix("//tmp/ mapped to URI \"0M=C_clT&Ea[E");
      beanElement1.setName("Class [");
      Namespace namespace1 = Namespace.NO_NAMESPACE;
      QName.get("//tmp/ mapped to URI \"0M=C_clT&Ea[E", (Namespace) null, "//tmp/ mapped to URI \"0M=C_clT&Ea[E");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      beanElement0.elements();
      namespaceStack0.contains(namespace0);
      beanElement1.isRootElement();
      namespaceStack0.getQName("#Tf6r@@rf", "//tmp/ mapped to URI \"0M=C_clT&Ea[E", ".:y7");
      namespace1.getUniquePath((Element) beanElement0);
      namespaceStack0.getAttributeQName(".:y7", ".:y7", ">\u0007KElQK>l03@~Omj");
      namespaceStack0.contains(namespace1);
      beanElement1.clone();
      Namespace namespace2 = namespaceStack0.addNamespace("%eho!", "//tmp/ mapped to URI \"0M=C_clT&Ea[E");
      QName.get("%eho!", namespace2);
      QName.get("namespace::xml", ".:y7");
      QName.get(".:y7", (Namespace) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Class [");
      sAXReader_SAXEntityResolver0.resolveEntity("#Tf6r@@rf", "H1RbqPe");
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertNotNull(xMLReader0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DOMDocument dOMDocument1 = new DOMDocument();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      defaultDocumentFactory6.createDocument();
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.createDefaultEntityResolver("GeY&l{i");
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Namespace namespace0 = Namespace.get("gq@r''qg(Y#nF");
      BeanElement beanElement0 = new BeanElement((String) null, (Namespace) null, "//tmp/ mapped to URI \"0M=C_clT&EA[E");
      namespace0.getUniquePath();
      BeanElement beanElement1 = new BeanElement((String) null, (Namespace) null, namespace0);
      beanElement1.getNamespaceForPrefix("<1<lYYGx=");
      beanElement1.setName("Class [");
      Namespace namespace1 = Namespace.NO_NAMESPACE;
      QName qName0 = QName.get("gq@r''qg(Y#nF", (Namespace) null, "//tmp/ mapped to URI \"0M=C_clT&EA[E");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      beanElement0.elements();
      namespaceStack0.contains(namespace0);
      beanElement1.isRootElement();
      QName qName1 = namespaceStack0.getQName("//tmp/lg*ATylhp=0org.jaxen.exp#.iter.IterableNamespaceAxis", "<1<lYYGx=", "<1<lYYGx=");
      namespace1.getUniquePath((Element) beanElement0);
      namespaceStack0.getAttributeQName("<1<lYYGx=", "+h%jlva.Z'1U l", ">\u0007KElQKl03@~Omj");
      namespaceStack0.contains(namespace1);
      namespaceStack0.addNamespace("eo!", "+h%jlva.Z'1U l");
      qName1.toString();
      QName qName2 = new QName("//tmp/lg*ATylhp=0org.jaxen.exp#.iter.IterableNamespaceAxis", namespace1);
      QName.get("//tmp/ mapped to URI \"0M=C_clT&EA[E", namespace0, "//tm\"p/) (0) (");
      QName.get("//tmp/lg*ATylhp=0org.jaxen.exp#.iter.IterableNamespaceAxis", (Namespace) null);
      BeanElement beanElement2 = new BeanElement(qName0);
      qName1.getQualifiedName();
      DefaultElement defaultElement0 = new DefaultElement("ZPaac2%0#yzw\"4", namespace1);
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.setXMLReaderClassName("ZPaac2%0#yzw\"4");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class ZPaac2%0#yzw\"4 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      char[] charArray0 = new char[3];
      xMLFilterImpl0.characters(charArray0, 963, 1341);
      xMLFilterImpl0.setParent((XMLReader) null);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl3);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl(xMLFilterImpl1);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl8);
      DefaultDocument defaultDocument0 = new DefaultDocument();
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertNotNull(documentFactory0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.964532803443662
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getDocumentFactory();
      sAXReader0.resetHandlers();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("F");
      sAXReader_SAXEntityResolver0.resolveEntity("F", "http://xml.org/sax/handlers/LexicalHandler");
      InputSource inputSource0 = new InputSource("F");
      sAXReader_SAXEntityResolver0.resolveEntity("F", "F");
      sAXReader_SAXEntityResolver0.uriPrefix = "F";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "Ede|SQo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Ede|SQo\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      BeanElement beanElement0 = new BeanElement("//tmp/ mapped to URI \"0M=C_clT&Ea[E", namespace0, "//tmp/ mapped to URI \"0M=C_clT&Ea[E");
      namespace0.getUniquePath();
      BeanElement beanElement1 = new BeanElement((String) null, namespace0, namespace0);
      beanElement1.getNamespaceForPrefix("<1<lYYGx=");
      beanElement1.setName("Class [");
      Namespace namespace1 = Namespace.NO_NAMESPACE;
      QName qName0 = QName.get("e[", (Namespace) null, "//tmp/ mapped to URI \"0M=C_clT&Ea[E");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      beanElement0.elements();
      namespaceStack0.contains(namespace0);
      beanElement1.isRootElement();
      QName qName1 = namespaceStack0.getQName("#Tf6r@@rf", "<1<lYYGx=", ".:y7");
      namespace1.getUniquePath((Element) beanElement0);
      namespaceStack0.getAttributeQName(".:y7", "+h%j-Ta.Z1UXl", ">\u0007KElQK>l03@~Omj");
      namespaceStack0.contains(namespace1);
      namespaceStack0.addNamespace("%eho!", "+h%j-Ta.Z1UXl");
      QName qName2 = new QName("#Tf6r@@rf", namespace1);
      QName.get("//tmp/ mapped to URI \"0M=C_clT&Ea[E", namespace0, "//tm\"p/) (0) (");
      QName.get(".:y7", (Namespace) null);
      BeanElement beanElement2 = new BeanElement(qName0);
      qName1.getQualifiedName();
      DefaultElement defaultElement0 = new DefaultElement("ZPaac2%0#yzw\"4", namespace1);
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.setXMLReaderClassName("ZPaac2%0#yzw\"4");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class ZPaac2%0#yzw\"4 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockException mockException0 = new MockException();
      MockException mockException1 = new MockException();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      mockException0.addSuppressed(mockException1);
      mockException0.getSuppressed();
      mockException0.printStackTrace();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M;X87!kJG;");
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      mockThrowable0.addSuppressed(mockException1);
      mockThrowable0.getStackTrace();
      mockThrowable0.printStackTrace();
      MockThrowable mockThrowable1 = new MockThrowable((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " COv+1h;x7hYDFe");
      MockThrowable mockThrowable2 = new MockThrowable();
      mockException1.printStackTrace();
      MockThrowable mockThrowable3 = new MockThrowable();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      mockException0.getSuppressed();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, " COv+1h;x7hYDFe");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      DefaultDocumentFactory.getInstance();
      StringReader stringReader0 = new StringReader("//tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap");
      try { 
        sAXReader0.read((Reader) stringReader0, "Invalid node type. Cannot add node: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document Invalid node type. Cannot add node:  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "!Z*m_";
      int int0 = 1879;
      try { 
        sAXReader0.read("!Z*m_");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/!Z*m_ (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/!Z*m_ (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createDocument();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      DOMDocument dOMDocument0 = new DOMDocument();
      defaultDocumentFactory0.getQNames();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      String string0 = "";
      DOMDocument dOMDocument1 = new DOMDocument();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0, "//tmp/=`~`tR0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      assertFalse(sAXReader0.isValidating());
      
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockException mockException0 = new MockException();
      MockException mockException1 = new MockException();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockException0.getSuppressed();
      mockException0.printStackTrace();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";X87!kJG;");
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      mockThrowable0.printStackTrace();
      mockThrowable0.fillInStackTrace();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockThrowable mockThrowable1 = new MockThrowable();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1227);
      pipedInputStream0.markSupported();
      pipedInputStream0.markSupported();
      pipedInputStream0.mark(27);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      MockFile.createTempFile("ex0$}<I4tVmby#(", (String) null);
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      BeanElement beanElement0 = new BeanElement("//tmp/ mapped to URI \"0M=C_clT&Ea[E", namespace0, "//tmp/ mapped to URI \"0M=C_clT&Ea[E");
      namespace0.getUniquePath();
      BeanElement beanElement1 = new BeanElement((String) null, (Namespace) null, namespace0);
      beanElement1.getStringValue();
      beanElement1.getNamespaceForPrefix("<1<lYYGx=");
      Namespace.get("org.jaxen.Context");
      beanElement1.setName("Class [");
      Namespace namespace1 = Namespace.NO_NAMESPACE;
      QName.get("gq@r''=g(2#nF", (Namespace) null, "//tmp/ mapped to URI \"0M=C_clT&Ea[E");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      beanElement0.elements();
      namespaceStack0.contains(namespace0);
      beanElement1.isRootElement();
      namespaceStack0.getQName("#Tf6r@@rf", "<1<lYYGx=", ".:y7");
      namespace1.getUniquePath((Element) beanElement0);
      namespaceStack0.getAttributeQName(".:y7", "+hj-Ta.Z1UX", ">\u0007KElQK>l03@~Omj");
      namespaceStack0.contains(namespace1);
      namespaceStack0.addNamespace("%eho!", "+hj-Ta.Z1UX");
      File file0 = MockFile.createTempFile(":PsF(R!_vND8Ru_k", "Class [");
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DOMDocument dOMDocument0 = new DOMDocument();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      DOMDocument dOMDocument1 = new DOMDocument();
      defaultDocumentFactory0.getQNames();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DOMDocument dOMDocument2 = new DOMDocument();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      try { 
        sAXReader0.read("//tmp/ : 0U<C]U8F");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: //tmp/ : 0U<C]U8F Nested exception: no protocol: //tmp/ : 0U<C]U8F
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      BeanElement beanElement0 = new BeanElement("//tmp/ mapped to URI \"0M=C_clT&Ea[E", namespace0, "//tmp/ mapped to URI \"0M=C_clT&Ea[E");
      namespace0.getUniquePath();
      BeanElement beanElement1 = new BeanElement((String) null, (Namespace) null, namespace0);
      beanElement1.getNamespaceForPrefix("//tmp/ mapped to URI \"0M=C_clT&Ea[E");
      beanElement1.setName("Class [");
      Namespace namespace1 = Namespace.NO_NAMESPACE;
      QName.get("//tmp/ mapped to URI \"0M=C_clT&Ea[E", (Namespace) null, "//tmp/ mapped to URI \"0M=C_clT&Ea[E");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      beanElement0.elements();
      namespaceStack0.contains(namespace0);
      beanElement1.isRootElement();
      namespaceStack0.getQName("#Tf6r@@rf", "//tmp/ mapped to URI \"0M=C_clT&Ea[E", ".:y7");
      namespace1.getUniquePath((Element) beanElement0);
      namespaceStack0.getAttributeQName(".:y7", ".:y7", ">\u0007KElQK>l03@~Omj");
      namespaceStack0.contains(namespace1);
      beanElement1.clone();
      namespaceStack0.addNamespace("%eho!", "//tmp/ mapped to URI \"0M=C_clT&Ea[E");
      QName.get("//tmp/ mapped to URI \"0M=C_clT&Ea[E", namespace0);
      Namespace namespace2 = Namespace.XML_NAMESPACE;
      QName.get("//tm\"p/) (0) (", namespace2);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("namespace::xml");
      sAXReader_SAXEntityResolver0.resolveEntity("b#1%", ".:y7");
      SAXReader sAXReader0 = new SAXReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getXMLFilter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "o<7KN+");
      SAXReader sAXReader1 = new SAXReader((XMLReader) null, true);
      ElementStack elementStack0 = new ElementStack();
      elementStack0.getPath();
      DispatchHandler dispatchHandler0 = elementStack0.getDispatchHandler();
      dispatchHandler0.removeHandler("org.dom4j.NodeType");
      dispatchHandler0.addHandler("org.dom4j.NodeType", (ElementHandler) null);
      sAXReader1.setDefaultHandler(dispatchHandler0);
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.isValidating();
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = null;
      sAXReader0.setEncoding((String) null);
      sAXReader0.isValidating();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      String string1 = null;
      xMLFilterImpl1.processingInstruction((String) null, (String) null);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      String string2 = "CharacterData node is read only: ";
      try { 
        parserAdapter0.getProperty("CharacterData node is read only: ");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: CharacterData node is read only: 
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("This should never happen. Caught: ");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "-i8ERL($_.56H|&F7");
      SAXReader sAXReader0 = new SAXReader(false);
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.0343946195677223
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler((ElementModifier) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "S+";
      stringArray0[1] = "svE";
      stringArray0[2] = "v";
      stringArray0[3] = "h";
      stringArray0[4] = "Validation not supported for XMLReader: ";
      stringArray0[5] = "9Cf<bvQ:";
      stringArray0[6] = "";
      stringArray0[7] = "http://xml.org/sax/features/namespaces";
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      assertNotNull(dispatchHandler0);
      
      dispatchHandler0.removeHandler("");
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, (ElementHandler) null, 0);
      sAXReader0.setDefaultHandler(sAXModifyElementHandler0);
      sAXModifyElementHandler0.onStart(pruningElementStack0);
      sAXReader0.setDefaultHandler(sAXModifyElementHandler0);
      sAXReader0.setIgnoreComments(false);
      sAXReader0.getErrorHandler();
      sAXReader0.getErrorHandler();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.3087432950398514
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      DOMDocument dOMDocument0 = new DOMDocument();
      InputSource inputSource0 = new InputSource();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.getQNames();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.2631550402832814
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl1.setColumnNumber(9);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      locatorImpl0.setColumnNumber(53);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.setParent((XMLReader) null);
      locator2Impl1.setColumnNumber(0);
      LocatorImpl locatorImpl3 = new LocatorImpl(locatorImpl1);
      Locator2Impl locator2Impl3 = new Locator2Impl(locatorImpl3);
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl1);
      locator2Impl4.setColumnNumber(3782);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl1);
      locator2Impl4.getPublicId();
      Locator2Impl locator2Impl6 = new Locator2Impl(locatorImpl0);
      locator2Impl3.getPublicId();
      LocatorImpl locatorImpl4 = new LocatorImpl(locatorImpl2);
      locator2Impl6.setPublicId((String) null);
      Locator2Impl locator2Impl7 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl5 = new LocatorImpl(locator2Impl6);
      locator2Impl5.getPublicId();
      LocatorImpl locatorImpl6 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl8 = new Locator2Impl(locatorImpl3);
      Locator2Impl locator2Impl9 = new Locator2Impl();
      LocatorImpl locatorImpl7 = new LocatorImpl(locator2Impl9);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.2631550402832814
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl1.setColumnNumber(9);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      locatorImpl0.setColumnNumber(53);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.setParent((XMLReader) null);
      locator2Impl1.setColumnNumber(0);
      LocatorImpl locatorImpl3 = new LocatorImpl(locatorImpl1);
      Locator2Impl locator2Impl3 = new Locator2Impl(locatorImpl3);
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl1);
      locator2Impl4.setColumnNumber(3782);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl1);
      locator2Impl4.getPublicId();
      Locator2Impl locator2Impl6 = new Locator2Impl(locatorImpl0);
      locator2Impl3.getPublicId();
      LocatorImpl locatorImpl4 = new LocatorImpl(locatorImpl2);
      Locator2Impl locator2Impl7 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl5 = new LocatorImpl(locator2Impl6);
      locator2Impl5.getPublicId();
      LocatorImpl locatorImpl6 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl8 = new Locator2Impl(locatorImpl3);
      Locator2Impl locator2Impl9 = new Locator2Impl();
      LocatorImpl locatorImpl7 = new LocatorImpl(locator2Impl9);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockException mockException0 = new MockException();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("3Gqk#4K $T", ";X87!ZJ{W", "3Gqk#4K $T", 58);
      stackTraceElementArray0[0] = stackTraceElement0;
      mockException0.setStackTrace(stackTraceElementArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockException0.getSuppressed();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      mockThrowable0.getStackTrace();
      mockException0.initCause(mockThrowable0);
      mockException0.getSuppressed();
      SAXParseException sAXParseException0 = new SAXParseException("k COv+1h;x7hYuDFe", "3Gqk#4K $T", (String) null, 58, 58, mockException0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q<nLB}4'kvP$aG,Y^");
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.getXMLFilter();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl0.setColumnNumber(9);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      LocatorImpl locatorImpl1 = new LocatorImpl();
      locator2Impl2.setColumnNumber((-69));
      Locator2Impl locator2Impl3 = new Locator2Impl(locatorImpl1);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      locatorImpl1.getPublicId();
      LocatorImpl locatorImpl2 = new LocatorImpl();
      locatorImpl2.setColumnNumber((-3));
      locator2Impl0.setColumnNumber(50);
      locator2Impl2.getColumnNumber();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl0);
      locator2Impl3.getPublicId();
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl5);
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl3);
      Locator2Impl locator2Impl7 = new Locator2Impl(locator2Impl6);
      locator2Impl3.setPublicId((String) null);
      LocatorImpl locatorImpl4 = new LocatorImpl(locator2Impl3);
      Locator2Impl locator2Impl8 = new Locator2Impl();
      locatorImpl2.getPublicId();
      locator2Impl0.setSystemId((String) null);
      locatorImpl3.getColumnNumber();
      LocatorImpl locatorImpl5 = new LocatorImpl(locatorImpl3);
      Locator2Impl locator2Impl9 = new Locator2Impl(locatorImpl2);
      LocatorImpl locatorImpl6 = new LocatorImpl(locator2Impl5);
      locatorImpl6.setSystemId("");
      LocatorImpl locatorImpl7 = new LocatorImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.setProperty("{3Jihn0Dwf:R4", locator2Impl2);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: {3Jihn0Dwf:R4
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      BeanElement beanElement0 = new BeanElement("//tmp/ mapped to URI \"0M=C_clT&Ea[E", namespace0, "//tmp/ mapped to URI \"0M=C_clT&Ea[E");
      namespace0.getUniquePath();
      BeanElement beanElement1 = new BeanElement((String) null, (Namespace) null, namespace0);
      beanElement1.getNamespaceForPrefix("<1<lYYGx=");
      Namespace.get("org.jaxen.Context");
      beanElement1.setName("Class [");
      Namespace namespace1 = Namespace.NO_NAMESPACE;
      QName.get("gq@r''=g(2#nF", (Namespace) null, "//tmp/ mapped to URI \"0M=C_clT&Ea[E");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      beanElement0.elements();
      namespaceStack0.contains(namespace0);
      beanElement1.isRootElement();
      namespaceStack0.getQName("#Tf6r@@rf", "<1<lYYGx=", ".:y7");
      namespace1.getUniquePath((Element) beanElement0);
      namespaceStack0.getAttributeQName(".:y7", "+hj-Ta.Z1UX", ">\u0007KElQK>l03@~Omj");
      namespaceStack0.contains(namespace1);
      namespaceStack0.addNamespace("%eho!", "+hj-Ta.Z1UX");
      QName qName0 = new QName("#Tf6r@@rf", namespace1);
      QName.get("//tmp/ mapped to URI \"0M=C_clT&Ea[E", namespace0, "//tm\"p/) (0) (");
      QName.get(".:y7", (Namespace) null);
      MockFile.createTempFile("/nUL", "#r^/w\"N>{Q%4v}<");
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.2631550402832814
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl1.setColumnNumber(9);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locatorImpl0.setColumnNumber(53);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl3);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.setParent((XMLReader) null);
      locator2Impl1.setColumnNumber(0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl3);
      Locator2Impl locator2Impl4 = new Locator2Impl(locatorImpl2);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl1);
      locator2Impl5.setColumnNumber(3782);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl1);
      locator2Impl5.getPublicId();
      Locator2Impl locator2Impl7 = new Locator2Impl(locatorImpl0);
      locator2Impl4.getPublicId();
      LocatorImpl locatorImpl3 = new LocatorImpl(locatorImpl1);
      locator2Impl7.setPublicId((String) null);
      Locator2Impl locator2Impl8 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl4 = new LocatorImpl(locator2Impl7);
      locator2Impl6.getPublicId();
      LocatorImpl locatorImpl5 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl9 = new Locator2Impl(locatorImpl2);
      Locator2Impl locator2Impl10 = new Locator2Impl();
      LocatorImpl locatorImpl6 = new LocatorImpl(locator2Impl10);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultHandler defaultHandler0 = new DefaultHandler();
      StringReader stringReader0 = new StringReader(" : ");
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5280883009539779
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MockException mockException0 = new MockException();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockException mockException1 = new MockException();
      MockException mockException2 = new MockException();
      MockThrowable mockThrowable0 = new MockThrowable((String) null, mockException2);
      MockException mockException3 = new MockException(mockThrowable0);
      mockException0.getMessage();
      mockException2.getSuppressed();
      mockException0.addSuppressed(mockException3);
      MockThrowable mockThrowable1 = new MockThrowable((String) null);
      mockThrowable1.getStackTrace();
      mockException2.initCause((Throwable) null);
      mockException0.getSuppressed();
      SAXParseException sAXParseException0 = new SAXParseException("3Gqk#4K $T", (String) null, (String) null, 27, 0, mockException1);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("3Gqk#4K $T");
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/properties/declaration-handler", "'Z");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      SAXReader sAXReader0 = new SAXReader(false);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(boolean0);
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockException mockException0 = new MockException();
      MockException mockException1 = new MockException();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockException0.addSuppressed(mockException1);
      mockException0.getSuppressed();
      mockException0.printStackTrace();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";X87!kJG;");
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      mockThrowable0.addSuppressed(mockException1);
      mockThrowable0.getStackTrace();
      mockThrowable0.printStackTrace();
      MockThrowable mockThrowable1 = new MockThrowable((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " COv+1h;x7hYDFe");
      MockThrowable mockThrowable2 = new MockThrowable();
      mockException0.printStackTrace();
      MockThrowable mockThrowable3 = new MockThrowable();
      mockException0.getSuppressed();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" COv+1h;x7hYDFe");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sAXReader_SAXEntityResolver0.resolveEntity("`~`tR", ";X87!kJG;");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-40);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertNotNull(dispatchHandler0);
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.4897182683864876
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
          DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
          URL uRL0 = MockURL.getFtpExample();
          DefaultDocumentFactory.getInstance();
          SAXReader sAXReader0 = new SAXReader();
          sAXReader0.setMergeAdjacentText(false);
          sAXReader0.removeHandler("//tmp/tmp/Dqo/0@I0#Tf6nr@@rf0W:W49nYM");
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor249.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor249.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MockURL.getFtpExample();
      SAXReader sAXReader0 = new SAXReader();
      QName qName0 = QName.get((String) null, "UTF8", "]}Vk3_ZvJHFu0k|x(6");
      UserDataAttribute userDataAttribute0 = new UserDataAttribute(qName0);
      try { 
        sAXReader0.setProperty("]}Vk3_ZvJHFu0k|x(6", userDataAttribute0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property ']}Vk3_ZvJHFu0k|x(6' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DOMDocument dOMDocument0 = new DOMDocument();
      DOMDocument dOMDocument1 = new DOMDocument();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DOMDocument dOMDocument2 = new DOMDocument();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory9 = new DefaultDocumentFactory();
      defaultDocumentFactory9.getQNames();
      DefaultDocumentFactory defaultDocumentFactory10 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory11 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory12 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory9, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.createContentHandler(xMLFilterImpl0);
      DefaultDocumentFactory defaultDocumentFactory13 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory14 = new DefaultDocumentFactory();
      Document document0 = defaultDocumentFactory14.createDocument();
      assertEquals((short)9, document0.getNodeType());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      AttributesImpl attributesImpl0 = new AttributesImpl();
      QName qName0 = new QName("org.jaxen.XPathSyntaxException");
      AttributesImpl attributesImpl1 = new AttributesImpl();
      AttributesImpl attributesImpl2 = new AttributesImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl(attributesImpl1);
      AttributesImpl attributesImpl3 = new AttributesImpl(attributes2Impl0);
      AttributesImpl attributesImpl4 = new AttributesImpl(attributesImpl0);
      attributesImpl3.addAttribute("+S|<P^%1\"-@j!.P", "h#Ql_jK$3", "+S|<P^%1\"-@j!.P", "+S|<P^%1\"-@j!.P", "http://xml.org/sax/features/validation");
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }
}
