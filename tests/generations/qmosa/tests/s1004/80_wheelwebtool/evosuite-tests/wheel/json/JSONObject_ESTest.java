/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 15:51:05 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0667455689939205
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Float.min(10, 10);
      Float float0 = new Float(0.0);
      Float.isFinite((-1.0F));
      Float.sum(0.0F, 10.0F);
      Float.sum(0.0F, 1558.9374F);
      Float.max(10, 10.0F);
      Float.max((-1.0F), 0.0F);
      Float.sum(10, (-2010.1979F));
      Float.min(10, 0.0F);
      Float.sum(10.0F, 0.0F);
      Float.sum(0.0F, 0.0F);
      Float.sum((-586.3521F), 0.0F);
      Float.sum(0.0F, 610.6562F);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Float float1 = new Float(0.0F);
      hashMap0.clone();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "w/";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("w/", (Collection) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      int int0 = 639;
      linkedList1.poll();
      Integer integer0 = new Integer(639);
      linkedList1.add(integer0);
      linkedList0.addAll((Collection<? extends Integer>) linkedList1);
      int int1 = 2241;
      Integer integer1 = new Integer(2241);
      int int2 = 1176;
      Integer integer2 = new Integer(1176);
      Integer integer3 = new Integer(1176);
      Integer.remainderUnsigned(4, 639);
      linkedList0.add((Integer) null);
      Integer.getInteger("w/");
      Integer integer4 = new Integer(1176);
      Integer.getInteger("w/", integer4);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3719360793242714
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Long long0 = new Long(0L);
      Long.compare(0L, 0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.sum(0L, 0L);
      String string0 = "JSONArray initial value should be a string or collection or array.";
      JSONObject jSONObject1 = jSONObject0.put("JSONArray initial value should be a string or collection or array.", (Object) long0);
      JSONObject.quote("JSONArray initial value should be a string or collection or array.");
      jSONObject1.getDouble("JSONArray initial value should be a string or collection or array.");
      JSONObject jSONObject2 = jSONObject0.putOpt("\"JSONArray initial value should be a string or collection or array.\"", long0);
      JSONObject.getNames(jSONObject2);
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer integer0 = new Integer(909);
      Integer integer1 = new Integer(909);
      Integer integer2 = new Integer(909);
      Integer integer3 = new Integer(909);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer4 = new Integer(58);
      Integer integer5 = new Integer(909);
      Integer integer6 = new Integer(276);
      Integer.max((-26674136), (-26674136));
      linkedList0.add(integer6);
      Integer integer7 = new Integer(58);
      Integer integer8 = new Integer(4690);
      Integer integer9 = new Integer((-132));
      Double.isFinite((-62.531139));
      Float float0 = new Float(Double.NaN);
      Float.sum(276, (-2063.7756F));
      Float.sum((-1505.0507F), (-26674136));
      Double double0 = new Double(Double.NaN);
      String string0 = JSONObject.doubleToString((-26674136));
      assertEquals("-2.6674136E7", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Float float0 = new Float(0.0F);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      String string0 = JSONObject.quote("</WcJ>");
      assertEquals("\"<\\/WcJ>\"", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6274562428338712
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Float.min(10, 10);
      Float float0 = new Float(0.0);
      Float.isFinite((-1.0F));
      Float.sum(0.0F, 0.0F);
      Float.sum(0.0F, 1558.9374F);
      Float.max(10, 0.0F);
      Float.sum(10, (-2010.1979F));
      Float.min(10, 0.0F);
      Float.sum((-586.3521F), 0.0F);
      Float.sum(0.0F, 610.6562F);
      Float.sum(1.0F, (-1668.09F));
      Float.min(17.63F, 1.0F);
      Float.sum((-79.0F), 12.415658F);
      Float.isFinite((-1667.09F));
      Float.sum((-2010.1979F), 1.0F);
      Float.min(436.64395F, 0.0F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.optBoolean("toL");
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.getDouble("pW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pW\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.026110881696132
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Integer integer0 = new Integer(909);
      Integer integer1 = new Integer(909);
      Integer.toUnsignedLong(109);
      Integer.getInteger((String) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer2 = new Integer(58);
      Integer integer3 = new Integer(909);
      Integer integer4 = new Integer(58);
      Integer integer5 = new Integer(4690);
      Integer integer6 = new Integer((-132));
      Integer integer7 = new Integer(1513);
      Float float0 = new Float(0.0);
      Float float1 = new Float((double) 1513);
      Long long0 = new Long((-2081));
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.compareUnsigned(4690, 0L);
      Long.compare(0L, 109);
      linkedList0.add(integer5);
      Integer integer8 = new Integer(109);
      Integer integer9 = new Integer(4690);
      Integer integer10 = new Integer((-2536));
      linkedList0.add(integer4);
      Integer integer11 = new Integer((-30));
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.optJSONObject("SHinc$@tZTQ*yb(R/0");
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1134787705232774
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.optBoolean("");
      jSONObject0.optInt("$=p^3/3>$SHB?3SN_");
      jSONObject0.optString("RvNYLN=h*D", "");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      Byte byte0 = new Byte((byte)124);
      Boolean boolean0 = Boolean.TRUE;
      Boolean.valueOf(false);
      stringArray0[1] = "";
      jSONObject0.optLong("");
      jSONObject1.isNull("RvNYLN=h*D");
      jSONObject1.put("", 0L);
      jSONObject0.optInt("hR@,~IxX\"1Wyj(T");
      JSONObject.getNames(jSONObject0);
      jSONObject1.getLong("");
      jSONObject1.put("$+)_Hk+", (Collection) linkedList0);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject1.putOpt("RvNYLN=h*D", object0);
      jSONObject2.put("", true);
      JSONObject jSONObject3 = jSONObject1.append("z+bleJ\"", (Object) null);
      jSONObject3.put("[]", (Object) null);
      jSONObject3.optBoolean("", true);
      try { 
        jSONObject0.getInt("z+bleJ\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"z+bleJ\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.733208602492236
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("(khfRh\"");
      Float float0 = new Float(Double.NaN);
      Float.max((-2606.9568F), (-2606.9568F));
      hashMap0.values();
      JSONObject jSONObject1 = jSONObject0.put("getiterator", (-2397L));
      jSONObject1.toString();
      JSONObject jSONObject2 = jSONObject1.put("(khfRh\"", (double) (-2397L));
      jSONObject1.optDouble("(khfRh\"");
      JSONObject.getNames(jSONObject0);
      Float.max(0.0F, 21.73142F);
      // Undeclared exception!
      try { 
        jSONObject2.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.157531539836883
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Short short0 = new Short((short)108);
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.toUnsignedInt((short)3014);
      Short.toUnsignedInt((short)3014);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("sum", (Map) hashMap0);
      jSONObject1.getJSONObject("sum");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.268289821466054
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)31);
      Double double0 = new Double(Double.NaN);
      hashMap0.putIfAbsent(short0, double0);
      Short short1 = new Short((short)0);
      Short.toUnsignedInt((short)0);
      Double double1 = new Double(0.0);
      hashMap0.put(short1, double1);
      String string0 = "E%MK1%(t-Q!LJ?4AF";
      int int0 = 2322;
      JSONObject jSONObject1 = jSONObject0.put("E%MK1%(t-Q!LJ?4AF", 2322);
      jSONObject1.names();
      jSONObject1.getLong("E%MK1%(t-Q!LJ?4AF");
      try { 
        jSONObject0.getString("tkJl=c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"tkJl=c\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1496355272961862
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      Double double2 = new Double(0.0);
      Double.sum(0.0, 0.0);
      Double.isFinite(0.0);
      Double.sum(2686.76850962, 3094.356307923946);
      Double.sum(0.0, 39.931322819118975);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      Double.isFinite(5781.124817543946);
      Float.min((-1447.5996F), 1.0F);
      Float.sum((-1447.5996F), 0.0F);
      Float.sum(1.0F, (-1447.5996F));
      Float.min(1742.8859F, (-0.18785185F));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double1, stringArray0);
      try { 
        jSONObject0.getJSONObject("Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unclosed comment\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double double0 = new Double(1);
      Double double1 = new Double(1);
      Double double2 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("to", (Object) jSONArray0);
      JSONObject jSONObject2 = jSONObject1.putOpt((String) null, (Object) null);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.497906491451203
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("`", (Collection) linkedList0);
      jSONObject1.getString("`");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = jSONObject0.put(": ", (Object) jSONArray0);
      linkedList0.parallelStream();
      jSONObject0.optDouble("val");
      Integer integer0 = new Integer(110);
      try { 
        jSONObject2.put("cop", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.239229534070206
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.optBoolean("");
      jSONObject0.optInt("$=p^3/3>$SHB?3SN_");
      JSONObject.valueToString(jSONObject0, 0, 0);
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      Byte byte0 = new Byte((byte)124);
      Boolean boolean0 = Boolean.TRUE;
      Boolean.valueOf(false);
      stringArray0[1] = "{}";
      jSONObject0.optLong("");
      jSONObject1.isNull("RvNYLN=h*D");
      jSONObject1.put("", 0L);
      jSONObject0.optInt("hR@,~IxX\"1Wyj(T");
      JSONObject.getNames(jSONObject0);
      jSONObject1.getLong("");
      jSONObject1.put("$+)_Hk+", (Collection) linkedList0);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject1.putOpt("RvNYLN=h*D", object0);
      jSONObject2.put("{}", true);
      JSONObject jSONObject3 = jSONObject1.append("z+bleJ\"", (Object) null);
      JSONObject jSONObject4 = new JSONObject("{}");
      jSONObject3.optBoolean("", true);
      try { 
        jSONObject0.getInt("z+bleJ\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"z+bleJ\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7843549676708328
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("true", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1588007451178077
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("Substring bounds error", false);
      String string0 = "Yad value fromHtoJSONStriOg: ";
      jSONObject0.optLong("Yad value fromHtoJSONStriOg: ");
      String string1 = "] is not a JSONArray.";
      jSONObject0.optInt("Bs%hwA]clv");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.append("Yad value fromHtoJSONStriOg: ", jSONArray0);
      Byte byte0 = new Byte((byte)3);
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONArray.", byte0);
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.optLong((int) (byte) (-52), (-2313L));
      JSONObject jSONObject2 = jSONObject0.put("eq", false);
      Byte.toUnsignedLong((byte)59);
      jSONArray0.toJSONObject((JSONArray) null);
      Long long0 = new Long(0L);
      Long.max(0L, 192L);
      stringWriter0.flush();
      Writer writer0 = jSONArray0.write(stringWriter0);
      StringWriter stringWriter1 = new StringWriter((byte)59);
      jSONObject1.write(writer0);
      // Undeclared exception!
      jSONObject2.toString((int) (byte)3, 4180);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6414082084762107
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "JSON does not allow non-finite numbers.";
      stringArray0[1] = "F2$@3aN{P=/";
      stringArray0[2] = "F2$@3aN{P=/";
      Float.isFinite(0.0F);
      Float.sum(0.0F, 0.0F);
      Float.max(0.0F, 0.0F);
      Float.sum((-5230.9683F), 0.0F);
      Double.sum((-5230.9683F), (-2683.0));
      Double.sum(0.0F, (-7913.96826171875));
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double.isFinite((-2550.360384639));
      Float.min(1835.163F, (-1.0F));
      Float.sum((-2063.7756F), 0.0F);
      Float.sum(0.0F, 0.0F);
      Double double0 = new Double(0.0F);
      JSONObject jSONObject0 = new JSONObject((Object) "JSON does not allow non-finite numbers.");
      double double1 = new Float((double) (-5230.9683F));
      JSONObject jSONObject1 = jSONObject0.putOpt("F2$@3aN{P=/", (Object) null);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.541280958396051
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BiConsumer<Double, Object> biConsumer0 = (BiConsumer<Double, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, float0);
      jSONObject1.optLong("+~*B<", 0L);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("+~*B<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of +~*B<
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7584920871477943
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optBoolean("Substring bounds error", false);
      jSONObject0.optLong("Yad value fromHtoJSONStriOg: ");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.append("Yad value fromHtoJSONStriOg: ", jSONArray0);
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte) (-52));
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONArray.", byte0);
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.optLong((int) (byte) (-52), (-2313L));
      JSONObject jSONObject2 = jSONObject0.put("eq", false);
      Byte.toUnsignedLong((byte)59);
      jSONArray0.toJSONObject((JSONArray) null);
      jSONObject1.accumulate("] is not a JSONArray.", jSONArray0);
      Float float0 = new Float((float) (-2313L));
      Float float1 = new Float(0.0F);
      Long long0 = new Long(1L);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONObject2.putOpt("Substring bounds error", "] is not a JSONArray.");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("Substring bounds error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Substring bounds error
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2235802730676477
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double double0 = new Double(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Float float0 = new Float(4213.0518126);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Double double1 = new Double(0.0);
      Float float1 = new Float((double) 0.0F);
      hashMap3.put(double0, double1);
      Double.isFinite(0.0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "SR-~#%(a&ZOjr+]";
      stringArray0[1] = "isreverseBytes";
      stringArray0[2] = "SR-~#%(a&ZOjr+]";
      stringArray0[3] = "SR-~#%(a&ZOjr+]";
      hashMap2.putAll(hashMap3);
      stringArray0[4] = "SR-~#%(a&ZOjr+]";
      stringArray0[5] = "SR-~#%(a&ZOjr+]";
      stringArray0[6] = "SR-~#%(a&ZOjr+]";
      stringArray0[7] = "SR-~#%(a&ZOjr+]";
      JSONObject jSONObject0 = new JSONObject(hashMap2, stringArray0);
      JSONObject.valueToString(hashMap3);
      Integer integer0 = new Integer(8192);
      assertEquals(8192, (int)integer0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5464088661557995
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1192.11687713);
      jSONObject0.accumulate("b>uVMNH]9V", double0);
      jSONObject0.put("getpush", false);
      Byte.toUnsignedLong((byte)59);
      Long long0 = new Long(59L);
      jSONObject0.isNull("getpush");
      jSONObject0.get("getpush");
      JSONObject jSONObject1 = jSONObject0.put("getpush", (double) (byte)59);
      try { 
        jSONObject1.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7027894021086607
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("Substring bounds error", false);
      jSONObject0.optLong("Yad value fromHtoJSONStriOg: ");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("Yad value fromHtoJSONStriOg: ", jSONArray0);
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte) (-52));
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.optLong((int) (byte) (-52), (-2313L));
      JSONObject jSONObject2 = jSONObject0.put("eq", false);
      Byte.toUnsignedLong((byte)59);
      jSONArray0.toJSONObject((JSONArray) null);
      jSONObject1.accumulate("] is not a JSONArray.", jSONArray0);
      Float float0 = new Float((float) (-2313L));
      Float float1 = new Float((float) (byte)0);
      Long long0 = new Long(1L);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject2.putOpt("Substring bounds error", "] is not a JSONArray.");
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      jSONObject1.put("Substring bounds error", (Map) hashMap0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5402095130751898
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Object object0 = JSONObject.NULL;
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      JSONTokener jSONTokener1 = new JSONTokener("Q*\"eGb;O4#j=l3W?dE6");
      jSONTokener0.nextTo(": ");
      jSONTokener1.nextTo(": ");
      jSONTokener0.nextTo(": ");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 19 of Q*\"eGb;O4#j=l3W?dE6
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9587684328137056
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte.compare((byte)101, (byte)81);
      jSONObject0.accumulate("R", (Object) null);
      Float float0 = new Float((float) 20);
      Float float1 = new Float((double) 0.0F);
      Float float2 = new Float((float) 2227);
      JSONObject jSONObject1 = new JSONObject(float1);
      String string0 = "A JSONObject text must end with '}'";
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getLong(160);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[160] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.673832142983385
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.addAll((Collection<? extends Integer>) linkedList1);
      Integer integer0 = new Integer(2241);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.add((Integer) null);
      Integer integer1 = new Integer(733);
      JSONObject jSONObject1 = jSONObject0.put("' and instead saw '", 1.0);
      jSONObject1.optInt("' and instead saw '");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "' and instead saw '";
      stringArray0[1] = ">q}";
      stringArray0[2] = "R";
      stringArray0[3] = "R";
      stringArray0[4] = ">q}";
      stringArray0[5] = ">q}";
      stringArray0[6] = ">q}";
      stringArray0[7] = ">q}";
      stringArray0[8] = "R";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.optLong("' and instead saw '");
      try { 
        jSONObject0.getJSONObject("iVqZ&$9\"-><%lD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iVqZ&$9\\\"-><%lD\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.658223491647497
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "pa'rZk%[ TR";
      Integer integer0 = new Integer(8);
      Integer integer1 = new Integer(8);
      Integer.getInteger("]2\"7!");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer2 = new Integer(8);
      Integer integer3 = new Integer(8);
      linkedList0.add(integer3);
      Integer integer4 = new Integer((-484));
      Integer integer5 = new Integer((-1));
      linkedList0.add(integer5);
      Integer integer6 = new Integer(8);
      Float float0 = new Float((double) 8);
      Integer integer7 = new Integer(8);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer8 = new Integer(10);
      Integer.toUnsignedLong(2);
      linkedList1.add(integer8);
      Integer integer9 = new Integer((-484));
      JSONObject jSONObject0 = new JSONObject((Object) "F2$@3aN{P=/");
      jSONObject0.toString();
      jSONObject0.toString(0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8440052917788923
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("Substring bounds error", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.put(": ", (Object) double0);
      Double.isFinite(0.0);
      jSONObject1.optDouble(": ");
      Float.min(1600.69F, 1600.69F);
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject2 = new JSONObject(object0);
      jSONObject0.toString((-1125), (-722));
      jSONObject1.optInt("isaddFirst");
      try { 
        jSONObject2.getJSONObject("wheel.json.JSONObject$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.2356309218982555
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "Bad value from toJSONString: ";
      jSONObject0.optLong("Bad value from toJSONString: ");
      byte byte0 = (byte)0;
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3342682226351177
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("w/", (Collection) linkedList0);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 3, 3);
      String string0 = "}6f_?tfU0";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.0184081221047716
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.optBoolean("");
      jSONObject0.optInt("$=p^3/3>$SHB?3SN_");
      jSONObject0.optString("RvNYLN=h*D", "");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      Byte byte0 = new Byte((byte)124);
      Boolean boolean0 = Boolean.TRUE;
      Boolean.valueOf(false);
      stringArray0[1] = "";
      jSONObject0.optLong("");
      jSONObject1.isNull("RvNYLN=h*D");
      jSONObject1.put("", 0L);
      jSONObject0.optInt("hR@,~IxX\"1Wyj(T");
      JSONObject.getNames(jSONObject0);
      jSONObject1.getLong("");
      jSONObject1.put("$+)_Hk+", (Collection) linkedList0);
      Object object0 = JSONObject.NULL;
      jSONObject1.putOpt("RvNYLN=h*D", object0);
      String string0 = null;
      JSONObject jSONObject2 = jSONObject1.append("z+bleJ\"", (Object) null);
      jSONObject2.optBoolean("", true);
      try { 
        jSONObject0.getInt("z+bleJ\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"z+bleJ\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.347609219930428
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("getvalueOf", 0L);
      jSONObject0.put("getpush", false);
      Byte.toUnsignedLong((byte)59);
      Long long0 = new Long(59L);
      jSONObject0.isNull("getpush");
      jSONObject0.get("getpush");
      JSONObject jSONObject1 = jSONObject0.put("getpush", (double) (byte)59);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4553949936248007
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("w/", (Collection) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.addAll((Collection<? extends Integer>) linkedList1);
      Integer integer0 = new Integer(2241);
      Integer integer1 = new Integer(1176);
      Integer integer2 = new Integer(58);
      Integer integer3 = new Integer(115);
      Float.min(115, 0.0F);
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      Integer integer4 = new Integer(101);
      Integer.getInteger("w/", integer2);
      jSONObject0.putOpt("getequals", integer4);
      jSONObject0.getJSONArray("w/");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      Double.sum(2698.3985073018684, 2698.3985073018684);
      Double double0 = new Double(0.0);
      String string0 = "getsetMockitoInterceptor";
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3401196061221263
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double double0 = new Double(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      hashMap2.putAll(hashMap1);
      Float float0 = new Float(4213.0518126);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Double double1 = new Double(0.0);
      Double.max(1253.9812438967533, 0.0);
      Double double2 = new Double(1253.9812438967533);
      Double double3 = new Double((-2354.12428722));
      BiFunction<Double, Object, Double> biFunction0 = (BiFunction<Double, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap3.merge(double2, double3, biFunction0);
      Float float1 = new Float(1253.9812438967533);
      HashMap<Double, Double> hashMap4 = new HashMap<Double, Double>();
      Float float2 = new Float(1455.4484F);
      Short short0 = new Short((short)2263);
      HashMap<Double, Double> hashMap5 = new HashMap<Double, Double>();
      Float float3 = new Float((-1.0F));
      HashMap<JSONObject, Double> hashMap6 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap6);
      String string0 = JSONObject.valueToString(hashMap6, 1, (-24668172));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double double0 = new Double(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Float float0 = new Float(4213.0518126);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Float float1 = new Float(0.0F);
      Short short0 = new Short((short) (-687));
      HashMap<Double, Double> hashMap4 = new HashMap<Double, Double>();
      Float float2 = new Float((-57.1005F));
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.names();
      try { 
        jSONObject0.put((String) null, (Object) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.1673440554882104
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("w/", (Collection) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      boolean boolean0 = new Boolean("w/");
      Integer integer0 = new Integer(2241);
      Integer integer1 = new Integer(1176);
      Integer integer2 = new Integer(8);
      jSONObject1.put("1.00", 0.0);
      Float.min(4433.4F, 1.0F);
      Boolean boolean1 = new Boolean(false);
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      int int0 = jSONObject0.optInt("5\"");
      assertEquals(0, int0);
      
      int int1 = jSONObject0.getInt("1.00");
      assertTrue(int1 == int0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2535606103408536
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.optLong("Substring bounds error");
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)74);
      Byte.compare((byte)0, (byte) (-52));
      Object object1 = JSONObject.NULL;
      jSONObject0.accumulate("] is not a JSONArray.", object1);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.opt("] is not a JSONArray.");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.6189869098544225
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(4);
      linkedList0.add(integer0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.addAll((Collection<? extends Integer>) linkedList1);
      Integer integer1 = new Integer(2241);
      linkedList0.add(integer1);
      Integer integer2 = new Integer(2241);
      JSONObject jSONObject1 = jSONObject0.put("R", 1.0);
      jSONObject1.optInt(">q}");
      jSONObject0.optLong("R");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "R";
      stringArray0[1] = ">q}";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      try { 
        jSONObject2.getInt("L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"L\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.534241987445501
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(602);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(2241);
      linkedList0.add(integer1);
      Integer integer2 = new Integer(45);
      Integer integer3 = new Integer(602);
      Integer.toUnsignedString(3);
      JSONObject jSONObject1 = new JSONObject(integer3);
      jSONObject0.put("", (Object) jSONObject1);
      String string0 = "HYMrT#MD(i";
      JSONObject jSONObject2 = jSONObject0.put("HYMrT#MD(i", (-1.0));
      jSONObject2.optInt("HYMrT#MD(i");
      jSONObject2.optLong("key");
      try { 
        jSONObject0.getJSONObject("key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"key\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.0117156038982507
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("w/", (Collection) linkedList0);
      Boolean.valueOf(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "w/";
      stringArray0[1] = "";
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      jSONObject0.names();
      jSONObject1.optLong("wheel.json.JSONException");
      jSONObject1.isNull("mi");
      jSONObject0.optInt("Mlt.J*9<q");
      Object object0 = new Object();
      jSONObject2.append("mi", "] is not a JSONObject.");
      Integer integer0 = new Integer(2241);
      Byte byte0 = new Byte((byte) (-94));
      JSONObject jSONObject3 = jSONObject0.accumulate("isremoveLast", byte0);
      jSONObject0.names();
      jSONObject0.optJSONArray("w/");
      try { 
        jSONObject3.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.8045488272283428
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("w/", (Collection) linkedList0);
      Boolean.valueOf(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "w/";
      stringArray0[1] = "";
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      long long0 = jSONObject1.optLong("wheel.json.JSONException");
      assertEquals(0L, long0);
      
      boolean boolean0 = jSONObject1.isNull("mi");
      assertTrue(boolean0);
      
      int int0 = jSONObject0.optInt("w/");
      assertEquals(0, int0);
      
      Object object0 = new Object();
      jSONObject2.append("mi", "] is not a JSONObject.");
      Integer integer0 = new Integer(2241);
      Byte byte0 = new Byte((byte) (-94));
      jSONObject0.accumulate("w/", byte0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.optJSONArray("w/");
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      Double double2 = new Double(0.0);
      Double.sum(0.0, 0.0);
      Double.sum(2697.8933066426202, 3094.356307923946);
      Double.sum(0.0, 39.931322819118975);
      Double.isFinite(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      Double.isFinite(5792.249614566566);
      Float.min((-1447.5996F), 1.0F);
      Float.sum((-1447.5996F), 0.0F);
      Float.sum(1.0F, (-1447.5996F));
      Float.min(0.0F, 1.0F);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1576770355110229
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Integer integer0 = new Integer(60);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(688);
      Integer integer2 = new Integer(60);
      String string0 = "XY)!4EY/6";
      Integer.getInteger("XY)!4EY/6");
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer3 = new Integer(46);
      Integer integer4 = new Integer(60);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("XY)!4EY/6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"XY)!4EY/6\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.793337803851767
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("`", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.put(": ", (Object) jSONArray0);
      Double.sum(3822.16762421, 3822.16762421);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(7644.33524842);
      hashMap0.put(double0, double0);
      hashMap0.put(double0, double0);
      HashMap<Boolean, JSONObject> hashMap1 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject3 = jSONObject0.put("issplit", 978.0);
      JSONArray jSONArray1 = jSONObject2.names();
      JSONObject jSONObject4 = new JSONObject((Map) hashMap0);
      jSONObject4.toJSONArray(jSONArray1);
      jSONObject1.optJSONObject("2O9|k4g=SW{,");
      jSONObject3.has("issplit");
      Object object0 = new Object();
      JSONObject jSONObject5 = jSONObject4.append(": ", object0);
      assertFalse(jSONObject5.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.2311258185681475
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "F2$@3aN{P=/";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "F2$@3aN{P=/";
      stringArray0[1] = "F2$@3aN{P=/";
      stringArray0[2] = "F2$@3aN{P=/";
      stringArray0[3] = "F2$@3aN{P=/";
      stringArray0[4] = "isclear";
      JSONObject jSONObject0 = new JSONObject("F2$@3aN{P=/", stringArray0);
      JSONTokener jSONTokener0 = new JSONTokener("{>g~|NK^L/;\"");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("F2$@3aN{P=/", "F2$@3aN{P=/");
      jSONObject1.append("ishashCode", "F2$@3aN{P=/");
      jSONObject1.optBoolean("z+bleJ\"", true);
      try { 
        jSONObject1.getInt(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double double0 = new Double(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Float float0 = new Float(4213.0518126);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Double double1 = new Double(0.0);
      Double.max(1253.9812438967533, 4213.0518126);
      Float.sum(0.0F, 0.0F);
      Double.sum(1253.9812438967533, 1253.9812438967533);
      HashMap<Double, Double> hashMap4 = new HashMap<Double, Double>();
      Double.isFinite(0.0);
      Float float1 = new Float(4213.0518126);
      Float.sum((-114.07F), (-2063.7756F));
      Float.sum(0.0F, (-1665.87F));
      Double double2 = new Double((-1.0));
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.1968461618766653
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("gZyEdOjU}EpR>_klZ{");
      jSONTokener0.nextTo('c');
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(2241);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("gZyEdOjU}EpR>_klZ{", "gZyEdOjU}EpR>_klZ{");
      byte byte0 = (byte) (-17);
      Byte.compare((byte) (-17), (byte)6);
      Byte byte1 = new Byte((byte)97);
      Double double0 = new Double((-4208.7896F));
      JSONObject jSONObject1 = jSONObject0.accumulate("gZyEdOjU}EpR>_klZ{", "gZyEdOjU}EpR>_klZ{");
      Float float1 = new Float(0.0F);
      Float float2 = new Float(0.0F);
      Long long0 = new Long(0L);
      Object object0 = JSONObject.NULL;
      Long long1 = Long.valueOf((long) (byte) (-17));
      jSONObject1.putOpt("' and instead saw '", long1);
      Float float3 = new Float(Double.NaN);
      try { 
        jSONObject0.append("_|6?+*:H", float3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.559236623624301
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "Substring bounds error";
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.optLong("Substring bounds error");
      String string1 = "] is not a JSONArray.";
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)10);
      Byte.compare((byte)0, (byte) (-52));
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONArray.", object1);
      StringWriter stringWriter0 = new StringWriter();
      String string2 = "\\t";
      HashMap<Long, Short> hashMap0 = new HashMap<Long, Short>();
      jSONObject1.put("Substring bounds error", (Map) hashMap0);
      boolean boolean1 = false;
      JSONObject jSONObject2 = jSONObject1.put("\t", false);
      Byte.toUnsignedLong((byte) (-52));
      Byte.toUnsignedLong((byte)0);
      try { 
        jSONObject2.append("Substring bounds error", "\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Substring bounds error] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.916334012516528
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("w/", (Collection) linkedList0);
      linkedList0.addAll((Collection<? extends Integer>) linkedList0);
      Integer integer0 = new Integer(2241);
      Float.min(2241, 2241);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1);
      Float float0 = new Float(1.0F);
      JSONObject jSONObject2 = new JSONObject();
      Short short0 = new Short((short)15);
      jSONObject1.append("w/", short0);
      try { 
        jSONObject1.getJSONObject("w/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"w/\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "iscl)yr";
      stringArray0[4] = "iscl)yr";
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("iscl)yr");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.1395808313434372
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "w/";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("w/", (Collection) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.poll();
      Integer integer0 = new Integer(639);
      linkedList1.add(integer0);
      linkedList0.addAll((Collection<? extends Integer>) linkedList1);
      Integer integer1 = new Integer(2241);
      Integer integer2 = new Integer(1176);
      Integer integer3 = new Integer(1176);
      Integer.remainderUnsigned(4, 639);
      linkedList0.add((Integer) null);
      Integer integer4 = new Integer(1176);
      Integer.getInteger("w/", integer4);
      Integer.getInteger("w/", integer2);
      Integer.remainderUnsigned(639, 2241);
      Integer.getInteger("w/", integer1);
      Integer.remainderUnsigned((-1894), 1176);
      linkedList0.add(integer2);
      Boolean boolean0 = new Boolean("fl");
      JSONObject jSONObject1 = jSONObject0.accumulate("w/", integer1);
      jSONObject0.put("gettoUnsignedString", (double) (-1894));
      try { 
        jSONObject1.getInt("w/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"w/\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.9174716867505905
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1);
      Double double1 = new Double(1);
      Double double2 = new Double(1);
      Double.sum(0.0, (-926.0));
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Float float0 = new Float(0.0F);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute((Double) null, biFunction0);
      HashMap<Byte, JSONObject> hashMap1 = new HashMap<Byte, JSONObject>();
      Double double3 = new Double(0.0);
      JSONObject.valueToString(hashMap0);
      try { 
        jSONObject0.put((String) null, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.8684600982261519
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "w/";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("w/", (Collection) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer.getInteger("w/");
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean("getmin");
      booleanArray0[0] = boolean0;
      linkedList1.toArray(booleanArray0);
      linkedList1.add((Integer) null);
      linkedList0.addAll((Collection<? extends Integer>) linkedList1);
      Integer integer0 = new Integer(2241);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(1176);
      linkedList0.add((Integer) null);
      Integer.getInteger(": ", integer1);
      Integer.min(1176, 1176);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Integer.sum((-1319), 2241);
      int int0 = (-1853);
      Integer.toUnsignedString((-1319));
      Integer integer2 = new Integer(1176);
      linkedList0.add(integer2);
      Integer.getInteger("w/", integer0);
      Integer.remainderUnsigned((-1853), 1176);
      linkedList0.add(integer1);
      linkedList0.add(integer1);
      Integer integer3 = new Integer(2241);
      Integer integer4 = new Integer(2241);
      try { 
        jSONObject0.getBoolean("w/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"w/\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.419080465352082
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1192.11687713);
      Double.max(1192.11687713, 1192.11687713);
      jSONObject0.accumulate("b>uMNH]9V", double0);
      jSONObject0.put("getpush", false);
      Byte.toUnsignedLong((byte)59);
      jSONObject0.isNull("getpush");
      JSONObject jSONObject1 = jSONObject0.put("getpush", (double) (byte)59);
      try { 
        jSONObject1.getBoolean("getpush");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getpush\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.979178677546523
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.optBoolean("");
      jSONObject0.optInt("$=p^3/3>$SHB?3SN_");
      String string0 = "RvNYLN=h*D";
      jSONObject0.optString("RvNYLN=h*D", "");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      Byte byte0 = new Byte((byte)124);
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put(byte0, boolean0);
      stringArray0[1] = "";
      jSONObject1.names();
      jSONObject0.optLong("");
      jSONObject1.isNull("RvNYLN=h*D");
      JSONObject jSONObject2 = jSONObject1.put("", 0L);
      jSONObject0.optInt("hR@,~Ix\"1Wyj(T");
      jSONObject0.optDouble("", (-1.0));
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Long long0 = new Long(772L);
      jSONObject2.append("ishashCode", long0);
      JSONObject jSONObject3 = new JSONObject(jSONArray0, stringArray0);
      try { 
        jSONObject3.getInt("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer integer0 = new Integer(909);
      Integer integer1 = new Integer(4690);
      Integer.toUnsignedLong(58);
      Integer.getInteger((String) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer1);
      Integer integer2 = new Integer(4690);
      Integer integer3 = new Integer((-132));
      linkedList0.add(integer3);
      Integer integer4 = new Integer((-1532));
      Float float0 = new Float((double) (-2081));
      Integer integer5 = new Integer((-306));
      Integer integer6 = new Integer(48);
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double double0 = new Double(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Float float0 = new Float(4213.0518126);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Double double1 = new Double(0.0);
      BiFunction<Double, Double, Double> biFunction0 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap2.merge(double0, double1, biFunction0);
      Float float1 = new Float((double) 0.0F);
      Float.sum(0.0F, 0.0F);
      Float.min((-80.74268F), (-24.7989F));
      Float.sum(1.0F, 1.0F);
      Float.sum(1441.2485F, 0.0F);
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = new Integer((-198));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte)105);
      Byte.compare((byte) (-3), (byte) (-3));
      StringWriter stringWriter0 = new StringWriter();
      Float.min(0, 360.13705F);
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONTokener jSONTokener0 = new JSONTokener("4EE=~-Bi|&/mrVE'=]a");
      jSONTokener0.nextTo("1|");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 9 of 4EE=~-Bi|&/mrVE'=]a
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.8885995049191862
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Long long0 = new Long((-948L));
      JSONObject.getNames((Object) long0);
      JSONObject.getNames((Object) "JSO =des notallow non-znite nmbers.");
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      Float float0 = new Float((double) (-948L));
      BiFunction<Object, Object, Float> biFunction0 = (BiFunction<Object, Object, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(float0, float0, biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5455514655458402
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList0.addAll((Collection<? extends Integer>) linkedList1);
      Integer integer0 = new Integer(2241);
      String string0 = Integer.toUnsignedString(2241);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList3.add(integer0);
      Integer integer1 = new Integer((-913));
      String string1 = JSONObject.valueToString(linkedList3);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.5835808391042354
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "JSON does not allow non-finite numbers.";
      stringArray0[1] = "F2$@3aN{P=/";
      stringArray0[2] = "F2$@3aN{P=/";
      Integer integer0 = new Integer(2582);
      Integer.getInteger("JSON does not allow non-finite numbers.");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(2582);
      Integer integer2 = new Integer(62);
      Integer integer3 = new Integer(62);
      linkedList0.add(integer3);
      Integer integer4 = new Integer(2582);
      Integer integer5 = new Integer(2582);
      linkedList0.add(integer3);
      Integer integer6 = new Integer(59);
      Float float0 = new Float((double) (-484));
      Integer integer7 = new Integer(62);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer8 = new Integer((-874));
      Integer integer9 = new Integer((-1));
      linkedList1.add(integer9);
      Integer integer10 = new Integer(2582);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString();
      jSONObject0.toString((-874));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.2191532724964596
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optBoolean("Substring bounds error", false);
      jSONObject0.optLong("Bad value from toJSONString: ");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("Bad value from toJSONString: ", jSONArray0);
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte) (-52));
      JSONObject jSONObject2 = jSONObject0.accumulate("] is not a JSONArray.", byte0);
      StringWriter stringWriter0 = new StringWriter();
      Byte.toUnsignedLong((byte)59);
      jSONArray0.toJSONObject((JSONArray) null);
      Long long0 = new Long(0L);
      JSONObject jSONObject3 = jSONObject2.append("j^1_nIc|!UkhXN<-", long0);
      Long.max(0L, 185L);
      JSONObject.valueToString(jSONObject1);
      StringWriter stringWriter1 = (StringWriter)jSONArray0.write(stringWriter0);
      stringWriter1.append((CharSequence) "j^1_nIc|!UkhXN<-");
      jSONObject2.write(stringWriter1);
      jSONObject3.optInt("] is not a JSONArray.", 52);
      jSONObject0.keys();
      jSONObject2.isNull("va");
      // Undeclared exception!
      jSONObject0.toString(3132);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.3730095465721917
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("F2$@3aN{P=/", (-1337));
      JSONObject.valueToString(jSONObject1, 7, (-1337));
      try { 
        jSONObject1.put("A JSONArray text must start with '['", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.5180520321553335
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Object object1 = new Object();
      Double double0 = new Double((-4174.1));
      jSONObject1.accumulate("3BFt'N7u", double0);
      jSONObject1.getLong("3BFt'N7u");
      jSONObject0.optInt("ha", 47);
      jSONObject0.optJSONObject("|\ba2or}n");
      Object object2 = new Object();
      JSONObject jSONObject2 = jSONObject1.append("|\ba2or}n", object2);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      Double double2 = new Double(0.0);
      Double.sum(0.0, 0.0);
      Double.sum(2686.76850962, 3094.356307923946);
      Integer integer0 = new Integer(61);
      String string0 = Integer.toUnsignedString(4);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      Integer integer1 = new Integer((-913));
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string1 = JSONObject.valueToString(jSONArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.6012697775926403
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      double double0 = 0.0;
      Double double1 = new Double(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Float float0 = new Float(4213.0518126);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      Float float2 = new Float((double) 0.0F);
      HashMap<Byte, JSONObject> hashMap4 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Object) hashMap3);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optInt(1754, 10);
      String string0 = jSONObject1.toString(1754, (-722));
      jSONObject1.optInt(string0);
      try { 
        jSONObject1.getLong(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\njava.lang.String@0000000005\\\": \\\"java.lang.Class@0000000006\\\",\\njava.lang.String@0000000003\\\": java.lang.Boolean@0000000004\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.0116529748861405
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("*");
      jSONObject0.optLong("*", 479L);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("`", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString(4, 4);
      JSONObject jSONObject1 = jSONObject0.put("*", (Object) jSONArray0);
      jSONObject1.optLong("isvalueOf", 479L);
      Short short0 = new Short((short)779);
      jSONObject1.putOpt("null", short0);
      jSONObject1.optInt("`", (-1888));
      jSONObject1.optLong("`", (long) (-1888));
      Float float0 = new Float((double) 1600.69F);
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject2 = new JSONObject(linkedList0);
      jSONArray0.optInt(10, 10);
      jSONObject0.toString((-1125), 4);
      jSONObject2.putOpt("fo", "null");
      jSONObject0.optInt("{\n\"java.lang.String@0000000005\": [],\n\"java.lang.String@0000000009\": java.lang.Short@000000001,\n\"java.lang.String@0000000007\": []\n    }");
      try { 
        jSONObject0.getLong("`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.952854592495113
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("*");
      jSONObject0.optLong("*", 479L);
      String string0 = "`";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("`", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(false);
      jSONArray0.toString(4, 4);
      JSONObject jSONObject1 = jSONObject0.put("*", (Object) jSONArray0);
      jSONObject1.optLong("isvalueOf", 479L);
      jSONObject1.optInt("`", (-1888));
      jSONObject1.optLong("`", (long) (-1888));
      String string1 = "val";
      jSONObject0.optDouble("val");
      Float float0 = new Float((double) 1600.69F);
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject2 = new JSONObject(linkedList0);
      int int0 = (-722);
      int int1 = 10;
      jSONArray0.optInt(10, 10);
      jSONObject0.toString((-1125), (-722));
      jSONObject0.optInt("{\n\"java.lang.String@0000000005\": [],\n\"java.lang.String@0000000008\": [java.lang.Boolean@0000000007]\n}");
      try { 
        jSONObject0.getLong("`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.377221112942707
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      Double.sum(2686.76850962, 3094.356307923946);
      Double.sum(2686.76850962, 0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      Double.isFinite(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "2`z#X+gy)>oVNZ'm`YG";
      stringArray0[1] = "l";
      stringArray0[2] = "2`z#X+gy)>oVNZ'm`YG";
      stringArray0[3] = "2`z#X+gy)>oVNZ'm`YG";
      stringArray0[4] = "2`z#X+gy)>oVNZ'm`YG";
      stringArray0[5] = "2`z#X+gy)>oVNZ'm`YG";
      stringArray0[6] = "isiterator";
      stringArray0[7] = "2`z#X+gy)>oVNZ'm`YG";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertNull(jSONArray0);
      
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.0750989420742516
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject((Object) "SQ'2(2_D}G\\9DgIfZ");
      long long0 = jSONObject0.optLong((String) null, 1172L);
      assertEquals(1172L, long0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.0457648257580447
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Integer integer0 = new Integer(909);
      Integer integer1 = new Integer(909);
      Integer.toUnsignedLong(109);
      Integer.getInteger((String) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer2 = new Integer(58);
      Integer integer3 = new Integer(909);
      Integer integer4 = new Integer(58);
      Integer integer5 = new Integer(4690);
      Integer integer6 = new Integer((-132));
      Integer integer7 = new Integer(1513);
      Float float0 = new Float((-0.05837105533043388));
      Float float1 = new Float((double) 1513);
      Long long0 = new Long((-2081));
      JSONObject jSONObject0 = new JSONObject(long0);
      Integer.getInteger("f7NM-`q#9gPe,TPVRwI", integer4);
      Integer integer8 = new Integer(58);
      Long.compare(0L, 109);
      linkedList0.add(integer5);
      Integer integer9 = new Integer(109);
      Integer integer10 = new Integer(4690);
      Integer integer11 = new Integer((-2536));
      Integer integer12 = new Integer((-1797));
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.optJSONObject((String) null);
      assertEquals(1, jSONObject0.length());
      
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.addAll((Collection<? extends Integer>) linkedList1);
      Integer integer0 = new Integer(2241);
      JSONArray[] jSONArrayArray0 = new JSONArray[1];
      JSONArray jSONArray0 = new JSONArray();
      jSONArrayArray0[0] = jSONArray0;
      linkedList0.toArray(jSONArrayArray0);
      Integer integer1 = new Integer(1176);
      linkedList0.add((Integer) null);
      Integer integer2 = new Integer(2241);
      Integer.getInteger("w/", integer0);
      Integer integer3 = new Integer(87);
      Integer.toUnsignedString(87);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.add(integer0);
      Integer integer4 = new Integer((-2540));
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 4690;
      Integer integer0 = new Integer(909);
      Integer integer1 = new Integer(909);
      int int1 = 109;
      Integer integer2 = new Integer(909);
      Integer integer3 = new Integer(909);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer4 = new Integer(58);
      Integer integer5 = new Integer(909);
      Integer integer6 = new Integer(276);
      String string0 = "b";
      Integer integer7 = new Integer(44);
      Integer.getInteger("r\u0007n^{B-fm11", integer7);
      Integer.getInteger((String) null, 58);
      Integer.getInteger("b", 4690);
      Integer integer8 = new Integer(4690);
      linkedList0.add(integer6);
      Integer integer9 = new Integer(58);
      Integer integer10 = new Integer(4690);
      Integer integer11 = new Integer((-132));
      Integer integer12 = new Integer(58);
      Float float0 = new Float((double) (-132));
      Object object0 = new Object();
      Long long0 = new Long((-2081));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.7250829733914482
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0, 68, 68);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      float float0 = 0.0F;
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.180066384203239
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      String string0 = ": ";
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Object object0 = new Object();
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONObject@0000000001");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wheel.json.JSONObject@0000000001
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.7741057932992024
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[15];
      stringArray0[0] = "JSON does not allow non-finite numbers.";
      stringArray0[3] = "JSON does not allow non-finite numbers.";
      stringArray0[4] = "isclear";
      JSONObject jSONObject0 = new JSONObject("JSON does not allow non-finite numbers.", stringArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(109);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      Float float0 = new Float((double) 62);
      Integer integer1 = new Integer((-1554));
      Integer integer2 = new Integer(20);
      Integer.compare((-1554), 62);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Integer integer3 = new Integer(42);
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList4.listIterator();
      linkedList4.add(integer2);
      Integer integer4 = new Integer(62);
      jSONObject0.put("JSON does not allow non-finite numbers.", (Object) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.1673440554882104
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Expected a ':' after a key", 2046);
      Float float0 = new Float((double) 45);
      JSONObject jSONObject2 = jSONObject1.put("SQ'2(2_D}G\\9DgIfZ", (Object) float0);
      jSONObject2.optDouble("Expected a ':' after a key");
      Float.min(45, 2046);
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      jSONObject1.putOpt("GV^zTIrs3LJI", jSONObject2);
      try { 
        jSONObject0.getJSONArray("SQ'2(2_D}G\\9DgIfZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"SQ'2(2_D}G\\\\9DgIfZ\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double double0 = new Double(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Float.isFinite(0.0F);
      Float.sum(2676.0F, (-1.0F));
      Float.sum((-237.809F), 576.5795F);
      Float.max((-237.809F), (-0.19736F));
      Float.max(0.0F, 576.5795F);
      Float.sum(0.0F, (-1.0F));
      Float.min(576.5795F, 2676.0F);
      Float.sum(0.0F, (-0.19736F));
      Float.sum(2304.6F, 4184.6084F);
      String string0 = JSONObject.quote("7/>|AJ");
      assertEquals("\"7/>|AJ\"", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double double0 = new Double(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Float float0 = new Float(4213.0518126);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Float float1 = new Float(0.0F);
      Double.isFinite(0.0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "SR-~#%(a&ZOjr+]";
      stringArray0[1] = "isreverseBytes";
      stringArray0[2] = "SR-~#%(a&ZOjr+]";
      stringArray0[3] = "SR-~#%(a&ZOjr+]";
      hashMap2.putAll(hashMap3);
      stringArray0[4] = "SR-~#%(a&ZOjr+]";
      stringArray0[5] = "SR-~#%(a&ZOjr+]";
      stringArray0[6] = "SR-~#%(a&ZOjr+]";
      stringArray0[7] = "SR-~#%(a&ZOjr+]";
      String string0 = JSONObject.quote("m|/TrF");
      assertEquals("\"m|/TrF\"", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.3309780944634566
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "JSON ddes not allow non-finite numbers.";
      stringArray0[2] = "F2$@3aN{P=/";
      Integer integer0 = new Integer(2582);
      Integer integer1 = new Integer(2582);
      Integer integer2 = new Integer(2582);
      Integer integer3 = new Integer(2582);
      Integer integer4 = new Integer(62);
      Integer.getInteger(stringArray0[1], (-1425));
      Integer integer5 = new Integer(2582);
      Integer integer6 = new Integer(2582);
      Integer integer7 = new Integer(59);
      Float float0 = new Float((double) (-484));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer3);
      Integer integer8 = new Integer(62);
      Integer integer9 = new Integer((-1));
      Integer.compare(458, (-1261));
      linkedList0.push(integer9);
      Integer integer10 = new Integer((-1));
      Integer integer11 = new Integer(2582);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(59);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList1.removeFirstOccurrence(linkedList0);
      linkedList3.addAll((Collection<? extends Integer>) linkedList1);
      Integer integer0 = new Integer(2223);
      linkedList1.add(integer0);
      Integer integer1 = new Integer(2223);
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList1.add(integer1);
      Integer integer2 = new Integer(9);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("toS");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double.sum(3523.27F, (-1.0F));
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      Double double0 = new Double(3523.27F);
      BiFunction<Double, Object, Double> biFunction0 = (BiFunction<Double, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.merge(double0, double0, biFunction0);
      Double double1 = new Double(3523.27F);
      Double.isFinite((-1.0F));
      JSONObject.testValidity(hashMap1);
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.71747278103407
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BiConsumer<Double, Object> biConsumer0 = (BiConsumer<Double, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      Double double2 = new Double(0.0);
      Double.sum(0.0, 0.0);
      Double.sum(2697.8933066426202, 3094.356307923946);
      Double.sum(0.0, 39.931322819118975);
      Double.isFinite(0.0);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double.isFinite(5792.249614566566);
      Float.min((-1447.5996F), 1.0F);
      Float.sum((-1447.5996F), 0.0F);
      Float.sum(1.0F, (-1447.5996F));
      Float.min(0.0F, 1.0F);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("min", double1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.157280995708096
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = " of ";
      stringArray0[1] = "kzL18_2vb96fV+s";
      stringArray0[2] = "G^`5pm- t_v(=bt6@";
      stringArray0[3] = "getiterator";
      stringArray0[4] = "toS";
      stringArray0[5] = "isaddLast";
      stringArray0[6] = "des";
      stringArray0[7] = "false";
      stringArray0[8] = "o%hTe*;z&0pR";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject1 = jSONObject0.put("q!!,T:t_Q8LjH 4B", (Map) hashMap0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.624116119148923
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "m]f>[`8VmkE";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getBoolean(".Rgt93mZFbH0oWh\"Pro");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".Rgt93mZFbH0oWh\\\"Pro\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = new Double(0.0);
      double double1 = Double.min(0.0, 0.0);
      JSONObject.testValidity(double0);
      assertEquals((double)double0, (double)double1, 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Float.min(10, 10);
      Float float0 = new Float(0.0);
      Float.isFinite((-1.0F));
      Float.sum(0.0F, 0.0F);
      Float.max(10, 0.0F);
      Float.sum(10, (-2010.1979F));
      Float.min(10, 0.0F);
      Float.sum((-586.3521F), 0.0F);
      Float.sum(0.0F, 610.6562F);
      Float.sum(1.0F, (-1668.09F));
      Float.min(17.63F, 1.0F);
      Float.sum((-79.0F), 12.415658F);
      Float.isFinite((-1667.09F));
      Float.sum(1.0F, 1.0F);
      Float.min((-1500.7472F), 1742.8859F);
      Float.max((-1224.121F), 10.0F);
      Float.max((-1519.0F), 10);
      Float.max(1.0F, 0.0F);
      String string0 = JSONObject.doubleToString((-2000.1979F));
      assertEquals("-2000.1978759765625", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      Double double2 = new Double(0.0);
      Double.sum(0.0, 0.0);
      Double.sum(2686.76850962, 3094.356307923946);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      BiFunction<Double, Object, Double> biFunction0 = (BiFunction<Double, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.computeIfPresent(double0, biFunction0);
      hashMap1.put(double2, double1);
      Double double3 = new Double(3094.356307923946);
      hashMap1.put(double0, double3);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject("ji!`Co= ");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      boolean boolean0 = jSONObject1.has("[");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.1979082164840023
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double double0 = new Double(1);
      Double double1 = new Double(0.0);
      Double double2 = new Double(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      Float float0 = new Float((float) 1);
      Float.min(0.0F, 0.0F);
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Float float1 = new Float(0.0F);
      String string0 = JSONObject.quote(" at character");
      assertEquals("\" at character\"", string0);
      
      Long long0 = new Long(1);
      Long.sum(1, 1);
      Long.max(1, 2L);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.toString(1, 1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.074771057671452
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      Double double2 = new Double(0.0);
      Double.sum(0.0, 0.0);
      Double.sum(2686.76850962, 3094.356307923946);
      Double.sum(0.0, 39.931322819118975);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double.isFinite(5781.124817543946);
      hashMap0.put(double2, double0);
      String string0 = JSONObject.valueToString(hashMap0, 7, 7);
      assertNotNull(string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.123414632303858
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", false);
      jSONObject1.remove("");
      jSONObject0.names();
      Object object0 = new Object();
      jSONObject0.accumulate("wheel.json.JSONObject$Null", object0);
      jSONObject0.put("", 0.0);
      JSONObject.getNames(jSONObject0);
      jSONObject1.put("", (-3150));
      jSONObject0.optString("wheel.json.JSONObject$Null", "");
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.942011807410644
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("*");
      jSONObject0.optLong("*", 479L);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("`", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("*", (Object) jSONArray0);
      jSONObject0.remove("`");
      jSONObject1.optLong("isvalueOf", 479L);
      jSONObject1.optInt("`", (-1888));
      jSONObject1.optLong("`", (long) (-1888));
      jSONObject0.optDouble("val");
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject2 = new JSONObject(linkedList0);
      jSONArray0.optInt(10, 10);
      jSONObject0.toString((-1888), (-722));
      jSONObject0.optInt("{\"java.lang.String@0000000007\": []}");
      try { 
        jSONObject0.getLong("`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.81339511456497
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Boolean boolean0 = new Boolean("Substring bounds error");
      jSONObject0.optLong("Substring bounds error");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.append("Substring bounds error", jSONArray0);
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)74);
      Byte.compare((byte)0, (byte) (-52));
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONArray.", byte0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.remove("R`HVdP4OB/");
      jSONObject0.put("eq", (boolean) boolean0);
      Byte.toUnsignedLong((byte)59);
      Byte.toUnsignedLong((byte)79);
      jSONArray0.optLong(1088, 0L);
      jSONArray0.toJSONObject((JSONArray) null);
      Long long0 = new Long(0L);
      jSONObject1.optInt("Substring bounds error", 52);
      jSONObject0.isNull("Substring bounds error");
      try { 
        jSONArray0.getJSONObject(52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[52] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.641028838824753
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2761;
      jSONArray0.put(2761, (Map) null);
      JSONObject jSONObject0 = jSONArray0.getJSONObject(2761);
      Double double0 = new Double(2761);
      Double.min(2761, 0.0);
      jSONArray0.put((Object) double0);
      String string0 = ",";
      JSONObject jSONObject1 = jSONObject0.accumulate(",", ",");
      short short0 = (short) (-866);
      Short short1 = new Short((short) (-866));
      JSONObject.valueToString(short1);
      JSONObject.numberToString(short1);
      JSONObject.numberToString(short1);
      jSONObject1.optString(",");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("java.lang.Short@0000000004", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject0.put("java.lang.Short@0000000004", (Map) null);
      try { 
        jSONObject2.getLong(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.5089863373826136
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Integer integer0 = new Integer(909);
      Integer integer1 = new Integer(909);
      Integer integer2 = new Integer(58);
      Integer.getInteger((String) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer3 = new Integer((-30756608));
      linkedList0.add((Integer) null);
      Integer integer4 = new Integer(109);
      linkedList0.add((Integer) null);
      Integer integer5 = new Integer((-26674136));
      Float float0 = new Float(900.0);
      Integer integer6 = new Integer(810);
      linkedList0.add(integer4);
      Integer integer7 = new Integer(1675);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(1);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.8345423744156613
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Integer integer0 = new Integer(909);
      Integer integer1 = new Integer(909);
      Integer integer2 = new Integer(909);
      Integer integer3 = new Integer(909);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer4 = new Integer(58);
      Integer integer5 = new Integer(909);
      Integer integer6 = new Integer(276);
      Integer integer7 = new Integer(4690);
      linkedList0.add(integer6);
      Integer integer8 = new Integer(58);
      Integer integer9 = new Integer(4690);
      Integer integer10 = new Integer((-132));
      Integer integer11 = new Integer((-132));
      Float float0 = new Float((double) (-132));
      Object object0 = new Object();
      Long long0 = new Long((-2081));
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.remainderUnsigned((-1L), 2502L);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.16116490370348
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "JSON ddes not allow non-finite numbers.";
      stringArray0[1] = "F2$@3aN{P=/";
      stringArray0[2] = "F2$@3aN{P=/";
      Integer integer0 = new Integer(2582);
      Integer integer1 = new Integer(2582);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer2 = new Integer(2582);
      Integer integer3 = new Integer(62);
      Integer integer4 = new Integer(62);
      linkedList0.add(integer4);
      linkedList0.pop();
      Integer integer5 = new Integer(2582);
      Integer integer6 = new Integer(2582);
      linkedList0.add(integer4);
      Integer integer7 = new Integer(59);
      Float float0 = new Float((double) (-484));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.add(integer3);
      Integer integer8 = new Integer((-874));
      Integer integer9 = new Integer((-874));
      linkedList1.push(integer9);
      Float float1 = new Float(263.42283351865);
      Float.min((-1.0F), 2582);
      String[] stringArray1 = JSONObject.getNames((Object) "F2$@3aN{P=/");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      JSONObject jSONObject0 = new JSONObject(integer1);
      String[] stringArray2 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray2);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray2.length);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer integer0 = new Integer(31);
      Integer integer1 = new Integer(31);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "]M}";
      stringArray0[1] = "is";
      stringArray0[2] = "] is not a JSONArray.";
      stringArray0[3] = "getreverse";
      stringArray0[4] = "' and instead saw '";
      stringArray0[5] = "";
      stringArray0[6] = "min";
      stringArray0[7] = "0";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      try { 
        jSONObject0.getJSONArray("' and instead saw '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"' and instead saw '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.586577333232116
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("qlLX42x?]]_\"@", hashMap0);
      jSONObject0.optString("\"\"", (String) null);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double double0 = new Double(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Float float0 = new Float(4213.0518126);
      Float.min(0.0F, 0.0F);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("gZyEdOjU}EpR>_klZ{");
      Integer integer0 = new Integer(1);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("gZyEdOjU}EpR>_klZ{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gZyEdOjU}EpR>_klZ{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.613129842728147
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      Float float0 = new Float((float) (byte)0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      linkedList0.containsAll(linkedList1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(391L);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "Bad value from toJSONString: ";
      stringArray0[2] = "Substring bounds error";
      Long.sum(391L, 2548L);
      stringArray0[3] = "RvNYL|=h*D";
      stringArray0[5] = "wC9p0Xo`VF6";
      stringArray0[6] = "no";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      int int0 = jSONObject0.optInt("] is not a JSONArray.", (int) (byte)0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.9186308613668221
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-3IdWSNbQM>b=6M]TR";
      stringArray0[1] = "SQ'2(2_D}G\\9DgIfZ";
      stringArray0[2] = "Substring bounds error";
      stringArray0[3] = "ac";
      stringArray0[4] = "SQ'2(2_D}G\\9DgIfZ";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.removeLastOccurrence("?JOS'Wf");
      int int0 = jSONObject0.optInt("-3IdWSNbQM>b=6M]TR", 32);
      assertEquals(32, int0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double double0 = new Double(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Float float0 = new Float(4213.0518126);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Double double1 = new Double(0.0);
      BiFunction<Double, Double, Double> biFunction0 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap2.merge(double0, double1, biFunction0);
      float float1 = 0.0F;
      Float float2 = new Float((double) 0.0F);
      Double.isFinite(0.0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "SR-~#%(a&ZOjr+]";
      stringArray0[1] = "SR-~#%(a&ZOjr+]";
      stringArray0[2] = "SR-~#%(a&ZOjr+]";
      hashMap2.putAll(hashMap3);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.0510277937423593
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "JSON does not allow non-finite numbers.";
      stringArray0[1] = "F2$@3aN{P=/";
      stringArray0[2] = "F2$@3aN{P=/";
      Float.isFinite(0.0F);
      Float.sum(0.0F, 0.0F);
      Float.max(0.0F, 0.0F);
      Float.sum((-5204.0F), 0.0F);
      Double.sum((-5204.0F), (-2653.973400286835));
      Double.sum(0.0F, (-7857.973400286835));
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double.isFinite(0.0F);
      Float.sum(1.0F, 0.0F);
      Float.sum(187.3F, 3069.7F);
      Double double0 = new Double((-899.7965028471896));
      Double.isFinite((-5204.0F));
      Double.isFinite(643.530010710186);
      Double.isFinite((-1.0));
      Double.sum(0.0F, (-1344.13267));
      Double.isFinite((-3249.03));
      Double double1 = new Double((-7857.973400286835));
      JSONObject jSONObject0 = new JSONObject(double1);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("sKO($U-Ae@3GrVR2\"", (Object) "JSON does not allow non-finite numbers.");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "JSON does not allow non-finite numbers.";
      stringArray0[1] = "F2$@3aN{P=/";
      stringArray0[2] = "F2$@3aN{P=/";
      Float.isFinite(0.0F);
      Float.sum(0.0F, 0.0F);
      Float.max(0.0F, 0.0F);
      Float.sum((-5204.0F), 0.0F);
      Double.sum((-5204.0F), (-2653.973400286835));
      Double.sum(0.0F, (-7857.973400286835));
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double.isFinite(0.0F);
      Float.sum(187.3F, 3069.7F);
      Double double0 = new Double((-899.7965028471896));
      Double.isFinite((-5204.0F));
      Double.isFinite(643.530010710186);
      Double.isFinite((-1.0));
      Double.min((-1.0), (-77.3));
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSON does not allow non-finite numbers.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.9263548464292746
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Expected a ':' after a key", 45);
      Float float0 = new Float((double) 45);
      jSONObject1.put("SQ'2(2_D}G\\9DgIfZ", (Object) null);
      float float1 = Float.min(45, 45);
      assertEquals(45.0F, float1, 0.01F);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.701816533805549
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "w/";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-3636));
      linkedList0.add(integer0);
      jSONObject0.put("w/", (Collection) linkedList0);
      int int0 = 2241;
      Integer integer1 = new Integer(2241);
      jSONObject0.put("", (-1.0));
      jSONObject0.optLong("");
      jSONObject0.getInt("");
      JSONTokener jSONTokener0 = new JSONTokener("false");
      JSONTokener jSONTokener1 = new JSONTokener("false");
      jSONTokener1.nextClean();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of false
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.0614530777546363
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.addAll((Collection<? extends Integer>) linkedList1);
      Integer integer0 = new Integer(2241);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(2241);
      JSONObject jSONObject1 = jSONObject0.put("R", (double) 2241);
      Float.min(0.0F, (-4333.03F));
      Boolean boolean0 = new Boolean(false);
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      jSONObject1.optInt("pr`\"3z[@JS7J");
      assertEquals(1, jSONObject0.length());
      
      int int0 = jSONObject1.getInt("R");
      assertEquals(2241, int0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.3413067719199936
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("w/", (Collection) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.addAll((Collection<? extends Integer>) linkedList1);
      Integer integer0 = new Integer(2241);
      Integer integer1 = new Integer(1176);
      linkedList0.add(integer1);
      Integer integer2 = new Integer(114);
      jSONObject0.put(",,4W", (-1059.7));
      jSONObject0.optInt("QAAJ");
      Boolean boolean0 = new Boolean("QAAJ");
      jSONObject1.optLong(",,4W", 0L);
      try { 
        jSONObject1.getDouble("w/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"w/\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double double0 = new Double(1);
      Double double1 = new Double(1);
      Double double2 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("isspliterator", (-2787.6263779376));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.7612118325115627
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("w/", (Collection) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.addAll((Collection<? extends Integer>) linkedList1);
      Integer integer0 = new Integer(2241);
      Integer integer1 = new Integer(1176);
      linkedList0.add((Integer) null);
      Integer.getInteger("w/", integer1);
      try { 
        jSONObject1.put("w/", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.4280152667384085
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1192.11687713);
      jSONObject0.accumulate("b>uVMNH]9V", double0);
      jSONObject0.put("getpush", false);
      Byte.toUnsignedLong((byte)59);
      Long long0 = new Long(59L);
      jSONObject0.isNull("getpush");
      jSONObject0.get("getpush");
      jSONObject0.put("getpush", (double) (byte)59);
      jSONObject0.put("null", false);
      StringWriter stringWriter0 = new StringWriter();
      try { 
        jSONObject0.getLong("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.8479965994826997
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("gZyEdOjU}EpR>_klZ{");
      jSONTokener0.nextTo('c');
      Integer integer0 = new Integer(1);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("gZyEdOjU}EpR>_klZ{", "gZyEdOjU}EpR>_klZ{");
      try { 
        jSONObject0.getJSONObject("gZyEdOjU}EpR>_klZ{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gZyEdOjU}EpR>_klZ{\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Float.min(10, 10);
      Float float0 = new Float(0.0);
      Float.isFinite((-1.0F));
      Float.sum((-237.809F), 10.0F);
      Float.sum((-237.809F), 1558.9374F);
      Float.max(10, (-227.809F));
      Float.max((-1.0F), 0.0F);
      Float.sum(10, (-2010.1979F));
      Float.min(10, (-237.809F));
      Float.sum(1.0F, (-237.809F));
      Float.sum(1441.2485F, (-2000.1979F));
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("max");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"max\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.8124199695444132
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("Substrig bound error", false);
      jSONObject0.optLong("Yad value fromHtoJSONStriOg: ");
      JSONObject jSONObject1 = new JSONObject();
      Object object1 = jSONObject0.opt("ishashCode");
      assertNull(object1);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double double0 = new Double(1);
      Double double1 = new Double(1);
      Double double2 = new Double(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      Float.min(0.0F, 0.0F);
      Float.isFinite(1);
      Float.max((-1668.09F), (-1668.09F));
      Float.max(0.0F, (-1.0F));
      Float.sum((-1668.09F), 0.0F);
      Float.min((-651.2198F), (-1668.09F));
      Float.sum((-1668.09F), 316.0F);
      Float.min((-651.2198F), 0.0F);
      Float.max(0.0F, (-1668.09F));
      Float.max((-1668.09F), 0.0F);
      Float.max(0.0F, 0.0F);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double double0 = new Double(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Float float0 = new Float(4213.0518126);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Double double1 = new Double(0.0);
      BiFunction<Double, Double, Double> biFunction0 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap2.merge(double0, double1, biFunction0);
      Float float1 = new Float((double) 0.0F);
      Double.isFinite(0.0);
      String string0 = JSONObject.quote("SR-~#%(a&ZOjr+]");
      assertEquals("\"SR-~#%(a&ZOjr+]\"", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.0370355698889098
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optBoolean("Substring bounds error", false);
      jSONObject0.optLong("Yad value fromHtoJSONStriOg: ");
      jSONObject0.optInt("Bs%hwA]clv");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("Yad value fromHtoJSONStriOg: ", jSONArray0);
      Byte byte0 = new Byte((byte)0);
      JSONObject jSONObject2 = jSONObject0.accumulate("] is not a JSONArray.", byte0);
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.optLong((int) (byte) (-52), (-2313L));
      jSONObject0.put("eq", false);
      Byte.toUnsignedLong((byte)59);
      Long long0 = new Long(0L);
      Long.max(0L, 185L);
      StringWriter stringWriter1 = (StringWriter)jSONArray0.write(stringWriter0);
      stringWriter1.append((CharSequence) "j^1_nIc|!UkhXN<-");
      jSONObject2.write(stringWriter1);
      jSONObject1.get("] is not a JSONArray.");
      try { 
        jSONObject2.getInt("eq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"eq\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.317929967939443
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "JSON ddes not allow non-finite numbers.";
      stringArray0[1] = "F2$@3aN{P=/";
      stringArray0[2] = "F2$@3aN{P=/";
      Integer integer0 = new Integer(2582);
      Integer.getInteger("JSON ddes not allow non-finite numbers.");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(2582);
      Integer integer2 = new Integer(62);
      Integer integer3 = new Integer(62);
      linkedList0.add(integer3);
      Float float0 = new Float((double) 2582);
      Float float1 = new Float(0.0);
      Object object0 = new Object();
      Long long0 = new Long(1L);
      JSONObject jSONObject0 = new JSONObject((Object) "F2$@3aN{P=/");
      Long.compare(0L, 0L);
      Integer integer4 = new Integer(10);
      Integer integer5 = new Integer((-484));
      Integer integer6 = new Integer((-2536));
      linkedList0.add(integer1);
      Integer integer7 = new Integer(47);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.8809458399103205
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optBoolean("Substring bounds error", false);
      jSONObject0.optLong("Yad value fromHtoJSONStriOg: ");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.append("Yad value fromHtoJSONStriOg: ", jSONArray0);
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONArray.", byte0);
      jSONObject0.put("eq", false);
      Byte.toUnsignedLong((byte)59);
      jSONArray0.toJSONObject((JSONArray) null);
      Long long0 = new Long(0L);
      jSONObject1.append("j^1_nIc|!UkhXN<-", long0);
      Long.max(0L, 185L);
      JSONObject.valueToString(jSONObject0, 0, (byte)59);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("Yad value fromHtoJSONStriOg: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Yad value fromHtoJSONStriOg: 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.compare(false, false);
      Boolean.logicalAnd(true, true);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      Float float0 = new Float(4213.0518126);
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Double double0 = new Double(0.0);
      BiFunction<Double, Double, Double> biFunction0 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Float float1 = new Float((double) 0.0F);
      Double.isFinite(0.0);
      hashMap1.putAll(hashMap2);
      String string0 = JSONObject.valueToString(float1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Float.min(10, 10);
      Float float0 = new Float(0.0);
      Float.isFinite((-1.0F));
      Float.sum(0.0F, 10.0F);
      Float.max(10, 10.0F);
      Float.max((-1.0F), 0.0F);
      Float.sum(10, (-2010.1979F));
      Float.min(10, 0.0F);
      Float.sum(1.0F, 0.0F);
      Float.sum((-586.3521F), 0.0F);
      String string0 = JSONObject.quote(";%e9=.\";=Gn%");
      assertEquals("\";%e9=.\\\";=Gn%\"", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.9583597845490086
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double double0 = new Double(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Float float0 = new Float(4213.0518126);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Short short0 = new Short((short) (-687));
      HashMap<Double, Double> hashMap4 = new HashMap<Double, Double>();
      Float float1 = new Float((-57.1005F));
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap4);
      assertEquals(2, jSONObject1.length());
      
      String string0 = jSONObject0.toString((-1863));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.3336889061514894
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Integer integer0 = new Integer(909);
      Integer integer1 = new Integer(909);
      Integer.toUnsignedLong(109);
      Integer integer2 = new Integer(909);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer3 = new Integer(58);
      Integer integer4 = new Integer(909);
      Integer integer5 = new Integer(58);
      Integer integer6 = new Integer(4690);
      Integer integer7 = new Integer((-132));
      Integer integer8 = new Integer((-132));
      Integer integer9 = new Integer(4087);
      Integer integer10 = new Integer(109);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.add(integer7);
      Integer integer11 = new Integer(55);
      Integer.sum(103, 1068);
      Float float0 = new Float(1.0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer12 = new Integer((-1289));
      Integer integer13 = new Integer((-16));
      linkedList2.add(integer9);
      Integer integer14 = new Integer(4690);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(3809.603444288641);
      Double double1 = new Double(3809.603444288641);
      Double.sum((-2318.1792997887), 0.0);
      Float float0 = new Float((-3023.1853F));
      Float.min(1681.1903F, 1.0F);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Float float1 = new Float((-3023.1853F));
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.9869709911323412
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.optBoolean("");
      jSONObject0.optInt("$=p^3/3>$SHB?3SN_");
      jSONObject0.optString("RvNYLN=h*D", "");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Object object0 = JSONObject.NULL;
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.982872544928112
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.optBoolean("");
      jSONObject0.optInt("$=p^3/3>$SHB?3SN_");
      jSONObject0.optString("RvNYLN=h*D", "");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      Byte byte0 = new Byte((byte)124);
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put(byte0, boolean0);
      stringArray0[1] = "";
      jSONObject1.names();
      jSONObject0.optLong("");
      jSONObject1.isNull("RvNYLN=h*D");
      jSONObject1.put("", 0L);
      jSONObject1.optInt("a#)k");
      jSONObject1.optDouble("", (double) 0L);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Long long0 = new Long(0L);
      JSONObject jSONObject2 = jSONObject0.append("RvNYLN=h*D", (Object) null);
      Object object0 = new Object();
      JSONObject jSONObject3 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject2.getInt("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double double0 = new Double(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Float float0 = new Float(4213.0518126);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Double double1 = new Double(0.0);
      Double.max(1253.9812438967533, 4213.0518126);
      BiFunction<Double, Double, Double> biFunction0 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap2.merge(double0, double1, biFunction0);
      Float float1 = new Float(4213.0518126);
      HashMap<Double, Double> hashMap4 = new HashMap<Double, Double>();
      Float float2 = new Float(0.0F);
      Short short0 = new Short((short) (-760));
      HashMap<Double, Double> hashMap5 = new HashMap<Double, Double>();
      Float float3 = new Float((-2069.1106F));
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.toString((int) (short) (-760), (-62353088));
      String string0 = jSONObject0.toString((int) (short) (-760));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.792383011118817
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("w/", (Collection) linkedList0);
      Integer integer0 = new Integer(46);
      String string0 = "A JSONArray text must start with '['";
      Integer integer1 = new Integer(46);
      linkedList0.add(integer1);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONObject jSONObject2 = jSONObject0.append("\"\"", linkedList0);
      jSONObject2.toJSONArray(jSONArray0);
      linkedList0.add(integer1);
      jSONObject1.optDouble("A JSONArray text must start with '['", (double) 2201);
      Double double0 = new Double(2201);
      jSONArray0.optDouble(46, (double) 60);
      Double double1 = new Double(2201);
      Float float0 = new Float((float) 60);
      Float float1 = new Float(3279.28F);
      Long long0 = new Long(60);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONObject2.putOpt("_5qPiq)", linkedList1);
      Float float2 = new Float((double) 60);
      linkedList1.add(float2);
      String string1 = "val";
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("val");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of val
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Float.min(10, 10);
      Float.isFinite(10.0F);
      Float.sum((-237.809F), 10.0F);
      Float.sum((-237.809F), 1558.9374F);
      float float0 = new Float((float) 10);
      Float.sum(10, (-2010.1979F));
      Float.min(10, (-237.809F));
      Float.sum((-2000.1979F), 1321.1284F);
      Float.sum((-679.06946F), 10.0F);
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Float float0 = new Float(1657.0F);
      String string0 = JSONObject.valueToString(float0, 8, 125);
      assertNotNull(string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.262436762135496
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-705));
      Integer integer1 = new Integer((-705));
      Integer integer2 = new Integer((-1334));
      linkedList0.add(integer2);
      Integer integer3 = new Integer(13);
      Integer integer4 = new Integer((-1334));
      linkedList0.add(integer4);
      Integer integer5 = new Integer((-705));
      Float float0 = new Float((double) 13);
      Float float1 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(integer0);
      Integer integer6 = new Integer((-705));
      Integer integer7 = new Integer((-705));
      linkedList1.add(integer7);
      Integer integer8 = new Integer(74);
      jSONObject0.toString(2965);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.3336889061514894
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Integer integer0 = new Integer(909);
      Integer integer1 = new Integer(909);
      Integer.toUnsignedLong(109);
      Integer integer2 = new Integer(909);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer3 = new Integer(58);
      Integer integer4 = new Integer(909);
      Integer integer5 = new Integer(58);
      Integer integer6 = new Integer(4690);
      Integer integer7 = new Integer((-132));
      Integer integer8 = new Integer((-132));
      Integer integer9 = new Integer(4087);
      Integer integer10 = new Integer(109);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.add(integer7);
      Integer integer11 = new Integer(55);
      Float float0 = new Float(1.0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer12 = new Integer((-1473));
      Integer integer13 = new Integer((-16));
      linkedList2.add(integer9);
      Integer integer14 = new Integer(4690);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Integer integer0 = new Integer(60);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(688);
      linkedList0.add(integer0);
      Integer integer2 = new Integer(688);
      linkedList0.add(integer2);
      Integer integer3 = new Integer(60);
      Float float0 = new Float(0.0);
      Float float1 = new Float((double) 60);
      JSONObject jSONObject0 = new JSONObject(float1);
      Integer integer4 = new Integer(60);
      linkedList0.add(integer4);
      Integer integer5 = new Integer((-4512));
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double double0 = new Double(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Float float0 = new Float(4213.0518126);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Float float1 = new Float(0.0F);
      Double.isFinite(0.0);
      HashMap<Double, Double> hashMap4 = new HashMap<Double, Double>();
      Float float2 = new Float(0.0F);
      Float.min(0.0F, 0.0F);
      HashMap<Double, Double> hashMap5 = new HashMap<Double, Double>();
      Float float3 = new Float(0.0F);
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")|7O%wp;'wrn6";
      stringArray0[1] = "";
      stringArray0[2] = "W]w";
      stringArray0[3] = "~Ww7}K9}]*yQ~";
      stringArray0[4] = ";Ovh&e}EM\"0F";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      String string0 = "\\u";
      String string1 = jSONObject0.optString(string0, string0);
      assertEquals("\\u", string1);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "JSON ddes not allow non-finite numbers.";
      stringArray0[2] = "F2$@3aN{P=/";
      Integer integer0 = new Integer(2563);
      Integer integer1 = new Integer(2563);
      Integer integer2 = new Integer(2563);
      Integer integer3 = new Integer(2563);
      Integer integer4 = new Integer(62);
      Integer.getInteger(stringArray0[1], (-1425));
      Integer integer5 = new Integer(2563);
      Integer integer6 = new Integer(2563);
      Integer integer7 = new Integer(59);
      Float float0 = new Float((double) (-484));
      Integer integer8 = new Integer((-874));
      Integer integer9 = new Integer((-874));
      Integer.compare(458, (-1261));
      Integer integer10 = new Integer((-1));
      Integer integer11 = new Integer(2563);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "wheel.json.JSONObject$1";
      stringArray1[1] = "F2$@3aN{P=/";
      stringArray1[2] = "JSON ddes not allow non-finite numbers.";
      stringArray1[3] = "W; 7mN}$)PR?N";
      stringArray1[4] = "F2$@3aN{P=/";
      stringArray1[5] = "F2$@3aN{P=/";
      JSONObject jSONObject0 = new JSONObject("W; 7mN}$)PR?N", stringArray1);
      String string0 = jSONObject0.optString("F2$@3aN{P=/");
      assertEquals("", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.872205386132768
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "getpush";
      jSONObject0.optDouble("getpush");
      Float float0 = new Float((-2392.0));
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      Long long0 = new Long((byte)59);
      JSONObject jSONObject1 = new JSONObject(long0);
      int int0 = (-1125);
      int int1 = 10;
      JSONTokener jSONTokener0 = new JSONTokener("getpush");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of getpush
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.0890092384766588
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Float.min(10, 10);
      Float float0 = new Float(0.0);
      Float.isFinite((-1.0F));
      Float.sum(0.0F, 0.0F);
      Float.max(10, 0.0F);
      Float.sum(10, (-2010.1979F));
      Float.min(10, 0.0F);
      Float.sum((-586.3521F), 0.0F);
      Float.sum(0.0F, 610.6562F);
      Float.isFinite((-1224.121F));
      Float.sum(1.0F, (-1668.09F));
      Float.min(17.63F, 1.0F);
      Float.sum((-79.0F), 12.415658F);
      Float.isFinite((-1667.09F));
      Float.sum(1.0F, 1.0F);
      Float.min((-1500.7472F), 1742.8859F);
      Float.max((-1519.0F), 10);
      Float.max(1.0F, 0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.1185317310357568
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double double0 = new Double(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Float float0 = new Float(4213.0518126);
      hashMap2.replace(double0, (Double) null);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      String[] stringArray0 = new String[8];
      stringArray0[1] = "{}";
      stringArray0[4] = "{}";
      stringArray0[5] = "{}";
      stringArray0[6] = "{}";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      boolean boolean0 = jSONObject1.optBoolean("isparseBoolean");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.9621693083585323
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "JSON does not allow non-finite numbers.";
      Float.isFinite(0.0F);
      Float.sum(0.0F, 0.0F);
      Float.max(0.0F, 0.0F);
      Float.sum((-5204.0F), 0.0F);
      Double.sum((-5204.0F), (-2653.973400286835));
      Double.sum(0.0F, (-7857.973400286835));
      Double.isFinite(0.0F);
      Float.sum(1.0F, 0.0F);
      Float.sum(187.3F, 3069.7F);
      Double double0 = new Double((-899.7965028471896));
      Double.isFinite((-5204.0F));
      Double.isFinite(643.530010710186);
      Double.isFinite((-1.0));
      Double.min(187.3F, (-1.0));
      Double.sum(0.0F, (-1344.13267));
      Double.min((-1.0), (-77.3));
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.getDouble(stringArray0[2]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Integer.getInteger("iP#-K6w^f");
      JSONObject.valueToString((Object) null, (-3950), (-3950));
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "]]HgJM2J";
      stringArray0[1] = "null";
      stringArray0[2] = "null";
      stringArray0[3] = "iP#-K6w^f";
      stringArray0[4] = "iP#-K6w^f";
      Object object1 = new Object();
      Short short0 = new Short((short) (-1382));
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-3950));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = JSONObject.quote("JSO =des notallow non-znite nmbers.");
      assertEquals("\"JSO =des notallow non-znite nmbers.\"", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.6969987794394548
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      Float.sum((-1.0F), 3742.0F);
      JSONObject.getNames((Object) null);
      Object object1 = new Object();
      JSONObject.getNames(object1);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BiConsumer<Double, Object> biConsumer0 = (BiConsumer<Double, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.9016010062582942
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Integer integer0 = new Integer(60);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(688);
      Integer integer2 = new Integer(60);
      Integer.getInteger("XY)!4EY/6");
      linkedList0.add(integer2);
      Integer integer3 = new Integer(688);
      linkedList0.add(integer3);
      Integer integer4 = new Integer(60);
      Float float0 = new Float(0.0);
      Float float1 = new Float((double) 60);
      JSONObject jSONObject0 = new JSONObject(float1);
      Integer integer5 = new Integer(60);
      linkedList0.add(integer5);
      Integer integer6 = new Integer((-4512));
      try { 
        jSONObject0.getLong("XY)!4EY/6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"XY)!4EY/6\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.1185317310357568
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double double0 = new Double(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Float float0 = new Float(4213.0518126);
      hashMap2.replace(double0, (Double) null);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      jSONObject0.optInt("is");
      String[] stringArray0 = new String[8];
      stringArray0[1] = "{}";
      stringArray0[4] = "{}";
      stringArray0[5] = "{}";
      stringArray0[6] = "{}";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double double0 = new Double(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Float float0 = new Float(4213.0518126);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      String[] stringArray0 = new String[8];
      stringArray0[1] = "{}";
      stringArray0[3] = "{}";
      stringArray0[5] = "{}";
      try { 
        jSONObject0.getDouble("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.188118820046292
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Double double0 = new Double(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Float float0 = new Float(4213.0518126);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Double double1 = new Double(0.0);
      BiFunction<Double, Double, Double> biFunction0 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap2.merge(double0, double1, biFunction0);
      Float float1 = new Float((double) 0.0F);
      Double.isFinite(0.0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "SR-~#%(a&ZOjr+]";
      stringArray0[1] = "isreverseBytes";
      stringArray0[2] = "SR-~#%(a&ZOjr+]";
      stringArray0[3] = "SR-~#%(a&ZOjr+]";
      hashMap2.putAll(hashMap3);
      stringArray0[4] = "SR-~#%(a&ZOjr+]";
      stringArray0[5] = "SR-~#%(a&ZOjr+]";
      stringArray0[6] = "SR-~#%(a&ZOjr+]";
      stringArray0[7] = "SR-~#%(a&ZOjr+]";
      JSONObject jSONObject0 = new JSONObject(hashMap2, stringArray0);
      String string0 = JSONObject.doubleToString(0.0F);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{>g~|NK^L\"");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 11 of {>g~|NK^L\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{>g~|NK^L;\"");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{>g~|NK^L;\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 10 of {>g~|NK^L;\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
