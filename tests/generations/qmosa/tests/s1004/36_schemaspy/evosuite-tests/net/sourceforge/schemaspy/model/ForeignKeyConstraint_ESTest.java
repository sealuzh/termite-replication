/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 16:09:51 GMT 2019
 */

package net.sourceforge.schemaspy.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.DatabaseMetaData;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Pattern;
import net.sourceforge.schemaspy.Config;
import net.sourceforge.schemaspy.model.ForeignKeyConstraint;
import net.sourceforge.schemaspy.model.Table;
import net.sourceforge.schemaspy.model.TableColumn;
import net.sourceforge.schemaspy.model.xml.SchemaMeta;
import net.sourceforge.schemaspy.model.xml.TableColumnMeta;
import net.sourceforge.schemaspy.view.DefaultSqlFormatter;
import net.sourceforge.schemaspy.view.SqlFormatter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ForeignKeyConstraint_ESTest extends ForeignKeyConstraint_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0163561792644664
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Bz^+\"!Q`", 202, (-245));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.isRestrictDelete();
      foreignKeyConstraint0.getDeleteRuleDescription();
      Integer integer0 = new Integer(692);
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      linkedList0.add(tableColumn0);
      TableColumn tableColumn1 = linkedList0.pollLast();
      linkedList0.add(tableColumn1);
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      Config config0 = new Config();
      Config config1 = new Config();
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta("CURRENT_TIME", "", "xifZ{23");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Specified meta file \"CURRENT_TIME\" does not exist
         //
         verifyException("net.sourceforge.schemaspy.model.xml.SchemaMeta", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Cascad2 on delete", 0, 1139);
      boolean boolean0 = foreignKeyConstraint0.isImplied();
      assertFalse(boolean0);
      
      Config config0 = new Config();
      DefaultSqlFormatter defaultSqlFormatter0 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter1 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter2 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter3 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter4 = new DefaultSqlFormatter();
      config0.getSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter5 = new DefaultSqlFormatter();
      config0.setSqlFormatter((SqlFormatter) defaultSqlFormatter5);
      DefaultSqlFormatter defaultSqlFormatter6 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter7 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter8 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter9 = new DefaultSqlFormatter();
      Config config1 = new Config();
      config1.getSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter10 = new DefaultSqlFormatter();
      config1.setSqlFormatter((SqlFormatter) defaultSqlFormatter0);
      DefaultSqlFormatter defaultSqlFormatter11 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter12 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter13 = new DefaultSqlFormatter();
      config1.getSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter14 = new DefaultSqlFormatter();
      Config.getInstance();
      foreignKeyConstraint0.getChildColumns();
      int int0 = foreignKeyConstraint0.getUpdateRule();
      assertEquals(0, int0);
      
      List<TableColumn> list0 = foreignKeyConstraint0.getParentColumns();
      ForeignKeyConstraint.toString(list0);
      assertEquals(1139, foreignKeyConstraint0.getDeleteRule());
      assertEquals(0, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "dOzshOVl() `QjwXk", (-1711), 1);
      DefaultSqlFormatter defaultSqlFormatter0 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter1 = new DefaultSqlFormatter();
      Config config0 = new Config();
      config0.getSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter2 = new DefaultSqlFormatter();
      config0.getSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter3 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter4 = new DefaultSqlFormatter();
      config0.getSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter5 = new DefaultSqlFormatter();
      config0.setSqlFormatter((SqlFormatter) defaultSqlFormatter2);
      Config.getInstance();
      DefaultSqlFormatter defaultSqlFormatter6 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter7 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter8 = new DefaultSqlFormatter();
      Config.getInstance();
      DefaultSqlFormatter defaultSqlFormatter9 = new DefaultSqlFormatter();
      Config.getInstance();
      int int0 = foreignKeyConstraint0.getUpdateRule();
      assertEquals((-1711), int0);
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", foreignKeyConstraint0.getDeleteRuleDescription());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.20990515890827
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "dOzshOVl() `QjwXk", 1139, (-7));
      boolean boolean0 = foreignKeyConstraint0.isNullOnDelete();
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis((-7));
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleDescription();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "dOzshOVl() `QjwXk", 1490, 1139);
      boolean boolean1 = foreignKeyConstraint1.isRestrictDelete();
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint1.getDeleteRuleName();
      boolean boolean2 = foreignKeyConstraint1.isNullOnDelete();
      assertTrue(boolean2 == boolean1);
      
      int int0 = foreignKeyConstraint0.getDeleteRule();
      assertEquals((-7), int0);
      assertEquals(1139, foreignKeyConstraint0.getUpdateRule());
      assertFalse(foreignKeyConstraint0.isRestrictDelete());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3116685323353927
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)81;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Kcw8Q}#");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Kcw8Q}#", 3, 3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Kcw8Q}#");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "Kcw8Q}#", 1485, 24);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5P");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      foreignKeyConstraint0.getDeleteRuleDescription();
      Integer integer0 = new Integer(24);
      foreignKeyConstraint0.getDeleteRuleAlias();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(513L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(24);
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleName();
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "kM\".{,v%+Vt1h^qF{I", 1429, 16);
      foreignKeyConstraint0.compareTo(foreignKeyConstraint0);
      DefaultSqlFormatter defaultSqlFormatter0 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter1 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter2 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter3 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter4 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter5 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter6 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter7 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter8 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter9 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter10 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter11 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter12 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter13 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter14 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter15 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter16 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter17 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter18 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter19 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter20 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter21 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter22 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter23 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter24 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter25 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter26 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter27 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter28 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter29 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter30 = new DefaultSqlFormatter();
      assertFalse(defaultSqlFormatter30.equals((Object)defaultSqlFormatter7));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.117850213502465
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 1139, 0);
      foreignKeyConstraint0.isReal();
      foreignKeyConstraint0.getParentColumns();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "", 1139, 1005);
      foreignKeyConstraint0.isReal();
      boolean boolean0 = foreignKeyConstraint0.isReal();
      foreignKeyConstraint0.getParentColumns();
      System.setCurrentTimeMillis(0L);
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Cascade on delete", string0);
      
      boolean boolean1 = foreignKeyConstraint1.isNullOnDelete();
      assertEquals(1005, foreignKeyConstraint1.getDeleteRule());
      assertFalse(boolean1 == boolean0);
      
      foreignKeyConstraint0.getDeleteRule();
      String string1 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertFalse(foreignKeyConstraint0.isNullOnDelete());
      assertEquals("C", string1);
      assertEquals(1139, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.271412459918071
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "dOzshOVl() `QjwXk", (-1683), 44);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "dOzshOVl() `QjwXk", 2368, 44);
      ForeignKeyConstraint foreignKeyConstraint2 = new ForeignKeyConstraint((Table) null, "dOzshOVl() `QjwXk", 44, 0);
      foreignKeyConstraint0.isReal();
      System.setCurrentTimeMillis((-2605L));
      foreignKeyConstraint2.isCascadeOnDelete();
      foreignKeyConstraint2.getDeleteRuleDescription();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint1.isNullOnDelete();
      int int0 = new Integer((-1683));
      assertEquals((-1683), int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3792645742252927
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "dOzshOVl() `QjwXk", 1139, 1);
      foreignKeyConstraint0.isNullOnDelete();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.getDeleteRuleAlias();
      String string0 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("R", string0);
      
      foreignKeyConstraint0.getDeleteRuleDescription();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "", (-1), 1);
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      foreignKeyConstraint1.getDeleteRuleDescription();
      foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
      String string1 = foreignKeyConstraint1.getDeleteRuleDescription();
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", string1);
      
      int int0 = foreignKeyConstraint1.compareTo(foreignKeyConstraint0);
      assertEquals((-17), int0);
      
      ForeignKeyConstraint foreignKeyConstraint2 = new ForeignKeyConstraint((Table) null, "", 0, 0);
      String string2 = foreignKeyConstraint2.getDeleteRuleAlias();
      assertEquals("C", string2);
      
      String string3 = foreignKeyConstraint1.getDeleteRuleName();
      assertEquals("Restrict delete", string3);
      
      boolean boolean1 = foreignKeyConstraint0.isNullOnDelete();
      assertFalse(boolean1 == boolean0);
      assertEquals(1139, foreignKeyConstraint0.getUpdateRule());
      
      String string4 = foreignKeyConstraint2.getDeleteRuleName();
      assertFalse(foreignKeyConstraint2.isNullOnDelete());
      assertFalse(foreignKeyConstraint2.isRestrictDelete());
      assertEquals("Cascade on delete", string4);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0319321182240695
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "dOzsh2Vl() `ljwXk", 1139, 2);
      foreignKeyConstraint0.getDeleteRuleName();
      Config config0 = Config.getInstance();
      foreignKeyConstraint0.isNullOnDelete();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleAlias();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "", 20, (-3919));
      config0.setRankDirBugEnabled(false);
      SqlFormatter sqlFormatter0 = config0.getSqlFormatter();
      config0.setSqlFormatter(sqlFormatter0);
      Config.getInstance();
      DefaultSqlFormatter defaultSqlFormatter0 = new DefaultSqlFormatter();
      DatabaseMetaData databaseMetaData0 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(databaseMetaData0).getNumericFunctions();
      doReturn((String) null).when(databaseMetaData0).getSQLKeywords();
      doReturn((String) null).when(databaseMetaData0).getStringFunctions();
      doReturn((String) null).when(databaseMetaData0).getSystemFunctions();
      doReturn((String) null).when(databaseMetaData0).getTimeDateFunctions();
      defaultSqlFormatter0.getKeywords(databaseMetaData0);
      config0.getSqlFormatter();
      Config.getInstance();
      DefaultSqlFormatter defaultSqlFormatter1 = new DefaultSqlFormatter();
      Config config1 = null;
      try {
        config1 = new Config((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.setComments("~M,@lc\",");
      tableColumn0.removeParent((TableColumn) null);
      tableColumn0.removeChild((TableColumn) null);
      tableColumn0.removeParent((TableColumn) null);
      tableColumn0.setIsAutoUpdated(true);
      tableColumn0.setIsAutoUpdated(true);
      tableColumn0.unlinkChildren();
      tableColumn0.setIsAutoUpdated(false);
      tableColumn0.removeChild((TableColumn) null);
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint((TableColumn) null, tableColumn0, 1891, 1714);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.20990515890827
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "dOzshOVl() `QjwXk", 1139, 1);
      boolean boolean0 = foreignKeyConstraint0.isNullOnDelete();
      System.setCurrentTimeMillis(1);
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleDescription();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "dOzshOVl() `QjwXk", 1490, 1139);
      boolean boolean1 = foreignKeyConstraint1.isRestrictDelete();
      assertTrue(boolean1 == boolean0);
      
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", string0);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("R", string1);
      
      foreignKeyConstraint1.getDeleteRuleName();
      boolean boolean2 = foreignKeyConstraint1.isNullOnDelete();
      assertFalse(boolean2);
      
      int int0 = foreignKeyConstraint0.getDeleteRule();
      assertEquals(1139, foreignKeyConstraint0.getUpdateRule());
      assertTrue(foreignKeyConstraint0.isRestrictDelete());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "CascagXokn aee^", 1434, 1434);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "stXa*wh~Y VU.i_=sK", 1434, 918);
      foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
      DefaultSqlFormatter defaultSqlFormatter0 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter1 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter2 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter3 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter4 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter5 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter6 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter7 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter8 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter9 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter10 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter11 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter12 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter13 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter14 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter15 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter16 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter17 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter18 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter19 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter20 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter21 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter22 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter23 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter24 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter25 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter26 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter27 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter28 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter29 = new DefaultSqlFormatter();
      assertFalse(defaultSqlFormatter29.equals((Object)defaultSqlFormatter9));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1643961386648423
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "dOz!hO!l() `jwXk", 2002, 1);
      boolean boolean0 = foreignKeyConstraint0.isNullOnDelete();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleDescription();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "dOz!hO!l() `jwXk", 1488, 3);
      boolean boolean1 = foreignKeyConstraint1.isRestrictDelete();
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", string0);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("R", string1);
      
      foreignKeyConstraint1.getDeleteRuleName();
      boolean boolean2 = foreignKeyConstraint1.isNullOnDelete();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string2 = foreignKeyConstraint1.getDeleteRuleName();
      assertEquals("Restrict delete", string2);
      assertEquals(1488, foreignKeyConstraint1.getUpdateRule());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = (-1665);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "B%{szcj)bP", (-1665), (-65));
      foreignKeyConstraint0.isRestrictDelete();
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta((String) null, "*2~wfn", "*2~wfn");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`v8Q}#");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`v8Q}#");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "`v8Q}#", 1485, 24);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5P");
      foreignKeyConstraint0.isRestrictDelete();
      Integer integer0 = new Integer(24);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(513L);
      System.setCurrentTimeMillis((byte)25);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultSqlFormatter defaultSqlFormatter0 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter1 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter2 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter3 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter4 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter5 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter6 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter7 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter8 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter9 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter10 = new DefaultSqlFormatter();
      Config config0 = Config.getInstance();
      config0.setSqlFormatter((SqlFormatter) defaultSqlFormatter7);
      DefaultSqlFormatter defaultSqlFormatter11 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter12 = new DefaultSqlFormatter();
      config0.setSqlFormatter((SqlFormatter) defaultSqlFormatter3);
      DefaultSqlFormatter defaultSqlFormatter13 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter14 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter15 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter16 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter17 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter18 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter19 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter20 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter21 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter22 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter23 = new DefaultSqlFormatter();
      config0.setSqlFormatter((SqlFormatter) defaultSqlFormatter0);
      DefaultSqlFormatter defaultSqlFormatter24 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter25 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter26 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter27 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter28 = new DefaultSqlFormatter();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 16, (-212));
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "GROUP", 37, 1434);
      int int0 = foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
      assertEquals(14, int0);
      assertEquals(37, foreignKeyConstraint1.getUpdateRule());
      assertEquals(1434, foreignKeyConstraint1.getDeleteRule());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "6B[YszZj)Obg", 1, (-58));
      foreignKeyConstraint0.addParentColumn((TableColumn) null);
      DefaultSqlFormatter defaultSqlFormatter0 = new DefaultSqlFormatter();
      Config.getInstance();
      DefaultSqlFormatter defaultSqlFormatter1 = new DefaultSqlFormatter();
      Config config0 = new Config();
      Config config1 = new Config();
      DefaultSqlFormatter defaultSqlFormatter2 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter3 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter4 = new DefaultSqlFormatter();
      Config config2 = null;
      try {
        config2 = new Config((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "/z;I:4a1U\"a-/kExc>u", 489, 489);
      int int0 = foreignKeyConstraint0.getUpdateRule();
      assertEquals(489, foreignKeyConstraint0.getDeleteRule());
      assertEquals(489, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Cascag2o&n deet", 1434, 16);
      DefaultSqlFormatter defaultSqlFormatter0 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter1 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter2 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter3 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter4 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter5 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter6 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter7 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter8 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter9 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter10 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter11 = new DefaultSqlFormatter();
      Config config0 = new Config();
      config0.setSqlFormatter((SqlFormatter) defaultSqlFormatter8);
      DefaultSqlFormatter defaultSqlFormatter12 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter13 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter14 = new DefaultSqlFormatter();
      config0.setSqlFormatter((SqlFormatter) defaultSqlFormatter3);
      DefaultSqlFormatter defaultSqlFormatter15 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter16 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter17 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter18 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter19 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter20 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter21 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter22 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter23 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter24 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter25 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter26 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter27 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter28 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter29 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter30 = new DefaultSqlFormatter();
      foreignKeyConstraint0.getChildTable();
      assertEquals(1434, foreignKeyConstraint0.getUpdateRule());
      assertEquals(16, foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "CascagXo&n aee^", 1434, 16);
      DefaultSqlFormatter defaultSqlFormatter0 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter1 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter2 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter3 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter4 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter5 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter6 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter7 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter8 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter9 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter10 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter11 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter12 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter13 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter14 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter15 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter16 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter17 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter18 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter19 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter20 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter21 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter22 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter23 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter24 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter25 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter26 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter27 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter28 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter29 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter30 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter31 = new DefaultSqlFormatter();
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "DIAGNOSTICS", (-1683), (-1683));
      foreignKeyConstraint0.addChildColumn((TableColumn) null);
      DefaultSqlFormatter defaultSqlFormatter0 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter1 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter2 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter3 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter4 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter5 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter6 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter7 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter8 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter9 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter10 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter11 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter12 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter13 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter14 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter15 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter16 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter17 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter18 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter19 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter20 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter21 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter22 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter23 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter24 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter25 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter26 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter27 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter28 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter29 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter30 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter31 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter32 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter33 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter34 = new DefaultSqlFormatter();
      assertFalse(defaultSqlFormatter34.equals((Object)defaultSqlFormatter23));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "6B[YszZj)Ob5", (-1683), (-17));
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.compareTo((ForeignKeyConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      System.setCurrentTimeMillis((-304L));
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      linkedList0.add((TableColumn) null);
      // Undeclared exception!
      try { 
        ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.150020577119469
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)120;
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, (byte) (-116), (byte)42);
      FileSystemHandling.shouldAllThrowIOExceptions();
      foreignKeyConstraint0.getName();
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleName();
      boolean boolean0 = foreignKeyConstraint0.isNullOnDelete();
      assertEquals(42, foreignKeyConstraint0.getDeleteRule());
      assertFalse(boolean0);
      assertEquals((-116), foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.266914708793633
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Table table0 = null;
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "dOzshOVl() `QjwXk", 1139, 1);
      foreignKeyConstraint0.isNullOnDelete();
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleName();
      Config.getInstance();
      foreignKeyConstraint0.getName();
      boolean boolean0 = true;
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      TableColumn tableColumn1 = null;
      tableColumn0.removeParent((TableColumn) null);
      Pattern pattern0 = Pattern.compile("", 5147);
      // Undeclared exception!
      try { 
        tableColumn0.matches(pattern0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 1127, 1127);
      foreignKeyConstraint0.isCascadeOnDelete();
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "";
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "R", (-1683), (-6292));
      foreignKeyConstraint0.isCascadeOnDelete();
      String string1 = null;
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta("S_=(\"_-_6?qGLeE>mg", "S_=(\"_-_6?qGLeE>mg", "S_=(\"_-_6?qGLeE>mg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Specified meta file \"S_=(\"_-_6?qGLeE>mg\" does not exist
         //
         verifyException("net.sourceforge.schemaspy.model.xml.SchemaMeta", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.053882356878545
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.unlinkChildren();
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      tableColumn0.removeParent(tableColumn1);
      tableColumn1.removeChild(tableColumn0);
      TableColumnMeta tableColumnMeta2 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta2).getComments();
      doReturn((String) null).when(tableColumnMeta2).getDefaultValue();
      doReturn(0).when(tableColumnMeta2).getDigits();
      doReturn((String) null).when(tableColumnMeta2).getId();
      doReturn((String) null).when(tableColumnMeta2).getName();
      doReturn(0).when(tableColumnMeta2).getSize();
      doReturn((String) null).when(tableColumnMeta2).getType();
      doReturn(false).when(tableColumnMeta2).isAutoUpdated();
      doReturn(false).when(tableColumnMeta2).isNullable();
      TableColumn tableColumn2 = new TableColumn((Table) null, tableColumnMeta2);
      tableColumn2.unlinkParents();
      tableColumn2.removeParent(tableColumn0);
      tableColumn2.removeParent(tableColumn1);
      tableColumn0.removeChild(tableColumn2);
      tableColumn1.setIsAutoUpdated(true);
      tableColumn1.setIsAutoUpdated(true);
      tableColumn2.setIsAutoUpdated(true);
      tableColumn2.setIsAutoUpdated(true);
      tableColumn2.setIsAutoUpdated(true);
      tableColumn1.unlinkChildren();
      tableColumn1.setIsAutoUpdated(true);
      tableColumn2.removeParent(tableColumn0);
      tableColumn1.removeParent(tableColumn0);
      tableColumn2.setType("");
      tableColumn0.unlinkChildren();
      tableColumn0.removeChild(tableColumn2);
      tableColumn1.setIsAutoUpdated(true);
      tableColumn0.removeParent(tableColumn2);
      tableColumn2.removeChild(tableColumn1);
      tableColumn2.removeChild(tableColumn0);
      tableColumn2.unlinkParents();
      tableColumn1.unlinkChildren();
      tableColumn2.removeChild(tableColumn1);
      tableColumn0.unlinkParents();
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint(tableColumn1, tableColumn2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-32);
      byteArray0[5] = (byte) (-32);
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.removeParent((TableColumn) null);
      tableColumn0.removeChild((TableColumn) null);
      tableColumn0.removeParent((TableColumn) null);
      tableColumn0.setIsAutoUpdated(true);
      tableColumn0.setIsAutoUpdated(true);
      tableColumn0.unlinkChildren();
      tableColumn0.setIsAutoUpdated(false);
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint(tableColumn0, tableColumn0, (byte) (-35), 36);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }
}
