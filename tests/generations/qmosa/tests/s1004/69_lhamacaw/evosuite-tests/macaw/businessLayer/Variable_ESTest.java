/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 14:24:08 GMT 2019
 */

package macaw.businessLayer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import macaw.businessLayer.DerivedVariable;
import macaw.businessLayer.OntologyTerm;
import macaw.businessLayer.RawVariable;
import macaw.businessLayer.SupportingDocument;
import macaw.businessLayer.User;
import macaw.businessLayer.ValueLabel;
import macaw.businessLayer.Variable;
import macaw.businessLayer.VariableSummary;
import macaw.system.ChangeEventType;
import macaw.system.MacawChangeEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Variable_ESTest extends Variable_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.050042457945135
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B");
      predicate0.or(predicate0);
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setLabel("B");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.containsSourceVariable(rawVariable0);
      Variable.validateFields(rawVariable0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      RawVariable rawVariable1 = new RawVariable();
      RawVariable rawVariable2 = new RawVariable();
      rawVariable1.setIdentifier((-1024));
      User user1 = new User("B", "B");
      user1.setCounty("B");
      rawVariable0.setName("B");
      User user2 = new User();
      RawVariable.detectFieldChanges(user1, rawVariable0, rawVariable2);
      User.checkValidUserIDField("B");
      derivedVariable0.addSourceVariable(rawVariable1);
      assertEquals("-1024", rawVariable1.getDisplayItemIdentifier());
      
      RawVariable rawVariable3 = new RawVariable();
      RawVariable rawVariable4 = new RawVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel valueLabel1 = new ValueLabel();
      derivedVariable0.removeValueLabel(valueLabel0);
      RawVariable rawVariable5 = new RawVariable();
      derivedVariable0.getLabel();
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      LinkedList<OntologyTerm> linkedList0 = new LinkedList<OntologyTerm>();
      arrayList1.addAll((Collection<? extends OntologyTerm>) linkedList0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      rawVariable3.updateOntologyTerm(ontologyTerm1);
      assertEquals(0, rawVariable3.getIdentifier());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.917087076020465
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      predicate1.and(predicate0);
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setLabel("B");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.containsSourceVariable(rawVariable0);
      derivedVariable0.setIdentifier(338);
      Variable.validateFields(rawVariable0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      RawVariable rawVariable1 = new RawVariable();
      LinkedList<RawVariable> linkedList0 = new LinkedList<RawVariable>();
      ArrayList<Variable> arrayList1 = new ArrayList<Variable>(linkedList0);
      arrayList1.stream();
      arrayList1.addAll((Collection<? extends Variable>) linkedList0);
      derivedVariable0.addSourceVariables(arrayList1);
      RawVariable rawVariable2 = new RawVariable();
      rawVariable1.setIdentifier((-1024));
      User user1 = new User("B", "B");
      User user2 = new User();
      RawVariable.detectFieldChanges(user1, rawVariable0, rawVariable2);
      derivedVariable0.addSourceVariable(rawVariable1);
      RawVariable rawVariable3 = new RawVariable();
      RawVariable rawVariable4 = new RawVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel valueLabel1 = new ValueLabel();
      derivedVariable0.removeValueLabel(valueLabel0);
      RawVariable rawVariable5 = new RawVariable();
      rawVariable5.setAvailability("B");
      derivedVariable0.getLabel();
      RawVariable rawVariable6 = new RawVariable();
      ArrayList<MacawChangeEvent> arrayList2 = RawVariable.detectFieldChanges(user0, rawVariable5, rawVariable0);
      assertEquals("B", rawVariable5.getAvailability());
      assertEquals(2, arrayList2.size());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.865478073434939
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.getForm();
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.containsSourceVariable(rawVariable0);
      derivedVariable0.setQuestionNumber("5O|sZ>mM");
      System.setCurrentTimeMillis((-2122L));
      derivedVariable0.removeSourceVariable(rawVariable0);
      derivedVariable0.getAlias();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable1.setAvailability("");
      derivedVariable0.addSourceVariable(rawVariable1);
      rawVariable1.questionNumber = "";
      rawVariable1.getAlias();
      rawVariable1.getCodeBookNumber();
      derivedVariable0.getNotes();
      rawVariable0.clone();
      try { 
        RawVariable.validateFields(rawVariable1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.RawVariable", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.784754009304183
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      User user0 = new User();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      derivedVariable0.removeValueLabel(valueLabel0);
      ValueLabel valueLabel1 = new ValueLabel();
      derivedVariable0.addValueLabel(valueLabel1);
      ArrayList<Variable> arrayList0 = derivedVariable0.getSourceVariables();
      derivedVariable0.addSourceVariables(arrayList0);
      arrayList0.ensureCapacity(359);
      derivedVariable0.clone();
      derivedVariable0.addSourceVariables(arrayList0);
      DerivedVariable.detectFieldChanges(user0, derivedVariable0, derivedVariable0);
      derivedVariable0.notes = ",=JD";
      derivedVariable0.getDisplayItemIdentifier();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.setCleaningDescription("pq51b&23%ls8qrU[%`Fn");
      ontologyTerm0.setNameSpace("0");
      Variable.detectFieldChanges(user0, derivedVariable0, derivedVariable0);
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      derivedVariable0.getNotes();
      derivedVariable0.removeSourceVariables(arrayList0);
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setYear("pq51b&23%ls8qrU[%`Fn");
      derivedVariable0.setSourceVariables(arrayList0);
      Variable.validateFields(derivedVariable0);
      derivedVariable0.containsSourceVariable(rawVariable0);
      derivedVariable0.setSourceVariables(arrayList0);
      try { 
        RawVariable.validateFields(rawVariable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.RawVariable", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.785406854138612
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.getName();
      rawVariable0.setName("B");
      RawVariable rawVariable2 = new RawVariable();
      User user0 = new User();
      User user1 = new User();
      User user2 = new User();
      derivedVariable0.createVariableSummary();
      derivedVariable0.addSourceVariable(rawVariable2);
      Object object0 = new Object();
      Predicate<Object> predicate2 = Predicate.isEqual(object0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate7 = predicate6.and(predicate5);
      Predicate<Object> predicate8 = predicate4.or(predicate2);
      predicate5.and(predicate8);
      ChangeEventType changeEventType0 = ChangeEventType.ALIAS_FILE_PATH;
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent(changeEventType0, "", "_#`{m664X%EIwL}");
      Predicate.isEqual((Object) macawChangeEvent0);
      predicate4.negate();
      predicate7.negate();
      predicate0.or(predicate5);
      Integer integer0 = new Integer((-2067947201));
      User user3 = new User();
      RawVariable rawVariable3 = new RawVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      rawVariable3.removeSupportingDocument(supportingDocument0);
      rawVariable3.getAlternativeVariable();
      derivedVariable0.cloneAttributes(rawVariable1);
      rawVariable0.getDisplayName();
      assertEquals("B", rawVariable0.getName());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.896934599451277
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.getName();
      rawVariable0.setName("B");
      RawVariable rawVariable2 = new RawVariable();
      User user1 = new User();
      User user2 = new User();
      User user3 = new User();
      RawVariable.detectFieldChanges(user3, rawVariable0, rawVariable2);
      derivedVariable0.createVariableSummary();
      derivedVariable0.addSourceVariable(rawVariable2);
      Object object0 = new Object();
      Predicate<Object> predicate2 = Predicate.isEqual(object0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) "");
      predicate6.and(predicate5);
      Predicate<Object> predicate7 = predicate4.or(predicate2);
      predicate5.and(predicate7);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.setDescription("ke'");
      ontologyTerm0.setDescription("w8wF/qoU(,");
      User user4 = new User("q", "variable.form.label");
      Variable.validateFields(rawVariable0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      assertEquals(0, ontologyTerm2.getIdentifier());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.7041614023374603
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.getName();
      RawVariable rawVariable2 = new RawVariable();
      User user1 = new User();
      ArrayList<MacawChangeEvent> arrayList0 = RawVariable.detectFieldChanges(user1, rawVariable0, rawVariable2);
      assertEquals(0, arrayList0.size());
      
      derivedVariable0.addSourceVariable(rawVariable2);
      Object object0 = new Object();
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, rawVariable1);
      Predicate<Object> predicate2 = Predicate.isEqual(object0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      Predicate<Object> predicate5 = predicate4.negate();
      predicate4.test(predicate2);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate7 = predicate6.and(predicate5);
      Predicate<Object> predicate8 = predicate4.or(predicate2);
      predicate5.and(predicate8);
      ChangeEventType changeEventType0 = ChangeEventType.ALIAS_FILE_PATH;
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent(changeEventType0, "", "");
      Predicate.isEqual((Object) macawChangeEvent0);
      predicate4.negate();
      predicate7.negate();
      predicate0.or(predicate5);
      Integer integer0 = new Integer((-2067947214));
      User user2 = new User();
      RawVariable rawVariable3 = new RawVariable();
      MacawChangeEvent macawChangeEvent1 = Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable0);
      assertNotNull(macawChangeEvent1);
      assertEquals("Changed variable \"Alternative Variable\", field \"\", from \"\" to \"{3}\".", macawChangeEvent1.getChangeMessage());
      
      rawVariable3.getAlternativeVariable();
      derivedVariable0.cloneAttributes(rawVariable1);
      assertEquals("Unknown", rawVariable1.getCategory());
      assertFalse(rawVariable1.isNewRecord());
      assertEquals("Unknown", rawVariable1.getAvailability());
      assertEquals("Unknown", rawVariable1.getCleaningStatus());
      
      ArrayList<Variable> arrayList1 = new ArrayList<Variable>();
      derivedVariable0.setSourceVariables(arrayList1);
      assertEquals(0, derivedVariable0.getIdentifier());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8943363994106277
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      User user0 = new User();
      user0.setFirstName("");
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.getName();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable1.setName("}");
      RawVariable rawVariable2 = new RawVariable();
      User user1 = new User();
      User user2 = new User();
      User user3 = new User();
      RawVariable.detectFieldChanges(user1, rawVariable0, rawVariable1);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.createVariableSummary();
      derivedVariable0.addSourceVariable(rawVariable2);
      Object object0 = new Object();
      ValueLabel valueLabel0 = new ValueLabel();
      Predicate.isEqual((Object) valueLabel0);
      Predicate.isEqual((Object) user3);
      ChangeEventType changeEventType0 = ChangeEventType.ALIAS_FILE_PATH;
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent(changeEventType0, "", "");
      Predicate.isEqual((Object) rawVariable1);
      Integer integer0 = new Integer((-2067947201));
      User user4 = new User();
      RawVariable rawVariable3 = new RawVariable();
      Variable.detectChangesInAlternativeVariable(user1, rawVariable1, rawVariable2);
      assertEquals("}", rawVariable1.getName());
      
      rawVariable3.getAlternativeVariable();
      rawVariable0.getAlternativeVariable();
      rawVariable0.getQuestionNumber();
      assertEquals(0, rawVariable0.getIdentifier());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.7020843809584587
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.getName();
      RawVariable rawVariable2 = new RawVariable();
      User user1 = new User();
      User user2 = new User();
      ArrayList<MacawChangeEvent> arrayList0 = new ArrayList<MacawChangeEvent>();
      derivedVariable0.createVariableSummary();
      derivedVariable0.addSourceVariable(rawVariable2);
      Object object0 = new Object();
      Predicate<Object> predicate2 = Predicate.isEqual(object0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      Predicate<Object> predicate5 = predicate4.negate();
      predicate4.test(predicate2);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate7 = predicate6.and(predicate5);
      predicate4.or(predicate2);
      ChangeEventType changeEventType0 = ChangeEventType.ALIAS_FILE_PATH;
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent(changeEventType0, "", "_#`{m664X%EIwL}");
      predicate7.negate();
      predicate4.negate();
      predicate4.negate();
      predicate0.or(predicate5);
      Integer integer0 = new Integer((-2067947214));
      User user3 = new User();
      RawVariable rawVariable3 = new RawVariable();
      RawVariable rawVariable4 = new RawVariable();
      Variable.detectChangesInAlternativeVariable(user3, rawVariable1, rawVariable4);
      rawVariable0.getAlternativeVariable();
      derivedVariable0.cloneAttributes(rawVariable2);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.985518177209008
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      User user0 = new User();
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.getName();
      RawVariable rawVariable2 = new RawVariable();
      rawVariable0.setIdentifier(93);
      User user1 = new User();
      User user2 = new User();
      User user3 = new User();
      RawVariable.detectFieldChanges(user3, rawVariable0, rawVariable2);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.createVariableSummary();
      derivedVariable0.addSourceVariable(rawVariable2);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Predicate.isEqual((Object) "");
      Integer integer0 = new Integer((-2067947214));
      User user4 = new User();
      RawVariable rawVariable3 = new RawVariable();
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable0);
      rawVariable3.getAlternativeVariable();
      // Undeclared exception!
      try { 
        derivedVariable1.cloneAttributes((Variable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) user0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate2.negate();
      predicate0.test((Object) null);
      Predicate<Object> predicate5 = predicate3.or(predicate4);
      Predicate<Object> predicate6 = predicate2.or(predicate0);
      Predicate<Object> predicate7 = predicate6.and(predicate5);
      predicate0.and(predicate2);
      Integer integer0 = new Integer(2);
      Predicate<Object> predicate8 = predicate3.negate();
      Predicate<Object> predicate9 = predicate2.negate();
      Predicate<Object> predicate10 = predicate4.and(predicate1);
      predicate7.or(predicate3);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate11 = predicate5.negate();
      predicate11.or(predicate1);
      predicate5.test(predicate0);
      Integer integer1 = new Integer(2);
      Predicate<Object> predicate12 = predicate3.negate();
      predicate9.and(predicate10);
      predicate8.test((Object) null);
      predicate7.and(predicate8);
      predicate12.or(predicate7);
      Predicate<Object> predicate13 = predicate8.negate();
      predicate11.and(predicate13);
      // Undeclared exception!
      try { 
        Variable.validateFields((Variable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.121867243522427
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      ontologyTerm0.setNameSpace("general.error.blankFie");
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      rawVariable0.setCleaned(true);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm2);
      rawVariable0.questionNumber = "tRJeWS(C N${PTuj";
      User user0 = new User("general.error.blankFie", "l*R^2p~LyRCUX");
      Variable.validateFields(rawVariable0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      User user1 = new User();
      RawVariable rawVariable1 = new RawVariable();
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable1);
      rawVariable0.getQuestionNumber();
      assertEquals("tRJeWS(C N${PTuj", rawVariable0.getQuestionNumber());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3105624464720997
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, SupportingDocument> function0 = (Function<Object, SupportingDocument>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, SupportingDocument> function1 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function0);
      function1.apply(unaryOperator0);
      Function<Object, SupportingDocument> function2 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function1);
      unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function1);
      Function<Object, SupportingDocument> function3 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function2);
      Function<Object, SupportingDocument> function4 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function3);
      unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function4);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.createVariableSummary();
      derivedVariable0.addSourceVariable((Variable) null);
      Object object0 = new Object();
      Integer integer0 = new Integer((-369));
      Object object1 = new Object();
      Predicate.isEqual(object1);
      Predicate.isEqual((Object) "");
      Integer integer1 = new Integer((-369));
      Integer integer2 = new Integer((-1));
      User user0 = new User();
      RawVariable rawVariable0 = new RawVariable();
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, (Variable) null);
      rawVariable0.getAlternativeVariable();
      System.setCurrentTimeMillis((-2144L));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      // Undeclared exception!
      try { 
        derivedVariable0.addOntologyTerms((ArrayList<OntologyTerm>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.7295539659863346
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B");
      predicate0.or(predicate0);
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setLabel("B");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.containsSourceVariable(rawVariable0);
      derivedVariable0.setIdentifier(338);
      Variable.validateFields(rawVariable0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      RawVariable rawVariable1 = new RawVariable();
      LinkedList<RawVariable> linkedList0 = new LinkedList<RawVariable>();
      ArrayList<Variable> arrayList1 = new ArrayList<Variable>(linkedList0);
      arrayList1.stream();
      arrayList1.addAll((Collection<? extends Variable>) linkedList0);
      RawVariable rawVariable2 = new RawVariable();
      rawVariable1.setIdentifier((-1024));
      User user1 = new User("B", "B");
      User user2 = new User();
      RawVariable.detectFieldChanges(user1, rawVariable0, rawVariable2);
      User.checkValidUserIDField("variable.alternativeVariable.label");
      derivedVariable0.addSourceVariable(rawVariable1);
      RawVariable rawVariable3 = new RawVariable();
      RawVariable rawVariable4 = new RawVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      valueLabel0.setIdentifier(338);
      ValueLabel valueLabel1 = new ValueLabel();
      derivedVariable0.removeValueLabel(valueLabel0);
      RawVariable rawVariable5 = new RawVariable();
      Variable.detectChangesInAlternativeVariable(user1, rawVariable1, rawVariable4);
      rawVariable5.getAlternativeVariable();
      derivedVariable0.cloneAttributes(rawVariable5);
      Variable.detectFieldChanges(user2, rawVariable2, rawVariable5);
      assertEquals("338", rawVariable5.getDisplayItemIdentifier());
      assertEquals("Unknown", rawVariable5.getAvailability());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.95572818841326
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      User user0 = new User();
      user0.setPhone("UNABLE_TO_UPDATE_LEANING_STATE");
      user0.setAddressLine2("B");
      user0.setAffiliation("UNABLE_TO_UPDATE_LEANING_STATE");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      User user1 = new User("YV0dB0hk", "UNABLE_TO_CHECK_VALUE_LABEL_DUPLICATES");
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setCleaned(true);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      rawVariable0.setLabel("(e{");
      derivedVariable0.setIdentifier((-2869));
      User user2 = new User("ONTOLOGYTER]!M", "ONTOLOGYTER]!M");
      Variable.validateFields(rawVariable0);
      RawVariable rawVariable1 = new RawVariable();
      RawVariable.detectFieldChanges(user1, rawVariable1, rawVariable1);
      rawVariable1.setIdentifier(122);
      User user3 = new User();
      RawVariable.detectFieldChanges(user1, rawVariable0, rawVariable1);
      derivedVariable0.createVariableSummary();
      derivedVariable0.addSourceVariable(rawVariable1);
      RawVariable rawVariable2 = new RawVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      User user4 = new User();
      user4.setPhone("h~wL!uddM(c*z");
      Variable.detectFieldChanges(user2, rawVariable2, rawVariable2);
      int int0 = rawVariable1.getIdentifier();
      assertEquals(122, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1411461439556105
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      User user0 = new User();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm1);
      ontologyTerm0.setIdentifier(491);
      ontologyTerm1.setNameSpace("Cg");
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      boolean boolean0 = derivedVariable0.containsOntologyTerm(ontologyTerm0);
      assertFalse(boolean0);
      
      LinkedList<OntologyTerm> linkedList0 = new LinkedList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList2 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm1);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList3 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList4 = new ArrayList<OntologyTerm>();
      arrayList2.addAll((Collection<? extends OntologyTerm>) arrayList3);
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm3);
      assertEquals(0, rawVariable0.getIdentifier());
      assertFalse(rawVariable0.isNewRecord());
      assertFalse(rawVariable0.isCleaned());
      assertFalse(rawVariable0.isCoded());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.7552218194636753
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      User user0 = new User();
      RawVariable rawVariable0 = new RawVariable();
      Variable.validateFields(rawVariable0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable1.setLabel("UNABLE_TO_UPDATE_LEANING_STATE");
      User user1 = new User("UtO*5$OPOrcz5M0{Cz", "=fJ{~.wVn#");
      RawVariable rawVariable2 = new RawVariable();
      RawVariable.detectFieldChanges(user0, rawVariable1, rawVariable0);
      User user2 = new User();
      RawVariable rawVariable3 = new RawVariable();
      user2.setFirstName("DUPLICATE_VALUE_LABEL");
      LinkedList<RawVariable> linkedList0 = new LinkedList<RawVariable>();
      ArrayList<Variable> arrayList0 = new ArrayList<Variable>(linkedList0);
      RawVariable.detectFieldChanges(user1, rawVariable1, rawVariable0);
      assertEquals("UNABLE_TO_UPDATE_LEANING_STATE", rawVariable1.getLabel());
      
      derivedVariable0.createVariableSummary();
      derivedVariable0.addSourceVariable(rawVariable2);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "DUPLICATE_VALUE_LABEL");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      predicate1.negate();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate1);
      predicate0.and(predicate0);
      predicate0.negate();
      Predicate<Object> predicate5 = predicate3.and(predicate1);
      predicate4.or(predicate5);
      Integer integer0 = new Integer((-2067947214));
      User user3 = new User();
      RawVariable rawVariable4 = new RawVariable();
      Variable.detectChangesInAlternativeVariable(user2, rawVariable4, rawVariable2);
      rawVariable2.getAlternativeVariable();
      derivedVariable0.cloneAttributes(rawVariable3);
      assertEquals("Unknown", rawVariable3.getCategory());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.746066410830336
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      User user0 = new User();
      user0.setPhone("UNABLE_TO_UPDATE_LEANING_STATE");
      user0.setAddressLine2("B");
      user0.setAffiliation("UNABLE_TO_UPDATE_LEANING_STATE");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      User user1 = new User("YV0dB0hk", "UNABLE_TO_CHECK_VALUE_LABEL_DUPLICATES");
      User user2 = new User("YV0dB0hk", "UNABLE_TO_GET_ORIGINAL_USER");
      derivedVariable0.setColumnStart((String) null);
      user2.setPhone("UNABLE_TO_UPDATE_LEANING_STATE");
      Variable.detectFieldChanges(user2, derivedVariable0, derivedVariable0);
      derivedVariable0.getColumnEnd();
      // Undeclared exception!
      try { 
        derivedVariable0.updateOntologyTerm((OntologyTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.062356339213716
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.removeOntologyTerms(arrayList0);
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      ontologyTerm0.setNameSpace("Cg");
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      ontologyTerm0.setNameSpace("general.error.blankField");
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      rawVariable0.setCleaned(true);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm2);
      User user0 = new User("general.error.blankField", "l*R^2p~LyRCUX");
      User.checkValidUserIDField("general.error.blankField");
      RawVariable rawVariable1 = new RawVariable();
      rawVariable1.codeBookNumber = "&";
      ArrayList<MacawChangeEvent> arrayList2 = RawVariable.detectFieldChanges(user0, rawVariable1, rawVariable0);
      assertEquals("&", rawVariable1.getCodeBookNumber());
      assertEquals(1, arrayList2.size());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.7750016895857574
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      derivedVariable0.createVariableSummary();
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      derivedVariable0.setSupportingDocuments(arrayList0);
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setCodeBookNumber("'orI|[k=");
      derivedVariable0.hasSameDisplayName(rawVariable0);
      rawVariable0.getDisplayName();
      ArrayList<ValueLabel> arrayList1 = rawVariable0.getValueLabels();
      ValueLabel valueLabel0 = new ValueLabel();
      arrayList1.add(valueLabel0);
      derivedVariable0.setValueLabels(arrayList1);
      rawVariable0.getColumnEnd();
      derivedVariable0.getColumnStart();
      rawVariable0.setCleaned(true);
      // Undeclared exception!
      try { 
        rawVariable0.cloneAttributes(derivedVariable0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.7960809859517783
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setNotes("valueLabel.label.saveChanges");
      rawVariable0.setForm("variable.alternativeVariable.label");
      rawVariable0.getCategory();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.columnStart = "variable.alternativeVariable.label";
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.cloneAttributes(derivedVariable1);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable0.hasSameDisplayName(derivedVariable2);
      rawVariable0.getCleaningStatus();
      derivedVariable1.getCleaningDescription();
      try { 
        RawVariable.validateFields(rawVariable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.RawVariable", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.687634169923335
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.containsSourceVariable(rawVariable0);
      rawVariable0.setCodeBookNumber("UNABLE_TO_CHECK_DOCUMENT_ASSOCIATION_EXISTS");
      rawVariable0.columnStart = "*ST|f|R2z!";
      derivedVariable0.setAlternativeVariable(rawVariable0);
      derivedVariable0.getName();
      derivedVariable0.getFilePath();
      derivedVariable0.clone();
      derivedVariable0.isCoded();
      User user0 = new User("", "");
      user0.setFirstName("");
      RawVariable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      derivedVariable0.addSourceVariable(rawVariable0);
      assertEquals("*ST|f|R2z!", rawVariable0.getColumnStart());
      
      RawVariable rawVariable1 = new RawVariable();
      derivedVariable0.addSourceVariable(rawVariable1);
      String string0 = rawVariable1.getCategory();
      assertEquals("Unknown", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9652960184674013
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      ontologyTerm0.setNameSpace("Cg");
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      arrayList1.add(ontologyTerm0);
      assertEquals(2, arrayList1.size());
      
      ontologyTerm0.setNameSpace("general.error.blankFie");
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      rawVariable0.setCleaned(true);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm2);
      User user0 = new User("general.error.blankFie", "l*R^2p~LyRCUX");
      RawVariable rawVariable1 = new RawVariable();
      RawVariable.detectFieldChanges(user0, rawVariable1, rawVariable0);
      boolean boolean0 = rawVariable0.isCleaned();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.883075263944551
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, SupportingDocument> function0 = (Function<Object, SupportingDocument>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, SupportingDocument> function1 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function0);
      function1.apply(unaryOperator0);
      Function.identity();
      Function.identity();
      Function<Object, SupportingDocument> function2 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function1);
      Function<Object, SupportingDocument> function3 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function1);
      Function<Object, SupportingDocument> function4 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function2);
      Function<Object, SupportingDocument> function5 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function4);
      Function.identity();
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function5);
      Function.identity();
      derivedVariable0.addOntologyTerms(arrayList0);
      UnaryOperator<MacawChangeEvent> unaryOperator2 = UnaryOperator.identity();
      Function<Object, MacawChangeEvent> function6 = (Function<Object, MacawChangeEvent>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, MacawChangeEvent> function7 = unaryOperator2.compose((Function<? super Object, ? extends MacawChangeEvent>) function6);
      function3.andThen((Function<? super SupportingDocument, ? extends MacawChangeEvent>) function7);
      Function.identity();
      UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function3);
      unaryOperator0.andThen((Function<? super OntologyTerm, ?>) function4);
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setCleaned(true);
      rawVariable0.removeOntologyTerms(arrayList0);
      ontologyTerm0.setDescription("w8wF/qoU(,");
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      User user0 = new User("w8wF/qoU(,", "iXGk'Ms'>[ZR");
      Variable.validateFields(rawVariable0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      assertEquals("LHA", ontologyTerm2.getOntologyName());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0144998329057646
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.removeOntologyTerms(arrayList0);
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      ontologyTerm0.setNameSpace("Cg");
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      assertEquals(1, arrayList1.size());
      
      ontologyTerm0.setNameSpace("general.error.blankField");
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      rawVariable0.setCleaned(true);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm2);
      User user0 = new User("general.error.blankField", "l*R^2p~LyRCUX");
      User.checkValidUserIDField("general.error.blankField");
      RawVariable rawVariable1 = new RawVariable();
      ArrayList<MacawChangeEvent> arrayList2 = RawVariable.detectFieldChanges(user0, rawVariable1, rawVariable0);
      assertEquals(0, arrayList2.size());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      predicate4.test("B");
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      Predicate<Object> predicate6 = predicate1.or(predicate2);
      predicate2.or(predicate0);
      Predicate<Object> predicate7 = predicate6.and(predicate3);
      predicate5.and(predicate4);
      Integer integer0 = new Integer((-2520));
      predicate2.negate();
      Predicate<Object> predicate8 = predicate0.negate();
      Predicate<Object> predicate9 = predicate7.or(predicate6);
      Predicate<Object> predicate10 = predicate1.and(predicate9);
      Predicate<Object> predicate11 = Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate12 = predicate11.and(predicate10);
      predicate11.and(predicate12);
      predicate4.negate();
      Predicate.isEqual((Object) user0);
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<OntologyTerm> arrayList0 = rawVariable0.getOntologyTerms();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      arrayList1.add(ontologyTerm0);
      arrayList1.add(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ontologyTerm1.setNameSpace("B");
      ArrayList<OntologyTerm> arrayList2 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList3 = new ArrayList<OntologyTerm>();
      arrayList0.addAll((Collection<? extends OntologyTerm>) arrayList1);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm3);
      assertFalse(rawVariable0.isCleaned());
      assertEquals("0", rawVariable0.getDisplayItemIdentifier());
      assertFalse(rawVariable0.isCoded());
      assertFalse(rawVariable0.isNewRecord());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.702447690964387
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      Integer integer0 = new Integer(413);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, SupportingDocument> function0 = (Function<Object, SupportingDocument>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, SupportingDocument> function1 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function0);
      Function<Object, SupportingDocument> function2 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function1);
      Function<Object, SupportingDocument> function3 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function1);
      Function<Object, SupportingDocument> function4 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function2);
      Function<Object, SupportingDocument> function5 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function4);
      unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function5);
      UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function3);
      unaryOperator0.andThen((Function<? super OntologyTerm, ?>) function4);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      derivedVariable0.getOntologyTerms();
      ArrayList<OntologyTerm> arrayList2 = new ArrayList<OntologyTerm>();
      arrayList2.add(ontologyTerm0);
      assertFalse(arrayList2.equals((Object)arrayList1));
      
      RawVariable rawVariable0 = new RawVariable();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      rawVariable0.addSupportingDocument(supportingDocument1);
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      rawVariable0.cloneAttributes(derivedVariable0);
      assertEquals("Unknown", derivedVariable0.getCleaningStatus());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6206220186660607
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      User user0 = new User();
      user0.setAddressLine2("UNABLE_TO_UPDATE_LEANING_STATE");
      user0.setPhone("UNABLE_TO_UPDATE_LEANING_STATE");
      user0.setAffiliation("UNABLE_TO_UPDATE_LEANING_STATE");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      User user1 = new User("YV0dB0hk", "UNABLE_TO_CHECK_VALUE_LABEL_DUPLICATES");
      User user2 = new User("YV0dB0hk", "UNABLE_TO_GET_ORIGINAL_USER");
      user2.setCounty("UNABLE_TO_UPDATE_LEANING_STATE");
      user2.setAffiliation("Unknown");
      user2.setPhone("UNABLE_TO_UPDATE_LEANING_STATE");
      Variable.detectFieldChanges(user2, derivedVariable0, derivedVariable0);
      // Undeclared exception!
      try { 
        derivedVariable0.cloneAttributes((Variable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.917140774503483
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B");
      predicate0.or(predicate0);
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setLabel("B");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.containsSourceVariable(rawVariable0);
      Variable.validateFields(rawVariable0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      RawVariable rawVariable1 = new RawVariable();
      RawVariable rawVariable2 = new RawVariable();
      rawVariable1.setIdentifier((-1024));
      user0.setCounty("B");
      User user1 = new User();
      RawVariable.detectFieldChanges(user0, rawVariable0, rawVariable2);
      User.checkValidUserIDField("B");
      derivedVariable0.addSourceVariable(rawVariable1);
      RawVariable rawVariable3 = new RawVariable();
      RawVariable rawVariable4 = new RawVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      valueLabel0.setValue("B");
      ValueLabel valueLabel1 = new ValueLabel();
      derivedVariable0.removeValueLabel(valueLabel0);
      RawVariable rawVariable5 = new RawVariable();
      rawVariable5.setCategory("B");
      derivedVariable0.getLabel();
      user0.setStatus((String) null);
      RawVariable rawVariable6 = new RawVariable();
      RawVariable.detectFieldChanges(user0, rawVariable5, rawVariable0);
      assertEquals("B", rawVariable5.getCategory());
      
      RawVariable rawVariable7 = new RawVariable();
      derivedVariable0.containsSourceVariable(rawVariable2);
      assertEquals("Unknown", derivedVariable0.getCleaningStatus());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setIdentifier((-189));
      int int0 = rawVariable0.getIdentifier();
      assertEquals("-189", rawVariable0.getDisplayItemIdentifier());
      assertEquals((-189), int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) user0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate2.negate();
      predicate0.test((Object) null);
      Predicate<Object> predicate5 = predicate3.or(predicate4);
      Predicate<Object> predicate6 = predicate2.or(predicate0);
      Predicate<Object> predicate7 = predicate6.and(predicate5);
      predicate0.and(predicate2);
      Integer integer0 = new Integer(2);
      Predicate<Object> predicate8 = predicate3.negate();
      Predicate<Object> predicate9 = predicate2.negate();
      Predicate<Object> predicate10 = predicate4.and(predicate1);
      Predicate<Object> predicate11 = predicate7.or(predicate3);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate12 = predicate5.negate();
      predicate12.or(predicate1);
      predicate5.test(predicate0);
      Predicate.isEqual((Object) predicate5);
      Integer integer1 = new Integer(2);
      Predicate<Object> predicate13 = predicate5.negate();
      Predicate<Object> predicate14 = predicate9.and(predicate10);
      predicate8.or(predicate11);
      predicate8.test((Object) null);
      predicate7.and(predicate8);
      predicate13.or(predicate7);
      predicate14.negate();
      Predicate<Object> predicate15 = predicate8.negate();
      Predicate<Object> predicate16 = predicate12.and(predicate15);
      predicate14.or(predicate16);
      Integer integer2 = new Integer((-1));
      User user1 = new User();
      RawVariable rawVariable0 = new RawVariable();
      // Undeclared exception!
      try { 
        Variable.detectChangesInAlternativeVariable(user1, (Variable) null, rawVariable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      predicate4.test("B");
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      Predicate<Object> predicate6 = predicate1.or(predicate2);
      predicate2.or(predicate0);
      Predicate<Object> predicate7 = predicate6.and(predicate3);
      predicate5.and(predicate4);
      Integer integer0 = new Integer((-2520));
      predicate2.negate();
      Predicate<Object> predicate8 = predicate0.negate();
      Predicate<Object> predicate9 = predicate7.or(predicate6);
      Predicate<Object> predicate10 = predicate1.and(predicate9);
      Predicate<Object> predicate11 = Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate12 = predicate11.and(predicate10);
      predicate11.and(predicate12);
      predicate4.negate();
      Predicate.isEqual((Object) user0);
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<OntologyTerm> arrayList0 = rawVariable0.getOntologyTerms();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      arrayList1.add((OntologyTerm) null);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ontologyTerm1.setNameSpace("B");
      ArrayList<OntologyTerm> arrayList2 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList3 = new ArrayList<OntologyTerm>();
      arrayList0.addAll((Collection<? extends OntologyTerm>) arrayList1);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      // Undeclared exception!
      try { 
        rawVariable0.updateOntologyTerm(ontologyTerm3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.8911672937817876
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.getDisplayItemIdentifier();
      derivedVariable0.setAvailability("0");
      DerivedVariable derivedVariable1 = (DerivedVariable)derivedVariable0.clone();
      derivedVariable0.setQuestionNumber("iXGk'Ms'>[ZR");
      derivedVariable0.getNotes();
      derivedVariable0.setLabel("");
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.setIdentifier(183);
      derivedVariable0.setCodeBookNumber("]");
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      derivedVariable0.removeSupportingDocuments(arrayList0);
      derivedVariable0.form = "S966Q\"jIuZ`=";
      derivedVariable0.getCodeBookNumber();
      ArrayList<Variable> arrayList1 = derivedVariable0.getSourceVariables();
      ValueLabel valueLabel0 = new ValueLabel();
      derivedVariable0.removeValueLabel(valueLabel0);
      derivedVariable0.setSourceVariables(arrayList1);
      derivedVariable0.createVariableSummary();
      derivedVariable0.getDisplayItemIdentifier();
      derivedVariable0.setCleaningStatus("0");
      derivedVariable0.setCodeBookNumber("q/Q");
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.hasSameDisplayName(derivedVariable1);
      derivedVariable0.containsSourceVariable(derivedVariable1);
      assertEquals("0", derivedVariable0.getCleaningStatus());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4640530022828098
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable1.setQuestionNumber("general.fieldValue.unknown");
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList0 = derivedVariable0.getOntologyTerms();
      arrayList0.add(ontologyTerm0);
      String string0 = "general.error.blankFie";
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ontologyTerm1.setNameSpace("macaw.system.ChangeEventType");
      arrayList0.add((OntologyTerm) null);
      RawVariable rawVariable2 = new RawVariable();
      derivedVariable0.removeOntologyTerms(arrayList0);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      rawVariable0.setCleaned(false);
      // Undeclared exception!
      try { 
        rawVariable1.removeOntologyTerms(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.975507230548075
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ontologyTerm1.setNameSpace("-yJ");
      ontologyTerm0.setNameSpace("-yJ");
      ontologyTerm0.setIdentifier((-5));
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = derivedVariable1.getOntologyTerms();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable2.removeOntologyTerms(arrayList0);
      derivedVariable0.removeOntologyTerm(ontologyTerm1);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      ontologyTerm2.getDisplayName();
      ontologyTerm2.setTerm((String) null);
      derivedVariable0.removeOntologyTerm(ontologyTerm1);
      derivedVariable2.setAvailability("rp");
      derivedVariable2.setColumnEnd("[(");
      derivedVariable0.setAlias("[(");
      derivedVariable2.isCoded();
      derivedVariable1.getCleaningDescription();
      derivedVariable2.getDisplayItemIdentifier();
      derivedVariable0.getCleaningStatus();
      assertEquals("[(", derivedVariable0.getAlias());
      
      String string0 = derivedVariable1.getCleaningStatus();
      assertEquals("Unknown", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.7344629538074967
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setCleaningDescription("!9\"Szu?fcO]D%P,A{");
      rawVariable0.getName();
      rawVariable0.getCodeBookNumber();
      rawVariable0.getCategory();
      rawVariable0.isCoded();
      rawVariable0.getCleaningDescription();
      User user0 = new User();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user0, derivedVariable0, derivedVariable0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<Variable> arrayList0 = new ArrayList<Variable>();
      derivedVariable0.setSourceVariables(arrayList0);
      rawVariable0.getQuestionNumber();
      rawVariable0.cloneAttributes(derivedVariable0);
      derivedVariable0.removeSourceVariable(rawVariable0);
      derivedVariable0.getCategory();
      derivedVariable0.getCleaningDescription();
      derivedVariable0.setIdentifier((-1));
      derivedVariable0.getSourceVariables();
      rawVariable0.containsOntologyTerm(ontologyTerm0);
      derivedVariable0.codeBookNumber = "Unknown";
      derivedVariable0.getFilePath();
      derivedVariable0.getDisplayItemIdentifier();
      RawVariable rawVariable1 = new RawVariable();
      try { 
        RawVariable.validateFields(rawVariable1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.RawVariable", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.471346413410988
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      User user0 = new User((String) null, (String) null);
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, rawVariable0);
      rawVariable0.setNotes("ONTOLOGY_TERM");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setCodeBookNumber("ONTOLOGY_TERM");
      derivedVariable0.createVariableSummary();
      derivedVariable0.getFilePath();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ArrayList<Variable> arrayList0 = derivedVariable1.getSourceVariables();
      arrayList0.add((Variable) derivedVariable1);
      // Undeclared exception!
      try { 
        derivedVariable1.removeSourceVariables(arrayList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.969755134636486
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.getLabel();
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      rawVariable0.addSupportingDocuments(arrayList0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.setFilePath("UNABLE_TO_CREATE_CLEANING_STATE");
      ontologyTerm0.getDisplayName();
      ontologyTerm0.clone();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setCategory("");
      derivedVariable0.getSourceVariables();
      rawVariable0.setColumnStart("");
      rawVariable0.getCategory();
      String string0 = rawVariable0.getFilePath();
      derivedVariable0.getForm();
      rawVariable0.containsOntologyTerm(ontologyTerm0);
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      rawVariable0.getCategory();
      assertEquals("UNABLE_TO_CREATE_CLEANING_STATE", rawVariable0.getFilePath());
      
      String string1 = derivedVariable0.getCategory();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.704898557833076
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.cloneAttributes(derivedVariable0);
      rawVariable0.columnEnd = "C=";
      rawVariable0.getFilePath();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable1.notes = "UNABLE_TO_VALIDATE_ADMINISTRATOR";
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setIdentifier((-1073741822));
      supportingDocument0.setFileName("");
      supportingDocument0.setIdentifier(3640);
      Variable.validateFields(rawVariable1);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.addSourceVariable(rawVariable0);
      User user0 = new User("", "/XNO4fn&3Q");
      RawVariable.detectFieldChanges(user0, rawVariable1, rawVariable1);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.containsOntologyTerm(ontologyTerm0);
      try { 
        DerivedVariable.validateFields(derivedVariable1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.DerivedVariable", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.984596124016302
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B");
      predicate0.or(predicate0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      ontologyTerm0.setNameSpace("Cg");
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      derivedVariable0.getOntologyTerms();
      ArrayList<OntologyTerm> arrayList0 = derivedVariable0.getOntologyTerms();
      arrayList0.add(ontologyTerm0);
      assertEquals(1, arrayList0.size());
      
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ontologyTerm1.setNameSpace("B");
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      rawVariable0.setCleaned(true);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm1);
      User user1 = new User("Cg", "l.QvKw@z8KL3kUcU#");
      user0.setPhone("Cg");
      Variable.detectFieldChanges(user0, rawVariable0, derivedVariable0);
      assertEquals("Unknown", derivedVariable0.getAvailability());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.790667805990206
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      ontologyTerm0.setNameSpace("Cg");
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      arrayList1.add(ontologyTerm0);
      RawVariable rawVariable1 = new RawVariable();
      User user0 = new User();
      RawVariable.detectFieldChanges(user0, rawVariable1, rawVariable1);
      rawVariable0.setIdentifier((-1879));
      User user1 = new User();
      RawVariable.detectFieldChanges(user0, rawVariable1, rawVariable1);
      rawVariable0.questionNumber = "810kN3<h";
      derivedVariable0.createVariableSummary();
      user1.setLastName("Cg");
      derivedVariable0.addSourceVariable(rawVariable1);
      RawVariable rawVariable2 = new RawVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.setCleaningDescription("mP~/IS-{UL;");
      rawVariable0.cloneAttributes(derivedVariable0);
      RawVariable rawVariable3 = new RawVariable();
      RawVariable.detectFieldChanges(user1, rawVariable0, rawVariable1);
      ArrayList<Variable> arrayList2 = derivedVariable1.getSourceVariables();
      derivedVariable1.setSourceVariables(arrayList2);
      assertEquals("mP~/IS-{UL;", derivedVariable1.getCleaningDescription());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      User user0 = new User();
      user0.setPhone("UNABLE_TO_UPDATE_LEANING_STATE");
      user0.setAffiliation("UNABLE_TO_UPDATE_LEANING_STATE");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      User user1 = new User("YV0dB0hk", "UNABLE_TO_CHECK_VALUE_LABEL_DUPLICATES");
      User user2 = new User();
      user2.setCounty("UNABLE_TO_UPDATE_LEANING_STATE");
      user2.setPhone("UNABLE_TO_UPDATE_LEANING_STATE");
      // Undeclared exception!
      try { 
        Variable.detectFieldChanges((User) null, derivedVariable0, derivedVariable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm((OntologyTerm) null);
      // Undeclared exception!
      try { 
        derivedVariable0.containsOntologyTerm(ontologyTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      // Undeclared exception!
      try { 
        rawVariable0.removeOntologyTerm((OntologyTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.85731444206185
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      ontologyTerm0.setNameSpace("general.error.blankFie");
      arrayList0.add(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.removeOntologyTerms(arrayList0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      rawVariable0.removeOntologyTerms(arrayList0);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      ontologyTerm2.getDisplayName();
      ontologyTerm2.setDescription("general.error.blankFie");
      rawVariable0.updateOntologyTerm(ontologyTerm2);
      rawVariable0.questionNumber = "tRJeWS(C N${PTuj";
      User user0 = new User("general.error.blankFie", "l*R^2p~LyRCU~");
      Variable.validateFields(rawVariable0);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      assertEquals("", ontologyTerm4.getDescription());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0377995833352527
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      Integer integer0 = new Integer(413);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, SupportingDocument> function0 = (Function<Object, SupportingDocument>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, SupportingDocument> function1 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function0);
      function1.apply(unaryOperator0);
      Function<Object, SupportingDocument> function2 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function1);
      Function<Object, SupportingDocument> function3 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function1);
      Function<Object, SupportingDocument> function4 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function2);
      Function<Object, SupportingDocument> function5 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function4);
      unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function5);
      derivedVariable0.addOntologyTerms(arrayList0);
      Function.identity();
      UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function3);
      unaryOperator0.andThen((Function<? super OntologyTerm, ?>) function4);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      arrayList1.add(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      rawVariable0.addSupportingDocument(supportingDocument1);
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      rawVariable0.containsSupportingDocument(supportingDocument1);
      derivedVariable0.updateOntologyTerm(ontologyTerm0);
      rawVariable0.getSupportingDocuments();
      try { 
        DerivedVariable.validateFields(derivedVariable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.DerivedVariable", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.3823452227303257
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      ontologyTerm0.setNameSpace("Cg");
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      boolean boolean0 = derivedVariable0.containsOntologyTerm(ontologyTerm0);
      assertTrue(boolean0);
      
      LinkedList<OntologyTerm> linkedList0 = new LinkedList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList2 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      arrayList1.add(ontologyTerm0);
      ontologyTerm1.setNameSpace("6g]5e~ |;?/3n");
      ArrayList<OntologyTerm> arrayList3 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList4 = new ArrayList<OntologyTerm>();
      arrayList1.addAll((Collection<? extends OntologyTerm>) arrayList2);
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      ArrayList<ValueLabel> arrayList5 = new ArrayList<ValueLabel>();
      rawVariable0.setValueLabels(arrayList5);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      assertFalse(rawVariable0.isNewRecord());
      assertFalse(rawVariable0.isCleaned());
      assertFalse(rawVariable0.isCoded());
      assertEquals(0, rawVariable0.getIdentifier());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.726516755607659
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      Integer integer0 = new Integer(413);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, SupportingDocument> function0 = (Function<Object, SupportingDocument>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, SupportingDocument> function1 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function0);
      function1.apply(unaryOperator0);
      Function<Object, SupportingDocument> function2 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function1);
      Function<Object, SupportingDocument> function3 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function1);
      Function<Object, SupportingDocument> function4 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function2);
      Function<Object, SupportingDocument> function5 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function4);
      unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function5);
      function3.compose((Function<? super Object, ?>) function2);
      derivedVariable0.addOntologyTerms(arrayList0);
      Function.identity();
      UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function3);
      unaryOperator0.andThen((Function<? super OntologyTerm, ?>) function4);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      arrayList1.add(ontologyTerm0);
      assertEquals(2, arrayList1.size());
      
      RawVariable rawVariable0 = new RawVariable();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      rawVariable0.addSupportingDocument(supportingDocument1);
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      rawVariable0.containsSupportingDocument(supportingDocument1);
      derivedVariable0.updateOntologyTerm(ontologyTerm0);
      rawVariable0.getColumnEnd();
      assertFalse(rawVariable0.isNewRecord());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.692959979248239
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B");
      predicate0.or(predicate0);
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setLabel("B");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.containsSourceVariable(rawVariable0);
      derivedVariable0.setIdentifier(338);
      Variable.validateFields(rawVariable0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      RawVariable rawVariable1 = new RawVariable();
      LinkedList<RawVariable> linkedList0 = new LinkedList<RawVariable>();
      ArrayList<Variable> arrayList1 = new ArrayList<Variable>(linkedList0);
      arrayList1.stream();
      arrayList1.addAll((Collection<? extends Variable>) linkedList0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.createVariableSummary();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable2.addSourceVariable(derivedVariable0);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1854));
      Predicate.isEqual((Object) "B");
      Predicate.isEqual((Object) null);
      Integer integer1 = new Integer((-1616));
      Integer integer2 = new Integer((-1854));
      User user1 = new User();
      RawVariable rawVariable2 = new RawVariable();
      Variable.detectChangesInAlternativeVariable(user1, rawVariable1, derivedVariable2);
      rawVariable2.getAlternativeVariable();
      System.setCurrentTimeMillis(2020L);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.7466212728084187
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      User user0 = new User();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setLabel("UNABLE_TO_UPDATE_LEANING_STATE");
      User user1 = new User("UtO*5$OPOrcz5M0{Cz", "=fJ{~.wVn#");
      RawVariable rawVariable1 = new RawVariable();
      User user2 = new User();
      RawVariable rawVariable2 = new RawVariable();
      rawVariable2.setIdentifier(122);
      User user3 = new User();
      User user4 = new User();
      RawVariable.detectFieldChanges(user4, rawVariable1, rawVariable1);
      derivedVariable0.createVariableSummary();
      derivedVariable0.addSourceVariable(rawVariable2);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) user1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) rawVariable2);
      Predicate<Object> predicate5 = predicate4.and(predicate0);
      predicate5.and(predicate3);
      Predicate<Object> predicate6 = predicate1.and(predicate4);
      predicate6.or(predicate4);
      Integer integer0 = new Integer((-2091));
      User user5 = new User();
      RawVariable rawVariable3 = new RawVariable();
      rawVariable0.createVariableSummary();
      assertEquals("UNABLE_TO_UPDATE_LEANING_STATE", rawVariable0.getLabel());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.7599666040215727
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      User user0 = new User();
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.getName();
      rawVariable0.setName("B");
      RawVariable rawVariable2 = new RawVariable();
      ArrayList<SupportingDocument> arrayList0 = rawVariable2.getSupportingDocuments();
      rawVariable1.setSupportingDocuments(arrayList0);
      User user1 = new User();
      User user2 = new User();
      User user3 = new User();
      User.detectFieldChanges(user2, user1, user1);
      user3.setAddressLine2("");
      RawVariable.detectFieldChanges(user3, rawVariable0, rawVariable2);
      derivedVariable0.createVariableSummary();
      derivedVariable0.addSourceVariable(rawVariable2);
      Object object0 = new Object();
      Predicate.isEqual((Object) "");
      ChangeEventType changeEventType0 = ChangeEventType.ALIAS_FILE_PATH;
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent(changeEventType0, "", "_#`{m664X%EIwL}");
      Predicate.isEqual((Object) macawChangeEvent0);
      Integer integer0 = new Integer((-2067947214));
      RawVariable rawVariable3 = new RawVariable();
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable0);
      assertEquals("B", rawVariable0.getDisplayName());
      
      rawVariable3.getAlternativeVariable();
      derivedVariable0.cloneAttributes(rawVariable1);
      assertEquals("Unknown", rawVariable1.getCategory());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.86803457205443
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      Variable.validateFields(rawVariable0);
      ArrayList<SupportingDocument> arrayList0 = rawVariable0.getSupportingDocuments();
      ChangeEventType changeEventType0 = ChangeEventType.VALUE_LABEL;
      Predicate.isEqual((Object) changeEventType0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "user.postCode.label");
      predicate0.test("user.postCode.label");
      rawVariable0.clone();
      Predicate.isEqual((Object) rawVariable0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.clone();
      Predicate.isEqual((Object) arrayList0);
      rawVariable0.setSupportingDocuments(arrayList0);
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable1.removeOntologyTerms(arrayList1);
      RawVariable rawVariable2 = new RawVariable();
      rawVariable2.setForm("xiKU|#e'K$F+W0");
      rawVariable2.setSupportingDocuments(arrayList0);
      rawVariable0.getDisplayName();
      rawVariable2.getForm();
      rawVariable2.getYear();
      assertEquals("xiKU|#e'K$F+W0", rawVariable2.getForm());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.0554878070033995
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.setAlternativeVariable(rawVariable0);
      derivedVariable0.setCategory("lFm(. o-k");
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.setCategory("");
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setIsNewRecord(true);
      derivedVariable0.columnEnd = null;
      supportingDocument0.clone();
      rawVariable0.addSupportingDocument(supportingDocument0);
      rawVariable0.setYear("");
      derivedVariable0.getAvailability();
      derivedVariable0.getCategory();
      Variable.validateFields(derivedVariable0);
      derivedVariable0.containsSupportingDocument(supportingDocument0);
      derivedVariable0.getDisplayName();
      derivedVariable0.setCleaningStatus("W'WQHsL|R5");
      rawVariable0.getDisplayName();
      rawVariable0.hasSameDisplayName(derivedVariable0);
      assertEquals("W'WQHsL|R5", derivedVariable0.getCleaningStatus());
      assertFalse(derivedVariable0.isNewRecord());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.625071549495739
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setName("t$]7ol3/wv+]9K;");
      rawVariable0.getName();
      rawVariable0.clone();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.getDisplayName();
      rawVariable0.containsSupportingDocument(supportingDocument0);
      assertEquals("t$]7ol3/wv+]9K;", rawVariable0.getDisplayName());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.8253272272426853
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setNotes("B");
      RawVariable rawVariable1 = (RawVariable)rawVariable0.clone();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      Integer integer0 = new Integer(1924);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      predicate3.test("xiKU|#e'K$F+W0");
      Predicate<Object> predicate4 = predicate0.or(predicate1);
      predicate3.negate();
      predicate4.and(predicate2);
      predicate3.test("B");
      rawVariable1.clone();
      RawVariable rawVariable2 = new RawVariable();
      rawVariable2.cloneAttributes(rawVariable0);
      rawVariable0.getCleaningDescription();
      rawVariable0.getOntologyTerms();
      rawVariable1.getAlias();
      rawVariable1.getQuestionNumber();
      rawVariable0.isNewRecord();
      rawVariable1.getFilePath();
      RawVariable rawVariable3 = new RawVariable();
      VariableSummary variableSummary0 = rawVariable3.createVariableSummary();
      assertFalse(variableSummary0.isDerived());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      boolean boolean0 = derivedVariable0.isCleaned();
      assertFalse(boolean0);
      assertFalse(derivedVariable0.isNewRecord());
      assertFalse(derivedVariable0.isCoded());
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.0516132595159364
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      predicate1.and(predicate0);
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setLabel("B");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.containsSourceVariable(rawVariable0);
      derivedVariable0.setIdentifier(338);
      Variable.validateFields(rawVariable0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      RawVariable rawVariable1 = new RawVariable();
      LinkedList<RawVariable> linkedList0 = new LinkedList<RawVariable>();
      ArrayList<Variable> arrayList1 = new ArrayList<Variable>(linkedList0);
      arrayList1.stream();
      arrayList1.addAll((Collection<? extends Variable>) linkedList0);
      derivedVariable0.addSourceVariables(arrayList1);
      RawVariable rawVariable2 = new RawVariable();
      rawVariable0.addSupportingDocuments(arrayList0);
      rawVariable1.setIdentifier((-1024));
      RawVariable rawVariable3 = new RawVariable();
      RawVariable.detectFieldChanges(user0, rawVariable1, rawVariable3);
      rawVariable0.setIdentifier(1254);
      User user1 = new User();
      User user2 = new User();
      RawVariable rawVariable4 = new RawVariable();
      RawVariable.detectFieldChanges(user2, rawVariable2, rawVariable4);
      derivedVariable0.createVariableSummary();
      derivedVariable0.addSourceVariable(rawVariable2);
      RawVariable rawVariable5 = new RawVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.setCleaningDescription("ONTOLOGY_TERM");
      assertEquals("ONTOLOGY_TERM", derivedVariable1.getCleaningDescription());
      
      RawVariable rawVariable6 = new RawVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      boolean boolean0 = rawVariable4.containsSupportingDocument(supportingDocument0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      arrayList0.add(ontologyTerm1);
      ontologyTerm1.setOntologyName("AKlc)M:&");
      arrayList0.add(ontologyTerm0);
      LinkedList<OntologyTerm> linkedList0 = new LinkedList<OntologyTerm>();
      arrayList0.add(ontologyTerm1);
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList2 = new ArrayList<OntologyTerm>();
      arrayList2.add(ontologyTerm0);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, OntologyTerm> function0 = (Function<Object, OntologyTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super OntologyTerm, ? extends OntologyTerm>) function0);
      Function<Object, SupportingDocument> function1 = (Function<Object, SupportingDocument>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, SupportingDocument> function2 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function1);
      function2.apply(ontologyTerm2);
      unaryOperator0.andThen((Function<? super OntologyTerm, ?>) function2);
      arrayList1.replaceAll(unaryOperator0);
      arrayList0.addAll((Collection<? extends OntologyTerm>) arrayList0);
      arrayList0.add(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList3 = new ArrayList<OntologyTerm>();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.addSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      // Undeclared exception!
      try { 
        rawVariable0.addSupportingDocuments((ArrayList<SupportingDocument>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      User user0 = new User();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      boolean boolean0 = derivedVariable1.containsOntologyTerm(ontologyTerm0);
      assertFalse(boolean0);
      
      ArrayList<OntologyTerm> arrayList1 = derivedVariable1.getOntologyTerms();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      arrayList1.add(ontologyTerm0);
      arrayList1.add(ontologyTerm1);
      LinkedList<OntologyTerm> linkedList0 = new LinkedList<OntologyTerm>();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      arrayList0.add(ontologyTerm2);
      ArrayList<OntologyTerm> arrayList2 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList3 = derivedVariable1.getOntologyTerms();
      arrayList3.add(ontologyTerm0);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      ontologyTerm0.setNameSpace(",A}V7<1/UAq32#:");
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, SupportingDocument> function0 = (Function<Object, SupportingDocument>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, SupportingDocument> function1 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function0);
      Function<Object, SupportingDocument> function2 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function1);
      unaryOperator0.andThen((Function<? super OntologyTerm, ?>) function2);
      arrayList0.replaceAll(unaryOperator0);
      arrayList1.addAll((Collection<? extends OntologyTerm>) arrayList0);
      arrayList1.add(ontologyTerm2);
      ArrayList<OntologyTerm> arrayList4 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList5 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList6 = new ArrayList<OntologyTerm>(1078);
      LinkedList<OntologyTerm> linkedList1 = new LinkedList<OntologyTerm>();
      arrayList5.addAll((Collection<? extends OntologyTerm>) linkedList1);
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      OntologyTerm ontologyTerm5 = new OntologyTerm();
      derivedVariable1.getYear();
      assertFalse(derivedVariable1.isNewRecord());
      assertFalse(derivedVariable1.isCleaned());
      assertFalse(derivedVariable1.isCoded());
      assertEquals("0", derivedVariable1.getDisplayItemIdentifier());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.365349639944498
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      ontologyTerm0.setNewRecord(true);
      arrayList0.add(ontologyTerm0);
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      Function<OntologyTerm, MacawChangeEvent> function0 = (Function<OntologyTerm, MacawChangeEvent>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super OntologyTerm, ? extends MacawChangeEvent>) function0);
      arrayList1.replaceAll(unaryOperator0);
      arrayList1.add(ontologyTerm0);
      String string0 = "general.error.blankFie";
      ontologyTerm0.setNameSpace("general.error.blankFie");
      arrayList0.add(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      // Undeclared exception!
      try { 
        derivedVariable0.removeOntologyTerms(arrayList1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.7873780055103268
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setQuestionNumber("-4u`tz<RC");
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      arrayList0.add(ontologyTerm1);
      arrayList1.add(ontologyTerm0);
      assertEquals("-4u`tz<RC", derivedVariable0.getQuestionNumber());
      
      arrayList0.add(ontologyTerm1);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      ontologyTerm1.setDescription("-VHA.K9JWn(Rmmd-");
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.updateOntologyTerm(ontologyTerm1);
      User user0 = new User("-VHA.K9JWn(Rmmd-", "blank");
      RawVariable rawVariable1 = new RawVariable();
      Variable.validateFields(rawVariable1);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      derivedVariable1.getSourceVariables();
      assertEquals("Unknown", derivedVariable1.getAvailability());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.2029436070801602
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      User user0 = new User("", "pq51b&23%ls8qrU[%`Fn");
      DerivedVariable.detectFieldChanges(user0, derivedVariable0, derivedVariable0);
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      arrayList0.add(ontologyTerm0);
      ontologyTerm0.setNameSpace("general.error.blankFie");
      arrayList0.add(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.removeOntologyTerms(arrayList0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      rawVariable0.setCleaned(true);
      rawVariable0.removeOntologyTerms(arrayList0);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      ontologyTerm2.setDescription("general.error.blankFie");
      rawVariable0.setAvailability("general.error.blankFie");
      rawVariable0.updateOntologyTerm(ontologyTerm2);
      rawVariable0.questionNumber = "tRJeWS(C N${PTuj";
      User user1 = new User("general.error.blankFie", "l*R^2p~LyRCUX");
      Variable.validateFields(rawVariable0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm3);
      assertEquals("tRJeWS(C N${PTuj", rawVariable0.getQuestionNumber());
      
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      assertTrue(arrayList1.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.setCodeBookNumber("DUuz[VGW2e^>DxfY\"A+");
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ontologyTerm1.setDescription("AKlc)M:&");
      ontologyTerm1.setOntologyName("AKlc)M:&");
      arrayList0.add(ontologyTerm0);
      LinkedList<OntologyTerm> linkedList0 = new LinkedList<OntologyTerm>();
      arrayList0.add(ontologyTerm1);
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList2 = new ArrayList<OntologyTerm>();
      arrayList2.add(ontologyTerm0);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, OntologyTerm> function0 = (Function<Object, OntologyTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super OntologyTerm, ? extends OntologyTerm>) function0);
      Function<Object, SupportingDocument> function1 = (Function<Object, SupportingDocument>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, SupportingDocument> function2 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function1);
      function2.apply(ontologyTerm2);
      unaryOperator0.andThen((Function<? super OntologyTerm, ?>) function2);
      arrayList1.replaceAll(unaryOperator0);
      arrayList0.addAll((Collection<? extends OntologyTerm>) arrayList0);
      arrayList0.add(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList3 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList4 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList5 = new ArrayList<OntologyTerm>(3845);
      arrayList1.addAll((Collection<? extends OntologyTerm>) arrayList2);
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      OntologyTerm ontologyTerm5 = new OntologyTerm();
      assertEquals("", ontologyTerm5.getDescription());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      DerivedVariable[] derivedVariableArray0 = new DerivedVariable[8];
      derivedVariableArray0[0] = derivedVariable0;
      derivedVariableArray0[1] = derivedVariable0;
      Comparator<SupportingDocument> comparator0 = (Comparator<SupportingDocument>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      derivedVariableArray0[2] = derivedVariable0;
      derivedVariableArray0[3] = derivedVariable0;
      derivedVariableArray0[4] = derivedVariable0;
      derivedVariableArray0[5] = derivedVariable0;
      derivedVariableArray0[6] = derivedVariable0;
      derivedVariableArray0[7] = derivedVariable0;
      arrayList0.toArray(derivedVariableArray0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setIdentifier(937);
      arrayList0.add(supportingDocument0);
      // Undeclared exception!
      try { 
        derivedVariable0.removeSupportingDocuments(arrayList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.45126227595883
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      ontologyTerm0.setNameSpace("Cg");
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<OntologyTerm> arrayList2 = new ArrayList<OntologyTerm>();
      arrayList2.add(ontologyTerm0);
      ontologyTerm0.setNameSpace("W3L$OV$D0Jbz'");
      arrayList2.add(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList3 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList4 = new ArrayList<OntologyTerm>();
      arrayList2.addAll((Collection<? extends OntologyTerm>) arrayList3);
      assertFalse(arrayList2.equals((Object)arrayList1));
      
      RawVariable rawVariable1 = new RawVariable();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      rawVariable0.getNotes();
      assertFalse(rawVariable0.isCleaned());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      derivedVariable0.removeSupportingDocuments(arrayList0);
      ValueLabel valueLabel0 = new ValueLabel();
      derivedVariable0.columnStart = "bYu";
      ValueLabel.EditingOperationType valueLabel_EditingOperationType0 = ValueLabel.EditingOperationType.NEW;
      valueLabel0.setEditingOperationType(valueLabel_EditingOperationType0);
      derivedVariable0.setCategory("bYu");
      derivedVariable0.codeBookNumber = "variable.isCoded.label";
      valueLabel0.setValue("bYu");
      derivedVariable0.addValueLabel(valueLabel0);
      derivedVariable0.getNotes();
      derivedVariable0.getColumnStart();
      assertEquals("bYu", derivedVariable0.getColumnStart());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.787065002697679
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.form = "'-6U@sjY_%<h`r,V?";
      rawVariable0.isCoded();
      User user0 = new User();
      user0.setAffiliation("va>riable.form.label");
      user0.setStatus("LSLS|d}^+4");
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, rawVariable0);
      rawVariable0.getNotes();
      RawVariable rawVariable1 = new RawVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setDescription("LSLS|d}^+4");
      Integer[] integerArray0 = new Integer[7];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(29);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      User user1 = new User("'-6U@sjY_%<h`r,V?", "7AW~lJ>*81/>]V");
      User user2 = new User("variable.columnStart.label", "pq51b&23%ls8qrU[%`Fn");
      user0.setPhone("variable.columnStart.label");
      Variable.detectFieldChanges(user2, rawVariable0, rawVariable1);
      assertEquals("'-6U@sjY_%<h`r,V?", rawVariable0.getForm());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.5545558491949714
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) user0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate2.negate();
      predicate0.test("B");
      Predicate<Object> predicate5 = predicate3.or(predicate4);
      Predicate<Object> predicate6 = predicate2.or(predicate0);
      Predicate<Object> predicate7 = predicate6.and(predicate5);
      Integer integer0 = new Integer(2);
      Predicate<Object> predicate8 = predicate3.negate();
      Predicate<Object> predicate9 = predicate2.negate();
      Predicate<Object> predicate10 = predicate4.and(predicate1);
      predicate7.or(predicate3);
      Predicate<Object> predicate11 = predicate5.negate();
      predicate11.or(predicate1);
      predicate9.and(predicate2);
      Integer integer1 = new Integer(2);
      Predicate<Object> predicate12 = Predicate.isEqual((Object) integer1);
      Predicate<Object> predicate13 = predicate9.and(predicate10);
      predicate7.and(predicate8);
      predicate12.or(predicate7);
      Predicate<Object> predicate14 = predicate8.negate();
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate15 = predicate11.and(predicate14);
      predicate13.or(predicate15);
      Integer integer2 = new Integer((-1));
      user0.setPhone("B");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<MacawChangeEvent> arrayList0 = Variable.detectFieldChanges(user0, derivedVariable0, rawVariable0);
      assertEquals(0, arrayList0.size());
      
      rawVariable0.hasSameDisplayName(derivedVariable0);
      assertEquals("Unknown", rawVariable0.getCleaningStatus());
      assertEquals("Unknown", rawVariable0.getAvailability());
      assertFalse(rawVariable0.isCleaned());
      assertFalse(rawVariable0.isCoded());
      assertEquals("Unknown", rawVariable0.getCategory());
      assertEquals("0", rawVariable0.getDisplayItemIdentifier());
      assertFalse(rawVariable0.isNewRecord());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.7281734556577
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      ontologyTerm0.setNewRecord(true);
      arrayList0.add(ontologyTerm0);
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.setAlternativeVariable(derivedVariable1);
      Function<OntologyTerm, MacawChangeEvent> function0 = (Function<OntologyTerm, MacawChangeEvent>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super OntologyTerm, ? extends MacawChangeEvent>) function0);
      arrayList1.replaceAll(unaryOperator0);
      arrayList1.add(ontologyTerm0);
      ontologyTerm0.setNameSpace("general.error.blankFie");
      arrayList0.add(ontologyTerm0);
      derivedVariable0.removeOntologyTerms(arrayList0);
      UnaryOperator<OntologyTerm> unaryOperator1 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator1);
      arrayList0.addAll((Collection<? extends OntologyTerm>) arrayList1);
      arrayList1.add(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList2 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList3 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList4 = new ArrayList<OntologyTerm>(0);
      arrayList2.addAll((Collection<? extends OntologyTerm>) arrayList0);
      assertEquals(2, arrayList2.size());
      
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      DerivedVariable derivedVariable2 = (DerivedVariable)derivedVariable0.clone();
      assertEquals("Unknown", derivedVariable2.getCategory());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.855109389278357
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.columnStart = "";
      rawVariable0.clone();
      rawVariable0.setAvailability(")f3Z");
      rawVariable0.getQuestionNumber();
      rawVariable0.getCleaningStatus();
      rawVariable0.getNotes();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setNotes("");
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel valueLabel1 = new ValueLabel();
      ValueLabel.validateFields(valueLabel1);
      valueLabel0.hasSameDisplayName(valueLabel1);
      derivedVariable0.addValueLabel(valueLabel0);
      derivedVariable0.addSourceVariable(rawVariable0);
      derivedVariable0.clone();
      rawVariable0.getCodeBookNumber();
      rawVariable0.getFilePath();
      derivedVariable0.cloneAttributes(rawVariable0);
      User user0 = new User("~/ZkyfVWsL2", "Unknown");
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, rawVariable0);
      rawVariable0.getForm();
      rawVariable0.clone();
      rawVariable0.cloneAttributes(derivedVariable0);
      assertEquals("Unknown", rawVariable0.getAvailability());
      
      derivedVariable0.getName();
      assertEquals("Unknown", derivedVariable0.getCleaningStatus());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.703833388976094
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.getName();
      rawVariable0.setName("B");
      RawVariable rawVariable2 = new RawVariable();
      User user1 = new User();
      User user2 = new User();
      User user3 = new User();
      derivedVariable0.createVariableSummary();
      derivedVariable0.addSourceVariable(rawVariable2);
      Object object0 = new Object();
      Predicate<Object> predicate2 = Predicate.isEqual(object0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) "");
      predicate6.and(predicate5);
      Predicate<Object> predicate7 = predicate4.or(predicate2);
      predicate5.and(predicate7);
      ChangeEventType changeEventType0 = ChangeEventType.ALIAS_FILE_PATH;
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent(changeEventType0, "", "_#`{m664X%EIwL}");
      Predicate.isEqual((Object) macawChangeEvent0);
      predicate4.negate();
      predicate4.negate();
      predicate0.or(predicate5);
      Integer integer0 = new Integer((-2067947201));
      User user4 = new User();
      RawVariable rawVariable3 = new RawVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      rawVariable3.removeSupportingDocument(supportingDocument0);
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable0);
      assertEquals("B", rawVariable0.getName());
      
      rawVariable3.getAlternativeVariable();
      derivedVariable0.cloneAttributes(rawVariable1);
      assertEquals("Unknown", rawVariable1.getAvailability());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.19953461806653
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ArrayList<ValueLabel> arrayList0 = new ArrayList<ValueLabel>();
      ValueLabel valueLabel0 = new ValueLabel();
      arrayList0.add(valueLabel0);
      arrayList0.add(valueLabel0);
      arrayList0.add(valueLabel0);
      arrayList0.add(valueLabel0);
      ArrayList<ValueLabel> arrayList1 = new ArrayList<ValueLabel>();
      arrayList0.addAll(0, (Collection<? extends ValueLabel>) arrayList1);
      arrayList0.add(valueLabel0);
      arrayList0.add(valueLabel0);
      arrayList0.remove(0);
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.addValueLabel(valueLabel0);
      ArrayList<OntologyTerm> arrayList2 = rawVariable0.getOntologyTerms();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      arrayList2.add(ontologyTerm0);
      rawVariable0.columnStart = "uxGw";
      rawVariable0.setOntologyTerms(arrayList2);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm1);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<Variable> arrayList3 = new ArrayList<Variable>();
      derivedVariable0.addSourceVariables(arrayList3);
      assertFalse(derivedVariable0.isCleaned());
      assertFalse(derivedVariable0.isCoded());
      assertFalse(derivedVariable0.isNewRecord());
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.45126227595883
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      arrayList0.add(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      ontologyTerm0.setNameSpace("Cg");
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      ontologyTerm0.setNameSpace("general.error.blankFie");
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      arrayList0.add(ontologyTerm0);
      ontologyTerm1.setNameSpace("macaw.util.ValidationUtility");
      ArrayList<OntologyTerm> arrayList2 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList3 = new ArrayList<OntologyTerm>();
      arrayList3.add(ontologyTerm0);
      arrayList3.addAll((Collection<? extends OntologyTerm>) arrayList1);
      assertEquals(1, arrayList1.size());
      
      RawVariable rawVariable1 = new RawVariable();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      rawVariable1.updateOntologyTerm(ontologyTerm2);
      rawVariable0.getFilePath();
      derivedVariable0.addSourceVariable(rawVariable0);
      assertEquals(0, derivedVariable0.getIdentifier());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      Integer integer0 = new Integer((-939));
      SupportingDocument supportingDocument0 = new SupportingDocument();
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, SupportingDocument> function0 = (Function<Object, SupportingDocument>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, SupportingDocument> function1 = unaryOperator2.andThen((Function<? super Object, ? extends SupportingDocument>) function0);
      Function<Object, SupportingDocument> function2 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function1);
      function2.apply(unaryOperator2);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, SupportingDocument> function3 = unaryOperator3.andThen((Function<? super Object, ? extends SupportingDocument>) function2);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function<Object, SupportingDocument> function4 = unaryOperator4.andThen((Function<? super Object, ? extends SupportingDocument>) function3);
      Function<Object, SupportingDocument> function5 = unaryOperator3.andThen((Function<? super Object, ? extends SupportingDocument>) function3);
      unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function4);
      Function.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super Object, ? extends SupportingDocument>) function5);
      unaryOperator0.andThen((Function<? super OntologyTerm, ?>) unaryOperator3);
      RawVariable rawVariable0 = new RawVariable();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      rawVariable0.addSupportingDocument((SupportingDocument) null);
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      // Undeclared exception!
      try { 
        rawVariable0.containsSupportingDocument(supportingDocument2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.078687672440238
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.getName();
      rawVariable0.setName("B");
      RawVariable rawVariable2 = new RawVariable();
      rawVariable0.setIdentifier(93);
      User user1 = new User();
      User user2 = new User();
      User user3 = new User();
      RawVariable.detectFieldChanges(user3, rawVariable0, rawVariable2);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.createVariableSummary();
      derivedVariable0.addSourceVariable(rawVariable2);
      Object object0 = new Object();
      Predicate<Object> predicate2 = Predicate.isEqual(object0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) "");
      predicate6.and(predicate5);
      predicate4.negate();
      predicate1.and(predicate2);
      predicate0.or(predicate5);
      Integer integer0 = new Integer((-2067947214));
      User user4 = new User();
      RawVariable rawVariable3 = new RawVariable();
      rawVariable3.setCleaningStatus("variable.alternativeVariable.label");
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable0);
      rawVariable3.getAlternativeVariable();
      // Undeclared exception!
      try { 
        derivedVariable1.cloneAttributes((Variable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.6286003732844097
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      ontologyTerm0.setNameSpace("Cg");
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<OntologyTerm> arrayList2 = rawVariable0.getOntologyTerms();
      arrayList2.add(ontologyTerm0);
      rawVariable0.setAlias("W3L$OV$D0Jbz'");
      ontologyTerm0.setNameSpace("W3L$OV$D0Jbz'");
      ArrayList<OntologyTerm> arrayList3 = new ArrayList<OntologyTerm>();
      RawVariable rawVariable1 = new RawVariable();
      arrayList2.remove((Object) rawVariable1);
      ArrayList<OntologyTerm> arrayList4 = new ArrayList<OntologyTerm>();
      arrayList2.addAll((Collection<? extends OntologyTerm>) arrayList3);
      RawVariable rawVariable2 = new RawVariable();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      assertEquals("W3L$OV$D0Jbz'", rawVariable0.getAlias());
      
      rawVariable2.getFilePath();
      assertFalse(rawVariable2.isCleaned());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.0401680445162826
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      assertEquals(1, arrayList1.size());
      
      ontologyTerm0.setNameSpace("general.error.blankFie");
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      rawVariable0.setCleaned(true);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm2);
      rawVariable0.questionNumber = "tRJeWS(C N${PTuj";
      User user0 = new User("general.error.blankFie", "l*R^2p~LyRCUX");
      Variable.validateFields(rawVariable0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.setOntologyTerms((ArrayList<OntologyTerm>) null);
      String string0 = rawVariable0.getAlias();
      assertEquals("", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.627323234076236
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.addSourceVariable(rawVariable0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      User user0 = new User();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      derivedVariable0.containsOntologyTerm(ontologyTerm1);
      LinkedList<OntologyTerm> linkedList0 = new LinkedList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList1 = rawVariable0.getOntologyTerms();
      arrayList0.addAll((Collection<? extends OntologyTerm>) arrayList1);
      derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm1);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      ontologyTerm2.setNameSpace("7W!pV=Y7}Su{@ ");
      rawVariable0.getOntologyTerms();
      ArrayList<OntologyTerm> arrayList2 = new ArrayList<OntologyTerm>();
      arrayList0.addAll((Collection<? extends OntologyTerm>) arrayList2);
      rawVariable0.setForm("variable.alias.label");
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm4);
      rawVariable0.getAlias();
      assertEquals("variable.alias.label", rawVariable0.getForm());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.1600390259624396
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      ontologyTerm0.setNameSpace("general.error.blankFie");
      arrayList0.add(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.removeOntologyTerms(arrayList0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      rawVariable0.setCleaned(true);
      rawVariable0.removeOntologyTerms(arrayList0);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      ontologyTerm2.setDescription("general.error.blankFie");
      rawVariable0.updateOntologyTerm(ontologyTerm2);
      rawVariable0.questionNumber = "tRJeWS(C N${PTuj";
      User user0 = new User("general.error.blankFie", "l*R^2p~LyRCU~");
      Variable.validateFields(rawVariable0);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      RawVariable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      assertEquals("tRJeWS(C N${PTuj", rawVariable0.getQuestionNumber());
      
      derivedVariable0.getName();
      assertEquals("Unknown", derivedVariable0.getCategory());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.049265457168134
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.addSourceVariable(rawVariable0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      ontologyTerm0.setNameSpace("Cg");
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      LinkedList<OntologyTerm> linkedList0 = new LinkedList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList0 = derivedVariable0.getOntologyTerms();
      ArrayList<OntologyTerm> arrayList1 = rawVariable0.getOntologyTerms();
      arrayList0.addAll((Collection<? extends OntologyTerm>) arrayList1);
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.setForm("mF$<AF7r");
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      User user0 = new User();
      ArrayList<MacawChangeEvent> arrayList2 = RawVariable.detectFieldChanges(user0, rawVariable1, rawVariable0);
      assertEquals("mF$<AF7r", rawVariable0.getForm());
      assertEquals(1, arrayList2.size());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.0520402953052193
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      ontologyTerm0.setNameSpace("general.error.blankFie");
      arrayList0.add(ontologyTerm0);
      assertTrue(arrayList0.equals((Object)arrayList1));
      
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.removeOntologyTerms(arrayList0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      rawVariable0.setCleaned(true);
      rawVariable0.removeOntologyTerms(arrayList0);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      ontologyTerm2.setDescription("general.error.blankFie");
      rawVariable0.updateOntologyTerm(ontologyTerm2);
      rawVariable0.setColumnStart((String) null);
      User user0 = new User("general.error.blankFie", "l*R^2p~LyRCU~");
      Variable.validateFields(rawVariable0);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      derivedVariable0.getSourceVariables();
      assertEquals("Unknown", derivedVariable0.getCleaningStatus());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.8977834238295133
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B");
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent();
      Predicate.isEqual((Object) macawChangeEvent0);
      predicate0.or(predicate0);
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setLabel("B");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.containsSourceVariable(rawVariable0);
      Variable.validateFields(rawVariable0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      RawVariable rawVariable1 = new RawVariable();
      RawVariable rawVariable2 = new RawVariable();
      rawVariable2.setNotes("+VM[5CyLE+");
      rawVariable2.columnStart = "UNABLE_TO_CREATE_CONNECTION";
      user0.setCounty("B");
      User user1 = new User();
      RawVariable.detectFieldChanges(user0, rawVariable0, rawVariable2);
      assertEquals("UNABLE_TO_CREATE_CONNECTION", rawVariable2.getColumnStart());
      
      User.checkValidUserIDField("B");
      derivedVariable0.addSourceVariable(rawVariable1);
      RawVariable rawVariable3 = new RawVariable();
      RawVariable rawVariable4 = new RawVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      valueLabel0.setValue("B");
      ValueLabel valueLabel1 = new ValueLabel();
      derivedVariable0.removeValueLabel(valueLabel0);
      RawVariable rawVariable5 = new RawVariable();
      derivedVariable0.getLabel();
      RawVariable rawVariable6 = new RawVariable();
      User.detectFieldChanges(user1, user1, user1);
      RawVariable rawVariable7 = new RawVariable();
      assertFalse(rawVariable7.isNewRecord());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.0491613230433816
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      derivedVariable0.removeOntologyTerm(ontologyTerm1);
      ontologyTerm1.setNameSpace("JO");
      derivedVariable0.containsOntologyTerm(ontologyTerm1);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList1 = derivedVariable1.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      ontologyTerm0.setNameSpace("YBxzC");
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      rawVariable0.setColumnEnd(" ");
      rawVariable0.setCleaned(true);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm1);
      User user0 = new User((String) null, "UNABLE_TO_GET_VARIABLE_IDENTIFIER");
      RawVariable rawVariable1 = new RawVariable();
      RawVariable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      assertEquals(" ", rawVariable0.getColumnEnd());
      assertEquals("Unknown", rawVariable0.getCleaningStatus());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.3148914488554517
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.addSourceVariable(rawVariable0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.updateOntologyTerm(ontologyTerm0);
      derivedVariable0.addSourceVariable(derivedVariable1);
      ValueLabel valueLabel0 = new ValueLabel();
      derivedVariable0.removeValueLabel(valueLabel0);
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      User user0 = new User("W3L$8-OD0JbzV'", "W3L$8-OD0JbzV'");
      user0.setAffiliation("W3L$8-OD0JbzV'");
      DerivedVariable derivedVariable2 = new DerivedVariable();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ontologyTerm1.setNewRecord(false);
      rawVariable0.updateOntologyTerm(ontologyTerm1);
      rawVariable0.updateOntologyTerm(ontologyTerm1);
      boolean boolean0 = rawVariable0.containsOntologyTerm(ontologyTerm0);
      assertFalse(rawVariable0.isNewRecord());
      assertEquals("0", rawVariable0.getDisplayItemIdentifier());
      assertFalse(rawVariable0.isCoded());
      assertFalse(boolean0);
      assertFalse(rawVariable0.isCleaned());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      arrayList0.listIterator();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      boolean boolean0 = derivedVariable0.containsOntologyTerm(ontologyTerm0);
      assertTrue(boolean0);
      
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      arrayList0.add(ontologyTerm1);
      arrayList1.add(ontologyTerm0);
      LinkedList<OntologyTerm> linkedList0 = new LinkedList<OntologyTerm>();
      arrayList1.add(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList2 = new ArrayList<OntologyTerm>();
      arrayList0.add(ontologyTerm1);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      arrayList1.add(ontologyTerm2);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      ontologyTerm3.setNameSpace("xiKU|#e'K$F+W0");
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      arrayList2.replaceAll(unaryOperator0);
      arrayList1.addAll((Collection<? extends OntologyTerm>) arrayList0);
      arrayList0.add(ontologyTerm3);
      ArrayList<OntologyTerm> arrayList3 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList4 = new ArrayList<OntologyTerm>();
      arrayList4.addAll((Collection<? extends OntologyTerm>) arrayList2);
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      OntologyTerm ontologyTerm5 = new OntologyTerm();
      derivedVariable0.getSupportingDocuments();
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
      assertFalse(derivedVariable0.isNewRecord());
      assertFalse(derivedVariable0.isCoded());
      assertFalse(derivedVariable0.isCleaned());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.3823452227303257
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      ontologyTerm0.setNameSpace("Cg");
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<OntologyTerm> arrayList2 = rawVariable0.getOntologyTerms();
      arrayList2.add(ontologyTerm0);
      ontologyTerm0.setNameSpace("W3L$OV$D0Jbz'");
      ArrayList<OntologyTerm> arrayList3 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList4 = new ArrayList<OntologyTerm>();
      arrayList2.addAll((Collection<? extends OntologyTerm>) arrayList3);
      assertTrue(arrayList2.equals((Object)arrayList1));
      
      RawVariable rawVariable1 = new RawVariable();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      derivedVariable0.getLabel();
      assertFalse(derivedVariable0.isCoded());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.7062305591650775
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      predicate1.and(predicate0);
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setLabel("B");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.containsSourceVariable(rawVariable0);
      derivedVariable0.setIdentifier(338);
      Variable.validateFields(rawVariable0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      RawVariable rawVariable1 = new RawVariable();
      LinkedList<RawVariable> linkedList0 = new LinkedList<RawVariable>();
      ArrayList<Variable> arrayList1 = new ArrayList<Variable>(linkedList0);
      arrayList1.addAll((Collection<? extends Variable>) linkedList0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.addSourceVariables(arrayList1);
      RawVariable rawVariable2 = new RawVariable();
      rawVariable1.setIdentifier((-1024));
      User user1 = new User("B", "B");
      User user2 = new User();
      RawVariable.detectFieldChanges(user1, rawVariable0, rawVariable2);
      derivedVariable1.addSourceVariable(rawVariable1);
      RawVariable rawVariable3 = new RawVariable();
      RawVariable rawVariable4 = new RawVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel valueLabel1 = new ValueLabel();
      derivedVariable1.removeValueLabel(valueLabel0);
      rawVariable0.cloneAttributes(derivedVariable0);
      RawVariable rawVariable5 = new RawVariable();
      derivedVariable0.getLabel();
      RawVariable rawVariable6 = new RawVariable();
      RawVariable.detectFieldChanges(user0, rawVariable5, rawVariable0);
      assertEquals("B", rawVariable0.getLabel());
      assertEquals(0, rawVariable0.getIdentifier());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      boolean boolean0 = derivedVariable0.containsOntologyTerm(ontologyTerm0);
      assertTrue(boolean0);
      
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      arrayList1.add(ontologyTerm1);
      arrayList0.add(ontologyTerm1);
      LinkedList<OntologyTerm> linkedList0 = new LinkedList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList2 = new ArrayList<OntologyTerm>();
      arrayList2.add(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList3 = new ArrayList<OntologyTerm>();
      ontologyTerm0.setNewRecord(false);
      ArrayList<OntologyTerm> arrayList4 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      ontologyTerm2.setNameSpace("$N]f");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList2.sort(comparator0);
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, SupportingDocument> function0 = (Function<Object, SupportingDocument>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, SupportingDocument> function1 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function0);
      Function<Object, SupportingDocument> function2 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function1);
      unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function1);
      UnaryOperator<OntologyTerm> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super OntologyTerm, ?>) function2);
      arrayList3.replaceAll(unaryOperator0);
      arrayList4.addAll((Collection<? extends OntologyTerm>) arrayList0);
      arrayList1.add(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      rawVariable0.addSupportingDocument(supportingDocument0);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      String string0 = derivedVariable0.getAvailability();
      assertFalse(derivedVariable0.isNewRecord());
      assertFalse(derivedVariable0.isCoded());
      assertEquals("Unknown", string0);
      assertFalse(derivedVariable0.isCleaned());
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.753514020802008
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B");
      predicate0.or(predicate0);
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setLabel("B");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.containsSourceVariable(rawVariable0);
      Variable.validateFields(rawVariable0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      RawVariable rawVariable1 = new RawVariable();
      RawVariable rawVariable2 = new RawVariable();
      rawVariable2.columnStart = "UNABLE_TO_CREATE_CONNECTION";
      user0.setCounty("B");
      User user1 = new User();
      RawVariable.detectFieldChanges(user0, rawVariable0, rawVariable2);
      User.checkValidUserIDField("B");
      derivedVariable0.addSourceVariable(rawVariable1);
      RawVariable rawVariable3 = new RawVariable();
      RawVariable rawVariable4 = new RawVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      valueLabel0.setValue("B");
      ValueLabel valueLabel1 = new ValueLabel();
      RawVariable rawVariable5 = new RawVariable();
      derivedVariable0.getLabel();
      RawVariable rawVariable6 = new RawVariable();
      RawVariable.detectFieldChanges(user0, rawVariable5, rawVariable0);
      assertEquals("B", rawVariable0.getLabel());
      
      RawVariable rawVariable7 = new RawVariable();
      assertEquals("Unknown", rawVariable7.getAvailability());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setName("]*yQ~TyD;");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      derivedVariable1.addOntologyTerms(arrayList0);
      derivedVariable0.setAlternativeVariable(derivedVariable1);
      derivedVariable0.setColumnStart("user.addressLine1.saveChanges");
      derivedVariable0.setIdentifier(909);
      derivedVariable0.setFilePath((String) null);
      derivedVariable0.createVariableSummary();
      derivedVariable0.setColumnEnd("user.addressLine1.saveChanges");
      assertEquals(909, derivedVariable0.getIdentifier());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setYear("]S0yhIE");
      derivedVariable0.createVariableSummary();
      derivedVariable0.setName("variable.notes.label");
      derivedVariable0.setLabel("variable.notes.label");
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.setAlternativeVariable(rawVariable0);
      rawVariable0.setCleaned(true);
      ArrayList<OntologyTerm> arrayList0 = rawVariable0.getOntologyTerms();
      arrayList0.iterator();
      derivedVariable0.removeOntologyTerms(arrayList0);
      derivedVariable0.getLabel();
      assertEquals("variable.notes.label", derivedVariable0.getDisplayName());
      
      String string0 = rawVariable0.getAvailability();
      assertEquals("Unknown", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.738453620346387
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.setAlternativeVariable(rawVariable1);
      RawVariable rawVariable2 = (RawVariable)rawVariable0.clone();
      rawVariable0.getName();
      rawVariable0.columnEnd = "ke'";
      rawVariable1.setName("ke'");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setNotes("8");
      rawVariable2.setIdentifier((-2977));
      User user0 = new User();
      RawVariable.detectFieldChanges(user0, rawVariable0, rawVariable1);
      derivedVariable0.createVariableSummary();
      derivedVariable0.addSourceVariable(rawVariable0);
      RawVariable rawVariable3 = new RawVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      RawVariable rawVariable4 = new RawVariable();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) rawVariable4);
      RawVariable rawVariable5 = (RawVariable)rawVariable4.clone();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) rawVariable5);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate2.or(predicate0);
      predicate0.and(predicate4);
      predicate3.or(predicate4);
      Integer integer0 = new Integer((-2091));
      User user1 = new User();
      RawVariable rawVariable6 = new RawVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      Variable.detectChangesInAlternativeVariable(user1, rawVariable1, derivedVariable2);
      assertEquals("ke'", rawVariable1.getName());
      
      rawVariable3.getAlternativeVariable();
      assertEquals("0", rawVariable3.getDisplayItemIdentifier());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.6669919055686817
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.columnEnd = "\"K+YYiu9:(,)^s";
      VariableSummary variableSummary0 = rawVariable0.createVariableSummary();
      assertEquals("0", variableSummary0.getDisplayItemIdentifier());
      
      rawVariable0.getForm();
      RawVariable rawVariable1 = (RawVariable)rawVariable0.clone();
      assertEquals("\"K+YYiu9:(,)^s", rawVariable1.getColumnEnd());
      assertEquals("Unknown", rawVariable1.getCategory());
      assertEquals("Unknown", rawVariable1.getCleaningStatus());
      assertFalse(rawVariable1.isCleaned());
      assertEquals("", rawVariable1.getCodeBookNumber());
      assertEquals("", rawVariable1.getYear());
      assertEquals("Unknown", rawVariable1.getAvailability());
      assertEquals("", rawVariable1.getQuestionNumber());
      assertEquals("0", rawVariable1.getDisplayItemIdentifier());
      assertFalse(rawVariable1.isNewRecord());
      
      rawVariable0.getOntologyTerms();
      assertFalse(rawVariable0.isNewRecord());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.786100866302153
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      ontologyTerm0.setNameSpace("Cg");
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<OntologyTerm> arrayList2 = rawVariable0.getOntologyTerms();
      ontologyTerm0.setNameSpace("Cg");
      Variable.validateFields(rawVariable0);
      rawVariable0.setFilePath("Cg");
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      arrayList2.replaceAll(unaryOperator0);
      arrayList2.addAll((Collection<? extends OntologyTerm>) arrayList1);
      arrayList2.add(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList3 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList4 = new ArrayList<OntologyTerm>();
      arrayList2.addAll((Collection<? extends OntologyTerm>) arrayList0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      assertEquals("0", ontologyTerm2.getDisplayItemIdentifier());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      int int0 = rawVariable0.getIdentifier();
      assertEquals(0, int0);
      assertFalse(rawVariable0.isCoded());
      assertFalse(rawVariable0.isCleaned());
      assertFalse(rawVariable0.isNewRecord());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.addSourceVariable(rawVariable0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      String string0 = "Cg";
      rawVariable0.setCategory("Cg");
      ontologyTerm0.setNameSpace("Cg");
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      LinkedList<OntologyTerm> linkedList0 = new LinkedList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList0 = derivedVariable0.getOntologyTerms();
      rawVariable0.getOntologyTerms();
      // Undeclared exception!
      try { 
        arrayList0.set((-1729), ontologyTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.05251310854399
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      ontologyTerm0.setNameSpace("general.error.blankFie");
      arrayList0.add(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.removeOntologyTerms(arrayList0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      rawVariable0.setCleaned(true);
      rawVariable0.removeOntologyTerms(arrayList0);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      ontologyTerm2.setDescription("general.error.blankFie");
      rawVariable0.updateOntologyTerm(ontologyTerm2);
      rawVariable0.setNotes("general.error.blankFie");
      rawVariable0.questionNumber = "tRJeWS(C N${PTuj";
      User user0 = new User("general.error.blankFie", "l*R^2p~LyRCUX");
      Variable.validateFields(rawVariable0);
      assertEquals("general.error.blankFie", rawVariable0.getNotes());
      
      DerivedVariable derivedVariable1 = new DerivedVariable();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      derivedVariable0.getSourceVariables();
      assertEquals("Unknown", derivedVariable0.getAvailability());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.753349994178044
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      Integer integer0 = new Integer(413);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, SupportingDocument> function0 = (Function<Object, SupportingDocument>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, SupportingDocument> function1 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function0);
      function1.apply(unaryOperator0);
      Function<Object, SupportingDocument> function2 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function1);
      Function<Object, SupportingDocument> function3 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function1);
      Function<Object, SupportingDocument> function4 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function2);
      Function<Object, SupportingDocument> function5 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function4);
      unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function5);
      derivedVariable0.addOntologyTerms(arrayList0);
      UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function3);
      unaryOperator0.andThen((Function<? super OntologyTerm, ?>) function4);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      arrayList1.add(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      rawVariable0.addSupportingDocument(supportingDocument1);
      SupportingDocument supportingDocument3 = new SupportingDocument();
      rawVariable0.getSupportingDocuments();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.setIsNewRecord(true);
      // Undeclared exception!
      try { 
        rawVariable0.cloneAttributes((Variable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.722372546949731
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      ontologyTerm0.setNewRecord(true);
      arrayList0.add(ontologyTerm0);
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      Function<OntologyTerm, MacawChangeEvent> function0 = (Function<OntologyTerm, MacawChangeEvent>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super OntologyTerm, ? extends MacawChangeEvent>) function0);
      arrayList1.replaceAll(unaryOperator0);
      arrayList1.add(ontologyTerm0);
      ontologyTerm0.setNameSpace("general.error.blankFie");
      arrayList0.add(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.removeOntologyTerms(arrayList0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      UnaryOperator<OntologyTerm> unaryOperator1 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator1);
      arrayList0.addAll((Collection<? extends OntologyTerm>) arrayList1);
      arrayList1.add(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList2 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList3 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList4 = new ArrayList<OntologyTerm>(0);
      arrayList2.addAll((Collection<? extends OntologyTerm>) arrayList0);
      assertEquals(2, arrayList2.size());
      
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      DerivedVariable derivedVariable1 = (DerivedVariable)derivedVariable0.clone();
      assertEquals("Unknown", derivedVariable1.getCategory());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.8944221406435866
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B");
      predicate0.or(predicate0);
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.getName();
      RawVariable rawVariable2 = new RawVariable();
      User user1 = new User();
      User user2 = new User();
      ArrayList<MacawChangeEvent> arrayList0 = RawVariable.detectFieldChanges(user2, rawVariable0, rawVariable2);
      assertTrue(arrayList0.isEmpty());
      
      derivedVariable0.createVariableSummary();
      derivedVariable0.addSourceVariable(rawVariable2);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      user0.setFirstName("");
      LinkedList<RawVariable> linkedList0 = new LinkedList<RawVariable>();
      User user3 = new User();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      VariableSummary variableSummary0 = derivedVariable1.createVariableSummary();
      assertEquals("0", variableSummary0.getDisplayItemIdentifier());
      
      derivedVariable0.addSourceVariable(rawVariable0);
      Object object1 = new Object();
      Integer integer0 = new Integer((-79));
      DerivedVariable derivedVariable2 = new DerivedVariable();
      Predicate.isEqual((Object) derivedVariable2);
      Predicate.isEqual((Object) rawVariable2);
      Integer integer1 = new Integer((-5));
      Integer integer2 = new Integer((-1557));
      User user4 = new User();
      RawVariable rawVariable3 = new RawVariable();
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user2, rawVariable1, rawVariable3);
      assertEquals("Changed variable \"Alternative Variable\", field \"blank\", from \"\" to \"{3}\".", macawChangeEvent0.getChangeMessage());
      assertNotNull(macawChangeEvent0);
      assertEquals(0, (int)macawChangeEvent0.getVariableOwnerID());
      
      rawVariable3.getAlternativeVariable();
      System.setCurrentTimeMillis((-2055));
      derivedVariable0.containsSourceVariable(rawVariable3);
      assertEquals("Unknown", rawVariable3.getCategory());
      assertEquals("Unknown", rawVariable3.getAvailability());
      assertFalse(rawVariable3.isCoded());
      assertEquals("Unknown", rawVariable3.getCleaningStatus());
      assertFalse(rawVariable3.isCleaned());
      assertEquals("Unknown", derivedVariable0.getCategory());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.734199391321224
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
      
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      derivedVariable0.setIdentifier((-1));
      RawVariable rawVariable0 = new RawVariable();
      Variable.validateFields(rawVariable0);
      ArrayList<SupportingDocument> arrayList1 = new ArrayList<SupportingDocument>();
      rawVariable0.removeSupportingDocuments(arrayList1);
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.setIdentifier((-5));
      User user0 = new User();
      RawVariable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      derivedVariable0.createVariableSummary();
      derivedVariable0.addSourceVariable(rawVariable1);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel valueLabel1 = new ValueLabel();
      valueLabel0.hasSameDisplayName(valueLabel1);
      valueLabel0.setLabel("UNABLE_TO_CHECK_VALUE_LABEL_DUPLICATES");
      derivedVariable1.removeValueLabel(valueLabel0);
      rawVariable0.cloneAttributes(derivedVariable0);
      RawVariable rawVariable2 = new RawVariable();
      derivedVariable0.getLabel();
      assertEquals("Unknown", derivedVariable0.getAvailability());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.0343946195677223
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      ontologyTerm0.setNameSpace("Cg");
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      derivedVariable0.getOntologyTerms();
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      LinkedList<OntologyTerm> linkedList0 = new LinkedList<OntologyTerm>();
      derivedVariable0.getOntologyTerms();
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      ontologyTerm0.setNameSpace("~hTOO1u");
      ArrayList<OntologyTerm> arrayList2 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList3 = new ArrayList<OntologyTerm>();
      arrayList2.addAll((Collection<? extends OntologyTerm>) arrayList3);
      RawVariable rawVariable0 = new RawVariable();
      // Undeclared exception!
      try { 
        rawVariable0.removeSupportingDocuments((ArrayList<SupportingDocument>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.206552161926179
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      User user0 = new User();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.setNameSpace("UNABLE_TO_UPDATE_LEANING_STATE");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      boolean boolean0 = derivedVariable0.containsOntologyTerm(ontologyTerm0);
      assertFalse(boolean0);
      
      derivedVariable0.setCoded(false);
      ArrayList<OntologyTerm> arrayList0 = derivedVariable0.getOntologyTerms();
      arrayList0.add(ontologyTerm0);
      assertFalse(derivedVariable0.isCoded());
      
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<OntologyTerm> arrayList1 = rawVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      ontologyTerm0.setNameSpace("ONTOLOGY_TERM");
      ArrayList<OntologyTerm> arrayList2 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList3 = new ArrayList<OntologyTerm>();
      arrayList3.add(ontologyTerm0);
      arrayList2.addAll((Collection<? extends OntologyTerm>) arrayList3);
      RawVariable rawVariable1 = new RawVariable();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm2);
      assertFalse(rawVariable0.isNewRecord());
      assertFalse(rawVariable0.isCleaned());
      assertEquals(0, rawVariable0.getIdentifier());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.886498111239835
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      User user0 = new User();
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      RawVariable rawVariable1 = new RawVariable();
      RawVariable rawVariable2 = new RawVariable();
      User user1 = new User();
      User user2 = new User();
      User user3 = new User();
      ArrayList<MacawChangeEvent> arrayList0 = RawVariable.detectFieldChanges(user3, rawVariable0, rawVariable2);
      assertTrue(arrayList0.isEmpty());
      
      derivedVariable0.createVariableSummary();
      derivedVariable0.addSourceVariable(rawVariable2);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Integer integer0 = new Integer((-2067947201));
      User user4 = new User();
      RawVariable rawVariable3 = new RawVariable();
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable0);
      assertEquals("Changed variable \"Alternative Variable\", field \"\", from \"\" to \"{3}\".", macawChangeEvent0.getChangeMessage());
      assertNotNull(macawChangeEvent0);
      
      rawVariable3.getAlternativeVariable();
      rawVariable1.getAlternativeVariable();
      derivedVariable0.isCoded();
      assertEquals("Unknown", derivedVariable0.getAvailability());
      assertEquals("Unknown", derivedVariable0.getCleaningStatus());
      assertEquals("Unknown", derivedVariable0.getCategory());
      assertEquals(0, derivedVariable0.getIdentifier());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.708895446945671
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setCleaningDescription("variable.alternativeVariable.label");
      derivedVariable0.setLabel("variable.alternativeVariable.label");
      derivedVariable0.setColumnEnd("variable.alternativeVariable.label");
      derivedVariable0.getCodeBookNumber();
      derivedVariable0.getName();
      derivedVariable0.isCoded();
      derivedVariable0.setCoded(false);
      derivedVariable0.setYear("");
      derivedVariable0.clone();
      derivedVariable0.getColumnStart();
      assertEquals("variable.alternativeVariable.label", derivedVariable0.getCleaningDescription());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.8255923746135143
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      ontologyTerm0.setNameSpace("general.error.blankFie");
      arrayList0.add(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.removeOntologyTerms(arrayList0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.setNotes("Gag>_s");
      derivedVariable1.clone();
      User user0 = new User("B3(P-|v)ZzH5", "810kN3<h");
      DerivedVariable derivedVariable2 = new DerivedVariable();
      Variable.detectFieldChanges(user0, derivedVariable1, derivedVariable2);
      ArrayList<Variable> arrayList2 = new ArrayList<Variable>();
      derivedVariable1.setSourceVariables(arrayList2);
      assertEquals("Gag>_s", derivedVariable1.getNotes());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.534616400831924
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.test(predicate1);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate0.and(predicate4);
      Integer integer0 = new Integer((-1994091956));
      DerivedVariable derivedVariable0 = new DerivedVariable();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) derivedVariable0);
      Predicate<Object> predicate7 = predicate4.negate();
      Predicate<Object> predicate8 = predicate5.and(predicate2);
      Predicate<Object> predicate9 = predicate6.or(predicate8);
      predicate6.negate();
      Predicate<Object> predicate10 = predicate0.or(predicate9);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate11 = predicate10.negate();
      predicate6.negate();
      predicate10.and(predicate5);
      Predicate<Object> predicate12 = predicate7.negate();
      predicate1.test("B");
      predicate0.or(predicate12);
      predicate1.and(predicate12);
      predicate0.negate();
      predicate11.negate();
      predicate9.test(predicate3);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.columnEnd = null;
      User user1 = new User("VJ5YU2i8lZg4?yUf*", (String) null);
      User user2 = new User("UNABLE_TO_UPDATE_LEANING_STATE", "SR9IRk%`Hoc ");
      ArrayList<MacawChangeEvent> arrayList0 = new ArrayList<MacawChangeEvent>();
      derivedVariable1.cloneAttributes(derivedVariable0);
      assertEquals("Unknown", derivedVariable0.getCategory());
      assertFalse(derivedVariable0.isNewRecord());
      assertEquals(0, derivedVariable0.getIdentifier());
      assertEquals("Unknown", derivedVariable0.getCleaningStatus());
      assertEquals("Unknown", derivedVariable0.getAvailability());
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.534616400831924
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      User user0 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.test(predicate1);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate0.and(predicate4);
      Integer integer0 = new Integer((-1994091956));
      DerivedVariable derivedVariable0 = new DerivedVariable();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) derivedVariable0);
      predicate4.negate();
      Predicate<Object> predicate7 = predicate5.and(predicate2);
      Predicate<Object> predicate8 = predicate6.or(predicate7);
      predicate6.negate();
      Predicate<Object> predicate9 = predicate0.or(predicate8);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate11 = predicate9.negate();
      predicate6.negate();
      predicate9.and(predicate5);
      Predicate<Object> predicate12 = predicate10.negate();
      predicate1.test("B");
      predicate0.or(predicate12);
      predicate1.and(predicate12);
      predicate0.negate();
      predicate11.negate();
      predicate8.test(predicate3);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.columnEnd = null;
      User user1 = new User("VJ5YU2i8lZg4?yUf*", (String) null);
      User user2 = new User("UNABLE_TO_UPDATE_LEANING_STATE", "SR9IRk%`Hoc ");
      ArrayList<MacawChangeEvent> arrayList0 = new ArrayList<MacawChangeEvent>();
      derivedVariable1.cloneAttributes(derivedVariable0);
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
      assertFalse(derivedVariable0.isCleaned());
      assertFalse(derivedVariable0.isNewRecord());
      assertEquals("Unknown", derivedVariable0.getCleaningStatus());
      assertFalse(derivedVariable0.isCoded());
      assertEquals("Unknown", derivedVariable0.getAvailability());
      assertEquals("Unknown", derivedVariable0.getCategory());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.554035648050529
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      User user0 = new User();
      user0.setCounty("Wr\"gkp(6S@i'$ (>.");
      user0.setPhone("UNABLE_TO_UPDATE_LEANING_STATE");
      user0.setAddressLine2("B");
      user0.setAffiliation("UNABLE_TO_UPDATE_LEANING_STATE");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      User user1 = new User("YV0dB0hk", "UNABLE_TO_CHECK_VALUE_LABEL_DUPLICATES");
      User user2 = new User("YV0dB0hk", "UNABLE_TO_GET_ORIGINAL_USER");
      derivedVariable0.columnStart = "UNABLE_TO_UPDATE_LEANING_STATE";
      user2.setPhone("UNABLE_TO_UPDATE_LEANING_STATE");
      Variable.detectFieldChanges(user2, derivedVariable0, derivedVariable0);
      assertEquals("UNABLE_TO_UPDATE_LEANING_STATE", derivedVariable0.getColumnStart());
      assertEquals("Unknown", derivedVariable0.getCategory());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.554035648050529
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      User user0 = new User();
      user0.setAddressLine2("UNABLE_TO_UPDATE_CLEANING_STATE");
      user0.setAffiliation("FsIG2` Q%Bn<");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.codeBookNumber = "UNABLE_TO_UPDATE_CLEANING_STATE";
      Variable.detectFieldChanges(user0, derivedVariable0, derivedVariable0);
      assertEquals("UNABLE_TO_UPDATE_CLEANING_STATE", derivedVariable0.getCodeBookNumber());
      assertEquals("", derivedVariable0.getLabel());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.795705399097318
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      ontologyTerm0.setNameSpace("general.error.blankFie");
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      rawVariable0.setCleaned(true);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm2);
      rawVariable0.questionNumber = "tRJeWS(C N${PTuj";
      User user0 = new User("general.error.blankFie", "l*R^2p~LyRCUX");
      derivedVariable0.createVariableSummary();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.addSourceVariable(derivedVariable0);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      rawVariable0.containsOntologyTerm(ontologyTerm2);
      rawVariable0.cloneAttributes(derivedVariable1);
      assertTrue(rawVariable0.isCleaned());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.808868756725694
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.form = "'-6U@sjU_%<h`r,GV?";
      rawVariable0.isCoded();
      User user0 = new User();
      user0.setAffiliation("va>riable.form.label");
      user0.setStatus("LSLS|d}^+4");
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, rawVariable0);
      rawVariable0.getNotes();
      RawVariable rawVariable1 = new RawVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setDescription("LSLS|d}^+4");
      Integer[] integerArray0 = new Integer[7];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      int int1 = 0;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(860);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int1);
      integerArray0[6] = integer6;
      supportingDocument0.setFileName("va>riable.form.label");
      rawVariable0.cloneAttributes(rawVariable1);
      assertEquals("'-6U@sjU_%<h`r,GV?", rawVariable1.getForm());
      
      rawVariable0.getOntologyTerms();
      rawVariable0.getFilePath();
      VariableSummary variableSummary0 = rawVariable0.createVariableSummary();
      assertEquals("0", variableSummary0.getDisplayItemIdentifier());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.2240585736572336
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      arrayList0.add(ontologyTerm1);
      ontologyTerm1.setOntologyName("AKlc)M:&");
      arrayList0.add(ontologyTerm0);
      LinkedList<OntologyTerm> linkedList0 = new LinkedList<OntologyTerm>();
      arrayList0.add(ontologyTerm1);
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList2 = derivedVariable0.getOntologyTerms();
      arrayList2.add(ontologyTerm0);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      UnaryOperator<OntologyTerm> unaryOperator0 = UnaryOperator.identity();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, OntologyTerm> function0 = (Function<Object, OntologyTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super OntologyTerm, ? extends OntologyTerm>) function0);
      Function<Object, SupportingDocument> function1 = (Function<Object, SupportingDocument>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, SupportingDocument> function2 = unaryOperator1.andThen((Function<? super Object, ? extends SupportingDocument>) function1);
      unaryOperator0.andThen((Function<? super OntologyTerm, ?>) function2);
      arrayList1.replaceAll(unaryOperator0);
      arrayList0.addAll((Collection<? extends OntologyTerm>) arrayList0);
      arrayList0.add(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.addSourceVariable(rawVariable0);
      RawVariable rawVariable1 = new RawVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.setCleaningDescription("AKlc)M:&");
      assertEquals("AKlc)M:&", derivedVariable1.getCleaningDescription());
      
      RawVariable rawVariable2 = new RawVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      boolean boolean0 = rawVariable2.containsSupportingDocument(supportingDocument0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      ontologyTerm0.setNameSpace("Cg");
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      derivedVariable0.setYear("8-r&t08");
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      ontologyTerm0.setNameSpace("general.error.blankFie");
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      User user0 = new User("general.error.blankFie", "l*R^2p~LyRCUX");
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.hasSameDisplayName(derivedVariable0);
      assertEquals("8-r&t08", derivedVariable0.getYear());
  }
}
