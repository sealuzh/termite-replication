/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 16:19:04 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.datatransfer.SystemFlavorMap;
import java.io.BufferedReader;
import java.io.StringReader;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.Properties;
import java.util.Vector;
import java.util.function.Predicate;
import javax.swing.DropMode;
import javax.swing.JList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.ASEvaluation;
import weka.attributeSelection.CorrelationAttributeEval;
import weka.attributeSelection.InfoGainAttributeEval;
import weka.attributeSelection.SymmetricalUncertAttributeEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.ConditionalDensityEstimator;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.evaluation.output.prediction.CSV;
import weka.classifiers.evaluation.output.prediction.HTML;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.supportVector.Kernel;
import weka.classifiers.functions.supportVector.NormalizedPolyKernel;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.KStar;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.LMT;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomForest;
import weka.clusterers.HierarchicalClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.AllJavadoc;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.MinkowskiDistance;
import weka.core.ProtectedProperties;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.converters.ArffLoader;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.matrix.Matrix;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.estimators.KernelEstimator;
import weka.estimators.MahalanobisEstimator;
import weka.filters.MultiFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.140195590841193
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 559);
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".cost");
      testInstances0.setNumRelational(2);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalsePositives(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        evaluation1.toClassDetailsString("@relation");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.7581041708884073
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Evaluation.handleCostOption("", 582);
      SMOreg sMOreg0 = new SMOreg();
      sMOreg0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".cost");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFMeanPriorEntropy();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 11;
      double double1 = evaluation1.m_Correct;
      doubleArray0[1] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(1880, doubleArray0);
      sparseInstance0.setDataset(instances0);
      sMOreg0.setC(2);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray1 = evaluation2.m_TrainClassWeights;
      evaluation0.areaUnderPRC(1880);
      RandomForest randomForest0 = new RandomForest();
      evaluation1.evaluateModelOnce(0.0, (Instance) sparseInstance0);
      evaluation1.toClassDetailsString("import weka.classifiers.Classifier;\nimport weka.classifiers.AbstractClassifier;\n");
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1385374551624388
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 559;
      Evaluation.handleCostOption((String) null, 559);
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".cost");
      testInstances0.setNumRelational(2);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalsePositives(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      Double double0 = new Double(0.0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      Instance instance0 = null;
      LinearNNSearch linearNNSearch1 = new LinearNNSearch();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      try { 
        evaluation0.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0332456521822135
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      lWL0.setDebug(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.weightedTruePositiveRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Attribute attribute0 = new Attribute((String) null, (String) null, 2);
      LWL lWL1 = new LWL();
      lWL1.listOptions();
      evaluation0.numFalseNegatives(7);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      instances0.remove((Object) hierarchicalClusterer0);
      evaluation1.unweightedMicroFmeasure();
      evaluation1.rootMeanPriorSquaredError();
      evaluation1.precision((-5));
      evaluation1.numTruePositives(3);
      try { 
        evaluation0.evaluateModelOnce((Classifier) naiveBayesMultinomialText0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3750354585022224
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 559);
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".cost");
      testInstances0.setNumRelational(2);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalsePositives(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      Double double0 = new Double(0.0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      testInstances0.generate("PWU2%");
      int int0 = 357913932;
      Evaluation evaluation2 = new Evaluation(instances0);
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      ZeroR zeroR0 = new ZeroR();
      arrayDeque0.add(zeroR0);
      ZeroR zeroR1 = new ZeroR();
      ZeroR zeroR2 = new ZeroR();
      arrayDeque0.add(zeroR2);
      double double1 = evaluation2.m_SumKBInfo;
      evaluation1.trueNegativeRate(0);
      // Undeclared exception!
      try { 
        evaluation2.truePositiveRate(357913932);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.720530016786317
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumDate((-2));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-2);
      doubleArray0[5] = (double) (-2);
      LWL lWL0 = new LWL();
      testInstances1.setSeed(3);
      lWL0.setDebug(false);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.weightedTruePositiveRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalsePositiveRate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.trueNegativeRate(102);
      evaluation1.errorRate();
      try { 
        CostMatrix.parseMatlab("  /** the maximum values for numeric values */\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.009653988412479
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumDate((-2));
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      LinearNNSearch linearNNSearch1 = new LinearNNSearch();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (-977.46957);
      doubleArray0[4] = (double) (-1);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.4696072829762055
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      lWL0.setDebug(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.weightedTruePositiveRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      int int0 = 64;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(64);
      Instance instance0 = null;
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.538868797982405
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Evaluation.handleCostOption("", 582);
      SMOreg sMOreg0 = new SMOreg();
      sMOreg0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".cost");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFMeanPriorEntropy();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 11;
      evaluation1.areaUnderROC(1);
      doubleArray0[1] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(1880, doubleArray0);
      sparseInstance0.setDataset(instances0);
      sMOreg0.setC((-1648.27209));
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.makeDistribution(0.0);
      evaluation1.areaUnderPRC(1880);
      RandomForest randomForest0 = new RandomForest();
      // Undeclared exception!
      try { 
        evaluation2.truePositiveRate((-2096));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2096
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.43009742044214
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getDataSet();
      int[] intArray0 = new int[0];
      Instance instance0 = BallNode.calcCentroidPivot(intArray0, instances1);
      instances1.add(instance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      JRip jRip0 = new JRip();
      double double0 = evaluation0.m_SumSchemeEntropy;
      evaluation0.truePositiveRate(3);
      evaluation0.precision(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      evaluation1.numFalsePositives(12);
      Random.setNextRandom(2);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("/A`o<<v-jw]jYh8-uds");
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      evaluation3.areaUnderPRC(Integer.MAX_VALUE);
      RandomForest randomForest0 = new RandomForest();
      evaluation2.matthewsCorrelationCoefficient((-770));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation4 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.trueNegativeRate((-2283));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2810386811628796
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 559;
      Evaluation.handleCostOption((String) null, 559);
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".cost");
      testInstances0.setNumRelational(2);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalsePositives(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      Double double0 = new Double(0.0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      LinearNNSearch linearNNSearch1 = new LinearNNSearch();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 4.9E-324;
      doubleArray0[3] = (double) 559;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 559;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6917995288920684
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      jRip1.getOptions();
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getRuleset");
      LWL lWL0 = new LWL();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL1 = new LWL();
      LWL lWL2 = new LWL();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalsePositives(3);
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      ZeroR zeroR0 = new ZeroR();
      ArrayDeque<ZeroR> arrayDeque1 = new ArrayDeque<ZeroR>();
      arrayDeque0.add(zeroR0);
      evaluation1.m_TotalCoverage = (double) 1;
      zeroR0.toSource("h\"kP12J");
      ZeroR zeroR1 = new ZeroR();
      ArrayDeque<ZeroR> arrayDeque2 = new ArrayDeque<ZeroR>();
      arrayDeque2.add(zeroR0);
      instances0.retainAll(arrayDeque2);
      evaluation1.coverageOfTestCasesByPredictedRegions();
      evaluation0.matthewsCorrelationCoefficient(83);
      evaluation1.trueNegativeRate(18);
      assertEquals(Double.POSITIVE_INFINITY, evaluation1.coverageOfTestCasesByPredictedRegions(), 0.01);
      
      evaluation0.unweightedMacroFmeasure();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8809411037600898
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      jRip1.getOptions();
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getRuleset");
      LWL lWL0 = new LWL();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL1 = new LWL();
      LWL lWL2 = new LWL();
      lWL2.setDebug(true);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalsePositives(3);
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      ZeroR zeroR0 = new ZeroR();
      ArrayDeque<ZeroR> arrayDeque1 = new ArrayDeque<ZeroR>();
      arrayDeque0.add(zeroR0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.640507353345621
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|&";
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      LWL lWL0 = new LWL();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL1 = new LWL();
      lWL1.setDebug(false);
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = (double) 5;
      evaluation0.numFalsePositives(0);
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      ZeroR zeroR0 = new ZeroR();
      ArrayDeque<ZeroR> arrayDeque1 = new ArrayDeque<ZeroR>();
      evaluation0.getDiscardPredictions();
      ZeroR zeroR1 = new ZeroR();
      arrayDeque0.add(zeroR0);
      instances0.iterator();
      evaluation0.weightedMatthewsCorrelation();
      try { 
        evaluation0.crossValidateModel((Classifier) lWL1, instances0, 3, (java.util.Random) null, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.733499916938162
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-2);
      LWL lWL0 = new LWL();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.weightedTruePositiveRate();
      evaluation0.weightedFalsePositiveRate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.trueNegativeRate(102);
      MockRandom mockRandom0 = new MockRandom(4);
      mockRandom0.ints(87, 102);
      try { 
        evaluation0.crossValidateModel((Classifier) regressionByDiscretization0, instances0, 2, (java.util.Random) mockRandom0, (Object[]) regressionByDiscretization0.TAGS_ESTIMATOR);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5191313272162814
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Evaluation.handleCostOption("", 582);
      SMOreg sMOreg0 = new SMOreg();
      sMOreg0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".cost");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFMeanPriorEntropy();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 11;
      evaluation1.areaUnderROC(1);
      doubleArray0[1] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance(1880, doubleArray0);
      instances0.toString();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1880, doubleArray0);
      binarySparseInstance0.setDataset(instances0);
      evaluation1.updateStatsForPredictor(0.22499999403953552, binarySparseInstance0);
      ArffLoader arffLoader0 = new ArffLoader();
      ArffLoader arffLoader1 = new ArffLoader();
      ArffLoader arffLoader2 = new ArffLoader();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      arffLoader2.getNextInstance((Instances) null);
      try { 
        evaluation1.updateStatsForPredictor(6.7, binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4592825503415043
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumDate((-2));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-2);
      LWL lWL0 = new LWL();
      lWL0.setDebug(false);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.weightedTruePositiveRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instance instance0 = null;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JRip jRip0 = new JRip();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      TestInstances testInstances0 = new TestInstances();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel3 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel4 = new PrecomputedKernelMatrixKernel();
      Vote vote0 = new Vote();
      Capabilities capabilities0 = vote0.getCapabilities();
      capabilities0.enableAllClasses();
      TestInstances.forCapabilities(capabilities0);
      KernelEstimator kernelEstimator0 = new KernelEstimator(0.0);
      Capabilities capabilities1 = kernelEstimator0.getCapabilities();
      MultiFilter multiFilter0 = new MultiFilter();
      Capabilities capabilities2 = multiFilter0.getCapabilities();
      capabilities1.supports(capabilities2);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      capabilities2.disableDependency(capabilities_Capability0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-973.06985590086);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(1.3, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) lWL0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations(18);
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9366147725931564
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities1 = precomputedKernelMatrixKernel1.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate(" ");
      testInstances1.setClassIndex(23);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.relativeAbsoluteError();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, (-2), Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 559);
      SMOreg sMOreg0 = new SMOreg();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel2.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setClassIndex((-1));
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.660358828243872
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      int int0 = 582;
      Evaluation.handleCostOption((String) null, 582);
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(0.17499999701976776, doubleArray0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      instances0.add((Instance) denseInstance0);
      double double0 = 9.223372036854776E18;
      boolean boolean0 = false;
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7109553467522836
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      jRip1.setOptimizations(18);
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(0);
      evaluation0.SFMeanPriorEntropy();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      gaussianProcesses0.listOptions();
      SparseInstance sparseInstance0 = new SparseInstance(3);
      Object object0 = new Object();
      Object object1 = new Object();
      evaluation0.numFalsePositives(0);
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      ZeroR zeroR0 = new ZeroR();
      ArrayDeque<ZeroR> arrayDeque1 = new ArrayDeque<ZeroR>();
      arrayDeque1.add(zeroR0);
      ZeroR zeroR1 = new ZeroR();
      arrayDeque0.add(zeroR1);
      instances0.retainAll(arrayDeque0);
      evaluation0.sizeOfPredictedRegions();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.KBInformation();
      evaluation0.precision(5);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(0, charArray0, 2276);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.3947851382346474
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      lWL0.setDebug(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.weightedTruePositiveRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Attribute attribute0 = new Attribute((String) null, (String) null, 2);
      Vote vote0 = new Vote();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation2 = new Evaluation(instances0, costMatrix0);
      try { 
        evaluation2.evaluateModel((Classifier) adaBoostM1_0, instances0, (Object[]) regressionByDiscretization1.TAGS_ESTIMATOR);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.883510979579
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Evaluation.handleCostOption("", 582);
      SMOreg sMOreg0 = new SMOreg();
      sMOreg0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".cost");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFMeanPriorEntropy();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 11;
      evaluation1.areaUnderROC(1);
      doubleArray0[1] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(1880, doubleArray0);
      sparseInstance0.setDataset(instances0);
      sMOreg0.setC((-1648.27209));
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.makeDistribution(0.0);
      evaluation1.areaUnderPRC(1880);
      RandomForest randomForest0 = new RandomForest();
      evaluation1.evaluateModelOnce(Double.NaN, (Instance) sparseInstance0);
      assertEquals(0.0, evaluation1.pctIncorrect(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7231861745043986
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JRip jRip0 = new JRip();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      TestInstances testInstances0 = new TestInstances();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel3 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel4 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel4.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances2 = new TestInstances();
      Instances instances0 = testInstances1.generate("@data");
      testInstances2.setClassIndex(357913932);
      Evaluation evaluation0 = new Evaluation(instances0);
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      ZeroR zeroR0 = new ZeroR();
      arrayDeque0.add(zeroR0);
      ZeroR zeroR1 = new ZeroR();
      arrayDeque0.add(zeroR0);
      double double0 = evaluation0.matthewsCorrelationCoefficient(100);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.trueNegativeRate(357913932);
      assertEquals(double1, double0, 0.01);
      
      evaluation0.truePositiveRate(0);
      double double2 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.numFalseNegatives(1);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.m_Incorrect;
      assertEquals(double4, double0, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.073343412953522
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      Utils.SMALL = 1417.83411473547;
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 9.223372036854776E18;
      doubleArray0[3] = (double) (-2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray0[4] = (double) (-1);
      double[] doubleArray1 = new double[15];
      doubleArray0[1] = (double) (-2);
      doubleArray1[1] = (double) (-2);
      doubleArray1[2] = (double) (-2);
      doubleArray1[1] = (double) (-2);
      doubleArray1[4] = 4630.3953;
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      lWL1.globalInfo();
      lWL1.setDebug(false);
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation1.getClassPriors();
      evaluation0.numTrueNegatives((-1));
      // Undeclared exception!
      try { 
        evaluation1.precision(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.651646907089347
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JRip jRip0 = new JRip();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      TestInstances testInstances0 = new TestInstances();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel3 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel4 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel4.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances2 = new TestInstances();
      Instances instances0 = testInstances1.generate("@data");
      testInstances2.setClassIndex((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      ZeroR zeroR0 = new ZeroR();
      arrayDeque0.add(zeroR0);
      ZeroR zeroR1 = new ZeroR();
      arrayDeque0.add(zeroR0);
      double double0 = evaluation0.matthewsCorrelationCoefficient(100);
      double double1 = evaluation0.trueNegativeRate(1);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      evaluation0.numFalseNegatives(1);
      evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.66372710754658
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      SMO sMO0 = new SMO();
      Capabilities capabilities0 = sMO0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_1 = new AdaBoostM1();
      evaluation0.toClassDetailsString("weka/core/Capabilities.props");
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      evaluation0.relativeAbsoluteError();
      sMO0.getCapabilities();
      evaluation0.KBRelativeInformation();
      StringReader stringReader0 = new StringReader("{a!mu}.d%/CAKxoDFu");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0, 1);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.739095693408086
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      SMO sMO0 = new SMO();
      Capabilities capabilities0 = sMO0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_1 = new AdaBoostM1();
      evaluation0.toCumulativeMarginDistributionString();
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      evaluation0.relativeAbsoluteError();
      sMO0.getCapabilities();
      evaluation0.KBRelativeInformation();
      evaluation0.meanPriorAbsoluteError();
      // Undeclared exception!
      try { 
        evaluation0.recall((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      jRip1.setOptimizations(18);
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSchemeEntropy;
      evaluation0.truePositiveRate(3);
      evaluation0.numFalsePositives(2);
      Random.setNextRandom(60);
      try { 
        evaluation0.evaluateModel((Classifier) lWL0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3609093299839157
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = new TestInstances();
      testInstances0.setNumDate(1911);
      testInstances2.getRelationalClassFormat();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.239950697835986
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 559);
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".cost");
      testInstances0.setNumRelational(2);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalsePositives(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      Double double0 = new Double(0.0);
      evaluation1.setPriors(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 559;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SelectedTag selectedTag0 = regressionByDiscretization0.getEstimatorType();
      gaussianProcesses0.setFilterType(selectedTag0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      evaluation0.meanPriorAbsoluteError();
      try { 
        evaluation1.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9851618115346552
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Evaluation.handleCostOption("", 582);
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6893846125361471
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations(582);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      AbstractClassifier.runClassifier((Classifier) null, stringArray0);
      jRip0.setOptions(stringArray0);
      Object object0 = new Object();
      DecisionStump decisionStump0 = new DecisionStump();
      DecisionStump decisionStump1 = new DecisionStump();
      decisionStump0.listOptions();
      Evaluation.getGlobalInfo(jRip0);
      Evaluation.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.3218188165220255
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance(0.17499999701976776, doubleArray0);
      instances0.add((Instance) denseInstance0);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 9.223372036854776E18;
      evaluation0.setDiscardPredictions(false);
      evaluation1.unweightedMacroFmeasure();
      SparseInstance sparseInstance0 = new SparseInstance((-2.0), doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 6;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (-2.0);
      doubleArray1[3] = (-2018.05649695);
      doubleArray1[4] = 9.223372036854776E18;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2018.05649695), doubleArray1);
      SparseInstance sparseInstance1 = new SparseInstance(6);
      SparseInstance sparseInstance2 = new SparseInstance((-1.0), doubleArray0);
      Instance instance0 = sparseInstance2.mergeInstance(binarySparseInstance0);
      DenseInstance denseInstance1 = new DenseInstance(sparseInstance1);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray1, instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.2301968325313486
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1206);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-1936.57), doubleArray0);
      instances0.add((Instance) denseInstance0);
      evaluation0.setDiscardPredictions(true);
      evaluation0.unweightedMacroFmeasure();
      SparseInstance sparseInstance0 = new SparseInstance(0.95, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2536.8062693), doubleArray0);
      SparseInstance sparseInstance1 = null;
      try {
        sparseInstance1 = new SparseInstance((-1206));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.5985693819696465
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations((-2563));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      LWL lWL0 = new LWL();
      lWL0.getTechnicalInformation();
      Random.setNextRandom(2938);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      evaluation0.unweightedMicroFmeasure();
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'L';
      evaluation0.num2ShortID(2938, charArray0, 3);
      evaluation0.toClassDetailsString("@data");
      evaluation0.areaUnderPRC((-1457654536));
      Random.setNextRandom(1);
      lWL0.listOptions();
      evaluation0.numFalseNegatives(4);
      evaluation0.unweightedMicroFmeasure();
      evaluation0.rootMeanPriorSquaredError();
      // Undeclared exception!
      try { 
        evaluation0.precision((-547));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -547
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|&";
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      LWL lWL0 = new LWL();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 4;
      doubleArray2[3] = (double) 3;
      doubleArray2[4] = (double) 5;
      doubleArray2[5] = (double) (-1);
      doubleArray2[6] = (double) (-1);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 5;
      doubleArray3[1] = (double) 1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) (-1);
      doubleArray4[1] = (double) (-1);
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 4;
      doubleArray4[4] = (double) 5;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (double) 3;
      doubleArray5[1] = (double) 4;
      doubleArray5[2] = (double) 3;
      doubleArray5[3] = (double) 5;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = (double) (-1);
      doubleArray7[1] = (double) 1;
      doubleArray7[2] = (double) 2;
      doubleArray7[3] = (double) 1;
      doubleArray7[4] = 144.926444904145;
      doubleArray7[5] = (double) 5;
      doubleArray7[6] = (double) 5;
      doubleArray7[7] = (double) (-2);
      doubleArray7[8] = (double) 3;
      doubleArray0[6] = doubleArray7;
      evaluation0.m_ConfusionMatrix = doubleArray0;
      try { 
        evaluation0.toMatrixString(".arff");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7758772221764683
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      lWL0.setDebug(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      evaluation0.setNumericPriorsFromBuffer();
      double double1 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double2, double0, 0.01);
      
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Attribute attribute0 = new Attribute((String) null, (String) null, 2);
      LWL lWL1 = new LWL();
      lWL1.listOptions();
      double double3 = evaluation0.numFalseNegatives(1);
      assertEquals(0.0, double3, 0.01);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      instances0.remove((Object) hierarchicalClusterer0);
      evaluation1.rootMeanPriorSquaredError();
      double double4 = evaluation1.numTruePositives(600);
      double double5 = evaluation1.incorrect();
      assertEquals(double5, double4, 0.01);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.393303656753166
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      JRip jRip0 = new JRip();
      double double0 = evaluation0.m_SumSchemeEntropy;
      evaluation0.truePositiveRate(6);
      evaluation0.precision(5);
      evaluation0.numFalsePositives(4);
      int int0 = (-2519);
      Random.setNextRandom((-2519));
      Evaluation evaluation1 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(117);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier1.getCostMatrix();
      SystemFlavorMap.decodeDataFlavor(".cost");
      evaluation1.KBInformation();
      evaluation1.weightedFMeasure();
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.09958469244426
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      lWL0.setDebug(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      Integer integer0 = new Integer(4);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.weightedTruePositiveRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalsePositiveRate();
      double double1 = evaluation1.weightedTruePositiveRate();
      assertEquals(double1, double0, 0.01);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      ZeroR zeroR0 = new ZeroR();
      arrayDeque0.add(zeroR0);
      ZeroR zeroR1 = new ZeroR();
      arrayDeque0.add(zeroR1);
      ZeroR zeroR2 = new ZeroR();
      arrayDeque0.add(zeroR1);
      instances0.retainAll(arrayDeque0);
      Double double2 = new Double(Double.NaN);
      double double3 = evaluation1.kappa();
      assertEquals(1.0, double3, 0.01);
      
      double double4 = evaluation1.coverageOfTestCasesByPredictedRegions();
      evaluation1.precision(851);
      double double5 = evaluation1.fMeasure((-1243));
      evaluation0.numFalseNegatives(851);
      evaluation1.setNumericPriorsFromBuffer();
      double double6 = evaluation0.numInstances();
      assertEquals(double6, double5, 0.01);
      
      double double7 = evaluation1.weightedFMeasure();
      assertEquals(double7, double4, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.813825683396866
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JRip jRip0 = new JRip();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      TestInstances testInstances0 = new TestInstances();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel3 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel4 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel4.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances2 = new TestInstances();
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Kernel.makeCopy(normalizedPolyKernel0);
      Instances instances0 = testInstances1.generate("@data");
      testInstances2.setClassIndex(357913932);
      Evaluation evaluation0 = new Evaluation(instances0);
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      ZeroR zeroR0 = new ZeroR();
      arrayDeque0.add(zeroR0);
      ZeroR zeroR1 = new ZeroR();
      arrayDeque0.add(zeroR0);
      evaluation0.matthewsCorrelationCoefficient(100);
      evaluation0.trueNegativeRate(357913932);
      evaluation0.truePositiveRate(0);
      evaluation0.SFMeanEntropyGain();
      evaluation0.SFPriorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(3107);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3107
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.2238957899576275
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumDate((-2));
      evaluation0.setPriors(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      evaluation0.updateMargins(doubleArray0, 1, (-586.2145802025794));
      evaluation0.equals(adaBoostM1_0);
      double double0 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.344429516476632
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 582);
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".cost");
      testInstances0.setNumRelational(2);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalsePositives(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation1.SFMeanPriorEntropy();
      evaluation1.m_MaxTarget = 0.0;
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation2.weightedMatthewsCorrelation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.232505512516056
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities0 = infoGainAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      testInstances0.setNumDate((-1206));
      evaluation0.setPriors(instances0);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedFalsePositiveRate();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-952.0), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.updateStatsForPredictor(6, binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.212223642812657
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 582);
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".cost");
      int int0 = 11;
      testInstances0.setNumRelational(2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      LWL lWL1 = new LWL();
      LWL lWL2 = new LWL();
      lWL2.getClassifier();
      LWL lWL3 = new LWL();
      LWL.main(testInstances0.DEFAULT_WORDS);
      lWL3.getOptions();
      lWL0.globalInfo();
      LWL lWL4 = new LWL();
      lWL1.listOptions();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      lWL2.globalInfo();
      lWL1.setNearestNeighbourSearchAlgorithm(linearNNSearch0);
      TestInstances testInstances1 = new TestInstances();
      LWL lWL5 = new LWL();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.4850103931187406
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumDate((-2));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      evaluation0.setPriors(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1495);
      intArray0[2] = (-1495);
      intArray0[3] = (-1);
      evaluation0.toMatrixString(".bsi");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.areaUnderPRC((-1495));
      evaluation1.kappa();
      double double0 = evaluation1.m_SumAbsErr;
      ArffLoader arffLoader0 = new ArffLoader();
      ArffLoader arffLoader1 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation1.evaluateModelOnce((-0.25), (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.690608766935853
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Evaluation.handleCostOption("", 582);
      SMOreg sMOreg0 = new SMOreg();
      sMOreg0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".cost");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFMeanPriorEntropy();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 11;
      evaluation1.areaUnderROC(1);
      doubleArray0[1] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(1880, doubleArray0);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.toClassDetailsString("costMatrixTipText");
      evaluation1.areaUnderPRC(1880);
      RandomForest randomForest0 = new RandomForest();
      try { 
        evaluation1.evaluateModelOnce(0.693147181, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.4694275161306334
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      jRip1.setOptimizations(18);
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(0);
      evaluation0.SFMeanPriorEntropy();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      gaussianProcesses0.listOptions();
      SparseInstance sparseInstance0 = new SparseInstance(3);
      Object object0 = new Object();
      Object object1 = new Object();
      evaluation0.toCumulativeMarginDistributionString();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 5;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.4922963932744846
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      lWL0.setDebug(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.weightedTruePositiveRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Attribute attribute0 = new Attribute((String) null, (String) null, 2);
      Vote vote0 = new Vote();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization1, binarySparseInstance0, 4.9E-324);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.848441593255638
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      jRip1.getOptions();
      jRip1.setOptimizations(18);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      LWL lWL0 = new LWL();
      lWL0.setDebug(false);
      evaluation0.numFalsePositives(122);
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      ZeroR zeroR0 = new ZeroR();
      ArrayDeque<ZeroR> arrayDeque1 = new ArrayDeque<ZeroR>();
      arrayDeque0.add(zeroR0);
      ZeroR zeroR1 = new ZeroR();
      arrayDeque0.add(zeroR1);
      instances0.retainAll(arrayDeque0);
      evaluation0.sizeOfPredictedRegions();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.matthewsCorrelationCoefficient(1);
      evaluation1.m_SumAbsErr = (double) 18;
      double double1 = evaluation0.trueNegativeRate(111);
      assertEquals(0.0, double1, 0.01);
      
      evaluation1.numTruePositives((-3518));
      double double2 = evaluation0.priorEntropy();
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.6937015772941644
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|&";
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      correlationAttributeEval0.getCapabilities();
      ASEvaluation.runEvaluator(correlationAttributeEval0, stringArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-45);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LWL lWL0 = new LWL();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      String string0 = evaluation0.toClassDetailsString("=j.*UkBa");
      assertEquals("=j.*UkBa\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      correlationAttributeEval0.setOutputDetailedInfo(true);
      evaluation0.relativeAbsoluteError();
      SMO sMO0 = new SMO();
      sMO0.getCapabilities();
      evaluation0.KBRelativeInformation();
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
      
      evaluation0.SFEntropyGain();
      evaluation0.weightedRecall();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.461839514021145
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      JRip jRip0 = new JRip();
      double double0 = evaluation0.m_SumSchemeEntropy;
      evaluation0.truePositiveRate(6);
      evaluation0.numFalsePositives(4);
      Random.setNextRandom((-2519));
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation1.toClassDetailsString((String) null);
      assertEquals("null\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.areaUnderPRC((-197112209));
      RandomForest randomForest0 = new RandomForest();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      SMOreg sMOreg0 = new SMOreg();
      sMOreg0.getFilterType();
      SparseInstance sparseInstance0 = new SparseInstance(3);
      sparseInstance0.mergeInstance(binarySparseInstance0);
      double double1 = evaluation0.matthewsCorrelationCoefficient(2);
      assertEquals(0.0, double1, 0.01);
      
      evaluation1.trueNegativeRate(1);
      evaluation0.recall((-2519));
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.237376404761947
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Xa?");
      testInstances0.setNumDate((-2));
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-2);
      LWL lWL0 = new LWL();
      testInstances0.setSeed(3);
      lWL0.setDebug(false);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.weightedTruePositiveRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalsePositiveRate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SparseInstance sparseInstance0 = new SparseInstance((-2.0), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.22499999403953552, doubleArray0);
      binarySparseInstance0.mergeInstance(sparseInstance0);
      evaluation0.matthewsCorrelationCoefficient(843);
      evaluation0.trueNegativeRate(6);
      evaluation0.rootRelativeSquaredError();
      evaluation1.pctIncorrect();
      evaluation1.numTruePositives(14);
      try { 
        Evaluation.handleCostOption(".bsi", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.9025325686415733
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|&";
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      correlationAttributeEval0.getCapabilities();
      ASEvaluation.runEvaluator(correlationAttributeEval0, stringArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      LWL lWL0 = new LWL();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1302.0;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = 920.8588153588804;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 3, 1.0E-5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -95035
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.7449421800433815
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumDate(2147483645);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2147483645;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 64.0;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = 9.223372036854776E18;
      doubleArray0[6] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2.0));
      evaluation0.weightedAreaUnderPRC();
      evaluation0.SFMeanEntropyGain();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.meanPriorAbsoluteError();
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.006288711953378
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LWL lWL0 = new LWL();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LWL lWL1 = new LWL();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "setOptions");
      LWL lWL2 = new LWL();
      lWL2.getClassifier();
      lWL1.getOptions();
      lWL0.globalInfo();
      LWL lWL3 = new LWL();
      lWL3.listOptions();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      lWL3.setWeightingKernel((-3062));
      linearNNSearch0.setSkipIdentical(false);
      lWL3.toString();
      lWL1.setDebug(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Random.setNextRandom(118);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalsePositives(3);
      assertEquals(0.0, double0, 0.01);
      
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      instances0.retainAll(arrayDeque0);
      double double1 = evaluation0.m_SumPredicted;
      evaluation0.toSummaryString("Locally weighted learning. Uses an instance-based algorithm to assign instance weights which are then used by a specified WeightedInstancesHandler.\nCan do classification (e.g. using naive Bayes) or regression (e.g. using linear regression).\n\nFor more info, see\n\nEibe Frank, Mark Hall, Bernhard Pfahringer: Locally Weighted Naive Bayes. In: 19th Conference in Uncertainty in Artificial Intelligence, 249-256, 2003.\n\nC. Atkeson, A. Moore, S. Schaal (1996). Locally weighted learning. AI Review..", true);
      evaluation0.areaUnderPRC(5);
      double double2 = evaluation0.totalCost();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.pctUnclassified();
      evaluation0.rootRelativeSquaredError();
      double double4 = evaluation0.avgCost();
      assertEquals(double4, double3, 0.01);
      
      double double5 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double5, 0.01);
      
      double double6 = evaluation0.truePositiveRate(105);
      assertEquals(0.0, double6, 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.5385764193098392
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getDataSet();
      int[] intArray0 = new int[0];
      Instance instance0 = BallNode.calcCentroidPivot(intArray0, instances1);
      instances1.add(instance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      JRip jRip0 = new JRip();
      double double0 = evaluation0.m_SumSchemeEntropy;
      evaluation0.truePositiveRate(3);
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = 'U';
      charArray0[2] = '7';
      charArray0[3] = 'a';
      charArray0[4] = 'L';
      charArray0[5] = 'B';
      charArray0[6] = 'Q';
      charArray0[7] = 'H';
      evaluation0.num2ShortID(4, charArray0, 1307);
      evaluation0.precision(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalsePositives(12);
      Random.setNextRandom(2);
      Evaluation evaluation2 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString("/A`o<<v-jw]jYh8-uds");
      assertEquals("/A`o<<v-jw]jYh8-uds\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      evaluation3.areaUnderPRC(Integer.MAX_VALUE);
      RandomForest randomForest0 = new RandomForest();
      double double1 = evaluation2.matthewsCorrelationCoefficient((-770));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation4 = new Evaluation(instances0, (CostMatrix) null);
      double double2 = evaluation2.trueNegativeRate((-2283));
      assertEquals(double2, double1, 0.01);
      
      evaluation4.pctUnclassified();
      assertEquals(0.0, evaluation4.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5378004650639632
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SMO sMO0 = new SMO();
      Capabilities capabilities0 = sMO0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 1880;
      evaluation0.areaUnderROC((-3727));
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(67.432458643, doubleArray0);
      CostMatrix costMatrix0 = new CostMatrix(6);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.6544465311255245
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 9.223372036854776E18;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.listOptions();
      evaluation0.numFalsePositives((-331));
      double double0 = evaluation0.unweightedMicroFmeasure();
      Vector<LogitBoost> vector0 = new Vector<LogitBoost>();
      JList<LogitBoost> jList0 = new JList<LogitBoost>(vector0);
      DropMode dropMode0 = jList0.getDropMode();
      DropMode.values();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) dropMode0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      M5Rules m5Rules0 = new M5Rules();
      predicate1.test(m5Rules0);
      Predicate<Object> predicate3 = predicate2.negate();
      instances0.removeIf(predicate3);
      double double1 = evaluation0.m_SumErr;
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.matthewsCorrelationCoefficient(662);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.307717745049691
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      String[] stringArray0 = jRip1.getOptions();
      jRip1.setOptimizations(18);
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionStump decisionStump0 = new DecisionStump();
      DecisionStump decisionStump1 = new DecisionStump();
      DecisionStump.main(stringArray0);
      decisionStump0.listOptions();
      evaluation0.m_Header = instances0;
      String string0 = Evaluation.getGlobalInfo(lWL0);
      assertEquals("\nSynopsis for weka.classifiers.lazy.LWL:\n\nLocally weighted learning. Uses an instance-based algorithm to assign instance weights which are then used by a specified WeightedInstancesHandler.\nCan do classification (e.g. using naive Bayes) or regression (e.g. using linear regression).\n\nFor more info, see\n\nEibe Frank, Mark Hall, Bernhard Pfahringer: Locally Weighted Naive Bayes. In: 19th Conference in Uncertainty in Artificial Intelligence, 249-256, 2003.\n\nC. Atkeson, A. Moore, S. Schaal (1996). Locally weighted learning. AI Review..", string0);
      
      Evaluation.main(stringArray0);
      double double0 = evaluation0.totalCost();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.8606491493593174
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JRip jRip0 = new JRip();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      TestInstances testInstances0 = new TestInstances();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel3 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel4 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel4.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances2 = new TestInstances();
      Instances instances0 = testInstances1.generate("@data");
      testInstances2.setClassIndex(357913932);
      Evaluation evaluation0 = new Evaluation(instances0);
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      ZeroR zeroR0 = new ZeroR();
      evaluation0.toMatrixString(".arff");
      LWL lWL2 = new LWL();
      LWL lWL3 = new LWL();
      try { 
        Evaluation.handleCostOption("@data", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.7153906673594563
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      Instances instances0 = testInstances0.getData();
      Evaluation evaluation0 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      String string0 = evaluation0.toClassDetailsString((String) null);
      assertEquals("null\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\n                 0        0        0          0       0          0     ?         ?         class3\n                 0        0        0          0       0          0     ?         ?         class4\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      evaluation0.getDiscardPredictions();
      evaluation0.relativeAbsoluteError();
      SMO sMO0 = new SMO();
      sMO0.getCapabilities();
      evaluation0.KBRelativeInformation();
      double double0 = evaluation0.priorEntropy();
      assertEquals(1.910762106246821, double0, 0.01);
      
      evaluation0.SFEntropyGain();
      evaluation0.KBInformation();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.939349072688369
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("!CZE@T%Tfpv");
      LWL lWL0 = new LWL();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL1 = new LWL();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalsePositives(3);
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      ZeroR zeroR0 = new ZeroR();
      ArrayDeque<ZeroR> arrayDeque1 = new ArrayDeque<ZeroR>();
      ArrayDeque<ZeroR> arrayDeque2 = new ArrayDeque<ZeroR>();
      arrayDeque2.add(zeroR0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      zeroR0.toSource("getRuleset");
      ZeroR zeroR1 = new ZeroR();
      ArrayDeque<ZeroR> arrayDeque3 = new ArrayDeque<ZeroR>();
      ZeroR zeroR2 = new ZeroR();
      arrayDeque0.add(zeroR2);
      instances0.retainAll(arrayDeque1);
      double double0 = evaluation1.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation1.matthewsCorrelationCoefficient(7);
      assertEquals(0.0, double1, 0.01);
      
      evaluation1.trueNegativeRate(83);
      double double2 = evaluation0.unweightedMacroFmeasure();
      evaluation1.numTruePositives(479);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      double double3 = evaluation1.avgCost();
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.451920750018101
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations(18);
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(0);
      evaluation0.SFMeanPriorEntropy();
      double[] doubleArray0 = new double[9];
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SMO sMO0 = new SMO();
      SelectedTag selectedTag0 = sMO0.getFilterType();
      gaussianProcesses0.setFilterType(selectedTag0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      gaussianProcesses0.listOptions();
      SparseInstance sparseInstance0 = new SparseInstance(3);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      Instance instance0 = sparseInstance0.mergeInstance(binarySparseInstance1);
      DenseInstance denseInstance0 = new DenseInstance(instance0);
      evaluation0.kappa();
      double double0 = evaluation0.m_SumAbsErr;
      ArffLoader arffLoader0 = new ArffLoader();
      ArffLoader arffLoader1 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce((double) 0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.65586536611091
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JRip jRip0 = new JRip();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      ASEvaluation.runEvaluator(correlationAttributeEval0, (String[]) null);
      LWL lWL1 = new LWL();
      correlationAttributeEval0.setOutputDetailedInfo(false);
      LWL lWL2 = new LWL();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(MwW");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      SMO sMO0 = new SMO();
      sMO0.getCapabilities();
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.addNumericTrainClass((-489.12347), 0.22499999403953552);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.6727547966053267
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances1.setNumDate((-2));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 64.0;
      doubleArray0[5] = 64.0;
      doubleArray0[6] = (double) (-1);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate(760);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.7271040822076436
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JRip jRip0 = new JRip();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      TestInstances testInstances0 = new TestInstances();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel3 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel4 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel4.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances2 = new TestInstances();
      Instances instances0 = testInstances1.generate("@data");
      testInstances2.setClassIndex(357913932);
      Evaluation evaluation0 = new Evaluation(instances0);
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      ZeroR zeroR0 = new ZeroR();
      arrayDeque0.add(zeroR0);
      ZeroR zeroR1 = new ZeroR();
      arrayDeque0.add(zeroR0);
      evaluation0.matthewsCorrelationCoefficient(4);
      evaluation0.trueNegativeRate(357913932);
      evaluation0.truePositiveRate(0);
      evaluation0.falsePositiveRate(0);
      try { 
        CostMatrix.parseMatlab("~;Tf<%q%)yks&`6'7`X");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.8313929510609501
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      ASEvaluation.runEvaluator(correlationAttributeEval0, stringArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      LWL lWL0 = new LWL();
      correlationAttributeEval0.setOutputDetailedInfo(true);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      capabilities0.disableDependency(capabilities_Capability0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.657833863397844
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      evaluation1.m_TotalCost = (double) (-2);
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 9.223372036854776E18;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-2);
      testInstances0.setNumDate((-2005344007));
      doubleArray1[1] = (double) (-2);
      doubleArray1[2] = (double) (-2);
      doubleArray1[3] = (double) (-1);
      evaluation0.m_PriorEstimator = null;
      evaluation0.updateNumericScores(doubleArray1, doubleArray0, 64.0);
      evaluation1.weightedAreaUnderPRC();
      evaluation1.SFMeanEntropyGain();
      evaluation1.unweightedMacroFmeasure();
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.8062571745578988
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      IBk iBk0 = new IBk();
      LMT lMT0 = new LMT();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNominalValues(4);
      LWL lWL0 = new LWL();
      lWL0.setDebug(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = new TestInstances();
      TestInstances testInstances3 = new TestInstances();
      Instances instances0 = testInstances3.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        testInstances1.setRelationalFormat(2608, instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2608
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.5996094595580455
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|&";
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      LWL lWL0 = new LWL();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL1 = new LWL();
      lWL1.setDebug(false);
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = (double) 5;
      evaluation0.numFalsePositives(0);
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      ZeroR zeroR0 = new ZeroR();
      HTML hTML0 = new HTML();
      CSV cSV0 = new CSV();
      evaluation0.equals(cSV0);
      SparseInstance sparseInstance0 = new SparseInstance(1.7976931348623157E308, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6, doubleArray0);
      SMOreg sMOreg0 = new SMOreg();
      sMOreg0.getFilterType();
      binarySparseInstance0.mergeInstance(sparseInstance0);
      double double0 = evaluation0.matthewsCorrelationCoefficient(791);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.trueNegativeRate((-2133));
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.4120374112183534
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LWL lWL0 = new LWL();
      lWL0.globalInfo();
      lWL0.toString();
      lWL0.setDebug(false);
      Random.setNextRandom(3);
      TestInstances testInstances0 = new TestInstances();
      lWL0.setOptions(testInstances0.DEFAULT_WORDS);
      Instances instances0 = testInstances0.generate("Locally weighted learning. Uses an instance-based algorithm to assign instance weights which are then used by a specified WeightedInstancesHandler.\nCan do classification (e.g. using naive Bayes) or regression (e.g. using linear regression).\n\nFor more info, see\n\nEibe Frank, Mark Hall, Bernhard Pfahringer: Locally Weighted Naive Bayes. In: 19th Conference in Uncertainty in Artificial Intelligence, 249-256, 2003.\n\nC. Atkeson, A. Moore, S. Schaal (1996). Locally weighted learning. AI Review..");
      testInstances0.setNumRelational(11);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(3397);
      evaluation0.SFMeanPriorEntropy();
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = 34.2183793448185;
      doubleArray0[4] = (double) 3397;
      lWL0.globalInfo();
      lWL0.setDebug(true);
      Evaluation.makeOptionString(lWL0, false);
      evaluation0.numTrueNegatives(0);
      // Undeclared exception!
      try { 
        evaluation0.precision(497);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 497
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.0549626987123517
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      TestInstances testInstances0 = new TestInstances();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel3 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel3.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setClassIndex((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL1 = new LWL();
      LWL lWL2 = new LWL();
      LWL lWL3 = new LWL();
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
      
      testInstances0.getWords();
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      symmetricalUncertAttributeEval0.getCapabilities();
      testInstances0.setNumRelationalNominal(0);
      instances0.iterator();
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0, doubleArray0.length);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.4021276187211344
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Evaluation.handleCostOption("", 582);
      SMOreg sMOreg0 = new SMOreg();
      sMOreg0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".cost");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFMeanPriorEntropy();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 11;
      evaluation1.areaUnderROC(1);
      doubleArray0[1] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(1880, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(0.0, doubleArray0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute(".cost", protectedProperties0);
      sparseInstance0.setValue(attribute0, (-779.076985951442));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.25, doubleArray0);
      int[] intArray0 = new int[6];
      int int0 = (-2412);
      SparseInstance sparseInstance2 = new SparseInstance((-468.59), doubleArray0, intArray0, (-2412));
      sparseInstance2.mergeInstance(sparseInstance0);
      SparseInstance sparseInstance3 = new SparseInstance(1, doubleArray0, intArray0, 3);
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction((Classifier) sMOreg0, (Instance) sparseInstance3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      jRip1.setOptimizations(18);
      LWL lWL0 = new LWL();
      lWL0.getOptions();
      lWL0.getClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(0);
      evaluation0.SFMeanPriorEntropy();
      double double0 = 34.2183793448185;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 34.2183793448185;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 3397;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      doubleArray0[7] = Double.NaN;
      doubleArray0[2] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      evaluation0.SFSchemeEntropy();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        CostMatrix.parseMatlab("preserve-order");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.14681268231056
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      TestInstances testInstances0 = new TestInstances();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      evaluation0.toClassDetailsString();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, doubleArray0);
      binarySparseInstance0.setDataset(instances0);
      try { 
        evaluation0.updateStatsForPredictor(1, binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.8466435205545344
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IBk iBk0 = new IBk();
      LMT lMT0 = new LMT();
      lMT0.toString();
      LMT lMT1 = new LMT();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel1.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate(" ");
      testInstances1.setClassIndex(46);
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      lWL0.globalInfo();
      Evaluation evaluation1 = new Evaluation(instances0);
      testInstances1.setNumRelationalNominal(703);
      instances0.iterator();
      evaluation1.confusionMatrix();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(2129, charArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LWL lWL0 = new LWL();
      lWL0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LWL lWL1 = new LWL();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "setOptions");
      lWL1.getClassifier();
      LWL lWL2 = new LWL();
      lWL2.getClassifier();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = lWL1.getOptions();
      lWL0.globalInfo();
      LWL lWL3 = new LWL();
      lWL3.listOptions();
      AbstractClassifier.makeCopy(lWL2);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      lWL3.globalInfo();
      lWL2.setNearestNeighbourSearchAlgorithm(linearNNSearch0);
      TestInstances testInstances0 = new TestInstances();
      LWL lWL4 = new LWL();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.crossValidateModel("setOptions", instances0, 2, stringArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: setOptions
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.7296464900909605
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JRip jRip0 = new JRip();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      TestInstances testInstances0 = new TestInstances();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel3 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel4 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel4.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances2 = new TestInstances();
      Instances instances0 = testInstances1.generate("@data");
      testInstances2.setClassIndex(357913932);
      Evaluation evaluation0 = new Evaluation(instances0);
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      ZeroR zeroR0 = new ZeroR();
      arrayDeque0.add(zeroR0);
      ZeroR zeroR1 = new ZeroR();
      arrayDeque0.add(zeroR0);
      evaluation0.matthewsCorrelationCoefficient(100);
      evaluation0.trueNegativeRate(357913932);
      evaluation0.truePositiveRate(0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 5.0;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      String[] stringArray0 = jRip1.getOptions();
      jRip1.setOptimizations(18);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      correlationAttributeEval0.getCapabilities();
      ASEvaluation.runEvaluator(correlationAttributeEval0, stringArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      LWL lWL0 = new LWL();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|&";
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("weka/core/Capabilities.props");
      LWL lWL0 = new LWL();
      TestInstances testInstances1 = new TestInstances();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel2.toString();
      precomputedKernelMatrixKernel2.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("?~2OcJEnL| zfifI@[r");
      testInstances1.setClassIndex((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL1 = new LWL();
      LWL lWL2 = new LWL();
      LWL lWL3 = new LWL();
      lWL3.globalInfo();
      testInstances1.getWords();
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      symmetricalUncertAttributeEval0.getCapabilities();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2699.96052556), doubleArray0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", "|&", protectedProperties0);
      binarySparseInstance0.setValue(attribute0, (-4045.2589141388466));
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator((ConditionalDensityEstimator) null, binarySparseInstance0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      jRip1.getCapabilities();
      jRip1.setOptimizations(18);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      LWL lWL0 = new LWL();
      lWL0.getOptions();
      lWL0.getClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      jRip0.enumerateMeasures();
      evaluation0.m_ClassPriorsSum = (double) 3;
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(725, (char[]) null, 95);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.056443209424083
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      String[] stringArray0 = jRip1.getOptions();
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getRuleset");
      LWL lWL0 = new LWL();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL1 = new LWL();
      LWL lWL2 = new LWL();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalsePositives(3);
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      ZeroR zeroR0 = new ZeroR();
      zeroR0.setOptions(stringArray0);
      ArrayDeque<ZeroR> arrayDeque1 = new ArrayDeque<ZeroR>();
      arrayDeque0.add(zeroR0);
      arrayDeque0.add(zeroR0);
      ZeroR zeroR1 = new ZeroR();
      arrayDeque0.add(zeroR0);
      LinkedHashSet<AllJavadoc> linkedHashSet0 = new LinkedHashSet<AllJavadoc>();
      instances0.retainAll(arrayDeque1);
      Double double0 = new Double(5);
      double double1 = new Double(1);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.precision(0);
      CostMatrix costMatrix0 = new CostMatrix(14);
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.215772041096695
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      jRip0.toString();
      jRip0.getOptions();
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      LWL lWL0 = new LWL();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL1 = new LWL();
      LWL lWL2 = new LWL();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalsePositives(1);
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      ZeroR zeroR0 = new ZeroR();
      zeroR0.setOptions(testInstances0.DEFAULT_WORDS);
      ArrayDeque<ZeroR> arrayDeque1 = new ArrayDeque<ZeroR>();
      arrayDeque0.add(zeroR0);
      arrayDeque1.add(zeroR0);
      evaluation0.m_CoverageStatisticsAvailable = true;
      ZeroR zeroR1 = new ZeroR();
      arrayDeque0.add(zeroR1);
      arrayDeque0.add(zeroR1);
      LinkedHashSet<AllJavadoc> linkedHashSet0 = new LinkedHashSet<AllJavadoc>();
      instances0.retainAll(arrayDeque1);
      Double double0 = new Double(5);
      evaluation1.kappa();
      evaluation1.coverageOfTestCasesByPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation0.precision((-1996));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1996
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.3726109998626446
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      lWL1.getClassifier();
      LWL lWL2 = new LWL();
      lWL2.getClassifier();
      lWL1.getOptions();
      lWL0.globalInfo();
      LWL lWL3 = new LWL();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      lWL2.setNearestNeighbourSearchAlgorithm(linearNNSearch0);
      lWL3.toString();
      lWL1.setDebug(true);
      Random.setNextRandom(118);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(2828);
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      instances0.retainAll(arrayDeque0);
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString("l/[<sBoB#.@Wkm", false);
      assertEquals("l/[<sBoB#.@Wkm\nTotal Number of Instances                0     \n", string0);
      
      evaluation0.confusionMatrix();
      double double1 = evaluation0.unclassified();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      DecisionStump decisionStump0 = new DecisionStump();
      DecisionStump decisionStump1 = new DecisionStump();
      decisionStump1.listOptions();
      Evaluation.getGlobalInfo(decisionStump1);
      Evaluation.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.5865644874327796
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      DecisionStump decisionStump0 = new DecisionStump();
      DecisionStump decisionStump1 = new DecisionStump();
      DecisionStump.main(stringArray0);
      decisionStump1.listOptions();
      Evaluation.getGlobalInfo(decisionStump1);
      Evaluation.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.783918207863857
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 9.223372036854776E18;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalsePositives((-331));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.unweightedMicroFmeasure();
      evaluation0.useNoPriors();
      double double2 = evaluation0.precision((-331));
      double double3 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double3, double1, 0.01);
      
      evaluation0.meanPriorAbsoluteError();
      evaluation0.KBMeanInformation();
      double double4 = evaluation0.falsePositiveRate(65);
      assertEquals(double4, double2, 0.01);
      
      double double5 = evaluation0.m_WithClass;
      assertNotEquals(double5, double1, 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.3219150703323654
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      Evaluation.handleCostOption("", 582);
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".cost");
      testInstances0.setNumRelational(2);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFMeanPriorEntropy();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 11;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 520.44;
      doubleArray0[3] = (-2367.193016732);
      doubleArray0[4] = (-486.5);
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, doubleArray0);
      sparseInstance0.mergeInstance(binarySparseInstance0);
      evaluation1.numFalsePositives(1131);
      // Undeclared exception!
      try { 
        evaluation1.confusionMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|&";
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      lWL1.setDebug(false);
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = (double) 5;
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      ZeroR zeroR0 = new ZeroR();
      arrayDeque0.add(zeroR0);
      ZeroR zeroR1 = new ZeroR();
      arrayDeque0.add(zeroR0);
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, "listOpX!ons");
      assertNotNull(string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.101008517788351
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      lWL0.setDebug(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.weightedTruePositiveRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation0.weightedFalsePositiveRate();
      double double2 = evaluation1.weightedTruePositiveRate();
      assertEquals(double2, double1, 0.01);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Evaluation evaluation2 = new Evaluation(instances0);
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      ZeroR zeroR0 = new ZeroR();
      arrayDeque0.add(zeroR0);
      ZeroR zeroR1 = new ZeroR();
      arrayDeque0.add(zeroR1);
      arrayDeque0.add(zeroR1);
      Double double3 = new Double(Double.NaN);
      double double4 = evaluation1.kappa();
      assertEquals(1.0, double4, 0.01);
      
      double double5 = evaluation1.coverageOfTestCasesByPredictedRegions();
      assertEquals(double5, double0, 0.01);
      
      double double6 = evaluation2.precision(851);
      GlobalInfoJavadoc[] globalInfoJavadocArray0 = new GlobalInfoJavadoc[6];
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      globalInfoJavadocArray0[0] = globalInfoJavadoc0;
      GlobalInfoJavadoc globalInfoJavadoc1 = new GlobalInfoJavadoc();
      globalInfoJavadocArray0[1] = globalInfoJavadoc1;
      GlobalInfoJavadoc globalInfoJavadoc2 = new GlobalInfoJavadoc();
      globalInfoJavadocArray0[2] = globalInfoJavadoc2;
      GlobalInfoJavadoc globalInfoJavadoc3 = new GlobalInfoJavadoc();
      globalInfoJavadocArray0[3] = globalInfoJavadoc3;
      GlobalInfoJavadoc globalInfoJavadoc4 = new GlobalInfoJavadoc();
      globalInfoJavadocArray0[4] = globalInfoJavadoc4;
      GlobalInfoJavadoc globalInfoJavadoc5 = new GlobalInfoJavadoc();
      globalInfoJavadocArray0[5] = globalInfoJavadoc5;
      instances0.toArray(globalInfoJavadocArray0);
      double double7 = evaluation1.fMeasure((-1243));
      assertEquals(double7, double6, 0.01);
      
      evaluation2.numFalseNegatives(851);
      evaluation2.setNumericPriorsFromBuffer();
      double double8 = evaluation1.numTruePositives(475);
      assertEquals(double8, double6, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.1987926481569326
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      lWL0.getClassifier();
      lWL0.getOptions();
      lWL0.globalInfo();
      LWL lWL1 = new LWL();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      lWL1.setNearestNeighbourSearchAlgorithm(linearNNSearch0);
      lWL0.toString();
      lWL1.setDebug(true);
      Random.setNextRandom(1);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalsePositives(2);
      assertEquals(0.0, double0, 0.01);
      
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      evaluation0.m_MissingClass = 1.1000000014901161;
      instances0.retainAll(arrayDeque0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      String string0 = evaluation0.toSummaryString("@relation", false);
      assertEquals("@relation\nTotal Number of Instances                0     \nIgnored Class Unknown Instances                  1.1   \n", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.454507984858265
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 559);
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".cost");
      testInstances0.setNumRelational(2);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalsePositives(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      Double double0 = new Double(0.0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      LinearNNSearch linearNNSearch1 = new LinearNNSearch();
      SparseInstance sparseInstance0 = new SparseInstance(559);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 559;
      doubleArray0[1] = (-2367.193016732);
      doubleArray0[2] = (double) 559;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 559;
      doubleArray0[7] = (-2367.193016732);
      SparseInstance sparseInstance1 = new SparseInstance((-2367.193016732), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3295.22, doubleArray0);
      sMOreg0.getFilterType();
      binarySparseInstance0.mergeInstance(sparseInstance0);
      int int0 = 807;
      // Undeclared exception!
      try { 
        evaluation0.matthewsCorrelationCoefficient((-1494));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0615632381579823
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"vXU[qO^Lu+S~c");
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      String[] stringArray0 = new String[0];
      try { 
        Evaluation.evaluateModel((Classifier) naiveBayesMultinomial0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.bayes.NaiveBayesMultinomial:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      correlationAttributeEval0.getCapabilities();
      Matrix matrix0 = Matrix.random(30, 30);
      MahalanobisEstimator mahalanobisEstimator0 = new MahalanobisEstimator(matrix0, 30, 5.0);
      Capabilities capabilities0 = mahalanobisEstimator0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.setDebug(false);
      precomputedKernelMatrixKernel0.getCapabilities();
      Vote vote0 = new Vote();
      Capabilities capabilities1 = vote0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.setClassIndex(21);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      testInstances1.generate();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      jRip1.setOptimizations(18);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      LWL lWL0 = new LWL();
      lWL0.getOptions();
      lWL0.getClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      jRip0.enumerateMeasures();
      evaluation0.m_ClassPriorsSum = (double) 3;
      Instance instance0 = null;
      try { 
        evaluation0.evaluateModelOnce((Classifier) vote0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JRip jRip0 = new JRip();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      TestInstances testInstances0 = new TestInstances();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel3 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel4 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel4.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances2 = new TestInstances();
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Kernel.makeCopy(normalizedPolyKernel0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances1.generate("@data");
      testInstances2.setClassIndex(357913932);
      Evaluation evaluation0 = new Evaluation(instances0);
      ArrayDeque<ZeroR> arrayDeque0 = new ArrayDeque<ZeroR>();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      capabilities0.disableDependency(capabilities_Capability0);
      testInstances1.setClassIndex(37);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance(5, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) lWL0, (Instance) sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.4848638392841678
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      jRip1.getOptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("K-nearest neighbours classifier. Can select appropriate value of K based on cross-validation. Can also do distance weighting.\n\nFor more information, see\n\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.toSummaryString(" option.", false);
      evaluation0.m_SumClassPredicted = (double) (-1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance1 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance2 = new MinkowskiDistance();
      MinkowskiDistance[] minkowskiDistanceArray0 = new MinkowskiDistance[7];
      minkowskiDistanceArray0[0] = minkowskiDistance0;
      minkowskiDistanceArray0[1] = minkowskiDistance1;
      minkowskiDistanceArray0[2] = minkowskiDistance2;
      minkowskiDistanceArray0[3] = minkowskiDistance2;
      MinkowskiDistance minkowskiDistance3 = new MinkowskiDistance(instances0);
      minkowskiDistanceArray0[4] = minkowskiDistance3;
      minkowskiDistanceArray0[5] = minkowskiDistance2;
      minkowskiDistanceArray0[6] = minkowskiDistance2;
      // Undeclared exception!
      try { 
        instances0.toArray(minkowskiDistanceArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.90359608136905
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "weka.classifiers.meta.AdditiveRegression";
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("I");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unweightedMicroFmeasure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.toSummaryString("  [std. dev]", true);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance();
      Vector<LogitBoost> vector0 = new Vector<LogitBoost>();
      JList<LogitBoost> jList0 = new JList<LogitBoost>(vector0);
      jList0.getDropMode();
      DropMode.values();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) randomCommittee0);
      XML xML0 = new XML();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) xML0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate0.and(predicate4);
      predicate4.or(predicate2);
      M5Rules m5Rules0 = new M5Rules();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      predicate3.test(naiveBayesUpdateable0);
      predicate0.negate();
      instances0.removeIf(predicate2);
      double double1 = evaluation0.m_SumErr;
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.matthewsCorrelationCoefficient(1);
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.1387488857272077
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumDate((-2));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 64.0;
      doubleArray0[5] = 9.223372036854776E18;
      doubleArray0[6] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(45.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.mergeInstance(binarySparseInstance1);
      KStar kStar0 = new KStar();
      evaluation0.equals((Object) null);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.715381703171387
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      SMO sMO0 = new SMO();
      Capabilities capabilities0 = sMO0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString(".bsi");
      assertEquals(".bsi\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\n                 0        0        0          0       0          0     ?         ?         class3\n                 0        0        0          0       0          0     ?         ?         class4\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      evaluation0.relativeAbsoluteError();
      sMO0.getCapabilities();
      evaluation0.KBRelativeInformation();
      double double0 = evaluation0.priorEntropy();
      assertEquals(1.910762106246821, double0, 0.01);
      
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.correct();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.6007624033913315
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      lWL0.setDebug(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.weightedTruePositiveRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalsePositiveRate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      regressionByDiscretization1.setDeleteEmptyBins(true);
      evaluation1.meanAbsoluteError();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation1.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, binarySparseInstance0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.3368883075390159
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      jRip1.setOptimizations(18);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      LWL lWL0 = new LWL();
      lWL0.getOptions();
      lWL0.getClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-1.7976931348623157E308), doubleArray0);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.6964338652581576
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|&";
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("weka/core/Capabilities.props");
      LWL lWL0 = new LWL();
      TestInstances testInstances1 = new TestInstances();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel2.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("?~2OcJEnL| zfifI@[r");
      testInstances1.setClassIndex((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL1 = new LWL();
      LWL lWL2 = new LWL();
      LWL lWL3 = new LWL();
      lWL3.globalInfo();
      testInstances1.getWords();
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      symmetricalUncertAttributeEval0.getCapabilities();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2699.96052556), doubleArray0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      properties0.clear();
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", "|&", protectedProperties0);
      binarySparseInstance0.setValue(attribute0, (-4045.2589141388466));
      double double0 = evaluation0.numTruePositives(0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.3609093299839157
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|&";
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("weka/core/Capabilities.props");
      LWL lWL0 = new LWL();
      TestInstances testInstances1 = new TestInstances();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel2.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("?~2OcJEnL| zfifI@[r");
      testInstances1.setClassIndex((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL1 = new LWL();
      LWL lWL2 = new LWL();
      LWL lWL3 = new LWL();
      lWL3.globalInfo();
      testInstances1.getWords();
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities1 = symmetricalUncertAttributeEval0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities1);
      testInstances2.setNumRelationalNominal(0);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForPredictor(0.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.801878194660189
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Evaluation.handleCostOption("", 582);
      SMOreg sMOreg0 = new SMOreg();
      sMOreg0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".cost");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFMeanPriorEntropy();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 11;
      evaluation1.areaUnderROC(1);
      doubleArray0[1] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(1880, doubleArray0);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.m_WithClass = 1.7976931348623157E308;
      evaluation1.areaUnderPRC(1880);
      evaluation2.getRevision();
      RandomForest randomForest0 = new RandomForest();
      try { 
        evaluation1.evaluateModelOnce(Double.NaN, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.0185681646104108
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      jRip1.getOptions();
      LWL lWL0 = new LWL();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      gaussianProcesses0.listOptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "BT<");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      Object object0 = new Object();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.numFalsePositives(1);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0778197834423267
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LWL lWL0 = new LWL();
      JRip jRip0 = new JRip();
      jRip0.setOptimizations((-2563));
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\tThe file to save the threshold data to.\n\tThe format is determined by the extensions, e.g., '.arff' for ARFF \n\tformat or '.csv' for CSV.\n";
      stringArray0[1] = "Total Number of Instances          ";
      stringArray0[2] = "no-predictions";
      stringArray0[3] = "getMeasure";
      AbstractClassifier.runClassifier(multilayerPerceptron0, stringArray0);
      jRip0.setOptions(stringArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = Evaluation.makeOptionString(lWL0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.4348094859187583
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka.classifiers.meta.AdditiveRegression";
      stringArray0[1] = "Coverage at 0.8 level for kernel intervals: ";
      stringArray0[2] = "Coverage at 0.8 level for kernel intervals: ";
      stringArray0[3] = "I' Z^VDT~}C4,tUD";
      Evaluation.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.4218396387213894
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations((-2563));
      String[] stringArray0 = new String[0];
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.setOptions(stringArray0);
      Object object0 = new Object();
      DecisionStump decisionStump0 = new DecisionStump();
      DecisionStump decisionStump1 = new DecisionStump();
      String string0 = Evaluation.getGlobalInfo(decisionStump1);
      assertEquals("\nSynopsis for weka.classifiers.trees.DecisionStump:\n\nClass for building and using a decision stump. Usually used in conjunction with a boosting algorithm. Does regression (based on mean-squared error) or classification (based on entropy). Missing is treated as a separate value.", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.7204704039393954
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)41;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      textDirectoryLoader0.reset();
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClass;
      double double1 = evaluation0.SFMeanPriorEntropy();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-8);
      byteArray1[1] = (byte)41;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t(default: off)");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      LWL lWL1 = new LWL();
      evaluation0.toMatrixString("\t(default: off)");
      evaluation0.updateNumericScores((double[]) null, (double[]) null, (byte)110);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.SFMeanEntropyGain();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.meanPriorAbsoluteError();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation1.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(Double.NaN, evaluation1.rootMeanSquaredError(), 0.01);
      
      double double3 = evaluation0.rootMeanSquaredError();
      assertEquals(double3, double1, 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JRip jRip0 = new JRip();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      ASEvaluation.runEvaluator(correlationAttributeEval0, (String[]) null);
      LWL lWL1 = new LWL();
      correlationAttributeEval0.setOutputDetailedInfo(false);
      LWL lWL2 = new LWL();
      LWL lWL3 = new LWL();
      LWL lWL4 = new LWL();
      LWL lWL5 = new LWL();
      lWL5.getClassifier();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JRip jRip0 = new JRip();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertNotNull(doubleArray0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      jRip0.setOptimizations(6);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      LWL lWL0 = new LWL();
      lWL0.getCapabilities();
      lWL0.setDebug(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "h:tH-K,M:H5mD.yCD";
      try { 
        Evaluation.evaluateModel("weka/core/Capabilities.props", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name weka/core/Capabilities.props.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JRip jRip0 = new JRip();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctCorrect();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations(18);
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SMO sMO0 = new SMO();
      sMO0.getFilterType();
      SelectedTag selectedTag0 = sMO0.getFilterType();
      gaussianProcesses0.setFilterType(selectedTag0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("4]VVFgs71?ObQt", arrayList0, 0);
      CostMatrix costMatrix0 = new CostMatrix(1);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      String string0 = decisionStump0.toString();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)23;
      String string1 = Evaluation.makeOptionString(decisionStump0, false);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      String string0 = decisionStump0.toString();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)23;
      String string1 = Evaluation.makeOptionString(decisionStump0, false);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      String string0 = Evaluation.makeOptionString(attributeSelectedClassifier0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.getCapabilities();
      String string0 = "";
      JRip jRip0 = new JRip();
      int int0 = 84;
      jRip0.setOptimizations(84);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      RandomCommittee randomCommittee0 = new RandomCommittee();
      String string0 = Evaluation.makeOptionString(randomCommittee0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IBk iBk0 = new IBk();
      iBk0.pruneToK((Instances) null, (double[]) null, 3066);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JRip jRip0 = new JRip();
      REPTree rEPTree0 = new REPTree();
      rEPTree0.setMaxDepth((byte)1);
      REPTree rEPTree1 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "Class has to be nominal if cost matrix given!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JRip jRip0 = new JRip();
      REPTree rEPTree0 = new REPTree();
      rEPTree0.setMaxDepth((byte)1);
      REPTree rEPTree1 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree1, "Class has to be nominal if cost matrix given!");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Instances instances0 = null;
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.7659767920186922
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "g|&";
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Vote vote0 = new Vote();
      Capabilities capabilities1 = vote0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      KernelEstimator kernelEstimator0 = new KernelEstimator(6);
      Capabilities capabilities2 = kernelEstimator0.getCapabilities();
      capabilities0.supports(capabilities2);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      capabilities0.disableDependency(capabilities_Capability0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JRip jRip0 = new JRip();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      TestInstances testInstances0 = new TestInstances();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel3 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel4 = new PrecomputedKernelMatrixKernel();
      Vote vote0 = new Vote();
      Capabilities capabilities0 = vote0.getCapabilities();
      capabilities0.enableAllClasses();
      TestInstances.forCapabilities(capabilities0);
      KernelEstimator kernelEstimator0 = new KernelEstimator(0.0);
      Capabilities capabilities1 = kernelEstimator0.getCapabilities();
      MultiFilter multiFilter0 = new MultiFilter();
      Capabilities capabilities2 = multiFilter0.getCapabilities();
      capabilities1.supports(capabilities2);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      capabilities2.disableDependency(capabilities_Capability0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, (Instance) null, 1.1500000059604645);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }
}
