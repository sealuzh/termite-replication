/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 13:47:28 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Properties;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6838053850766177
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[9][1];
      discretize0.m_CutPoints = doubleArray0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i~/");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{Yd;[0UT:e");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i~/");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i~/");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Range range0 = new Range();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i~/");
      String string0 = discretize0.getBinRangesString(8);
      assertEquals("(-inf-0],(0-inf)", string0);
      
      discretize0.getCutPoints((byte)8);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Range range0 = new Range("UG:acr*");
      discretize0.m_UseEqualFrequency = true;
      discretize0.m_DiscretizeCols = range0;
      discretize0.m_FindNumBins = true;
      discretize0.getOptions();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      sparseInstance0.setMissing((-2255));
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2140, (int[]) null, (-131));
      BinarySparseInstance binarySparseInstance1 = null;
      try {
        binarySparseInstance1 = new BinarySparseInstance((-2255));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[9][1];
      discretize0.m_CutPoints = doubleArray0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      discretize0.isOutputFormatDefined();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{Yd;[0UT:e");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i~/");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Range range0 = new Range();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i~/");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "i~/";
      stringArray0[1] = "-";
      stringArray0[2] = "i~/";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      SystemInUtil.addInputLine("UWE");
      Random.setNextRandom(45);
      Discretize discretize0 = new Discretize("UWE");
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setUseEqualFrequency(true);
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[7];
      intArray0[0] = 1149;
      discretize0.setMakeBinary(false);
      intArray0[1] = 2003;
      discretize0.m_MakeBinary = true;
      intArray0[2] = 4382;
      intArray0[3] = (-316);
      intArray0[4] = (-2028178998);
      intArray0[5] = (-693);
      intArray0[6] = 1;
      discretize0.setAttributeIndicesArray(intArray0);
      boolean boolean0 = discretize0.getMakeBinary();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9889118479949475
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.getUseEqualFrequency();
      discretize0.setIgnoreClass(true);
      discretize0.getCapabilities();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray0[1] = doubleArray0[0];
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[21];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray0[3] = doubleArray3;
      discretize0.setAttributeIndices("weka/core/Capabilities.props");
      discretize0.m_UseBinNumbers = true;
      discretize0.globalInfo();
      SystemInUtil.addInputLine("weka/core/Capabilities.props");
      discretize0.getUseBinNumbers();
      discretize0.getUseBinNumbers();
      discretize0.getUseEqualFrequency();
      discretize0.invertSelectionTipText();
      discretize0.getUseEqualFrequency();
      discretize0.findNumBinsTipText();
      discretize0.listOptions();
      discretize0.getCapabilities();
      discretize0.getOptions();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1074580975768056
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      discretize0.useBinNumbersTipText();
      discretize0.setOutputFormat();
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.attributeIndicesTipText();
      discretize0.useEqualFrequencyTipText();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      discretize0.getCutPoints((-1908874351));
      discretize0.getInvertSelection();
      discretize0.getInvertSelection();
      discretize0.getOptions();
      discretize0.findNumBinsTipText();
      discretize0.listOptions();
      discretize0.setOutputFormat();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.231202752043404
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize("]");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Can't ignore class when changing the number of attributes!";
      stringArray0[1] = "Number of bins.";
      stringArray0[2] = "]";
      stringArray0[3] = "]";
      stringArray0[4] = "weka.core.WekaPackageManager";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.setAttributeIndices("IpP5V/|D5__*)r");
      discretize0.setInvertSelection(true);
      discretize0.getBinRangesString(154);
      Discretize discretize1 = new Discretize("_");
      discretize0.useBinNumbersTipText();
      Discretize discretize2 = new Discretize("weka.core.WekaPackageManager");
      String[] stringArray1 = discretize0.getOptions();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.setOptions(stringArray1);
      assertEquals(7, stringArray1.length);
      
      discretize0.getUseBinNumbers();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.useBinNumbersTipText();
      discretize0.setOutputFormat();
      discretize0.setBins((-1879048189));
      discretize0.useBinNumbersTipText();
      discretize0.getBins();
      StringReader stringReader0 = new StringReader("o\"~E?\nV");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-5510));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize("doesn't seem to exist!");
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 384.570028;
      doubleArray1[2] = (-2129.649);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = 384.570028;
      doubleArray2[2] = 2.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 2.0;
      doubleArray3[1] = (-2129.649);
      doubleArray3[2] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 2.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 2.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (-2129.649);
      doubleArray5[4] = (-1.0);
      doubleArray5[5] = 384.570028;
      doubleArray5[6] = 384.570028;
      doubleArray5[7] = 2.0;
      doubleArray5[8] = (-2129.649);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (-2129.649);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (-1.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 2.0;
      doubleArray0[6] = doubleArray7;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.getCapabilities();
      discretize0.listOptions();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[4][1];
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.getAttributeIndices();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[9][1];
      discretize0.m_CutPoints = doubleArray0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i~/");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OK");
      byte byte0 = (byte) (-18);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OK");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OK");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-18);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OK");
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Range range0 = new Range();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i~/");
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((byte) (-18));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -18
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6745235093003417
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "i~/";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i~/");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OK");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OK");
      byte byte0 = (byte)38;
      byte byte1 = (byte)8;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OK");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OK");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)8;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "i~/";
      stringArray0[1] = "OK";
      stringArray0[2] = "OK";
      stringArray0[3] = "i~/";
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.550366127309044
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      discretize1.setIgnoreClass(true);
      discretize1.getOptions();
      discretize0.setOutputFormat();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      MultiFilter multiFilter0 = new MultiFilter();
      int int0 = 3;
      // Undeclared exception!
      try { 
        multiFilter0.getFilter(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1360570143460755
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      AllFilter allFilter0 = new AllFilter();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka.core.WekaPackageManager";
      stringArray0[1] = "5";
      stringArray0[2] = "Number of bins.";
      stringArray0[3] = "R";
      stringArray0[4] = "weka.core.WekaPackageManager";
      Filter.runFilter(allFilter0, stringArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "R");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate3.or(predicate0);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate5.and(predicate0);
      predicate6.negate();
      Object object0 = new Object();
      Predicate<Object> predicate7 = predicate5.or(predicate4);
      Predicate<Object> predicate8 = predicate3.and(predicate7);
      predicate8.negate();
      Discretize discretize0 = new Discretize();
      String[] stringArray1 = discretize0.getOptions();
      discretize0.setOptions(stringArray1);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(6, stringArray1.length);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("BV9MwPArq,ndXLS", arrayList0, 45);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Instances instances2 = Instances.mergeInstances(instances0, instances1);
      Instances instances3 = Instances.mergeInstances(instances2, instances2);
      SystemInUtil.addInputLine(".arff");
      Instances instances4 = Instances.mergeInstances(instances2, instances0);
      Instances instances5 = Instances.mergeInstances(instances0, instances4);
      instances5.deleteStringAttributes();
      Instances instances6 = Instances.mergeInstances(instances3, instances0);
      Instances instances7 = new Instances(instances6, 45);
      String string0 = Filter.wekaStaticWrapper(allFilter0, "E,F/@$(N/2;", instances6, instances7);
      instances6.retainAll(instances2);
      Instances instances8 = new Instances(instances3, 45);
      Filter.wekaStaticWrapper(allFilter0, "BV9MwPArq,ndXLS", instances7, instances4);
      Instances instances9 = new Instances(instances3);
      Instances.mergeInstances(instances1, instances4);
      Instances instances10 = new Instances(instances8, 115);
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = ".bsi";
      stringArray0[2] = "E,F/@$(N/2;";
      stringArray0[3] = "QC%fCd] O@&C6Yi@";
      stringArray0[4] = "@relation";
      stringArray0[5] = "@relation";
      Discretize discretize0 = new Discretize("Z=zgNE TAG");
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize("BV9MOwPArq,ndXES");
      discretize0.useBinNumbersTipText();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = Filter.makeCopy(allFilter0);
      filter0.toString();
      Filter.makeCopy(filter0);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      String[] stringArray0 = new String[23];
      stringArray0[0] = "weka.filters.AllFilter";
      stringArray0[1] = ">0";
      stringArray0[2] = "of";
      stringArray0[8] = "ASu";
      Filter.runFilter(multiFilter1, stringArray0);
      Discretize discretize0 = new Discretize();
      int int0 = discretize0.getBins();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5719579500515657
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[][] doubleArray0 = new double[8][1];
      discretize0.m_CutPoints = doubleArray0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")r7!vSOz`COSW/{T\"\"c");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?bkNR|?/=u6 .");
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte) (-28);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)27;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?bkNR|?/=u6 .");
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Range range0 = new Range();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-B");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)88);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "?bkNR|?/=u6 .";
      stringArray0[1] = "?bkNR|?/=u6 .";
      stringArray0[2] = "-B";
      stringArray0[3] = ")r7!vSOz`COSW/{T\"\"c";
      stringArray0[4] = "-B";
      stringArray0[5] = "?bkNR|?/=u6 .";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \")r7!vSOz`COSW/{T\"\"c\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6195259631210703
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[1];
      double double0 = 0.0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "N:+( i8k1NaFsG6xU";
      stringArray0[1] = "JfPWE8Nc";
      stringArray0[2] = "-M";
      stringArray0[3] = "u.;31WUIPfZG{";
      stringArray0[4] = "-D";
      stringArray0[5] = "]_8|r=EePIJ',(W";
      stringArray0[6] = "Qz\"";
      stringArray0[7] = "!b";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // For input string: \"u.;31WUIPfZG{\"
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[4];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = null;
      try {
        binarySparseInstance1 = new BinarySparseInstance((-131));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("BV9MwPArq,ndXLS", arrayList0, 45);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Instances instances2 = Instances.mergeInstances(instances0, instances1);
      Instances instances3 = Instances.mergeInstances(instances2, instances2);
      SystemInUtil.addInputLine(".arff");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances4 = Instances.mergeInstances(instances2, instances0);
      Instances.mergeInstances(instances0, instances4);
      Instances.mergeInstances(instances3, instances0);
      Filter.wekaStaticWrapper(allFilter0, "", instances2, instances1);
      Instances instances5 = new Instances(instances2, (-2221));
      Instances.mergeInstances(instances0, instances5);
      Instances instances6 = new Instances(instances5, (-2058005160));
      Instances instances7 = Instances.mergeInstances(instances0, instances6);
      SystemInUtil.addInputLine(".bsi");
      Instances instances8 = new Instances(instances4, (-2058005160));
      Filter.wekaStaticWrapper(allFilter0, "/ESq$`FC]52qyr", instances0, instances7);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate5.and(predicate1);
      Predicate<Object> predicate7 = predicate5.or(predicate4);
      Predicate<Object> predicate8 = predicate0.and(predicate3);
      predicate5.and(predicate6);
      Predicate<Object> predicate9 = predicate3.negate();
      Predicate<Object> predicate10 = predicate4.and(predicate2);
      Predicate<Object> predicate11 = predicate1.and(predicate10);
      Predicate<Object> predicate12 = predicate9.or(predicate0);
      Predicate<Integer> predicate13 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate14 = predicate12.or(predicate10);
      Predicate<Object> predicate15 = predicate0.and(predicate1);
      predicate2.negate();
      Predicate<Object> predicate16 = predicate4.and(predicate9);
      Predicate<Object> predicate17 = predicate16.and(predicate11);
      Predicate<Object> predicate18 = predicate17.or(predicate8);
      Integer integer0 = new Integer(4);
      predicate13.test(integer0);
      Predicate<Object> predicate19 = predicate10.negate();
      Predicate<Integer> predicate20 = predicate13.negate();
      Predicate.isEqual((Object) predicate20);
      predicate17.negate();
      predicate11.and(predicate5);
      predicate8.and(predicate14);
      predicate19.negate();
      predicate1.or(predicate2);
      predicate15.and(predicate7);
      predicate18.or(predicate1);
      predicate2.negate();
      Object object0 = new Object();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("BV9MOwPArq,ndXES", arrayList0, 45);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Instances instances2 = Instances.mergeInstances(instances0, instances1);
      instances2.retainAll(instances0);
      Instances instances3 = Instances.mergeInstances(instances2, instances2);
      Instances.mergeInstances(instances0, instances0);
      SystemInUtil.addInputLine("@relation");
      Instances.mergeInstances(instances3, instances3);
      instances2.indexOf(instances0);
      Instances instances4 = Instances.mergeInstances(instances2, instances1);
      Instances instances5 = Instances.mergeInstances(instances4, instances3);
      Filter.wekaStaticWrapper(allFilter0, "@data", instances0, instances1);
      Instances instances6 = new Instances(instances5, 41);
      instances1.enumerateInstances();
      Instances instances7 = new Instances(instances5, 34);
      Instances instances8 = new Instances(instances6);
      Instances.mergeInstances(instances2, instances8);
      Instances instances9 = new Instances(instances1, 350);
      Instances instances10 = new Instances(instances3);
      Discretize discretize0 = new Discretize(".arff");
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[8][1];
      discretize0.m_CutPoints = doubleArray0;
      int int0 = 645;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i~/");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OK");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OK");
      discretize0.setInvertSelection(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OK");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OK");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)8;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "i~/";
      stringArray0[1] = "OK";
      stringArray0[2] = "OK";
      stringArray0[3] = "i~/";
      stringArray0[4] = "i~/";
      Filter.runFilter(discretize0, stringArray0);
      byteArray0[2] = (byte)8;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OK");
      byteArray0[3] = (byte)38;
      byteArray0[2] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i~/");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[4][1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(645);
      int int0 = (-2759);
      Discretize discretize0 = new Discretize();
      discretize0.makeBinaryTipText();
      BinarySparseInstance binarySparseInstance1 = null;
      try {
        binarySparseInstance1 = new BinarySparseInstance((-2759));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.823242702131751
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "vP6mPvbS";
      stringArray0[1] = "zeropoint";
      stringArray0[2] = "\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)";
      stringArray0[3] = "";
      Discretize.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = Filter.makeCopy(allFilter0);
      filter0.toString();
      Filter.makeCopy(filter0);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      String[] stringArray0 = new String[23];
      stringArray0[0] = "weka.filters.AllFilter";
      stringArray0[1] = ">0";
      stringArray0[2] = "of";
      stringArray0[8] = "ASu";
      Filter.runFilter(multiFilter1, stringArray0);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      Predicate<Object> predicate5 = predicate4.or(predicate2);
      Predicate<Integer> predicate6 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate7 = predicate1.or(predicate3);
      Predicate<Object> predicate8 = predicate3.and(predicate4);
      predicate5.negate();
      Predicate<Object> predicate9 = predicate7.negate();
      predicate5.and(predicate0);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) null);
      predicate1.or(predicate10);
      Predicate<Object> predicate11 = predicate2.negate();
      predicate6.negate();
      Object object1 = new Object();
      predicate11.negate();
      predicate5.negate();
      Predicate<Object> predicate12 = predicate4.negate();
      Predicate<Object> predicate13 = predicate3.and(predicate12);
      predicate9.negate();
      predicate11.or(predicate8);
      predicate11.and(predicate12);
      predicate3.negate();
      predicate13.negate();
      Predicate<Object> predicate14 = predicate3.and(predicate9);
      Predicate<Object> predicate15 = predicate5.negate();
      Predicate<Object> predicate16 = predicate15.or(predicate13);
      predicate14.and(predicate16);
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.75012938226178
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      discretize0.getRevision();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      discretize0.m_FindNumBins = true;
      discretize0.getFindNumBins();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.findNumBinsTipText();
      discretize0.listOptions();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.getBinRangesString(5);
      discretize0.isOutputFormatDefined();
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.9093506761746544
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("BV9MOwPArq,ndXES", arrayList0, 45);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Instances instances2 = Instances.mergeInstances(instances0, instances0);
      Instances instances3 = Instances.mergeInstances(instances2, instances1);
      instances3.deleteStringAttributes();
      Instances instances4 = Instances.mergeInstances(instances1, instances2);
      Instances instances5 = Instances.mergeInstances(instances0, instances1);
      instances0.deleteStringAttributes();
      Instances instances6 = new Instances(instances5, 45);
      Instances instances7 = Instances.mergeInstances(instances6, instances3);
      instances7.enumerateInstances();
      instances4.iterator();
      Instances instances8 = new Instances(instances4, 34);
      Instances instances9 = new Instances(instances7);
      Instances instances10 = Instances.mergeInstances(instances4, instances5);
      Instances instances11 = new Instances(instances4, 2873);
      Instances instances12 = Instances.mergeInstances(instances3, instances3);
      Discretize discretize0 = new Discretize(".arff");
      instances12.equalHeaders(instances10);
      Instances instances13 = new Instances(instances8, 92);
      Instances.mergeInstances(instances10, instances5);
      MultiFilter multiFilter0 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      Filter.makeCopy(allFilter0);
      Filter.runFilter(discretize0, (String[]) null);
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize1.findNumBins((-1994091956));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("BV9MwPArq,nfdXES", arrayList0, 39);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      SystemInUtil.addInputLine("UWE");
      Instances instances2 = Instances.mergeInstances(instances1, instances1);
      instances2.deleteStringAttributes();
      Instances instances3 = Instances.mergeInstances(instances1, instances1);
      Instances instances4 = Instances.mergeInstances(instances0, instances0);
      Instances instances5 = Instances.mergeInstances(instances0, instances4);
      instances0.deleteStringAttributes();
      Instances instances6 = new Instances(instances5, 39);
      Instances instances7 = Instances.mergeInstances(instances6, instances2);
      instances7.enumerateInstances();
      instances6.enumerateInstances();
      instances3.iterator();
      Instances instances8 = new Instances(instances3, 39);
      Instances instances9 = new Instances(instances7);
      Instances instances10 = Instances.mergeInstances(instances3, instances5);
      Instances instances11 = Instances.mergeInstances(instances9, instances10);
      instances11.iterator();
      Instances instances12 = new Instances(instances0, 39);
      Instances instances13 = new Instances(instances9, 39);
      Instances.mergeInstances(instances7, instances3);
      Instances instances14 = new Instances(instances8);
      Instances instances15 = new Instances(instances14, (-1322));
      instances15.parallelStream();
      Instances.mergeInstances(instances15, instances9);
      Discretize discretize0 = new Discretize("@relation");
      Instances.mergeInstances(instances14, instances13);
      Instances.mergeInstances(instances9, instances14);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(68);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate5.and(predicate1);
      Predicate<Object> predicate7 = predicate5.or(predicate4);
      Predicate<Object> predicate8 = predicate0.and(predicate3);
      Predicate<Object> predicate9 = predicate5.and(predicate6);
      Predicate<Object> predicate10 = predicate3.negate();
      Predicate<Object> predicate11 = predicate4.and(predicate2);
      Predicate<Object> predicate12 = predicate1.and(predicate11);
      Predicate<Object> predicate13 = predicate10.or(predicate0);
      Predicate<Integer> predicate14 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate15 = predicate13.or(predicate11);
      predicate0.and(predicate1);
      Predicate<Object> predicate16 = predicate2.negate();
      Predicate<Object> predicate17 = predicate0.and(predicate2);
      Predicate<Object> predicate18 = predicate4.and(predicate10);
      Predicate<Object> predicate19 = predicate18.and(predicate12);
      Predicate<Object> predicate20 = predicate19.or(predicate8);
      Predicate<Object> predicate21 = predicate7.negate();
      predicate14.negate();
      Object object0 = new Object();
      predicate12.and(predicate20);
      predicate12.negate();
      predicate1.negate();
      predicate18.and(predicate8);
      Predicate<Object> predicate22 = predicate9.negate();
      predicate4.or(predicate20);
      predicate15.and(predicate16);
      predicate9.negate();
      Predicate<Object> predicate23 = predicate21.negate();
      predicate23.and(predicate22);
      predicate3.and(predicate17);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8221303550794707
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[1];
      intArray0[0] = 12;
      discretize0.setAttributeIndicesArray(intArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Incremental? ";
      stringArray0[1] = "-(L";
      stringArray0[2] = "e_`E7\"A0+!Ju%W{~";
      stringArray0[3] = "Bin number optimization in conjunction with equal-frequency binning not implemented.";
      stringArray0[4] = "LAdCNq[rIocD)d}=&z";
      stringArray0[5] = "\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)";
      stringArray0[6] = "Zg=}fH:";
      stringArray0[7] = "92";
      stringArray0[8] = "XmgeCb";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Illegal options: Incremental?  -(L e_`E7\"A0+!Ju%W{~ Bin number optimization in conjunction with equal-frequency binning not implemented. LAdCNq[rIocD)d}=&z \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1) Zg=}fH: 92 XmgeCb 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = null;
      try {
        binarySparseInstance1 = new BinarySparseInstance((-131));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      Discretize discretize0 = new Discretize();
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize(":WXjq");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Specifies the desiret weight of instances per bin for\n\tequ4l-frequency binning. If this is set to a positive\n\tnumber then the -B option will bV ignored.\n\t(default = -1)";
      stringArray0[1] = "Nb8p7h9=)@";
      stringArray0[2] = ".?F1y*+n3dPQl~J.hgo";
      discretize0.setBins(1673);
      stringArray0[2] = ":WXjq";
      stringArray0[4] = "W@M=_J-{PPiJ8";
      stringArray0[5] = "W@M=_J-{PPiJ8";
      stringArray0[6] = "Nb8p7h9=)@";
      Filter.runFilter(discretize0, stringArray0);
      assertEquals(1673, discretize0.getBins());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i~/");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OK");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OK");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OK");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i~/");
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-18);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OK");
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Range range0 = new Range();
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i~/");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate5.and(predicate1);
      Predicate<Object> predicate7 = predicate5.or(predicate4);
      Predicate<Object> predicate8 = predicate0.and(predicate3);
      Predicate<Object> predicate9 = predicate5.and(predicate6);
      Predicate<Object> predicate10 = predicate3.negate();
      Predicate<Object> predicate11 = predicate4.and(predicate2);
      Predicate<Object> predicate12 = predicate1.and(predicate11);
      Predicate<Object> predicate13 = predicate10.or(predicate0);
      Predicate<Integer> predicate14 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate15 = predicate13.or(predicate11);
      predicate0.and(predicate1);
      predicate2.negate();
      predicate0.and(predicate2);
      Predicate<Object> predicate16 = predicate4.and(predicate10);
      Predicate<Object> predicate17 = predicate16.and(predicate12);
      Predicate<Object> predicate18 = predicate17.or(predicate8);
      predicate7.negate();
      predicate14.negate();
      predicate12.and(predicate18);
      Predicate<Object> predicate19 = Predicate.isEqual((Object) predicate15);
      predicate10.and(predicate19);
      predicate5.or(predicate9);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      int[] intArray0 = new int[3];
      intArray0[0] = 2140;
      intArray0[1] = 2140;
      intArray0[2] = 2140;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2140, intArray0, 2140);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2950);
      String string0 = discretize0.getAttributeIndices();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("first-last", string0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = Filter.makeCopy(allFilter0);
      filter0.toString();
      Filter.makeCopy(filter0);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      String[] stringArray0 = new String[23];
      stringArray0[0] = "weka.filters.AllFilter";
      stringArray0[1] = ">0";
      stringArray0[2] = "of";
      stringArray0[8] = "ASu";
      Filter.runFilter(multiFilter1, stringArray0);
      Random.setNextRandom((-1968));
      Discretize discretize0 = new Discretize("-B <num>");
      String string0 = discretize0.invertSelectionTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "N:+( i8k1NaFsG6xU");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)76;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byteArray0[6] = (byte)76;
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jwQW0.\"y ");
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(false);
      // Undeclared exception!
      try { 
        discretize0.findNumBins((byte)76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i~/");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OK");
      discretize0.setMakeBinary(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OK");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OK");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OK");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)8;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "i~/";
      stringArray0[1] = "OK";
      stringArray0[2] = "OK";
      stringArray0[3] = "i~/";
      stringArray0[4] = "i~/";
      Filter.runFilter(discretize0, stringArray0);
      byteArray0[2] = (byte)8;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OK");
      byteArray0[3] = (byte)38;
      byteArray0[2] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i~/");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = false;
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getFindNumBins();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1168));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "wI";
      stringArray0[1] = "/<e32s{G^C=<lWK%>";
      stringArray0[2] = "yXR@8VHLwu8;13)JSy";
      stringArray0[3] = "rv7VHZn]00p:";
      stringArray0[4] = "\"#+PAC>S\"3/C=>";
      stringArray0[5] = "-R <col1,col2-col4,...>";
      stringArray0[6] = "~r~m$5}6KUw`_jdwd_";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate5.or(predicate4);
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate0.and(predicate3);
      Predicate<Object> predicate9 = predicate7.and(predicate3);
      predicate7.and(predicate9);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate7);
      Predicate<Object> predicate11 = predicate10.or(predicate3);
      predicate11.and(predicate9);
      Predicate<Object> predicate12 = predicate3.or(predicate10);
      predicate1.and(predicate11);
      predicate4.and(predicate6);
      Object object0 = new Object();
      predicate12.test(predicate2);
      predicate0.or(predicate8);
      Object object1 = new Object();
      String string0 = discretize0.binsTipText();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains(string0));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("first-last", linkedList0, protectedProperties0);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "numeric";
      stringArray0[1] = "integer";
      stringArray0[2] = "date";
      stringArray0[3] = "\nDo you wish to proceed [y/n]?";
      stringArray0[4] = "weka.core.converters.ArffLoader$ArffReader";
      stringArray0[5] = "numeric";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("^3%(", arrayList0, 17);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Instances instances2 = Instances.mergeInstances(instances0, instances0);
      Instances instances3 = Instances.mergeInstances(instances0, instances2);
      Instances instances4 = Instances.mergeInstances(instances1, instances2);
      Instances instances5 = Instances.mergeInstances(instances0, instances0);
      Instances instances6 = Instances.mergeInstances(instances0, instances5);
      instances0.deleteStringAttributes();
      Instances instances7 = Instances.mergeInstances(instances2, instances6);
      Instances instances8 = Instances.mergeInstances(instances7, instances3);
      instances8.enumerateInstances();
      instances7.enumerateInstances();
      instances4.iterator();
      Instances instances9 = new Instances(instances4, 17);
      Instances instances10 = new Instances(instances8);
      Instances instances11 = Instances.mergeInstances(instances4, instances6);
      Instances instances12 = Instances.mergeInstances(instances10, instances11);
      instances6.iterator();
      Instances instances13 = new Instances(instances0, 17);
      Instances instances14 = new Instances(instances10, 17);
      Instances.mergeInstances(instances8, instances4);
      Instances instances15 = new Instances(instances12, (-1321));
      instances3.parallelStream();
      Instances instances16 = Instances.mergeInstances(instances15, instances10);
      MockRandom mockRandom0 = new MockRandom(17);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[2] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[4] = false;
      instances16.resampleWithWeights((java.util.Random) mockRandom0, booleanArray0);
      Discretize discretize0 = new Discretize();
      Instances.mergeInstances(instances3, instances14);
      Instances.mergeInstances(instances10, instances5);
      try { 
        discretize0.setInputFormat(instances16);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("BV9MwPArq,nfdXES", arrayList0, 27);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      SystemInUtil.addInputLine("UWE");
      Instances instances2 = Instances.mergeInstances(instances0, instances0);
      Instances instances3 = Instances.mergeInstances(instances2, instances1);
      instances3.deleteStringAttributes();
      Instances.mergeInstances(instances1, instances2);
      Instances instances4 = Instances.mergeInstances(instances0, instances0);
      Instances instances5 = Instances.mergeInstances(instances0, instances4);
      instances0.deleteStringAttributes();
      Instances instances6 = new Instances(instances5, 27);
      Instances instances7 = Instances.mergeInstances(instances6, instances3);
      instances7.enumerateInstances();
      instances6.enumerateInstances();
      instances1.iterator();
      Instances instances8 = new Instances(instances3, 27);
      Instances instances9 = new Instances(instances7);
      Instances instances10 = Instances.mergeInstances(instances2, instances1);
      Instances instances11 = new Instances("@relation", arrayList0, 27);
      instances3.iterator();
      Instances instances12 = Instances.mergeInstances(instances2, instances10);
      Instances instances13 = new Instances(instances12, 907);
      Instances instances14 = new Instances(instances1, 27);
      Instances.mergeInstances(instances13, instances0);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(907);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.9421822974250196
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      discretize0.getRevision();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      discretize0.m_FindNumBins = false;
      discretize0.getFindNumBins();
      discretize0.getCapabilities();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.findNumBinsTipText();
      discretize0.listOptions();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setOutputFormat();
      discretize0.getBinRangesString(5);
      discretize0.getFindNumBins();
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate5.or(predicate4);
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate0.and(predicate3);
      Predicate<Object> predicate9 = predicate7.and(predicate3);
      predicate7.and(predicate9);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate7);
      Predicate<Object> predicate11 = predicate10.or(predicate3);
      predicate11.and(predicate9);
      predicate11.or(predicate10);
      Predicate<Object> predicate12 = predicate3.or(predicate10);
      predicate1.and(predicate11);
      Predicate<Object> predicate13 = predicate4.and(predicate6);
      Object object0 = new Object();
      predicate12.test(predicate2);
      predicate0.or(predicate8);
      Object object1 = new Object();
      Predicate.isEqual((Object) predicate10);
      Predicate<Object> predicate14 = predicate1.negate();
      Predicate<Object> predicate15 = predicate7.and(predicate14);
      predicate7.and(predicate13);
      predicate2.negate();
      predicate6.and(predicate12);
      predicate15.negate();
      Discretize discretize1 = new Discretize("");
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getFindNumBins());
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getMakeBinary());
      
      boolean boolean0 = discretize0.getFindNumBins();
      assertFalse(boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 100.0;
      discretize0.m_MakeBinary = false;
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getFindNumBins();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1168));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }
}
