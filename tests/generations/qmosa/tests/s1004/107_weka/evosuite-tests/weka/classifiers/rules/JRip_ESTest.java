/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 13:52:57 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Random;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.ASSearch;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.Ranker;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.search.SearchAlgorithm;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.matrix.Matrix;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.MiddleOutConstructor;
import weka.core.neighboursearch.balltrees.TopDownConstructor;
import weka.core.tokenizers.NGramTokenizer;
import weka.estimators.Estimator;
import weka.estimators.KernelEstimator;
import weka.estimators.MahalanobisEstimator;
import weka.estimators.PoissonEstimator;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9456645463488123
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      BallNode ballNode0 = new BallNode((-369), (-369), (-369));
      Utils.SMALL = (double) (-369);
      BallNode ballNode1 = new BallNode((-369), (-1), (-369));
      BallNode ballNode2 = new BallNode((-369));
      BallNode ballNode3 = new BallNode((-369), (-369), (-1));
      BallNode ballNode4 = new BallNode((-2327), 33, (-369));
      BallNode ballNode5 = new BallNode((-359), 369, 2579);
      BallNode ballNode6 = ballNode3.m_Left;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Ranker ranker0 = new Ranker();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'jkn(1L!55^Jj(", arrayList0, 113);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, true);
      jRip_RipperRule0.prune(instances0, false);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.getSearchAlgorithm();
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = 64.0;
      doubleArray0[4] = 64.0;
      doubleArray0[3] = 64.0;
      doubleArray0[4] = 64.0;
      doubleArray0[5] = 64.0;
      SparseInstance sparseInstance0 = new SparseInstance(64.0, doubleArray0);
      Attribute attribute0 = new Attribute("yOn\"lZCjl\"92");
      JRip jRip0 = new JRip();
      sparseInstance0.setMissing(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(sparseInstance0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "numeric");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Locale.getISOLanguages();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("numeric");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numeric not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9594045983154567
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      JRip jRip0 = new JRip();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      jRip0.setUsePruning(false);
      try { 
        jRip0.rulesetForOneClass(1239.2787146849666, (Instances) null, 1239.2787146849666, 1239.2787146849666);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("?SbMo[')/)", arrayList0, 730);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 730;
      doubleArray0[1] = (double) 730;
      doubleArray0[2] = (double) 730;
      doubleArray0[3] = 100.0;
      doubleArray0[4] = 3116.74479292806;
      doubleArray0[5] = (-997.5556637802836);
      SparseInstance sparseInstance0 = new SparseInstance(2479.59, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(730);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance1);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) sparseInstance0);
      instances0.add((Instance) sparseInstance2);
      Attribute attribute0 = new Attribute("@data");
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 2414.72419, 2163.49);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[3];
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0);
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-236));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute(" (", " (");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) null, locale_FilteringMode2);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) list1);
      Environment environment0 = Environment.getSystemWide();
      Set<String> set0 = environment0.getVariableNames();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0, locale_FilteringMode3);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list2, locale_FilteringMode4);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2991);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("implementation in aspects of accuracy, ruleset size and running time ", arrayList3, 4);
      instances0.add((Instance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode1);
      Environment environment1 = new Environment();
      environment1.addVariable("", "I$JY");
      environment1.getVariableNames();
      arrayList2.spliterator();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) list1, locale_FilteringMode3);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      jRip_RipperRule0.setConsequent(100.0);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Ranker ranker0 = new Ranker();
      Instances instances0 = new Instances("|", arrayList3, 87);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (double) 87;
      doubleArray0[2] = (double) 87;
      DenseInstance denseInstance0 = new DenseInstance(766.6126860240871, doubleArray0);
      instances0.add((Instance) denseInstance0);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.757637858307174
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      byteArrayOutputStream0.close();
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) byteArrayOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "Har\"N@H'w!_N,U9i[=4", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Har\"N@H'w!_N,U9i[=4");
      printStream0.println(false);
      printStream0.print((Object) "Har\"N@H'w!_N,U9i[=4");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip jRip0 = new JRip();
      jRip0.optimizationsTipText();
      Attribute attribute0 = new Attribute("The number of optimization runs.", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Instances instances0 = new Instances("", arrayList0, 1);
      instances0.indexOf(objectArray0[6]);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-1312.2), doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(3);
      SparseInstance sparseInstance1 = new SparseInstance(denseInstance0);
      instances0.add((Instance) sparseInstance0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 0, (-236));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      environment0.getVariableNames();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, (Locale.FilteringMode) null);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list1, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) list0, (Locale.FilteringMode) null);
      Environment environment1 = new Environment();
      environment0.addVariable("I$JY", "");
      environment0.getVariableNames();
      arrayList0.spliterator();
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list1, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list2, locale_FilteringMode3);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) list0, (Locale.FilteringMode) null);
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("t,oKH", arrayList3, 103);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      System.setCurrentTimeMillis(0L);
      try { 
        jRip0.rulesetForOneClass(2, instances0, 69, (-479.08706041));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.355825830420688
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list1, locale_FilteringMode2);
      Environment environment1 = new Environment();
      Set<String> set1 = environment1.getVariableNames();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode3);
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) list2, locale_FilteringMode4);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set1, locale_FilteringMode2);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      jRip_RipperRule0.setConsequent(2194.6612108063);
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.listOptions();
      Instances instances0 = decisionTable0.m_dtInstances;
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances1 = decisionTable1.m_theInstances;
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Instances instances2 = new Instances("|", arrayList3, 87);
      jRip_RipperRule0.grow(instances2);
      assertEquals(2194.6612108063, jRip_RipperRule0.getConsequent(), 0.01);
      
      Attribute attribute0 = new Attribute("#", list2, 5);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(41);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      byteArrayOutputStream0.close();
      objectArray0[6] = (Object) mockPrintStream0;
      byteArrayOutputStream0.close();
      objectArray0[7] = (Object) byteArrayOutputStream0;
      MockPrintStream mockPrintStream1 = new MockPrintStream("Har\"N@H'w!_N,U9i[=4");
      MockPrintStream mockPrintStream2 = new MockPrintStream("Har\"N@H'w!_N,U9i[=4");
      mockPrintStream1.close();
      byteArrayOutputStream0.close();
      byteArrayOutputStream0.reset();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-2202.5024285815));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Ranker ranker0 = new Ranker();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("B$fM^Ol.6ZrD", arrayList1, 87);
      jRip_RipperRule0.grow(instances0);
      assertEquals((-2202.5024285815), jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Attribute attribute0 = new Attribute(" (");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) null, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) null, locale_FilteringMode2);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-F";
      stringArray0[1] = " (";
      stringArray0[2] = " (";
      stringArray0[3] = "@attribute";
      stringArray0[4] = "string";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" (\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode1);
      Environment environment1 = new Environment();
      environment1.addVariable("", "I$JY");
      environment1.getVariableNames();
      arrayList2.spliterator();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) list1, locale_FilteringMode3);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      jRip_RipperRule0.setConsequent(100.0);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Ranker ranker0 = new Ranker();
      Instances instances0 = new Instances("|", arrayList3, 87);
      jRip_RipperRule0.grow(instances0);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4572637190629707
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties0.forEach(biConsumer0);
      Attribute attribute0 = new Attribute("Bd jz", (String) null, protectedProperties0);
      JRip jRip0 = new JRip();
      attribute0.value(0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList0.removeAll(arrayList2);
      Attribute attribute1 = new Attribute((String) null);
      arrayList0.add(attribute1);
      Attribute attribute2 = new Attribute("relational", (List<String>) null, 9);
      arrayList2.add("integer");
      arrayList0.add(attribute2);
      arrayList0.trimToSize();
      arrayList2.add("real");
      attribute2.equalsMsg((Object) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute2);
      Instances instances0 = new Instances("Bd jz", arrayList0, 2);
      Instances instances1 = new Instances(instances0, 2);
      attribute2.indexOfValue("@attribute");
      jRip_NominalAntd0.splitData(instances1, 3, 3);
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.nextFloat();
      instances1.numDistinctValues(attribute1);
      Instances instances2 = instances0.resampleWithWeights((Random) mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.ints(0, 1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "date";
      stringArray0[1] = "integer";
      stringArray0[2] = "date";
      stringArray0[3] = "";
      stringArray0[4] = "string";
      stringArray0[5] = "real";
      jRip_NominalAntd0.splitData(instances2, 1, 1);
      // Undeclared exception!
      try { 
        RuleStats.stratify(instances1, 0, mockRandom1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.enumerateMeasures();
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getCover();
      jRip0.setDebug(true);
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.921533775932955
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9J3.A+|dpy,QO~");
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      String[] stringArray0 = jRip0.getOptions();
      jRip0.minNoTipText();
      jRip0.usePruningTipText();
      BayesNet bayesNet0 = new BayesNet();
      JRip jRip1 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m2Q");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jRip1.setOptions(stringArray0);
      assertFalse(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.656419381805995
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JRip jRip1 = new JRip();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      jRip0.setCheckErrorRate(false);
      String[] stringArray0 = jRip0.getOptions();
      jRip1.usePruningTipText();
      jRip0.usePruningTipText();
      JRip jRip2 = new JRip();
      jRip2.setUsePruning(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jRip2.debugTipText();
      jRip2.getUsePruning();
      JRip.main(stringArray0);
      jRip0.seedTipText();
      jRip2.listOptions();
      assertTrue(jRip2.getCheckErrorRate());
      
      jRip0.getTechnicalInformation();
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9J3.A+|dpy,QO~");
      JRip jRip1 = new JRip();
      jRip0.setCheckErrorRate(false);
      jRip0.getOptions();
      jRip1.minNoTipText();
      jRip0.usePruningTipText();
      assertFalse(jRip0.getCheckErrorRate());
      
      BayesNet bayesNet0 = new BayesNet();
      JRip jRip2 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m2Q");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jRip1.debugTipText();
      assertTrue(jRip1.getCheckErrorRate());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 64.0;
      doubleArray0[3] = 64.0;
      doubleArray0[4] = 64.0;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NEGATIVE_INFINITY, doubleArray0);
      Attribute attribute0 = new Attribute("yOn\"lZCjl\"92");
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      jRip_NominalAntd0.covers(sparseInstance0);
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor1 = new MiddleOutConstructor();
      try { 
        middleOutConstructor1.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      Environment environment0 = new Environment();
      environment0.getVariableNames();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      Instances instances0 = bayesNet1.m_Instances;
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", arrayList0, protectedProperties1);
      attribute0.setWeight((-727.9876688043327));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAccu();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      LinearNNSearch linearNNSearch1 = new LinearNNSearch((Instances) null);
      LinearNNSearch linearNNSearch2 = new LinearNNSearch();
      try { 
        linearNNSearch2.nearestNeighbour(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.LinearNNSearch", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode1);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      arrayList3.add("Cdw:");
      Environment environment1 = new Environment();
      environment1.addVariable("", "I$JY");
      environment0.getVariableNames();
      arrayList2.spliterator();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) arrayList3, locale_FilteringMode3);
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      DecisionTable decisionTable0 = new DecisionTable();
      ArrayList<Attribute> arrayList4 = new ArrayList<Attribute>();
      Ranker ranker0 = new Ranker();
      decisionTable0.m_search = (ASSearch) ranker0;
      Instances instances0 = new Instances("9", arrayList4, 115);
      Attribute attribute0 = new Attribute("0b", list1, 2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, true);
      System.setCurrentTimeMillis(1396L);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = (-1216);
      jRip0.setCheckErrorRate(false);
      boolean boolean0 = false;
      jRip0.setDebug(false);
      jRip0.getCheckErrorRate();
      BallNode ballNode0 = new BallNode(268);
      BallNode ballNode1 = ballNode0.m_Left;
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(903.83, doubleArray0);
      binarySparseInstance0.dataset();
      try { 
        BallNode.calcPivot((BallNode) null, (BallNode) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "{qc)`hAqKI0I");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$nrf<i-e>>wn v:TE");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The number of optimization runs.");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{qc)`hAqKI0I");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("l]v$$:k(},x%9N", protectedProperties1);
      attribute0.indexOfValue((String) null);
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(" => l]v$$:k(},x%9N=", string0);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode1);
      Environment environment1 = new Environment();
      environment1.getVariableNames();
      arrayList2.spliterator();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) list1, locale_FilteringMode3);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Ranker ranker0 = new Ranker();
      Instances instances0 = new Instances("|", arrayList3, 87);
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("@data", instances0, protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Properties properties0 = new Properties();
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      jRip0.setDebug(true);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      jRip0.getOptions();
      assertTrue(jRip0.getDebug());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("{PlJVUK5n", protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals("8118", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "JRIP: No model built yet.";
      stringArray0[1] = "JRIP: No model built yet.";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2718.77;
      doubleArray0[3] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("JRIP: No model built yet.", linkedList0, protectedProperties0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getAttrValue();
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list1, locale_FilteringMode2);
      Environment environment1 = new Environment();
      environment1.getVariableNames();
      arrayList2.spliterator();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode3);
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) list2, locale_FilteringMode4);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      jRip_RipperRule0.setConsequent(2194.66121081);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      jRip0.getRevision();
      Ranker ranker0 = new Ranker();
      Instances instances0 = new Instances("|", arrayList3, 87);
      jRip_RipperRule0.grow(instances0);
      assertEquals(2194.66121081, jRip_RipperRule0.getConsequent(), 0.01);
      
      Attribute attribute0 = new Attribute("x#0!b\"", list0, 119);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(1727);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode1);
      List<String> list1 = new ArrayList<String>();
      Environment environment1 = new Environment();
      environment1.getVariableNames();
      arrayList2.spliterator();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) list1, locale_FilteringMode3);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      jRip_RipperRule0.setConsequent(2194.66121081);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      jRip0.getRevision();
      Ranker ranker0 = new Ranker();
      Instances instances0 = new Instances("|", arrayList3, 87);
      jRip_RipperRule0.grow(instances0);
      assertEquals(2194.66121081, jRip_RipperRule0.getConsequent(), 0.01);
      
      Attribute attribute0 = new Attribute("x#0!b\"", list0, 119);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(1727);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = (-1216);
      jRip0.setCheckErrorRate(true);
      jRip0.setDebug(true);
      jRip0.getDebug();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("B/E_D$yCwlBT2[(,Oc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // B/E_D$yCwlBT2[(,Oc not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3628722294375422
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = 64.0;
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      JRip jRip1 = new JRip();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      jRip0.setOptions(stringArray0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(11, stringArray0.length);
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      byteArrayOutputStream0.close();
      objectArray0[6] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "Har\"N@H'w!_N,U9i[=4", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Har\"N@H'w!_N,U9i[=4");
      printStream0.println(false);
      printStream0.print((Object) "Har\"N@H'w!_N,U9i[=4");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)101;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Har\"N@H'w!_N,U9i[=4");
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      mockPrintStream0.flush();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      byteArrayOutputStream0.close();
      objectArray0[6] = (Object) mockPrintStream0;
      byteArrayOutputStream0.close();
      byteArrayOutputStream0.reset();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getKernelMatrixFile();
      mockPrintStream0.print(true);
      mockPrintStream0.print((Object) mockPrintStream0);
      byteArrayOutputStream0.reset();
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[2];
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties0.forEach(biConsumer0);
      Attribute attribute0 = new Attribute("Bd jz", (String) null, protectedProperties0);
      JRip jRip0 = new JRip();
      attribute0.value(0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList0.removeAll(arrayList2);
      Attribute attribute1 = new Attribute((String) null);
      arrayList0.add(attribute1);
      Attribute attribute2 = new Attribute("relational", (List<String>) null, 9);
      arrayList2.add("integer");
      arrayList0.add(attribute2);
      arrayList0.trimToSize();
      jRip0.getDebug();
      attribute2.equalsMsg((Object) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute2);
      Instances instances0 = new Instances("Bd jz", arrayList0, 2);
      attribute2.indexOfValue("@attribute");
      jRip_NominalAntd0.splitData(instances0, 3, 3);
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.nextFloat();
      instances0.numDistinctValues(attribute1);
      mockRandom0.ints(0, 1);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "date";
      stringArray0[1] = "integer";
      stringArray0[2] = "date";
      stringArray0[3] = "real";
      stringArray0[4] = "string";
      stringArray0[5] = "real";
      RuleStats.partition(instances0, 3);
      // Undeclared exception!
      try { 
        RuleStats.stratify(instances0, 0, mockRandom0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6376398674083723
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.globalInfo();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      Attribute attribute0 = new Attribute("_/lpl'a{N4");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getMaxInfoGain();
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "B/E_D$yCwlBT2[(,Oc";
      stringArray0[1] = "B/E_D$yCwlBT2[(,Oc";
      jRip0.setOptions(stringArray0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties2.forEach(biConsumer0);
      properties0.put(protectedProperties2, protectedProperties1);
      Attribute attribute0 = new Attribute((String) null, (String) null, protectedProperties0);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      protectedProperties0.storeToXML((OutputStream) byteArrayOutputStream0, "biq?8l'eB!");
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties2.forEach(biConsumer1);
      System.setCurrentTimeMillis(0L);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
      assertEquals("null <= NaN", string0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      Attribute attribute0 = new Attribute("Copy with length set to be missing: ");
      attribute0.indexOfValue("Copy with length set to be missing: ");
      attribute0.setStringValue("Copy with length set to be missing: ");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      attribute0.setWeight(2871.8028445145137);
      jRip_NumericAntd0.maxInfoGain = (double) 1;
      jRip_NumericAntd0.att = attribute0;
      jRip_NumericAntd0.copy();
      attribute0.value((-3));
      jRip_NumericAntd0.getRevision();
      jRip0.seedTipText();
      jRip_NumericAntd0.getAttrValue();
      jRip_NumericAntd0.getAccuRate();
      Instance instance0 = null;
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.checkErrorRateTipText();
      BallNode ballNode0 = new BallNode((-771), (-771), 144);
      BallNode ballNode1 = ballNode0.m_Left;
      BallNode ballNode2 = new BallNode((-771));
      ballNode0.m_Right = ballNode2;
      ballNode2.m_SplitAttrib = (-771);
      BallNode ballNode3 = new BallNode((-2695));
      BallNode ballNode4 = new BallNode((-771), 0, 0);
      assertEquals((-1), ballNode4.m_SplitAttrib);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode1);
      Environment environment1 = new Environment();
      environment1.addVariable("", "I$JY");
      arrayList2.spliterator();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) list1, locale_FilteringMode3);
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Ranker ranker0 = new Ranker();
      Instances instances0 = new Instances("|", arrayList3, 87);
      long long0 = jRip0.getSeed();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, long0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.9663881312694826
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = 1.0E-4;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "+$8y0pNSg jErQE2Y";
      stringArray0[2] = "";
      stringArray0[3] = "";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.globalInfo();
      jRip0.setOptimizations(380);
      Attribute attribute0 = new Attribute("", "");
      attribute0.addStringValue("!7yvsTbpPTUD%");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip0.getFolds();
      jRip_NumericAntd0.maxInfoGain = 841.8918058;
      attribute0.getRevision();
      jRip_NumericAntd0.att = attribute0;
      jRip_NumericAntd0.getAttr();
      jRip0.getFolds();
      jRip0.getRevision();
      jRip0.getUsePruning();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      MockRandom mockRandom0 = new MockRandom();
      jRip_NumericAntd0.getRevision();
      try { 
        costMatrix0.applyCostMatrix((Instances) null, mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.0672877847391904
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.removeAll(arrayList0);
      Attribute attribute0 = new Attribute("An article from a journal or magazine.");
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      arrayList3.add(attribute0);
      Attribute attribute1 = new Attribute("date", (List<String>) null, 1);
      ArrayList<String> arrayList4 = new ArrayList<String>();
      arrayList4.add("2^Ad|AL|\"S,");
      arrayList2.add(attribute0);
      arrayList3.trimToSize();
      arrayList4.add("relational");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      Object object0 = jRip_NominalAntd0.copy();
      attribute0.equalsMsg(object0);
      Attribute attribute2 = new Attribute("date", (List<String>) null, 3);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute2);
      Instances instances0 = new Instances("integer", arrayList3, 350);
      attribute0.indexOfValue("YV3bte");
      jRip_NominalAntd0.splitData(instances0, 0, 2);
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextFloat();
      // Undeclared exception!
      try { 
        instances0.numDistinctValues(attribute1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.140016795854641
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      environment0.getVariableNames();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, (Locale.FilteringMode) null);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list1, locale_FilteringMode1);
      Environment environment1 = new Environment();
      environment1.addVariable("t,oKH", "I$JY");
      environment1.getVariableNames();
      arrayList2.spliterator();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) list2, locale_FilteringMode3);
      JRip jRip0 = new JRip();
      Set<String> set0 = environment1.getVariableNames();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0, (Locale.FilteringMode) null);
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) null, locale_FilteringMode4);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode5);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      jRip_RipperRule0.setConsequent(2194.6612108063);
      JRip jRip2 = new JRip();
      jRip2.getOptions();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2194.6612108063;
      doubleArray0[1] = 2194.6612108063;
      doubleArray0[2] = 2194.6612108063;
      doubleArray0[3] = 2194.6612108063;
      doubleArray0[4] = 0.1;
      SparseInstance sparseInstance0 = new SparseInstance(2194.6612108063, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
      
      jRip0.getTechnicalInformation();
      AbstractClassifier.makeCopies(jRip0, 88);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double double1 = jRip_RipperRule0.getConsequent();
      assertEquals((-1.0), double1, 0.01);
      
      int int0 = jRip0.getFolds();
      assertEquals(3, int0);
      
      jRip_RipperRule0.size();
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      environment0.removeVariable("[=VkxT>zZ~`h3M/ ]y");
      environment0.getVariableNames();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[=VkxT>zZ~`h3M/ ]y");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[=VkxT>zZ~`h3M/ ]y");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "own");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "': infoGain = ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M kpYI");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      BallNode ballNode0 = new BallNode((-369), (-369), 1103);
      Utils.SMALL = (double) 1103;
      BallNode ballNode1 = new BallNode(1103, (-1), (-369));
      BallNode ballNode2 = new BallNode((-369));
      BallNode ballNode3 = new BallNode((-369), (-369), (-1));
      BallNode ballNode4 = ballNode1.m_Left;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      BallNode ballNode5 = new BallNode(0);
      BallNode ballNode6 = ballNode5.m_Left;
      String string0 = jRip0.foldsTipText();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1);
      Attribute attribute0 = new Attribute("", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getSplitPoint();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      CoverTree coverTree0 = new CoverTree();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      BallNode ballNode0 = new BallNode((-369), (-369), 1103);
      Utils.SMALL = (double) 1103;
      BallNode ballNode1 = new BallNode((-14));
      BallNode ballNode2 = new BallNode((-369));
      BallNode ballNode3 = new BallNode((-14), (-14), (-1));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BallNode ballNode4 = new BallNode(0);
      BallNode ballNode5 = ballNode1.m_Left;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      BallNode ballNode6 = ballNode2.m_Left;
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      JRip jRip0 = new JRip();
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Instances instances0 = new Instances("", arrayList0, 730);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 423;
      doubleArray0[1] = (-1312.2);
      doubleArray0[2] = 3116.74479292806;
      doubleArray0[3] = (double) 730;
      doubleArray0[3] = (double) 730;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "| data size: ");
      doubleArray0[5] = (-1312.2);
      SparseInstance sparseInstance0 = new SparseInstance(423, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(denseInstance0);
      instances0.add((Instance) sparseInstance0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) sparseInstance0);
      jRip0.setFolds(1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      double[] doubleArray0 = new double[2];
      BayesNet bayesNet0 = new BayesNet();
      double[][] doubleArray1 = new double[3][8];
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      Properties properties0 = new Properties();
      doubleArray1[0] = doubleArray0;
      jRip0.getOptimizations();
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      Matrix matrix0 = Matrix.constructWithCopy(doubleArray1);
      MahalanobisEstimator mahalanobisEstimator0 = new MahalanobisEstimator(matrix0, (-1.0), 611.0322411891493);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Class for generating a pruned or unpruned C4.5 decision tree. For more information, see\n\n";
      stringArray0[1] = "Class for generating a pruned or unpruned C4.5 decision tree. For more information, see\n\n";
      stringArray0[2] = "Class for generating a pruned or unpruned C4.5 decision tree. For more information, see\n\n";
      stringArray0[3] = "Morgan Kaufmann";
      stringArray0[4] = "Class for generating a pruned or unpruned C4.5 decision tree. For more information, see\n\n";
      stringArray0[5] = "Class for generating a pruned or unpruned C4.5 decision tree. For more information, see\n\n";
      stringArray0[6] = "Class for generating a pruned or unpruned C4.5 decision tree. For more information, see\n\n";
      try { 
        Estimator.buildEstimator((Estimator) mahalanobisEstimator0, stringArray0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // premature end of file, read Token[EOF], line 1
         // Estimator options:
         // 
         // -D
         // \tIf set, estimator is run in debug mode and
         // \tmay output additional info to the console
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -a <attribute index>
         // \tThe number of the attribute the probability distribution
         // \testimation is done for.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         // -c <class index>
         // \tIf class value index is set, this attribute is taken as class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then last is default.
         // -v <class value index>
         // \tIf value is different to -1, select instances of this class value.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then all instances are taken.
         //
         verifyException("weka.estimators.Estimator", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.4990104312963837
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Attribute attribute0 = new Attribute(" (", " (");
      Utils.SMALL = 1981.028391;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.accuRate = 0.693147181;
      jRip_NumericAntd0.value = 0.693147181;
      jRip_NumericAntd0.toString();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      BayesNet bayesNet0 = new BayesNet();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.toString();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      jRip_NominalAntd0.covers(sparseInstance0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 0.5, 0.5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Properties properties0 = new Properties();
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[8];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TR-2005-13");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      BayesNet bayesNet0 = new BayesNet();
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      Attribute attribute0 = new Attribute("weka.core.neighboursearch.balltrees.MiddleOutConstructor$MyIdxList", "");
      Attribute attribute1 = attribute0.copy("TR-2005-13");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      String string1 = jRip_NominalAntd0.toString();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals("TR-2005-13 = ", string1);
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list1, locale_FilteringMode2);
      Environment environment1 = new Environment();
      environment1.addVariable("", "I$JY");
      environment0.getVariableNames();
      arrayList2.spliterator();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list3 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode3);
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) list2, locale_FilteringMode4);
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      DecisionTable decisionTable0 = new DecisionTable();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Ranker ranker0 = new Ranker();
      decisionTable0.m_search = (ASSearch) ranker0;
      Instances instances0 = new Instances("|", arrayList3, 115);
      Attribute attribute0 = new Attribute("0b", list3, 2);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 1, (-1434.71));
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      int int0 = jRip0.getFolds();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JRip jRip0 = new JRip();
      BallNode ballNode0 = new BallNode((-369), (-369), 1103);
      Utils.SMALL = (double) 1103;
      BallNode ballNode1 = new BallNode(1103, (-1), (-369));
      BallNode ballNode2 = new BallNode((-369));
      BallNode ballNode3 = ballNode2.m_Right;
      BallNode ballNode4 = ballNode1.m_Left;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ": w<|NO>e:1zH");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "l]v$$:k(},x%9N");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "p8?24@B4_uKvtP\"d");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, ": w<|NO>e:1zH");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ": w<|NO>e:1zH");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "l]v$$:k(},x%9N");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, (String) null);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(4034.96);
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties0.forEach(biConsumer0);
      properties0.put(protectedProperties1, protectedProperties1);
      JRip jRip0 = new JRip();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      protectedProperties0.storeToXML((OutputStream) byteArrayOutputStream0, "biq?8l'eB!");
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties0.forEach(biConsumer1);
      System.setCurrentTimeMillis(0L);
      int int0 = 16;
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      mockPrintStream0.write(80);
      objectArray0[5] = (Object) properties0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) byteArrayOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "Har\"N@H'w!_N,U9i[=4", objectArray0);
      properties0.storeToXML((OutputStream) printStream0, "Har\"N@H'w!_N,U9i[=4");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Har\"N@H'w!_N,U9i[=4");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "ND2XQ w%JkH-I");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setSeed(80);
      jRip_RipperRule0.hasAntds();
      JRip jRip1 = new JRip();
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      try { 
        topDownConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 64.0;
      doubleArray0[3] = (-1016.883524613658);
      doubleArray0[4] = 64.0;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NEGATIVE_INFINITY, doubleArray0);
      Attribute attribute0 = new Attribute("yOn\"lZCjl\"92");
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip0.getCheckErrorRate();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      MiddleOutConstructor middleOutConstructor1 = new MiddleOutConstructor();
      try { 
        middleOutConstructor1.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[6];
      intArray0[0] = (-2638);
      intArray0[1] = 6;
      intArray0[2] = (-482);
      intArray0[3] = 34;
      intArray0[4] = 95;
      intArray0[5] = (-15);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5.3, intArray0, 6);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.getSearchAlgorithm();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Xlgcw";
      stringArray0[1] = " => ";
      stringArray0[2] = "1z\"3J";
      stringArray0[3] = "Histogram density estimator";
      stringArray0[4] = "weka.classifiers.functions.neural.NeuralNode";
      stringArray0[5] = "PX;Erf0bNDk!";
      stringArray0[6] = "9fZoHsQRLo5!Q0k";
      stringArray0[7] = "j6Uhqsd~\"jRt%1";
      stringArray0[8] = "[0-9]*";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      try { 
        jRip0.rulesetForOneClass((-350.92), (Instances) null, 2194.66121081, (-2.4818497917991964));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      JRip jRip0 = new JRip();
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setSuppressMappingReport(true);
      String string0 = jRip_RipperRule0.getRevision();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals("8118", string0);
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utils.SMALL = 1981.028391;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      BayesNet bayesNet0 = new BayesNet();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      Estimator[][] estimatorArray0 = new Estimator[6][7];
      Estimator[] estimatorArray1 = new Estimator[0];
      estimatorArray0[0] = estimatorArray1;
      Estimator[] estimatorArray2 = new Estimator[8];
      PoissonEstimator poissonEstimator0 = new PoissonEstimator();
      Estimator estimator0 = Estimator.clone(poissonEstimator0);
      estimatorArray2[0] = estimator0;
      KernelEstimator kernelEstimator0 = new KernelEstimator((-1323.0));
      estimatorArray2[1] = (Estimator) kernelEstimator0;
      KernelEstimator kernelEstimator1 = new KernelEstimator(0.693147181);
      estimatorArray2[2] = (Estimator) kernelEstimator1;
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = stringArray0[0];
      PoissonEstimator poissonEstimator1 = new PoissonEstimator();
      jRip0.enumerateMeasures();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }
}
