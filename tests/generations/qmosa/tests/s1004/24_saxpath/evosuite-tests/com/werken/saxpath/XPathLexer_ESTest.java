/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 14:46:05 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.092439241030363
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.not();
      assertEquals("m", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.dollar();
      assertEquals("^", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.pipe();
      assertEquals("j", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("ueV4$`h,'GbNm20ga4");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.star();
      XPathLexer xPathLexer3 = new XPathLexer("ueV4$`h,'GbNm20ga4");
      XPathLexer xPathLexer4 = new XPathLexer("OMYwyk~nb*;SM{~_v8");
      XPathLexer xPathLexer5 = new XPathLexer("!/lUN*W");
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token4 = xPathLexer6.plus();
      assertEquals(5, token4.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer1.at();
      XPathLexer xPathLexer9 = new XPathLexer();
      XPathLexer xPathLexer10 = new XPathLexer();
      Token token5 = xPathLexer10.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      Token token6 = xPathLexer3.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("u", token6.getTokenText());
      
      XPathLexer xPathLexer11 = new XPathLexer();
      xPathLexer4.number();
      Token token7 = xPathLexer1.rightParen();
      assertEquals("e", token7.getTokenText());
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer6.colon();
      assertEquals(18, token8.getTokenType());
      
      XPathLexer xPathLexer12 = new XPathLexer("!/lUN*W");
      Token token9 = xPathLexer0.at();
      assertEquals("h", token9.getTokenText());
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer1.leftParen();
      assertEquals("V", token10.getTokenText());
      
      Token token11 = xPathLexer1.nextToken();
      assertEquals(30, token11.getTokenType());
      assertEquals("4", token11.getTokenText());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8622633369998138
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token0 = xPathLexer0.star();
      assertEquals("r", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.colon();
      assertEquals("6", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("!", token2.getTokenText());
      
      xPathLexer0.comma();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("L", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("<w", token4.getTokenText());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token6 = xPathLexer1.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      xPathLexer0.or();
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer1.at();
      Token token8 = xPathLexer0.nextToken();
      assertEquals("`", token8.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token9 = xPathLexer1.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("rv6!SL<wLMeVW`");
      xPathLexer4.relationalOperator();
      Token token10 = xPathLexer2.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer3.pipe();
      assertEquals(17, token11.getTokenType());
      
      xPathLexer1.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer("rv6!SL<wLMeVW`");
      XPathLexer xPathLexer6 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token12 = xPathLexer3.equals();
      assertEquals(21, token12.getTokenType());
      
      Token token13 = xPathLexer0.at();
      assertEquals(16, token13.getTokenType());
      assertEquals("`", token13.getTokenText());
      
      Token token14 = xPathLexer6.comma();
      assertEquals(32, token14.getTokenType());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1201418615666245
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u_z=+Annw3DSe4puz72");
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("_", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (3) (z)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.notEquals();
      assertEquals("=+", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.equals();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("n", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (3) (z)");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      Token token6 = xPathLexer2.dots();
      assertEquals(13, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.div();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("[ (3) (z)");
      xPathLexer4.relationalOperator();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("nw3DSe4puz72", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer2.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer2.rightParen();
      assertEquals(2, token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("u_z=+Annw3DSe4puz72");
      Token token10 = xPathLexer5.at();
      assertEquals("u", token10.getTokenText());
      
      Token token11 = xPathLexer5.equals();
      assertEquals("_", token11.getTokenText());
      
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer3.equals();
      assertEquals(21, token13.getTokenType());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.091564551974789
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z :Ia");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("Y", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.colon();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(">", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("c", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("p1", token4.getTokenText());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("U*wKEv(UfTKB[);");
      xPathLexer0.or();
      xPathLexer1.nextToken();
      xPathLexer1.at();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.relationalOperator();
      xPathLexer1.div();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(":", token6.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token7 = xPathLexer3.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("Ia", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.comma();
      XPathLexer xPathLexer5 = new XPathLexer("YY]>cp1@z :Ia");
      Token token9 = xPathLexer5.equals();
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer1.at();
      assertEquals("w", token10.getTokenText());
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer0.comma();
      assertEquals(32, token11.getTokenType());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1155189685493814
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u_z=+Annw3DSe4puz72");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals("_z", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("=", token2.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.consume();
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("");
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer("u_z=+Annw3DSe4puz72");
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.and();
      Token token7 = xPathLexer2.equals();
      assertEquals(21, token7.getTokenType());
      assertEquals("u", token7.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer4.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer2.star();
      assertEquals("_", token9.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("V%yGjJ`");
      Token token10 = xPathLexer5.nextToken();
      assertEquals(15, token10.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer5.nextToken();
      XPathLexer xPathLexer7 = new XPathLexer("");
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.rightParen();
      Token token11 = xPathLexer4.whitespace();
      assertEquals((-2), token11.getTokenType());
      
      Token token12 = xPathLexer0.literal();
      assertNull(token12);
      
      xPathLexer7.mod();
      Token token13 = xPathLexer6.plus();
      assertEquals(5, token13.getTokenType());
      
      Token token14 = xPathLexer6.rightParen();
      assertEquals(2, token14.getTokenType());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9482286316804023
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer0.div();
      Token token0 = xPathLexer0.equals();
      assertEquals("A", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("RW", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals("}", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.comma();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.div();
      Token token5 = xPathLexer0.pipe();
      assertEquals(":", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("6WCnaN{^ B8#Nd/L");
      Token token6 = xPathLexer2.leftBracket();
      assertEquals("6", token6.getTokenText());
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer1.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer2.nextToken();
      assertEquals("WCnaN", token8.getTokenText());
      
      xPathLexer1.dots();
      Token token9 = xPathLexer0.comma();
      assertEquals("H", token9.getTokenText());
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer1.dots();
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer1.star();
      assertEquals(20, token11.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("T*wqb/xFtK@?\"!1B/");
      XPathLexer xPathLexer4 = new XPathLexer("T*wqb/xFtK@?\"!1B/");
      xPathLexer2.nextToken();
      xPathLexer1.relationalOperator();
      xPathLexer0.div();
      Token token12 = xPathLexer1.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token13 = xPathLexer4.nextToken();
      assertEquals(15, token13.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token14 = xPathLexer5.rightParen();
      assertEquals(2, token14.getTokenType());
      
      Token token15 = xPathLexer6.colon();
      assertEquals(18, token15.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token16 = xPathLexer6.at();
      assertEquals(16, token16.getTokenType());
      
      Token token17 = xPathLexer3.leftParen();
      assertEquals("T", token17.getTokenText());
      
      Token token18 = xPathLexer0.plus();
      assertEquals("'", token18.getTokenText());
      assertEquals(5, token18.getTokenType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0198333531178045
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z :Ia");
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(4, token0.getTokenType());
      assertEquals("]", token0.getTokenText());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.colon();
      assertEquals(">", token1.getTokenText());
      
      xPathLexer0.star();
      Token token2 = xPathLexer0.minus();
      assertEquals("p", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer(".vF?]dc!");
      xPathLexer0.operatorName();
      Token token3 = xPathLexer1.not();
      assertEquals(23, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("<H");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.rightParen();
      Token token4 = xPathLexer4.pipe();
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer2.comma();
      assertEquals(".", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals("1", token6.getTokenText());
      
      Token token7 = xPathLexer3.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer2.star();
      assertEquals(20, token8.getTokenType());
      assertEquals("v", token8.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token9 = xPathLexer2.nextToken();
      assertEquals("F", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token10 = xPathLexer3.nextToken();
      assertEquals(7, token10.getTokenType());
      
      xPathLexer2.relationalOperator();
      Token token11 = xPathLexer2.nextToken();
      assertEquals("?]dc!", token11.getTokenText());
      
      Token token12 = xPathLexer5.plus();
      assertEquals(5, token12.getTokenType());
      
      xPathLexer1.rightParen();
      Token token13 = xPathLexer1.equals();
      assertEquals(21, token13.getTokenType());
      
      Token token14 = xPathLexer0.at();
      assertEquals(16, token14.getTokenType());
      assertEquals("@", token14.getTokenText());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.043073552668536
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rv6!SL<wLMeVW`");
      xPathLexer0.star();
      xPathLexer0.consume(0);
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.pipe();
      xPathLexer0.literal();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("6WCnaN{^ B8#Nd/L");
      xPathLexer0.leftBracket();
      xPathLexer1.doubleColon();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.dots();
      xPathLexer2.comma();
      xPathLexer0.dots();
      xPathLexer0.star();
      XPathLexer xPathLexer3 = new XPathLexer("8jMs35mb*%4;x|");
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer2.nextToken();
      xPathLexer2.relationalOperator();
      xPathLexer3.div();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer3.rightParen();
      xPathLexer6.colon();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token1 = xPathLexer2.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3768754301586834
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z :Ia");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("YY", token0.getTokenText());
      
      xPathLexer0.minus();
      Token token1 = xPathLexer0.relationalOperator();
      assertEquals(9, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("p", token3.getTokenText());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals("1", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("@", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("{r");
      xPathLexer0.and();
      Token token7 = xPathLexer1.equals();
      assertEquals("{", token7.getTokenText());
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer1.number();
      assertEquals(30, token8.getTokenType());
      assertEquals("", token8.getTokenText());
      
      Token token9 = xPathLexer1.star();
      assertEquals(20, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer("/TfUC'$Sz3s/`[&ZVt");
      xPathLexer3.mod();
      Token token10 = xPathLexer3.nextToken();
      assertEquals("/", token10.getTokenText());
      assertEquals(11, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("nv#>");
      Token token11 = xPathLexer1.rightParen();
      assertEquals(2, token11.getTokenType());
      
      Token token12 = xPathLexer3.whitespace();
      assertEquals((-2), token12.getTokenType());
      assertEquals("", token12.getTokenText());
      
      Token token13 = xPathLexer4.literal();
      assertNull(token13);
      
      xPathLexer4.mod();
      Token token14 = xPathLexer1.plus();
      assertEquals(5, token14.getTokenType());
      
      Token token15 = xPathLexer0.identifier();
      assertEquals("a", token15.getTokenText());
      assertEquals(15, token15.getTokenType());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9703880995222698
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u_z=+Annw3DSe4puz72");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("u", token0.getTokenText());
      
      xPathLexer0.not();
      Token token1 = xPathLexer0.leftBracket();
      String string0 = token1.toString();
      assertEquals("[ (3) (z)", string0);
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.not();
      assertEquals("=", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("Annw3DSe4puz72", token3.getTokenText());
      
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer0.equals();
      xPathLexer0.number();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer("u_z=+Annw3DSe4puz72");
      Token token4 = xPathLexer1.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer2.dots();
      assertEquals(13, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("69|$5JIr");
      xPathLexer3.div();
      Token token6 = xPathLexer3.nextToken();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token7 = xPathLexer2.nextToken();
      assertEquals("_z", token7.getTokenText());
      
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer2.rightParen();
      assertEquals(2, token9.getTokenType());
      assertEquals("=", token9.getTokenText());
      
      Token token10 = xPathLexer2.equals();
      assertEquals(21, token10.getTokenType());
      assertEquals("+", token10.getTokenText());
      
      Token token11 = xPathLexer1.at();
      assertEquals(16, token11.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0947298450169796
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.plus();
      xPathLexer0.doubleColon();
      xPathLexer0.rightBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.rightBracket();
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      xPathLexer0.consume((-996));
      xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8632776174821846
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u_z=+Annw3DSe4puz72");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("u", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.minus();
      xPathLexer1.relationalOperator();
      Token token1 = xPathLexer0.not();
      assertEquals("z", token1.getTokenText());
      
      xPathLexer1.rightParen();
      Token token2 = xPathLexer0.pipe();
      assertEquals("=", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.setXPath("^B?0R2hh;1i)gp");
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("^", token3.getTokenText());
      
      xPathLexer1.leftParen();
      Token token4 = xPathLexer0.minus();
      assertEquals("B", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals("?", token5.getTokenText());
      
      Token token6 = xPathLexer0.star();
      assertEquals("0", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.div();
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token7 = xPathLexer0.plus();
      assertEquals("R", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer1.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("fD&i2[=");
      xPathLexer5.relationalOperator();
      Token token9 = xPathLexer2.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer6.nextToken();
      assertEquals("fD", token10.getTokenText());
      
      Token token11 = xPathLexer4.rightParen();
      assertEquals(2, token11.getTokenType());
      
      Token token12 = xPathLexer4.equals();
      assertEquals(21, token12.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("|H7)3'R");
      xPathLexer7.div();
      Token token13 = xPathLexer1.identifier();
      assertEquals(15, token13.getTokenType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9497491137591405
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.not();
      assertEquals("%", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("(", token2.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals("m", token0.getTokenText());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("j", token3.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.leftBracket();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("h$2nb,1SH", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer2.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer2.rightParen();
      assertEquals(2, token7.getTokenType());
      
      xPathLexer3.or();
      Token token8 = xPathLexer1.identifier();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer1.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer3.star();
      assertEquals(20, token10.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9249603454676876
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      token0.toString();
      token0.toString();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.plus();
      xPathLexer0.mod();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer1.relationalOperator();
      xPathLexer1.nextToken();
      Token token1 = xPathLexer1.plus();
      xPathLexer0.rightParen();
      xPathLexer1.equals();
      xPathLexer1.at();
      xPathLexer1.rightParen();
      Token token2 = xPathLexer1.nextToken();
      assertFalse(token2.equals((Object)token1));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.206992974482879
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token0 = xPathLexer0.star();
      assertEquals("r", token0.getTokenText());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("v", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token2 = xPathLexer1.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("r", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.relationalOperator();
      xPathLexer1.not();
      XPathLexer xPathLexer3 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token3 = xPathLexer1.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("6", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("6", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      xPathLexer3.div();
      xPathLexer0.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer2.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer4.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token6 = xPathLexer1.nextToken();
      assertEquals(23, token6.getTokenType());
      assertEquals("!", token6.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("xi");
      Token token7 = xPathLexer7.nextToken();
      assertEquals("xi", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token8 = xPathLexer3.rightParen();
      assertEquals("r", token8.getTokenText());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token9 = xPathLexer1.colon();
      assertEquals("S", token9.getTokenText());
      
      XPathLexer xPathLexer10 = new XPathLexer("");
      Token token10 = xPathLexer5.at();
      assertEquals(16, token10.getTokenType());
      
      XPathLexer xPathLexer11 = new XPathLexer();
      Token token11 = xPathLexer4.leftParen();
      assertEquals(1, token11.getTokenType());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.107373091712498
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z :Ia");
      xPathLexer0.doubleColon();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("YY]>cp1@z :Ia");
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.number();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("YY]>cp1@z :Ia");
      xPathLexer0.nextToken();
      xPathLexer1.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("yobF");
      xPathLexer2.notEquals();
      xPathLexer1.or();
      xPathLexer2.comma();
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.039027412702424
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o*1ClltR)?=^");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("o*", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.minus();
      assertEquals("1", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("?13NL/i~5~k~$<z");
      Token token2 = xPathLexer1.not();
      assertEquals("?", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      xPathLexer1.rightParen();
      xPathLexer1.and();
      Token token3 = xPathLexer1.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("3", token3.getTokenText());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals("NL", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("z=Sf;9E");
      Token token5 = xPathLexer0.dollar();
      assertEquals("C", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      assertEquals("l", token6.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer3.minus();
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      assertEquals("l", token8.getTokenText());
      
      Token token9 = xPathLexer2.star();
      assertEquals("z", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      XPathLexer xPathLexer5 = new XPathLexer("o*1ClltR)?=^");
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token11 = xPathLexer2.nextToken();
      assertEquals("=", token11.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer2.relationalOperator();
      Token token12 = xPathLexer3.colon();
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer2.nextToken();
      assertEquals(15, token13.getTokenType());
      
      Token token14 = xPathLexer0.rightParen();
      assertEquals("R", token14.getTokenText());
      assertEquals(2, token14.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token15 = xPathLexer8.equals();
      assertEquals(21, token15.getTokenType());
      
      Token token16 = xPathLexer8.identifier();
      assertEquals(15, token16.getTokenType());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.133877024708417
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("a;(jV@0");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer1.minus();
      xPathLexer1.relationalOperator();
      xPathLexer0.not();
      xPathLexer1.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer1.number();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer("<");
      xPathLexer1.nextToken();
      xPathLexer1.dots();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.div();
      xPathLexer0.nextToken();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.rightParen();
      xPathLexer3.doubleColon();
      Token token0 = xPathLexer2.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.976899369440644
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rv6!SL<wLMeVW`");
      xPathLexer0.star();
      Token token0 = xPathLexer0.slashes();
      assertEquals("v", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.rightParen();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("L", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(7, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("w", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token4 = xPathLexer1.star();
      assertEquals("r", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("rv6!SL<wLMeVW`");
      XPathLexer xPathLexer3 = new XPathLexer("BQV|]Y");
      Token token5 = xPathLexer0.plus();
      assertEquals("L", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.at();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer5.not();
      Token token6 = xPathLexer0.minus();
      assertEquals("M", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals(23, token7.getTokenType());
      assertEquals("!", token7.getTokenText());
      
      xPathLexer5.relationalOperator();
      xPathLexer1.div();
      Token token8 = xPathLexer0.nextToken();
      assertEquals("eVW", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      xPathLexer0.nextToken();
      Token token9 = xPathLexer3.at();
      assertEquals("B", token9.getTokenText());
      assertEquals(16, token9.getTokenType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0676187188105963
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lpUZOw'OW");
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("U", token1.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.doubleColon();
      xPathLexer0.and();
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("'", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("OW", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.nextToken();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      xPathLexer0.operatorName();
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("lpUZOw'OW");
      Token token8 = xPathLexer1.doubleColon();
      assertEquals("lp", token8.getTokenText());
      
      xPathLexer0.doubleColon();
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      xPathLexer1.consume();
      XPathLexer xPathLexer2 = new XPathLexer("lpUZOw'OW");
      xPathLexer2.div();
      xPathLexer2.nextToken();
      Token token11 = xPathLexer1.rightParen();
      assertEquals("Z", token11.getTokenText());
      assertEquals(2, token11.getTokenType());
      
      Token token12 = xPathLexer2.equals();
      assertEquals("'", token12.getTokenText());
      assertEquals(21, token12.getTokenType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "nLZ!pT<T}";
      XPathLexer xPathLexer0 = new XPathLexer("nLZ!pT<T}");
      xPathLexer0.consume((-624));
      xPathLexer0.pipe();
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9527291361441688
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tm$_;w0m2TG*Lhr");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      assertEquals("t", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.minus();
      assertEquals("m", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("$", token2.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.div();
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.number();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("w", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("tm$_;w0m2TG*Lhr");
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.dots();
      assertEquals("m", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      xPathLexer1.div();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("2", token5.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token6 = xPathLexer1.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("tm", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.plus();
      assertEquals(5, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("\"z-DINc/(D3|'");
      Token token8 = xPathLexer3.rightParen();
      assertEquals(2, token8.getTokenType());
      assertEquals("\"", token8.getTokenText());
      
      Token token9 = xPathLexer3.equals();
      assertEquals("z", token9.getTokenText());
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      assertEquals("T", token10.getTokenText());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1127252671821557
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpth.Tokn");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("c", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.colon();
      assertEquals("o", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("m", token2.getTokenText());
      
      xPathLexer0.comma();
      Token token3 = xPathLexer0.dots();
      assertEquals("w", token3.getTokenText());
      
      xPathLexer0.doubleColon();
      Token token4 = xPathLexer0.slashes();
      assertEquals("k", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("en.saxpth.Tokn", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(";c,QMNS5wa3689aV@");
      Token token10 = xPathLexer1.doubleColon();
      assertEquals(";c", token10.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer1.relationalOperator();
      xPathLexer0.div();
      Token token11 = xPathLexer1.nextToken();
      assertEquals(32, token11.getTokenType());
      assertEquals(",", token11.getTokenText());
      
      xPathLexer0.nextToken();
      Token token12 = xPathLexer1.rightParen();
      assertEquals(2, token12.getTokenType());
      assertEquals("Q", token12.getTokenText());
      
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token13 = xPathLexer2.plus();
      assertEquals(5, token13.getTokenType());
      
      Token token14 = xPathLexer2.doubleColon();
      assertEquals(19, token14.getTokenType());
      
      Token token15 = xPathLexer0.not();
      assertEquals(23, token15.getTokenType());
      
      Token token16 = xPathLexer0.dots();
      assertEquals(13, token16.getTokenType());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1194792050378735
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      assertEquals("m", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.minus();
      assertEquals("%", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.or();
      xPathLexer0.equals();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals("h", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("m%^(jR%h$2nb,1SH");
      Token token5 = xPathLexer0.nextToken();
      assertEquals(26, token5.getTokenType());
      assertEquals("$", token5.getTokenText());
      
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      assertEquals("2", token6.getTokenText());
      
      xPathLexer1.div();
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("nb", token7.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer1.nextToken();
      Token token8 = xPathLexer1.plus();
      assertEquals(5, token8.getTokenType());
      assertEquals("%", token8.getTokenText());
      
      Token token9 = xPathLexer1.rightParen();
      assertEquals("^", token9.getTokenText());
      
      Token token10 = xPathLexer0.equals();
      assertEquals(",", token10.getTokenText());
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer1.at();
      assertEquals("(", token11.getTokenText());
      assertEquals(16, token11.getTokenType());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9821541946849437
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      assertEquals("m", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.minus();
      assertEquals("%", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.rightParen();
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("%", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("h", token3.getTokenText());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("$", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("gVqno=/#]/hm1rV0EJ");
      Token token5 = xPathLexer1.nextToken();
      assertEquals("gVqno", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer1.equals();
      xPathLexer1.plus();
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer1.dollar();
      assertEquals("#", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
      
      xPathLexer0.equals();
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer1.plus();
      assertEquals(5, token8.getTokenType());
      
      xPathLexer1.dots();
      xPathLexer1.and();
      xPathLexer1.mod();
      xPathLexer1.or();
      Token token9 = xPathLexer0.dots();
      assertEquals("b", token9.getTokenText());
      assertEquals(13, token9.getTokenType());
      
      xPathLexer0.mod();
      Token token10 = xPathLexer1.literal();
      assertNull(token10);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.colon();
      Token token11 = xPathLexer0.not();
      assertEquals(",", token11.getTokenText());
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer0.rightParen();
      assertEquals(2, token12.getTokenType());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2589955280436986
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      xPathLexer0.not();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      xPathLexer0.div();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.equals();
      xPathLexer1.number();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.star();
      XPathLexer xPathLexer3 = new XPathLexer("dS+he7j<");
      XPathLexer xPathLexer4 = new XPathLexer("dS+he7j<");
      xPathLexer3.nextToken();
      xPathLexer3.relationalOperator();
      xPathLexer4.div();
      XPathLexer xPathLexer5 = new XPathLexer("dS+he7j<");
      xPathLexer5.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.nextToken();
      xPathLexer5.star();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.number();
      xPathLexer5.rightParen();
      Token token0 = xPathLexer2.colon();
      XPathLexer xPathLexer8 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer1.at();
      xPathLexer1.leftParen();
      Token token1 = xPathLexer6.nextToken();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3079164681950837
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer0.div();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("A", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("I", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals("}", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.div();
      Token token4 = xPathLexer0.pipe();
      assertEquals("'", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("6WCnaN{^ B8#Nd/L");
      Token token5 = xPathLexer2.leftBracket();
      assertEquals("6", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer1.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer2.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("WCnaN", token7.getTokenText());
      
      xPathLexer1.dots();
      Token token8 = xPathLexer0.comma();
      assertEquals("\"", token8.getTokenText());
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer1.dots();
      assertEquals(13, token9.getTokenType());
      
      Token token10 = xPathLexer1.star();
      assertEquals(20, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("T*wqb/xFtK@?\"!1B/");
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token11 = xPathLexer2.not();
      assertEquals("{", token11.getTokenText());
      assertEquals(23, token11.getTokenType());
      
      xPathLexer2.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer("b/^D6B1jvsF");
      Token token12 = xPathLexer5.rightParen();
      assertEquals(2, token12.getTokenType());
      
      Token token13 = xPathLexer0.whitespace();
      assertEquals("", token13.getTokenText());
      assertEquals((-2), token13.getTokenType());
      
      Token token14 = xPathLexer6.literal();
      assertNull(token14);
      
      xPathLexer4.mod();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token15 = xPathLexer7.plus();
      assertEquals(5, token15.getTokenType());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.208525562133844
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpth.Tokn");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.at();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.colon();
      Token token3 = xPathLexer0.comma();
      assertEquals("e", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      xPathLexer0.dots();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("ke", token4.getTokenText());
      
      xPathLexer0.slashes();
      xPathLexer0.or();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(".", token5.getTokenText());
      
      xPathLexer0.at();
      Token token6 = xPathLexer0.slashes();
      assertEquals("a", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpth.Tokn");
      XPathLexer xPathLexer2 = new XPathLexer("s>N)Z c~tCVG{G");
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer1.div();
      XPathLexer xPathLexer3 = new XPathLexer("7P(Er![");
      Token token8 = xPathLexer3.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer3.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("P", token9.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer4.rightParen();
      XPathLexer xPathLexer6 = new XPathLexer("[ (");
      Token token10 = xPathLexer0.colon();
      assertEquals("x", token10.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      xPathLexer1.at();
      Token token11 = xPathLexer2.leftParen();
      assertEquals(1, token11.getTokenType());
      assertEquals(">", token11.getTokenText());
      
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
      assertEquals("p", token12.getTokenText());
      
      Token token13 = xPathLexer4.rightParen();
      assertEquals(2, token13.getTokenType());
      
      Token token14 = xPathLexer1.rightBracket();
      assertEquals(4, token14.getTokenType());
      assertEquals("o", token14.getTokenText());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8931748308872145
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("nLZ!pT<T}");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.star();
      String string0 = token0.toString();
      assertEquals("[ (20) (n)", string0);
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("nLZ!pT<T}");
      Token token1 = xPathLexer1.rightBracket();
      assertEquals("n", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (20) (n)");
      xPathLexer2.identifier();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.equals();
      xPathLexer3.number();
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("p", token2.getTokenText());
      
      Token token3 = xPathLexer1.leftParen();
      assertEquals("L", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      xPathLexer3.equals();
      Token token5 = xPathLexer1.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      xPathLexer2.star();
      XPathLexer xPathLexer4 = new XPathLexer("[ (20) (n)");
      XPathLexer xPathLexer5 = new XPathLexer("Q}M5\"D6f@ww9l");
      Token token6 = xPathLexer2.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer5.nextToken();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer3.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer4.rightParen();
      assertEquals("[", token9.getTokenText());
      
      Token token10 = xPathLexer1.equals();
      assertEquals(21, token10.getTokenType());
      assertEquals("Z", token10.getTokenText());
      
      Token token11 = xPathLexer5.at();
      assertEquals("}", token11.getTokenText());
      assertEquals(16, token11.getTokenType());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.029932063522094
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z :Ia");
      xPathLexer0.doubleColon();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals("]", token1.getTokenText());
      
      xPathLexer0.colon();
      Token token2 = xPathLexer0.dots();
      assertEquals("c", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.div();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer("yR>");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("^*r*8");
      Token token3 = xPathLexer1.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("yR", token3.getTokenText());
      
      xPathLexer2.relationalOperator();
      Token token4 = xPathLexer1.nextToken();
      assertEquals(9, token4.getTokenType());
      assertEquals(">", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("+S_jk]lQ");
      Token token5 = xPathLexer3.literal();
      assertNull(token5);
      
      Token token6 = xPathLexer2.rightParen();
      assertEquals("^", token6.getTokenText());
      
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      xPathLexer1.dollar();
      XPathLexer xPathLexer4 = new XPathLexer("%1");
      Token token8 = xPathLexer4.dollar();
      assertEquals("%", token8.getTokenText());
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer2.at();
      assertEquals(16, token9.getTokenType());
      assertEquals("*", token9.getTokenText());
      
      Token token10 = xPathLexer0.rightParen();
      assertEquals(2, token10.getTokenType());
      
      xPathLexer0.or();
      Token token11 = xPathLexer4.equals();
      assertEquals("1", token11.getTokenText());
      assertEquals(21, token11.getTokenType());
      
      xPathLexer4.pipe();
      Token token12 = xPathLexer2.comma();
      assertEquals(32, token12.getTokenType());
      assertEquals("r", token12.getTokenText());
      
      Token token13 = xPathLexer1.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      Token token14 = xPathLexer0.leftParen();
      assertEquals("I", token14.getTokenText());
      
      Token token15 = xPathLexer0.colon();
      assertEquals(18, token15.getTokenType());
      
      Token token16 = xPathLexer0.literal();
      assertNull(token16);
      
      Token token17 = xPathLexer4.pipe();
      assertEquals(17, token17.getTokenType());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1232612277871588
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|kmkoIaP59m %?I_qe6");
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.literal();
      assertNotNull(token0);
      assertEquals(27, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("I", token2.getTokenText());
      
      xPathLexer0.comma();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token4 = xPathLexer0.slashes();
      assertEquals("m", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("|kmkoIaP59m %?I_qe6");
      xPathLexer0.or();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("%?I_qe6", token5.getTokenText());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer2.div();
      Token token7 = xPathLexer1.nextToken();
      assertEquals("|", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("|kmkoIaP59m %?I_qe6");
      xPathLexer3.relationalOperator();
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
      assertEquals("km", token8.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("K';Zu0oE.p");
      Token token9 = xPathLexer4.nextToken();
      assertEquals("K", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer1.comma();
      assertEquals("k", token10.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("^E637<l1'");
      Token token11 = xPathLexer2.equals();
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer3.at();
      assertEquals(16, token12.getTokenType());
      assertEquals("|", token12.getTokenText());
      
      Token token13 = xPathLexer0.comma();
      assertEquals(32, token13.getTokenType());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.954568068902614
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|kmkoIaP59m %?I_qe6");
      XPathLexer xPathLexer1 = new XPathLexer("|kmkoIaP59m %?I_qe6");
      Token token0 = xPathLexer1.star();
      token0.toString();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("|", token1.getTokenText());
      
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (20) (|)", string0);
      
      xPathLexer0.rightParen();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token2 = xPathLexer3.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("%?I_qe6", token3.getTokenText());
      
      xPathLexer1.div();
      xPathLexer1.or();
      XPathLexer xPathLexer4 = new XPathLexer("[ (20) (|)");
      Token token4 = xPathLexer4.equals();
      assertEquals("[", token4.getTokenText());
      
      Token token5 = xPathLexer2.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer1.star();
      XPathLexer xPathLexer5 = new XPathLexer("?\"c%0Od-p<~[j8");
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token6 = xPathLexer5.plus();
      assertEquals("?", token6.getTokenText());
      assertEquals(5, token6.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("Bh%S9.S&D^mhCN=GT");
      Token token7 = xPathLexer7.nextToken();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer6.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer7.rightParen();
      assertEquals(2, token9.getTokenType());
      assertEquals("%", token9.getTokenText());
      
      Token token10 = xPathLexer1.equals();
      assertEquals(21, token10.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token11 = xPathLexer8.at();
      assertEquals(16, token11.getTokenType());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1478463119465334
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("a5(\bO@#LZ.BhV}H#bA");
      xPathLexer0.star();
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.rightParen();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("a5(\bO@#LZ.BhV}H#bA");
      xPathLexer1.star();
      XPathLexer xPathLexer2 = new XPathLexer("a5(\bO@#LZ.BhV}H#bA");
      XPathLexer xPathLexer3 = new XPathLexer("a5(\bO@#LZ.BhV}H#bA");
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.plus();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer7.not();
      xPathLexer1.nextToken();
      xPathLexer7.relationalOperator();
      xPathLexer1.div();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.minus();
      Token token0 = xPathLexer5.getPreviousToken();
      assertNull(token0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0413729834583227
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lpUZOw'OW");
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("U", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("Z", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("Ow", token3.getTokenText());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("OW", token5.getTokenText());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      xPathLexer0.equals();
      Token token8 = xPathLexer0.equals();
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      xPathLexer0.and();
      Token token11 = xPathLexer0.rightParen();
      assertEquals(2, token11.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token12 = xPathLexer0.pipe();
      assertEquals(17, token12.getTokenType());
      
      Token token13 = xPathLexer0.rightBracket();
      assertEquals(4, token13.getTokenType());
      
      Token token14 = xPathLexer0.minus();
      assertEquals(6, token14.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifier();
      Token token15 = xPathLexer0.colon();
      assertEquals(18, token15.getTokenType());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.1152867255900607
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      assertEquals("m", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("R", token2.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.or();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("%", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals("h", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("$", token6.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("m%^(jR%h$2nb,1SH");
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      assertEquals("m", token7.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("X1M%#ri");
      Token token8 = xPathLexer2.nextToken();
      assertEquals(15, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.relationalOperator();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("nv#>");
      Token token9 = xPathLexer2.rightParen();
      assertEquals(2, token9.getTokenType());
      assertEquals("%", token9.getTokenText());
      
      Token token10 = xPathLexer1.whitespace();
      assertEquals((-2), token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token11 = xPathLexer5.literal();
      assertNull(token11);
      
      xPathLexer2.mod();
      Token token12 = xPathLexer1.plus();
      assertEquals(5, token12.getTokenType());
      assertEquals("^", token12.getTokenText());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.223269375805648
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      assertEquals("m", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("%", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("^", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("(", token3.getTokenText());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.equals();
      assertEquals("%", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals("", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("h", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("s>N)Z c~tCVG{G");
      XPathLexer xPathLexer3 = new XPathLexer("7P(Er![");
      xPathLexer2.nextToken();
      Token token7 = xPathLexer2.relationalOperator();
      assertEquals(">", token7.getTokenText());
      assertEquals(9, token7.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer4 = new XPathLexer("s>N)Z c~tCVG{G");
      Token token8 = xPathLexer3.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals(26, token9.getTokenType());
      assertEquals("$", token9.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token10 = xPathLexer3.nextToken();
      assertEquals("P", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer5.colon();
      Token token11 = xPathLexer1.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      xPathLexer5.relationalOperator();
      xPathLexer2.nextToken();
      Token token12 = xPathLexer0.plus();
      assertEquals("2", token12.getTokenText());
      assertEquals(5, token12.getTokenType());
      
      Token token13 = xPathLexer1.rightParen();
      assertEquals(2, token13.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token14 = xPathLexer7.equals();
      assertEquals(21, token14.getTokenType());
      
      Token token15 = xPathLexer7.at();
      assertEquals(16, token15.getTokenType());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.0543470027258883
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpth.Tokn");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.star();
      assertEquals("c", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.colon();
      Token token1 = xPathLexer0.minus();
      assertEquals("m", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.comma();
      assertEquals(".", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals("e", token4.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.pipe();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("ken.saxpth.Tokn", token5.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.or();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.dots();
      Token token8 = xPathLexer1.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer1.dots();
      assertEquals(13, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpth.Tokn");
      XPathLexer xPathLexer3 = new XPathLexer("C~r5VvkC?");
      Token token10 = xPathLexer1.literal();
      assertNull(token10);
      
      Token token11 = xPathLexer3.colon();
      assertEquals("C", token11.getTokenText());
      
      Token token12 = xPathLexer2.pipe();
      assertEquals("c", token12.getTokenText());
      assertEquals(17, token12.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer1.leftBracket();
      Token token13 = xPathLexer2.colon();
      assertEquals(18, token13.getTokenType());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.1669526706854043
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpth.Tokn");
      xPathLexer0.operatorName();
      xPathLexer0.star();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("7~*+Mm");
      Token token1 = xPathLexer1.not();
      assertEquals("7", token1.getTokenText());
      
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("w", token2.getTokenText());
      
      xPathLexer1.nextToken();
      Token token3 = xPathLexer0.rightParen();
      assertEquals("e", token3.getTokenText());
      
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer("S*oIt9f@13");
      Token token4 = xPathLexer2.star();
      assertEquals("S", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("7~*+Mm");
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpth.Tokn");
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("r", token5.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token6 = xPathLexer4.nextToken();
      assertEquals("com.werken.saxpth.Tokn", token6.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer4.relationalOperator();
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token7 = xPathLexer5.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer3.nextToken();
      assertEquals("7", token8.getTokenText());
      assertEquals(30, token8.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer9.relationalOperator();
      xPathLexer8.div();
      Token token9 = xPathLexer2.nextToken();
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer2.nextToken();
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer8.rightParen();
      assertEquals(2, token11.getTokenType());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.2105119371332003
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z :Ia");
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      Token token1 = xPathLexer0.relationalOperator();
      assertEquals(9, token1.getTokenType());
      assertEquals(">", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals("c", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.and();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.setXPath("ssY2i+/b");
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("s", token4.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(19, token0.getTokenType());
      assertEquals("YY", token0.getTokenText());
      
      xPathLexer0.leftParen();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      assertEquals("Y", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("2", token6.getTokenText());
      
      xPathLexer0.number();
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      assertEquals("+", token8.getTokenText());
      
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      assertEquals("/", token9.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token10 = xPathLexer0.nextToken();
      assertEquals("b", token10.getTokenText());
      
      Token token11 = xPathLexer0.rightParen();
      assertEquals("b", token11.getTokenText());
      assertEquals(2, token11.getTokenType());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.115735815167681
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rv6!SL<wLMeVW`");
      xPathLexer0.star();
      xPathLexer0.div();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("rv6!SL<wLMeVW`");
      xPathLexer1.minus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.relationalOperator();
      xPathLexer1.not();
      XPathLexer xPathLexer3 = new XPathLexer("rv6!SL<wLMeVW`");
      xPathLexer1.pipe();
      xPathLexer0.nextToken();
      xPathLexer3.div();
      xPathLexer0.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.star();
      xPathLexer0.nextToken();
      xPathLexer4.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer("[ (");
      xPathLexer2.dollar();
      xPathLexer0.at();
      xPathLexer5.rightParen();
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer6.equals();
      xPathLexer6.pipe();
      xPathLexer3.comma();
      xPathLexer6.leftBracket();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token0 = xPathLexer7.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.091606797561907
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z :Ia");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("YY", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("]", token1.getTokenText());
      
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals(">", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals("c", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer(".vF?]dc!");
      xPathLexer2.relationalOperator();
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("<H");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.rightParen();
      Token token6 = xPathLexer4.pipe();
      assertEquals(17, token6.getTokenType());
      
      xPathLexer4.or();
      Token token7 = xPathLexer0.equals();
      assertEquals("1", token7.getTokenText());
      
      Token token8 = xPathLexer3.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer2.star();
      assertEquals(20, token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer(">");
      Token token10 = xPathLexer2.nextToken();
      assertEquals("vF", token10.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token11 = xPathLexer6.dots();
      assertEquals(13, token11.getTokenType());
      
      xPathLexer1.div();
      xPathLexer2.nextToken();
      xPathLexer2.identifier();
      Token token12 = xPathLexer3.nextToken();
      assertEquals("<", token12.getTokenText());
      assertEquals(7, token12.getTokenType());
      
      Token token13 = xPathLexer2.plus();
      assertEquals(5, token13.getTokenType());
      assertEquals("?", token13.getTokenText());
      
      Token token14 = xPathLexer2.rightParen();
      assertEquals(2, token14.getTokenType());
      
      Token token15 = xPathLexer4.equals();
      assertEquals(21, token15.getTokenType());
      
      Token token16 = xPathLexer0.at();
      assertEquals("@", token16.getTokenText());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.377721587158281
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.and();
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLxer");
      xPathLexer0.star();
      Token token1 = xPathLexer0.dollar();
      assertEquals("o", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLxer");
      xPathLexer1.leftParen();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals(".", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLxer");
      xPathLexer2.number();
      xPathLexer2.setXPath("com.werken.saxpath.XPathLxer");
      Token token4 = xPathLexer1.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer2.div();
      Token token5 = xPathLexer0.star();
      assertEquals("w", token5.getTokenText());
      
      Token token6 = xPathLexer2.equals();
      assertEquals(21, token6.getTokenType());
      assertEquals("c", token6.getTokenText());
      
      xPathLexer0.div();
      xPathLexer1.operatorName();
      Token token7 = xPathLexer2.comma();
      assertEquals(32, token7.getTokenType());
      assertEquals("o", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLxer");
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      assertEquals("e", token8.getTokenText());
      
      Token token9 = xPathLexer3.not();
      assertEquals(23, token9.getTokenType());
      assertEquals("c", token9.getTokenText());
      
      Token token10 = xPathLexer2.leftBracket();
      assertEquals("m", token10.getTokenText());
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer3.identifier();
      assertEquals(15, token11.getTokenType());
      assertEquals("om.werken.saxpath.XPathLxer", token11.getTokenText());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.768579357376413
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer1.star();
      xPathLexer0.colon();
      XPathLexer xPathLexer2 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer2.dots();
      xPathLexer2.at();
      xPathLexer0.div();
      XPathLexer xPathLexer3 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer3.pipe();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.equals();
      XPathLexer xPathLexer5 = new XPathLexer("&,q!{|CYj'I");
      xPathLexer2.nextToken();
      xPathLexer3.relationalOperator();
      xPathLexer5.nextToken();
      xPathLexer4.rightParen();
      xPathLexer4.equals();
      xPathLexer4.rightBracket();
      xPathLexer3.identifierOrOperatorName();
      xPathLexer3.star();
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.910652626820733
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("Z{/@jBU");
      Token token1 = xPathLexer1.doubleColon();
      assertEquals("Z{", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("Z{/@jBU");
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer1.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer3.nextToken();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer2.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer(".s-:Zm~pUt)G7 l'o");
      Token token8 = xPathLexer3.doubleColon();
      assertEquals(19, token8.getTokenType());
      assertEquals("{/", token8.getTokenText());
      
      Token token9 = xPathLexer4.number();
      assertEquals(31, token9.getTokenType());
      
      Token token10 = xPathLexer4.pipe();
      assertEquals("s", token10.getTokenText());
      assertEquals(17, token10.getTokenType());
      
      xPathLexer3.relationalOperator();
      Token token11 = xPathLexer4.star();
      assertEquals("-", token11.getTokenText());
      assertEquals(20, token11.getTokenType());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0693874194843014
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.notEquals();
      xPathLexer0.slashes();
      xPathLexer0.and();
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLxer");
      xPathLexer0.div();
      xPathLexer0.dollar();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLxer");
      XPathLexer xPathLexer1 = new XPathLexer("vTJ!Mm]xX31lO:");
      xPathLexer1.leftParen();
      xPathLexer0.minus();
      xPathLexer0.slashes();
      XPathLexer xPathLexer2 = new XPathLexer("vTJ!Mm]xX31lO:");
      xPathLexer2.number();
      xPathLexer2.setXPath("vTJ!Mm]xX31lO:");
      xPathLexer1.number();
      xPathLexer0.colon();
      xPathLexer1.relationalOperator();
      xPathLexer0.star();
      xPathLexer2.equals();
      xPathLexer0.div();
      xPathLexer1.operatorName();
      xPathLexer2.comma();
      xPathLexer1.relationalOperator();
      xPathLexer0.div();
      xPathLexer2.nextToken();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.0087002200146795
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpth.Tokn");
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.colon();
      xPathLexer0.plus();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.doubleColon();
      xPathLexer0.slashes();
      xPathLexer0.or();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpth.Tokn");
      xPathLexer1.leftBracket();
      xPathLexer1.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer1.dots();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.not();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.relationalOperator();
      xPathLexer2.rightParen();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.rightParen();
      Token token1 = xPathLexer0.plus();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.753349994178044
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "AIRW}sW:H'\"xHj/G";
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume((-2001));
      // Undeclared exception!
      try { 
        xPathLexer1.identifier();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.4367168876874614
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpth.Tokn");
      Token token0 = xPathLexer0.colon();
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals("o", token1.getTokenText());
      
      xPathLexer0.colon();
      xPathLexer0.plus();
      Token token2 = xPathLexer0.slashes();
      assertEquals("w", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals("e", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      xPathLexer0.dots();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("ke", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.at();
      assertEquals("n", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpth.Tokn");
      Token token6 = xPathLexer1.leftBracket();
      assertEquals("c", token6.getTokenText());
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer1.dollar();
      assertEquals(26, token7.getTokenType());
      assertEquals("o", token7.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token8 = xPathLexer2.star();
      assertEquals(20, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      XPathLexer xPathLexer4 = new XPathLexer(")");
      Token token9 = xPathLexer4.plus();
      assertEquals(")", token9.getTokenText());
      
      Token token10 = xPathLexer2.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      xPathLexer1.colon();
      Token token11 = xPathLexer1.nextToken();
      assertEquals(".", token11.getTokenText());
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer4.rightParen();
      assertEquals(2, token12.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token13 = xPathLexer1.colon();
      assertEquals("w", token13.getTokenText());
      assertEquals(18, token13.getTokenType());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.9272232089543082
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpth.Tokn");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.colon();
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("m", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("w", token4.getTokenText());
      
      Token token5 = xPathLexer0.dots();
      assertEquals("e", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals("rk", token6.getTokenText());
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.or();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("n.saxpth.Tokn", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.slashes();
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpth.Tokn");
      XPathLexer xPathLexer2 = new XPathLexer("Z` V");
      Token token9 = xPathLexer2.slashes();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("Z` V");
      xPathLexer2.relationalOperator();
      Token token11 = xPathLexer4.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer2.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      Token token13 = xPathLexer5.rightParen();
      assertEquals("Z", token13.getTokenText());
      
      xPathLexer3.equals();
      XPathLexer xPathLexer6 = new XPathLexer("pS$0$Xm!mL\u0006![J`V1");
      Token token14 = xPathLexer5.at();
      assertEquals(16, token14.getTokenType());
      assertEquals("`", token14.getTokenText());
      
      Token token15 = xPathLexer0.leftParen();
      assertEquals(1, token15.getTokenType());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.0399096289457432
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werkZn.saxpth7Tokn");
      Token token0 = xPathLexer0.star();
      assertEquals("c", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals("o", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("m", token2.getTokenText());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(".", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals("werkZn.saxpth7Tokn", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werkZn.saxpth7Tokn");
      Token token6 = xPathLexer1.leftBracket();
      assertEquals(3, token6.getTokenType());
      assertEquals("c", token6.getTokenText());
      
      Token token7 = xPathLexer1.dollar();
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer0.rightBracket();
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer1.dots();
      assertEquals("m.", token10.getTokenText());
      assertEquals(14, token10.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer(".5:PT7*,+:LX");
      Token token11 = xPathLexer1.not();
      assertEquals("w", token11.getTokenText());
      
      Token token12 = xPathLexer2.number();
      assertEquals(31, token12.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token13 = xPathLexer0.literal();
      assertNull(token13);
      
      Token token14 = xPathLexer2.equals();
      assertEquals(21, token14.getTokenType());
      assertEquals(":", token14.getTokenText());
      
      Token token15 = xPathLexer1.pipe();
      assertEquals("e", token15.getTokenText());
      assertEquals(17, token15.getTokenType());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.094351239838574
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z :Ia");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("Y", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.colon();
      Token token1 = xPathLexer0.plus();
      assertEquals("]", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(">", token2.getTokenText());
      
      xPathLexer0.dots();
      xPathLexer0.doubleColon();
      Token token3 = xPathLexer0.slashes();
      assertEquals("@", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.or();
      xPathLexer0.nextToken();
      xPathLexer1.at();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(18, token4.getTokenType());
      assertEquals(":", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.relationalOperator();
      xPathLexer1.div();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("Ia", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.relationalOperator();
      Token token6 = xPathLexer2.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer2.nextToken();
      xPathLexer2.comma();
      XPathLexer xPathLexer4 = new XPathLexer("YY]>cp1@z :Ia");
      Token token7 = xPathLexer4.equals();
      assertEquals(21, token7.getTokenType());
      assertEquals("Y", token7.getTokenText());
      
      Token token8 = xPathLexer2.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1356561801096259
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("yR>");
      XPathLexer xPathLexer1 = new XPathLexer("^*r*8");
      xPathLexer0.doubleColon();
      xPathLexer1.relationalOperator();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("+S_jk]lQ");
      xPathLexer1.rightParen();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.9392159411845236
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z :Ia");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("YY", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(4, token1.getTokenType());
      assertEquals("]", token1.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.div();
      Token token2 = xPathLexer0.slashes();
      assertEquals("c", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.minus();
      xPathLexer1.relationalOperator();
      xPathLexer1.not();
      Token token3 = xPathLexer0.rightParen();
      assertEquals("p", token3.getTokenText());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals("1", token4.getTokenText());
      
      xPathLexer0.setXPath("");
      xPathLexer0.dollar();
      xPathLexer0.leftParen();
      Token token5 = xPathLexer1.minus();
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("fD&i2[=");
      xPathLexer2.div();
      XPathLexer xPathLexer3 = new XPathLexer(":3e!hIBZu:/P]1m|HYR");
      Token token8 = xPathLexer2.plus();
      assertEquals("f", token8.getTokenText());
      assertEquals(5, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer2.nextToken();
      assertEquals("D", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token10 = xPathLexer4.dollar();
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer5.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer2.not();
      assertEquals(23, token12.getTokenType());
      assertEquals("&", token12.getTokenText());
      
      xPathLexer1.rightParen();
      xPathLexer3.or();
      Token token13 = xPathLexer1.equals();
      assertEquals(21, token13.getTokenType());
      
      Token token14 = xPathLexer4.pipe();
      assertEquals(17, token14.getTokenType());
      
      Token token15 = xPathLexer0.comma();
      assertEquals(32, token15.getTokenType());
      
      Token token16 = xPathLexer1.leftBracket();
      assertEquals(3, token16.getTokenType());
      
      Token token17 = xPathLexer2.leftParen();
      assertEquals("i", token17.getTokenText());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.9614694502797265
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpth.Tokn");
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.at();
      xPathLexer0.plus();
      xPathLexer0.leftBracket();
      xPathLexer0.comma();
      xPathLexer0.dots();
      xPathLexer0.doubleColon();
      xPathLexer0.slashes();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpth.Tokn");
      XPathLexer xPathLexer2 = new XPathLexer("Z` V");
      xPathLexer2.slashes();
      xPathLexer2.not();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("D(bCdX,kz&");
      xPathLexer2.dollar();
      xPathLexer2.at();
      xPathLexer2.rightParen();
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer2.equals();
      xPathLexer5.pipe();
      xPathLexer0.comma();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.922098507041603
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      Token token0 = xPathLexer0.plus();
      assertEquals("A", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("I", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals("R", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("W", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.comma();
      assertEquals("}", token4.getTokenText());
      
      xPathLexer0.rightParen();
      Token token5 = xPathLexer0.rightParen();
      assertEquals("W", token5.getTokenText());
      
      xPathLexer0.and();
      Token token6 = xPathLexer0.pipe();
      assertEquals(":", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.div();
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      Token token9 = xPathLexer0.nextToken();
      assertEquals("", token9.getTokenText());
      assertEquals((-1), token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token10 = xPathLexer3.not();
      assertEquals(23, token10.getTokenType());
      
      Token token11 = xPathLexer3.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token12 = xPathLexer1.at();
      assertEquals("A", token12.getTokenText());
      assertEquals(16, token12.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token13 = xPathLexer5.rightParen();
      assertEquals(2, token13.getTokenType());
      
      xPathLexer1.or();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token14 = xPathLexer6.comma();
      assertEquals(32, token14.getTokenType());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.977726733201889
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      xPathLexer0.not();
      xPathLexer0.rightParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer(" .Sy9H");
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer1.relationalOperator();
      xPathLexer0.div();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("8or7)Zh&={tVk!&,u}w");
      xPathLexer1.dollar();
      xPathLexer4.at();
      xPathLexer4.rightParen();
      XPathLexer xPathLexer5 = new XPathLexer("[ (");
      xPathLexer4.equals();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.pipe();
      xPathLexer4.comma();
      xPathLexer3.leftBracket();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token0 = xPathLexer7.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6821282251662026
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("nLZ!pT<T}");
      Token token0 = xPathLexer0.star();
      token0.toString();
      token0.toString();
      xPathLexer0.leftParen();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("K7Yd4JGj");
      xPathLexer2.plus();
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("[ (20) (n)");
      xPathLexer4.star();
      XPathLexer xPathLexer5 = new XPathLexer("nLZ!pT<T}");
      XPathLexer xPathLexer6 = new XPathLexer("[ (");
      XPathLexer xPathLexer7 = new XPathLexer("[ (");
      xPathLexer7.colon();
      xPathLexer2.plus();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer6.relationalOperator();
      xPathLexer8.comma();
      XPathLexer xPathLexer10 = new XPathLexer();
      XPathLexer xPathLexer11 = new XPathLexer();
      xPathLexer3.or();
      XPathLexer xPathLexer12 = new XPathLexer();
      xPathLexer12.doubleColon();
      xPathLexer5.at();
      Token token1 = xPathLexer10.relationalOperator();
      assertNull(token1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.110515237990192
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token0 = xPathLexer0.star();
      assertEquals("r", token0.getTokenText());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("v", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token2 = xPathLexer1.minus();
      assertEquals("r", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.relationalOperator();
      xPathLexer1.not();
      XPathLexer xPathLexer3 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token3 = xPathLexer1.pipe();
      assertEquals("6", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("6", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      xPathLexer3.div();
      xPathLexer0.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer2.star();
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      xPathLexer4.relationalOperator();
      xPathLexer0.div();
      Token token7 = xPathLexer0.nextToken();
      assertNotSame(token7, token6);
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals("!", token8.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("[ (");
      Token token9 = xPathLexer2.dollar();
      assertEquals(26, token9.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token10 = xPathLexer5.nextToken();
      assertEquals("[", token10.getTokenText());
      assertEquals(3, token10.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token11 = xPathLexer4.rightParen();
      assertEquals(2, token11.getTokenType());
      
      Token token12 = xPathLexer0.colon();
      assertEquals("S", token12.getTokenText());
      assertEquals(18, token12.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("4%6bTEv]j@ulL");
      Token token13 = xPathLexer5.at();
      assertEquals(16, token13.getTokenType());
      assertEquals(" ", token13.getTokenText());
      
      Token token14 = xPathLexer7.leftParen();
      assertEquals(1, token14.getTokenType());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9368581289890012
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpth.Tokn");
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.plus();
      xPathLexer0.leftBracket();
      xPathLexer0.comma();
      xPathLexer0.dots();
      xPathLexer0.doubleColon();
      xPathLexer0.slashes();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.comma();
      xPathLexer1.dots();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.relationalOperator();
      xPathLexer2.div();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.at();
      XPathLexer xPathLexer5 = new XPathLexer("z2_SKeq_=@ml");
      xPathLexer1.rightParen();
      XPathLexer xPathLexer6 = new XPathLexer("bX?4j|Tsl=*u");
      xPathLexer1.notEquals();
      xPathLexer2.or();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer2.comma();
      Token token0 = xPathLexer3.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.0495362537722728
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      Token token0 = xPathLexer0.plus();
      assertEquals("A", token0.getTokenText());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("I", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.minus();
      assertEquals("R", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.comma();
      assertEquals("W", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("i]G]3+LEg");
      Token token5 = xPathLexer1.rightParen();
      assertEquals("i", token5.getTokenText());
      
      xPathLexer1.and();
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals("s", token6.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer1.or();
      Token token7 = xPathLexer0.equals();
      assertEquals(":", token7.getTokenText());
      
      Token token8 = xPathLexer1.number();
      assertEquals(30, token8.getTokenType());
      assertEquals("", token8.getTokenText());
      
      Token token9 = xPathLexer0.star();
      assertEquals("H", token9.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("i]G]3+LEg");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token10 = xPathLexer3.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token12 = xPathLexer2.nextToken();
      assertEquals(15, token12.getTokenType());
      assertEquals("i", token12.getTokenText());
      
      Token token13 = xPathLexer2.rightParen();
      assertEquals(2, token13.getTokenType());
      
      Token token14 = xPathLexer3.equals();
      assertEquals(21, token14.getTokenType());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.9065094368867221
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("Gh&Q(^L");
      xPathLexer1.nextToken();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.div();
      XPathLexer xPathLexer3 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.rightParen();
      xPathLexer2.colon();
      XPathLexer xPathLexer6 = new XPathLexer("X!IRntacH");
      Token token0 = xPathLexer2.at();
      Token token1 = xPathLexer5.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.784517805785382
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z)L-9{$wXh");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("Z", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("YY]>cp1@z :Ia");
      xPathLexer1.relationalOperator();
      Token token1 = xPathLexer1.minus();
      assertEquals("Y", token1.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token2 = xPathLexer1.not();
      assertEquals("Y", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      xPathLexer1.rightParen();
      Token token3 = xPathLexer1.nextToken();
      assertEquals(">", token3.getTokenText());
      assertEquals(9, token3.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.number();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("L", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token5 = xPathLexer0.nextToken();
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer1.dots();
      assertEquals(13, token6.getTokenType());
      assertEquals("c", token6.getTokenText());
      
      xPathLexer0.div();
      Token token7 = xPathLexer0.nextToken();
      assertEquals(30, token7.getTokenType());
      assertEquals("9", token7.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer3.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      xPathLexer2.rightParen();
      Token token9 = xPathLexer1.equals();
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer2.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer0.leftBracket();
      assertEquals(3, token11.getTokenType());
      assertEquals("{", token11.getTokenText());
      
      Token token12 = xPathLexer0.rightParen();
      assertEquals("$", token12.getTokenText());
      assertEquals(2, token12.getTokenType());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.8715530722933575
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      assertEquals("A", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("I", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.not();
      assertEquals("R", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.and();
      Token token3 = xPathLexer0.pipe();
      assertEquals("}", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("sW", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.or();
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      assertEquals(":", token5.getTokenText());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("H", token7.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("#~EFdDZN9<m+kxF");
      Token token8 = xPathLexer1.nextToken();
      assertEquals("#~EFdDZN9<m+kxF", token8.getTokenText());
      
      xPathLexer1.relationalOperator();
      xPathLexer0.div();
      xPathLexer1.nextToken();
      xPathLexer1.nextToken();
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      assertEquals("'", token9.getTokenText());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.96413832688385
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("^", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("(", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("j", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals("%", token4.getTokenText());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("ueV4$`h,'GbNm20ga4");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.star();
      assertEquals(20, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("ueV4$`h,'GbNm20ga4");
      XPathLexer xPathLexer4 = new XPathLexer("OMYwyk~nb*;SM{~_v8");
      XPathLexer xPathLexer5 = new XPathLexer("!/lUN*W");
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token6 = xPathLexer6.plus();
      assertEquals(5, token6.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer8 = new XPathLexer();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer4.not();
      Token token7 = xPathLexer5.nextToken();
      assertEquals(23, token7.getTokenType());
      assertEquals("!", token7.getTokenText());
      
      xPathLexer7.relationalOperator();
      Token token8 = xPathLexer2.rightParen();
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer9.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      XPathLexer xPathLexer10 = new XPathLexer();
      xPathLexer10.slashes();
      Token token10 = xPathLexer5.nextToken();
      assertEquals(11, token10.getTokenType());
      
      xPathLexer4.equals();
      Token token11 = xPathLexer5.at();
      assertEquals(16, token11.getTokenType());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.9372390457263944
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z:I");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("YY", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.minus();
      Token token1 = xPathLexer0.relationalOperator();
      assertEquals(9, token1.getTokenType());
      assertEquals(">", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("c", token2.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(30, token4.getTokenType());
      assertEquals("1", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("@", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals("z", token6.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.star();
      assertEquals(20, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("YY]>cp1@z:I");
      XPathLexer xPathLexer4 = new XPathLexer("H|!OMh6);i%");
      XPathLexer xPathLexer5 = new XPathLexer("H|!OMh6);i%");
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token8 = xPathLexer2.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer1.comma();
      xPathLexer4.nextToken();
      XPathLexer xPathLexer8 = new XPathLexer();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer9.or();
      Token token9 = xPathLexer4.equals();
      assertEquals("|", token9.getTokenText());
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer8.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer8.comma();
      assertEquals(32, token11.getTokenType());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.123308936619307
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GyXC!('uZpX/o1Wl=");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.minus();
      xPathLexer0.colon();
      xPathLexer0.whitespace();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dollar();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.comma();
      xPathLexer0.LA(0);
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.8827235785749104
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("r", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("v", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.minus();
      assertEquals("6", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.not();
      assertEquals("!", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token5 = xPathLexer2.plus();
      assertEquals("r", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("rv6!SL<wLMeVW`");
      XPathLexer xPathLexer4 = new XPathLexer("[ (");
      Token token6 = xPathLexer2.dollar();
      assertEquals("v", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer5 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token7 = xPathLexer4.equals();
      assertEquals("[", token7.getTokenText());
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer2.pipe();
      assertEquals(17, token8.getTokenType());
      assertEquals("6", token8.getTokenText());
      
      xPathLexer0.nextToken();
      Token token9 = xPathLexer3.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("rv6", token9.getTokenText());
      
      Token token10 = xPathLexer0.rightParen();
      assertEquals("<", token10.getTokenText());
      
      Token token11 = xPathLexer1.slashes();
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer4.nextToken();
      assertEquals(1, token12.getTokenType());
      assertEquals("(", token12.getTokenText());
      
      Token token13 = xPathLexer4.plus();
      assertEquals(5, token13.getTokenType());
      
      Token token14 = xPathLexer5.rightParen();
      assertEquals("r", token14.getTokenText());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.127718367909115
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u_z=+Annw3DSe4puz72");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.comma();
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.number();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("Sz");
      xPathLexer0.nextToken();
      xPathLexer1.dots();
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer("u_z=+Annw3DSe4puz72");
      xPathLexer2.nextToken();
      xPathLexer1.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer2.plus();
      xPathLexer1.rightParen();
      xPathLexer1.equals();
      xPathLexer1.at();
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.0665158278741393
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer0.div();
      xPathLexer0.equals();
      xPathLexer0.slashes();
      xPathLexer0.notEquals();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("6WCnaN{^ B8#Nd/L");
      xPathLexer1.doubleColon();
      xPathLexer2.nextToken();
      xPathLexer1.dots();
      xPathLexer0.comma();
      xPathLexer1.dots();
      xPathLexer1.star();
      XPathLexer xPathLexer3 = new XPathLexer("T*wqb/xFtK@?\"!1B/");
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer3.nextToken();
      xPathLexer3.div();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token0 = xPathLexer1.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer5.rightParen();
      xPathLexer6.colon();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.at();
      Token token1 = xPathLexer6.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.8250161432049983
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z:I");
      xPathLexer0.doubleColon();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("YY]>cp1@z:I");
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer("YY]>cp1@z:I");
      XPathLexer xPathLexer3 = new XPathLexer("9");
      XPathLexer xPathLexer4 = new XPathLexer("!/lUN*W");
      xPathLexer1.plus();
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer0.plus();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.nextToken();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.dollar();
      xPathLexer0.at();
      xPathLexer1.not();
      xPathLexer3.rightParen();
      xPathLexer0.or();
      xPathLexer2.equals();
      xPathLexer1.pipe();
      xPathLexer5.comma();
      xPathLexer4.leftBracket();
      Token token1 = xPathLexer6.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.4848103583232188
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("m", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("m%^(jR%h$2nb,1SH");
      Token token1 = xPathLexer1.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("m", token1.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token2 = xPathLexer1.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("%", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("%", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.pipe();
      Token token4 = xPathLexer1.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer1.div();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.relationalOperator();
      xPathLexer2.div();
      Token token5 = xPathLexer2.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer0.at();
      assertEquals("^", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token7 = xPathLexer4.rightParen();
      assertEquals(2, token7.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("#A'3H}O4T^kA{H");
      Token token8 = xPathLexer6.notEquals();
      assertEquals("#A", token8.getTokenText());
      assertEquals(22, token8.getTokenType());
      
      xPathLexer3.or();
      Token token9 = xPathLexer6.comma();
      assertEquals("'", token9.getTokenText());
      assertEquals(32, token9.getTokenType());
      
      xPathLexer5.relationalOperator();
      Token token10 = xPathLexer4.pipe();
      assertEquals(17, token10.getTokenType());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7844796274459007
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      Token token0 = xPathLexer0.plus();
      assertEquals("A", token0.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("W", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("sW", token4.getTokenText());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(":", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("\"", token7.getTokenText());
      
      xPathLexer3.relationalOperator();
      xPathLexer2.div();
      Token token8 = xPathLexer1.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("AIRW", token8.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("X#");
      Token token9 = xPathLexer0.rightParen();
      assertEquals("", token9.getTokenText());
      assertEquals(2, token9.getTokenType());
      
      Token token10 = xPathLexer1.equals();
      assertEquals("}", token10.getTokenText());
      assertEquals(21, token10.getTokenType());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.6198274631255472
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume((-3302));
      xPathLexer0.leftBracket();
      xPathLexer0.colon();
      xPathLexer0.getPreviousToken();
      xPathLexer0.pipe();
      xPathLexer0.leftParen();
      xPathLexer0.minus();
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.9257882034542175
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J3:p-)g6z8 T-o");
      Token token0 = xPathLexer0.doubleColon();
      String string0 = token0.toString();
      assertEquals("[ (19) (J3)", string0);
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(":", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      token2.toString();
      String string1 = token2.toString();
      assertEquals("[ (15) (p-)", string1);
      
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.not();
      assertEquals("g", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.pipe();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("6", token4.getTokenText());
      
      xPathLexer1.div();
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer("J3:p-)g6z8 T-o");
      xPathLexer0.equals();
      Token token5 = xPathLexer1.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer2.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("J", token6.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (15) (p-)");
      XPathLexer xPathLexer4 = new XPathLexer("? g");
      Token token7 = xPathLexer1.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      xPathLexer4.relationalOperator();
      XPathLexer xPathLexer5 = new XPathLexer(")");
      Token token9 = xPathLexer5.nextToken();
      assertEquals(")", token9.getTokenText());
      assertEquals(2, token9.getTokenType());
      
      xPathLexer5.rightParen();
      Token token10 = xPathLexer0.equals();
      assertEquals("8", token10.getTokenText());
      assertEquals(21, token10.getTokenType());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.109482698087418
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer0.div();
      Token token0 = xPathLexer0.equals();
      assertEquals("A", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("I", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("RW", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("}", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.pipe();
      assertEquals(":", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("6WCnaN{^ B8#Nd/L");
      Token token7 = xPathLexer2.leftBracket();
      assertEquals("6", token7.getTokenText());
      
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer2.nextToken();
      assertEquals("WCnaN", token9.getTokenText());
      
      xPathLexer1.dots();
      Token token10 = xPathLexer1.dots();
      assertEquals(13, token10.getTokenType());
      
      xPathLexer1.star();
      XPathLexer xPathLexer3 = new XPathLexer("T*wqb/xFtK@?\"!1B/");
      XPathLexer xPathLexer4 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer3.nextToken();
      xPathLexer2.relationalOperator();
      xPathLexer1.div();
      Token token11 = xPathLexer3.nextToken();
      assertEquals("*", token11.getTokenText());
      assertEquals(20, token11.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token12 = xPathLexer3.nextToken();
      assertEquals("wqb", token12.getTokenText());
      assertEquals(15, token12.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token13 = xPathLexer4.rightParen();
      assertEquals(2, token13.getTokenType());
      assertEquals("A", token13.getTokenText());
      
      Token token14 = xPathLexer5.colon();
      assertEquals(18, token14.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token15 = xPathLexer0.at();
      assertEquals(16, token15.getTokenType());
      assertEquals("H", token15.getTokenText());
      
      Token token16 = xPathLexer0.leftParen();
      assertEquals(1, token16.getTokenType());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.0084147222970863
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.and();
      xPathLexer0.and();
      xPathLexer0.currentPosition();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("%", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("(", token2.getTokenText());
      
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("%", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      assertEquals("$", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals("2", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("\"8Arb+[");
      xPathLexer2.div();
      Token token8 = xPathLexer2.pipe();
      assertEquals("\"", token8.getTokenText());
      
      Token token9 = xPathLexer2.equals();
      assertEquals(21, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("\"8Arb+[");
      XPathLexer xPathLexer4 = new XPathLexer("\"8Arb+[");
      Token token10 = xPathLexer2.nextToken();
      assertEquals(15, token10.getTokenType());
      assertEquals("Arb", token10.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.relationalOperator();
      xPathLexer2.div();
      Token token11 = xPathLexer1.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      Token token12 = xPathLexer2.whitespace();
      assertEquals((-2), token12.getTokenType());
      assertEquals("", token12.getTokenText());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.113140829482767
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z :Ia");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("YY", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals("]", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.relationalOperator();
      assertEquals(9, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals("c", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals("p", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("@", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(" :", token8.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("YY]>cp1@z :Ia");
      xPathLexer1.or();
      xPathLexer1.nextToken();
      xPathLexer1.at();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer3.div();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.relationalOperator();
      Token token9 = xPathLexer5.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals("Ia", token10.getTokenText());
      
      Token token11 = xPathLexer2.comma();
      assertEquals("Y", token11.getTokenText());
      assertEquals(32, token11.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("YY]>cp1@z :Ia");
      Token token12 = xPathLexer3.equals();
      assertEquals(21, token12.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.at();
      xPathLexer5.plus();
      Token token13 = xPathLexer6.slashes();
      assertEquals("Y", token13.getTokenText());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.058691368013341
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("nLZ!pT<T}");
      xPathLexer0.or();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("nLZ!pT<T}");
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = new XPathLexer("nLZ!pT<T}");
      xPathLexer2.plus();
      xPathLexer1.comma();
      xPathLexer1.dots();
      xPathLexer1.doubleColon();
      xPathLexer0.slashes();
      xPathLexer1.or();
      xPathLexer1.leftParen();
      xPathLexer1.dots();
      xPathLexer0.at();
      XPathLexer xPathLexer3 = new XPathLexer("nLZ!pT<T}");
      xPathLexer3.leftBracket();
      XPathLexer xPathLexer4 = new XPathLexer("jf]ZcQ,g");
      xPathLexer1.at();
      xPathLexer0.minus();
      xPathLexer4.relationalOperator();
      xPathLexer1.number();
      xPathLexer1.leftBracket();
      xPathLexer4.at();
      xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        xPathLexer2.LA((-1822));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.5841337221391205
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      xPathLexer0.doubleColon();
      xPathLexer0.slashes();
      xPathLexer0.plus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightParen();
      xPathLexer0.plus();
      xPathLexer0.setXPath("*r*BWoij0a1 y}{tnrd");
      xPathLexer0.identifier();
      xPathLexer0.notEquals();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.rightParen();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.9888073733891298
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z :Ia");
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("]", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(">", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("c", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("p", token4.getTokenText());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.pipe();
      assertEquals("@", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("yR>");
      xPathLexer0.nextToken();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      xPathLexer2.relationalOperator();
      xPathLexer2.div();
      xPathLexer0.nextToken();
      Token token7 = xPathLexer1.nextToken();
      assertEquals("yR", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightParen();
      assertEquals(2, token8.getTokenType());
      assertEquals("z", token8.getTokenText());
      
      xPathLexer1.or();
      Token token9 = xPathLexer2.doubleColon();
      assertEquals(19, token9.getTokenType());
      assertEquals("[ ", token9.getTokenText());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.7145811259386714
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z:I");
      xPathLexer0.doubleColon();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.star();
      XPathLexer xPathLexer3 = new XPathLexer("YY]>cp1@z:I");
      XPathLexer xPathLexer4 = new XPathLexer("H|!OMh6);i%");
      XPathLexer xPathLexer5 = new XPathLexer("H|!OMh6);i%");
      xPathLexer4.plus();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer1.comma();
      xPathLexer4.nextToken();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.or();
      xPathLexer0.doubleColon();
      xPathLexer8.at();
      xPathLexer3.relationalOperator();
      xPathLexer6.pipe();
      Token token0 = xPathLexer4.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.179308811161029
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rv6!SL<wLMeVW`");
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.minus();
      assertEquals("v", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("6", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token3 = xPathLexer1.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("r", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer("egy|u/(");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer4.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer2.or();
      XPathLexer xPathLexer5 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token5 = xPathLexer1.equals();
      assertEquals("v", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer4.pipe();
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("L", token7.getTokenText());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals("6", token8.getTokenText());
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer3.rightParen();
      assertEquals(2, token9.getTokenType());
      assertEquals("e", token9.getTokenText());
      
      Token token10 = xPathLexer0.slashes();
      assertEquals("<", token10.getTokenText());
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals("wLMeVW`", token11.getTokenText());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.195804724219253
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.number();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.slashes();
      xPathLexer0.number();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.star();
      xPathLexer0.equals();
      xPathLexer0.getXPath();
      xPathLexer0.at();
      xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.pipe();
      xPathLexer0.isIdentifierChar(',');
      xPathLexer0.getPreviousToken();
      xPathLexer0.doubleColon();
      xPathLexer0.literal();
      xPathLexer0.consume(0);
      xPathLexer0.or();
      xPathLexer0.star();
      xPathLexer0.consume((-895));
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.9482368606092013
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer0.div();
      Token token0 = xPathLexer0.equals();
      assertEquals("A", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("I", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("RW", token2.getTokenText());
      
      Token token3 = xPathLexer0.minus();
      assertEquals("}", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.comma();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.div();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals(":", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("6WCnaN{^ B8#Nd/L");
      Token token6 = xPathLexer2.leftBracket();
      assertEquals("6", token6.getTokenText());
      
      Token token7 = xPathLexer1.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      xPathLexer2.nextToken();
      xPathLexer1.dots();
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      assertEquals("H", token8.getTokenText());
      
      Token token9 = xPathLexer1.dots();
      assertEquals(13, token9.getTokenType());
      
      xPathLexer1.star();
      XPathLexer xPathLexer3 = new XPathLexer("T*wqb/xFtK@?\"!1B/");
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token10 = xPathLexer3.nextToken();
      assertEquals(15, token10.getTokenType());
      
      xPathLexer4.relationalOperator();
      xPathLexer3.div();
      Token token11 = xPathLexer3.nextToken();
      assertEquals(20, token11.getTokenType());
      assertEquals("*", token11.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token12 = xPathLexer1.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer5.rightParen();
      Token token13 = xPathLexer6.colon();
      assertEquals(18, token13.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token14 = xPathLexer7.at();
      assertEquals(16, token14.getTokenType());
      
      xPathLexer6.leftParen();
      Token token15 = xPathLexer5.plus();
      assertEquals(5, token15.getTokenType());
      
      Token token16 = xPathLexer5.leftBracket();
      assertEquals(3, token16.getTokenType());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.800316297760156
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      assertEquals("m", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.not();
      assertEquals("^", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals("j", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("R", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals("%", token5.getTokenText());
      
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      assertEquals("h", token6.getTokenText());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      assertEquals("2", token8.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("m%^(jR%h$2nb,1SH");
      XPathLexer xPathLexer2 = new XPathLexer("m%^(jR%h$2nb,1SH");
      Token token9 = xPathLexer1.plus();
      assertEquals("m", token9.getTokenText());
      assertEquals(5, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token10 = xPathLexer2.nextToken();
      assertEquals(15, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token11 = xPathLexer0.doubleColon();
      assertEquals(19, token11.getTokenType());
      assertEquals("nb", token11.getTokenText());
      
      Token token12 = xPathLexer2.nextToken();
      assertEquals("%^(jR%h$2nb,1SH", token12.getTokenText());
      
      Token token13 = xPathLexer0.comma();
      assertEquals(",", token13.getTokenText());
      assertEquals(32, token13.getTokenType());
      
      Token token14 = xPathLexer0.equals();
      assertEquals("1", token14.getTokenText());
      assertEquals(21, token14.getTokenType());
      
      Token token15 = xPathLexer3.at();
      assertEquals(16, token15.getTokenType());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.7796324375965757
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z :Ia");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("YY", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(">", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals("cp1", token2.getTokenText());
      
      xPathLexer0.notEquals();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals(":I", token4.getTokenText());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
      
      xPathLexer0.consume((-1064));
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals((-1047), int0);
      
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token11 = xPathLexer1.dollar();
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer1.colon();
      assertEquals(18, token12.getTokenType());
      
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('M');
      assertTrue(boolean0);
      
      Token token13 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token13);
      assertEquals(15, token13.getTokenType());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.493969173236996
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.plus();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token4);
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      xPathLexer0.setXPath("*r*BWoij0a1 y}{tnrd");
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.div();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      assertEquals("*", token8.getTokenText());
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      assertEquals("r*", token9.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.getXPath();
      int int0 = xPathLexer1.endPosition();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.9728726327841337
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mwj?R=:U");
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer0.notEquals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.isIdentifierStartChar('K');
      xPathLexer0.consume((-4793));
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.1437284562533163
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.doubleColon();
      xPathLexer0.rightParen();
      xPathLexer0.mod();
      xPathLexer0.at();
      xPathLexer0.leftBracket();
      xPathLexer0.star();
      xPathLexer0.operatorName();
      xPathLexer0.doubleColon();
      xPathLexer0.colon();
      int int0 = (-369);
      xPathLexer0.identifier();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-369));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "fwB:ol5Qjm";
      XPathLexer xPathLexer0 = new XPathLexer("fwB:ol5Qjm");
      xPathLexer0.colon();
      xPathLexer0.not();
      xPathLexer0.doubleColon();
      xPathLexer0.consume((-897));
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.7380474990423143
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer0.div();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.at();
      XPathLexer xPathLexer3 = new XPathLexer("+s}");
      xPathLexer3.and();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer1.notEquals();
      xPathLexer2.or();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token0 = xPathLexer3.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.284520145529798
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.comma();
      xPathLexer0.literal();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.slashes();
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.getXPath();
      xPathLexer0.star();
      xPathLexer0.consume((-1173));
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.3357209592984898
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.dots();
      xPathLexer0.literal();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.slashes();
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.identifier();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.getXPath();
      xPathLexer0.star();
      xPathLexer0.consume((-1173));
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.197194202968335
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      assertEquals("m", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("^", token2.getTokenText());
      
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("jR", token3.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.or();
      xPathLexer0.equals();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals("$", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("m%^(jR%h$2nb,1SH");
      Token token6 = xPathLexer0.nextToken();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.dots();
      assertEquals("n", token7.getTokenText());
      assertEquals(13, token7.getTokenType());
      
      xPathLexer1.div();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token8 = xPathLexer0.plus();
      assertEquals("b", token8.getTokenText());
      assertEquals(5, token8.getTokenType());
      
      xPathLexer0.rightParen();
      Token token9 = xPathLexer1.equals();
      assertEquals("m", token9.getTokenText());
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer1.at();
      assertEquals("%", token10.getTokenText());
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer0.rightParen();
      assertEquals("1", token11.getTokenText());
      assertEquals(2, token11.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("]EXRO|7&9W4Qv;3");
      Token token12 = xPathLexer2.nextToken();
      assertEquals("]", token12.getTokenText());
      assertEquals(4, token12.getTokenType());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.788889642167893
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.div();
      xPathLexer0.div();
      xPathLexer0.notEquals();
      xPathLexer0.number();
      xPathLexer0.rightParen();
      xPathLexer0.dots();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.consume((-608));
      xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        xPathLexer0.dots();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.251417559259221
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      xPathLexer2.plus();
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpth.Tokn");
      xPathLexer1.dollar();
      xPathLexer3.or();
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.7380587599231405
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("A", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("I", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      Token token2 = xPathLexer1.star();
      assertEquals("A", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("R", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      Token token4 = xPathLexer2.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("A", token4.getTokenText());
      
      Token token5 = xPathLexer2.at();
      assertEquals("I", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer3 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      Token token6 = xPathLexer3.pipe();
      assertEquals(17, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer4.equals();
      assertEquals(21, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("&,q!{|CYj'I");
      Token token8 = xPathLexer2.nextToken();
      assertEquals("RW", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      xPathLexer3.relationalOperator();
      XPathLexer xPathLexer6 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      Token token9 = xPathLexer6.plus();
      assertEquals(5, token9.getTokenType());
      assertEquals("A", token9.getTokenText());
      
      xPathLexer2.nextToken();
      Token token10 = xPathLexer2.getPreviousToken();
      assertEquals("}sW:H'\"xHj/G", token10.getTokenText());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.2856855806291607
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z :Ia");
      xPathLexer0.doubleColon();
      xPathLexer0.whitespace();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.rightParen();
      xPathLexer0.doubleColon();
      xPathLexer0.and();
      xPathLexer0.isIdentifierStartChar('5');
      xPathLexer0.identifier();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer1.equals();
      xPathLexer1.equals();
      xPathLexer1.plus();
      xPathLexer1.dots();
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer1.dots();
      xPathLexer0.mod();
      xPathLexer1.literal();
      xPathLexer0.colon();
      Token token0 = xPathLexer1.colon();
      xPathLexer1.notEquals();
      xPathLexer0.comma();
      Token token1 = xPathLexer0.notEquals();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      char char0 = xPathLexer0.LA(1);
      assertEquals('[', char0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.0991354060674103
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lpUZOw'OW");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("l", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      Token token2 = xPathLexer0.rightParen();
      assertEquals("Z", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("Ow", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.isIdentifierStartChar('k');
      xPathLexer0.identifier();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("'", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("OW", token5.getTokenText());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      xPathLexer0.equals();
      xPathLexer0.equals();
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.or();
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.literal();
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer0.not();
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer0.rightParen();
      assertEquals(2, token12.getTokenType());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.393596401674919
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rv6!SL<wLMeVW`");
      xPathLexer0.consume(0);
      xPathLexer0.identifier();
      xPathLexer0.pipe();
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("m.eD8-9E+p,y$[vu4UV");
      xPathLexer0.dollar();
      xPathLexer0.leftParen();
      xPathLexer0.minus();
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      xPathLexer0.number();
      xPathLexer0.setXPath("m.eD8-9E+p,y$[vu4UV");
      xPathLexer0.relationalOperator();
      xPathLexer0.slashes();
      xPathLexer0.at();
      xPathLexer0.minus();
      xPathLexer0.getXPath();
      xPathLexer0.at();
      xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.pipe();
      xPathLexer0.isIdentifierChar(',');
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.literal();
      xPathLexer0.consume(0);
      xPathLexer0.or();
      xPathLexer0.star();
      xPathLexer0.consume(0);
      Token token1 = xPathLexer0.and();
      assertNull(token1);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.9184382759819496
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8pTso7s'<OfV{}Qj[s");
      XPathLexer xPathLexer1 = new XPathLexer("!");
      xPathLexer1.relationalOperator();
      xPathLexer1.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer1.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.rightParen();
      xPathLexer0.pipe();
      xPathLexer1.nextToken();
      xPathLexer0.div();
      xPathLexer1.equals();
      xPathLexer1.number();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer("rv6!SL<wLMeVW`");
      xPathLexer0.nextToken();
      xPathLexer2.relationalOperator();
      xPathLexer0.div();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("8pTso7s'<OfV{}Qj[s");
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer1.doubleColon();
      xPathLexer0.at();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.9247418386024826
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z :Ia");
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer0.colon();
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.div();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer("yR>");
      xPathLexer0.nextToken();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.9681053792742471
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z :Ia");
      xPathLexer0.doubleColon();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.rightParen();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.star();
      XPathLexer xPathLexer3 = new XPathLexer("YY]>cp1@z :Ia");
      XPathLexer xPathLexer4 = new XPathLexer("H|!OMh6);i%");
      XPathLexer xPathLexer5 = new XPathLexer("H|!OMh6);i%");
      xPathLexer4.plus();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer1.comma();
      xPathLexer4.nextToken();
      XPathLexer xPathLexer8 = new XPathLexer();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer9.or();
      xPathLexer0.doubleColon();
      xPathLexer9.at();
      Token token0 = xPathLexer3.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.6975278936386582
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z :Ia");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("YY", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("]", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.div();
      Token token2 = xPathLexer0.slashes();
      assertEquals("c", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("p", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.minus();
      assertEquals(6, token4.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer1.not();
      Token token5 = xPathLexer0.rightParen();
      assertEquals("1", token5.getTokenText());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals("@", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      xPathLexer0.setXPath("");
      xPathLexer0.dollar();
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      
      Token token8 = xPathLexer1.not();
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("fD&i2[=");
      xPathLexer2.div();
      XPathLexer xPathLexer3 = new XPathLexer(":3e!hIBZu:/P]1m|HYR");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token11 = xPathLexer4.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      Token token12 = xPathLexer2.dots();
      assertEquals("f", token12.getTokenText());
      assertEquals(13, token12.getTokenType());
      
      xPathLexer3.div();
      xPathLexer4.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer4.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token13 = xPathLexer5.plus();
      assertEquals(5, token13.getTokenType());
      
      Token token14 = xPathLexer1.rightParen();
      assertEquals(2, token14.getTokenType());
      
      xPathLexer1.equals();
      Token token15 = xPathLexer2.at();
      assertEquals("D", token15.getTokenText());
      assertEquals(16, token15.getTokenType());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.201553867616619
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("m", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("%", token1.getTokenText());
      
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("(", token2.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.number();
      Token token3 = xPathLexer0.star();
      assertEquals("%", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("$", token4.getTokenText());
      
      xPathLexer1.div();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("2", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer1.nextToken();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer1.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer1.rightParen();
      assertEquals("^", token8.getTokenText());
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer0.equals();
      assertEquals("n", token9.getTokenText());
      
      Token token10 = xPathLexer1.at();
      assertEquals(16, token10.getTokenType());
      assertEquals("(", token10.getTokenText());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.95694118579382
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpth.Tokn");
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.comma();
      assertEquals(".", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("w", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("er", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals("k", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("en.saxpth.Tokn", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.at();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.leftBracket();
      xPathLexer0.number();
      Token token7 = xPathLexer1.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer1.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      xPathLexer1.dots();
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token9 = xPathLexer2.number();
      assertEquals(30, token9.getTokenType());
      
      xPathLexer0.pipe();
      xPathLexer1.leftBracket();
      Token token10 = xPathLexer2.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer2.pipe();
      assertEquals(17, token11.getTokenType());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.126509696303763
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer0.div();
      xPathLexer0.equals();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.notEquals();
      assertEquals("RW", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("s", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.pipe();
      assertEquals(":", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("6WCnaN{^ B8#Nd/L");
      Token token4 = xPathLexer2.leftBracket();
      assertEquals("6", token4.getTokenText());
      
      xPathLexer1.doubleColon();
      Token token5 = xPathLexer2.nextToken();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer1.dots();
      assertEquals(13, token6.getTokenType());
      
      xPathLexer1.leftParen();
      xPathLexer0.minus();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("", token7.getTokenText());
      
      xPathLexer2.slashes();
      xPathLexer2.operatorName();
      Token token8 = xPathLexer2.minus();
      assertEquals(6, token8.getTokenType());
      assertEquals("^", token8.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("6WCnaN{^ B8#Nd/L");
      xPathLexer2.doubleColon();
      xPathLexer2.doubleColon();
      Token token9 = xPathLexer3.at();
      assertEquals(16, token9.getTokenType());
      assertEquals("6", token9.getTokenText());
      
      Token token10 = xPathLexer3.doubleColon();
      assertEquals(19, token10.getTokenType());
      assertEquals("WC", token10.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer1.rightParen();
      Token token11 = xPathLexer2.equals();
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer2.dollar();
      assertEquals("d", token12.getTokenText());
      assertEquals(26, token12.getTokenType());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.1139396122555687
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("A", token0.getTokenText());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.slashes();
      assertEquals("I", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.comma();
      xPathLexer0.rightParen();
      xPathLexer0.and();
      Token token2 = xPathLexer0.pipe();
      assertEquals("}", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("sW", token3.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.or();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(":", token4.getTokenText());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.whitespace();
      assertEquals("", token8.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer1.doubleColon();
      xPathLexer0.doubleColon();
      Token token9 = xPathLexer0.at();
      assertEquals("H", token9.getTokenText());
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.doubleColon();
      assertEquals("j/", token10.getTokenText());
      assertEquals(19, token10.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      xPathLexer1.div();
      XPathLexer xPathLexer2 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      Token token11 = xPathLexer1.rightBracket();
      assertEquals(4, token11.getTokenType());
      assertEquals("R", token11.getTokenText());
      
      Token token12 = xPathLexer2.not();
      assertEquals(23, token12.getTokenType());
      assertEquals("A", token12.getTokenText());
      
      Token token13 = xPathLexer1.rightParen();
      assertEquals(2, token13.getTokenType());
      
      Token token14 = xPathLexer1.colon();
      assertEquals(18, token14.getTokenType());
      
      Token token15 = xPathLexer2.comma();
      assertEquals(32, token15.getTokenType());
      assertEquals("I", token15.getTokenText());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.0150723900887506
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpth.Tokn");
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.colon();
      xPathLexer0.plus();
      xPathLexer0.comma();
      xPathLexer0.dots();
      xPathLexer0.doubleColon();
      xPathLexer0.slashes();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.leftBracket();
      xPathLexer0.rightBracket();
      xPathLexer1.dots();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.equals();
      int int0 = xPathLexer1.endPosition();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.020245463046953
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.minus();
      assertEquals("I", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("R", token2.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.and();
      Token token3 = xPathLexer0.pipe();
      assertEquals("}", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.or();
      Token token5 = xPathLexer0.equals();
      assertEquals(":", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      xPathLexer0.number();
      Token token6 = xPathLexer0.rightParen();
      assertEquals("H", token6.getTokenText());
      
      Token token7 = xPathLexer0.at();
      assertEquals("'", token7.getTokenText());
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      assertEquals("\"", token8.getTokenText());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      assertEquals("", token9.getTokenText());
      
      Token token10 = xPathLexer0.dollar();
      assertEquals("x", token10.getTokenText());
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer0.number();
      assertEquals("", token11.getTokenText());
      assertEquals(30, token11.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.currentPosition();
      Token token12 = xPathLexer0.slashes();
      assertEquals(12, token12.getTokenType());
      assertEquals("j/", token12.getTokenText());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.769302344855659
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("nLZ!pT<T}");
      xPathLexer0.div();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("n", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("L", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("Z!", token2.getTokenText());
      
      Token token3 = xPathLexer0.minus();
      assertEquals("p", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.comma();
      assertEquals("T", token4.getTokenText());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("<", token5.getTokenText());
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.pipe();
      assertEquals("T", token6.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("6WCnaN{^ B8#Nd/L");
      xPathLexer1.leftBracket();
      xPathLexer0.doubleColon();
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer3.dots();
      assertEquals(13, token8.getTokenType());
      
      xPathLexer3.comma();
      xPathLexer1.literal();
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer3.pipe();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token9 = xPathLexer5.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer2.colon();
      assertEquals(18, token10.getTokenType());
      assertEquals("6", token10.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("com.werken.saxpath.Token");
      Token token11 = xPathLexer0.pipe();
      assertEquals(17, token11.getTokenType());
      
      xPathLexer0.dollar();
      Token token12 = xPathLexer0.star();
      assertEquals(20, token12.getTokenType());
      
      Token token13 = xPathLexer6.leftParen();
      assertEquals(1, token13.getTokenType());
      
      Token token14 = xPathLexer0.dollar();
      assertEquals(26, token14.getTokenType());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.760200490007981
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.whitespace();
      xPathLexer0.slashes();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.identifier();
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.notEquals();
      xPathLexer0.getXPath();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.03312182821681
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rv6!SL<wLMeVW`");
      xPathLexer0.consume(0);
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals("!", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      xPathLexer0.consume();
      xPathLexer0.consume();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.leftParen();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("rv6!SL<wLMeVW`");
      xPathLexer1.and();
      xPathLexer1.equals();
      xPathLexer1.number();
      Token token6 = xPathLexer1.star();
      assertEquals("v", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("X1M%#ri");
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer2.doubleColon();
      assertEquals("X1", token8.getTokenText());
      
      xPathLexer3.at();
      xPathLexer2.doubleColon();
      XPathLexer xPathLexer4 = new XPathLexer("f5uJ<oCKi[mE");
      xPathLexer4.consume();
      xPathLexer0.hasMoreChars();
      xPathLexer3.div();
      Token token9 = xPathLexer4.nextToken();
      assertEquals(30, token9.getTokenType());
      
      Token token10 = xPathLexer2.rightParen();
      assertEquals("#", token10.getTokenText());
      assertEquals(2, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("MEA8wm=7");
      Token token11 = xPathLexer3.star();
      assertEquals(20, token11.getTokenType());
      
      Token token12 = xPathLexer3.equals();
      assertEquals(21, token12.getTokenType());
      
      Token token13 = xPathLexer4.rightBracket();
      assertEquals("u", token13.getTokenText());
      assertEquals(4, token13.getTokenType());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.0578547477084594
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.colon();
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.comma();
      xPathLexer0.dots();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftBracket();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("p*a");
      Token token6 = xPathLexer2.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("p", token6.getTokenText());
      
      xPathLexer1.dots();
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer1.colon();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token9 = xPathLexer3.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer2.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer0.colon();
      assertEquals(18, token11.getTokenType());
      
      xPathLexer2.endPosition();
      Token token12 = xPathLexer2.not();
      assertEquals("a", token12.getTokenText());
      assertEquals(23, token12.getTokenType());
      
      Token token13 = xPathLexer3.equals();
      assertEquals(21, token13.getTokenType());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.7162003972006792
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("A", token0.getTokenText());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("I", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.comma();
      Token token3 = xPathLexer0.not();
      assertEquals("}", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.pipe();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(":", token5.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.or();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals("H", token6.getTokenText());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals("'\"", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
      
      xPathLexer0.dots();
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      assertEquals("x", token8.getTokenText());
      
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      assertEquals("H", token9.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer(")R@Y]");
      XPathLexer xPathLexer2 = new XPathLexer("C~r5VvkC?");
      xPathLexer2.consume(285);
      Token token10 = xPathLexer2.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer2.literal();
      assertNull(token11);
      
      xPathLexer1.colon();
      Token token12 = xPathLexer1.pipe();
      assertEquals("R", token12.getTokenText());
      assertEquals(17, token12.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("C~r5VvkC?");
      Token token13 = xPathLexer1.leftBracket();
      assertEquals("@", token13.getTokenText());
      assertEquals(3, token13.getTokenType());
      
      Token token14 = xPathLexer0.colon();
      assertEquals(18, token14.getTokenType());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.9040510108296382
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer0.div();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("A", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("I", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("}", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.not();
      assertEquals("s", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.div();
      Token token5 = xPathLexer0.pipe();
      assertEquals("W", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer2.leftBracket();
      Token token6 = xPathLexer1.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer2.nextToken();
      xPathLexer1.dots();
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      assertEquals(":", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      XPathLexer xPathLexer4 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      Token token8 = xPathLexer0.nextToken();
      assertEquals("H", token8.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer0.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer(") (");
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token10 = xPathLexer4.leftBracket();
      assertEquals("A", token10.getTokenText());
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer5.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer2.identifier();
      assertEquals(15, token12.getTokenType());
      
      Token token13 = xPathLexer1.pipe();
      assertEquals(17, token13.getTokenType());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.8506183486216838
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token0 = xPathLexer0.star();
      assertEquals("r", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.consume(0);
      Token token1 = xPathLexer0.identifier();
      assertEquals("v6", token1.getTokenText());
      
      xPathLexer0.pipe();
      Token token2 = new Token(0, "rv6!SL<wLMeVW`", 0, 0);
      xPathLexer0.consume();
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("L", token3.getTokenText());
      
      xPathLexer0.slashes();
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      assertEquals("L", token5.getTokenText());
      
      Token token6 = xPathLexer0.minus();
      assertEquals("M", token6.getTokenText());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      assertEquals("e", token7.getTokenText());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      assertEquals("VW", token8.getTokenText());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals("`", token9.getTokenText());
      
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer0.comma();
      assertEquals(32, token11.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      Token token12 = xPathLexer0.equals();
      assertEquals(21, token12.getTokenType());
      
      Token token13 = xPathLexer1.literal();
      assertNull(token13);
      
      xPathLexer0.colon();
      xPathLexer0.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("rv6!SL<wLMeVW`");
      xPathLexer1.leftBracket();
      Token token14 = xPathLexer1.colon();
      assertEquals(18, token14.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("HUu_w");
      Token token15 = xPathLexer0.pipe();
      assertEquals(17, token15.getTokenType());
      
      Token token16 = xPathLexer3.leftBracket();
      assertEquals("", token16.getTokenText());
      assertEquals(3, token16.getTokenType());
      
      Token token17 = xPathLexer0.identifier();
      assertEquals(15, token17.getTokenType());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.0088076720563417
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AIRW}sW:H'\"xHj/G");
      xPathLexer0.div();
      Token token0 = xPathLexer0.equals();
      assertEquals("A", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("I", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.comma();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("W", token4.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("6WCnaN{^ B8#Nd/L");
      Token token5 = xPathLexer2.leftBracket();
      assertEquals("6", token5.getTokenText());
      
      Token token6 = xPathLexer1.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer2.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("WCnaN", token7.getTokenText());
      
      xPathLexer1.dots();
      Token token8 = xPathLexer0.comma();
      assertEquals("H", token8.getTokenText());
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer1.dots();
      assertEquals(13, token9.getTokenType());
      
      Token token10 = xPathLexer2.literal();
      assertNull(token10);
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.pipe();
      Token token11 = xPathLexer3.leftBracket();
      assertEquals(3, token11.getTokenType());
      
      Token token12 = xPathLexer0.colon();
      assertEquals(18, token12.getTokenType());
      assertEquals("'", token12.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("_t8;7fhmt1r@d(eV");
      Token token13 = xPathLexer4.pipe();
      assertEquals("_", token13.getTokenText());
      assertEquals(17, token13.getTokenType());
      
      Token token14 = xPathLexer3.dollar();
      assertEquals(26, token14.getTokenType());
      
      Token token15 = xPathLexer2.star();
      assertEquals(20, token15.getTokenType());
      
      Token token16 = xPathLexer0.leftParen();
      assertEquals("\"", token16.getTokenText());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.032343996128673
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.8229243735463707
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rv6!SL<wLMeVW`");
      xPathLexer0.star();
      Token token0 = xPathLexer0.slashes();
      assertEquals("v", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.minus();
      assertEquals("6", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("L", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(7, token3.getTokenType());
      assertEquals("<", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("w", token4.getTokenText());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token6 = xPathLexer1.star();
      assertEquals("r", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("rv6!SL<wLMeVW`");
      XPathLexer xPathLexer4 = new XPathLexer("BQV|]Y");
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.plus();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token7 = xPathLexer1.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("v6", token7.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer7.not();
      Token token8 = xPathLexer1.nextToken();
      assertEquals("!", token8.getTokenText());
      assertEquals(23, token8.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      XPathLexer xPathLexer10 = new XPathLexer();
      Token token9 = xPathLexer8.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer5.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer0.at();
      assertEquals(16, token11.getTokenType());
      assertEquals("M", token11.getTokenText());
      
      xPathLexer5.relationalOperator();
      Token token12 = xPathLexer1.star();
      assertEquals(20, token12.getTokenType());
      
      Token token13 = xPathLexer7.slashes();
      assertEquals(11, token13.getTokenType());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.092259673578668
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer("av7u9f`=&z?.*HZ");
      xPathLexer0.not();
      xPathLexer1.dollar();
      xPathLexer1.dots();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.9202642446488178
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("nLZ!pT<T}");
      xPathLexer0.or();
      Token token0 = xPathLexer0.star();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.leftParen();
      assertEquals("L", token1.getTokenText());
      
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (20) (n)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.plus();
      assertEquals("Z", token2.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      Token token3 = xPathLexer0.slashes();
      assertEquals("T", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.number();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("<", token4.getTokenText());
      assertEquals(7, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("T", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.dots();
      assertEquals("}", token6.getTokenText());
      assertEquals(13, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(".5:PT7*,+:LX");
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer1.pipe();
      assertEquals(17, token9.getTokenType());
      assertEquals(".", token9.getTokenText());
      
      Token token10 = xPathLexer1.leftBracket();
      assertEquals(3, token10.getTokenType());
      assertEquals("5", token10.getTokenText());
      
      Token token11 = xPathLexer1.at();
      assertEquals(":", token11.getTokenText());
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer1.identifier();
      assertEquals("PT7", token12.getTokenText());
      
      Token token13 = xPathLexer1.dollar();
      assertEquals("*", token13.getTokenText());
      assertEquals(26, token13.getTokenType());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.0532938020645175
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token0 = xPathLexer0.star();
      assertEquals("r", token0.getTokenText());
      
      xPathLexer0.slashes();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.plus();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("L", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("<", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.or();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("eVW", token5.getTokenText());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("rv6!SL<wLMeVW`");
      XPathLexer xPathLexer2 = new XPathLexer(":3e!hIBZu:/P]1m|HYR");
      Token token7 = xPathLexer1.slashes();
      assertEquals(11, token7.getTokenType());
      assertEquals("r", token7.getTokenText());
      
      Token token8 = xPathLexer2.plus();
      assertEquals(":", token8.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token9 = xPathLexer2.nextToken();
      assertEquals("3", token9.getTokenText());
      assertEquals(30, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer5.relationalOperator();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token10 = xPathLexer6.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer3.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      Token token12 = xPathLexer5.rightParen();
      assertEquals(2, token12.getTokenType());
      
      Token token13 = xPathLexer1.equals();
      assertEquals(21, token13.getTokenType());
      assertEquals("v", token13.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token14 = xPathLexer5.identifier();
      assertEquals(15, token14.getTokenType());
      
      Token token15 = xPathLexer1.dollar();
      assertEquals(26, token15.getTokenType());
      assertEquals("6", token15.getTokenText());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.8294575563814668
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rv6!SL<wLMeVW`");
      xPathLexer0.star();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("6", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("L", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("<", token4.getTokenText());
      assertEquals(7, token4.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token5 = xPathLexer1.star();
      assertEquals(20, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("rv6!SL<wLMeVW`");
      XPathLexer xPathLexer3 = new XPathLexer("rv6!SL<wLMeVW`");
      XPathLexer xPathLexer4 = new XPathLexer("BQV|]Y");
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.getPreviousToken();
      Token token6 = xPathLexer3.dots();
      assertEquals(13, token6.getTokenType());
      assertEquals("r", token6.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("BQV|]Y");
      xPathLexer6.div();
      xPathLexer2.nextToken();
      xPathLexer4.relationalOperator();
      Token token7 = xPathLexer1.nextToken();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer1.plus();
      assertEquals(5, token8.getTokenType());
      assertEquals("!", token8.getTokenText());
      
      Token token9 = xPathLexer6.rightParen();
      assertEquals(2, token9.getTokenType());
      assertEquals("B", token9.getTokenText());
      
      Token token10 = xPathLexer6.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer5.at();
      assertEquals(16, token11.getTokenType());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.7144873944896872
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YY]>cp1@z:I");
      xPathLexer0.doubleColon();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.star();
      XPathLexer xPathLexer3 = new XPathLexer("YY]>cp1@z:I");
      XPathLexer xPathLexer4 = new XPathLexer("H|!OMh6);i%");
      XPathLexer xPathLexer5 = new XPathLexer("H|!OMh6);i%");
      xPathLexer4.plus();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer1.comma();
      xPathLexer4.nextToken();
      XPathLexer xPathLexer8 = new XPathLexer();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer9.or();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer9.at();
      Token token1 = xPathLexer0.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.378542447843662
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpth.Tokn");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.star();
      assertEquals("c", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      xPathLexer0.plus();
      xPathLexer0.slashes();
      xPathLexer0.comma();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("er", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals("k", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.at();
      assertEquals("e", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpth.Tokn");
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      assertEquals("c", token5.getTokenText());
      
      Token token6 = xPathLexer1.dollar();
      assertEquals("o", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.relationalOperator();
      Token token7 = xPathLexer1.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.comma();
      XPathLexer xPathLexer4 = new XPathLexer("IKQ4;i=J/Bi9Ud3eiq");
      Token token8 = xPathLexer4.comma();
      assertEquals(32, token8.getTokenType());
      assertEquals("I", token8.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token9 = xPathLexer5.equals();
      assertEquals(21, token9.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token10 = xPathLexer2.at();
      assertEquals(16, token10.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("");
      Token token11 = xPathLexer1.plus();
      assertEquals("w", token11.getTokenText());
      assertEquals(5, token11.getTokenType());
      
      Token token12 = xPathLexer8.slashes();
      assertEquals(11, token12.getTokenType());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.7486684896204698
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token0 = xPathLexer0.at();
      assertEquals("r", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("v", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("6", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.not();
      assertEquals("!", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("rv6!SL<wLMeVW`");
      xPathLexer2.plus();
      XPathLexer xPathLexer3 = new XPathLexer("rv6!SL<wLMeVW`");
      xPathLexer3.relationalOperator();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.star();
      XPathLexer xPathLexer5 = new XPathLexer("[ (");
      XPathLexer xPathLexer6 = new XPathLexer("H|!OMh6);i%");
      XPathLexer xPathLexer7 = new XPathLexer("[ (");
      Token token4 = xPathLexer7.plus();
      assertEquals("[", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      XPathLexer xPathLexer9 = new XPathLexer(") (");
      Token token5 = xPathLexer9.nextToken();
      assertEquals(")", token5.getTokenText());
      
      XPathLexer xPathLexer10 = new XPathLexer();
      xPathLexer3.relationalOperator();
      Token token6 = xPathLexer7.comma();
      assertEquals(" ", token6.getTokenText());
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer3.nextToken();
      assertEquals("rv6", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer11 = new XPathLexer();
      XPathLexer xPathLexer12 = new XPathLexer();
      Token token8 = xPathLexer7.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer4.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      xPathLexer6.relationalOperator();
      Token token10 = xPathLexer4.star();
      assertEquals(20, token10.getTokenType());
      
      Token token11 = xPathLexer7.identifierOrOperatorName();
      assertEquals(15, token11.getTokenType());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.718307110568845
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer1.not();
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.Token");
      Token token5 = xPathLexer2.identifier();
      assertEquals("com.werken.saxpath.Token", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.dots();
      xPathLexer0.or();
      xPathLexer0.isIdentifierChar('x');
      xPathLexer3.getPreviousToken();
      Token token6 = xPathLexer3.dots();
      assertEquals(13, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer2.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer2.slashes();
      assertEquals(11, token10.getTokenType());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.3511604142318068
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lQJ=f}H+");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.0491479822862244
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.not();
      assertEquals("m", token0.getTokenText());
      
      xPathLexer0.pipe();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.pipe();
      assertEquals("j", token1.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer1.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token5 = xPathLexer2.plus();
      assertEquals(5, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      XPathLexer xPathLexer4 = new XPathLexer("dHbs=Ln>}");
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.dollar();
      xPathLexer0.or();
      XPathLexer xPathLexer6 = new XPathLexer(")+@n]pv");
      Token token6 = xPathLexer2.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer5.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("$", token8.getTokenText());
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer6.rightParen();
      assertEquals(")", token10.getTokenText());
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer2.slashes();
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer3.nextToken();
      assertEquals("com.werken.saxpath.XPathLexer", token12.getTokenText());
      assertEquals(15, token12.getTokenType());
      
      Token token13 = xPathLexer0.notEquals();
      assertEquals(22, token13.getTokenType());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.9917635713392645
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m%^(jR%h$2nb,1SH");
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.pipe();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("ueV4$`h,'GbNm20ga4");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.star();
      XPathLexer xPathLexer3 = new XPathLexer("ueV4$`h,'GbNm20ga4");
      XPathLexer xPathLexer4 = new XPathLexer("OMYwyk~nb*;SM{~_v8");
      XPathLexer xPathLexer5 = new XPathLexer("!/lUN*W");
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.plus();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer1.at();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer4.not();
      xPathLexer5.nextToken();
      XPathLexer xPathLexer10 = new XPathLexer("!/lUN*W");
      xPathLexer10.slashes();
      xPathLexer10.relationalOperator();
      xPathLexer2.rightParen();
      xPathLexer9.nextToken();
      XPathLexer xPathLexer11 = new XPathLexer();
      xPathLexer5.nextToken();
      xPathLexer3.rightParen();
      xPathLexer6.plus();
      Token token0 = xPathLexer3.and();
      assertNull(token0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.9912308246026438
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token0 = xPathLexer0.star();
      xPathLexer0.slashes();
      Token token1 = xPathLexer0.slashes();
      token0.toString();
      token1.toString();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("[ (11) (6)");
      xPathLexer1.plus();
      xPathLexer0.at();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer2.nextToken();
      xPathLexer1.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer1.equals();
      xPathLexer1.at();
      xPathLexer2.rightParen();
      Token token2 = xPathLexer2.nextToken();
      assertFalse(token2.equals((Object)token1));
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.7134370928142748
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token0 = xPathLexer0.at();
      assertEquals("r", token0.getTokenText());
      
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.minus();
      assertEquals("6", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.not();
      assertEquals("!", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("rv6!SL<wLMeVW`");
      Token token4 = xPathLexer2.plus();
      assertEquals("r", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("rv6!SL<wLMeVW`");
      XPathLexer xPathLexer4 = new XPathLexer("[ (");
      Token token5 = xPathLexer0.slashes();
      assertEquals("S", token5.getTokenText());
      
      xPathLexer0.or();
      XPathLexer xPathLexer5 = new XPathLexer("rv6!SL<wLMeVW`");
      xPathLexer4.equals();
      Token token6 = xPathLexer2.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals("v", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("L", token7.getTokenText());
      
      Token token8 = xPathLexer2.equals();
      assertEquals(21, token8.getTokenType());
      assertEquals("6", token8.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token9 = xPathLexer4.at();
      assertEquals(16, token9.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token10 = xPathLexer6.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer7.slashes();
      assertEquals(11, token11.getTokenType());
  }
}
