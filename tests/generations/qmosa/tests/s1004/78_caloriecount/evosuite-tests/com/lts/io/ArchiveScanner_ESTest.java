/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 15:13:17 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ?>) unaryOperator0);
      unaryOperator1.apply(unaryOperator0);
      unaryOperator1.apply(unaryOperator0);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super InputStream, ?>) unaryOperator1);
      unaryOperator0.compose((Function<? super DataInputStream, ?>) unaryOperator1);
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Object, ?>) unaryOperator0);
      Function.identity();
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ?>) unaryOperator3);
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator2);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mMI:Bj-iBW$e";
      stringArray0[1] = "mMI:Bj-iBW$e";
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector0;
      archiveScanner0.setIncludes(stringArray0);
      String[] stringArray1 = new String[0];
      archiveScanner0.setExcludes(stringArray1);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "mMI:Bj-iBW$e", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ?>) unaryOperator0);
      unaryOperator1.apply(unaryOperator0);
      unaryOperator1.apply(unaryOperator0);
      unaryOperator0.compose((Function<? super InputStream, ?>) unaryOperator1);
      unaryOperator0.compose((Function<? super DataInputStream, ?>) unaryOperator1);
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ?>) unaryOperator3);
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator2);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      String string0 = "mMI:Bj-iBW$e";
      stringArray0[0] = "mMI:Bj-iBW$e";
      stringArray0[1] = "mMI:Bj-iBW$e";
      archiveScanner0.setIncludes(stringArray0);
      String[] stringArray1 = new String[0];
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.filesIncluded = vector0;
      archiveScanner0.setExcludes(stringArray1);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "mMI:Bj-iBW$e", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.apply((Object) null);
      unaryOperator1.apply(unaryOperator0);
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator1.apply(unaryOperator0);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) unaryOperator1);
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.apply((Object) null);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Object object0 = new Object();
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "h 5'hTc";
      stringArray0[1] = "The system has encountered an s~vere error that has prevented it starting up.  This is probably the result of a bug or other problem that is beyond your control.  lhe details button may provide information that will help in resolving the problem so you may wish t copy the contents of that wndow and include it in any bug Deports, etc.";
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.dirsIncluded = vector0;
      stringArray0[2] = "The system has encountered an s~vere error that has prevented it starting up.  This is probably the result of a bug or other problem that is beyond your control.  lhe details button may provide information that will help in resolving the problem so you may wish t copy the contents of that wndow and include it in any bug Deports, etc.";
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("&9W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      pipedInputStream0.skip(0L);
      dataInputStream0.mark(4);
      pipedInputStream0.skip(0L);
      dataInputStream0.available();
      dataInputStream0.available();
      byte[] byteArray0 = new byte[0];
      dataInputStream0.skip(0);
      dataInputStream0.available();
      pipedInputStream0.read(byteArray0);
      dataInputStream0.available();
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "s";
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.filesNotIncluded = vector0;
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processFile("9r;1s`.");
      // Undeclared exception!
      try { 
        archiveScanner0.toFileType((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      pipedInputStream0.skip(0L);
      pipedInputStream0.mark(1734);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      dataInputStream0.available();
      byte[] byteArray0 = new byte[0];
      pipedInputStream0.mark((-22));
      dataInputStream0.available();
      dataInputStream0.markSupported();
      UnaryOperator.identity();
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "The system has encountered anevere error that has prevented it starting up.  This is probably the result of a bug or other problem that is beyond your control.  lhe details button may provide information that will help in resolving the problem so you may wish to copy the contents of that window and include it in any bug reports, etc.";
      stringArray0[1] = "The system has encountered anevere error that has prevented it starting up.  This is probably the result of a bug or other problem that is beyond your control.  lhe details button may provide information that will help in resolving the problem so you may wish to copy the contents of that window and include it in any bug reports, etc.";
      stringArray0[2] = "The system has encountered anevere error that has prevented it starting up.  This is probably the result of a bug or other problem that is beyond your control.  lhe details button may provide information that will help in resolving the problem so you may wish to copy the contents of that window and include it in any bug reports, etc.";
      stringArray0[3] = "The system has encountered anevere error that has prevented it starting up.  This is probably the result of a bug or other problem that is beyond your control.  lhe details button may provide information that will help in resolving the problem so you may wish to copy the contents of that window and include it in any bug reports, etc.";
      stringArray0[4] = "The system has encountered anevere error that has prevented it starting up.  This is probably the result of a bug or other problem that is beyond your control.  lhe details button may provide information that will help in resolving the problem so you may wish to copy the contents of that window and include it in any bug reports, etc.";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "The system has encountered anevere error that has prevented it starting up.  This is probably the result of a bug or other problem that is beyond your control.  lhe details button may provide information that will help in resolving the problem so you may wish to copy the contents of that window and include it in any bug reports, etc.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "zP%-_DO";
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[1] = "vO<";
      stringArray0[2] = "KE}]a";
      String string0 = "i)a";
      stringArray0[3] = "i)a";
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("tempdir0.jar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) unaryOperator1);
      UnaryOperator.identity();
      unaryOperator1.apply(unaryOperator0);
      unaryOperator0.compose((Function<? super InputStream, ?>) unaryOperator1);
      unaryOperator0.compose((Function<? super DataInputStream, ?>) unaryOperator1);
      UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator<InputStream> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Object> function0 = unaryOperator0.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super InputStream, ?>) function0);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.apply(unaryOperator0);
      unaryOperator1.apply(unaryOperator2);
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      unaryOperator3.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Object, ?>) unaryOperator1);
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator3);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mMI:sh j-iBOW$e";
      stringArray0[1] = "mMI:sh j-iBOW$e";
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsExcluded = vector0;
      String[] stringArray1 = new String[0];
      archiveScanner0.setExcludes(stringArray1);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "mMI:sh j-iBOW$e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.apply((Object) null);
      unaryOperator1.apply(unaryOperator0);
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator1.apply(unaryOperator0);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) unaryOperator1);
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.apply((Object) null);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "h 5'hTc";
      stringArray0[1] = "The system has encountered an s~vere error that has prevented it starting up.  This is probably the result of a bug or other problem that is beyond your control.  lhe details button may provide information that will help in resolving the problem so you may wish t copy the contents of that wndow and include it in any bug Deports, etc.";
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.dirsIncluded = vector0;
      stringArray0[2] = "The system has encountered an s~vere error that has prevented it starting up.  This is probably the result of a bug or other problem that is beyond your control.  lhe details button may provide information that will help in resolving the problem so you may wish t copy the contents of that wndow and include it in any bug Deports, etc.";
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("h 5'hTc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply(unaryOperator0);
      unaryOperator0.compose((Function<? super InputStream, ?>) unaryOperator0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      pipedInputStream0.skip(0L);
      DataInputStream dataInputStream1 = (DataInputStream)unaryOperator0.apply(dataInputStream0);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super DataInputStream, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      byte[] byteArray0 = new byte[0];
      dataInputStream1.readFully(byteArray0);
      pipedInputStream0.mark((-22));
      dataInputStream1.readFully(byteArray0);
      dataInputStream1.available();
      dataInputStream0.available();
      dataInputStream0.markSupported();
      dataInputStream0.close();
      UnaryOperator.identity();
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsIncluded = vector0;
      stringArray0[0] = "The system has encountered ansevere error that has prevented it starting up.  This is probably the result of a bug or other problem that is beyond your control.  lhe details button may provide information that will help in resolving the problem so you may wish to copy the contents of that window and include it in any bug reports, etc.";
      stringArray0[1] = "The system has encountered ansevere error that has prevented it starting up.  This is probably the result of a bug or other problem that is beyond your control.  lhe details button may provide information that will help in resolving the problem so you may wish to copy the contents of that window and include it in any bug reports, etc.";
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "The system has encountered ansevere error that has prevented it starting up.  This is probably the result of a bug or other problem that is beyond your control.  lhe details button may provide information that will help in resolving the problem so you may wish to copy the contents of that window and include it in any bug reports, etc.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ?>) unaryOperator0);
      unaryOperator0.apply(unaryOperator1);
      unaryOperator1.apply(unaryOperator0);
      unaryOperator0.compose((Function<? super InputStream, ?>) unaryOperator1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)65;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Object object0 = unaryOperator0.apply(dataInputStream0);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super DataInputStream, ?>) unaryOperator1);
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      pipedInputStream0.mark((-20));
      unaryOperator1.apply((Object) null);
      unaryOperator0.compose((Function<? super String, ?>) unaryOperator1);
      UnaryOperator.identity();
      unaryOperator0.apply(object0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mMI: j-iBz}e";
      stringArray0[1] = "mMI: j-iBz}e";
      archiveScanner0.setExcludes(stringArray0);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.filesNotIncluded = vector0;
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "mMI: j-iBz}e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ?>) unaryOperator0);
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator1.apply(unaryOperator0);
      Object object0 = new Object();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ?>) unaryOperator5);
      UnaryOperator.identity();
      Object object1 = new Object();
      unaryOperator2.apply(object0);
      unaryOperator3.compose((Function<? super Integer, ?>) unaryOperator4);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ?>) unaryOperator6);
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator2);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsExcluded = vector0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@rXR!|oP,(QF&";
      stringArray0[1] = "`DEB";
      archiveScanner0.setIncludes(stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "Y_MM\"N8-Fa";
      archiveScanner0.setExcludes(stringArray1);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("`DEB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = ".war";
      MockFile mockFile0 = new MockFile(".war");
      UnaryOperator.identity();
      String string1 = "hNm[X\"0[";
      ImprovedFile improvedFile0 = new ImprovedFile("hNm[X\"0[");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      archiveScanner0.includes = archiveScanner1.DEFAULT_ARCHIVE_EXTENSIONS;
      Vector<String> vector0 = new Vector<String>();
      archiveScanner1.dirsExcluded = vector0;
      archiveScanner0.setExcludes(archiveScanner1.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner1.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner1.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.setIncludes(archiveScanner1.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.couldHoldIncluded(string0);
      DirectoryScanner.matchPath(string1, string0);
      archiveScanner0.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      String string2 = "fvY\\0E~4Q|;";
      // Undeclared exception!
      try { 
        archiveScanner1.processFile(string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      pipedInputStream0.connect(pipedOutputStream0);
      pipedInputStream0.skip(0L);
      pipedInputStream0.markSupported();
      pipedInputStream0.skip(0L);
      dataInputStream0.available();
      dataInputStream0.available();
      byte[] byteArray0 = new byte[0];
      dataInputStream0.skip(0);
      pipedInputStream0.read(byteArray0);
      dataInputStream0.markSupported();
      dataInputStream0.available();
      dataInputStream0.available();
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[5];
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsExcluded = vector0;
      stringArray0[0] = "i{NCg|kBo~=^2}EO`";
      stringArray0[1] = "h 5'Tc";
      stringArray0[2] = "The system has encountered an s~vere error that has prevented it starting up.  This is probably the result of a bug or other problem that is beyond your control.  lhe details button may provide information that will help in resolving the problem so you may wish t copy the contents of that wndow and include it in any bug Deports, etc.";
      stringArray0[3] = "The system has encountered an s~vere error that has prevented it starting up.  This is probably the result of a bug or other problem that is beyond your control.  lhe details button may provide information that will help in resolving the problem so you may wish t copy the contents of that wndow and include it in any bug Deports, etc.";
      stringArray0[4] = "L?5&Ru1<aTVO[";
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("h 5'Tc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.402886181440778
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = ".war";
      MockFile mockFile0 = new MockFile(".war");
      MockFile mockFile1 = new MockFile(mockFile0, ".war");
      String string1 = "0p~Vb^0$ Tu2M~";
      mockFile1.mkdir();
      File file0 = MockFile.createTempFile(".war", "0p~Vb^0$ Tu2M~");
      ImprovedFile improvedFile0 = new ImprovedFile(".war");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      file0.getAbsoluteFile();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/.war00p~Vb^0$ Tu2M~");
      FileSystemHandling.createFolder(evoSuiteFile0);
      archiveScanner0.dirsNotIncluded = vector0;
      file0.setReadOnly();
      archiveScanner0.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      boolean boolean0 = true;
      archiveScanner0.processDirectory(file0, string1, boolean0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/.war00p~Vb^0$ Tu2M~");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, string1);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(mockFile1, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ?>) unaryOperator0);
      unaryOperator1.apply(unaryOperator0);
      unaryOperator0.compose((Function<? super InputStream, ?>) unaryOperator1);
      unaryOperator0.compose((Function<? super DataInputStream, ?>) unaryOperator1);
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Integer integer0 = new Integer((-4971));
      unaryOperator2.andThen((Function<? super Object, ?>) unaryOperator0);
      unaryOperator0.apply(integer0);
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ?>) unaryOperator0);
      unaryOperator2.apply((Object) null);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ?>) unaryOperator3);
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator2);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mMI:Bj-iBW$e";
      stringArray0[1] = "mMI:Bj-iBW$e";
      archiveScanner0.setIncludes(stringArray0);
      String[] stringArray1 = new String[0];
      Vector<Object> vector0 = new Vector<Object>();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator4);
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.setExcludes(stringArray1);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "mMI:Bj-iBW$e", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ?>) unaryOperator0);
      unaryOperator1.apply(unaryOperator0);
      unaryOperator0.compose((Function<? super InputStream, ?>) unaryOperator1);
      unaryOperator0.compose((Function<? super DataInputStream, ?>) unaryOperator1);
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator1.apply(unaryOperator3);
      Function.identity();
      unaryOperator2.apply((Integer) null);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator3.apply((Object) null);
      unaryOperator1.apply(unaryOperator2);
      UnaryOperator.identity();
      unaryOperator3.apply((Object) null);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.compose((Function<? super Object, ?>) unaryOperator4);
      unaryOperator3.compose((Function<? super String, ?>) unaryOperator5);
      unaryOperator3.compose((Function<? super Object, ?>) unaryOperator1);
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator3);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mM: j-}e";
      stringArray0[1] = ">hf";
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("mM: j-}e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply(unaryOperator0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.apply("H1tbZA.}0.ta'mp.jar");
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ?>) unaryOperator1);
      unaryOperator0.apply(unaryOperator2);
      Function.identity();
      unaryOperator2.compose((Function<? super String, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator2.apply("AIB8;.}0eld3R<@");
      unaryOperator0.apply((Object) null);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ?>) unaryOperator3);
      unaryOperator5.compose((Function<? super Object, ?>) unaryOperator0);
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator4);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[0];
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.filesIncluded = vector0;
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("dX.A$3EE`baWCK7^Ut`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".war");
      MockFile mockFile1 = new MockFile(mockFile0, ".war");
      mockFile1.mkdir();
      File file0 = MockFile.createTempFile(".war", "0p~Vb^0$ Tu2M~");
      ImprovedFile improvedFile0 = new ImprovedFile(".war");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String string0 = "/test";
      Vector<Object> vector0 = new Vector<Object>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/.war00p~Vb^0$ Tu2M~");
      FileSystemHandling.createFolder(evoSuiteFile0);
      archiveScanner0.dirsNotIncluded = vector0;
      file0.setReadOnly();
      String[] stringArray0 = new String[0];
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      DirectoryScanner.matchPath(".war.jar", "/test");
      ArchiveScanner archiveScanner2 = new ArchiveScanner(improvedFile0);
      archiveScanner2.setExcludes(archiveScanner1.DEFAULT_ARCHIVE_EXTENSIONS);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9448468679826323
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Error trying to 8reate nested archive list for archive at entry ");
      ImprovedFile improvedFile0 = new ImprovedFile("Error trying to 8reate nested archive list for archive at entry ", "Error trying to 8reate nested archive list for archive at entry ");
      ImprovedFile improvedFile1 = new ImprovedFile("Error trying to 8reate nested archive list for archive at entry ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Error trying to 8reate nested archive list for archive at entry ";
      stringArray0[1] = "Error trying to 8reate nested archive list for archive at entry ";
      stringArray0[2] = ".EAR";
      vector0.add((Object) archiveScanner0.dirsNotIncluded);
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      improvedFile0.setWritable(true);
      archiveScanner0.processDirectory(mockFile0, "U|Vr-279. kE.jar", true);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile1);
      archiveScanner1.filesNotIncluded = archiveScanner0.dirsNotIncluded;
      archiveScanner1.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      archiveScanner1.dirsNotIncluded = archiveScanner0.dirsNotIncluded;
      archiveScanner1.processDirectory(improvedFile1, "Error trying to 8reate nested archive list for archive at entry ", true);
      archiveScanner1.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      ArchiveScanner archiveScanner2 = new ArchiveScanner(improvedFile1);
      long long0 = 127L;
      System.setCurrentTimeMillis(long0);
      archiveScanner2.dirsExcluded = archiveScanner1.dirsNotIncluded;
      String string0 = "The system encountered an error trying to save the system settings.";
      String string1 = "9~-z.,)9T3+k;";
      DirectoryScanner.matchPath(string0, string1);
      ArchiveScanner archiveScanner3 = new ArchiveScanner(improvedFile1);
      Vector<Object> vector1 = new Vector<Object>();
      ArchiveScanner archiveScanner4 = new ArchiveScanner(improvedFile1);
      archiveScanner0.setExcludes(archiveScanner2.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner4.setIncludes(archiveScanner1.DEFAULT_ARCHIVE_EXTENSIONS);
      String string2 = "Atlh6.fYlps{u1";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        archiveScanner4.processDirectory(improvedFile0, string2, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ?>) unaryOperator0);
      unaryOperator1.apply(unaryOperator0);
      unaryOperator0.compose((Function<? super InputStream, ?>) unaryOperator1);
      unaryOperator0.compose((Function<? super DataInputStream, ?>) unaryOperator1);
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator1.apply(unaryOperator3);
      unaryOperator2.apply((Integer) null);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator3.apply((Object) null);
      unaryOperator1.apply(unaryOperator2);
      UnaryOperator.identity();
      unaryOperator3.apply((Object) null);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.compose((Function<? super Object, ?>) unaryOperator4);
      unaryOperator3.compose((Function<? super String, ?>) unaryOperator5);
      unaryOperator3.compose((Function<? super Object, ?>) unaryOperator1);
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator3);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Object> vector0 = new Vector<Object>();
      String[] stringArray0 = new String[2];
      Vector<DataInputStream> vector1 = new Vector<DataInputStream>();
      archiveScanner0.dirsExcluded = vector1;
      stringArray0[0] = "=IM@|(0";
      stringArray0[1] = "=IM@|(0";
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processDirectory((File) null, "=IM@|(0", true);
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ?>) unaryOperator0);
      unaryOperator1.apply(unaryOperator0);
      unaryOperator0.compose((Function<? super InputStream, ?>) unaryOperator1);
      unaryOperator0.compose((Function<? super DataInputStream, ?>) unaryOperator1);
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator1.apply(unaryOperator3);
      unaryOperator2.apply((Integer) null);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator3.apply((Object) null);
      unaryOperator1.apply(unaryOperator2);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.compose((Function<? super Object, ?>) unaryOperator4);
      unaryOperator3.compose((Function<? super String, ?>) unaryOperator5);
      unaryOperator3.compose((Function<? super Object, ?>) unaryOperator1);
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator3);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Object> vector0 = new Vector<Object>();
      String[] stringArray0 = new String[2];
      Vector<DataInputStream> vector1 = new Vector<DataInputStream>();
      archiveScanner0.dirsExcluded = vector1;
      stringArray0[0] = "=IM@|(0";
      stringArray0[1] = "=IM@|(0";
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processDirectory((File) null, "=IM@|(0", true);
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = ".war";
      MockFile mockFile0 = new MockFile(".war");
      ImprovedFile improvedFile0 = new ImprovedFile("0p~Vb^0$ Tu2M~");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      archiveScanner0.setIncludes(stringArray0);
      String string1 = "outpu fle: ";
      String string2 = ".zip";
      boolean boolean0 = false;
      try { 
        archiveScanner0.processDirectory(mockFile0, string2, boolean0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/.war
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      UnaryOperator.identity();
      ImprovedFile improvedFile0 = new ImprovedFile("hNm[X\"0[");
      ImprovedFile improvedFile1 = ImprovedFile.createTempDirectory(".RZIP", ".RZIP", (File) improvedFile0);
      String string0 = "u]?Ft^!Fy \\jI%|r0D%";
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      String[] stringArray0 = new String[6];
      String string1 = ".EAR";
      stringArray0[0] = ".EAR";
      stringArray0[1] = "u]?Ft^!Fy jI%|r0D%";
      stringArray0[2] = "R1UZ]PZnUAC|H>H";
      stringArray0[3] = "R1UZ]PZnUAC|H>H";
      stringArray0[4] = "R1UZ]PZnUAC|H>H";
      stringArray0[5] = "hNm[X\"0[";
      archiveScanner0.setIncludes(stringArray0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile1);
      archiveScanner0.setExcludes(archiveScanner1.DEFAULT_ARCHIVE_EXTENSIONS);
      Vector<Object> vector2 = new Vector<Object>();
      archiveScanner0.filesNotIncluded = vector2;
      archiveScanner0.processArchive(improvedFile1, string0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.apply((Object) null);
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator1.apply(unaryOperator0);
      unaryOperator1.apply((Object) null);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Object object0 = new Object();
      UnaryOperator<InputStream> unaryOperator4 = UnaryOperator.identity();
      unaryOperator0.apply(object0);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.compose((Function<? super InputStream, ?>) unaryOperator4);
      unaryOperator3.compose((Function<? super Integer, ?>) unaryOperator3);
      UnaryOperator.identity();
      UnaryOperator<DataInputStream> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      unaryOperator7.apply(unaryOperator6);
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ?>) unaryOperator7);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@rXR!|oP,(QF&";
      stringArray0[1] = "bM\"#VA@:";
      archiveScanner0.setIncludes(stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "bM\"#VA@:";
      archiveScanner0.setExcludes(stringArray1);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "bM\"#VA@:", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ?>) unaryOperator0);
      unaryOperator1.apply(unaryOperator0);
      unaryOperator1.apply(unaryOperator0);
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super InputStream, ?>) unaryOperator1);
      unaryOperator0.compose((Function<? super DataInputStream, ?>) unaryOperator1);
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.apply(unaryOperator2);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator4.compose((Function<? super Object, ?>) unaryOperator0);
      Function.identity();
      unaryOperator3.compose((Function<? super Object, ?>) unaryOperator4);
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator3);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesNotIncluded = vector0;
      stringArray0[0] = "mMI:Bj-iBW$e";
      stringArray0[1] = "mMI:Bj-iBW$e";
      archiveScanner0.setIncludes(stringArray0);
      String[] stringArray1 = new String[0];
      archiveScanner0.setExcludes(stringArray1);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "mMI:Bj-iBW$e", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      ImprovedFile improvedFile0 = new ImprovedFile("9kWX;.jar");
      System.setCurrentTimeMillis(2000L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Yrf.Sq";
      stringArray0[1] = "9kWX;.jar";
      stringArray0[2] = "9kWX;.jar";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      System.setCurrentTimeMillis(2017L);
      ArchiveScanner archiveScanner2 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.apply((Object) null);
      unaryOperator1.apply((Object) null);
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator1.apply(unaryOperator0);
      unaryOperator1.apply((Object) null);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Object object0 = new Object();
      UnaryOperator.identity();
      unaryOperator0.apply(object0);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Integer, ?>) unaryOperator4);
      UnaryOperator.identity();
      UnaryOperator<DataInputStream> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      unaryOperator6.apply(unaryOperator5);
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ?>) unaryOperator6);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "lf`K(o";
      stringArray0[1] = "lf`K(o";
      archiveScanner0.setIncludes(stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "Y_M\"N8Fa";
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsIncluded = vector0;
      archiveScanner0.setExcludes(stringArray1);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("lf`K(o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      dataInputStream0.skipBytes((-146968832));
      pipedInputStream0.skip(0);
      pipedInputStream0.skip(0);
      dataInputStream0.available();
      dataInputStream0.available();
      pipedInputStream0.markSupported();
      dataInputStream0.skip(0);
      dataInputStream0.available();
      dataInputStream0.available();
      dataInputStream0.available();
      pipedInputStream0.mark(1102);
      dataInputStream0.available();
      dataInputStream0.available();
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      dataInputStream1.markSupported();
      DataInputStream dataInputStream2 = new DataInputStream(dataInputStream0);
      dataInputStream2.available();
      dataInputStream2.mark(0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[0];
      archiveScanner0.setIncludes(stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "@rXR!|oP,(QF&";
      archiveScanner0.setExcludes(stringArray1);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "`DEB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8548720307766426
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".war/.war0.war");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".war");
      MockFile mockFile0 = new MockFile(".war");
      MockFile mockFile1 = new MockFile(mockFile0, ".war");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      UnaryOperator.identity();
      ImprovedFile improvedFile0 = new ImprovedFile(".war");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Vector<Object> vector0 = new Vector<Object>();
      improvedFile0.tempRename();
      MockFile.createTempFile(".war", "^E|j)!Q,%|&6", (File) mockFile0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(mockFile0, "Co3lN not fvnd ouzput ;le,", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, Object> function2 = Function.identity();
      Function<Object, String> function3 = function2.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, Object> function4 = Function.identity();
      Function<Object, String> function5 = function1.andThen((Function<? super String, ? extends String>) function1);
      Function.identity();
      Function.identity();
      function4.apply(function3);
      Function.identity();
      Function<Integer, Integer> function6 = Function.identity();
      Function<Integer, DataInputStream> function7 = (Function<Integer, DataInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      function6.andThen((Function<? super Integer, ? extends DataInputStream>) function7);
      function3.compose((Function<? super Integer, ?>) function6);
      Function.identity();
      Function<Object, String> function8 = function4.andThen((Function<? super Object, ? extends String>) function5);
      Function<Object, Object> function9 = Function.identity();
      function8.andThen((Function<? super String, ?>) function3);
      Function.identity();
      Function<Object, String> function10 = function4.andThen((Function<? super Object, ? extends String>) function5);
      function8.compose((Function<? super String, ?>) function1);
      function3.andThen((Function<? super String, ? extends String>) function8);
      Function<Object, Integer> function11 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function12 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function11);
      Function<Object, Integer> function13 = function3.andThen((Function<? super String, ? extends Integer>) function12);
      Function<Object, Integer> function14 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function12);
      function10.andThen((Function<? super String, ? extends Integer>) function14);
      Function<Object, Integer> function15 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function13);
      function10.compose((Function<? super Integer, ?>) function15);
      function2.andThen((Function<? super Object, ?>) function9);
      ImprovedFile improvedFile0 = new ImprovedFile("Mm^#|1=%qPIAo");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ImprovedFile improvedFile1 = improvedFile0.createTempDir();
      archiveScanner0.scandir(improvedFile1, "Mm^#|1=%qPIAo", false);
      assertFalse(improvedFile1.isFile());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4572637190629707
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      dataInputStream0.skipBytes((-146968832));
      pipedInputStream0.skip(0);
      pipedInputStream0.skip(0);
      dataInputStream0.available();
      dataInputStream0.available();
      pipedInputStream0.markSupported();
      dataInputStream0.skip(0);
      dataInputStream0.available();
      dataInputStream0.available();
      pipedInputStream0.mark(1102);
      dataInputStream0.available();
      dataInputStream0.available();
      dataInputStream0.markSupported();
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      dataInputStream1.available();
      dataInputStream1.mark(0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".ZDP";
      stringArray0[1] = ".ZDP";
      stringArray0[2] = ".ZDP";
      ImprovedFile improvedFile0 = new ImprovedFile("]<DRZg}0$C");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      improvedFile0.createTempDir();
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner1.scandir(improvedFile0, ".ZIP", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".war");
      MockFile mockFile1 = new MockFile(mockFile0, ".war");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      UnaryOperator.identity();
      ImprovedFile improvedFile0 = new ImprovedFile(".war");
      ImprovedFile.createTempImprovedFile(".war", ".war", mockFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Vector<Object> vector0 = new Vector<Object>();
      ImprovedFile.createTempDirectory("hc 1wR.KR[", "hc 1wR.KR[", (File) mockFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "Co3lN not fvnd ouzput ;le,", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      dataInputStream0.skipBytes((-146968832));
      pipedInputStream0.skip(0);
      pipedInputStream0.skip(0);
      dataInputStream0.available();
      dataInputStream0.available();
      byte[] byteArray0 = new byte[0];
      pipedInputStream0.markSupported();
      dataInputStream0.skip(0);
      dataInputStream0.available();
      dataInputStream0.available();
      dataInputStream0.mark(0);
      dataInputStream0.available();
      dataInputStream0.readFully(byteArray0);
      pipedInputStream0.mark(1102);
      dataInputStream0.readFully(byteArray0);
      dataInputStream0.available();
      dataInputStream0.available();
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      dataInputStream1.markSupported();
      DataInputStream dataInputStream2 = new DataInputStream(dataInputStream0);
      dataInputStream2.readFully(byteArray0, 0, 0);
      dataInputStream2.available();
      dataInputStream2.mark(0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "afk.ZDP";
      stringArray0[1] = "afk.ZDP";
      stringArray0[2] = "afk.ZDP";
      stringArray0[3] = "afk.ZDP";
      ImprovedFile improvedFile0 = new ImprovedFile("!", "tion");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scanArchive(improvedFile0, "(ZO|nikmh\u0006Ud5eTy");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /home/ubuntu/termite/projects/78_caloriecount/!/tion
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".war");
      MockFile mockFile1 = new MockFile("com.lts.util.deepcopy.DeepCopyException", ".war");
      MockFile mockFile2 = new MockFile(mockFile1, "lk:*?9OP~]7F");
      long long0 = 16L;
      mockFile2.setExecutable(false, true);
      MockFile mockFile3 = new MockFile(".war");
      ImprovedFile improvedFile0 = ImprovedFile.createTempImprovedFile(" kE", "RZIP", mockFile1);
      System.setCurrentTimeMillis(16L);
      mockFile1.setLastModified(16L);
      System.setCurrentTimeMillis((-708L));
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      MockFile mockFile4 = new MockFile(mockFile2, "");
      boolean boolean0 = archiveScanner0.isArchive(mockFile4);
      assertFalse(boolean0);
      
      long long1 = 0L;
      System.setCurrentTimeMillis(long1);
      System.setCurrentTimeMillis(long0);
      archiveScanner0.isArchive(mockFile1);
      boolean boolean1 = archiveScanner0.isArchive(mockFile3);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long long0 = (-708L);
      System.setCurrentTimeMillis(16L);
      System.setCurrentTimeMillis((-708L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(16L);
      ImprovedFile improvedFile0 = new ImprovedFile("nb:CzJC49", "eRqhADy\"fe{d");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scandir(improvedFile0, "xG_9#D!_&l\"G1(", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/nb:CzJC49/eRqhADy\"fe{d
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, Object> function2 = Function.identity();
      Function<Object, String> function3 = function2.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, Object> function4 = Function.identity();
      Function<Object, String> function5 = function1.andThen((Function<? super String, ? extends String>) function1);
      Function.identity();
      function4.compose((Function<? super DataInputStream, ?>) function2);
      function4.andThen((Function<? super Object, ? extends String>) function1);
      function2.apply(function1);
      function2.apply(function1);
      function3.apply(function3);
      function4.apply(function3);
      function3.apply(function5);
      function4.andThen((Function<? super Object, ?>) function5);
      function3.compose((Function<? super Integer, ?>) function5);
      Function<Object, Object> function6 = Function.identity();
      Function<Integer, Integer> function7 = Function.identity();
      function3.andThen((Function<? super String, ?>) function4);
      function7.apply((Integer) null);
      function3.compose((Function<? super Integer, ?>) function7);
      Function<Object, String> function8 = function2.andThen((Function<? super Object, ? extends String>) function5);
      Function.identity();
      Function<String, Integer> function9 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function10 = function8.andThen((Function<? super String, ? extends Integer>) function9);
      Function.identity();
      function4.compose((Function<? super String, ?>) function6);
      Function.identity();
      function4.andThen((Function<? super Object, ? extends String>) function5);
      Function<Object, Integer> function11 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function10);
      function3.andThen((Function<? super String, ? extends Integer>) function11);
      function6.andThen((Function<? super Object, ?>) function2);
      ImprovedFile improvedFile0 = new ImprovedFile("15/");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.haveSlowResults = true;
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      dataInputStream0.skipBytes((-146968832));
      pipedInputStream0.skip(0);
      pipedInputStream0.skip(0);
      dataInputStream0.available();
      pipedInputStream0.skip((-3105L));
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      dataInputStream1.available();
      dataInputStream1.available();
      pipedInputStream0.markSupported();
      dataInputStream1.skip((-146968832));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      DataInputStream dataInputStream2 = new DataInputStream(pushbackInputStream0);
      dataInputStream2.available();
      dataInputStream2.available();
      pipedInputStream0.mark(0);
      dataInputStream2.available();
      dataInputStream0.available();
      dataInputStream0.markSupported();
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream0);
      dataInputStream2.available();
      DataInputStream dataInputStream4 = new DataInputStream(dataInputStream2);
      dataInputStream4.mark(0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".war");
      MockFile mockFile1 = new MockFile("com.lts.util.deepcopy.DeepCopyException", ".war");
      mockFile1.setReadable(true, true);
      MockFile mockFile2 = new MockFile(mockFile1, "lk:*?9OP~]7F");
      mockFile2.setExecutable(false, true);
      MockFile mockFile3 = new MockFile(".war");
      ImprovedFile improvedFile0 = ImprovedFile.createTempImprovedFile(" kE", "RZP", mockFile1);
      System.setCurrentTimeMillis(16L);
      mockFile1.setLastModified(16L);
      System.setCurrentTimeMillis((-708L));
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      MockFile mockFile4 = new MockFile(mockFile2, "");
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(16L);
      int int0 = archiveScanner0.toFileType(mockFile2);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, Object> function2 = Function.identity();
      Function<Object, String> function3 = function2.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, Object> function4 = Function.identity();
      Function<Object, String> function5 = function1.andThen((Function<? super String, ? extends String>) function1);
      Function.identity();
      function4.compose((Function<? super DataInputStream, ?>) function2);
      function4.andThen((Function<? super Object, ? extends String>) function1);
      function2.apply(function1);
      function2.apply(function1);
      function3.apply(function3);
      function4.apply(function3);
      function3.apply(function5);
      Function<Object, Object> function6 = function4.andThen((Function<? super Object, ?>) function5);
      function3.compose((Function<? super Integer, ?>) function5);
      Function<Object, Object> function7 = Function.identity();
      Function<Integer, Integer> function8 = Function.identity();
      function3.andThen((Function<? super String, ?>) function4);
      function8.apply((Integer) null);
      function4.andThen((Function<? super Object, ?>) function5);
      function3.compose((Function<? super Integer, ?>) function8);
      Function<Object, String> function9 = function2.andThen((Function<? super Object, ? extends String>) function5);
      Function.identity();
      Function<String, Integer> function10 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function11 = function9.andThen((Function<? super String, ? extends Integer>) function10);
      Function.identity();
      function7.compose((Function<? super String, ?>) function6);
      Function.identity();
      function4.andThen((Function<? super Object, ? extends String>) function5);
      Function<Object, Integer> function12 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function11);
      function3.andThen((Function<? super String, ? extends Integer>) function12);
      function7.andThen((Function<? super Object, ?>) function2);
      ImprovedFile improvedFile0 = new ImprovedFile("15/");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.455848709151796
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Object object0 = new Object();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ?>) unaryOperator1);
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator2);
      Object object1 = new Object();
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Object> vector0 = new Vector<Object>();
      UnaryOperator.identity();
      System.setCurrentTimeMillis(1);
      ImprovedFile improvedFile0 = new ImprovedFile("_~9uR-o?pKkR#sbDU");
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      archiveScanner0.toFileType(improvedFile0);
      long long0 = 4050L;
      System.setCurrentTimeMillis(long0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      dataInputStream0.skipBytes((-146968832));
      pipedInputStream0.skip(0);
      pipedInputStream0.skip(0);
      dataInputStream0.available();
      dataInputStream0.available();
      byte[] byteArray0 = new byte[0];
      pipedInputStream0.markSupported();
      dataInputStream0.skip(0);
      pipedInputStream0.read(byteArray0);
      dataInputStream0.available();
      dataInputStream0.available();
      dataInputStream0.mark(0);
      dataInputStream0.available();
      dataInputStream0.readFully(byteArray0);
      pipedInputStream0.mark(1102);
      dataInputStream0.readFully(byteArray0);
      dataInputStream0.available();
      dataInputStream0.available();
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      dataInputStream1.markSupported();
      DataInputStream dataInputStream2 = new DataInputStream(dataInputStream0);
      dataInputStream2.readFully(byteArray0, (-3961), 0);
      dataInputStream2.available();
      dataInputStream2.mark(0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      MockFile mockFile0 = new MockFile((File) null, "");
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      int int0 = archiveScanner0.toFileType(mockFile0);
      assertEquals(1, int0);
  }
}
