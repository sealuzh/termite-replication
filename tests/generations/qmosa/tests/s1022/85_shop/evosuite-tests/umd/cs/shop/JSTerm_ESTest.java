/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 20:39:48 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.180136323865172
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.isGround();
      jSTerm1.makeEval(true);
      JSJshopVars.astherisk = 1;
      StringReader stringReader0 = new StringReader("5dj\bGLHmMw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(126, 124);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = (JSTerm)jSTerm0.clone();
      jSTerm2.add((Object) jSTerm3);
      jSTerm2.standarizerPredicateForm();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      jSTerm4.addAll((Collection) jSTerm2);
      JSTerm jSTerm5 = jSTerm1.cloneT();
      assertTrue(jSTerm5.isFunction());
      assertNotSame(jSTerm1, jSTerm5);
      
      JSTerm jSTerm6 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSJshopVars.backquote = 1;
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm4, (JSSubstitution) null);
      assertNotNull(jSSubstitution2);
      assertTrue(jSTerm4.isFunction());
      
      JSTerm jSTerm7 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution3 = jSTerm7.matches(jSTerm3, jSSubstitution1);
      assertFalse(jSTerm7.isEval());
      assertTrue(jSSubstitution3.fail());
      
      jSTerm6.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "+I=BF\\7R{B";
      jSTerm0.addElement("+I=BF\u0007R{B");
      jSTerm0.addElement((Object) null);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.addElements(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution5);
      jSSubstitution4.assignFailure();
      jSSubstitution4.add((Object) jSSubstitution2);
      jSSubstitution1.add((Object) jSSubstitution4);
      jSSubstitution1.add((Object) null);
      jSSubstitution1.add((Object) "ff");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      JSJshopVars.dot = (-2001);
      jSSubstitution3.add((Object) jSSubstitution2);
      Object object0 = new Object();
      jSTerm0.add(object0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1747L));
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      String string0 = "?";
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.204019024379692
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("5dj\bGLHmMw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(126, 124);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = (JSTerm)jSTerm0.clone();
      jSTerm2.add((Object) jSTerm3);
      jSTerm0.isGround();
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      jSTerm4.addAll((Collection) jSTerm2);
      assertEquals("[[], [[]]]", jSTerm4.toString());
      
      JSTerm jSTerm5 = jSTerm1.cloneT();
      JSJshopVars.exclamation = (-1);
      jSTerm0.applySubstitutionT((JSSubstitution) null);
      jSTerm5.toStr();
      jSTerm5.toStr();
      jSTerm3.toStr();
      JSTerm jSTerm6 = jSTerm4.applySubstitutionT((JSSubstitution) null);
      jSTerm6.print();
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.932806572614331
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      jSSubstitution0.add((Object) jSSubstitution1);
      String string0 = "4%";
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      jSTerm0.isGround();
      jSTerm0.standardizerTerm();
      jSTerm0.addAll((Collection) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0140355237092673
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution1);
      JSJshopVars.leftPar = 1;
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) jSSubstitution2);
      predicate3.or(predicate4);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      Predicate<Object> predicate6 = predicate1.or(predicate0);
      Predicate<Object> predicate7 = predicate4.negate();
      predicate6.and(predicate7);
      predicate2.negate();
      jSTerm1.removeIf(predicate5);
      assertEquals(1, jSTerm0.size());
      
      System.setCurrentTimeMillis(1631L);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      System.setCurrentTimeMillis(1900L);
      boolean boolean0 = jSTerm1.equals(jSTerm2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8065071652616695
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" b'NC1");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      System.setCurrentTimeMillis((-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.spliterator();
      jSTerm1.retainAll(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.649131027144308
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oSc;{#$)^PH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isFunction();
      char[] charArray0 = new char[22];
      charArray0[0] = '\u0083';
      charArray0[1] = 'Q';
      jSTerm0.equals(jSTerm0);
      jSTerm0.isVariable();
      jSTerm0.isFunction();
      jSTerm0.isVariable();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      jSTerm1.isGround();
      jSTerm1.equals(jSTerm0);
      jSTerm0.print();
      jSTerm0.toStr();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = jSTerm1.call();
      streamTokenizer1.ttype = 41;
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      JSTerm jSTerm5 = jSTerm0.standardizerTerm();
      jSTerm3.isGround();
      jSTerm0.cloneT();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm4.equals(jSTerm6);
      jSTerm4.toStr();
      jSTerm4.equals(jSTerm0);
      jSTerm2.matches(jSTerm6);
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm5));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8380834670331858
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.equals(jSTerm0);
      jSTerm0.isVariable();
      jSTerm2.isFunction();
      jSTerm2.isVariable();
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm3.call();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = new JSTerm();
      JSJshopVars.minus = 1879;
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.call();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.replaceAll((UnaryOperator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.850785381454925
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "5BFxM9.Oovx!0Cu2");
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.equals(jSTerm1);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm3);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm2);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      Predicate<Object> predicate5 = predicate4.and(predicate2);
      predicate2.and(predicate3);
      predicate1.and(predicate5);
      Predicate<Object> predicate6 = predicate5.or(predicate1);
      Predicate<Object> predicate7 = predicate1.negate();
      predicate4.and(predicate1);
      Predicate<Object> predicate8 = predicate7.or(predicate5);
      predicate6.or(predicate8);
      predicate7.or(predicate2);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate10 = predicate9.and(predicate3);
      jSTerm1.listIterator();
      predicate10.negate();
      jSTerm3.removeIf(predicate1);
      Object object0 = jSTerm1.clone();
      jSSubstitution0.add(object0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm1.addElement(predicate0);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$44/154639487 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      jSSubstitution0.clone();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) null);
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2282613660727364
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("5dj\bGLHmMw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(126, 124);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = (JSTerm)jSTerm0.clone();
      jSTerm2.add((Object) jSTerm3);
      jSTerm0.isGround();
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      jSTerm4.addAll((Collection) jSTerm2);
      JSTerm jSTerm5 = jSTerm1.cloneT();
      jSTerm0.applySubstitutionT((JSSubstitution) null);
      jSTerm5.toStr();
      jSTerm5.toStr();
      jSTerm3.toStr();
      // Undeclared exception!
      try { 
        jSTerm4.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1717730570529086
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      jSTerm1.addElement(jSTerm0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.standardizerTerm();
      jSTerm0.isGround();
      JSJshopVars.lessT = 0;
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm3.addAll((Collection) jSTerm1);
      jSTerm2.cloneT();
      jSTerm2.applySubstitutionT((JSSubstitution) null);
      // Undeclared exception!
      try { 
        jSTerm2.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7274635571421675
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.call();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm3 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0954096187023272
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution1);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("5dj\bGLHmMw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(126, 124);
      JSTerm jSTerm2 = new JSTerm();
      Object object0 = jSTerm0.clone();
      jSTerm2.add(object0);
      JSJshopVars.apostrophe = 124;
      jSTerm0.isGround();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm3.addAll((Collection) jSTerm2);
      jSTerm0.standardizerTerm();
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      jSTerm4.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      jSTerm0.add((Object) null);
      System.setCurrentTimeMillis((-1574));
      long long0 = 1010L;
      System.setCurrentTimeMillis(1010L);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution1);
      long long0 = 2904L;
      System.setCurrentTimeMillis(2904L);
      jSTerm0.setSize(37);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.4826782247437396
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oSc;{#$)^PH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isFunction();
      char[] charArray0 = new char[22];
      charArray0[0] = 'q';
      charArray0[1] = 'Q';
      jSTerm0.equals(jSTerm0);
      jSTerm0.isVariable();
      jSTerm0.isFunction();
      jSTerm0.isVariable();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.isGround();
      jSTerm1.equals(jSTerm0);
      jSTerm0.print();
      jSTerm0.toStr();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm2, jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm1.call();
      jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(");
      jSTerm0.addElement("(");
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.095164330358388
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.addElements(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution5);
      jSSubstitution1.add((Object) jSSubstitution4);
      jSSubstitution1.add((Object) null);
      jSSubstitution1.add((Object) "ff");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "A(>*{`(BHRPxl~O");
      jSSubstitution3.add((Object) jSSubstitution2);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution1.spliterator();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSTerm0.setSize(39);
      jSSubstitution8.listIterator();
      JSSubstitution jSSubstitution9 = jSTerm1.matches(jSTerm0, jSSubstitution4);
      assertTrue(jSSubstitution9.fail());
      
      JSSubstitution jSSubstitution10 = jSTerm0.matches(jSTerm1, jSSubstitution2);
      assertTrue(jSSubstitution10.fail());
      
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      assertTrue(jSTerm2.isFunction());
      
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertFalse(boolean0);
      assertTrue(jSTerm1.isFunction());
      assertNotSame(jSTerm1, jSTerm2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.954645866682635
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.addElements(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution2);
      jSSubstitution1.add((Object) jSSubstitution4);
      jSSubstitution1.add((Object) null);
      jSSubstitution1.add((Object) "ff");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution5);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution7.spliterator();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution6.listIterator();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.matches(jSTerm2, jSSubstitution7);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSTerm2.matches(jSTerm1, jSSubstitution10);
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9164648855394713
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      jSTerm1.addElement(jSTerm0);
      StringReader stringReader0 = new StringReader("min");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(43, 1);
      stringReader0.skip(1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.466421910340245
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      boolean boolean0 = jSTerm1.isGround();
      boolean boolean1 = jSTerm1.equals(jSTerm0);
      assertFalse(boolean1);
      
      jSTerm0.print();
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(5, stringBuffer0.length());
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSSubstitution2.fail());
      assertFalse(jSTerm1.isEval());
      
      StringReader stringReader0 = new StringReader("^:?{W!22");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = jSTerm1.call();
      assertTrue(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      
      jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      assertTrue(jSTerm3.isFunction());
      
      boolean boolean2 = jSTerm1.isFunction();
      assertTrue(boolean2 == boolean0);
      assertNotSame(jSTerm1, jSTerm2);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.coma = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.addElement(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9865302366210549
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?!d:@<3|A^~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1);
      stringReader0.read();
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("/");
      CharBuffer.allocate(111);
      jSSubstitution0.add((Object) stringReader1);
      JSTerm jSTerm2 = new JSTerm();
      jSSubstitution2.add((Object) "/");
      jSTerm1.call();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.spliterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0771015748862114
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution1);
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8996402463974724
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.addElements(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution2);
      jSSubstitution1.add((Object) jSSubstitution4);
      jSSubstitution1.add((Object) null);
      jSSubstitution1.add((Object) "ff");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      jSSubstitution3.add((Object) jSSubstitution2);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution1.spliterator();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution7.listIterator();
      JSSubstitution jSSubstitution8 = jSTerm1.matches(jSTerm0, jSSubstitution4);
      assertTrue(jSSubstitution8.fail());
      
      JSSubstitution jSSubstitution9 = jSTerm0.matches(jSTerm1, jSSubstitution2);
      assertFalse(jSSubstitution9.fail());
      
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      assertNotSame(jSTerm1, jSTerm2);
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "(";
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      int int0 = 1;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7274635571421673
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.addElements(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution2.add((Object) "k/4d");
      jSSubstitution3.add((Object) null);
      jSSubstitution3.add((Object) null);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.add((Object) "ff");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution2);
      jSSubstitution0.add((Object) jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.add((Object) jSSubstitution0);
      jSSubstitution6.spliterator();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution6.listIterator();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7170759801988817
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?!d:@<3|A^~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1);
      stringReader0.read();
      JSTerm jSTerm2 = new JSTerm();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) streamTokenizer0;
      objectArray0[1] = (Object) jSTerm2;
      objectArray0[2] = (Object) "?!d:@<3|A^~";
      objectArray0[3] = (Object) streamTokenizer0;
      objectArray0[4] = (Object) jSTerm2;
      jSTerm2.toArray(objectArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-1), 1467);
      JSTerm jSTerm3 = new JSTerm();
      System.setCurrentTimeMillis(2170);
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution2);
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.0507057264557456
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      StringReader stringReader0 = new StringReader("@;]n?#<KAkV;");
      StringReader stringReader1 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      jSTerm0.parseList(streamTokenizer0);
      StringReader stringReader2 = new StringReader("");
      stringReader0.close();
      stringReader2.ready();
      StringReader stringReader3 = null;
      try {
        stringReader3 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8891591637540217
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = ")I=BF\\7R{B";
      StringReader stringReader0 = new StringReader(")I=BF\u0007R{B");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.parseList(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.1010096288875433
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      jSTerm0.isGround();
      jSTerm0.standardizerTerm();
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.makeVariable();
      Object object0 = jSTerm0.lastElement();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      jSTerm1.removeIf(predicate3);
      System.setCurrentTimeMillis((-3480L));
      jSTerm1.cloneT();
      System.setCurrentTimeMillis((-3480L));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2o((wJO");
      char[] charArray0 = new char[9];
      charArray0[0] = 'v';
      charArray0[1] = '6';
      charArray0[2] = '6';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isVariable();
      JSJshopVars.VarCounter = (-1407);
      jSTerm0.makeVariable();
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[22];
      charArray0[0] = 'q';
      charArray0[1] = 'Q';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.addElements(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution2);
      jSSubstitution1.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution5.add((Object) jSSubstitution6);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution7);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution6.add((Object) jSSubstitution8);
      Object object0 = new Object();
      jSSubstitution5.add(object0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution7);
      jSSubstitution8.add((Object) "ff");
      Object object1 = new Object();
      Object object2 = jSTerm0.clone();
      jSTerm0.add(object2);
      System.setCurrentTimeMillis((-2001));
      System.setCurrentTimeMillis((-1112L));
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(10, stringBuffer0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6326309271543518
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?!d:@<3|A^~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer0.wordChars(1084, 1084);
      streamTokenizer0.pushBack();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      Predicate<Object> predicate6 = predicate2.and(predicate3);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate7.or(predicate6);
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<Object> predicate10 = predicate9.and(predicate3);
      predicate10.negate();
      predicate5.and(predicate10);
      predicate7.test(predicate5);
      predicate0.negate();
      jSTerm1.removeIf(predicate8);
      System.setCurrentTimeMillis(1L);
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.891053111376833
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.and(predicate0);
      Predicate<String> predicate3 = predicate1.or(predicate2);
      predicate3.or(predicate0);
      jSTerm0.removeIf(predicate0);
      StringReader stringReader0 = new StringReader("9^&BW9Z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm1);
      jSTerm0.isVariable();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isVariable();
      jSTerm2.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.321210524255372
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oSc;{#$)^PH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isFunction();
      JSJshopVars.leftPar = (-3);
      char[] charArray0 = new char[22];
      charArray0[0] = 'q';
      jSTerm0.iterator();
      charArray0[1] = 'Q';
      stringReader0.read(charArray0);
      jSTerm0.isEval();
      jSTerm0.isVariable();
      streamTokenizer0.wordChars(3842, 3842);
      jSTerm0.isFunction();
      jSTerm0.makeVariable();
      jSTerm0.toStr();
      jSTerm0.print();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0836422391499014
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?!d:@<3|A^~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm1);
      stringReader0.read();
      stringReader0.ready();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.631345420808597
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("HBxk&AuYYa}e{u*N");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.commentChar((-3));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.ensureCapacity((-3));
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.095164330358388
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      jSTerm0.removeIf(predicate3);
      jSTerm0.add((Object) "5BFxM9.Oovx!0Cu2");
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      boolean boolean0 = jSTerm2.equals(jSTerm1);
      assertTrue(boolean0);
      
      Predicate.isEqual((Object) jSTerm3);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) jSTerm2);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.or(predicate5);
      Predicate<Object> predicate7 = predicate5.or(predicate4);
      Predicate<Object> predicate8 = predicate7.and(predicate5);
      predicate5.and(predicate6);
      predicate4.and(predicate8);
      Predicate<Object> predicate9 = predicate8.or(predicate4);
      Predicate<Object> predicate10 = predicate4.negate();
      predicate7.and(predicate4);
      Predicate<Object> predicate11 = predicate10.or(predicate8);
      predicate9.or(predicate11);
      predicate6.negate();
      predicate10.or(predicate5);
      Predicate<Object> predicate12 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate13 = predicate12.and(predicate6);
      predicate13.negate();
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm4 = jSTerm2.cloneT();
      assertNotSame(jSTerm4, jSTerm2);
      assertTrue(jSTerm4.isFunction());
      
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm5 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm5.isEval());
      assertTrue(jSTerm5.isFunction());
      assertNotSame(jSTerm1, jSTerm5);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.287018723488629
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?!d:@<3|A^~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.isConstant());
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1);
      assertFalse(jSSubstitution2.isEmpty());
      
      JSJshopVars.percent = 101;
      boolean boolean0 = jSTerm1.isGround();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      boolean boolean1 = jSTerm1.equals(jSTerm0);
      assertTrue(boolean1 == boolean0);
      
      JSTerm jSTerm3 = jSTerm2.cloneT();
      assertFalse(jSTerm3.isFunction());
      assertTrue(jSTerm3.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[?%%%0]", jSTerm2.toString());
      assertNotSame(jSTerm3, jSTerm2);
      assertFalse(jSTerm3.isEval());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oSc;{#$)^PH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(44);
      streamTokenizer0.eolIsSignificant(false);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.ensureCapacity(43);
      streamTokenizer1.eolIsSignificant(false);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0317671113505356
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("eH`CG`e 8<");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-1), 19);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.wordChars(1663, 59);
      System.setCurrentTimeMillis((-1558));
      System.setCurrentTimeMillis((-2985L));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.0005073917883625
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("5dj\bGLHmMw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(126, 124);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      Object object0 = jSTerm0.clone();
      jSTerm2.add(object0);
      stringReader0.mark(124);
      jSTerm2.isConstant();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm3.addAll((Collection) jSTerm2);
      jSTerm1.cloneT();
      jSTerm0.applySubstitutionT((JSSubstitution) null);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.0801083373195324
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.addElements(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution5);
      jSSubstitution4.assignFailure();
      jSSubstitution4.add((Object) jSSubstitution2);
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("4%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution6);
      JSTerm jSTerm2 = jSTerm1.call();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution8.spliterator();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution6.listIterator();
      JSSubstitution jSSubstitution10 = jSTerm0.matches(jSTerm1, jSSubstitution8);
      assertTrue(jSSubstitution10.fail());
      
      JSSubstitution jSSubstitution11 = jSTerm1.matches(jSTerm2, jSSubstitution9);
      assertNotSame(jSSubstitution11, jSSubstitution9);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSSubstitution11.fail());
      
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution5);
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEval());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.4205719259467042
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("HBxk&AuYYa}e{u*N");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      stringReader0.skip((-2245L));
      streamTokenizer0.resetSyntax();
      StringReader stringReader1 = new StringReader("pPi");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.quoteChar(63);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals("[%%%]", jSTerm1.toString());
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.isConstant());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1192809219098505
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeConstant();
      jSTerm0.equals(jSTerm1);
      StringReader stringReader0 = new StringReader("O@y]l?#AKAkV;");
      JSTerm jSTerm2 = new JSTerm();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isConstant();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.180136323865172
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.isGround();
      JSJshopVars.astherisk = 1;
      StringReader stringReader0 = new StringReader("5dj\bGLHmMw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(126, 124);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = (JSTerm)jSTerm0.clone();
      jSTerm2.add((Object) jSTerm3);
      jSTerm0.isGround();
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      jSTerm4.addAll((Collection) jSTerm2);
      jSTerm1.cloneT();
      assertEquals("[[]]", jSTerm0.toString());
      
      jSTerm0.applySubstitutionT((JSSubstitution) null);
      jSTerm0.matches(jSTerm4, (JSSubstitution) null);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      jSTerm5.matches(jSTerm3, jSSubstitution1);
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1988493129136213
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEval());
      assertEquals(4, stringBuffer0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[5];
      int int0 = 1084;
      objectArray0[0] = (Object) "%";
      Predicate.isEqual(objectArray0[3]);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "+I=BF\\7R{B";
      int int0 = 494;
      StringReader stringReader0 = new StringReader("+I=BF\u0007R{B");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution5.clone();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution7.removeAll(jSSubstitution3);
      jSSubstitution5.add((Object) jSSubstitution7);
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.4548671092662881
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("word");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.equals(jSTerm1);
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("JSTerm: Error reading control parameters: ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = jSTerm0.clone();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      Predicate<Object> predicate5 = predicate3.or(predicate1);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate6.or(predicate5);
      predicate1.negate();
      Predicate<Object> predicate8 = Predicate.isEqual((Object) jSSubstitution2);
      Predicate<Object> predicate9 = predicate4.or(predicate8);
      Predicate<Object> predicate10 = predicate2.and(predicate9);
      predicate7.negate();
      jSTerm0.removeIf(predicate10);
      System.setCurrentTimeMillis(1454L);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.wordChars((-945), 1041);
      streamTokenizer0.lowerCaseMode(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis(1041);
      jSTerm0.call();
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.capacity());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      StringReader stringReader0 = new StringReader("Kjwy*Y'Jx]!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      predicate5.and(predicate6);
      predicate3.negate();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeIf(predicate3);
      System.setCurrentTimeMillis((-1));
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0905994737794786
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "YBF-7 .B";
      int int0 = 494;
      StringReader stringReader0 = new StringReader("YBF-7 .B");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("(fGHG.k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(fGHG.k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "+I=BF\\7R{B";
      int int0 = 475;
      StringReader stringReader0 = new StringReader("+I=BF\u0007R{B");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
