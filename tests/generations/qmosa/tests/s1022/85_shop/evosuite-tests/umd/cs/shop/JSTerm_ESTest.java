/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 05:12:36 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "%k}C^";
      StringReader stringReader0 = new StringReader("%k}C^");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, (-4), 1483);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6681625205102782
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(z7Ds|]e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.greaterT = (-4);
      Object object0 = new Object();
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm2 = new JSTerm();
      Predicate.isEqual(object0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0714137841699203
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("QmU:G!:)Ri");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.add((Object) "QmU:G!:)Ri");
      StringReader stringReader1 = new StringReader("QmU:G!:)Ri");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      jSTerm1.addElement(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.addElement(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm2.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "osc;0");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.8840374587913358
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?!d:@<3|A^~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.isConstant());
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution3);
      JSJshopVars.leftBrac = (-1);
      JSJshopVars.leftPar = 63;
      StringReader stringReader1 = new StringReader("Line : ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = jSTerm1.call();
      JSJshopVars.dot = (-1);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      System.setCurrentTimeMillis(0L);
      streamTokenizer1.sval = "";
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      JSTerm jSTerm5 = jSTerm3.cloneT();
      jSTerm5.equals(jSTerm4);
      assertTrue(jSTerm5.isVariable());
      
      JSTerm jSTerm6 = jSTerm4.call();
      jSTerm6.trimToSize();
      assertEquals("[?%%%0]", jSTerm6.toString());
      
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm3, jSSubstitution2);
      assertFalse(jSSubstitution4.fail());
      assertNotSame(jSTerm3, jSTerm5);
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSSubstitution2.isEmpty());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7326753271563504
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?!d:@<3|A^~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1);
      jSTerm1.matches(jSTerm0, jSSubstitution2);
      JSJshopVars.leftPar = 63;
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("Line : ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = jSTerm1.call();
      stringReader1.skip((-2341L));
      streamTokenizer1.ttype = 2802;
      JSJshopVars.dot = (-1);
      jSTerm2.standardizerTerm();
      jSTerm2.matches(jSTerm0);
      jSTerm2.call();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm1.elementAt((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      StringReader stringReader0 = new StringReader("4%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate3.or(predicate1);
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate4.negate();
      Predicate<Object> predicate10 = predicate6.negate();
      Predicate<Object> predicate11 = predicate1.and(predicate9);
      Predicate<Object> predicate12 = predicate11.negate();
      predicate2.negate();
      predicate2.negate();
      Predicate<Object> predicate13 = predicate5.or(predicate3);
      predicate13.negate();
      predicate2.and(predicate4);
      predicate12.negate();
      Predicate<Object> predicate14 = predicate0.or(predicate6);
      predicate2.or(predicate8);
      predicate14.test("4%");
      predicate14.or(predicate10);
      jSTerm0.removeIf(predicate7);
      System.setCurrentTimeMillis(1053L);
      Object object0 = jSTerm0.clone();
      jSTerm0.addElement(object0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("(4% (4% ))", stringBuffer0.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate2.or(predicate0);
      Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate0.and(predicate6);
      Predicate<Object> predicate9 = predicate8.negate();
      predicate1.negate();
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate3.negate();
      Predicate<Object> predicate12 = predicate0.negate();
      Predicate<Object> predicate13 = predicate4.or(predicate2);
      predicate13.negate();
      predicate13.negate();
      predicate1.and(predicate3);
      Predicate<Object> predicate14 = predicate9.negate();
      predicate1.or(predicate5);
      predicate12.negate();
      predicate10.test("4%");
      Predicate<Object> predicate15 = predicate2.or(predicate7);
      predicate2.or(predicate14);
      predicate2.or(predicate15);
      predicate7.negate();
      predicate11.negate();
      jSTerm0.addElement("4%");
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate3.or(predicate1);
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate7 = predicate1.negate();
      Predicate<Object> predicate8 = predicate4.negate();
      Predicate<Object> predicate9 = predicate6.negate();
      Predicate<Object> predicate10 = predicate1.and(predicate8);
      Predicate<Object> predicate11 = predicate10.negate();
      predicate2.negate();
      predicate11.negate();
      predicate4.negate();
      Predicate<Object> predicate12 = predicate1.negate();
      Predicate<Object> predicate13 = predicate5.or(predicate3);
      Predicate<Object> predicate14 = predicate13.negate();
      predicate13.negate();
      predicate2.and(predicate4);
      predicate11.negate();
      Predicate<Object> predicate15 = predicate0.or(predicate6);
      predicate2.or(predicate7);
      predicate12.negate();
      predicate15.test("4%");
      Predicate<Object> predicate16 = predicate15.or(predicate9);
      predicate3.or(predicate16);
      Predicate<Object> predicate17 = predicate14.negate();
      predicate17.or(predicate3);
      long long0 = 0L;
      predicate2.negate();
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6162766571369467
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      StringReader stringReader0 = new StringReader("4%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSSubstitution1.addElement("4%");
      JSJshopVars.greaterT = 61;
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.call();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) streamTokenizer0;
      jSSubstitution1.iterator();
      objectArray0[1] = (Object) jSSubstitution1;
      objectArray0[2] = (Object) jSTerm2;
      objectArray0[2] = (Object) jSTerm2;
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution3.add(object0);
      jSSubstitution3.add((Object) jSSubstitution0);
      jSSubstitution2.addElement(jSSubstitution3);
      jSSubstitution2.assignFailure();
      jSSubstitution1.add((Object) jSSubstitution2);
      streamTokenizer0.resetSyntax();
      objectArray0[4] = (Object) jSSubstitution0;
      jSSubstitution0.iterator();
      objectArray0[5] = (Object) jSTerm2;
      jSTerm2.toArray(objectArray0);
      JSSubstitution jSSubstitution4 = jSTerm0.matches(jSTerm2, jSSubstitution1);
      jSSubstitution4.add((Object) jSSubstitution0);
      jSSubstitution4.add((Object) stringReader0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution6.sort(comparator0);
      jSTerm0.applySubstitutionT(jSSubstitution6);
      assertEquals("[4%, [4.0]]", jSTerm0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7159187440703665
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      StringReader stringReader0 = new StringReader("4%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm2.equals(jSTerm3);
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = new JSTerm();
      JSTerm jSTerm7 = jSTerm4.applySubstitutionT(jSSubstitution0);
      jSTerm1.cloneT();
      jSTerm7.print();
      JSJshopVars.percent = (-41);
      // Undeclared exception!
      try { 
        jSTerm5.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.retainAll(jSSubstitution0);
      jSTerm0.add((Object) "4%");
      StringReader stringReader0 = new StringReader("4%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.lastElement();
      jSSubstitution1.add((Object) "4%");
      jSSubstitution1.add(1, (Object) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution1);
      jSSubstitution0.trimToSize();
      jSSubstitution0.removeAllElements();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.715410810507257
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      StringReader stringReader0 = new StringReader("4%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      JSJshopVars.minus = (-28);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm2.equals(jSTerm3);
      jSTerm0.standardizerTerm();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7169585585338787
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      StringReader stringReader0 = new StringReader("4%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.addAll((Collection) jSTerm1);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm2.equals(jSTerm3);
      jSTerm0.standardizerTerm();
      JSTerm jSTerm4 = new JSTerm();
      JSJshopVars.verticalL = (-2);
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("?");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "?!d:@<3|A^~");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate2.negate();
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Predicate<Object> predicate5 = predicate0.negate();
      predicate4.negate();
      Predicate<Object> predicate6 = predicate1.negate();
      predicate5.or(predicate6);
      predicate2.negate();
      predicate5.and(predicate1);
      predicate2.negate();
      Predicate<Object> predicate7 = predicate5.negate();
      predicate0.or(predicate2);
      predicate7.or(predicate0);
      predicate3.or(predicate7);
      predicate7.negate();
      predicate4.and(predicate0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6210811289767744
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.setSize(95);
      jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm2.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      StringReader stringReader0 = new StringReader("");
      jSTerm0.add((Object) stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      String string0 = "4%";
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      jSTerm0.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      jSTerm0.addElement((Object) null);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8430808829172722
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("?!d:@<3|A^~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSJshopVars.leftPar = 63;
      StringReader stringReader1 = new StringReader("Line : ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = jSTerm0.call();
      JSJshopVars.dot = (-1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis(0L);
      streamTokenizer1.sval = "";
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      JSTerm jSTerm4 = jSTerm2.cloneT();
      jSTerm4.equals(jSTerm3);
      jSTerm3.applySubstitutionT(jSSubstitution0);
      JSJshopVars.equalT = (-3799);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3328667803294962
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      StringReader stringReader0 = new StringReader("4%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.cloneT();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.618264329520064
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      StringReader stringReader0 = new StringReader("4%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm0.isGround();
      jSTerm2.isGround();
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) jSTerm2;
      objectArray0[2] = (Object) jSTerm2;
      jSTerm0.toArray(objectArray0);
      Object object1 = new Object();
      jSSubstitution0.add(object1);
      objectArray0[3] = (Object) streamTokenizer0;
      jSTerm0.toArray(objectArray0);
      assertEquals("[4%, [4.0]]", jSTerm0.toString());
      
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      jSTerm3.sort(comparator0);
      jSTerm0.standardizerTerm();
      assertTrue(jSTerm0.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.trimToSize();
      jSSubstitution1.removeAllElements();
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7157804763737263
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?!d:@<3|A^~");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution3);
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      JSJshopVars.leftPar = 63;
      StringReader stringReader1 = new StringReader("Line : ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = jSTerm1.call();
      JSJshopVars.VarCounter = (-4);
      JSJshopVars.dot = (-1);
      System.setCurrentTimeMillis(0L);
      streamTokenizer1.nval = (double) 63;
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(");
      jSTerm0.addElement("(");
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1824083218150143
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?!d:@<3|A^~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.matches(jSTerm2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.matches(jSTerm1, jSSubstitution2);
      StringReader stringReader1 = new StringReader(" B");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution2);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.negate();
      predicate0.and(predicate1);
      predicate0.or(predicate1);
      Predicate<Object> predicate2 = predicate0.negate();
      predicate2.or(predicate1);
      predicate2.negate();
      jSTerm2.removeIf(predicate2);
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.928551319792604
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      StringReader stringReader0 = new StringReader("4%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "4%");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate0.and(predicate4);
      Predicate<Object> predicate6 = predicate5.or(predicate3);
      Predicate<Object> predicate7 = predicate3.and(predicate4);
      predicate4.and(predicate7);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<String> predicate8 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<String> predicate9 = predicate8.and(predicate6);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) "PhBw");
      Predicate<Object> predicate11 = predicate10.and(predicate3);
      Predicate<String> predicate12 = predicate9.or(predicate11);
      predicate9.negate();
      predicate9.test("Iz816nz &]");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate.isEqual((Object) null);
      predicate9.or(predicate11);
      predicate12.and(predicate4);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) predicate0;
      jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm0, jSSubstitution3);
      assertTrue(jSSubstitution4.fail());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.371009934441713
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSTerm2;
      objectArray0[1] = (Object) "4%";
      objectArray0[2] = (Object) "4%";
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[4] = (Object) jSTerm2;
      objectArray0[5] = (Object) jSTerm2;
      objectArray0[6] = (Object) "4%";
      jSTerm0.toArray(objectArray0);
      jSTerm1.removeAllElements();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = jSTerm1.clone();
      jSSubstitution1.add(object0);
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.216825259269827
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.call();
      assertFalse(jSTerm2.isVariable());
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution2 = jSTerm3.matches(jSTerm2, jSSubstitution0);
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3609093299839157
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      jSTerm1.addElement(jSTerm0);
      StringReader stringReader0 = new StringReader("min");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(43, 1);
      stringReader0.skip(1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.7577028597996445
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm1.equals(jSTerm0);
      JSEvaluate.numericValue(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addAll((Collection) jSTerm2);
      jSTerm2.cloneT();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.call();
      JSTerm jSTerm4 = jSTerm3.call();
      JSTerm jSTerm5 = jSTerm3.standardizerTerm();
      jSTerm4.cloneT();
      jSTerm4.cloneT();
      jSTerm5.isFunction();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.073569673809442
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.addAll((Collection) jSTerm1);
      jSTerm1.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.call();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8730291164911108
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("?!d:@<3|A^~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate0.and(predicate1);
      Predicate<Object> predicate8 = predicate6.or(predicate4);
      Predicate.isEqual((Object) predicate0);
      predicate7.or(predicate6);
      Predicate<Object> predicate9 = predicate2.negate();
      predicate5.or(predicate9);
      Predicate<Object> predicate10 = predicate4.negate();
      Predicate<Object> predicate11 = predicate1.and(predicate7);
      predicate1.and(predicate6);
      jSTerm0.removeIf(predicate8);
      jSTerm0.clone();
      Predicate<String> predicate12 = Predicate.isEqual((Object) jSTerm0);
      Predicate<String> predicate13 = predicate12.negate();
      Predicate<String> predicate14 = predicate12.or(predicate6);
      Predicate<String> predicate15 = predicate13.and(predicate6);
      Predicate<String> predicate16 = predicate15.or(predicate7);
      Predicate<String> predicate17 = predicate14.negate();
      predicate17.and(predicate11);
      predicate16.negate();
      jSTerm0.removeIf(predicate10);
      jSTerm0.call();
      System.setCurrentTimeMillis(4094L);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7-M6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = 61;
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply(": ");
      Function<Object, Object> function0 = Function.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      predicate3.and(predicate1);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate5.or(predicate1);
      Predicate<Object> predicate7 = predicate5.negate();
      predicate3.negate();
      Predicate.isEqual((Object) function0);
      predicate4.or(predicate7);
      predicate7.negate();
      predicate5.or(predicate2);
      Predicate<Object> predicate8 = predicate4.and(predicate5);
      Predicate<Object> predicate9 = predicate6.and(predicate1);
      Predicate<Object> predicate10 = predicate4.and(predicate8);
      Predicate<Object> predicate11 = predicate6.and(predicate8);
      predicate9.and(predicate11);
      Predicate<Object> predicate12 = predicate10.negate();
      predicate12.or(predicate4);
      System.setCurrentTimeMillis((-1249L));
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.633992576588519
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution1);
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.print();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6027306293002797
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      Predicate<Object> predicate5 = predicate0.or(predicate2);
      Predicate<Object> predicate6 = predicate1.and(predicate3);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate5.or(predicate1);
      Predicate<Object> predicate10 = predicate3.negate();
      Predicate.isEqual((Object) predicate4);
      predicate10.negate();
      predicate4.negate();
      Predicate<Object> predicate11 = predicate8.negate();
      predicate9.and(predicate10);
      predicate5.negate();
      predicate11.or(predicate10);
      Predicate<Object> predicate12 = predicate0.negate();
      Predicate<Object> predicate13 = predicate3.negate();
      Predicate.isEqual((Object) predicate10);
      Predicate<Object> predicate14 = predicate7.or(predicate5);
      Predicate<Object> predicate15 = predicate2.negate();
      predicate11.or(predicate13);
      predicate12.and(predicate6);
      predicate3.and(predicate15);
      predicate14.and(predicate5);
      predicate0.and(predicate4);
      predicate3.negate();
      predicate3.or(predicate4);
      System.setCurrentTimeMillis(1068L);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      assertFalse(jSSubstitution1.fail());
      
      JSTerm jSTerm3 = jSTerm2.cloneT();
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm3, jSTerm2);
      assertTrue(jSTerm2.isFunction());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.2089450386236487
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution2);
      JSTerm jSTerm1 = jSTerm0.call();
      jSSubstitution0.listIterator();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7746220293562738
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("RSijiiYj)yqTw9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.apply("4%");
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function1 = unaryOperator1.andThen((Function<? super String, ? extends Integer>) function0);
      unaryOperator0.andThen((Function<? super String, ?>) function1);
      unaryOperator0.apply("4%");
      Function.identity();
      UnaryOperator.identity();
      unaryOperator0.apply(") ");
      jSTerm1.replaceAll(unaryOperator0);
      jSTerm0.parseList(streamTokenizer0);
      System.setCurrentTimeMillis((-3478L));
      System.setCurrentTimeMillis((-245L));
      stringReader0.markSupported();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.782019572767355
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("t)oqXgZ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.replaceAll(unaryOperator0);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function3 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      unaryOperator2.compose((Function<? super Integer, ? extends String>) function3);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Object, ?>) unaryOperator3);
      Function<Object, String> function4 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Integer integer0 = new Integer((-2));
      function3.apply(integer0);
      unaryOperator2.andThen((Function<? super String, ? extends String>) function4);
      unaryOperator2.apply((String) null);
      Function.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      streamTokenizer0.wordChars(1483, 1757);
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator4);
      jSTerm0.parseList(streamTokenizer0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(484L);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2o((wJO");
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = '6';
      charArray0[2] = '6';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isVariable();
      jSTerm0.makeVariable();
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(z7Ds|]e");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function<String, Object> function0 = (Function<String, Object>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ?>) function0);
      unaryOperator0.apply("(z7Ds|]e");
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply("");
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.233869742961962
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.and(predicate0);
      predicate1.and(predicate2);
      Predicate<String> predicate3 = predicate1.or(predicate2);
      predicate3.or(predicate0);
      jSTerm0.removeIf(predicate0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.plus = 1739;
      jSTerm1.isVariable();
      jSTerm1.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6036051515160747
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7-M6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      UnaryOperator.identity();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0647549344121345
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("?!d:@<3|A^~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSJshopVars.leftPar = 63;
      StringReader stringReader1 = new StringReader("ine :A");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm1 = jSTerm0.call();
      Object object0 = jSTerm0.clone();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      Predicate<Object> predicate5 = predicate0.negate();
      predicate0.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate5.or(predicate6);
      predicate7.negate();
      Predicate<Object> predicate9 = predicate8.negate();
      predicate9.and(predicate4);
      jSTerm0.removeIf(predicate8);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      
      jSTerm1.print();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.print();
      jSTerm1.print();
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      jSSubstitution0.add((Object) null);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addElement((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(boolean0);
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5296847785508279
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7-M6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      JSJshopVars.dot = (-2);
      unaryOperator1.apply(": ");
      Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.apply("*@n9>oWITz8");
      jSTerm0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.5182849661002162
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      StringReader stringReader0 = new StringReader("4%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.isConstant();
      jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm4.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.671559362625269
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7-M6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = 61;
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Iterator iterator0 = jSSubstitution0.iterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.addElement(iterator0);
      jSSubstitution2.assignFailure();
      jSSubstitution2.add((Object) stringReader0);
      streamTokenizer0.resetSyntax();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) streamTokenizer0;
      objectArray0[1] = (Object) iterator0;
      objectArray0[2] = (Object) jSSubstitution1;
      objectArray0[3] = (Object) "7-M6";
      objectArray0[4] = (Object) streamTokenizer0;
      objectArray0[5] = (Object) jSSubstitution2;
      objectArray0[6] = (Object) jSTerm1;
      objectArray0[7] = (Object) jSSubstitution0;
      objectArray0[8] = (Object) jSTerm1;
      jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution2);
      jSTerm0.lastElement();
      jSSubstitution3.add((Object) "7.0");
      assertEquals(2, jSSubstitution2.size());
      
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm4.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.669437548207739
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.7800751083389295
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4%");
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis((-1493L));
      jSTerm1.standardizerTerm();
      jSTerm3.cloneT();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution1);
      jSTerm4.makeConstant();
      assertTrue(jSTerm4.isConstant());
      
      JSTerm jSTerm5 = jSTerm3.standardizerTerm();
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm5.isConstant());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      assertTrue(jSTerm0.isEval());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isConstant();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.8053415898278653
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "oSc;{#$)^PH";
      StringReader stringReader0 = new StringReader("oSc;{#$)^PH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isFunction();
      char[] charArray0 = new char[22];
      charArray0[0] = 'q';
      charArray0[1] = 'Q';
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1901673943042492
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("nu8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isVariable();
      Object object0 = new Object();
      JSTerm jSTerm2 = new JSTerm();
      Predicate.isEqual((Object) streamTokenizer0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm3.isEval());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.4885973268049364
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("?%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) ")TSX|Ix BKn%nbK");
      jSTerm0.standardizerTerm();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.equals(jSTerm1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.5874961153740297
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?!d:@<3|A^~");
      jSTerm0.add((Object) "?!d:@<3|A^~");
      StringReader stringReader1 = new StringReader("Expecting constant symbol as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) null);
      jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.equals(jSTerm0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.181974105575327
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?!d:@<3|A^~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution2);
      JSJshopVars.leftPar = 63;
      StringReader stringReader1 = new StringReader("Line : ");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution3);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate0.or(predicate4);
      predicate1.negate();
      jSTerm1.removeIf(predicate4);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "5O/z;x8dhQBv/u");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate1.or(predicate3);
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate5.negate();
      predicate6.and(predicate8);
      Predicate<Object> predicate9 = predicate2.or(predicate8);
      JSTerm jSTerm1 = new JSTerm();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) predicate6;
      objectArray0[1] = (Object) predicate6;
      objectArray0[2] = (Object) predicate7;
      objectArray0[3] = (Object) predicate0;
      objectArray0[4] = (Object) predicate5;
      objectArray0[5] = (Object) predicate3;
      objectArray0[6] = (Object) predicate6;
      objectArray0[7] = (Object) predicate9;
      objectArray0[8] = (Object) predicate5;
      jSTerm1.toArray(objectArray0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.0739200498340806
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7-M6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.wordChars((-479), (-479));
      streamTokenizer0.whitespaceChars(37, (-2));
      streamTokenizer0.lowerCaseMode(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      System.setCurrentTimeMillis(37);
      System.setCurrentTimeMillis((-2));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      long long0 = 0L;
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?!d:@<3|A^~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.leftPar = 63;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "osc;0");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate0.negate();
      predicate3.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate6 = predicate5.or(predicate2);
      predicate6.negate();
      predicate0.and(predicate1);
      jSTerm0.removeIf(predicate4);
      System.setCurrentTimeMillis((-1));
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.addElement(jSSubstitution2);
      jSTerm1.toStr();
      assertEquals("[?%%%, []]", jSTerm1.toString());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.9982695885852573
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7-M6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = 61;
      stringReader0.markSupported();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate0.and(predicate1);
      Predicate<Object> predicate6 = predicate5.or(predicate2);
      Predicate<Object> predicate7 = predicate4.or(predicate5);
      predicate3.negate();
      predicate4.test(predicate2);
      Predicate<Object> predicate8 = predicate5.or(predicate6);
      predicate8.or(predicate5);
      Predicate<Object> predicate9 = predicate2.negate();
      predicate9.or(predicate4);
      Predicate<Object> predicate10 = predicate7.negate();
      Predicate<Object> predicate11 = predicate2.and(predicate4);
      predicate1.negate();
      predicate10.and(predicate8);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeIf(predicate11);
      predicate2.negate();
      Predicate<Object> predicate12 = predicate4.or(predicate0);
      predicate12.negate();
      jSTerm0.addElement("Vcr(##N)\"L11]ifw");
      jSTerm0.toStr();
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply(": ");
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator0.compose((Function<? super Integer, ? extends String>) function1);
      Function.identity();
      unaryOperator0.apply("zwYR}3M<W\"");
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.percent = 40;
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j>?v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply(": ");
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.apply("*@n9>oWITz8");
      jSTerm0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.498884008557752
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.2563640070887918
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "5O/z;x8dhQBv/u");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      predicate5.test(predicate6);
      Predicate<Object> predicate7 = predicate4.negate();
      Predicate<Object> predicate8 = predicate5.and(predicate7);
      predicate2.or(predicate7);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate8);
      predicate4.or(predicate9);
      Predicate<Object> predicate10 = predicate5.or(predicate3);
      predicate5.or(predicate4);
      predicate3.negate();
      predicate7.and(predicate10);
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("5O/z;x8dhQBv/u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm1.isEval());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.2931300021708616
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      System.setCurrentTimeMillis(37L);
      StringReader stringReader0 = new StringReader("OoG'Ko#x~tZR29x");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightBrac = 59;
      boolean boolean0 = jSTerm0.equals(jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.9459959973559475
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "nu8");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.and(predicate1);
      Predicate<Object> predicate6 = predicate1.and(predicate0);
      Predicate<Object> predicate7 = predicate4.or(predicate3);
      predicate1.negate();
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate3.negate();
      Predicate<Object> predicate10 = predicate5.negate();
      predicate8.negate();
      Predicate<Object> predicate11 = predicate1.negate();
      predicate9.negate();
      Predicate<Object> predicate12 = predicate11.and(predicate1);
      predicate4.and(predicate11);
      predicate9.negate();
      Predicate<Object> predicate13 = predicate1.and(predicate10);
      Predicate<Object> predicate14 = predicate4.or(predicate2);
      Predicate<Object> predicate15 = predicate2.or(predicate3);
      Predicate<Object> predicate16 = predicate12.negate();
      predicate13.test(predicate12);
      predicate6.or(predicate13);
      Predicate<Object> predicate17 = predicate14.or(predicate9);
      Predicate<Object> predicate18 = predicate5.negate();
      predicate17.and(predicate18);
      predicate10.or(predicate16);
      predicate7.negate();
      predicate3.and(predicate15);
      predicate14.negate();
      predicate7.negate();
      predicate3.or(predicate6);
      System.setCurrentTimeMillis(372L);
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("nu8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.8872385926133708
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("osc;0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis((-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm1.isConstant());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.ensureCapacity((-2017));
      JSJshopVars.equalT = (-2017);
      JSJshopVars.dot = (-1);
      JSJshopVars.semicolon = (-1);
      JSJshopVars.coma = (-1);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.880393903784036
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(z7Ds|]e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.makeVariable();
      Object object0 = new Object();
      JSTerm jSTerm2 = new JSTerm();
      Predicate.isEqual((Object) jSTerm0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.2700203387932727
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?!d:@<3|A^~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.addElement((Object) null);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.firstElement();
      jSTerm0.addElement("?%%%");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution4);
      assertEquals("[?%%%]", jSTerm3.toString());
      assertTrue(jSTerm3.isVariable());
      assertFalse(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isFunction());
      assertNotSame(jSTerm3, jSTerm1);
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mXInY0dI}.r");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "43%");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.and(predicate1);
      Predicate<Object> predicate6 = predicate1.and(predicate0);
      Predicate<Object> predicate7 = predicate4.or(predicate3);
      predicate1.negate();
      predicate1.negate();
      Predicate<Object> predicate8 = predicate3.negate();
      Predicate<Object> predicate9 = predicate5.negate();
      Predicate<Object> predicate10 = predicate4.negate();
      Predicate<Object> predicate11 = predicate1.negate();
      Predicate<Object> predicate12 = predicate11.and(predicate1);
      predicate10.negate();
      Predicate<Object> predicate13 = predicate1.and(predicate9);
      Predicate<Object> predicate14 = predicate4.or(predicate2);
      Predicate<Object> predicate15 = predicate2.or(predicate3);
      Predicate<Object> predicate16 = predicate12.negate();
      predicate13.test(predicate12);
      predicate6.or(predicate13);
      predicate14.or(predicate8);
      predicate5.negate();
      predicate9.or(predicate16);
      predicate7.negate();
      predicate10.or(predicate12);
      predicate13.negate();
      predicate14.and(predicate4);
      predicate15.and(predicate11);
      predicate4.negate();
      predicate2.or(predicate9);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.whitespaceChars((-1209), (-1209));
      streamTokenizer0.lowerCaseMode(true);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("osc;");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader("HBxk&AuYYa}e{u*N");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.commentChar((-3));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.ensureCapacity((-3));
      System.setCurrentTimeMillis((-3));
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "5O/z;x8dhQBv/u");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate4.negate();
      Predicate<Object> predicate8 = predicate5.and(predicate7);
      predicate2.or(predicate7);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate8);
      predicate4.or(predicate9);
      predicate4.negate();
      predicate7.and(predicate0);
      Predicate<String> predicate10 = Predicate.isEqual((Object) predicate2);
      Predicate<String> predicate11 = predicate10.and(predicate3);
      predicate11.test("GFBFGFMd'");
      Predicate.isEqual((Object) predicate0);
      predicate10.and(predicate6);
      jSTerm0.removeIf(predicate5);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      System.setCurrentTimeMillis(37L);
      StringReader stringReader0 = new StringReader("OoG'Ko#x~tZR29x");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply(": ");
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator0.compose((Function<? super Integer, ? extends String>) function1);
      Function.identity();
      unaryOperator0.apply("zwYR}3M<W\"");
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.percent = 40;
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      StringReader stringReader1 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      System.setCurrentTimeMillis(32);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSJshopVars.leftPar = 63;
      StringReader stringReader0 = new StringReader("8o\"oKn,z'bF");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(3248);
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.5296847785508279
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7-M6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      unaryOperator1.apply(": ");
      Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.apply("*@n9>oWITz8");
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.3093517394969356
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(\"70s|]e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function1);
      jSTerm0.replaceAll(unaryOperator0);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Integer, String> function2 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.compose((Function<? super Integer, ? extends String>) function2);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function4 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function3);
      unaryOperator2.andThen((Function<? super String, ? extends String>) function4);
      unaryOperator2.apply("(\"70s|]e");
      Function.identity();
      UnaryOperator.identity();
      streamTokenizer0.wordChars(1483, 1483);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator4);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
