/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 20:58:28 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9913464134109882
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "noW";
      jSTerm0.add((Object) "noW");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.trimToSize();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      Integer integer0 = new Integer((-366172151));
      JSPredicateForm jSPredicateForm4 = jSPredicateForm3.standarizerPredicateForm();
      jSPredicateForm3.addElement(jSTerm0);
      jSPredicateForm3.clonePF();
      jSPredicateForm2.retainAll(jSPredicateForm1);
      jSPredicateForm3.matches(jSPredicateForm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.removeAllElements();
      jSPredicateForm0.matches(jSPredicateForm3, jSSubstitution0);
      jSPredicateForm4.equals((JSPredicateForm) jSTerm0);
      jSPredicateForm3.clone();
      // Undeclared exception!
      try { 
        jSPredicateForm3.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm0.firstElement();
      jSTerm0.isGround();
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.equals(jSTerm0);
      jSTerm0.addAll((Collection) jSTerm0);
      jSTerm0.trimToSize();
      jSTerm0.removeAll(jSTerm0);
      jSTerm0.addAll((Collection) jSTerm0);
      jSTerm0.removeElement(jSTerm0);
      jSTerm0.ensureCapacity((-2544));
      jSTerm0.removeAllElements();
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.removeElement("not");
      jSTerm0.makeEval(false);
      jSTerm0.containsAll(jSTerm0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator0);
      StringReader stringReader0 = new StringReader("(bv 4fw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-1437829375), 1920);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) ";=Xj%/uS%9c");
      jSTerm0.clone();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.spliterator();
      jSTerm1.add((Object) jSTerm1);
      jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.equals(jSTerm0);
      Integer integer0 = new Integer((-612));
      Integer integer1 = new Integer((-1487));
      Integer integer2 = new Integer(1605);
      Integer integer3 = new Integer((-1119));
      Integer integer4 = new Integer(1605);
      Integer integer5 = new Integer((-305));
      Integer integer6 = new Integer((-1487));
      Integer integer7 = new Integer(60);
      Integer integer8 = new Integer(1576);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.5566469035821068
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer0 = new Integer(37);
      Integer integer1 = new Integer(478);
      Integer integer2 = new Integer(1094);
      UnaryOperator.identity();
      Integer integer3 = new Integer((-2496));
      int int0 = 3700;
      Integer integer4 = new Integer(3700);
      Integer integer5 = new Integer((-1366));
      Integer integer6 = new Integer(1);
      Integer integer7 = new Integer(37);
      Integer integer8 = new Integer(1094);
      Integer integer9 = new Integer(478);
      Integer integer10 = new Integer(39);
      Integer integer11 = new Integer((-101240078));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(bv 4fW");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super String, ?>) unaryOperator0);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      unaryOperator0.apply((String) null);
      unaryOperator2.apply((String) null);
      unaryOperator1.apply(">=");
      Function.identity();
      unaryOperator2.apply("(&v EfW");
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super String, ?>) unaryOperator1);
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.compose((Function<? super String, ? extends String>) unaryOperator3);
      unaryOperator5.apply((String) null);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.compose((Function<? super String, ? extends String>) unaryOperator4);
      UnaryOperator<String> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator6.compose((Function<? super String, ? extends String>) unaryOperator2);
      StringReader stringReader0 = new StringReader("(&v EfW");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(2833, 343);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(&v EfW");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0042424730540764
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.clonePF();
      jSTerm0.standarizerPredicateForm();
      assertEquals(2, jSTerm0.size());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4327570529970877
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Do'");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.trimToSize();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.equals(jSTerm0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.add((Object) jSTerm3);
      jSTerm0.add((Object) jSTerm2);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm1.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.firstElement();
      jSTerm1.lastElement();
      jSTerm1.add((Object) "Do'");
      jSPredicateForm0.listIterator();
      StringReader stringReader0 = new StringReader("] ");
      jSPredicateForm0.spliterator();
      StringReader stringReader1 = new StringReader("2hb+HUKYC");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      UnaryOperator.identity();
      Function.identity();
      jSPredicateForm0.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("qqw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      assertEquals(2, jSTerm0.size());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.firstElement();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isGround();
      jSTerm1.add((Object) jSTerm1);
      jSTerm1.equals(jSTerm0);
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.equals(jSTerm0);
      jSTerm1.add((Object) "not");
      JSTerm jSTerm2 = (JSTerm)jSTerm1.firstElement();
      jSTerm1.add((Object) jSTerm2);
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.removeAllElements();
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.makeEval(true);
      jSTerm1.trimToSize();
      jSTerm2.clone();
      jSTerm1.clear();
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm3 = (JSTerm)jSTerm0.clone();
      Object object0 = null;
      Object object1 = null;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "not");
      jSSubstitution0.add((Object) "not");
      jSSubstitution0.containsAll(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm3, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8037193777688747
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noW");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.trimToSize();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      int int0 = (-366172151);
      Integer integer0 = new Integer((-366172151));
      jSPredicateForm2.addElement(integer0);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm3.clonePF();
      JSSubstitution jSSubstitution1 = jSPredicateForm1.matches((JSPredicateForm) jSTerm0);
      jSTerm0.matches(jSPredicateForm4, jSSubstitution0);
      jSTerm0.matches(jSPredicateForm2, jSSubstitution1);
      Predicate<JSPredicateForm> predicate0 = Predicate.isEqual((Object) integer0);
      jSPredicateForm1.removeIf(predicate0);
      jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm3.clone();
      // Undeclared exception!
      try { 
        jSPredicateForm2.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2153881010836147
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting Term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      StringReader stringReader1 = new StringReader("n6tPR(");
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm0);
      StringReader stringReader2 = new StringReader("Expecting Term");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      jSTerm0.ensureCapacity(32);
      System.setCurrentTimeMillis(32);
      System.setCurrentTimeMillis(32);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      boolean boolean1 = jSPredicateForm1.equals(jSPredicateForm0);
      assertFalse(boolean1 == boolean0);
      
      System.setCurrentTimeMillis((-2540L));
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSPredicateForm0);
      assertTrue(jSSubstitution0.fail());
      
      boolean boolean2 = jSTerm0.equals(jSPredicateForm1);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nUf");
      jSTerm0.firstElement();
      StringReader stringReader0 = new StringReader("nUf");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      StringReader stringReader1 = new StringReader("nUf");
      StringReader stringReader2 = new StringReader("^(Qa{P1EY");
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      Integer integer0 = new Integer((-1533));
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "^(Qa{P1EY", (-1079441466), (-1533));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.firstElement();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) null);
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm1.clear();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.add((Object) null);
      StringReader stringReader0 = new StringReader("^(Qa{P1EY");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.firstElement();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isGround();
      jSTerm1.add((Object) jSTerm1);
      jSTerm1.equals(jSTerm0);
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.equals(jSTerm0);
      jSTerm1.add((Object) "not");
      JSTerm jSTerm2 = (JSTerm)jSTerm1.firstElement();
      jSTerm0.forEach(consumer0);
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.removeAllElements();
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.makeEval(true);
      jSTerm1.trimToSize();
      jSTerm2.clone();
      jSTerm1.clear();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.clone();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "not");
      jSSubstitution0.containsAll(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(2535);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm0.firstElement();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isGround();
      jSTerm1.add((Object) jSTerm1);
      jSTerm0.add((Object) null);
      jSTerm1.equals(jSTerm0);
      Consumer<JSTerm> consumer1 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = (JSTerm)jSTerm1.firstElement();
      jSTerm2.addAll((Collection) jSTerm0);
      jSTerm2.removeAll(jSTerm1);
      jSTerm1.add((Object) jSTerm2);
      jSTerm0.forEach(consumer1);
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.removeElement(jSTerm0);
      jSTerm1.removeAllElements();
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.makeEval(true);
      jSTerm1.containsAll(jSTerm0);
      jSTerm1.trimToSize();
      jSTerm1.clear();
      jSTerm0.iterator();
      jSTerm0.clone();
      jSTerm0.add((Object) "not");
      jSTerm0.add((Object) jSTerm0);
      StringReader stringReader0 = new StringReader("^(Qa{P1EY");
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) ")oo'");
      jSTerm0.clone();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.spliterator();
      jSTerm1.add((Object) jSTerm1);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, String> function1 = unaryOperator0.compose((Function<? super Integer, ? extends String>) function0);
      Function<Integer, String> function2 = unaryOperator0.compose((Function<? super Integer, ? extends String>) function1);
      unaryOperator0.compose((Function<? super Integer, ? extends String>) function2);
      UnaryOperator.identity();
      Function<String, String> function3 = unaryOperator0.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function.identity();
      unaryOperator0.apply("VTI");
      Function.identity();
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function4).apply(any());
      Function<String, String> function5 = unaryOperator0.compose((Function<? super String, ? extends String>) function4);
      Function<String, String> function6 = function5.compose((Function<? super String, ? extends String>) function3);
      Function<String, String> function7 = function5.compose((Function<? super String, ? extends String>) function6);
      Function<String, Object> function8 = unaryOperator0.andThen((Function<? super String, ?>) function6);
      unaryOperator0.andThen((Function<? super String, ?>) function8);
      Function.identity();
      Function.identity();
      function7.apply("VTI");
      unaryOperator0.apply(")oo'");
      function5.apply(")oo'");
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator.identity();
      Function.identity();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.400326576231188
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Do'");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.trimToSize();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm2);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.matches(jSPredicateForm0);
      jSTerm1.toStr();
      jSPredicateForm0.firstElement();
      jSTerm1.lastElement();
      jSTerm1.add((Object) "Do'");
      jSPredicateForm0.listIterator();
      StringReader stringReader0 = new StringReader("2hb+HUKYC");
      jSTerm0.add((Object) jSTerm1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      UnaryOperator.identity();
      Function.identity();
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5571130980576458
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noW");
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.trimToSize();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm1.iterator();
      Integer integer0 = new Integer((-366172151));
      jSPredicateForm2.addElement(integer0);
      jSPredicateForm3.clonePF();
      jSPredicateForm1.clonePF();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.apply("nx#]_cof=eli$%");
      Function.identity();
      // Undeclared exception!
      try { 
        jSPredicateForm2.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6020559154587264
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting Term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.add((Object) jSTerm0);
      StringReader stringReader1 = new StringReader("n6tPR(");
      stringReader1.ready();
      StringReader stringReader2 = new StringReader("Expecting Term");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      jSTerm0.ensureCapacity(32);
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      System.setCurrentTimeMillis((-1249L));
      System.setCurrentTimeMillis(32);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      boolean boolean0 = jSPredicateForm1.equals(jSPredicateForm0);
      assertFalse(boolean0);
      
      jSPredicateForm1.iterator();
      System.setCurrentTimeMillis((-2540L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSPredicateForm2.matches(jSPredicateForm1);
      assertNotSame(jSPredicateForm1, jSPredicateForm2);
      assertEquals(3, jSPredicateForm2.size());
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0888999753452235
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) ";=Xj%/uS%9c");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.add((Object) jSTerm0);
      jSTerm2.spliterator();
      jSTerm2.add((Object) jSTerm2);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.equals(jSTerm0);
      jSTerm1.lastElement();
      jSTerm1.add((Object) ";=Xj%/uS%9c");
      jSPredicateForm0.listIterator();
      StringReader stringReader0 = new StringReader("2hb+H=xUKYC");
      jSTerm0.add((Object) jSTerm1);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<JSTerm, String> function2 = unaryOperator0.compose((Function<? super JSTerm, ? extends String>) function1);
      Function.identity();
      Function<Object, JSTerm> function3 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      Function.identity();
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends String>) function4);
      Function<Object, JSTerm> function5 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super String, ? extends JSTerm>) function5);
      Function<Object, JSPredicateForm> function6 = (Function<Object, JSPredicateForm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, JSTerm> function7 = (Function<String, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super String, ? extends JSTerm>) function7);
      function2.andThen((Function<? super String, ? extends JSPredicateForm>) function6);
      function2.compose((Function<? super String, ? extends JSTerm>) function3);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.matches((JSPredicateForm) jSTerm2, jSSubstitution0);
      unaryOperator0.compose((Function<? super String, ? extends String>) function8);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("6Y]}?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      Integer integer0 = new Integer((-1));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm2.add((Object) jSTerm1);
      streamTokenizer1.resetSyntax();
      stringReader0.close();
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.ordinaryChars((-1984652823), (-1108744860));
      stringReader0.markSupported();
      streamTokenizer1.whitespaceChars(41, (-1));
      jSTerm2.equals((JSPredicateForm) jSTerm1);
      StringReader stringReader1 = new StringReader("6Y]}?");
      jSTerm2.standarizerPredicateForm();
      jSTerm1.matches((JSPredicateForm) jSTerm2);
      jSTerm2.iterator();
      System.setCurrentTimeMillis(0L);
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm0.firstElement();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isGround();
      jSTerm1.add((Object) jSTerm1);
      jSTerm1.equals(jSTerm0);
      jSTerm1.ensureCapacity((-1110931254));
      Consumer<JSTerm> consumer1 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.equals(jSTerm0);
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.trimToSize();
      jSTerm1.removeAll(jSTerm1);
      jSTerm1.add((Object) jSTerm1);
      jSTerm0.forEach(consumer1);
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.removeElement(jSTerm0);
      jSTerm1.removeAllElements();
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.makeEval(true);
      jSTerm1.containsAll(jSTerm0);
      jSTerm1.trimToSize();
      jSTerm1.clear();
      jSTerm0.iterator();
      jSTerm0.clone();
      jSTerm0.add((Object) "not");
      jSTerm0.add((Object) jSTerm0);
      StringReader stringReader0 = new StringReader("^(Qa{P1EY");
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6730116670092565
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Integer integer0 = new Integer((-1777));
      Integer integer1 = new Integer(44);
      Integer integer2 = new Integer((-612));
      Integer integer3 = new Integer((-1487));
      Integer integer4 = new Integer((-1119));
      Integer integer5 = new Integer((-1487));
      Integer integer6 = new Integer((-1777));
      Integer integer7 = new Integer((-1045));
      jSPredicateForm0.add((Object) integer6);
      Integer integer8 = new Integer(1191);
      Integer integer9 = new Integer((-1610874239));
      Integer integer10 = new Integer((-1513));
      System.setCurrentTimeMillis(2241L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "w5B1%`nUC2";
      StringReader stringReader0 = new StringReader("w5B1%`nUC2");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.close();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator.identity();
      Integer integer0 = new Integer((-1433728624));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6260206924207543
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noW");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.trimToSize();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      int int0 = (-366172151);
      Integer integer0 = new Integer((-366172151));
      jSPredicateForm2.addElement(integer0);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm3.clonePF();
      jSPredicateForm3.matches(jSPredicateForm1);
      jSPredicateForm4.matches(jSPredicateForm0, jSSubstitution0);
      jSPredicateForm1.addAll((Collection) jSPredicateForm3);
      // Undeclared exception!
      try { 
        jSPredicateForm1.matches(jSPredicateForm2, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Integer integer0 = new Integer((-1759));
      Integer integer1 = new Integer(44);
      Integer integer2 = new Integer((-612));
      Integer integer3 = new Integer((-1487));
      Integer integer4 = new Integer((-1119));
      Integer integer5 = new Integer((-1487));
      Integer integer6 = new Integer((-1759));
      Integer integer7 = new Integer((-1045));
      JSJshopVars.whiteSpace = (-77733981);
      Integer integer8 = new Integer(1191);
      Integer integer9 = new Integer((-1610874239));
      Integer integer10 = new Integer((-1513));
      jSPredicateForm0.addElement((Object) null);
      System.setCurrentTimeMillis((-1119));
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "not";
      jSTerm0.add((Object) "not");
      String string1 = null;
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.spliterator();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSSubstitution1);
      long long0 = (-297L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      jSPredicateForm0.add((Object) function0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator0.apply("IK");
      Function.identity();
      Function.identity();
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Function$$Lambda$46/1287862844 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Do'");
      StringReader stringReader0 = new StringReader("7Y]?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      streamTokenizer0.slashStarComments(true);
      UnaryOperator.identity();
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      System.setCurrentTimeMillis((-1));
      streamTokenizer0.nval = (-1200.992872);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      jSTerm0.add((Object) "nJt");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "Do'";
      jSTerm0.add((Object) "Do'");
      jSTerm0.clone();
      Integer integer0 = new Integer((-3));
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "ujDL0");
      JSSubstitution jSSubstitution0 = null;
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Y]?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.nval = (double) (-4);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches((JSPredicateForm) jSTerm1);
      stringReader0.reset();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.coma = (-2);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.wordChars((-2), (-2));
      streamTokenizer0.ordinaryChars((-1390), (-2));
      streamTokenizer0.nval = (double) (-2);
      streamTokenizer0.commentChar((-2));
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.eolIsSignificant(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.quoteChar((-839));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "n=ot");
      jSTerm0.add((Object) "n=ot");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.spliterator();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSSubstitution1);
      long long0 = (-297L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noW");
      StringReader stringReader0 = new StringReader("bEpZQ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(3568);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      stringReader0.reset();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.wordChars((-75852723), (-75852723));
      streamTokenizer1.ordinaryChars((-1437829375), (-75852723));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.commentChar(39);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.slashSlashComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.resetSyntax();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar(63);
      StringReader stringReader1 = new StringReader("\"3hc[#I2s>0^KD=]o[");
      System.setCurrentTimeMillis((-1437829375));
      JSSubstitution jSSubstitution1 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      assertTrue(jSSubstitution0.fail());
      assertNotSame(jSSubstitution1, jSSubstitution0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7779755732409084
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noW");
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.trimToSize();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm4 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm4.addAll(1, (Collection) jSPredicateForm1);
      jSPredicateForm4.addElement("noW");
      JSPredicateForm jSPredicateForm5 = jSPredicateForm2.clonePF();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm3.clonePF();
      jSPredicateForm3.matches(jSPredicateForm6);
      jSPredicateForm1.matches(jSPredicateForm2, jSSubstitution0);
      JSPredicateForm jSPredicateForm7 = jSPredicateForm5.standarizerPredicateForm();
      JSJshopVars.exclamation = (-320);
      JSPredicateForm jSPredicateForm8 = (JSPredicateForm)jSPredicateForm7.clone();
      jSPredicateForm7.clonePF();
      jSPredicateForm5.matches(jSPredicateForm4, jSSubstitution0);
      jSPredicateForm8.equals(jSPredicateForm6);
      jSPredicateForm5.addAll((Collection) jSPredicateForm0);
      JSJshopVars.apostrophe = (-320);
      jSPredicateForm6.standarizerPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm5.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Y]?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.nval = (double) (-4);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches((JSPredicateForm) jSTerm1);
      JSJshopVars.coma = (-1);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.ordinaryChars((-1390), (-1));
      streamTokenizer0.commentChar((-1));
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.eolIsSignificant(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-839));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Y]?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-1045));
      streamTokenizer0.ttype = (-1045);
      streamTokenizer0.nval = (double) (-1045);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.matches((JSPredicateForm) jSTerm0);
      stringReader0.reset();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.minus = (-2);
      JSJshopVars.coma = (-2);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.wordChars((-1045), (-1045));
      streamTokenizer0.ordinaryChars((-1390), (-2));
      streamTokenizer0.commentChar((-1045));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-839));
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "6Y]}?";
      StringReader stringReader0 = new StringReader("6Y]}?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      boolean boolean0 = false;
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      Integer integer0 = new Integer((-1));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm1.add((Object) null);
      stringReader0.markSupported();
      streamTokenizer1.whitespaceChars(41, (-1));
      jSTerm2.equals((JSPredicateForm) jSTerm1);
      StringReader stringReader1 = new StringReader("6Y]}?");
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("ly(`1*sk");
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.apply("PlanningDomain: error");
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super String, ? extends String>) unaryOperator3);
      unaryOperator5.apply("cn : ");
      Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator6 = UnaryOperator.identity();
      Function<String, String> function0 = unaryOperator6.compose((Function<? super String, ? extends String>) unaryOperator3);
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator2);
      unaryOperator2.compose((Function<? super String, ? extends String>) function0);
      unaryOperator6.andThen((Function<? super String, ?>) unaryOperator4);
      Function.identity();
      Function.identity();
      unaryOperator6.apply("u/HpggL2D&c");
      unaryOperator2.apply("(u%j@k`kRo`");
      UnaryOperator<String> unaryOperator7 = UnaryOperator.identity();
      unaryOperator7.apply("(u%j@k`kRo`");
      UnaryOperator<String> unaryOperator8 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator8.andThen((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator8);
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7Y]?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.verticalL = 2;
      StringReader stringReader1 = new StringReader("F}65|0]%!v&YnJ,=");
      StringReader stringReader2 = new StringReader("");
      StringReader stringReader3 = new StringReader("F}65|0]%!v&YnJ,=");
      StringReader stringReader4 = new StringReader("qvVs%dh[4i@p+SSy");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader4);
      StringReader stringReader5 = new StringReader("no.");
      StringReader stringReader6 = new StringReader("qvVs%dh[4i@p+SSy");
      stringReader5.markSupported();
      StringReader stringReader7 = new StringReader("PlanningDomain: error");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader5);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, (JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7Y]?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.verticalL = 2;
      StringReader stringReader1 = new StringReader("");
      StringReader stringReader2 = new StringReader("F}65|0]%!v&YnJ,=");
      StringReader stringReader3 = new StringReader("qvVs%dh[4i@p+SSy");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      StringReader stringReader4 = new StringReader("no.");
      StringReader stringReader5 = new StringReader("qvVs%dh[4i@p+SSy");
      stringReader4.markSupported();
      StringReader stringReader6 = new StringReader("PlanningDomain: error");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader4);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, (JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator1);
      function1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function.identity();
      function0.compose((Function<? super String, ? extends String>) function1);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super String, ?>) unaryOperator3);
      Function.identity();
      function0.compose((Function<? super String, ? extends String>) unaryOperator1);
      Function.identity();
      UnaryOperator.identity();
      unaryOperator0.apply("");
      unaryOperator0.andThen((Function<? super String, ? extends String>) unaryOperator1);
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator1);
      String string0 = "DT1A";
      function0.apply("DT1A");
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "Nx#]_cof[=EI$%");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      unaryOperator0.apply("Operator name expected");
      Function<Integer, String> function2 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.compose((Function<? super Integer, ? extends String>) function2);
      UnaryOperator.identity();
      Function<String, String> function3 = unaryOperator0.andThen((Function<? super String, ? extends String>) function1);
      function1.andThen((Function<? super String, ?>) function3);
      function3.apply("call");
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) function1);
      UnaryOperator.identity();
      Function.identity();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(16, stringBuffer0.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(711);
      jSTerm0.add((Object) integer0);
      String string0 = "not";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(2238L);
      System.setCurrentTimeMillis(2238L);
      jSTerm0.equals((JSPredicateForm) null);
      jSTerm0.firstElement();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "not";
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) jSTerm0;
      Object object0 = jSTerm0.lastElement();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) jSSubstitution0;
      objectArray0[6] = (Object) jSSubstitution0;
      objectArray0[7] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.get(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "6Y]}?";
      StringReader stringReader0 = new StringReader("6Y]}?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      boolean boolean0 = false;
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      Integer integer0 = new Integer((-1));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer1.whitespaceChars(41, (-1));
      jSTerm2.equals((JSPredicateForm) jSTerm1);
      StringReader stringReader1 = new StringReader("6Y]}?");
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "no");
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm0.firstElement();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isGround();
      jSTerm1.add((Object) jSTerm1);
      jSTerm1.equals(jSTerm0);
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.trimToSize();
      jSTerm1.removeAll(jSTerm1);
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.removeElement(jSTerm0);
      jSTerm1.ensureCapacity((-2544));
      jSTerm1.removeAllElements();
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.makeEval(true);
      jSTerm1.containsAll(jSTerm0);
      jSTerm1.trimToSize();
      jSTerm1.clear();
      jSTerm0.iterator();
      jSTerm0.clone();
      jSTerm0.add((Object) "no");
      jSTerm0.add((Object) jSTerm0);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-\">[{T`x5wLG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-20569767));
      streamTokenizer0.ttype = (int) 'B';
      streamTokenizer0.nval = (double) 'z';
      StringReader stringReader1 = new StringReader("-\">[{T`x5wLG");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.parseNumbers();
      streamTokenizer2.eolIsSignificant(false);
      streamTokenizer0.lowerCaseMode(false);
      StringReader stringReader2 = new StringReader("'@");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader2);
      streamTokenizer3.sval = null;
      streamTokenizer0.whitespaceChars(66, (-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer2.resetSyntax();
      streamTokenizer0.ordinaryChars((-4), 967);
      streamTokenizer2.resetSyntax();
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer1.quoteChar(41);
      StreamTokenizer streamTokenizer4 = null;
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer0 = new Integer(1094);
      Integer integer1 = new Integer(478);
      Integer integer2 = new Integer(1094);
      UnaryOperator.identity();
      Integer integer3 = new Integer(1094);
      Integer integer4 = new Integer(478);
      Integer integer5 = new Integer(478);
      Integer integer6 = new Integer(1238);
      Integer integer7 = new Integer(1238);
      Integer integer8 = new Integer(1566);
      Integer integer9 = new Integer((-502));
      Integer integer10 = new Integer((-502));
      Integer integer11 = new Integer(478);
      Integer integer12 = new Integer(1094);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSJshopVars.equalT = 1094;
      jSPredicateForm0.add((Object) "jt");
      jSPredicateForm0.print();
      System.setCurrentTimeMillis(478);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Integer integer0 = new Integer((-1750));
      Integer integer1 = new Integer(44);
      Integer integer2 = new Integer((-612));
      Integer integer3 = new Integer((-1487));
      Integer integer4 = new Integer((-1119));
      Integer integer5 = new Integer((-1487));
      Integer integer6 = new Integer((-1750));
      Integer integer7 = new Integer((-1045));
      Integer integer8 = new Integer(1191);
      Integer integer9 = new Integer((-1610874239));
      Integer integer10 = new Integer((-1513));
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) integer5);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSPredicateForm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "Nx#]_cof[=EI$%");
      StringReader stringReader0 = new StringReader("Nx#]_cof[=EI$%");
      jSPredicateForm0.standarizerPredicateForm();
      StringReader stringReader1 = new StringReader("R|_M\"N(oK");
      StringReader stringReader2 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader3 = new StringReader("R|_M\"N(oK");
      StringReader stringReader4 = new StringReader("->");
      StringReader stringReader5 = new StringReader(" ");
      char[] charArray0 = new char[6];
      charArray0[0] = 'V';
      charArray0[1] = 'F';
      charArray0[2] = 'f';
      charArray0[3] = 'h';
      charArray0[4] = 'e';
      charArray0[5] = ':';
      stringReader5.read(charArray0);
      StringReader stringReader6 = new StringReader("dgks");
      streamTokenizer0.resetSyntax();
      StringReader stringReader7 = new StringReader("R|_M\"N(oK");
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      StringReader stringReader8 = new StringReader("E3~'-");
      StringReader stringReader9 = new StringReader("4~&C");
      StringReader stringReader10 = new StringReader(")");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader5);
      assertEquals(1, streamTokenizer2.lineno());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Integer integer0 = new Integer((-1763));
      Integer integer1 = new Integer(44);
      Integer integer2 = new Integer((-612));
      Integer integer3 = new Integer((-1487));
      Integer integer4 = new Integer((-1119));
      Integer integer5 = new Integer((-1487));
      Integer integer6 = new Integer((-1763));
      Integer integer7 = new Integer((-1045));
      Integer integer8 = new Integer(1191);
      Integer integer9 = new Integer((-1610874239));
      Integer integer10 = new Integer((-1513));
      System.setCurrentTimeMillis(2241L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = " ";
      jSTerm0.add((Object) " ");
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("noW");
      jSTerm0.add((Object) "noW");
      StringReader stringReader0 = new StringReader("noW");
      String string0 = "^(Qa{P1EY";
      jSTerm0.spliterator();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSTerm0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Integer integer0 = new Integer((-1759));
      Integer integer1 = new Integer(44);
      Integer integer2 = new Integer((-612));
      Integer integer3 = new Integer((-1487));
      Integer integer4 = new Integer((-1119));
      Integer integer5 = new Integer((-1759));
      Integer integer6 = new Integer((-1759));
      Integer integer7 = new Integer((-1045));
      Integer integer8 = new Integer(1191);
      Integer integer9 = new Integer((-1610874239));
      Integer integer10 = new Integer((-1513));
      System.setCurrentTimeMillis(1191);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSPredicateForm1.spliterator();
      jSPredicateForm0.removeAll(jSPredicateForm1);
      jSPredicateForm0.listIterator();
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-\">[{T`x5wLG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-20569767));
      streamTokenizer0.ttype = (int) 'B';
      streamTokenizer0.nval = (double) 'z';
      StringReader stringReader1 = new StringReader("-\">[{T`x5wLG");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.parseNumbers();
      streamTokenizer2.eolIsSignificant(false);
      streamTokenizer0.lowerCaseMode(false);
      StringReader stringReader2 = new StringReader("'@");
      streamTokenizer1.resetSyntax();
      streamTokenizer2.slashStarComments(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader2);
      streamTokenizer3.sval = null;
      streamTokenizer3.lowerCaseMode(false);
      streamTokenizer0.whitespaceChars(66, (-4));
      streamTokenizer3.ordinaryChars((-20569767), 66);
      streamTokenizer1.commentChar((-4));
      streamTokenizer2.resetSyntax();
      streamTokenizer2.resetSyntax();
      streamTokenizer1.quoteChar(41);
      streamTokenizer3.whitespaceChars(66, (-4));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super String, ? extends String>) unaryOperator3);
      unaryOperator5.apply("cn : ");
      UnaryOperator<String> unaryOperator6 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator2);
      unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator6.apply("cn : ");
      unaryOperator6.andThen((Function<? super String, ?>) unaryOperator4);
      unaryOperator6.apply("uH/Hjgg/Dmc");
      unaryOperator2.apply("}'X|VErW}Ew4#/G?M");
      UnaryOperator.identity();
      unaryOperator2.apply("(u%j@k`kRo`");
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator7 = UnaryOperator.identity();
      unaryOperator7.apply("xi=E-BPNRwwsw");
      UnaryOperator<String> unaryOperator8 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.compose((Function<? super String, ? extends String>) unaryOperator8);
      UnaryOperator.identity();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("", stringBuffer0.toString());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.2868359830561607
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.apply("PlanningDomain: error");
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super String, ? extends String>) unaryOperator3);
      unaryOperator5.apply("cn : ");
      Function.identity();
      UnaryOperator<String> unaryOperator6 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator2);
      Function<String, String> function0 = unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator6.andThen((Function<? super String, ?>) unaryOperator4);
      Function.identity();
      Function.identity();
      unaryOperator6.apply("u/HpggL2D&c");
      unaryOperator2.apply("}'XV|VErW}Ew4#/G?M");
      unaryOperator2.apply("(u%j@k`kRo`");
      UnaryOperator.identity();
      unaryOperator5.compose((Function<? super String, ? extends String>) function0);
      unaryOperator5.apply("(u%j@k`kRo`");
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator3.compose((Function<? super String, ? extends String>) function1);
      StringReader stringReader0 = new StringReader("(u%j@k`kRo`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Integer integer0 = new Integer(449);
      Integer integer1 = new Integer((-1750));
      Integer integer2 = new Integer((-1045));
      Integer integer3 = new Integer(44);
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer(0);
      Integer integer6 = new Integer((-416));
      Integer integer7 = new Integer(44);
      Integer integer8 = new Integer((-3));
      Integer integer9 = new Integer(16);
      Integer integer10 = new Integer(1653);
      Integer integer11 = new Integer(0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(" ) ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super String, ? extends String>) unaryOperator3);
      unaryOperator5.apply("cn : ");
      UnaryOperator<String> unaryOperator6 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator2);
      unaryOperator5.apply("c6ipRoxK*");
      unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator6.apply("cn : ");
      unaryOperator6.andThen((Function<? super String, ?>) unaryOperator4);
      UnaryOperator.identity();
      unaryOperator6.apply("uH/Hjgg/Dmc");
      unaryOperator2.apply("}'X|VErW}Ew4#/G?M");
      UnaryOperator.identity();
      unaryOperator2.apply("(u%j@k`kRo`");
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator7 = UnaryOperator.identity();
      unaryOperator7.apply("xi=EPNR,wwsw");
      UnaryOperator<String> unaryOperator8 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.compose((Function<? super String, ? extends String>) unaryOperator8);
      StringReader stringReader0 = new StringReader("uH/Hjgg/Dmc");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Integer integer0 = new Integer(44);
      Integer integer1 = new Integer(44);
      Integer integer2 = new Integer(44);
      Integer integer3 = new Integer((-1119));
      Integer integer4 = new Integer(44);
      Integer integer5 = new Integer((-1759));
      Integer integer6 = new Integer((-712));
      Integer integer7 = new Integer((-3589));
      Integer integer8 = new Integer((-3));
      Integer integer9 = new Integer((-3589));
      JSJshopVars.leftBrac = (-3589);
      Integer integer10 = new Integer((-3));
      System.setCurrentTimeMillis((-3589));
      jSPredicateForm0.print();
      assertTrue(jSPredicateForm0.isEmpty());
  }
}
