/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 03:20:29 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4881075087522722
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizr is PAC!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer0.wordChars(32, 32);
      streamTokenizer0.pushBack();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.lowerCaseMode(true);
      System.setCurrentTimeMillis(32);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis(32);
      System.setCurrentTimeMillis(32);
      System.setCurrentTimeMillis(32);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar(32);
      streamTokenizer1.slashSlashComments(false);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(32);
      streamTokenizer1.quoteChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars(32, (-513));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("the tokenizr is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(629);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer1.ordinaryChars(32, (-1208));
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer1.parseNumbers();
      streamTokenizer1.wordChars(32, 32);
      boolean boolean0 = false;
      streamTokenizer1.pushBack();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.apostrophe = (-849);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("8expecting term");
      System.setCurrentTimeMillis((-2676L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.317167053863709
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis(784L);
      StringReader stringReader0 = new StringReader("iKz) [yqr/bL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.addElement(jSTerm0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm0.equals(jSPredicateForm1);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm3.toStr();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm4.standarizerPredicateForm();
      jSPredicateForm4.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm4.clonePF();
      jSPredicateForm3.equals(jSPredicateForm2);
      jSPredicateForm1.toStr();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm3.clonePF();
      assertTrue(jSPredicateForm6.equals((Object)jSPredicateForm1));
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "iKz) [yqr/bL");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      jSPredicateForm6.removeIf(predicate3);
      JSPredicateForm jSPredicateForm7 = jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm7.toStr();
      jSPredicateForm3.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm8 = jSPredicateForm4.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm9 = jSPredicateForm8.clonePF();
      jSPredicateForm5.toStr();
      JSPredicateForm jSPredicateForm10 = jSPredicateForm3.clonePF();
      jSPredicateForm4.equals(jSPredicateForm4);
      jSPredicateForm10.remove((Object) jSPredicateForm9);
      jSTerm0.standarizerPredicateForm();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSJshopVars.whiteSpace = 41;
      jSPredicateForm7.matches(jSPredicateForm3, jSSubstitution0);
      JSPredicateForm jSPredicateForm11 = jSTerm0.clonePF();
      assertFalse(jSPredicateForm11.equals((Object)jSPredicateForm10));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9285988229508346
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizr is PAC!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer0.wordChars(32, 32);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      System.setCurrentTimeMillis(32);
      System.setCurrentTimeMillis(32);
      System.setCurrentTimeMillis(32);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar(32);
      streamTokenizer1.slashSlashComments(true);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(32);
      streamTokenizer1.whitespaceChars(32, 32);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.sval = null;
      streamTokenizer1.ordinaryChar(32);
      streamTokenizer1.ordinaryChars(32, 63);
      System.setCurrentTimeMillis(32);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(32);
      System.setCurrentTimeMillis((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      streamTokenizer0.ttype = (-4);
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      jSTerm0.clonePF();
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6301477532652258
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis(784L);
      StringReader stringReader0 = new StringReader("iKz) [yqr/bL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.addElement(jSTerm0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm0.equals(jSPredicateForm1);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm3.toStr();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm4.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm4.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm4.clonePF();
      jSPredicateForm3.equals(jSPredicateForm2);
      jSPredicateForm1.toStr();
      JSPredicateForm jSPredicateForm7 = jSPredicateForm3.clonePF();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "iKz) [yqr/bL");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      jSPredicateForm7.removeIf(predicate3);
      JSPredicateForm jSPredicateForm8 = jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm8.matches(jSPredicateForm5);
      jSPredicateForm0.ensureCapacity((-5748));
      jSPredicateForm8.toStr();
      jSPredicateForm3.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm9 = jSPredicateForm4.standarizerPredicateForm();
      jSPredicateForm9.clonePF();
      jSPredicateForm6.toStr();
      Function.identity();
      JSPredicateForm jSPredicateForm10 = null;
      try {
        jSPredicateForm10 = new JSPredicateForm("/ ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "(UGhd";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(UGhd");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      String string0 = "(+\\#`fDr`Dq2,3_'.";
      SystemInUtil.addInputLine("not");
      Function<Object, Object> function3 = Function.identity();
      function3.compose((Function<? super Integer, ?>) function1);
      function3.andThen((Function<? super Object, ? extends String>) function0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(+#`fDr`Dq2,3_'.");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("the tokenizr is SPACE!");
      SystemInUtil.addInputLine("egjkk");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("the tokenizr is SPACE!");
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      char[] charArray0 = new char[6];
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer1.ordinaryChars(32, (-4));
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer1.parseNumbers();
      streamTokenizer1.wordChars(32, 32);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      streamTokenizer1.parseNumbers();
      streamTokenizer1.pushBack();
      streamTokenizer1.lowerCaseMode(false);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, String> function1 = unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, String> function3 = function1.compose((Function<? super Integer, ? extends String>) function2);
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.compose((Function<? super Integer, ? extends Integer>) function4);
      Function<Integer, String> function5 = unaryOperator1.compose((Function<? super Integer, ? extends String>) function3);
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      function5.compose((Function<? super Integer, ? extends Integer>) function6);
      Function<Integer, String> function7 = unaryOperator1.compose((Function<? super Integer, ? extends String>) function5);
      Function<String, Integer> function8 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function7.compose((Function<? super String, ? extends Integer>) function8);
      Function<Object, Integer> function9 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.apply(function7);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Integer, ? extends String>) function5);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Integer, ?>) function3);
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function<Object, String> function10 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function10);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizr is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = (-1841252130);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.ttype = (-1841252130);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[6];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standardizerTerm();
      jSTerm0.add((Object) null);
      jSTerm0.makeFunction();
      streamTokenizer1.ttype = 32;
      streamTokenizer1.wordChars((-1841252130), (-1841252130));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      streamTokenizer1.pushBack();
      streamTokenizer1.lowerCaseMode(false);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nval = (double) 32;
      streamTokenizer0.whitespaceChars(32, 32);
      streamTokenizer0.nval = (double) 32;
      char[] charArray0 = new char[6];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(32, 32);
      streamTokenizer0.sval = null;
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer1.nval = (double) 32;
      streamTokenizer1.nval = (double) 32;
      jSTerm0.add((Object) streamTokenizer1);
      streamTokenizer1.quoteChar(6);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.nval = streamTokenizer0.nval;
      streamTokenizer0.nval = (double) 5;
      SystemInUtil.addInputLine((String) null);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer1.sval = null;
      unaryOperator0.apply("the tokenizer is SPACE!");
      UnaryOperator.identity();
      streamTokenizer1.quoteChar(6);
      streamTokenizer1.ordinaryChar(32);
      System.setCurrentTimeMillis(5);
      boolean boolean0 = jSTerm1.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SystemInUtil.addInputLine(":D@( ");
      SystemInUtil.addInputLine(":D@( ");
      SystemInUtil.addInputLine(":D@( ");
      System.setCurrentTimeMillis(807L);
      SystemInUtil.addInputLine(":D@( ");
      StringReader stringReader0 = new StringReader("iKs gy]r/GL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("6;PY0S");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.pushBack();
      System.setCurrentTimeMillis((-36L));
      stringReader0.read();
      jSTerm0.add((Object) "iKs gy]r/GL");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("iKs gy]r/GL");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("%");
      SystemInUtil.addInputLine(":D@( ");
      SystemInUtil.addInputLine(":D@( ");
      SystemInUtil.addInputLine("}IA=U*Jl$6&s>]niD");
      String string0 = "!";
      SystemInUtil.addInputLine("!");
      SystemInUtil.addInputLine("iKs gy]r/GL");
      System.setCurrentTimeMillis((-1297));
      long long0 = 1L;
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(32);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.flagLevel = 1132;
      jSPredicateForm0.trimToSize();
      Integer integer0 = new Integer(1132);
      jSPredicateForm0.addElement(integer0);
      JSJshopVars.leftBrac = (-565);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.326777610086439
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis(784L);
      StringReader stringReader0 = new StringReader("iKz) [yqr/bL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.addElement(jSTerm0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm0.equals(jSPredicateForm1);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm3.toStr();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm5 = jSPredicateForm4.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm4.clonePF();
      jSPredicateForm3.equals(jSPredicateForm2);
      jSPredicateForm3.toStr();
      jSPredicateForm3.clonePF();
      JSPredicateForm jSPredicateForm7 = jSPredicateForm6.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm8 = new JSPredicateForm();
      jSPredicateForm8.toStr();
      JSPredicateForm jSPredicateForm9 = jSPredicateForm3.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm10 = jSPredicateForm4.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm11 = jSPredicateForm10.clonePF();
      jSPredicateForm6.toStr();
      JSPredicateForm jSPredicateForm12 = jSPredicateForm3.clonePF();
      jSPredicateForm12.remove((Object) jSPredicateForm11);
      streamTokenizer0.ordinaryChars(2370, 139);
      System.setCurrentTimeMillis((-288L));
      jSPredicateForm9.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm13 = jSPredicateForm7.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm14 = new JSPredicateForm();
      jSPredicateForm5.equals(jSPredicateForm13);
      jSPredicateForm5.print();
      // Undeclared exception!
      try { 
        jSPredicateForm14.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("(+A#`fDr`Dq24r,3_'.");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = 42;
      streamTokenizer0.whitespaceChars(42, 4042);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Expecting Te&rm";
      objectArray0[4] = (Object) jSTerm0;
      System.setCurrentTimeMillis((-1L));
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) "Expecting Te&rm";
      objectArray0[5] = (Object) consumer0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.forEach(consumer0);
      jSTerm0.isGround();
      jSTerm0.add((Object) "Expecting Te&rm");
      jSTerm0.add((Object) "Expecting Te&rm");
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nval = (double) 32;
      streamTokenizer0.whitespaceChars(32, 32);
      stringReader0.markSupported();
      streamTokenizer0.nval = (double) 32;
      streamTokenizer0.lowerCaseMode(false);
      char[] charArray0 = new char[6];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.wordChars(32, 32);
      streamTokenizer0.sval = null;
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer1.ttype = 32;
      streamTokenizer1.nval = (double) 32;
      streamTokenizer1.ttype = 32;
      streamTokenizer0.nval = (double) 32;
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.ttype = 32;
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.sval = "v0";
      streamTokenizer1.ordinaryChar((-1951));
      unaryOperator0.apply("the tokenizer is SPACE!");
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution0.fail());
      assertNotSame(jSSubstitution1, jSSubstitution0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.apostrophe = (-849);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("8expecting term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution2 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5094656225315988
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      System.setCurrentTimeMillis(807L);
      SystemInUtil.addInputLine("CvJ6rceB3!]rNA#T]JV");
      SystemInUtil.addInputLine("uv:P42d@s|;o)ft2");
      StringReader stringReader0 = new StringReader("iKs gy]r/GL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("iKs gy]r/GL");
      streamTokenizer0.ordinaryChar(107);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(0L);
      stringReader0.read();
      jSTerm0.clonePF();
      streamTokenizer0.ordinaryChar(103);
      jSTerm0.add((Object) null);
      streamTokenizer0.ordinaryChars((-976), (-976));
      System.setCurrentTimeMillis((-976));
      System.setCurrentTimeMillis(0L);
      jSTerm0.add((Object) jSSubstitution0);
      System.setCurrentTimeMillis((-2554L));
      System.setCurrentTimeMillis(107);
      System.setCurrentTimeMillis((-2036L));
      SystemInUtil.addInputLine(" ) ");
      System.setCurrentTimeMillis(107);
      System.setCurrentTimeMillis(902L);
      System.setCurrentTimeMillis(1L);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting Term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringReader0;
      objectArray0[1] = (Object) "Expecting Term";
      objectArray0[0] = (Object) streamTokenizer0;
      objectArray0[3] = (Object) jSTerm0;
      streamTokenizer0.pushBack();
      objectArray0[4] = (Object) stringReader0;
      objectArray0[5] = (Object) streamTokenizer0;
      objectArray0[6] = (Object) "Expecting Term";
      objectArray0[7] = (Object) jSTerm0;
      jSTerm0.addElement(objectArray0[5]);
      jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = jSTerm0.lastElement();
      jSSubstitution0.add(object0);
      jSTerm0.containsAll(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*QK}eYR!t");
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'g';
      charArray0[2] = '<';
      stringReader0.read(charArray0);
      stringReader0.skip(0L);
      stringReader0.read();
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      System.setCurrentTimeMillis(784L);
      System.setCurrentTimeMillis((-678L));
      System.setCurrentTimeMillis((-678L));
      System.setCurrentTimeMillis((-1514L));
      System.setCurrentTimeMillis((-678L));
      System.setCurrentTimeMillis(0L);
      long long0 = (-2069L);
      System.setCurrentTimeMillis((-1514L));
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("opjerator");
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator3);
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.apply("ikz");
      Function<Object, Object> function0 = unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator2);
      Function.identity();
      Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = function0.andThen((Function<? super Object, ? extends String>) function1);
      function2.compose((Function<? super Integer, ?>) unaryOperator2);
      function0.andThen((Function<? super Object, ? extends String>) function2);
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply("eA]M7!p[V");
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator5.apply("+ ");
      UnaryOperator<String> unaryOperator6 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super String, ?>) unaryOperator4);
      unaryOperator6.apply("");
      UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super String, ?>) unaryOperator2);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator7 = UnaryOperator.identity();
      assertSame(unaryOperator7, unaryOperator3);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7824268046877836
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      System.setCurrentTimeMillis(826L);
      StringReader stringReader0 = new StringReader("iKsogy]riiL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      System.setCurrentTimeMillis(10L);
      System.setCurrentTimeMillis((-24L));
      System.setCurrentTimeMillis((-2057L));
      System.setCurrentTimeMillis((-2057L));
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      System.setCurrentTimeMillis((-722L));
      System.setCurrentTimeMillis(10L);
      System.setCurrentTimeMillis((-24L));
      System.setCurrentTimeMillis(89);
      System.setCurrentTimeMillis((-722L));
      jSSubstitution0.listIterator();
      System.setCurrentTimeMillis(826L);
      jSPredicateForm0.print();
      jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      System.setCurrentTimeMillis(10L);
      System.setCurrentTimeMillis((-17L));
      System.setCurrentTimeMillis(826L);
      System.setCurrentTimeMillis(10L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(89);
      System.setCurrentTimeMillis(826L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7824268046877836
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      System.setCurrentTimeMillis(826L);
      StringReader stringReader0 = new StringReader("iKs gy]r/GL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      System.setCurrentTimeMillis(10L);
      System.setCurrentTimeMillis((-24L));
      System.setCurrentTimeMillis((-2057L));
      System.setCurrentTimeMillis((-2057L));
      System.setCurrentTimeMillis((-722L));
      System.setCurrentTimeMillis(10L);
      System.setCurrentTimeMillis((-24L));
      System.setCurrentTimeMillis(89);
      System.setCurrentTimeMillis((-722L));
      jSSubstitution0.listIterator();
      System.setCurrentTimeMillis(826L);
      jSPredicateForm0.print();
      jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      System.setCurrentTimeMillis(10L);
      System.setCurrentTimeMillis((-17L));
      System.setCurrentTimeMillis(826L);
      System.setCurrentTimeMillis(10L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.setSize(3106);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.apply("eA]M7!p[V");
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator6 = UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super String, ? extends String>) unaryOperator1);
      unaryOperator6.apply("+ ");
      UnaryOperator<String> unaryOperator7 = UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super String, ?>) unaryOperator0);
      unaryOperator7.apply("");
      UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super String, ?>) unaryOperator4);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator8 = UnaryOperator.identity();
      assertSame(unaryOperator8, unaryOperator3);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("iKs gyr/L");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.quoteChar(2147483643);
      SystemInUtil.addInputLine("UuU/3!J6m3XN+#V");
      jSTerm0.add((Object) null);
      System.setCurrentTimeMillis(0L);
      stringReader0.read();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      System.setCurrentTimeMillis(807L);
      StringReader stringReader0 = new StringReader("iKs gy]r/G5jL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = 107;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) streamTokenizer0);
      System.setCurrentTimeMillis(0L);
      stringReader0.read();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t9;-1~QAml/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.whitespaceChars((-1), (-1));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ttype = (int) 'i';
      streamTokenizer0.pushBack();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) streamTokenizer0);
      streamTokenizer0.whitespaceChars((-1078419053), 105);
      streamTokenizer0.parseNumbers();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      StreamTokenizer streamTokenizer1 = (StreamTokenizer)unaryOperator0.apply(streamTokenizer0);
      StreamTokenizer streamTokenizer2 = (StreamTokenizer)unaryOperator0.apply(streamTokenizer0);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      streamTokenizer1.quoteChar(884);
      Function.identity();
      streamTokenizer1.ordinaryChars((-1431888477), (-1431888477));
      UnaryOperator.identity();
      streamTokenizer1.slashStarComments(true);
      CharBuffer charBuffer0 = CharBuffer.allocate(884);
      charBuffer0.chars();
      stringReader0.read(charBuffer0);
      streamTokenizer0.commentChar(105);
      unaryOperator0.apply(streamTokenizer2);
      streamTokenizer1.commentChar(105);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.ordinaryChars(105, 0);
      streamTokenizer1.slashSlashComments(true);
      System.setCurrentTimeMillis(105);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.apply("(UthD d");
      unaryOperator2.apply("(UthD d");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator2.apply("udh");
      UnaryOperator.identity();
      unaryOperator0.apply("ks");
      SystemInUtil.addInputLine("udh");
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator4.apply("(UthD d");
      unaryOperator3.apply("<b");
      UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super String, ?>) unaryOperator1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("O$VIt(^o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.15628627654568
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iKz) [yqr/bL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm0.equals(jSPredicateForm1);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm3.toStr();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm4.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm4.clonePF();
      jSPredicateForm3.equals(jSPredicateForm2);
      jSPredicateForm3.toStr();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm3.clonePF();
      jSPredicateForm5.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm7 = new JSPredicateForm();
      jSTerm0.toStr();
      jSPredicateForm7.toStr();
      jSPredicateForm3.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm8 = jSPredicateForm4.standarizerPredicateForm();
      jSPredicateForm8.clonePF();
      jSPredicateForm5.toStr();
      jSPredicateForm3.clonePF();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSPredicateForm5);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate2.and(predicate1);
      jSPredicateForm6.removeIf(predicate2);
      // Undeclared exception!
      try { 
        jSPredicateForm6.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.setSize(1529);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(43);
      jSTerm0.add((Object) integer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "Expecting Te&rm";
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Expecting Te&rm";
      objectArray0[4] = (Object) jSTerm0;
      System.setCurrentTimeMillis((-1L));
      objectArray0[3] = (Object) jSTerm0;
      SystemInUtil.addInputLine("3*22BI-|");
      objectArray0[4] = (Object) "Expecting Te&rm";
      objectArray0[5] = (Object) consumer0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.forEach(consumer0);
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nval = (double) 32;
      streamTokenizer0.whitespaceChars(32, 32);
      stringReader0.markSupported();
      streamTokenizer0.lowerCaseMode(false);
      char[] charArray0 = new char[6];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.wordChars(32, 32);
      streamTokenizer0.sval = null;
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer1.ttype = 32;
      streamTokenizer1.nval = (double) 32;
      streamTokenizer1.ttype = 32;
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.ttype = 32;
      streamTokenizer0.wordChars((-1841252130), (-1916));
      streamTokenizer0.eolIsSignificant(false);
      UnaryOperator.identity();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.sval = "v0";
      streamTokenizer1.ordinaryChar((-1951));
      System.setCurrentTimeMillis(6);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("(UGhd");
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply("ks");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.apply("(UGhd");
      UnaryOperator.identity();
      unaryOperator0.apply("<;kO+jcx%'bJrOw");
      SystemInUtil.addInputLine("ew7ynx*");
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.apply("2.0");
      unaryOperator4.apply("PlanningDomain: error");
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super String, ?>) unaryOperator5);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("JSPredicateForm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nval = (double) 32;
      streamTokenizer0.whitespaceChars(32, 32);
      stringReader0.markSupported();
      streamTokenizer0.lowerCaseMode(false);
      char[] charArray0 = new char[6];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.wordChars(32, 32);
      streamTokenizer0.sval = null;
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer1.ttype = 32;
      streamTokenizer1.nval = (double) 32;
      streamTokenizer1.ttype = 32;
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.ttype = 32;
      streamTokenizer0.wordChars((-1841252130), (-1916));
      streamTokenizer0.eolIsSignificant(false);
      UnaryOperator.identity();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.sval = "v0";
      streamTokenizer1.ordinaryChar((-1951));
      System.setCurrentTimeMillis(6);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "Expecting Term";
      jSTerm0.add((Object) "Expecting Term");
      JSSubstitution jSSubstitution0 = null;
      jSTerm0.makeEval(false);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function3 = Function.identity();
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function5).apply(any());
      Function<Object, Object> function6 = function3.compose((Function<? super Object, ?>) function5);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) function4;
      objectArray0[1] = (Object) function4;
      Function<Object, Object> function7 = function6.andThen((Function<? super Object, ?>) function3);
      function6.apply((Object) null);
      Function<Object, Object> function8 = Function.identity();
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function10 = function6.andThen((Function<? super Object, ? extends String>) function9);
      objectArray0[1] = (Object) function8;
      objectArray0[4] = (Object) function7;
      objectArray0[3] = (Object) function1;
      function3.andThen((Function<? super Object, ? extends String>) function10);
      function6.andThen((Function<? super Object, ? extends String>) function10);
      StringReader stringReader0 = new StringReader("!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      StreamTokenizer streamTokenizer0 = null;
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "(Uth{d";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(Uth{d");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("(+A#`fDr`Dq24r,3_'.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = 42;
      streamTokenizer0.whitespaceChars(42, 4042);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
