/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 05:38:11 GMT 2019
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Ref;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.LocalTime;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.function.Predicate;
import javax.management.remote.JMXPrincipal;
import javax.security.auth.Subject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.AbstractIscTrHandle;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.jni.isc_blob_handle_impl;
import org.firebirdsql.gds.impl.jni.isc_db_handle_impl;
import org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl;
import org.firebirdsql.gds.impl.jni.isc_tr_handle_impl;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.jca.FBConnectionRequestInfo;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.AbstractConnection;
import org.firebirdsql.jdbc.DummyCallableStatementMetaData;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBCallableStatement;
import org.firebirdsql.jdbc.FBConnection;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.firebirdsql.jdbc.field.FBBlobField;
import org.firebirdsql.jdbc.field.FBCachedBlobField;
import org.firebirdsql.jdbc.field.FBCachedLongVarCharField;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.595040668104201
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      byte[][] byteArray0 = new byte[1][0];
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      assertNotNull(linkedList2);
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList2.contains(byteArray0));
      
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      assertNotNull(linkedList3);
      assertTrue(linkedList3.equals((Object)linkedList2));
      assertTrue(linkedList3.equals((Object)linkedList0));
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertEquals(0, linkedList3.size());
      assertFalse(linkedList3.contains(byteArray0));
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList3);
      assertNotNull(fBResultSet0);
      assertTrue(linkedList3.equals((Object)linkedList2));
      assertTrue(linkedList3.equals((Object)linkedList0));
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertEquals(0, linkedList3.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList3.contains(byteArray0));
      
      boolean boolean0 = linkedList3.add((byte[][]) null);
      assertTrue(boolean0);
      assertFalse(linkedList3.equals((Object)linkedList0));
      assertFalse(linkedList3.equals((Object)linkedList2));
      assertFalse(linkedList3.equals((Object)linkedList1));
      assertEquals(1, linkedList3.size());
      assertNotSame(linkedList3, linkedList0);
      assertNotSame(linkedList3, linkedList2);
      assertNotSame(linkedList3, linkedList1);
      assertFalse(linkedList3.contains(byteArray0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList3, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertFalse(linkedList3.equals((Object)linkedList0));
      assertFalse(linkedList3.equals((Object)linkedList2));
      assertFalse(linkedList3.equals((Object)linkedList1));
      assertEquals(1, linkedList3.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList3.contains(byteArray0));
      
      fBCachedFetcher0.afterLast();
      assertFalse(linkedList3.equals((Object)linkedList0));
      assertFalse(linkedList3.equals((Object)linkedList2));
      assertFalse(linkedList3.equals((Object)linkedList1));
      assertEquals(1, linkedList3.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertNotSame(linkedList3, linkedList0);
      assertNotSame(linkedList3, linkedList2);
      assertNotSame(linkedList3, linkedList1);
      assertFalse(linkedList3.contains(byteArray0));
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertFalse(linkedList3.equals((Object)linkedList0));
      assertFalse(linkedList3.equals((Object)linkedList2));
      assertFalse(linkedList3.equals((Object)linkedList1));
      assertEquals(1, linkedList3.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(linkedList3, linkedList0);
      assertNotSame(linkedList3, linkedList2);
      assertNotSame(linkedList3, linkedList1);
      assertFalse(linkedList3.contains(byteArray0));
      
      fBCachedFetcher0.deleteRow();
      assertFalse(linkedList3.equals((Object)linkedList0));
      assertFalse(linkedList3.equals((Object)linkedList2));
      assertFalse(linkedList3.equals((Object)linkedList1));
      assertEquals(1, linkedList3.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertNotSame(linkedList3, linkedList0);
      assertNotSame(linkedList3, linkedList2);
      assertNotSame(linkedList3, linkedList1);
      assertFalse(linkedList3.contains(byteArray0));
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      assertNotNull(predicate0);
      
      boolean boolean1 = predicate0.test(linkedList0);
      assertFalse(boolean1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList0.equals((Object)linkedList3));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, linkedList0.size());
      assertNotSame(linkedList0, linkedList2);
      assertNotSame(linkedList0, linkedList3);
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.contains(byteArray0));
      
      // Undeclared exception!
      try { 
        predicate0.or((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5363842250920765
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, xSQLVARArray0.length);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      
      fBCachedFetcher0.afterLast();
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      
      boolean boolean1 = fBCachedFetcher0.previous();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      
      boolean boolean2 = fBResultSet0.last();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, xSQLVARArray0.length);
      
      boolean boolean3 = fBCachedFetcher0.first();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      
      boolean boolean4 = fBCachedFetcher0.next();
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3273800970551584
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      byte[][] byteArray0 = new byte[1][0];
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      assertNotNull(linkedList2);
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList2.contains(byteArray0));
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList2);
      assertNotNull(fBResultSet0);
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList2.contains(byteArray0));
      
      boolean boolean0 = linkedList2.add((byte[][]) null);
      assertTrue(boolean0);
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertEquals(1, linkedList2.size());
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertFalse(linkedList2.contains(byteArray0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList2, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertEquals(1, linkedList2.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList2.contains(byteArray0));
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertEquals(1, linkedList2.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertFalse(linkedList2.contains(byteArray0));
      
      fBCachedFetcher0.deleteRow();
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertEquals(1, linkedList2.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, xSQLVARArray0.length);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertFalse(linkedList2.contains(byteArray0));
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread("E\"d#V|^J&yf6;E");
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(mockThread0, "");
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1);
      assertNotNull(mockThread2);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      
      MockThread mockThread3 = new MockThread(threadGroup0, mockThread2, " ", (-790L));
      assertNotNull(mockThread3);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread2));
      assertFalse(mockThread3.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread0));
      
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread4 = new MockThread(threadGroup1, mockThread0);
      assertNotNull(mockThread4);
      assertFalse(mockThread4.equals((Object)mockThread2));
      assertFalse(mockThread4.equals((Object)mockThread3));
      assertFalse(mockThread4.equals((Object)mockThread1));
      assertFalse(mockThread4.equals((Object)mockThread0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread2));
      
      MockThread mockThread5 = new MockThread(mockThread1);
      assertNotNull(mockThread5);
      assertFalse(mockThread5.equals((Object)mockThread3));
      assertFalse(mockThread5.equals((Object)mockThread0));
      assertFalse(mockThread5.equals((Object)mockThread1));
      assertFalse(mockThread5.equals((Object)mockThread4));
      assertFalse(mockThread5.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread4));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread4));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2005);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleWithFixedDelay(mockThread2, 2005, 2005, timeUnit0);
      assertNotNull(scheduledFuture0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread5));
      assertFalse(mockThread0.equals((Object)mockThread4));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread5));
      assertFalse(mockThread1.equals((Object)mockThread4));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread4));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread3));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread5));
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread3);
      assertNotSame(mockThread0, mockThread5);
      assertNotSame(mockThread0, mockThread4);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread3);
      assertNotSame(mockThread1, mockThread5);
      assertNotSame(mockThread1, mockThread4);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread2, mockThread4);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread3);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread5);
      
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      assertNotNull(linkedList3);
      assertFalse(linkedList3.equals((Object)linkedList2));
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertTrue(linkedList3.equals((Object)linkedList0));
      assertEquals(0, linkedList3.size());
      assertFalse(linkedList3.contains(byteArray0));
      
      boolean boolean1 = linkedList3.removeFirstOccurrence("");
      assertFalse(boolean1);
      assertFalse(linkedList3.equals((Object)linkedList2));
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertTrue(linkedList3.equals((Object)linkedList0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, linkedList3.size());
      assertNotSame(linkedList3, linkedList2);
      assertNotSame(linkedList3, linkedList0);
      assertNotSame(linkedList3, linkedList1);
      assertFalse(linkedList3.contains(byteArray0));
      
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList1);
      assertNotNull(fBResultSet1);
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertTrue(linkedList1.equals((Object)linkedList3));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertEquals(0, linkedList1.size());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(1003, fBResultSet1.getType());
      assertFalse(fBResultSet1.isClosed());
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList1.contains(byteArray0));
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet1);
      assertNotNull(fBCachedFetcher1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.equals((Object)linkedList3));
      assertFalse(linkedList0.equals((Object)linkedList2));
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertTrue(linkedList1.equals((Object)linkedList3));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(1003, fBResultSet1.getType());
      assertFalse(fBResultSet1.isClosed());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isFirst());
      assertTrue(fBCachedFetcher1.isEmpty());
      assertTrue(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(linkedList1.contains(byteArray0));
      
      int int0 = fBCachedFetcher0.getRowNum();
      assertEquals(1, int0);
      assertFalse(linkedList2.equals((Object)linkedList3));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(fBResultSet0.equals((Object)fBResultSet1));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertEquals(1, linkedList2.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, xSQLVARArray0.length);
      assertNotSame(linkedList2, linkedList3);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(fBResultSet0, fBResultSet1);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      assertFalse(linkedList2.contains(byteArray0));
      
      int int1 = fBCachedFetcher1.getRowNum();
      assertEquals(0, int1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.equals((Object)linkedList3));
      assertFalse(linkedList0.equals((Object)linkedList2));
      assertFalse(linkedList1.equals((Object)linkedList2));
      assertTrue(linkedList1.equals((Object)linkedList3));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(fBResultSet1.equals((Object)fBResultSet0));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertFalse(int1 == int0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNull(fBResultSet1.getCursorName());
      assertEquals(0, fBResultSet1.getRow());
      assertEquals(1007, fBResultSet1.getConcurrency());
      assertEquals(0, fBResultSet1.getFetchSize());
      assertEquals(2, fBResultSet1.getHoldability());
      assertEquals(1000, fBResultSet1.getFetchDirection());
      assertEquals(1003, fBResultSet1.getType());
      assertFalse(fBResultSet1.isClosed());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isFirst());
      assertTrue(fBCachedFetcher1.isEmpty());
      assertTrue(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertEquals(0, xSQLVARArray0.length);
      assertNotSame(linkedList0, linkedList3);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      assertNotSame(linkedList1, linkedList2);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList1, linkedList3);
      assertNotSame(fBResultSet1, fBResultSet0);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(linkedList1.contains(byteArray0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.162409200836301
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, xSQLVARArray0.length);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(0, isc_tr_handle_impl0.getState());
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertNotNull(isc_blob_handle_impl0);
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      
      isc_blob_handle_impl0.setTr(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      
      isc_tr_handle_impl isc_tr_handle_impl1 = isc_blob_handle_impl0.getTr();
      assertNotNull(isc_tr_handle_impl1);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertSame(isc_tr_handle_impl1, isc_tr_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl2 = isc_blob_handle_impl0.getTr();
      assertNotNull(isc_tr_handle_impl2);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0, isc_tr_handle_impl2.getState());
      assertSame(isc_tr_handle_impl2, isc_tr_handle_impl1);
      assertSame(isc_tr_handle_impl2, isc_tr_handle_impl0);
      
      isc_blob_handle_impl0.setTr(isc_tr_handle_impl2);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0, isc_tr_handle_impl2.getState());
      assertSame(isc_tr_handle_impl2, isc_tr_handle_impl1);
      assertSame(isc_tr_handle_impl2, isc_tr_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl3 = isc_blob_handle_impl0.getTr();
      assertNotNull(isc_tr_handle_impl3);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0, isc_tr_handle_impl3.getState());
      assertSame(isc_tr_handle_impl3, isc_tr_handle_impl2);
      assertSame(isc_tr_handle_impl3, isc_tr_handle_impl1);
      assertSame(isc_tr_handle_impl3, isc_tr_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl4 = new isc_tr_handle_impl();
      assertNotNull(isc_tr_handle_impl4);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl1));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl3));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl2));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl0));
      assertEquals(0, isc_tr_handle_impl4.getState());
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl0);
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      
      isc_stmt_handle_impl0.registerTransaction(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertFalse(isc_tr_handle_impl0.equals((Object)isc_tr_handle_impl4));
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertSame(isc_tr_handle_impl0, isc_tr_handle_impl1);
      assertNotSame(isc_tr_handle_impl0, isc_tr_handle_impl4);
      assertSame(isc_tr_handle_impl0, isc_tr_handle_impl2);
      assertSame(isc_tr_handle_impl0, isc_tr_handle_impl3);
      
      org.firebirdsql.gds.impl.wire.isc_tr_handle_impl isc_tr_handle_impl5 = new org.firebirdsql.gds.impl.wire.isc_tr_handle_impl();
      assertNotNull(isc_tr_handle_impl5);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, isc_tr_handle_impl5.getState());
      
      isc_tr_handle_impl5.forgetResultSets();
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, isc_tr_handle_impl5.getState());
      
      org.firebirdsql.gds.impl.wire.isc_tr_handle_impl isc_tr_handle_impl6 = new org.firebirdsql.gds.impl.wire.isc_tr_handle_impl();
      assertNotNull(isc_tr_handle_impl6);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertTrue(isc_tr_handle_impl6.equals((Object)isc_tr_handle_impl5));
      assertEquals(0, isc_tr_handle_impl6.getState());
      
      isc_tr_handle_impl6.registerStatementWithTransaction(isc_stmt_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertTrue(isc_tr_handle_impl6.equals((Object)isc_tr_handle_impl5));
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_tr_handle_impl6.getState());
      assertNotSame(isc_tr_handle_impl6, isc_tr_handle_impl5);
      
      isc_tr_handle_impl6.unregisterStatementFromTransaction(isc_stmt_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertTrue(isc_tr_handle_impl6.equals((Object)isc_tr_handle_impl5));
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_tr_handle_impl6.getState());
      assertNotSame(isc_tr_handle_impl6, isc_tr_handle_impl5);
      
      org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl1);
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      
      isc_stmt_handle_impl1.registerTransaction(isc_tr_handle_impl1);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertFalse(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl4));
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl4);
      assertSame(isc_tr_handle_impl1, isc_tr_handle_impl0);
      assertSame(isc_tr_handle_impl1, isc_tr_handle_impl2);
      assertSame(isc_tr_handle_impl1, isc_tr_handle_impl3);
      
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      assertNotNull(isc_blob_handle_impl1);
      assertFalse(isc_blob_handle_impl1.equals((Object)isc_blob_handle_impl0));
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertFalse(isc_blob_handle_impl1.isEof());
      
      isc_blob_handle_impl isc_blob_handle_impl2 = new isc_blob_handle_impl();
      assertNotNull(isc_blob_handle_impl2);
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl0));
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl1));
      assertEquals(0L, isc_blob_handle_impl2.getBlobId());
      assertEquals(0, isc_blob_handle_impl2.getRblId());
      assertFalse(isc_blob_handle_impl2.isEof());
      
      isc_blob_handle_impl0.setTr(isc_tr_handle_impl1);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertFalse(isc_blob_handle_impl0.equals((Object)isc_blob_handle_impl1));
      assertFalse(isc_blob_handle_impl0.equals((Object)isc_blob_handle_impl2));
      assertFalse(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl4));
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotSame(isc_blob_handle_impl0, isc_blob_handle_impl1);
      assertNotSame(isc_blob_handle_impl0, isc_blob_handle_impl2);
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl4);
      assertSame(isc_tr_handle_impl1, isc_tr_handle_impl0);
      assertSame(isc_tr_handle_impl1, isc_tr_handle_impl2);
      assertSame(isc_tr_handle_impl1, isc_tr_handle_impl3);
      
      isc_blob_handle_impl2.setTr(isc_tr_handle_impl2);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertFalse(isc_blob_handle_impl0.equals((Object)isc_blob_handle_impl1));
      assertFalse(isc_blob_handle_impl0.equals((Object)isc_blob_handle_impl2));
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl0));
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl1));
      assertFalse(isc_tr_handle_impl2.equals((Object)isc_tr_handle_impl4));
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl2.getBlobId());
      assertEquals(0, isc_blob_handle_impl2.getRblId());
      assertFalse(isc_blob_handle_impl2.isEof());
      assertEquals(0, isc_tr_handle_impl2.getState());
      assertNotSame(isc_blob_handle_impl0, isc_blob_handle_impl1);
      assertNotSame(isc_blob_handle_impl0, isc_blob_handle_impl2);
      assertNotSame(isc_blob_handle_impl2, isc_blob_handle_impl0);
      assertNotSame(isc_blob_handle_impl2, isc_blob_handle_impl1);
      assertSame(isc_tr_handle_impl2, isc_tr_handle_impl1);
      assertSame(isc_tr_handle_impl2, isc_tr_handle_impl3);
      assertNotSame(isc_tr_handle_impl2, isc_tr_handle_impl4);
      assertSame(isc_tr_handle_impl2, isc_tr_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl2);
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl0));
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl2.getRsrId());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      
      isc_stmt_handle_impl2.registerTransaction(isc_tr_handle_impl4);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl0));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl1));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl3));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl2));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl0));
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl2.getRsrId());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertEquals(0, isc_tr_handle_impl4.getState());
      assertNotSame(isc_stmt_handle_impl2, isc_stmt_handle_impl0);
      assertNotSame(isc_tr_handle_impl4, isc_tr_handle_impl1);
      assertNotSame(isc_tr_handle_impl4, isc_tr_handle_impl3);
      assertNotSame(isc_tr_handle_impl4, isc_tr_handle_impl2);
      assertNotSame(isc_tr_handle_impl4, isc_tr_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl3 = new isc_blob_handle_impl();
      assertNotNull(isc_blob_handle_impl3);
      assertFalse(isc_blob_handle_impl3.equals((Object)isc_blob_handle_impl1));
      assertFalse(isc_blob_handle_impl3.equals((Object)isc_blob_handle_impl0));
      assertFalse(isc_blob_handle_impl3.equals((Object)isc_blob_handle_impl2));
      assertEquals(0L, isc_blob_handle_impl3.getBlobId());
      assertFalse(isc_blob_handle_impl3.isEof());
      assertEquals(0, isc_blob_handle_impl3.getRblId());
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertNotSame(linkedList0, linkedList1);
      
      boolean boolean0 = fBCachedFetcher0.isFirst();
      assertTrue(boolean0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertNotSame(linkedList0, linkedList1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.226328218111307
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList linkedList1 = (LinkedList)linkedList0.clone();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, xSQLVARArray0.length);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, xSQLVARArray0.length);
      
      boolean boolean1 = fBCachedFetcher0.next();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, xSQLVARArray0.length);
      
      fBCachedFetcher0.deleteRow();
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, xSQLVARArray0.length);
      
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, xSQLVARArray0.length);
      
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, xSQLVARArray0.length);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9549537884935924
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList linkedList1 = (LinkedList)linkedList0.clone();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, xSQLVARArray0.length);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, xSQLVARArray0.length);
      
      boolean boolean1 = fBCachedFetcher0.next();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, xSQLVARArray0.length);
      
      boolean boolean2 = fBCachedFetcher0.first();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, xSQLVARArray0.length);
      
      fBCachedFetcher0.deleteRow();
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, xSQLVARArray0.length);
      
      boolean boolean3 = fBCachedFetcher0.previous();
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, xSQLVARArray0.length);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, xSQLVARArray0.length);
      
      boolean boolean4 = fBCachedFetcher0.relative(1690);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, xSQLVARArray0.length);
      
      fBCachedFetcher0.setFetchSize(93);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(93, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, xSQLVARArray0.length);
      
      boolean boolean5 = fBCachedFetcher0.relative(136);
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(93, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, xSQLVARArray0.length);
      
      boolean boolean6 = fBCachedFetcher0.isFirst();
      assertFalse(boolean6);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(93, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, xSQLVARArray0.length);
      
      System.setCurrentTimeMillis(842L);
      System.setCurrentTimeMillis(136);
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(93, int0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(93, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, xSQLVARArray0.length);
      
      boolean boolean7 = fBCachedFetcher0.last();
      assertTrue(boolean7);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean3);
      assertEquals(1, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(93, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, xSQLVARArray0.length);
      
      int int1 = (-4);
      try { 
        fBResultSet0.getObject(":8k7t-W6-l");
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // The resultSet is not in a row, use next
         //
         verifyException("org.firebirdsql.jdbc.AbstractResultSet", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9535670970117665
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, xSQLVARArray0.length);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, isc_tr_handle_impl0.getState());
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertNotNull(isc_blob_handle_impl0);
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      
      isc_blob_handle_impl0.setTr(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      
      isc_tr_handle_impl isc_tr_handle_impl1 = isc_blob_handle_impl0.getTr();
      assertNotNull(isc_tr_handle_impl1);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertSame(isc_tr_handle_impl1, isc_tr_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl2 = isc_blob_handle_impl0.getTr();
      assertNotNull(isc_tr_handle_impl2);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_tr_handle_impl2.getState());
      assertSame(isc_tr_handle_impl2, isc_tr_handle_impl0);
      assertSame(isc_tr_handle_impl2, isc_tr_handle_impl1);
      
      isc_blob_handle_impl0.setTr(isc_tr_handle_impl2);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_tr_handle_impl2.getState());
      assertSame(isc_tr_handle_impl2, isc_tr_handle_impl0);
      assertSame(isc_tr_handle_impl2, isc_tr_handle_impl1);
      
      isc_tr_handle_impl isc_tr_handle_impl3 = isc_blob_handle_impl0.getTr();
      assertNotNull(isc_tr_handle_impl3);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_tr_handle_impl3.getState());
      assertSame(isc_tr_handle_impl3, isc_tr_handle_impl1);
      assertSame(isc_tr_handle_impl3, isc_tr_handle_impl2);
      assertSame(isc_tr_handle_impl3, isc_tr_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl4 = new isc_tr_handle_impl();
      assertNotNull(isc_tr_handle_impl4);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl3));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl0));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl2));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl1));
      assertEquals(0, isc_tr_handle_impl4.getState());
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl0);
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      
      isc_stmt_handle_impl0.registerTransaction(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertFalse(isc_tr_handle_impl0.equals((Object)isc_tr_handle_impl4));
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertSame(isc_tr_handle_impl0, isc_tr_handle_impl2);
      assertNotSame(isc_tr_handle_impl0, isc_tr_handle_impl4);
      assertSame(isc_tr_handle_impl0, isc_tr_handle_impl1);
      assertSame(isc_tr_handle_impl0, isc_tr_handle_impl3);
      
      org.firebirdsql.gds.impl.wire.isc_tr_handle_impl isc_tr_handle_impl5 = new org.firebirdsql.gds.impl.wire.isc_tr_handle_impl();
      assertNotNull(isc_tr_handle_impl5);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, isc_tr_handle_impl5.getState());
      
      isc_tr_handle_impl5.forgetResultSets();
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, isc_tr_handle_impl5.getState());
      
      org.firebirdsql.gds.impl.wire.isc_tr_handle_impl isc_tr_handle_impl6 = new org.firebirdsql.gds.impl.wire.isc_tr_handle_impl();
      assertNotNull(isc_tr_handle_impl6);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertTrue(isc_tr_handle_impl6.equals((Object)isc_tr_handle_impl5));
      assertEquals(0, isc_tr_handle_impl6.getState());
      
      isc_tr_handle_impl6.registerStatementWithTransaction(isc_stmt_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertTrue(isc_tr_handle_impl6.equals((Object)isc_tr_handle_impl5));
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_tr_handle_impl6.getState());
      assertNotSame(isc_tr_handle_impl6, isc_tr_handle_impl5);
      
      isc_tr_handle_impl6.unregisterStatementFromTransaction(isc_stmt_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertTrue(isc_tr_handle_impl6.equals((Object)isc_tr_handle_impl5));
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_tr_handle_impl6.getState());
      assertNotSame(isc_tr_handle_impl6, isc_tr_handle_impl5);
      
      org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      
      isc_stmt_handle_impl1.registerTransaction(isc_tr_handle_impl1);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertFalse(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl4));
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertSame(isc_tr_handle_impl1, isc_tr_handle_impl3);
      assertSame(isc_tr_handle_impl1, isc_tr_handle_impl2);
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl4);
      assertSame(isc_tr_handle_impl1, isc_tr_handle_impl0);
      
      isc_tr_handle_impl4.unregisterStatementFromTransaction(isc_stmt_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl3));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl0));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl2));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl1));
      assertEquals(0, isc_tr_handle_impl4.getState());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNotSame(isc_tr_handle_impl4, isc_tr_handle_impl3);
      assertNotSame(isc_tr_handle_impl4, isc_tr_handle_impl0);
      assertNotSame(isc_tr_handle_impl4, isc_tr_handle_impl2);
      assertNotSame(isc_tr_handle_impl4, isc_tr_handle_impl1);
      
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      assertNotNull(isc_blob_handle_impl1);
      assertFalse(isc_blob_handle_impl1.equals((Object)isc_blob_handle_impl0));
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      
      isc_blob_handle_impl isc_blob_handle_impl2 = new isc_blob_handle_impl();
      assertNotNull(isc_blob_handle_impl2);
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl0));
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl1));
      assertEquals(0L, isc_blob_handle_impl2.getBlobId());
      assertFalse(isc_blob_handle_impl2.isEof());
      assertEquals(0, isc_blob_handle_impl2.getRblId());
      
      isc_blob_handle_impl0.setTr(isc_tr_handle_impl1);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertFalse(isc_blob_handle_impl0.equals((Object)isc_blob_handle_impl1));
      assertFalse(isc_blob_handle_impl0.equals((Object)isc_blob_handle_impl2));
      assertFalse(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl4));
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotSame(isc_blob_handle_impl0, isc_blob_handle_impl1);
      assertNotSame(isc_blob_handle_impl0, isc_blob_handle_impl2);
      assertSame(isc_tr_handle_impl1, isc_tr_handle_impl3);
      assertSame(isc_tr_handle_impl1, isc_tr_handle_impl2);
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl4);
      assertSame(isc_tr_handle_impl1, isc_tr_handle_impl0);
      
      isc_blob_handle_impl2.setTr(isc_tr_handle_impl2);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertFalse(isc_blob_handle_impl0.equals((Object)isc_blob_handle_impl1));
      assertFalse(isc_blob_handle_impl0.equals((Object)isc_blob_handle_impl2));
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl0));
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl1));
      assertFalse(isc_tr_handle_impl2.equals((Object)isc_tr_handle_impl4));
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl2.getBlobId());
      assertFalse(isc_blob_handle_impl2.isEof());
      assertEquals(0, isc_blob_handle_impl2.getRblId());
      assertEquals(0, isc_tr_handle_impl2.getState());
      assertNotSame(isc_blob_handle_impl0, isc_blob_handle_impl1);
      assertNotSame(isc_blob_handle_impl0, isc_blob_handle_impl2);
      assertNotSame(isc_blob_handle_impl2, isc_blob_handle_impl0);
      assertNotSame(isc_blob_handle_impl2, isc_blob_handle_impl1);
      assertNotSame(isc_tr_handle_impl2, isc_tr_handle_impl4);
      assertSame(isc_tr_handle_impl2, isc_tr_handle_impl0);
      assertSame(isc_tr_handle_impl2, isc_tr_handle_impl3);
      assertSame(isc_tr_handle_impl2, isc_tr_handle_impl1);
      
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl2);
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl0));
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertEquals(0, isc_stmt_handle_impl2.getRsrId());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      
      isc_stmt_handle_impl isc_stmt_handle_impl3 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl3);
      assertFalse(isc_stmt_handle_impl3.equals((Object)isc_stmt_handle_impl2));
      assertFalse(isc_stmt_handle_impl3.equals((Object)isc_stmt_handle_impl0));
      assertEquals(0, isc_stmt_handle_impl3.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl3.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl3.getSelectCount());
      assertNull(isc_stmt_handle_impl3.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl3.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl3.isValid());
      assertFalse(isc_stmt_handle_impl3.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl3.size());
      assertEquals(0, isc_stmt_handle_impl3.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl3.getRsrId());
      assertFalse(isc_stmt_handle_impl3.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl3.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl3.getStatementType());
      
      isc_stmt_handle_impl3.registerTransaction(isc_tr_handle_impl4);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertFalse(isc_stmt_handle_impl3.equals((Object)isc_stmt_handle_impl2));
      assertFalse(isc_stmt_handle_impl3.equals((Object)isc_stmt_handle_impl0));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl3));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl0));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl2));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl1));
      assertEquals(0, isc_stmt_handle_impl3.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl3.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl3.getSelectCount());
      assertNull(isc_stmt_handle_impl3.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl3.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl3.isValid());
      assertFalse(isc_stmt_handle_impl3.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl3.size());
      assertEquals(0, isc_stmt_handle_impl3.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl3.getRsrId());
      assertFalse(isc_stmt_handle_impl3.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl3.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl3.getStatementType());
      assertEquals(0, isc_tr_handle_impl4.getState());
      assertNotSame(isc_stmt_handle_impl3, isc_stmt_handle_impl2);
      assertNotSame(isc_stmt_handle_impl3, isc_stmt_handle_impl0);
      assertNotSame(isc_tr_handle_impl4, isc_tr_handle_impl3);
      assertNotSame(isc_tr_handle_impl4, isc_tr_handle_impl0);
      assertNotSame(isc_tr_handle_impl4, isc_tr_handle_impl2);
      assertNotSame(isc_tr_handle_impl4, isc_tr_handle_impl1);
      
      isc_blob_handle_impl isc_blob_handle_impl3 = new isc_blob_handle_impl();
      assertNotNull(isc_blob_handle_impl3);
      assertFalse(isc_blob_handle_impl3.equals((Object)isc_blob_handle_impl0));
      assertFalse(isc_blob_handle_impl3.equals((Object)isc_blob_handle_impl1));
      assertFalse(isc_blob_handle_impl3.equals((Object)isc_blob_handle_impl2));
      assertEquals(0, isc_blob_handle_impl3.getRblId());
      assertEquals(0L, isc_blob_handle_impl3.getBlobId());
      assertFalse(isc_blob_handle_impl3.isEof());
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, xSQLVARArray0.length);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, xSQLVARArray0.length);
      assertNotSame(linkedList0, linkedList1);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, xSQLVARArray0.length);
      assertNotSame(linkedList0, linkedList1);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, xSQLVARArray0.length);
      assertNotSame(linkedList0, linkedList1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      assertNotNull(linkedList2);
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      
      linkedList0.clear();
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertEquals(0, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      assertNotNull(linkedList3);
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertTrue(linkedList3.equals((Object)linkedList0));
      assertTrue(linkedList3.equals((Object)linkedList2));
      assertEquals(0, linkedList3.size());
      
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      assertNotNull(linkedList4);
      assertTrue(linkedList4.equals((Object)linkedList0));
      assertTrue(linkedList4.equals((Object)linkedList2));
      assertTrue(linkedList4.equals((Object)linkedList1));
      assertTrue(linkedList4.equals((Object)linkedList3));
      assertEquals(0, linkedList4.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertTrue(linkedList0.equals((Object)linkedList3));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.equals((Object)linkedList4));
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      fBCachedFetcher0.setFetchSize((-1013));
      assertTrue(linkedList0.equals((Object)linkedList3));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.equals((Object)linkedList4));
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals((-1013), fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      assertNotSame(linkedList0, linkedList4);
      assertNotSame(linkedList0, linkedList3);
      
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals((-1013), int0);
      assertTrue(linkedList0.equals((Object)linkedList3));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.equals((Object)linkedList4));
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals((-1013), fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      assertNotSame(linkedList0, linkedList4);
      assertNotSame(linkedList0, linkedList3);
      
      boolean boolean0 = fBCachedFetcher0.isFirst();
      assertFalse(boolean0);
      assertTrue(linkedList0.equals((Object)linkedList3));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.equals((Object)linkedList4));
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals((-1013), fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      assertNotSame(linkedList0, linkedList4);
      assertNotSame(linkedList0, linkedList3);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.514531032337307
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, xSQLVARArray0.length);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(0, isc_tr_handle_impl0.getState());
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertNotNull(isc_blob_handle_impl0);
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      
      isc_blob_handle_impl0.setTr(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      
      isc_tr_handle_impl isc_tr_handle_impl1 = isc_blob_handle_impl0.getTr();
      assertNotNull(isc_tr_handle_impl1);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertSame(isc_tr_handle_impl1, isc_tr_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl2 = isc_blob_handle_impl0.getTr();
      assertNotNull(isc_tr_handle_impl2);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0, isc_tr_handle_impl2.getState());
      assertSame(isc_tr_handle_impl2, isc_tr_handle_impl1);
      assertSame(isc_tr_handle_impl2, isc_tr_handle_impl0);
      
      isc_blob_handle_impl0.setTr(isc_tr_handle_impl2);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0, isc_tr_handle_impl2.getState());
      assertSame(isc_tr_handle_impl2, isc_tr_handle_impl1);
      assertSame(isc_tr_handle_impl2, isc_tr_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl3 = isc_blob_handle_impl0.getTr();
      assertNotNull(isc_tr_handle_impl3);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0, isc_tr_handle_impl3.getState());
      assertSame(isc_tr_handle_impl3, isc_tr_handle_impl2);
      assertSame(isc_tr_handle_impl3, isc_tr_handle_impl0);
      assertSame(isc_tr_handle_impl3, isc_tr_handle_impl1);
      
      isc_tr_handle_impl isc_tr_handle_impl4 = new isc_tr_handle_impl();
      assertNotNull(isc_tr_handle_impl4);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl1));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl0));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl3));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl2));
      assertEquals(0, isc_tr_handle_impl4.getState());
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl0);
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      
      isc_stmt_handle_impl0.registerTransaction(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertFalse(isc_tr_handle_impl0.equals((Object)isc_tr_handle_impl4));
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNotSame(isc_tr_handle_impl0, isc_tr_handle_impl4);
      assertSame(isc_tr_handle_impl0, isc_tr_handle_impl1);
      assertSame(isc_tr_handle_impl0, isc_tr_handle_impl3);
      assertSame(isc_tr_handle_impl0, isc_tr_handle_impl2);
      
      org.firebirdsql.gds.impl.wire.isc_tr_handle_impl isc_tr_handle_impl5 = new org.firebirdsql.gds.impl.wire.isc_tr_handle_impl();
      assertNotNull(isc_tr_handle_impl5);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, isc_tr_handle_impl5.getState());
      
      isc_tr_handle_impl5.forgetResultSets();
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, isc_tr_handle_impl5.getState());
      
      org.firebirdsql.gds.impl.wire.isc_tr_handle_impl isc_tr_handle_impl6 = new org.firebirdsql.gds.impl.wire.isc_tr_handle_impl();
      assertNotNull(isc_tr_handle_impl6);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertTrue(isc_tr_handle_impl6.equals((Object)isc_tr_handle_impl5));
      assertEquals(0, isc_tr_handle_impl6.getState());
      
      isc_tr_handle_impl6.registerStatementWithTransaction(isc_stmt_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertTrue(isc_tr_handle_impl6.equals((Object)isc_tr_handle_impl5));
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_tr_handle_impl6.getState());
      assertNotSame(isc_tr_handle_impl6, isc_tr_handle_impl5);
      
      isc_tr_handle_impl6.unregisterStatementFromTransaction(isc_stmt_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertTrue(isc_tr_handle_impl6.equals((Object)isc_tr_handle_impl5));
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_tr_handle_impl6.getState());
      assertNotSame(isc_tr_handle_impl6, isc_tr_handle_impl5);
      
      org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl1);
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isValid());
      
      isc_stmt_handle_impl1.registerTransaction(isc_tr_handle_impl1);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertFalse(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl4));
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl4);
      assertSame(isc_tr_handle_impl1, isc_tr_handle_impl0);
      assertSame(isc_tr_handle_impl1, isc_tr_handle_impl3);
      assertSame(isc_tr_handle_impl1, isc_tr_handle_impl2);
      
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      assertNotNull(isc_blob_handle_impl1);
      assertFalse(isc_blob_handle_impl1.equals((Object)isc_blob_handle_impl0));
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      
      isc_blob_handle_impl isc_blob_handle_impl2 = new isc_blob_handle_impl();
      assertNotNull(isc_blob_handle_impl2);
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl1));
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl0));
      assertFalse(isc_blob_handle_impl2.isEof());
      assertEquals(0, isc_blob_handle_impl2.getRblId());
      assertEquals(0L, isc_blob_handle_impl2.getBlobId());
      
      isc_blob_handle_impl0.setTr(isc_tr_handle_impl1);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertFalse(isc_blob_handle_impl0.equals((Object)isc_blob_handle_impl1));
      assertFalse(isc_blob_handle_impl0.equals((Object)isc_blob_handle_impl2));
      assertFalse(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl4));
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotSame(isc_blob_handle_impl0, isc_blob_handle_impl1);
      assertNotSame(isc_blob_handle_impl0, isc_blob_handle_impl2);
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl4);
      assertSame(isc_tr_handle_impl1, isc_tr_handle_impl0);
      assertSame(isc_tr_handle_impl1, isc_tr_handle_impl3);
      assertSame(isc_tr_handle_impl1, isc_tr_handle_impl2);
      
      isc_blob_handle_impl2.setTr(isc_tr_handle_impl2);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertFalse(isc_blob_handle_impl0.equals((Object)isc_blob_handle_impl1));
      assertFalse(isc_blob_handle_impl0.equals((Object)isc_blob_handle_impl2));
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl1));
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl0));
      assertFalse(isc_tr_handle_impl2.equals((Object)isc_tr_handle_impl4));
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl2.isEof());
      assertEquals(0, isc_blob_handle_impl2.getRblId());
      assertEquals(0L, isc_blob_handle_impl2.getBlobId());
      assertEquals(0, isc_tr_handle_impl2.getState());
      assertNotSame(isc_blob_handle_impl0, isc_blob_handle_impl1);
      assertNotSame(isc_blob_handle_impl0, isc_blob_handle_impl2);
      assertNotSame(isc_blob_handle_impl2, isc_blob_handle_impl1);
      assertNotSame(isc_blob_handle_impl2, isc_blob_handle_impl0);
      assertSame(isc_tr_handle_impl2, isc_tr_handle_impl3);
      assertSame(isc_tr_handle_impl2, isc_tr_handle_impl1);
      assertNotSame(isc_tr_handle_impl2, isc_tr_handle_impl4);
      assertSame(isc_tr_handle_impl2, isc_tr_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl2);
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl0));
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl2.getRsrId());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      
      isc_stmt_handle_impl isc_stmt_handle_impl3 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl3);
      assertFalse(isc_stmt_handle_impl3.equals((Object)isc_stmt_handle_impl0));
      assertFalse(isc_stmt_handle_impl3.equals((Object)isc_stmt_handle_impl2));
      assertEquals(0, isc_stmt_handle_impl3.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl3.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl3.size());
      assertFalse(isc_stmt_handle_impl3.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl3.getStatementType());
      assertEquals(0, isc_stmt_handle_impl3.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl3.getRsrId());
      assertEquals(0, isc_stmt_handle_impl3.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl3.getSelectCount());
      assertFalse(isc_stmt_handle_impl3.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl3.getDeleteCount());
      assertFalse(isc_stmt_handle_impl3.isValid());
      assertFalse(isc_stmt_handle_impl3.isSingletonResult());
      
      isc_stmt_handle_impl3.registerTransaction(isc_tr_handle_impl4);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertFalse(isc_stmt_handle_impl3.equals((Object)isc_stmt_handle_impl0));
      assertFalse(isc_stmt_handle_impl3.equals((Object)isc_stmt_handle_impl2));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl1));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl0));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl3));
      assertFalse(isc_tr_handle_impl4.equals((Object)isc_tr_handle_impl2));
      assertEquals(0, isc_stmt_handle_impl3.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl3.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl3.size());
      assertFalse(isc_stmt_handle_impl3.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl3.getStatementType());
      assertEquals(0, isc_stmt_handle_impl3.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl3.getRsrId());
      assertEquals(0, isc_stmt_handle_impl3.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl3.getSelectCount());
      assertFalse(isc_stmt_handle_impl3.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl3.getDeleteCount());
      assertFalse(isc_stmt_handle_impl3.isValid());
      assertFalse(isc_stmt_handle_impl3.isSingletonResult());
      assertEquals(0, isc_tr_handle_impl4.getState());
      assertNotSame(isc_stmt_handle_impl3, isc_stmt_handle_impl0);
      assertNotSame(isc_stmt_handle_impl3, isc_stmt_handle_impl2);
      assertNotSame(isc_tr_handle_impl4, isc_tr_handle_impl1);
      assertNotSame(isc_tr_handle_impl4, isc_tr_handle_impl0);
      assertNotSame(isc_tr_handle_impl4, isc_tr_handle_impl3);
      assertNotSame(isc_tr_handle_impl4, isc_tr_handle_impl2);
      
      isc_blob_handle_impl isc_blob_handle_impl3 = new isc_blob_handle_impl();
      assertNotNull(isc_blob_handle_impl3);
      assertFalse(isc_blob_handle_impl3.equals((Object)isc_blob_handle_impl0));
      assertFalse(isc_blob_handle_impl3.equals((Object)isc_blob_handle_impl1));
      assertFalse(isc_blob_handle_impl3.equals((Object)isc_blob_handle_impl2));
      assertEquals(0, isc_blob_handle_impl3.getRblId());
      assertFalse(isc_blob_handle_impl3.isEof());
      assertEquals(0L, isc_blob_handle_impl3.getBlobId());
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      assertNotSame(linkedList0, linkedList1);
      
      boolean boolean0 = fBCachedFetcher0.previous();
      assertFalse(boolean0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      assertNotSame(linkedList0, linkedList1);
      
      boolean boolean1 = fBCachedFetcher0.relative((-3661));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      assertNotSame(linkedList0, linkedList1);
      
      int int0 = fBCachedFetcher0.getRowNum();
      assertEquals(0, int0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      assertNotSame(linkedList0, linkedList1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3539190349214616
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      byte[][] byteArray0 = new byte[1][0];
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      assertNotNull(linkedList2);
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList2.contains(byteArray0));
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList2);
      assertNotNull(fBResultSet0);
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertEquals(0, linkedList2.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList2.contains(byteArray0));
      
      boolean boolean0 = linkedList2.add((byte[][]) null);
      assertTrue(boolean0);
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertEquals(1, linkedList2.size());
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertFalse(linkedList2.contains(byteArray0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList2, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertEquals(1, linkedList2.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList2.contains(byteArray0));
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertEquals(1, linkedList2.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertFalse(linkedList2.contains(byteArray0));
      
      fBCachedFetcher0.deleteRow();
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertEquals(1, linkedList2.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, xSQLVARArray0.length);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertFalse(linkedList2.contains(byteArray0));
      
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertEquals(1, linkedList2.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, xSQLVARArray0.length);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertFalse(linkedList2.contains(byteArray0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9983916035564593
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      byte[][] byteArray0 = new byte[7][2];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-126);
      byteArray1[1] = (byte)79;
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte) (-83);
      byteArray1[4] = (byte) (-32);
      byteArray1[5] = (byte)9;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)79;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[4];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)122;
      byteArray3[1] = (byte) (-1);
      byteArray3[2] = (byte) (-32);
      byteArray3[3] = (byte)9;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[8];
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      
      byteArray4[0] = (byte) (-83);
      byteArray4[1] = (byte)79;
      byteArray4[2] = (byte) (-32);
      byteArray4[3] = (byte) (-32);
      byteArray4[4] = (byte)122;
      byteArray4[5] = (byte)79;
      byteArray4[6] = (byte) (-83);
      byteArray4[7] = (byte) (-126);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[3];
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray2));
      
      byteArray5[0] = (byte)79;
      byteArray5[1] = (byte)79;
      byteArray5[2] = (byte) (-1);
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[3];
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray3));
      
      byteArray6[0] = (byte)9;
      byteArray6[1] = (byte) (-32);
      byteArray6[2] = (byte) (-83);
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[4];
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray1));
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray5));
      
      byteArray7[0] = (byte)122;
      byteArray7[1] = (byte)122;
      byteArray7[2] = (byte) (-32);
      byteArray7[3] = (byte)122;
      byteArray0[6] = byteArray7;
      boolean boolean0 = linkedList0.add(byteArray0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(7, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      
      boolean boolean1 = fBCachedFetcher0.relative(619);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      
      boolean boolean2 = fBCachedFetcher0.isAfterLast();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2041609427036586
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte)100;
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      assertNotNull(linkedList2);
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList2.contains(byteArray0));
      
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      assertNotNull(linkedList3);
      assertTrue(linkedList3.equals((Object)linkedList2));
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertTrue(linkedList3.equals((Object)linkedList0));
      assertEquals(0, linkedList3.size());
      assertFalse(linkedList3.contains(byteArray0));
      
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      assertNotNull(linkedList4);
      assertTrue(linkedList4.equals((Object)linkedList2));
      assertTrue(linkedList4.equals((Object)linkedList3));
      assertTrue(linkedList4.equals((Object)linkedList1));
      assertTrue(linkedList4.equals((Object)linkedList0));
      assertEquals(0, linkedList4.size());
      assertFalse(linkedList4.contains(byteArray0));
      
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      assertNotNull(linkedList5);
      assertTrue(linkedList5.equals((Object)linkedList1));
      assertTrue(linkedList5.equals((Object)linkedList0));
      assertTrue(linkedList5.equals((Object)linkedList2));
      assertTrue(linkedList5.equals((Object)linkedList3));
      assertTrue(linkedList5.equals((Object)linkedList4));
      assertEquals(0, linkedList5.size());
      assertFalse(linkedList5.contains(byteArray0));
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList5);
      assertNotNull(fBResultSet0);
      assertTrue(linkedList5.equals((Object)linkedList1));
      assertTrue(linkedList5.equals((Object)linkedList0));
      assertTrue(linkedList5.equals((Object)linkedList2));
      assertTrue(linkedList5.equals((Object)linkedList3));
      assertTrue(linkedList5.equals((Object)linkedList4));
      assertEquals(0, linkedList5.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList5.contains(byteArray0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList5, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertTrue(linkedList5.equals((Object)linkedList1));
      assertTrue(linkedList5.equals((Object)linkedList0));
      assertTrue(linkedList5.equals((Object)linkedList2));
      assertTrue(linkedList5.equals((Object)linkedList3));
      assertTrue(linkedList5.equals((Object)linkedList4));
      assertEquals(0, linkedList5.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList5.contains(byteArray0));
      
      fBCachedFetcher0.insertRow(byteArray0);
      assertTrue(linkedList5.equals((Object)linkedList1));
      assertTrue(linkedList5.equals((Object)linkedList0));
      assertTrue(linkedList5.equals((Object)linkedList2));
      assertTrue(linkedList5.equals((Object)linkedList3));
      assertTrue(linkedList5.equals((Object)linkedList4));
      assertEquals(0, linkedList5.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(linkedList5, linkedList0);
      assertNotSame(linkedList5, linkedList3);
      assertNotSame(linkedList5, linkedList4);
      assertNotSame(linkedList5, linkedList2);
      assertNotSame(linkedList5, linkedList1);
      assertFalse(linkedList5.contains(byteArray0));
      
      boolean boolean0 = fBCachedFetcher0.first();
      assertTrue(boolean0);
      assertTrue(linkedList5.equals((Object)linkedList1));
      assertTrue(linkedList5.equals((Object)linkedList0));
      assertTrue(linkedList5.equals((Object)linkedList2));
      assertTrue(linkedList5.equals((Object)linkedList3));
      assertTrue(linkedList5.equals((Object)linkedList4));
      assertEquals(0, linkedList5.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, xSQLVARArray0.length);
      assertNotSame(linkedList5, linkedList0);
      assertNotSame(linkedList5, linkedList3);
      assertNotSame(linkedList5, linkedList4);
      assertNotSame(linkedList5, linkedList2);
      assertNotSame(linkedList5, linkedList1);
      assertFalse(linkedList5.contains(byteArray0));
      
      boolean boolean1 = fBCachedFetcher0.isBeforeFirst();
      assertFalse(boolean1);
      assertTrue(linkedList5.equals((Object)linkedList1));
      assertTrue(linkedList5.equals((Object)linkedList0));
      assertTrue(linkedList5.equals((Object)linkedList2));
      assertTrue(linkedList5.equals((Object)linkedList3));
      assertTrue(linkedList5.equals((Object)linkedList4));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, linkedList5.size());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, xSQLVARArray0.length);
      assertNotSame(linkedList5, linkedList0);
      assertNotSame(linkedList5, linkedList3);
      assertNotSame(linkedList5, linkedList4);
      assertNotSame(linkedList5, linkedList2);
      assertNotSame(linkedList5, linkedList1);
      assertFalse(linkedList5.contains(byteArray0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9966392780576339
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, xSQLVARArray0.length);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      
      boolean boolean1 = fBCachedFetcher0.next();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      
      boolean boolean2 = fBCachedFetcher0.next();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, xSQLVARArray0.length);
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0129129456276953
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[6][4];
      boolean boolean0 = linkedList0.add(byteArray0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(6, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      boolean boolean1 = locale0.hasExtensions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      byte[][] byteArray1 = new byte[8][0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean2 = linkedList0.add(byteArray1);
      assertTrue(boolean2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, linkedList0.size());
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(linkedList0.contains(byteArray1));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(2, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(linkedList0.contains(byteArray1));
      
      boolean boolean3 = linkedList0.offerLast(byteArray1);
      assertTrue(boolean3);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(3, linkedList0.size());
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(linkedList0.contains(byteArray1));
      
      boolean boolean4 = fBCachedFetcher0.isBeforeFirst();
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertEquals(3, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(linkedList0.contains(byteArray1));
      
      boolean boolean5 = fBCachedFetcher0.isEmpty();
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertEquals(3, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(linkedList0.contains(byteArray1));
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<byte[][]> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      Predicate<byte[][]> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate2 = predicate1.negate();
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate2, predicate1);
      
      Predicate<byte[][]> predicate3 = predicate1.negate();
      assertNotNull(predicate3);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate1);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Predicate<FBBlobField> predicate4 = Predicate.isEqual(object1);
      assertNotNull(predicate4);
      assertFalse(object1.equals((Object)object0));
      assertNotSame(object1, object0);
      
      Predicate<byte[][]> predicate5 = predicate3.and(predicate1);
      assertNotNull(predicate5);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate1);
      
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate3);
      assertNotNull(predicate6);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate1);
      
      Predicate<Object> predicate7 = predicate6.negate();
      assertNotNull(predicate7);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate6));
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate1);
      
      Predicate<Object> predicate8 = predicate6.and(predicate7);
      assertNotNull(predicate8);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate6));
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate1);
      
      Predicate<Object> predicate9 = predicate8.or(predicate7);
      assertNotNull(predicate9);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate8));
      assertFalse(predicate9.equals((Object)predicate7));
      assertFalse(predicate9.equals((Object)predicate6));
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate1);
      
      Predicate<byte[][]> predicate10 = predicate5.and(predicate9);
      assertNotNull(predicate10);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate9));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate8));
      assertFalse(predicate9.equals((Object)predicate7));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate10.equals((Object)predicate1));
      assertFalse(predicate10.equals((Object)predicate3));
      assertFalse(predicate10.equals((Object)predicate5));
      assertFalse(predicate10.equals((Object)predicate0));
      assertFalse(predicate10.equals((Object)predicate2));
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate5, predicate10);
      assertNotSame(predicate10, predicate5);
      
      Predicate<Object> predicate11 = predicate7.negate();
      assertNotNull(predicate11);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate11.equals((Object)predicate9));
      assertFalse(predicate11.equals((Object)predicate7));
      assertFalse(predicate11.equals((Object)predicate8));
      assertFalse(predicate11.equals((Object)predicate6));
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate11, predicate7);
      
      Predicate<byte[][]> predicate12 = predicate5.negate();
      assertNotNull(predicate12);
      assertFalse(predicate12.equals((Object)predicate1));
      assertFalse(predicate12.equals((Object)predicate0));
      assertFalse(predicate12.equals((Object)predicate2));
      assertFalse(predicate12.equals((Object)predicate5));
      assertFalse(predicate12.equals((Object)predicate3));
      assertFalse(predicate12.equals((Object)predicate10));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertNotSame(predicate12, predicate1);
      assertNotSame(predicate12, predicate2);
      assertNotSame(predicate12, predicate3);
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate12);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate5, predicate10);
      
      Integer integer0 = new Integer(2004);
      assertEquals(2004, (int)integer0);
      assertNotNull(integer0);
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      Predicate<byte[][]> predicate13 = predicate5.negate();
      assertNotNull(predicate13);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate12));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate10));
      assertFalse(predicate13.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate13, predicate12);
      assertNotSame(predicate13, predicate1);
      assertNotSame(predicate13, predicate2);
      assertNotSame(predicate13, predicate3);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate3, predicate13);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate12);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate5, predicate10);
      
      Predicate<Object> predicate14 = predicate7.negate();
      assertNotNull(predicate14);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate11));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate13));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate8));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate14, predicate7);
      assertNotSame(predicate14, predicate11);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate3, predicate13);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate12);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate7, predicate14);
      assertNotSame(predicate7, predicate11);
      
      Predicate<Object> predicate15 = predicate7.negate();
      assertNotNull(predicate15);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate15.equals((Object)predicate9));
      assertFalse(predicate15.equals((Object)predicate6));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate15.equals((Object)predicate14));
      assertFalse(predicate15.equals((Object)predicate8));
      assertFalse(predicate15.equals((Object)predicate7));
      assertFalse(predicate3.equals((Object)predicate13));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate7.equals((Object)predicate14));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate8));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate15, predicate11);
      assertNotSame(predicate15, predicate14);
      assertNotSame(predicate15, predicate7);
      assertNotSame(predicate3, predicate13);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate12);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate7, predicate14);
      assertNotSame(predicate7, predicate15);
      assertNotSame(predicate7, predicate11);
      
      Predicate<byte[][]> predicate16 = predicate5.and(predicate0);
      assertNotNull(predicate16);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate16.equals((Object)predicate13));
      assertFalse(predicate16.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate3));
      assertFalse(predicate16.equals((Object)predicate10));
      assertFalse(predicate16.equals((Object)predicate12));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate16.equals((Object)predicate2));
      assertFalse(predicate16.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate13));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate13));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate16, predicate10);
      assertNotSame(predicate16, predicate5);
      assertNotSame(predicate3, predicate13);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate12);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate5, predicate10);
      assertNotSame(predicate5, predicate16);
      
      boolean boolean0 = predicate6.test(subject0);
      assertFalse(boolean0);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate16));
      assertFalse(predicate3.equals((Object)predicate13));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate7));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate3, predicate13);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate12);
      assertNotSame(predicate3, predicate1);
      
      Predicate<Object> predicate17 = predicate14.negate();
      assertNotNull(predicate17);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate15));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate11));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate16));
      assertFalse(predicate3.equals((Object)predicate13));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate17.equals((Object)predicate11));
      assertFalse(predicate17.equals((Object)predicate14));
      assertFalse(predicate17.equals((Object)predicate6));
      assertFalse(predicate17.equals((Object)predicate7));
      assertFalse(predicate17.equals((Object)predicate15));
      assertFalse(predicate17.equals((Object)predicate8));
      assertFalse(predicate17.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate7.equals((Object)predicate14));
      assertFalse(predicate7.equals((Object)predicate15));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate8));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate14, predicate7);
      assertNotSame(predicate14, predicate15);
      assertNotSame(predicate14, predicate11);
      assertNotSame(predicate14, predicate17);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate3, predicate13);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate12);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate17, predicate11);
      assertNotSame(predicate17, predicate14);
      assertNotSame(predicate17, predicate7);
      assertNotSame(predicate17, predicate15);
      assertNotSame(predicate7, predicate14);
      assertNotSame(predicate7, predicate17);
      assertNotSame(predicate7, predicate15);
      assertNotSame(predicate7, predicate11);
      
      Predicate<FBCachedBlobField> predicate18 = Predicate.isEqual((Object) predicate7);
      assertNotNull(predicate18);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate16));
      assertFalse(predicate3.equals((Object)predicate13));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate7.equals((Object)predicate17));
      assertFalse(predicate7.equals((Object)predicate14));
      assertFalse(predicate7.equals((Object)predicate15));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate8));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate3, predicate13);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate12);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate7, predicate14);
      assertNotSame(predicate7, predicate17);
      assertNotSame(predicate7, predicate15);
      assertNotSame(predicate7, predicate11);
      
      Predicate<Delayed> predicate19 = Predicate.isEqual((Object) predicate12);
      assertNotNull(predicate19);
      assertFalse(predicate12.equals((Object)predicate1));
      assertFalse(predicate12.equals((Object)predicate13));
      assertFalse(predicate12.equals((Object)predicate16));
      assertFalse(predicate12.equals((Object)predicate0));
      assertFalse(predicate12.equals((Object)predicate2));
      assertFalse(predicate12.equals((Object)predicate5));
      assertFalse(predicate12.equals((Object)predicate3));
      assertFalse(predicate12.equals((Object)predicate10));
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate16));
      assertFalse(predicate3.equals((Object)predicate13));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate13));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertNotSame(predicate12, predicate1);
      assertNotSame(predicate12, predicate13);
      assertNotSame(predicate12, predicate2);
      assertNotSame(predicate12, predicate3);
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate3, predicate13);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate12);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate5, predicate10);
      assertNotSame(predicate5, predicate16);
      
      Predicate<Object> predicate20 = predicate15.and(predicate11);
      assertNotNull(predicate20);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate15.equals((Object)predicate9));
      assertFalse(predicate15.equals((Object)predicate6));
      assertFalse(predicate15.equals((Object)predicate17));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate15.equals((Object)predicate14));
      assertFalse(predicate15.equals((Object)predicate8));
      assertFalse(predicate15.equals((Object)predicate7));
      assertFalse(predicate3.equals((Object)predicate16));
      assertFalse(predicate3.equals((Object)predicate13));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate20.equals((Object)predicate8));
      assertFalse(predicate20.equals((Object)predicate7));
      assertFalse(predicate20.equals((Object)predicate14));
      assertFalse(predicate20.equals((Object)predicate17));
      assertFalse(predicate20.equals((Object)predicate9));
      assertFalse(predicate20.equals((Object)predicate15));
      assertFalse(predicate20.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate17));
      assertFalse(predicate7.equals((Object)predicate14));
      assertFalse(predicate7.equals((Object)predicate15));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate11.equals((Object)predicate15));
      assertFalse(predicate11.equals((Object)predicate9));
      assertFalse(predicate11.equals((Object)predicate7));
      assertFalse(predicate11.equals((Object)predicate8));
      assertFalse(predicate11.equals((Object)predicate14));
      assertFalse(predicate11.equals((Object)predicate6));
      assertFalse(predicate11.equals((Object)predicate17));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate15, predicate11);
      assertNotSame(predicate15, predicate14);
      assertNotSame(predicate15, predicate17);
      assertNotSame(predicate15, predicate7);
      assertNotSame(predicate3, predicate13);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate12);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate20, predicate8);
      assertNotSame(predicate7, predicate14);
      assertNotSame(predicate7, predicate17);
      assertNotSame(predicate7, predicate15);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate11, predicate15);
      assertNotSame(predicate11, predicate7);
      assertNotSame(predicate11, predicate14);
      assertNotSame(predicate11, predicate17);
      
      Predicate<Object> predicate21 = predicate14.negate();
      assertNotNull(predicate21);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate20));
      assertFalse(predicate14.equals((Object)predicate15));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate11));
      assertFalse(predicate14.equals((Object)predicate17));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate16));
      assertFalse(predicate3.equals((Object)predicate13));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate7.equals((Object)predicate17));
      assertFalse(predicate7.equals((Object)predicate14));
      assertFalse(predicate7.equals((Object)predicate20));
      assertFalse(predicate7.equals((Object)predicate15));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate21.equals((Object)predicate17));
      assertFalse(predicate21.equals((Object)predicate14));
      assertFalse(predicate21.equals((Object)predicate20));
      assertFalse(predicate21.equals((Object)predicate9));
      assertFalse(predicate21.equals((Object)predicate8));
      assertFalse(predicate21.equals((Object)predicate15));
      assertFalse(predicate21.equals((Object)predicate7));
      assertFalse(predicate21.equals((Object)predicate6));
      assertFalse(predicate21.equals((Object)predicate11));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate14, predicate7);
      assertNotSame(predicate14, predicate15);
      assertNotSame(predicate14, predicate11);
      assertNotSame(predicate14, predicate17);
      assertNotSame(predicate14, predicate21);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate3, predicate13);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate12);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate7, predicate14);
      assertNotSame(predicate7, predicate17);
      assertNotSame(predicate7, predicate21);
      assertNotSame(predicate7, predicate15);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate21, predicate14);
      assertNotSame(predicate21, predicate17);
      assertNotSame(predicate21, predicate15);
      assertNotSame(predicate21, predicate7);
      assertNotSame(predicate21, predicate11);
      
      Predicate<Object> predicate22 = predicate21.and(predicate20);
      assertNotNull(predicate22);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate20));
      assertFalse(predicate14.equals((Object)predicate15));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate11));
      assertFalse(predicate14.equals((Object)predicate17));
      assertFalse(predicate14.equals((Object)predicate21));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate15.equals((Object)predicate9));
      assertFalse(predicate15.equals((Object)predicate6));
      assertFalse(predicate15.equals((Object)predicate20));
      assertFalse(predicate15.equals((Object)predicate17));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate15.equals((Object)predicate14));
      assertFalse(predicate15.equals((Object)predicate21));
      assertFalse(predicate15.equals((Object)predicate8));
      assertFalse(predicate15.equals((Object)predicate7));
      assertFalse(predicate3.equals((Object)predicate16));
      assertFalse(predicate3.equals((Object)predicate13));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate21));
      assertFalse(predicate20.equals((Object)predicate8));
      assertFalse(predicate20.equals((Object)predicate7));
      assertFalse(predicate20.equals((Object)predicate14));
      assertFalse(predicate20.equals((Object)predicate17));
      assertFalse(predicate20.equals((Object)predicate21));
      assertFalse(predicate20.equals((Object)predicate9));
      assertFalse(predicate20.equals((Object)predicate15));
      assertFalse(predicate20.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate17));
      assertFalse(predicate7.equals((Object)predicate14));
      assertFalse(predicate7.equals((Object)predicate21));
      assertFalse(predicate7.equals((Object)predicate20));
      assertFalse(predicate7.equals((Object)predicate15));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate21.equals((Object)predicate17));
      assertFalse(predicate21.equals((Object)predicate14));
      assertFalse(predicate21.equals((Object)predicate20));
      assertFalse(predicate21.equals((Object)predicate9));
      assertFalse(predicate21.equals((Object)predicate8));
      assertFalse(predicate21.equals((Object)predicate15));
      assertFalse(predicate21.equals((Object)predicate7));
      assertFalse(predicate21.equals((Object)predicate6));
      assertFalse(predicate21.equals((Object)predicate11));
      assertFalse(predicate22.equals((Object)predicate20));
      assertFalse(predicate22.equals((Object)predicate6));
      assertFalse(predicate22.equals((Object)predicate7));
      assertFalse(predicate22.equals((Object)predicate11));
      assertFalse(predicate22.equals((Object)predicate21));
      assertFalse(predicate22.equals((Object)predicate15));
      assertFalse(predicate22.equals((Object)predicate17));
      assertFalse(predicate22.equals((Object)predicate14));
      assertFalse(predicate22.equals((Object)predicate8));
      assertFalse(predicate22.equals((Object)predicate9));
      assertFalse(predicate11.equals((Object)predicate15));
      assertFalse(predicate11.equals((Object)predicate9));
      assertFalse(predicate11.equals((Object)predicate7));
      assertFalse(predicate11.equals((Object)predicate21));
      assertFalse(predicate11.equals((Object)predicate8));
      assertFalse(predicate11.equals((Object)predicate14));
      assertFalse(predicate11.equals((Object)predicate6));
      assertFalse(predicate11.equals((Object)predicate20));
      assertFalse(predicate11.equals((Object)predicate17));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate14, predicate7);
      assertNotSame(predicate14, predicate15);
      assertNotSame(predicate14, predicate11);
      assertNotSame(predicate14, predicate17);
      assertNotSame(predicate14, predicate21);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate15, predicate11);
      assertNotSame(predicate15, predicate14);
      assertNotSame(predicate15, predicate17);
      assertNotSame(predicate15, predicate21);
      assertNotSame(predicate15, predicate7);
      assertNotSame(predicate3, predicate13);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate12);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate20, predicate8);
      assertNotSame(predicate20, predicate22);
      assertNotSame(predicate7, predicate14);
      assertNotSame(predicate7, predicate17);
      assertNotSame(predicate7, predicate21);
      assertNotSame(predicate7, predicate15);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate21, predicate14);
      assertNotSame(predicate21, predicate17);
      assertNotSame(predicate21, predicate15);
      assertNotSame(predicate21, predicate7);
      assertNotSame(predicate21, predicate11);
      assertNotSame(predicate22, predicate20);
      assertNotSame(predicate22, predicate8);
      assertNotSame(predicate11, predicate15);
      assertNotSame(predicate11, predicate7);
      assertNotSame(predicate11, predicate21);
      assertNotSame(predicate11, predicate14);
      assertNotSame(predicate11, predicate17);
      
      boolean boolean1 = predicate11.test(predicate14);
      assertFalse(boolean1);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate20));
      assertFalse(predicate14.equals((Object)predicate15));
      assertFalse(predicate14.equals((Object)predicate22));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate11));
      assertFalse(predicate14.equals((Object)predicate17));
      assertFalse(predicate14.equals((Object)predicate21));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate16));
      assertFalse(predicate3.equals((Object)predicate13));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate22));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate21));
      assertFalse(predicate7.equals((Object)predicate17));
      assertFalse(predicate7.equals((Object)predicate14));
      assertFalse(predicate7.equals((Object)predicate21));
      assertFalse(predicate7.equals((Object)predicate20));
      assertFalse(predicate7.equals((Object)predicate15));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate22));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate8));
      assertTrue(boolean1 == boolean0);
      assertFalse(predicate11.equals((Object)predicate22));
      assertFalse(predicate11.equals((Object)predicate15));
      assertFalse(predicate11.equals((Object)predicate9));
      assertFalse(predicate11.equals((Object)predicate7));
      assertFalse(predicate11.equals((Object)predicate21));
      assertFalse(predicate11.equals((Object)predicate8));
      assertFalse(predicate11.equals((Object)predicate14));
      assertFalse(predicate11.equals((Object)predicate6));
      assertFalse(predicate11.equals((Object)predicate20));
      assertFalse(predicate11.equals((Object)predicate17));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate14, predicate7);
      assertNotSame(predicate14, predicate15);
      assertNotSame(predicate14, predicate11);
      assertNotSame(predicate14, predicate17);
      assertNotSame(predicate14, predicate21);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate3, predicate13);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate12);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate7, predicate14);
      assertNotSame(predicate7, predicate17);
      assertNotSame(predicate7, predicate21);
      assertNotSame(predicate7, predicate15);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate11, predicate15);
      assertNotSame(predicate11, predicate7);
      assertNotSame(predicate11, predicate21);
      assertNotSame(predicate11, predicate14);
      assertNotSame(predicate11, predicate17);
      
      Predicate<Object> predicate23 = predicate17.negate();
      assertNotNull(predicate23);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate20));
      assertFalse(predicate14.equals((Object)predicate15));
      assertFalse(predicate14.equals((Object)predicate22));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate11));
      assertFalse(predicate14.equals((Object)predicate17));
      assertFalse(predicate14.equals((Object)predicate21));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate16));
      assertFalse(predicate3.equals((Object)predicate13));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate17.equals((Object)predicate11));
      assertFalse(predicate17.equals((Object)predicate14));
      assertFalse(predicate17.equals((Object)predicate21));
      assertFalse(predicate17.equals((Object)predicate6));
      assertFalse(predicate17.equals((Object)predicate7));
      assertFalse(predicate17.equals((Object)predicate22));
      assertFalse(predicate17.equals((Object)predicate15));
      assertFalse(predicate17.equals((Object)predicate20));
      assertFalse(predicate17.equals((Object)predicate8));
      assertFalse(predicate17.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate22));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate21));
      assertFalse(predicate7.equals((Object)predicate17));
      assertFalse(predicate7.equals((Object)predicate14));
      assertFalse(predicate7.equals((Object)predicate21));
      assertFalse(predicate7.equals((Object)predicate20));
      assertFalse(predicate7.equals((Object)predicate15));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate22));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate23.equals((Object)predicate17));
      assertFalse(predicate23.equals((Object)predicate11));
      assertFalse(predicate23.equals((Object)predicate21));
      assertFalse(predicate23.equals((Object)predicate9));
      assertFalse(predicate23.equals((Object)predicate8));
      assertFalse(predicate23.equals((Object)predicate7));
      assertFalse(predicate23.equals((Object)predicate14));
      assertFalse(predicate23.equals((Object)predicate6));
      assertFalse(predicate23.equals((Object)predicate20));
      assertFalse(predicate23.equals((Object)predicate22));
      assertFalse(predicate23.equals((Object)predicate15));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate14, predicate7);
      assertNotSame(predicate14, predicate15);
      assertNotSame(predicate14, predicate23);
      assertNotSame(predicate14, predicate11);
      assertNotSame(predicate14, predicate17);
      assertNotSame(predicate14, predicate21);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate3, predicate13);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate12);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate17, predicate11);
      assertNotSame(predicate17, predicate14);
      assertNotSame(predicate17, predicate21);
      assertNotSame(predicate17, predicate7);
      assertNotSame(predicate17, predicate23);
      assertNotSame(predicate17, predicate15);
      assertNotSame(predicate7, predicate17);
      assertNotSame(predicate7, predicate14);
      assertNotSame(predicate7, predicate21);
      assertNotSame(predicate7, predicate15);
      assertNotSame(predicate7, predicate23);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate23, predicate17);
      assertNotSame(predicate23, predicate11);
      assertNotSame(predicate23, predicate21);
      assertNotSame(predicate23, predicate7);
      assertNotSame(predicate23, predicate14);
      assertNotSame(predicate23, predicate15);
      
      Predicate<Object> predicate24 = predicate21.and(predicate20);
      assertNotNull(predicate24);
      assertFalse(predicate24.equals((Object)predicate15));
      assertFalse(predicate24.equals((Object)predicate21));
      assertFalse(predicate24.equals((Object)predicate22));
      assertFalse(predicate24.equals((Object)predicate23));
      assertFalse(predicate24.equals((Object)predicate11));
      assertFalse(predicate24.equals((Object)predicate6));
      assertFalse(predicate24.equals((Object)predicate20));
      assertFalse(predicate24.equals((Object)predicate7));
      assertFalse(predicate24.equals((Object)predicate17));
      assertFalse(predicate24.equals((Object)predicate14));
      assertFalse(predicate24.equals((Object)predicate9));
      assertFalse(predicate24.equals((Object)predicate8));
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate20));
      assertFalse(predicate14.equals((Object)predicate15));
      assertFalse(predicate14.equals((Object)predicate22));
      assertFalse(predicate14.equals((Object)predicate23));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate11));
      assertFalse(predicate14.equals((Object)predicate17));
      assertFalse(predicate14.equals((Object)predicate21));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate15.equals((Object)predicate9));
      assertFalse(predicate15.equals((Object)predicate23));
      assertFalse(predicate15.equals((Object)predicate6));
      assertFalse(predicate15.equals((Object)predicate22));
      assertFalse(predicate15.equals((Object)predicate20));
      assertFalse(predicate15.equals((Object)predicate17));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate15.equals((Object)predicate14));
      assertFalse(predicate15.equals((Object)predicate21));
      assertFalse(predicate15.equals((Object)predicate8));
      assertFalse(predicate15.equals((Object)predicate7));
      assertFalse(predicate3.equals((Object)predicate16));
      assertFalse(predicate3.equals((Object)predicate13));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate23));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate22));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate21));
      assertFalse(predicate20.equals((Object)predicate8));
      assertFalse(predicate20.equals((Object)predicate7));
      assertFalse(predicate20.equals((Object)predicate14));
      assertFalse(predicate20.equals((Object)predicate17));
      assertFalse(predicate20.equals((Object)predicate21));
      assertFalse(predicate20.equals((Object)predicate9));
      assertFalse(predicate20.equals((Object)predicate23));
      assertFalse(predicate20.equals((Object)predicate15));
      assertFalse(predicate20.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate11));
      assertFalse(predicate20.equals((Object)predicate22));
      assertFalse(predicate7.equals((Object)predicate17));
      assertFalse(predicate7.equals((Object)predicate14));
      assertFalse(predicate7.equals((Object)predicate21));
      assertFalse(predicate7.equals((Object)predicate20));
      assertFalse(predicate7.equals((Object)predicate15));
      assertFalse(predicate7.equals((Object)predicate23));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate22));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate21.equals((Object)predicate17));
      assertFalse(predicate21.equals((Object)predicate14));
      assertFalse(predicate21.equals((Object)predicate20));
      assertFalse(predicate21.equals((Object)predicate9));
      assertFalse(predicate21.equals((Object)predicate8));
      assertFalse(predicate21.equals((Object)predicate22));
      assertFalse(predicate21.equals((Object)predicate23));
      assertFalse(predicate21.equals((Object)predicate15));
      assertFalse(predicate21.equals((Object)predicate7));
      assertFalse(predicate21.equals((Object)predicate6));
      assertFalse(predicate21.equals((Object)predicate11));
      assertFalse(predicate11.equals((Object)predicate23));
      assertFalse(predicate11.equals((Object)predicate22));
      assertFalse(predicate11.equals((Object)predicate15));
      assertFalse(predicate11.equals((Object)predicate9));
      assertFalse(predicate11.equals((Object)predicate7));
      assertFalse(predicate11.equals((Object)predicate21));
      assertFalse(predicate11.equals((Object)predicate8));
      assertFalse(predicate11.equals((Object)predicate14));
      assertFalse(predicate11.equals((Object)predicate6));
      assertFalse(predicate11.equals((Object)predicate20));
      assertFalse(predicate11.equals((Object)predicate17));
      assertNotSame(predicate24, predicate22);
      assertNotSame(predicate24, predicate20);
      assertNotSame(predicate24, predicate8);
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate14, predicate7);
      assertNotSame(predicate14, predicate15);
      assertNotSame(predicate14, predicate23);
      assertNotSame(predicate14, predicate11);
      assertNotSame(predicate14, predicate17);
      assertNotSame(predicate14, predicate21);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate15, predicate23);
      assertNotSame(predicate15, predicate17);
      assertNotSame(predicate15, predicate11);
      assertNotSame(predicate15, predicate14);
      assertNotSame(predicate15, predicate21);
      assertNotSame(predicate15, predicate7);
      assertNotSame(predicate3, predicate13);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate12);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate20, predicate24);
      assertNotSame(predicate20, predicate8);
      assertNotSame(predicate20, predicate22);
      assertNotSame(predicate7, predicate17);
      assertNotSame(predicate7, predicate14);
      assertNotSame(predicate7, predicate21);
      assertNotSame(predicate7, predicate15);
      assertNotSame(predicate7, predicate23);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate21, predicate17);
      assertNotSame(predicate21, predicate14);
      assertNotSame(predicate21, predicate23);
      assertNotSame(predicate21, predicate15);
      assertNotSame(predicate21, predicate7);
      assertNotSame(predicate21, predicate11);
      assertNotSame(predicate11, predicate23);
      assertNotSame(predicate11, predicate15);
      assertNotSame(predicate11, predicate7);
      assertNotSame(predicate11, predicate21);
      assertNotSame(predicate11, predicate14);
      assertNotSame(predicate11, predicate17);
      
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedList0.push((byte[][]) null);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      boolean boolean2 = fBCachedFetcher0.isLast();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, linkedList0.size());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlscale);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      byte[][] byteArray0 = new byte[4][4];
      linkedList0.clear();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(byteArray0));
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertNotNull(calendar0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      
      Time time0 = xSQLVAR0.decodeTimeCalendar(byteArray0[0], calendar0);
      assertNotNull(time0);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals(4, byteArray0.length);
      
      long long0 = time0.getTime();
      assertEquals(1392409281320L, long0);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals(4, byteArray0.length);
      
      LocalTime localTime0 = time0.toLocalTime();
      assertNotNull(localTime0);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals(4, byteArray0.length);
      
      Time time1 = xSQLVAR0.decodeTime(byteArray0[0]);
      assertNotNull(time1);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertTrue(time1.equals((Object)time0));
      assertEquals("20:21:21", time1.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time1, time0);
      
      String string0 = locale0.getDisplayVariant();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      time1.setTime(1392409281320L);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertTrue(time1.equals((Object)time0));
      assertEquals("20:21:21", time1.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time1, time0);
      
      long long1 = time1.getTime();
      assertEquals(1392409281320L, long1);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertTrue(time1.equals((Object)time0));
      assertTrue(long1 == long0);
      assertEquals("20:21:21", time1.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time1, time0);
      
      long long2 = time1.getTime();
      assertEquals(1392409281320L, long2);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertTrue(time1.equals((Object)time0));
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals("20:21:21", time1.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time1, time0);
      
      boolean boolean0 = time0.after(time1);
      assertFalse(boolean0);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertTrue(time0.equals((Object)time1));
      assertTrue(time1.equals((Object)time0));
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", time1.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time0, time1);
      assertNotSame(time1, time0);
      
      long long3 = time0.getTime();
      assertEquals(1392409281320L, long3);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertTrue(long3 == long0);
      assertTrue(long3 == long2);
      assertTrue(long3 == long1);
      assertTrue(time0.equals((Object)time1));
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time0, time1);
      
      Time time2 = new Time(0);
      assertNotNull(time2);
      assertFalse(time2.equals((Object)time0));
      assertFalse(time2.equals((Object)time1));
      assertEquals("00:00:00", time2.toString());
      
      Time time3 = new Time(0);
      assertNotNull(time3);
      assertTrue(time3.equals((Object)time2));
      assertFalse(time3.equals((Object)time1));
      assertFalse(time3.equals((Object)time0));
      assertEquals("00:00:00", time3.toString());
      
      String string1 = locale0.getDisplayVariant();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Time time4 = new Time(0);
      assertNotNull(time4);
      assertFalse(time4.equals((Object)time1));
      assertTrue(time4.equals((Object)time3));
      assertTrue(time4.equals((Object)time2));
      assertFalse(time4.equals((Object)time0));
      assertEquals("00:00:00", time4.toString());
      
      Time time5 = xSQLVAR0.decodeTime(byteArray0[0]);
      assertNotNull(time5);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertFalse(time5.equals((Object)time4));
      assertFalse(time5.equals((Object)time3));
      assertFalse(time5.equals((Object)time2));
      assertTrue(time5.equals((Object)time0));
      assertTrue(time5.equals((Object)time1));
      assertEquals("20:21:21", time5.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time5, time4);
      assertNotSame(time5, time1);
      assertNotSame(time5, time3);
      assertNotSame(time5, time2);
      assertNotSame(time5, time0);
      
      Object object0 = time5.clone();
      assertNotNull(object0);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertFalse(time5.equals((Object)time4));
      assertFalse(time5.equals((Object)time3));
      assertFalse(time5.equals((Object)time2));
      assertTrue(time5.equals((Object)time0));
      assertTrue(time5.equals((Object)time1));
      assertFalse(object0.equals((Object)time3));
      assertTrue(object0.equals((Object)time1));
      assertFalse(object0.equals((Object)time4));
      assertTrue(object0.equals((Object)time5));
      assertFalse(object0.equals((Object)time2));
      assertTrue(object0.equals((Object)time0));
      assertEquals("20:21:21", time5.toString());
      assertEquals("20:21:21", object0.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time5, time4);
      assertNotSame(time5, time3);
      assertNotSame(time5, object0);
      assertNotSame(time5, time1);
      assertNotSame(time5, time2);
      assertNotSame(time5, time0);
      assertNotSame(object0, time0);
      assertNotSame(object0, time3);
      assertNotSame(object0, time4);
      assertNotSame(object0, time1);
      assertNotSame(object0, time2);
      assertNotSame(object0, time5);
      
      LocalTime localTime1 = time5.toLocalTime();
      assertNotNull(localTime1);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertFalse(time5.equals((Object)time4));
      assertTrue(time5.equals((Object)object0));
      assertFalse(time5.equals((Object)time3));
      assertFalse(time5.equals((Object)time2));
      assertTrue(time5.equals((Object)time0));
      assertTrue(time5.equals((Object)time1));
      assertTrue(localTime1.equals((Object)localTime0));
      assertEquals("20:21:21", time5.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time5, time4);
      assertNotSame(time5, time3);
      assertNotSame(time5, object0);
      assertNotSame(time5, time1);
      assertNotSame(time5, time2);
      assertNotSame(time5, time0);
      assertNotSame(localTime1, localTime0);
      
      Time time6 = xSQLVAR0.encodeTime(time5, calendar0, false);
      assertNotNull(time6);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertFalse(time5.equals((Object)time4));
      assertTrue(time5.equals((Object)object0));
      assertFalse(time5.equals((Object)time3));
      assertFalse(time5.equals((Object)time2));
      assertTrue(time5.equals((Object)time0));
      assertTrue(time5.equals((Object)time1));
      assertTrue(time6.equals((Object)time0));
      assertFalse(time6.equals((Object)time3));
      assertFalse(time6.equals((Object)time4));
      assertFalse(time6.equals((Object)time2));
      assertTrue(time6.equals((Object)time5));
      assertTrue(time6.equals((Object)object0));
      assertTrue(time6.equals((Object)time1));
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("20:21:21", time5.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time6.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time5, time6);
      assertNotSame(time5, time4);
      assertNotSame(time5, time3);
      assertNotSame(time5, object0);
      assertNotSame(time5, time1);
      assertNotSame(time5, time2);
      assertNotSame(time5, time0);
      assertNotSame(time6, time5);
      assertNotSame(time6, object0);
      assertNotSame(time6, time3);
      assertNotSame(time6, time4);
      assertNotSame(time6, time2);
      assertNotSame(time6, time1);
      assertNotSame(time6, time0);
      
      Integer integer0 = new Integer((-1045));
      assertEquals((-1045), (int)integer0);
      assertNotNull(integer0);
      
      Time time7 = Time.valueOf(localTime0);
      assertNotNull(time7);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertFalse(time0.equals((Object)time4));
      assertTrue(time0.equals((Object)time1));
      assertTrue(time0.equals((Object)time6));
      assertFalse(time0.equals((Object)time2));
      assertFalse(time0.equals((Object)time3));
      assertTrue(time0.equals((Object)time5));
      assertTrue(time0.equals((Object)object0));
      assertTrue(localTime0.equals((Object)localTime1));
      assertFalse(time7.equals((Object)time6));
      assertFalse(time7.equals((Object)time4));
      assertFalse(time7.equals((Object)object0));
      assertFalse(time7.equals((Object)time3));
      assertFalse(time7.equals((Object)time5));
      assertFalse(time7.equals((Object)time2));
      assertFalse(time7.equals((Object)time0));
      assertFalse(time7.equals((Object)time1));
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", time7.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time0, object0);
      assertNotSame(time0, time4);
      assertNotSame(time0, time6);
      assertNotSame(time0, time7);
      assertNotSame(time0, time5);
      assertNotSame(time0, time2);
      assertNotSame(time0, time3);
      assertNotSame(time0, time1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(time7, time6);
      assertNotSame(time7, time4);
      assertNotSame(time7, object0);
      assertNotSame(time7, time3);
      assertNotSame(time7, time5);
      assertNotSame(time7, time2);
      assertNotSame(time7, time0);
      assertNotSame(time7, time1);
      
      long long4 = time7.getTime();
      assertEquals(73281000L, long4);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertFalse(time0.equals((Object)time4));
      assertFalse(time0.equals((Object)time7));
      assertTrue(time0.equals((Object)time1));
      assertTrue(time0.equals((Object)time6));
      assertFalse(time0.equals((Object)time2));
      assertFalse(time0.equals((Object)time3));
      assertTrue(time0.equals((Object)time5));
      assertTrue(time0.equals((Object)object0));
      assertTrue(localTime0.equals((Object)localTime1));
      assertFalse(time7.equals((Object)time6));
      assertFalse(time7.equals((Object)time4));
      assertFalse(time7.equals((Object)object0));
      assertFalse(time7.equals((Object)time3));
      assertFalse(time7.equals((Object)time5));
      assertFalse(time7.equals((Object)time2));
      assertFalse(time7.equals((Object)time0));
      assertFalse(time7.equals((Object)time1));
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long1);
      assertFalse(long4 == long0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", time7.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time0, object0);
      assertNotSame(time0, time4);
      assertNotSame(time0, time6);
      assertNotSame(time0, time7);
      assertNotSame(time0, time5);
      assertNotSame(time0, time2);
      assertNotSame(time0, time3);
      assertNotSame(time0, time1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(time7, time6);
      assertNotSame(time7, time4);
      assertNotSame(time7, object0);
      assertNotSame(time7, time3);
      assertNotSame(time7, time5);
      assertNotSame(time7, time2);
      assertNotSame(time7, time0);
      assertNotSame(time7, time1);
      
      Time time8 = xSQLVAR0.decodeTime(time7, calendar0, true);
      assertNotNull(time8);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertFalse(time0.equals((Object)time4));
      assertFalse(time0.equals((Object)time7));
      assertTrue(time0.equals((Object)time1));
      assertTrue(time0.equals((Object)time6));
      assertFalse(time0.equals((Object)time2));
      assertFalse(time0.equals((Object)time3));
      assertTrue(time0.equals((Object)time5));
      assertTrue(time0.equals((Object)object0));
      assertTrue(localTime0.equals((Object)localTime1));
      assertFalse(time7.equals((Object)time6));
      assertFalse(time7.equals((Object)time4));
      assertFalse(time7.equals((Object)object0));
      assertFalse(time7.equals((Object)time3));
      assertFalse(time7.equals((Object)time5));
      assertFalse(time7.equals((Object)time2));
      assertFalse(time7.equals((Object)time0));
      assertFalse(time7.equals((Object)time1));
      assertFalse(time8.equals((Object)time2));
      assertFalse(time8.equals((Object)time1));
      assertFalse(time8.equals((Object)time0));
      assertFalse(time8.equals((Object)time4));
      assertFalse(time8.equals((Object)time6));
      assertFalse(time8.equals((Object)time5));
      assertFalse(time8.equals((Object)object0));
      assertFalse(time8.equals((Object)time3));
      assertTrue(time8.equals((Object)time7));
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", time7.toString());
      assertEquals("20:21:21", time8.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time0, object0);
      assertNotSame(time0, time4);
      assertNotSame(time0, time6);
      assertNotSame(time0, time7);
      assertNotSame(time0, time8);
      assertNotSame(time0, time5);
      assertNotSame(time0, time2);
      assertNotSame(time0, time3);
      assertNotSame(time0, time1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(time7, time6);
      assertNotSame(time7, time4);
      assertNotSame(time7, time8);
      assertNotSame(time7, object0);
      assertNotSame(time7, time3);
      assertNotSame(time7, time5);
      assertNotSame(time7, time2);
      assertNotSame(time7, time0);
      assertNotSame(time7, time1);
      assertNotSame(time8, time2);
      assertNotSame(time8, time1);
      assertNotSame(time8, time0);
      assertNotSame(time8, time4);
      assertNotSame(time8, time6);
      assertNotSame(time8, time7);
      assertNotSame(time8, time5);
      assertNotSame(time8, object0);
      assertNotSame(time8, time3);
      
      boolean boolean1 = linkedList0.add(byteArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(4, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(linkedList0.contains(byteArray0));
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      byte[][] byteArray0 = new byte[4][4];
      linkedList0.clear();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(byteArray0));
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertNotNull(calendar0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      
      Time time0 = xSQLVAR0.decodeTimeCalendar(byteArray0[0], calendar0);
      assertNotNull(time0);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals(4, byteArray0.length);
      
      long long0 = time0.getTime();
      assertEquals(1392409281320L, long0);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals(4, byteArray0.length);
      
      Timestamp timestamp0 = new Timestamp(9223372036854775807L);
      assertNotNull(timestamp0);
      assertEquals(807000000, timestamp0.getNanos());
      assertEquals("292278994-08-17 07:12:55.807", timestamp0.toString());
      
      boolean boolean0 = time0.before(timestamp0);
      assertTrue(boolean0);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals(807000000, timestamp0.getNanos());
      assertEquals("292278994-08-17 07:12:55.807", timestamp0.toString());
      assertEquals(4, byteArray0.length);
      
      boolean boolean1 = linkedList0.add((byte[][]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(byteArray0));
      
      LocalTime localTime0 = time0.toLocalTime();
      assertNotNull(localTime0);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals(4, byteArray0.length);
      
      Time time1 = xSQLVAR0.decodeTime(byteArray0[0]);
      assertNotNull(time1);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertTrue(time1.equals((Object)time0));
      assertEquals("20:21:21", time1.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time1, time0);
      
      String string0 = locale0.getDisplayVariant();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      long long1 = time1.getTime();
      assertEquals(1392409281320L, long1);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertTrue(time1.equals((Object)time0));
      assertTrue(long1 == long0);
      assertEquals("20:21:21", time1.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time1, time0);
      
      long long2 = time1.getTime();
      assertEquals(1392409281320L, long2);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      assertTrue(time1.equals((Object)time0));
      assertEquals("20:21:21", time1.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time1, time0);
      
      boolean boolean2 = time0.after(time1);
      assertFalse(boolean2);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(time0.equals((Object)time1));
      assertTrue(time1.equals((Object)time0));
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", time1.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time0, time1);
      assertNotSame(time1, time0);
      
      long long3 = time0.getTime();
      assertEquals(1392409281320L, long3);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertTrue(long3 == long2);
      assertTrue(long3 == long0);
      assertTrue(long3 == long1);
      assertTrue(time0.equals((Object)time1));
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time0, time1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Time time2 = xSQLVAR0.decodeTime(time0, calendar0, false);
      assertNotNull(time2);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertTrue(time2.equals((Object)time0));
      assertTrue(time2.equals((Object)time1));
      assertTrue(time0.equals((Object)time1));
      assertEquals("20:21:21", time2.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time2, time0);
      assertNotSame(time2, time1);
      assertNotSame(time0, time1);
      assertNotSame(time0, time2);
      
      long long4 = time0.getTime();
      assertEquals(1392409281320L, long4);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertTrue(long4 == long3);
      assertTrue(long4 == long1);
      assertTrue(long4 == long2);
      assertTrue(long4 == long0);
      assertTrue(time0.equals((Object)time2));
      assertTrue(time0.equals((Object)time1));
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time0, time1);
      assertNotSame(time0, time2);
      
      Time time3 = xSQLVAR0.decodeTime(byteArray0[0]);
      assertNotNull(time3);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertTrue(time3.equals((Object)time2));
      assertTrue(time3.equals((Object)time0));
      assertTrue(time3.equals((Object)time1));
      assertEquals("20:21:21", time3.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time3, time0);
      assertNotSame(time3, time1);
      assertNotSame(time3, time2);
      
      String string1 = locale0.getDisplayVariant();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Time time4 = new Time(0);
      assertNotNull(time4);
      assertFalse(time4.equals((Object)time2));
      assertFalse(time4.equals((Object)time0));
      assertFalse(time4.equals((Object)time1));
      assertFalse(time4.equals((Object)time3));
      assertEquals("00:00:00", time4.toString());
      
      Time time5 = xSQLVAR0.decodeTime(byteArray0[0]);
      assertNotNull(time5);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertFalse(time5.equals((Object)time4));
      assertTrue(time5.equals((Object)time0));
      assertTrue(time5.equals((Object)time3));
      assertTrue(time5.equals((Object)time2));
      assertTrue(time5.equals((Object)time1));
      assertEquals("20:21:21", time5.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time5, time4);
      assertNotSame(time5, time0);
      assertNotSame(time5, time1);
      assertNotSame(time5, time2);
      assertNotSame(time5, time3);
      
      Time time6 = xSQLVAR0.decodeTime(time2, calendar0, true);
      assertNotNull(time6);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertTrue(time2.equals((Object)time3));
      assertTrue(time2.equals((Object)time5));
      assertFalse(time2.equals((Object)time4));
      assertTrue(time2.equals((Object)time0));
      assertTrue(time2.equals((Object)time1));
      assertTrue(time0.equals((Object)time3));
      assertTrue(time0.equals((Object)time5));
      assertTrue(time0.equals((Object)time2));
      assertFalse(time0.equals((Object)time4));
      assertTrue(time0.equals((Object)time1));
      assertTrue(time6.equals((Object)time5));
      assertTrue(time6.equals((Object)time0));
      assertFalse(time6.equals((Object)time4));
      assertTrue(time6.equals((Object)time1));
      assertTrue(time6.equals((Object)time2));
      assertTrue(time6.equals((Object)time3));
      assertEquals("20:21:21", time2.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", time6.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time2, time5);
      assertNotSame(time2, time0);
      assertNotSame(time2, time1);
      assertNotSame(time2, time4);
      assertNotSame(time2, time3);
      assertNotSame(time2, time6);
      assertNotSame(time0, time6);
      assertNotSame(time0, time1);
      assertNotSame(time0, time3);
      assertNotSame(time0, time5);
      assertNotSame(time0, time4);
      assertNotSame(time0, time2);
      assertNotSame(time6, time3);
      assertNotSame(time6, time0);
      assertNotSame(time6, time1);
      assertNotSame(time6, time2);
      assertNotSame(time6, time4);
      assertNotSame(time6, time5);
      
      boolean boolean3 = linkedList0.add(byteArray0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(2, linkedList0.size());
      assertEquals(4, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(2, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(linkedList0.contains(byteArray0));
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo(databaseParameterBufferImp0);
      assertNotNull(fBConnectionRequestInfo0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertNotNull(isc_db_handle_impl0);
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, fBConnectionRequestInfo0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener0);
      assertNotNull(gDSHelper0);
      assertEquals(16384, GDSHelper.DEFAULT_BLOB_BUFFER_SIZE);
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertFalse(gDSHelper0.inTransaction());
      
      org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl0);
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher(gDSHelper0, 16384, (-2590), isc_stmt_handle_impl0, (FBObjectListener.FetcherListener) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.87581752666317
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl0);
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      
      org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl1);
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl1.getTransaction();
      assertNull(abstractIscTrHandle0);
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      
      isc_stmt_handle_impl0.registerTransaction((AbstractIscTrHandle) null);
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertNotNull(isc_blob_handle_impl0);
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      assertNotNull(isc_blob_handle_impl1);
      assertFalse(isc_blob_handle_impl1.equals((Object)isc_blob_handle_impl0));
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      
      isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertNull(isc_tr_handle_impl0);
      assertFalse(isc_blob_handle_impl0.equals((Object)isc_blob_handle_impl1));
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotSame(isc_blob_handle_impl0, isc_blob_handle_impl1);
      
      isc_blob_handle_impl1.setTr((isc_tr_handle_impl) null);
      assertFalse(isc_blob_handle_impl1.equals((Object)isc_blob_handle_impl0));
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertNotSame(isc_blob_handle_impl1, isc_blob_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl1 = isc_blob_handle_impl1.getTr();
      assertNull(isc_tr_handle_impl1);
      assertFalse(isc_blob_handle_impl1.equals((Object)isc_blob_handle_impl0));
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertNotSame(isc_blob_handle_impl1, isc_blob_handle_impl0);
      
      isc_stmt_handle_impl0.registerTransaction((AbstractIscTrHandle) null);
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      
      org.firebirdsql.gds.impl.wire.isc_tr_handle_impl isc_tr_handle_impl2 = new org.firebirdsql.gds.impl.wire.isc_tr_handle_impl();
      assertNotNull(isc_tr_handle_impl2);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, isc_tr_handle_impl2.getState());
      
      isc_tr_handle_impl2.forgetResultSets();
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, isc_tr_handle_impl2.getState());
      
      isc_tr_handle_impl2.registerStatementWithTransaction(isc_stmt_handle_impl1);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_tr_handle_impl2.getState());
      
      isc_tr_handle_impl2.unregisterStatementFromTransaction(isc_stmt_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_tr_handle_impl2.getState());
      
      AbstractIscTrHandle abstractIscTrHandle1 = isc_stmt_handle_impl0.getTransaction();
      assertNull(abstractIscTrHandle1);
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      
      isc_stmt_handle_impl1.registerTransaction((AbstractIscTrHandle) null);
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl2);
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl0));
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl2.getRsrId());
      assertEquals(0, isc_stmt_handle_impl2.size());
      
      isc_stmt_handle_impl2.setUpdateCount(5);
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl0));
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl2.getRsrId());
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertEquals(5, isc_stmt_handle_impl2.getUpdateCount());
      assertNotSame(isc_stmt_handle_impl2, isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl2.setSelectCount((-2343));
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl0));
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertEquals((-2343), isc_stmt_handle_impl2.getSelectCount());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl2.getRsrId());
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertEquals(5, isc_stmt_handle_impl2.getUpdateCount());
      assertNotSame(isc_stmt_handle_impl2, isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl2.setSelectCount(1);
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl0));
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertEquals(1, isc_stmt_handle_impl2.getSelectCount());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl2.getRsrId());
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertEquals(5, isc_stmt_handle_impl2.getUpdateCount());
      assertNotSame(isc_stmt_handle_impl2, isc_stmt_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl2 = new isc_blob_handle_impl();
      assertNotNull(isc_blob_handle_impl2);
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl1));
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl0));
      assertEquals(0L, isc_blob_handle_impl2.getBlobId());
      assertFalse(isc_blob_handle_impl2.isEof());
      assertEquals(0, isc_blob_handle_impl2.getRblId());
      
      isc_blob_handle_impl1.setTr((isc_tr_handle_impl) null);
      assertFalse(isc_blob_handle_impl1.equals((Object)isc_blob_handle_impl2));
      assertFalse(isc_blob_handle_impl1.equals((Object)isc_blob_handle_impl0));
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertNotSame(isc_blob_handle_impl1, isc_blob_handle_impl2);
      assertNotSame(isc_blob_handle_impl1, isc_blob_handle_impl0);
      
      isc_blob_handle_impl1.setTr((isc_tr_handle_impl) null);
      assertFalse(isc_blob_handle_impl1.equals((Object)isc_blob_handle_impl2));
      assertFalse(isc_blob_handle_impl1.equals((Object)isc_blob_handle_impl0));
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertNotSame(isc_blob_handle_impl1, isc_blob_handle_impl2);
      assertNotSame(isc_blob_handle_impl1, isc_blob_handle_impl0);
      
      isc_stmt_handle_impl0.setStatementType(2);
      assertFalse(isc_stmt_handle_impl0.equals((Object)isc_stmt_handle_impl2));
      assertEquals(2, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotSame(isc_stmt_handle_impl0, isc_stmt_handle_impl2);
      
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) isc_blob_handle_impl0);
      assertNotNull(predicate0);
      assertFalse(isc_blob_handle_impl0.equals((Object)isc_blob_handle_impl1));
      assertFalse(isc_blob_handle_impl0.equals((Object)isc_blob_handle_impl2));
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotSame(isc_blob_handle_impl0, isc_blob_handle_impl1);
      assertNotSame(isc_blob_handle_impl0, isc_blob_handle_impl2);
      
      byte[][] byteArray0 = new byte[2][6];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)27;
      byteArray1[1] = (byte)57;
      byteArray1[2] = (byte)92;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)27;
      byteArray2[2] = (byte)57;
      byteArray2[3] = (byte)57;
      byteArray2[4] = (byte)57;
      byteArray2[5] = (byte)23;
      byteArray0[1] = byteArray2;
      boolean boolean0 = linkedList0.add(byteArray0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(2, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      
      ListIterator<byte[][]> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(1, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(linkedList0.contains(byteArray0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(linkedList0.contains(byteArray0));
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute((-1929));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8195163165257857
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      byte[][] byteArray0 = new byte[4][4];
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertNotNull(calendar0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      
      Time time0 = xSQLVAR0.decodeTimeCalendar(byteArray0[0], calendar0);
      assertNotNull(time0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals(4, byteArray0.length);
      
      long long0 = time0.getTime();
      assertEquals(1392409281320L, long0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals(4, byteArray0.length);
      
      LocalTime localTime0 = time0.toLocalTime();
      assertNotNull(localTime0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals(4, byteArray0.length);
      
      Time time1 = xSQLVAR0.decodeTime(byteArray0[0]);
      assertNotNull(time1);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertTrue(time1.equals((Object)time0));
      assertEquals("20:21:21", time1.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time1, time0);
      
      String string0 = locale0.getDisplayVariant();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      long long1 = time1.getTime();
      assertEquals(1392409281320L, long1);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertTrue(time1.equals((Object)time0));
      assertTrue(long1 == long0);
      assertEquals("20:21:21", time1.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time1, time0);
      
      boolean boolean0 = time0.after(time1);
      assertFalse(boolean0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertTrue(time0.equals((Object)time1));
      assertTrue(time1.equals((Object)time0));
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", time1.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time0, time1);
      assertNotSame(time1, time0);
      
      long long2 = time0.getTime();
      assertEquals(1392409281320L, long2);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertTrue(time0.equals((Object)time1));
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time0, time1);
      
      Time time2 = new Time(0);
      assertNotNull(time2);
      assertFalse(time2.equals((Object)time0));
      assertFalse(time2.equals((Object)time1));
      assertEquals("00:00:00", time2.toString());
      
      Time time3 = xSQLVAR0.decodeTime(byteArray0[0]);
      assertNotNull(time3);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertTrue(time3.equals((Object)time1));
      assertTrue(time3.equals((Object)time0));
      assertFalse(time3.equals((Object)time2));
      assertEquals("20:21:21", time3.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time3, time0);
      assertNotSame(time3, time1);
      assertNotSame(time3, time2);
      
      String string1 = locale0.getDisplayVariant();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.UK;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_GB", locale1.toString());
      assertNotSame(locale1, locale0);
      
      String string2 = locale0.getDisplayCountry(locale1);
      assertEquals("Taiwan", string2);
      assertNotNull(string2);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_GB", locale1.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotSame(locale1, locale0);
      assertNotSame(locale0, locale1);
      
      Time time4 = new Time(0);
      assertNotNull(time4);
      assertTrue(time4.equals((Object)time2));
      assertFalse(time4.equals((Object)time3));
      assertFalse(time4.equals((Object)time1));
      assertFalse(time4.equals((Object)time0));
      assertEquals("00:00:00", time4.toString());
      
      Time time5 = xSQLVAR0.decodeTime(byteArray0[0]);
      assertNotNull(time5);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertFalse(time5.equals((Object)time4));
      assertTrue(time5.equals((Object)time1));
      assertFalse(time5.equals((Object)time2));
      assertTrue(time5.equals((Object)time0));
      assertTrue(time5.equals((Object)time3));
      assertEquals("20:21:21", time5.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time5, time0);
      assertNotSame(time5, time3);
      assertNotSame(time5, time4);
      assertNotSame(time5, time2);
      assertNotSame(time5, time1);
      
      Time time6 = Time.valueOf(localTime0);
      assertNotNull(time6);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(time6.equals((Object)time0));
      assertFalse(time6.equals((Object)time3));
      assertFalse(time6.equals((Object)time5));
      assertFalse(time6.equals((Object)time2));
      assertFalse(time6.equals((Object)time4));
      assertFalse(time6.equals((Object)time1));
      assertTrue(time0.equals((Object)time5));
      assertFalse(time0.equals((Object)time4));
      assertTrue(time0.equals((Object)time1));
      assertFalse(time0.equals((Object)time2));
      assertTrue(time0.equals((Object)time3));
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time6.toString());
      assertEquals("20:21:21", time0.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(locale0, locale1);
      assertNotSame(time6, time0);
      assertNotSame(time6, time3);
      assertNotSame(time6, time5);
      assertNotSame(time6, time2);
      assertNotSame(time6, time4);
      assertNotSame(time6, time1);
      assertNotSame(time0, time3);
      assertNotSame(time0, time4);
      assertNotSame(time0, time6);
      assertNotSame(time0, time2);
      assertNotSame(time0, time1);
      assertNotSame(time0, time5);
      
      long long3 = time0.getTime();
      assertEquals(1392409281320L, long3);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(time0.equals((Object)time5));
      assertFalse(time0.equals((Object)time4));
      assertTrue(time0.equals((Object)time1));
      assertFalse(time0.equals((Object)time6));
      assertFalse(time0.equals((Object)time2));
      assertTrue(time0.equals((Object)time3));
      assertTrue(long3 == long2);
      assertTrue(long3 == long0);
      assertTrue(long3 == long1);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(locale0, locale1);
      assertNotSame(time0, time3);
      assertNotSame(time0, time4);
      assertNotSame(time0, time6);
      assertNotSame(time0, time2);
      assertNotSame(time0, time1);
      assertNotSame(time0, time5);
      
      Time time7 = xSQLVAR0.encodeTime(time5, calendar0, false);
      assertNotNull(time7);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(time5.equals((Object)time4));
      assertTrue(time5.equals((Object)time1));
      assertFalse(time5.equals((Object)time6));
      assertFalse(time5.equals((Object)time2));
      assertTrue(time5.equals((Object)time0));
      assertTrue(time5.equals((Object)time3));
      assertTrue(time7.equals((Object)time5));
      assertFalse(time7.equals((Object)time2));
      assertTrue(time7.equals((Object)time3));
      assertFalse(time7.equals((Object)time4));
      assertTrue(time7.equals((Object)time0));
      assertFalse(time7.equals((Object)time6));
      assertTrue(time7.equals((Object)time1));
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("20:21:21", time5.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time7.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(locale0, locale1);
      assertNotSame(time5, time0);
      assertNotSame(time5, time3);
      assertNotSame(time5, time4);
      assertNotSame(time5, time6);
      assertNotSame(time5, time2);
      assertNotSame(time5, time7);
      assertNotSame(time5, time1);
      assertNotSame(time7, time3);
      assertNotSame(time7, time2);
      assertNotSame(time7, time5);
      assertNotSame(time7, time1);
      assertNotSame(time7, time4);
      assertNotSame(time7, time0);
      assertNotSame(time7, time6);
      
      Time time8 = Time.valueOf(localTime0);
      assertNotNull(time8);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(time0.equals((Object)time5));
      assertFalse(time0.equals((Object)time4));
      assertTrue(time0.equals((Object)time1));
      assertFalse(time0.equals((Object)time6));
      assertFalse(time0.equals((Object)time2));
      assertTrue(time0.equals((Object)time7));
      assertTrue(time0.equals((Object)time3));
      assertFalse(time8.equals((Object)time0));
      assertTrue(time8.equals((Object)time6));
      assertFalse(time8.equals((Object)time1));
      assertFalse(time8.equals((Object)time2));
      assertFalse(time8.equals((Object)time5));
      assertFalse(time8.equals((Object)time7));
      assertFalse(time8.equals((Object)time3));
      assertFalse(time8.equals((Object)time4));
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", time8.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(locale0, locale1);
      assertNotSame(time0, time8);
      assertNotSame(time0, time3);
      assertNotSame(time0, time4);
      assertNotSame(time0, time6);
      assertNotSame(time0, time2);
      assertNotSame(time0, time7);
      assertNotSame(time0, time1);
      assertNotSame(time0, time5);
      assertNotSame(time8, time0);
      assertNotSame(time8, time1);
      assertNotSame(time8, time2);
      assertNotSame(time8, time5);
      assertNotSame(time8, time6);
      assertNotSame(time8, time7);
      assertNotSame(time8, time3);
      assertNotSame(time8, time4);
      
      LocalTime localTime1 = time5.toLocalTime();
      assertNotNull(localTime1);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertFalse(time5.equals((Object)time8));
      assertFalse(time5.equals((Object)time4));
      assertTrue(time5.equals((Object)time1));
      assertFalse(time5.equals((Object)time6));
      assertFalse(time5.equals((Object)time2));
      assertTrue(time5.equals((Object)time0));
      assertTrue(time5.equals((Object)time7));
      assertTrue(time5.equals((Object)time3));
      assertTrue(localTime1.equals((Object)localTime0));
      assertEquals("20:21:21", time5.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time5, time0);
      assertNotSame(time5, time8);
      assertNotSame(time5, time3);
      assertNotSame(time5, time4);
      assertNotSame(time5, time6);
      assertNotSame(time5, time2);
      assertNotSame(time5, time7);
      assertNotSame(time5, time1);
      assertNotSame(localTime1, localTime0);
      
      long long4 = time8.getTime();
      assertEquals(73281000L, long4);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(time0.equals((Object)time8));
      assertTrue(time0.equals((Object)time5));
      assertFalse(time0.equals((Object)time4));
      assertTrue(time0.equals((Object)time1));
      assertFalse(time0.equals((Object)time6));
      assertFalse(time0.equals((Object)time2));
      assertTrue(time0.equals((Object)time7));
      assertTrue(time0.equals((Object)time3));
      assertTrue(localTime0.equals((Object)localTime1));
      assertFalse(time8.equals((Object)time0));
      assertTrue(time8.equals((Object)time6));
      assertFalse(time8.equals((Object)time1));
      assertFalse(time8.equals((Object)time2));
      assertFalse(time8.equals((Object)time5));
      assertFalse(time8.equals((Object)time7));
      assertFalse(time8.equals((Object)time3));
      assertFalse(time8.equals((Object)time4));
      assertFalse(long4 == long2);
      assertFalse(long4 == long1);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", time8.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(locale0, locale1);
      assertNotSame(time0, time8);
      assertNotSame(time0, time3);
      assertNotSame(time0, time4);
      assertNotSame(time0, time6);
      assertNotSame(time0, time2);
      assertNotSame(time0, time7);
      assertNotSame(time0, time1);
      assertNotSame(time0, time5);
      assertNotSame(localTime0, localTime1);
      assertNotSame(time8, time0);
      assertNotSame(time8, time1);
      assertNotSame(time8, time2);
      assertNotSame(time8, time5);
      assertNotSame(time8, time6);
      assertNotSame(time8, time7);
      assertNotSame(time8, time3);
      assertNotSame(time8, time4);
      
      Time time9 = xSQLVAR0.decodeTime((byte[]) null);
      assertNotNull(time9);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertFalse(time9.equals((Object)time8));
      assertTrue(time9.equals((Object)time1));
      assertFalse(time9.equals((Object)time4));
      assertTrue(time9.equals((Object)time0));
      assertFalse(time9.equals((Object)time6));
      assertTrue(time9.equals((Object)time7));
      assertTrue(time9.equals((Object)time5));
      assertTrue(time9.equals((Object)time3));
      assertFalse(time9.equals((Object)time2));
      assertEquals("20:21:21", time9.toString());
      assertNotSame(time9, time8);
      assertNotSame(time9, time0);
      assertNotSame(time9, time4);
      assertNotSame(time9, time7);
      assertNotSame(time9, time3);
      assertNotSame(time9, time5);
      assertNotSame(time9, time6);
      assertNotSame(time9, time1);
      assertNotSame(time9, time2);
      
      Time time10 = Time.valueOf(localTime0);
      assertNotNull(time10);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(time0.equals((Object)time8));
      assertTrue(time0.equals((Object)time5));
      assertFalse(time0.equals((Object)time4));
      assertTrue(time0.equals((Object)time1));
      assertFalse(time0.equals((Object)time6));
      assertFalse(time0.equals((Object)time2));
      assertTrue(time0.equals((Object)time9));
      assertTrue(time0.equals((Object)time7));
      assertTrue(time0.equals((Object)time3));
      assertTrue(localTime0.equals((Object)localTime1));
      assertFalse(time10.equals((Object)time0));
      assertTrue(time10.equals((Object)time6));
      assertFalse(time10.equals((Object)time1));
      assertFalse(time10.equals((Object)time9));
      assertFalse(time10.equals((Object)time5));
      assertFalse(time10.equals((Object)time2));
      assertTrue(time10.equals((Object)time8));
      assertFalse(time10.equals((Object)time7));
      assertFalse(time10.equals((Object)time3));
      assertFalse(time10.equals((Object)time4));
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", time10.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(locale0, locale1);
      assertNotSame(time0, time8);
      assertNotSame(time0, time10);
      assertNotSame(time0, time3);
      assertNotSame(time0, time4);
      assertNotSame(time0, time6);
      assertNotSame(time0, time2);
      assertNotSame(time0, time7);
      assertNotSame(time0, time1);
      assertNotSame(time0, time9);
      assertNotSame(time0, time5);
      assertNotSame(localTime0, localTime1);
      assertNotSame(time10, time0);
      assertNotSame(time10, time8);
      assertNotSame(time10, time1);
      assertNotSame(time10, time9);
      assertNotSame(time10, time5);
      assertNotSame(time10, time6);
      assertNotSame(time10, time2);
      assertNotSame(time10, time7);
      assertNotSame(time10, time3);
      assertNotSame(time10, time4);
      
      Time time11 = xSQLVAR0.decodeTime(time8, calendar0, true);
      assertNotNull(time11);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(time0.equals((Object)time8));
      assertTrue(time0.equals((Object)time5));
      assertFalse(time0.equals((Object)time10));
      assertFalse(time0.equals((Object)time4));
      assertTrue(time0.equals((Object)time1));
      assertFalse(time0.equals((Object)time6));
      assertFalse(time0.equals((Object)time2));
      assertTrue(time0.equals((Object)time9));
      assertTrue(time0.equals((Object)time7));
      assertTrue(time0.equals((Object)time3));
      assertTrue(localTime0.equals((Object)localTime1));
      assertFalse(time8.equals((Object)time0));
      assertTrue(time8.equals((Object)time6));
      assertFalse(time8.equals((Object)time1));
      assertFalse(time8.equals((Object)time2));
      assertTrue(time8.equals((Object)time10));
      assertFalse(time8.equals((Object)time5));
      assertFalse(time8.equals((Object)time7));
      assertFalse(time8.equals((Object)time9));
      assertFalse(time8.equals((Object)time3));
      assertFalse(time8.equals((Object)time4));
      assertFalse(time11.equals((Object)time5));
      assertFalse(time11.equals((Object)time1));
      assertFalse(time11.equals((Object)time4));
      assertFalse(time11.equals((Object)time9));
      assertTrue(time11.equals((Object)time8));
      assertFalse(time11.equals((Object)time7));
      assertTrue(time11.equals((Object)time6));
      assertFalse(time11.equals((Object)time0));
      assertFalse(time11.equals((Object)time3));
      assertFalse(time11.equals((Object)time2));
      assertTrue(time11.equals((Object)time10));
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", time8.toString());
      assertEquals("20:21:21", time11.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(locale0, locale1);
      assertNotSame(time0, time8);
      assertNotSame(time0, time10);
      assertNotSame(time0, time3);
      assertNotSame(time0, time4);
      assertNotSame(time0, time11);
      assertNotSame(time0, time6);
      assertNotSame(time0, time2);
      assertNotSame(time0, time7);
      assertNotSame(time0, time1);
      assertNotSame(time0, time9);
      assertNotSame(time0, time5);
      assertNotSame(localTime0, localTime1);
      assertNotSame(time8, time0);
      assertNotSame(time8, time1);
      assertNotSame(time8, time2);
      assertNotSame(time8, time5);
      assertNotSame(time8, time6);
      assertNotSame(time8, time7);
      assertNotSame(time8, time9);
      assertNotSame(time8, time3);
      assertNotSame(time8, time4);
      assertNotSame(time8, time11);
      assertNotSame(time8, time10);
      assertNotSame(time11, time5);
      assertNotSame(time11, time1);
      assertNotSame(time11, time4);
      assertNotSame(time11, time9);
      assertNotSame(time11, time7);
      assertNotSame(time11, time6);
      assertNotSame(time11, time10);
      assertNotSame(time11, time8);
      assertNotSame(time11, time0);
      assertNotSame(time11, time3);
      assertNotSame(time11, time2);
      
      boolean boolean1 = linkedList0.add(byteArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(4, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3238614379613667
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[9][6];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)110;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      boolean boolean0 = linkedList0.add(byteArray0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(9, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      
      byteArray2[0] = (byte) (-44);
      byteArray2[1] = (byte) (-110);
      byteArray2[2] = (byte)110;
      byteArray2[3] = (byte)110;
      byteArray2[4] = (byte)110;
      byteArray2[3] = (byte)110;
      byteArray2[8] = (byte) (-2);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[6];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)110;
      byteArray3[1] = (byte) (-44);
      byteArray3[2] = (byte)110;
      byteArray3[3] = (byte) (-110);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(linkedList0.contains(byteArray0));
      
      fBCachedFetcher0.updateRow(byteArray0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(9, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.afterLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[][] byteArray0 = new byte[3][6];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)104;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)104;
      byteArray2[1] = (byte) (-110);
      byteArray2[3] = (byte)104;
      byteArray2[5] = (byte)104;
      byteArray2[8] = (byte) (-2);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[7];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)104;
      byteArray3[1] = (byte)104;
      byteArray3[2] = (byte)104;
      byteArray3[3] = (byte)104;
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(byteArray0));
      
      LinkedBlockingQueue<byte[][]> linkedBlockingQueue0 = new LinkedBlockingQueue<byte[][]>();
      assertNotNull(linkedBlockingQueue0);
      assertFalse(linkedBlockingQueue0.contains(byteArray0));
      
      boolean boolean0 = linkedList0.retainAll(linkedBlockingQueue0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(linkedBlockingQueue0.contains(byteArray0));
      
      Consumer<byte[][]> consumer0 = (Consumer<byte[][]>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(byteArray0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(linkedList0.contains(byteArray0));
      
      boolean boolean1 = fBCachedFetcher0.isBeforeFirst();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(linkedList0.contains(byteArray0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<byte[][]> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      Predicate<byte[][]> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate2 = predicate1.negate();
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate2, predicate1);
      
      Predicate<byte[][]> predicate3 = predicate2.negate();
      assertNotNull(predicate3);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Predicate<FBBlobField> predicate4 = Predicate.isEqual(object1);
      assertNotNull(predicate4);
      assertFalse(object1.equals((Object)object0));
      assertNotSame(object1, object0);
      
      Predicate<byte[][]> predicate5 = predicate3.and(predicate1);
      assertNotNull(predicate5);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate3);
      assertNotNull(predicate6);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      
      Predicate<Object> predicate7 = predicate6.negate();
      assertNotNull(predicate7);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate6));
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      
      Predicate<byte[][]> predicate8 = predicate3.or(predicate2);
      assertNotNull(predicate8);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate3));
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      
      Predicate<Object> predicate9 = predicate6.and(predicate7);
      assertNotNull(predicate9);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate7));
      assertFalse(predicate9.equals((Object)predicate6));
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      
      Predicate<Object> predicate10 = predicate9.or(predicate7);
      assertNotNull(predicate10);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate9.equals((Object)predicate7));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate10.equals((Object)predicate9));
      assertFalse(predicate10.equals((Object)predicate6));
      assertFalse(predicate10.equals((Object)predicate7));
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      
      Predicate<Object> predicate11 = predicate10.negate();
      assertNotNull(predicate11);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate9.equals((Object)predicate10));
      assertFalse(predicate9.equals((Object)predicate7));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate10.equals((Object)predicate9));
      assertFalse(predicate10.equals((Object)predicate6));
      assertFalse(predicate10.equals((Object)predicate7));
      assertFalse(predicate11.equals((Object)predicate7));
      assertFalse(predicate11.equals((Object)predicate9));
      assertFalse(predicate11.equals((Object)predicate6));
      assertFalse(predicate11.equals((Object)predicate10));
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate11, predicate7);
      
      Predicate<byte[][]> predicate12 = predicate5.and(predicate10);
      assertNotNull(predicate12);
      assertFalse(predicate12.equals((Object)predicate0));
      assertFalse(predicate12.equals((Object)predicate2));
      assertFalse(predicate12.equals((Object)predicate5));
      assertFalse(predicate12.equals((Object)predicate1));
      assertFalse(predicate12.equals((Object)predicate3));
      assertFalse(predicate12.equals((Object)predicate8));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate9.equals((Object)predicate11));
      assertFalse(predicate9.equals((Object)predicate10));
      assertFalse(predicate9.equals((Object)predicate7));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate10.equals((Object)predicate11));
      assertFalse(predicate10.equals((Object)predicate9));
      assertFalse(predicate10.equals((Object)predicate6));
      assertFalse(predicate10.equals((Object)predicate7));
      assertNotSame(predicate12, predicate5);
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate5, predicate12);
      assertNotSame(predicate7, predicate11);
      
      Predicate<Object> predicate13 = predicate7.negate();
      assertNotNull(predicate13);
      assertFalse(predicate13.equals((Object)predicate11));
      assertFalse(predicate13.equals((Object)predicate9));
      assertFalse(predicate13.equals((Object)predicate7));
      assertFalse(predicate13.equals((Object)predicate10));
      assertFalse(predicate13.equals((Object)predicate6));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate9));
      assertNotSame(predicate13, predicate11);
      assertNotSame(predicate13, predicate7);
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate7, predicate13);
      
      Predicate<byte[][]> predicate14 = predicate5.negate();
      assertNotNull(predicate14);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate2));
      assertFalse(predicate14.equals((Object)predicate12));
      assertFalse(predicate14.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate3));
      assertFalse(predicate14.equals((Object)predicate0));
      assertFalse(predicate14.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertNotSame(object0, object1);
      assertNotSame(predicate14, predicate2);
      assertNotSame(predicate14, predicate3);
      assertNotSame(predicate14, predicate1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate14);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate14);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate14);
      assertNotSame(predicate5, predicate12);
      
      Integer integer0 = new Integer(2004);
      assertEquals(2004, (int)integer0);
      assertNotNull(integer0);
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      Predicate<byte[][]> predicate15 = predicate0.negate();
      assertNotNull(predicate15);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate15.equals((Object)predicate1));
      assertFalse(predicate15.equals((Object)predicate3));
      assertFalse(predicate15.equals((Object)predicate0));
      assertFalse(predicate15.equals((Object)predicate5));
      assertFalse(predicate15.equals((Object)predicate12));
      assertFalse(predicate15.equals((Object)predicate2));
      assertFalse(predicate15.equals((Object)predicate14));
      assertFalse(predicate15.equals((Object)predicate8));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate15, predicate1);
      assertNotSame(predicate15, predicate3);
      assertNotSame(predicate15, predicate2);
      assertNotSame(predicate15, predicate14);
      
      Predicate<Object> predicate16 = predicate7.negate();
      assertNotNull(predicate16);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate7));
      assertFalse(predicate16.equals((Object)predicate10));
      assertFalse(predicate16.equals((Object)predicate13));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate11));
      assertFalse(predicate3.equals((Object)predicate15));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate14));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate9));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate14);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate15);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate14);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate16, predicate7);
      assertNotSame(predicate16, predicate13);
      assertNotSame(predicate16, predicate11);
      assertNotSame(predicate3, predicate15);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate14);
      assertNotSame(predicate7, predicate16);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate7, predicate13);
      
      Predicate<Object> predicate17 = predicate7.negate();
      assertNotNull(predicate17);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate15));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate14));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate17.equals((Object)predicate13));
      assertFalse(predicate17.equals((Object)predicate11));
      assertFalse(predicate17.equals((Object)predicate16));
      assertFalse(predicate17.equals((Object)predicate10));
      assertFalse(predicate17.equals((Object)predicate6));
      assertFalse(predicate17.equals((Object)predicate9));
      assertFalse(predicate17.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate16));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate9));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate14);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate15);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate14);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate3, predicate15);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate14);
      assertNotSame(predicate17, predicate13);
      assertNotSame(predicate17, predicate11);
      assertNotSame(predicate17, predicate16);
      assertNotSame(predicate17, predicate7);
      assertNotSame(predicate7, predicate16);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate7, predicate13);
      assertNotSame(predicate7, predicate17);
      
      Predicate<byte[][]> predicate18 = predicate5.and(predicate0);
      assertNotNull(predicate18);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate15));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate14));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate18.equals((Object)predicate15));
      assertFalse(predicate18.equals((Object)predicate8));
      assertFalse(predicate18.equals((Object)predicate1));
      assertFalse(predicate18.equals((Object)predicate2));
      assertFalse(predicate18.equals((Object)predicate0));
      assertFalse(predicate18.equals((Object)predicate14));
      assertFalse(predicate18.equals((Object)predicate3));
      assertFalse(predicate18.equals((Object)predicate12));
      assertFalse(predicate18.equals((Object)predicate5));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate15));
      assertFalse(predicate5.equals((Object)predicate14));
      assertFalse(predicate5.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate14);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate15);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate14);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate3, predicate15);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate14);
      assertNotSame(predicate18, predicate12);
      assertNotSame(predicate18, predicate5);
      assertNotSame(predicate5, predicate12);
      assertNotSame(predicate5, predicate18);
      
      Predicate<Object> predicate19 = predicate16.and(predicate17);
      assertNotNull(predicate19);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate7));
      assertFalse(predicate16.equals((Object)predicate10));
      assertFalse(predicate16.equals((Object)predicate13));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate11));
      assertFalse(predicate3.equals((Object)predicate18));
      assertFalse(predicate3.equals((Object)predicate15));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate14));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate17.equals((Object)predicate13));
      assertFalse(predicate17.equals((Object)predicate11));
      assertFalse(predicate17.equals((Object)predicate16));
      assertFalse(predicate17.equals((Object)predicate10));
      assertFalse(predicate17.equals((Object)predicate6));
      assertFalse(predicate17.equals((Object)predicate9));
      assertFalse(predicate17.equals((Object)predicate7));
      assertFalse(predicate19.equals((Object)predicate11));
      assertFalse(predicate19.equals((Object)predicate9));
      assertFalse(predicate19.equals((Object)predicate7));
      assertFalse(predicate19.equals((Object)predicate16));
      assertFalse(predicate19.equals((Object)predicate17));
      assertFalse(predicate19.equals((Object)predicate13));
      assertFalse(predicate19.equals((Object)predicate10));
      assertFalse(predicate19.equals((Object)predicate6));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate16));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate17));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate14);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate15);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate14);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate16, predicate7);
      assertNotSame(predicate16, predicate13);
      assertNotSame(predicate16, predicate17);
      assertNotSame(predicate16, predicate11);
      assertNotSame(predicate3, predicate15);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate14);
      assertNotSame(predicate17, predicate13);
      assertNotSame(predicate17, predicate11);
      assertNotSame(predicate17, predicate16);
      assertNotSame(predicate17, predicate7);
      assertNotSame(predicate19, predicate9);
      assertNotSame(predicate7, predicate16);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate7, predicate13);
      assertNotSame(predicate7, predicate17);
      
      Predicate<Object> predicate20 = predicate16.negate();
      assertNotNull(predicate20);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate7));
      assertFalse(predicate16.equals((Object)predicate10));
      assertFalse(predicate16.equals((Object)predicate13));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate11));
      assertFalse(predicate16.equals((Object)predicate19));
      assertFalse(predicate3.equals((Object)predicate18));
      assertFalse(predicate3.equals((Object)predicate15));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate14));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate20.equals((Object)predicate10));
      assertFalse(predicate20.equals((Object)predicate17));
      assertFalse(predicate20.equals((Object)predicate7));
      assertFalse(predicate20.equals((Object)predicate13));
      assertFalse(predicate20.equals((Object)predicate9));
      assertFalse(predicate20.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate11));
      assertFalse(predicate20.equals((Object)predicate19));
      assertFalse(predicate20.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate19));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate16));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate19));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate17));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate14);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate15);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate14);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate16, predicate7);
      assertNotSame(predicate16, predicate13);
      assertNotSame(predicate16, predicate17);
      assertNotSame(predicate16, predicate11);
      assertNotSame(predicate16, predicate20);
      assertNotSame(predicate3, predicate15);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate14);
      assertNotSame(predicate20, predicate17);
      assertNotSame(predicate20, predicate7);
      assertNotSame(predicate20, predicate13);
      assertNotSame(predicate20, predicate11);
      assertNotSame(predicate20, predicate16);
      assertNotSame(predicate7, predicate16);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate7, predicate13);
      assertNotSame(predicate7, predicate20);
      assertNotSame(predicate7, predicate17);
      
      Predicate<FBCachedBlobField> predicate21 = Predicate.isEqual((Object) predicate19);
      assertNotNull(predicate21);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate7));
      assertFalse(predicate16.equals((Object)predicate10));
      assertFalse(predicate16.equals((Object)predicate13));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate11));
      assertFalse(predicate16.equals((Object)predicate19));
      assertFalse(predicate16.equals((Object)predicate20));
      assertFalse(predicate3.equals((Object)predicate18));
      assertFalse(predicate3.equals((Object)predicate15));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate14));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate17.equals((Object)predicate13));
      assertFalse(predicate17.equals((Object)predicate11));
      assertFalse(predicate17.equals((Object)predicate16));
      assertFalse(predicate17.equals((Object)predicate10));
      assertFalse(predicate17.equals((Object)predicate6));
      assertFalse(predicate17.equals((Object)predicate9));
      assertFalse(predicate17.equals((Object)predicate7));
      assertFalse(predicate17.equals((Object)predicate20));
      assertFalse(predicate17.equals((Object)predicate19));
      assertFalse(predicate19.equals((Object)predicate11));
      assertFalse(predicate19.equals((Object)predicate9));
      assertFalse(predicate19.equals((Object)predicate7));
      assertFalse(predicate19.equals((Object)predicate16));
      assertFalse(predicate19.equals((Object)predicate20));
      assertFalse(predicate19.equals((Object)predicate17));
      assertFalse(predicate19.equals((Object)predicate13));
      assertFalse(predicate19.equals((Object)predicate10));
      assertFalse(predicate19.equals((Object)predicate6));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate19));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate16));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate19));
      assertFalse(predicate7.equals((Object)predicate20));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate17));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate14);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate15);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate14);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate16, predicate7);
      assertNotSame(predicate16, predicate13);
      assertNotSame(predicate16, predicate17);
      assertNotSame(predicate16, predicate11);
      assertNotSame(predicate16, predicate20);
      assertNotSame(predicate3, predicate15);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate14);
      assertNotSame(predicate17, predicate13);
      assertNotSame(predicate17, predicate11);
      assertNotSame(predicate17, predicate16);
      assertNotSame(predicate17, predicate7);
      assertNotSame(predicate17, predicate20);
      assertNotSame(predicate19, predicate9);
      assertNotSame(predicate7, predicate16);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate7, predicate13);
      assertNotSame(predicate7, predicate20);
      assertNotSame(predicate7, predicate17);
      
      Predicate<Delayed> predicate22 = Predicate.isEqual((Object) predicate14);
      assertNotNull(predicate22);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate2));
      assertFalse(predicate14.equals((Object)predicate15));
      assertFalse(predicate14.equals((Object)predicate12));
      assertFalse(predicate14.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate3));
      assertFalse(predicate14.equals((Object)predicate18));
      assertFalse(predicate14.equals((Object)predicate0));
      assertFalse(predicate14.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate18));
      assertFalse(predicate3.equals((Object)predicate15));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate14));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate15));
      assertFalse(predicate5.equals((Object)predicate14));
      assertFalse(predicate5.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate18));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate14, predicate2);
      assertNotSame(predicate14, predicate15);
      assertNotSame(predicate14, predicate3);
      assertNotSame(predicate14, predicate1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate14);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate15);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate14);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate3, predicate15);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate14);
      assertNotSame(predicate5, predicate12);
      assertNotSame(predicate5, predicate18);
      
      Predicate<Object> predicate23 = predicate17.and(predicate19);
      assertNotNull(predicate23);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate7));
      assertFalse(predicate16.equals((Object)predicate10));
      assertFalse(predicate16.equals((Object)predicate13));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate11));
      assertFalse(predicate16.equals((Object)predicate19));
      assertFalse(predicate16.equals((Object)predicate20));
      assertFalse(predicate3.equals((Object)predicate18));
      assertFalse(predicate3.equals((Object)predicate15));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate14));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate17.equals((Object)predicate13));
      assertFalse(predicate17.equals((Object)predicate11));
      assertFalse(predicate17.equals((Object)predicate16));
      assertFalse(predicate17.equals((Object)predicate10));
      assertFalse(predicate17.equals((Object)predicate6));
      assertFalse(predicate17.equals((Object)predicate9));
      assertFalse(predicate17.equals((Object)predicate7));
      assertFalse(predicate17.equals((Object)predicate20));
      assertFalse(predicate17.equals((Object)predicate19));
      assertFalse(predicate19.equals((Object)predicate11));
      assertFalse(predicate19.equals((Object)predicate9));
      assertFalse(predicate19.equals((Object)predicate7));
      assertFalse(predicate19.equals((Object)predicate16));
      assertFalse(predicate19.equals((Object)predicate20));
      assertFalse(predicate19.equals((Object)predicate17));
      assertFalse(predicate19.equals((Object)predicate13));
      assertFalse(predicate19.equals((Object)predicate10));
      assertFalse(predicate19.equals((Object)predicate6));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate19));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate16));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate19));
      assertFalse(predicate7.equals((Object)predicate20));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate17));
      assertFalse(predicate23.equals((Object)predicate17));
      assertFalse(predicate23.equals((Object)predicate9));
      assertFalse(predicate23.equals((Object)predicate6));
      assertFalse(predicate23.equals((Object)predicate13));
      assertFalse(predicate23.equals((Object)predicate10));
      assertFalse(predicate23.equals((Object)predicate20));
      assertFalse(predicate23.equals((Object)predicate11));
      assertFalse(predicate23.equals((Object)predicate7));
      assertFalse(predicate23.equals((Object)predicate19));
      assertFalse(predicate23.equals((Object)predicate16));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate14);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate15);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate14);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate16, predicate7);
      assertNotSame(predicate16, predicate13);
      assertNotSame(predicate16, predicate17);
      assertNotSame(predicate16, predicate11);
      assertNotSame(predicate16, predicate20);
      assertNotSame(predicate3, predicate15);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate14);
      assertNotSame(predicate17, predicate13);
      assertNotSame(predicate17, predicate11);
      assertNotSame(predicate17, predicate16);
      assertNotSame(predicate17, predicate7);
      assertNotSame(predicate17, predicate20);
      assertNotSame(predicate19, predicate9);
      assertNotSame(predicate19, predicate23);
      assertNotSame(predicate7, predicate16);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate7, predicate13);
      assertNotSame(predicate7, predicate20);
      assertNotSame(predicate7, predicate17);
      assertNotSame(predicate23, predicate9);
      assertNotSame(predicate23, predicate19);
      
      Predicate<Object> predicate24 = predicate6.and(predicate23);
      assertNotNull(predicate24);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate23));
      assertFalse(predicate16.equals((Object)predicate7));
      assertFalse(predicate16.equals((Object)predicate10));
      assertFalse(predicate16.equals((Object)predicate13));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate11));
      assertFalse(predicate16.equals((Object)predicate19));
      assertFalse(predicate16.equals((Object)predicate20));
      assertFalse(predicate3.equals((Object)predicate18));
      assertFalse(predicate3.equals((Object)predicate15));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate14));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate17.equals((Object)predicate13));
      assertFalse(predicate17.equals((Object)predicate11));
      assertFalse(predicate17.equals((Object)predicate23));
      assertFalse(predicate17.equals((Object)predicate16));
      assertFalse(predicate17.equals((Object)predicate10));
      assertFalse(predicate17.equals((Object)predicate6));
      assertFalse(predicate17.equals((Object)predicate9));
      assertFalse(predicate17.equals((Object)predicate7));
      assertFalse(predicate17.equals((Object)predicate20));
      assertFalse(predicate17.equals((Object)predicate19));
      assertFalse(predicate19.equals((Object)predicate11));
      assertFalse(predicate19.equals((Object)predicate9));
      assertFalse(predicate19.equals((Object)predicate7));
      assertFalse(predicate19.equals((Object)predicate16));
      assertFalse(predicate19.equals((Object)predicate20));
      assertFalse(predicate19.equals((Object)predicate23));
      assertFalse(predicate19.equals((Object)predicate17));
      assertFalse(predicate19.equals((Object)predicate13));
      assertFalse(predicate19.equals((Object)predicate10));
      assertFalse(predicate19.equals((Object)predicate6));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate19));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate23));
      assertFalse(predicate6.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate16));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate19));
      assertFalse(predicate7.equals((Object)predicate20));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate23));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate17));
      assertFalse(predicate23.equals((Object)predicate17));
      assertFalse(predicate23.equals((Object)predicate9));
      assertFalse(predicate23.equals((Object)predicate6));
      assertFalse(predicate23.equals((Object)predicate13));
      assertFalse(predicate23.equals((Object)predicate10));
      assertFalse(predicate23.equals((Object)predicate20));
      assertFalse(predicate23.equals((Object)predicate11));
      assertFalse(predicate23.equals((Object)predicate7));
      assertFalse(predicate23.equals((Object)predicate19));
      assertFalse(predicate23.equals((Object)predicate16));
      assertFalse(predicate24.equals((Object)predicate9));
      assertFalse(predicate24.equals((Object)predicate17));
      assertFalse(predicate24.equals((Object)predicate16));
      assertFalse(predicate24.equals((Object)predicate11));
      assertFalse(predicate24.equals((Object)predicate19));
      assertFalse(predicate24.equals((Object)predicate20));
      assertFalse(predicate24.equals((Object)predicate23));
      assertFalse(predicate24.equals((Object)predicate7));
      assertFalse(predicate24.equals((Object)predicate10));
      assertFalse(predicate24.equals((Object)predicate13));
      assertFalse(predicate24.equals((Object)predicate6));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate14);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate15);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate14);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate16, predicate7);
      assertNotSame(predicate16, predicate13);
      assertNotSame(predicate16, predicate17);
      assertNotSame(predicate16, predicate11);
      assertNotSame(predicate16, predicate20);
      assertNotSame(predicate3, predicate15);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate14);
      assertNotSame(predicate17, predicate13);
      assertNotSame(predicate17, predicate11);
      assertNotSame(predicate17, predicate16);
      assertNotSame(predicate17, predicate7);
      assertNotSame(predicate17, predicate20);
      assertNotSame(predicate19, predicate24);
      assertNotSame(predicate19, predicate9);
      assertNotSame(predicate19, predicate23);
      assertNotSame(predicate7, predicate16);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate7, predicate13);
      assertNotSame(predicate7, predicate20);
      assertNotSame(predicate7, predicate17);
      assertNotSame(predicate23, predicate9);
      assertNotSame(predicate23, predicate24);
      assertNotSame(predicate23, predicate19);
      assertNotSame(predicate24, predicate9);
      assertNotSame(predicate24, predicate19);
      assertNotSame(predicate24, predicate23);
      
      boolean boolean0 = predicate19.test(predicate16);
      assertFalse(boolean0);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate23));
      assertFalse(predicate16.equals((Object)predicate7));
      assertFalse(predicate16.equals((Object)predicate10));
      assertFalse(predicate16.equals((Object)predicate13));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate24));
      assertFalse(predicate16.equals((Object)predicate11));
      assertFalse(predicate16.equals((Object)predicate19));
      assertFalse(predicate16.equals((Object)predicate20));
      assertFalse(predicate3.equals((Object)predicate18));
      assertFalse(predicate3.equals((Object)predicate15));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate14));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate17.equals((Object)predicate13));
      assertFalse(predicate17.equals((Object)predicate11));
      assertFalse(predicate17.equals((Object)predicate24));
      assertFalse(predicate17.equals((Object)predicate23));
      assertFalse(predicate17.equals((Object)predicate16));
      assertFalse(predicate17.equals((Object)predicate10));
      assertFalse(predicate17.equals((Object)predicate6));
      assertFalse(predicate17.equals((Object)predicate9));
      assertFalse(predicate17.equals((Object)predicate7));
      assertFalse(predicate17.equals((Object)predicate20));
      assertFalse(predicate17.equals((Object)predicate19));
      assertFalse(predicate19.equals((Object)predicate11));
      assertFalse(predicate19.equals((Object)predicate24));
      assertFalse(predicate19.equals((Object)predicate9));
      assertFalse(predicate19.equals((Object)predicate7));
      assertFalse(predicate19.equals((Object)predicate16));
      assertFalse(predicate19.equals((Object)predicate20));
      assertFalse(predicate19.equals((Object)predicate23));
      assertFalse(predicate19.equals((Object)predicate17));
      assertFalse(predicate19.equals((Object)predicate13));
      assertFalse(predicate19.equals((Object)predicate10));
      assertFalse(predicate19.equals((Object)predicate6));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate24));
      assertFalse(predicate6.equals((Object)predicate19));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate23));
      assertFalse(predicate6.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate16));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate24));
      assertFalse(predicate7.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate19));
      assertFalse(predicate7.equals((Object)predicate20));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate23));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate17));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate14);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate15);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate14);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate16, predicate7);
      assertNotSame(predicate16, predicate13);
      assertNotSame(predicate16, predicate17);
      assertNotSame(predicate16, predicate11);
      assertNotSame(predicate16, predicate20);
      assertNotSame(predicate3, predicate15);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate14);
      assertNotSame(predicate17, predicate13);
      assertNotSame(predicate17, predicate11);
      assertNotSame(predicate17, predicate16);
      assertNotSame(predicate17, predicate7);
      assertNotSame(predicate17, predicate20);
      assertNotSame(predicate19, predicate24);
      assertNotSame(predicate19, predicate9);
      assertNotSame(predicate19, predicate23);
      assertNotSame(predicate7, predicate16);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate7, predicate13);
      assertNotSame(predicate7, predicate20);
      assertNotSame(predicate7, predicate17);
      
      Predicate<Object> predicate25 = predicate20.negate();
      assertNotNull(predicate25);
      assertFalse(predicate25.equals((Object)predicate13));
      assertFalse(predicate25.equals((Object)predicate20));
      assertFalse(predicate25.equals((Object)predicate17));
      assertFalse(predicate25.equals((Object)predicate7));
      assertFalse(predicate25.equals((Object)predicate19));
      assertFalse(predicate25.equals((Object)predicate9));
      assertFalse(predicate25.equals((Object)predicate6));
      assertFalse(predicate25.equals((Object)predicate11));
      assertFalse(predicate25.equals((Object)predicate24));
      assertFalse(predicate25.equals((Object)predicate16));
      assertFalse(predicate25.equals((Object)predicate23));
      assertFalse(predicate25.equals((Object)predicate10));
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate23));
      assertFalse(predicate16.equals((Object)predicate7));
      assertFalse(predicate16.equals((Object)predicate10));
      assertFalse(predicate16.equals((Object)predicate13));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate24));
      assertFalse(predicate16.equals((Object)predicate11));
      assertFalse(predicate16.equals((Object)predicate19));
      assertFalse(predicate16.equals((Object)predicate20));
      assertFalse(predicate3.equals((Object)predicate18));
      assertFalse(predicate3.equals((Object)predicate15));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate14));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate20.equals((Object)predicate23));
      assertFalse(predicate20.equals((Object)predicate10));
      assertFalse(predicate20.equals((Object)predicate17));
      assertFalse(predicate20.equals((Object)predicate7));
      assertFalse(predicate20.equals((Object)predicate13));
      assertFalse(predicate20.equals((Object)predicate9));
      assertFalse(predicate20.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate11));
      assertFalse(predicate20.equals((Object)predicate24));
      assertFalse(predicate20.equals((Object)predicate19));
      assertFalse(predicate20.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate24));
      assertFalse(predicate6.equals((Object)predicate19));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate23));
      assertFalse(predicate6.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate16));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate24));
      assertFalse(predicate7.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate19));
      assertFalse(predicate7.equals((Object)predicate20));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate23));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate17));
      assertNotSame(predicate25, predicate13);
      assertNotSame(predicate25, predicate17);
      assertNotSame(predicate25, predicate20);
      assertNotSame(predicate25, predicate7);
      assertNotSame(predicate25, predicate11);
      assertNotSame(predicate25, predicate16);
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate14);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate15);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate14);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate16, predicate7);
      assertNotSame(predicate16, predicate25);
      assertNotSame(predicate16, predicate13);
      assertNotSame(predicate16, predicate17);
      assertNotSame(predicate16, predicate11);
      assertNotSame(predicate16, predicate20);
      assertNotSame(predicate3, predicate15);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate14);
      assertNotSame(predicate20, predicate25);
      assertNotSame(predicate20, predicate17);
      assertNotSame(predicate20, predicate7);
      assertNotSame(predicate20, predicate13);
      assertNotSame(predicate20, predicate11);
      assertNotSame(predicate20, predicate16);
      assertNotSame(predicate7, predicate16);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate7, predicate13);
      assertNotSame(predicate7, predicate20);
      assertNotSame(predicate7, predicate25);
      assertNotSame(predicate7, predicate17);
      
      Predicate<Object> predicate26 = predicate20.negate();
      assertNotNull(predicate26);
      assertFalse(predicate26.equals((Object)predicate23));
      assertFalse(predicate26.equals((Object)predicate11));
      assertFalse(predicate26.equals((Object)predicate10));
      assertFalse(predicate26.equals((Object)predicate7));
      assertFalse(predicate26.equals((Object)predicate6));
      assertFalse(predicate26.equals((Object)predicate9));
      assertFalse(predicate26.equals((Object)predicate17));
      assertFalse(predicate26.equals((Object)predicate16));
      assertFalse(predicate26.equals((Object)predicate24));
      assertFalse(predicate26.equals((Object)predicate20));
      assertFalse(predicate26.equals((Object)predicate19));
      assertFalse(predicate26.equals((Object)predicate25));
      assertFalse(predicate26.equals((Object)predicate13));
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate23));
      assertFalse(predicate16.equals((Object)predicate7));
      assertFalse(predicate16.equals((Object)predicate25));
      assertFalse(predicate16.equals((Object)predicate10));
      assertFalse(predicate16.equals((Object)predicate13));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate24));
      assertFalse(predicate16.equals((Object)predicate11));
      assertFalse(predicate16.equals((Object)predicate19));
      assertFalse(predicate16.equals((Object)predicate20));
      assertFalse(predicate3.equals((Object)predicate18));
      assertFalse(predicate3.equals((Object)predicate15));
      assertFalse(predicate3.equals((Object)predicate8));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate14));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate20.equals((Object)predicate25));
      assertFalse(predicate20.equals((Object)predicate23));
      assertFalse(predicate20.equals((Object)predicate10));
      assertFalse(predicate20.equals((Object)predicate17));
      assertFalse(predicate20.equals((Object)predicate7));
      assertFalse(predicate20.equals((Object)predicate13));
      assertFalse(predicate20.equals((Object)predicate9));
      assertFalse(predicate20.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate11));
      assertFalse(predicate20.equals((Object)predicate24));
      assertFalse(predicate20.equals((Object)predicate19));
      assertFalse(predicate20.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate24));
      assertFalse(predicate6.equals((Object)predicate19));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate23));
      assertFalse(predicate6.equals((Object)predicate25));
      assertFalse(predicate6.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate16));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate24));
      assertFalse(predicate7.equals((Object)predicate19));
      assertFalse(predicate7.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate20));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate23));
      assertFalse(predicate7.equals((Object)predicate25));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate17));
      assertNotSame(predicate26, predicate17);
      assertNotSame(predicate26, predicate16);
      assertNotSame(predicate26, predicate11);
      assertNotSame(predicate26, predicate20);
      assertNotSame(predicate26, predicate25);
      assertNotSame(predicate26, predicate7);
      assertNotSame(predicate26, predicate13);
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate14);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate15);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate2, predicate14);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate16, predicate7);
      assertNotSame(predicate16, predicate25);
      assertNotSame(predicate16, predicate13);
      assertNotSame(predicate16, predicate26);
      assertNotSame(predicate16, predicate17);
      assertNotSame(predicate16, predicate11);
      assertNotSame(predicate16, predicate20);
      assertNotSame(predicate3, predicate15);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate14);
      assertNotSame(predicate20, predicate25);
      assertNotSame(predicate20, predicate17);
      assertNotSame(predicate20, predicate7);
      assertNotSame(predicate20, predicate13);
      assertNotSame(predicate20, predicate26);
      assertNotSame(predicate20, predicate11);
      assertNotSame(predicate20, predicate16);
      assertNotSame(predicate7, predicate16);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate7, predicate13);
      assertNotSame(predicate7, predicate20);
      assertNotSame(predicate7, predicate26);
      assertNotSame(predicate7, predicate25);
      assertNotSame(predicate7, predicate17);
      
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<byte[][]> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      Predicate<byte[][]> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate2 = Predicate.isEqual((Object) subject0);
      assertNotNull(predicate2);
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotSame(predicate2, predicate0);
      
      Predicate<byte[][]> predicate3 = predicate0.negate();
      assertNotNull(predicate3);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate3, predicate1);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Predicate<FBBlobField> predicate4 = Predicate.isEqual(object1);
      assertNotNull(predicate4);
      assertFalse(object1.equals((Object)object0));
      assertNotSame(object1, object0);
      
      Predicate<byte[][]> predicate5 = predicate3.and(predicate1);
      assertNotNull(predicate5);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate3));
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate3, predicate1);
      
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate1);
      assertNotNull(predicate6);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate1, predicate3);
      
      Predicate<Object> predicate7 = predicate6.negate();
      assertNotNull(predicate7);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate6));
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate1, predicate3);
      
      Predicate<Object> predicate8 = predicate6.and(predicate7);
      assertNotNull(predicate8);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate6));
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate1, predicate3);
      
      Predicate<Object> predicate9 = predicate8.or(predicate7);
      assertNotNull(predicate9);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate7));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate8));
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate1, predicate3);
      
      Predicate<byte[][]> predicate10 = predicate5.and(predicate9);
      assertNotNull(predicate10);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate9));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate7));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate8));
      assertFalse(predicate10.equals((Object)predicate0));
      assertFalse(predicate10.equals((Object)predicate3));
      assertFalse(predicate10.equals((Object)predicate1));
      assertFalse(predicate10.equals((Object)predicate5));
      assertFalse(predicate10.equals((Object)predicate2));
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate5, predicate10);
      assertNotSame(predicate10, predicate5);
      
      Predicate<Object> predicate11 = predicate7.negate();
      assertNotNull(predicate11);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate11.equals((Object)predicate7));
      assertFalse(predicate11.equals((Object)predicate9));
      assertFalse(predicate11.equals((Object)predicate6));
      assertFalse(predicate11.equals((Object)predicate8));
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate11, predicate7);
      
      Predicate<byte[][]> predicate12 = predicate5.negate();
      assertNotNull(predicate12);
      assertFalse(predicate12.equals((Object)predicate10));
      assertFalse(predicate12.equals((Object)predicate5));
      assertFalse(predicate12.equals((Object)predicate1));
      assertFalse(predicate12.equals((Object)predicate3));
      assertFalse(predicate12.equals((Object)predicate0));
      assertFalse(predicate12.equals((Object)predicate2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate10));
      assertNotSame(predicate12, predicate1);
      assertNotSame(predicate12, predicate3);
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate3, predicate12);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate5, predicate10);
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Predicate<byte[][]> predicate13 = predicate5.negate();
      assertNotNull(predicate13);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate12));
      assertFalse(predicate13.equals((Object)predicate10));
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate10));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate13, predicate12);
      assertNotSame(predicate13, predicate1);
      assertNotSame(predicate13, predicate3);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate3, predicate12);
      assertNotSame(predicate3, predicate13);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate5, predicate10);
      
      Predicate<Object> predicate14 = predicate7.negate();
      assertNotNull(predicate14);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate11));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate14, predicate7);
      assertNotSame(predicate14, predicate11);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate7, predicate14);
      assertNotSame(predicate7, predicate11);
      
      Predicate<Object> predicate15 = predicate7.negate();
      assertNotNull(predicate15);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate15.equals((Object)predicate7));
      assertFalse(predicate15.equals((Object)predicate9));
      assertFalse(predicate15.equals((Object)predicate6));
      assertFalse(predicate15.equals((Object)predicate14));
      assertFalse(predicate15.equals((Object)predicate8));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate14));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate11));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate15, predicate7);
      assertNotSame(predicate15, predicate14);
      assertNotSame(predicate15, predicate11);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate7, predicate15);
      assertNotSame(predicate7, predicate14);
      assertNotSame(predicate7, predicate11);
      
      Predicate<byte[][]> predicate16 = predicate5.and(predicate0);
      assertNotNull(predicate16);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate16.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate16.equals((Object)predicate12));
      assertFalse(predicate16.equals((Object)predicate10));
      assertFalse(predicate16.equals((Object)predicate2));
      assertFalse(predicate16.equals((Object)predicate3));
      assertFalse(predicate16.equals((Object)predicate13));
      assertFalse(predicate16.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate13));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate13));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate10));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate16, predicate5);
      assertNotSame(predicate16, predicate10);
      assertNotSame(predicate3, predicate12);
      assertNotSame(predicate3, predicate13);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate5, predicate16);
      assertNotSame(predicate5, predicate10);
      
      Predicate<Object> predicate17 = predicate14.and(predicate15);
      assertNotNull(predicate17);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate15));
      assertFalse(predicate14.equals((Object)predicate11));
      assertFalse(predicate15.equals((Object)predicate7));
      assertFalse(predicate15.equals((Object)predicate9));
      assertFalse(predicate15.equals((Object)predicate6));
      assertFalse(predicate15.equals((Object)predicate14));
      assertFalse(predicate15.equals((Object)predicate8));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate17.equals((Object)predicate14));
      assertFalse(predicate17.equals((Object)predicate6));
      assertFalse(predicate17.equals((Object)predicate11));
      assertFalse(predicate17.equals((Object)predicate9));
      assertFalse(predicate17.equals((Object)predicate15));
      assertFalse(predicate17.equals((Object)predicate7));
      assertFalse(predicate17.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate15));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate14));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate11));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate14, predicate7);
      assertNotSame(predicate14, predicate11);
      assertNotSame(predicate14, predicate15);
      assertNotSame(predicate15, predicate7);
      assertNotSame(predicate15, predicate14);
      assertNotSame(predicate15, predicate11);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate17, predicate8);
      assertNotSame(predicate7, predicate15);
      assertNotSame(predicate7, predicate14);
      assertNotSame(predicate7, predicate11);
      
      Predicate<FBCachedBlobField> predicate18 = Predicate.isEqual((Object) predicate17);
      assertNotNull(predicate18);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate17));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate15));
      assertFalse(predicate14.equals((Object)predicate11));
      assertFalse(predicate15.equals((Object)predicate7));
      assertFalse(predicate15.equals((Object)predicate9));
      assertFalse(predicate15.equals((Object)predicate17));
      assertFalse(predicate15.equals((Object)predicate6));
      assertFalse(predicate15.equals((Object)predicate14));
      assertFalse(predicate15.equals((Object)predicate8));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate17.equals((Object)predicate14));
      assertFalse(predicate17.equals((Object)predicate6));
      assertFalse(predicate17.equals((Object)predicate11));
      assertFalse(predicate17.equals((Object)predicate9));
      assertFalse(predicate17.equals((Object)predicate15));
      assertFalse(predicate17.equals((Object)predicate7));
      assertFalse(predicate17.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate15));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate14));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate17));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate14, predicate7);
      assertNotSame(predicate14, predicate11);
      assertNotSame(predicate14, predicate15);
      assertNotSame(predicate15, predicate7);
      assertNotSame(predicate15, predicate14);
      assertNotSame(predicate15, predicate11);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate17, predicate8);
      assertNotSame(predicate7, predicate15);
      assertNotSame(predicate7, predicate14);
      assertNotSame(predicate7, predicate11);
      
      Predicate<Delayed> predicate19 = Predicate.isEqual((Object) predicate12);
      assertNotNull(predicate19);
      assertFalse(predicate12.equals((Object)predicate10));
      assertFalse(predicate12.equals((Object)predicate5));
      assertFalse(predicate12.equals((Object)predicate16));
      assertFalse(predicate12.equals((Object)predicate1));
      assertFalse(predicate12.equals((Object)predicate3));
      assertFalse(predicate12.equals((Object)predicate0));
      assertFalse(predicate12.equals((Object)predicate2));
      assertFalse(predicate12.equals((Object)predicate13));
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate13));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate16));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate13));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate10));
      assertNotSame(predicate12, predicate1);
      assertNotSame(predicate12, predicate3);
      assertNotSame(predicate12, predicate13);
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate3, predicate12);
      assertNotSame(predicate3, predicate13);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate5, predicate16);
      assertNotSame(predicate5, predicate10);
      
      Predicate<Object> predicate20 = predicate15.and(predicate17);
      assertNotNull(predicate20);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate17));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate15));
      assertFalse(predicate14.equals((Object)predicate11));
      assertFalse(predicate15.equals((Object)predicate7));
      assertFalse(predicate15.equals((Object)predicate9));
      assertFalse(predicate15.equals((Object)predicate17));
      assertFalse(predicate15.equals((Object)predicate6));
      assertFalse(predicate15.equals((Object)predicate14));
      assertFalse(predicate15.equals((Object)predicate8));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate17.equals((Object)predicate14));
      assertFalse(predicate17.equals((Object)predicate6));
      assertFalse(predicate17.equals((Object)predicate11));
      assertFalse(predicate17.equals((Object)predicate9));
      assertFalse(predicate17.equals((Object)predicate15));
      assertFalse(predicate17.equals((Object)predicate7));
      assertFalse(predicate17.equals((Object)predicate8));
      assertFalse(predicate20.equals((Object)predicate17));
      assertFalse(predicate20.equals((Object)predicate9));
      assertFalse(predicate20.equals((Object)predicate14));
      assertFalse(predicate20.equals((Object)predicate7));
      assertFalse(predicate20.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate8));
      assertFalse(predicate20.equals((Object)predicate11));
      assertFalse(predicate20.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate15));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate14));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate17));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate14, predicate7);
      assertNotSame(predicate14, predicate11);
      assertNotSame(predicate14, predicate15);
      assertNotSame(predicate15, predicate7);
      assertNotSame(predicate15, predicate14);
      assertNotSame(predicate15, predicate11);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate17, predicate8);
      assertNotSame(predicate17, predicate20);
      assertNotSame(predicate20, predicate17);
      assertNotSame(predicate20, predicate8);
      assertNotSame(predicate7, predicate15);
      assertNotSame(predicate7, predicate14);
      assertNotSame(predicate7, predicate11);
      
      Predicate<Object> predicate21 = predicate14.negate();
      assertNotNull(predicate21);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate17));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate20));
      assertFalse(predicate14.equals((Object)predicate15));
      assertFalse(predicate14.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate21.equals((Object)predicate7));
      assertFalse(predicate21.equals((Object)predicate6));
      assertFalse(predicate21.equals((Object)predicate20));
      assertFalse(predicate21.equals((Object)predicate14));
      assertFalse(predicate21.equals((Object)predicate8));
      assertFalse(predicate21.equals((Object)predicate17));
      assertFalse(predicate21.equals((Object)predicate15));
      assertFalse(predicate21.equals((Object)predicate9));
      assertFalse(predicate21.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate15));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate14));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate17));
      assertFalse(predicate7.equals((Object)predicate20));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate14, predicate7);
      assertNotSame(predicate14, predicate11);
      assertNotSame(predicate14, predicate15);
      assertNotSame(predicate14, predicate21);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate21, predicate7);
      assertNotSame(predicate21, predicate14);
      assertNotSame(predicate21, predicate15);
      assertNotSame(predicate21, predicate11);
      assertNotSame(predicate7, predicate15);
      assertNotSame(predicate7, predicate21);
      assertNotSame(predicate7, predicate14);
      assertNotSame(predicate7, predicate11);
      
      Predicate<Object> predicate22 = predicate21.and(predicate20);
      assertNotNull(predicate22);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate17));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate20));
      assertFalse(predicate14.equals((Object)predicate15));
      assertFalse(predicate14.equals((Object)predicate11));
      assertFalse(predicate14.equals((Object)predicate21));
      assertFalse(predicate15.equals((Object)predicate7));
      assertFalse(predicate15.equals((Object)predicate9));
      assertFalse(predicate15.equals((Object)predicate17));
      assertFalse(predicate15.equals((Object)predicate6));
      assertFalse(predicate15.equals((Object)predicate14));
      assertFalse(predicate15.equals((Object)predicate8));
      assertFalse(predicate15.equals((Object)predicate20));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate15.equals((Object)predicate21));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate17.equals((Object)predicate14));
      assertFalse(predicate17.equals((Object)predicate6));
      assertFalse(predicate17.equals((Object)predicate11));
      assertFalse(predicate17.equals((Object)predicate21));
      assertFalse(predicate17.equals((Object)predicate9));
      assertFalse(predicate17.equals((Object)predicate15));
      assertFalse(predicate17.equals((Object)predicate7));
      assertFalse(predicate17.equals((Object)predicate8));
      assertFalse(predicate17.equals((Object)predicate20));
      assertFalse(predicate20.equals((Object)predicate17));
      assertFalse(predicate20.equals((Object)predicate9));
      assertFalse(predicate20.equals((Object)predicate14));
      assertFalse(predicate20.equals((Object)predicate7));
      assertFalse(predicate20.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate8));
      assertFalse(predicate20.equals((Object)predicate11));
      assertFalse(predicate20.equals((Object)predicate15));
      assertFalse(predicate20.equals((Object)predicate21));
      assertFalse(predicate21.equals((Object)predicate7));
      assertFalse(predicate21.equals((Object)predicate6));
      assertFalse(predicate21.equals((Object)predicate20));
      assertFalse(predicate21.equals((Object)predicate14));
      assertFalse(predicate21.equals((Object)predicate8));
      assertFalse(predicate21.equals((Object)predicate17));
      assertFalse(predicate21.equals((Object)predicate15));
      assertFalse(predicate21.equals((Object)predicate9));
      assertFalse(predicate21.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate21));
      assertFalse(predicate22.equals((Object)predicate15));
      assertFalse(predicate22.equals((Object)predicate7));
      assertFalse(predicate22.equals((Object)predicate17));
      assertFalse(predicate22.equals((Object)predicate9));
      assertFalse(predicate22.equals((Object)predicate14));
      assertFalse(predicate22.equals((Object)predicate6));
      assertFalse(predicate22.equals((Object)predicate20));
      assertFalse(predicate22.equals((Object)predicate8));
      assertFalse(predicate22.equals((Object)predicate21));
      assertFalse(predicate22.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate15));
      assertFalse(predicate7.equals((Object)predicate21));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate14));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate17));
      assertFalse(predicate7.equals((Object)predicate20));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate14, predicate7);
      assertNotSame(predicate14, predicate11);
      assertNotSame(predicate14, predicate15);
      assertNotSame(predicate14, predicate21);
      assertNotSame(predicate15, predicate7);
      assertNotSame(predicate15, predicate14);
      assertNotSame(predicate15, predicate11);
      assertNotSame(predicate15, predicate21);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate17, predicate22);
      assertNotSame(predicate17, predicate8);
      assertNotSame(predicate17, predicate20);
      assertNotSame(predicate20, predicate17);
      assertNotSame(predicate20, predicate22);
      assertNotSame(predicate20, predicate8);
      assertNotSame(predicate21, predicate7);
      assertNotSame(predicate21, predicate14);
      assertNotSame(predicate21, predicate15);
      assertNotSame(predicate21, predicate11);
      assertNotSame(predicate22, predicate17);
      assertNotSame(predicate22, predicate20);
      assertNotSame(predicate22, predicate8);
      assertNotSame(predicate7, predicate15);
      assertNotSame(predicate7, predicate21);
      assertNotSame(predicate7, predicate14);
      assertNotSame(predicate7, predicate11);
      
      boolean boolean0 = predicate17.test(predicate14);
      assertFalse(boolean0);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate22));
      assertFalse(predicate14.equals((Object)predicate17));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate20));
      assertFalse(predicate14.equals((Object)predicate15));
      assertFalse(predicate14.equals((Object)predicate11));
      assertFalse(predicate14.equals((Object)predicate21));
      assertFalse(predicate15.equals((Object)predicate7));
      assertFalse(predicate15.equals((Object)predicate9));
      assertFalse(predicate15.equals((Object)predicate22));
      assertFalse(predicate15.equals((Object)predicate17));
      assertFalse(predicate15.equals((Object)predicate6));
      assertFalse(predicate15.equals((Object)predicate14));
      assertFalse(predicate15.equals((Object)predicate8));
      assertFalse(predicate15.equals((Object)predicate20));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate15.equals((Object)predicate21));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate17.equals((Object)predicate14));
      assertFalse(predicate17.equals((Object)predicate6));
      assertFalse(predicate17.equals((Object)predicate11));
      assertFalse(predicate17.equals((Object)predicate21));
      assertFalse(predicate17.equals((Object)predicate9));
      assertFalse(predicate17.equals((Object)predicate15));
      assertFalse(predicate17.equals((Object)predicate22));
      assertFalse(predicate17.equals((Object)predicate7));
      assertFalse(predicate17.equals((Object)predicate8));
      assertFalse(predicate17.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate22));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate21));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate15));
      assertFalse(predicate7.equals((Object)predicate22));
      assertFalse(predicate7.equals((Object)predicate21));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate14));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate17));
      assertFalse(predicate7.equals((Object)predicate20));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate14, predicate7);
      assertNotSame(predicate14, predicate11);
      assertNotSame(predicate14, predicate15);
      assertNotSame(predicate14, predicate21);
      assertNotSame(predicate15, predicate7);
      assertNotSame(predicate15, predicate14);
      assertNotSame(predicate15, predicate11);
      assertNotSame(predicate15, predicate21);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate17, predicate22);
      assertNotSame(predicate17, predicate8);
      assertNotSame(predicate17, predicate20);
      assertNotSame(predicate7, predicate15);
      assertNotSame(predicate7, predicate21);
      assertNotSame(predicate7, predicate14);
      assertNotSame(predicate7, predicate11);
      
      Predicate<Object> predicate23 = predicate15.negate();
      assertNotNull(predicate23);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate15.equals((Object)predicate7));
      assertFalse(predicate15.equals((Object)predicate9));
      assertFalse(predicate15.equals((Object)predicate22));
      assertFalse(predicate15.equals((Object)predicate17));
      assertFalse(predicate15.equals((Object)predicate6));
      assertFalse(predicate15.equals((Object)predicate14));
      assertFalse(predicate15.equals((Object)predicate8));
      assertFalse(predicate15.equals((Object)predicate20));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate15.equals((Object)predicate21));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate22));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate21));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate15));
      assertFalse(predicate7.equals((Object)predicate22));
      assertFalse(predicate7.equals((Object)predicate21));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate14));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate17));
      assertFalse(predicate7.equals((Object)predicate20));
      assertFalse(predicate23.equals((Object)predicate8));
      assertFalse(predicate23.equals((Object)predicate7));
      assertFalse(predicate23.equals((Object)predicate14));
      assertFalse(predicate23.equals((Object)predicate6));
      assertFalse(predicate23.equals((Object)predicate17));
      assertFalse(predicate23.equals((Object)predicate21));
      assertFalse(predicate23.equals((Object)predicate9));
      assertFalse(predicate23.equals((Object)predicate15));
      assertFalse(predicate23.equals((Object)predicate22));
      assertFalse(predicate23.equals((Object)predicate11));
      assertFalse(predicate23.equals((Object)predicate20));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate15, predicate7);
      assertNotSame(predicate15, predicate14);
      assertNotSame(predicate15, predicate23);
      assertNotSame(predicate15, predicate11);
      assertNotSame(predicate15, predicate21);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate7, predicate15);
      assertNotSame(predicate7, predicate21);
      assertNotSame(predicate7, predicate23);
      assertNotSame(predicate7, predicate14);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate23, predicate7);
      assertNotSame(predicate23, predicate14);
      assertNotSame(predicate23, predicate21);
      assertNotSame(predicate23, predicate15);
      assertNotSame(predicate23, predicate11);
      
      Predicate<Object> predicate24 = predicate21.and(predicate20);
      assertNotNull(predicate24);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate22));
      assertFalse(predicate14.equals((Object)predicate17));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate23));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate20));
      assertFalse(predicate14.equals((Object)predicate15));
      assertFalse(predicate14.equals((Object)predicate11));
      assertFalse(predicate14.equals((Object)predicate21));
      assertFalse(predicate15.equals((Object)predicate7));
      assertFalse(predicate15.equals((Object)predicate9));
      assertFalse(predicate15.equals((Object)predicate22));
      assertFalse(predicate15.equals((Object)predicate17));
      assertFalse(predicate15.equals((Object)predicate6));
      assertFalse(predicate15.equals((Object)predicate14));
      assertFalse(predicate15.equals((Object)predicate23));
      assertFalse(predicate15.equals((Object)predicate8));
      assertFalse(predicate15.equals((Object)predicate20));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate15.equals((Object)predicate21));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate17.equals((Object)predicate14));
      assertFalse(predicate17.equals((Object)predicate6));
      assertFalse(predicate17.equals((Object)predicate11));
      assertFalse(predicate17.equals((Object)predicate21));
      assertFalse(predicate17.equals((Object)predicate9));
      assertFalse(predicate17.equals((Object)predicate15));
      assertFalse(predicate17.equals((Object)predicate22));
      assertFalse(predicate17.equals((Object)predicate7));
      assertFalse(predicate17.equals((Object)predicate23));
      assertFalse(predicate17.equals((Object)predicate8));
      assertFalse(predicate17.equals((Object)predicate20));
      assertFalse(predicate20.equals((Object)predicate17));
      assertFalse(predicate20.equals((Object)predicate9));
      assertFalse(predicate20.equals((Object)predicate22));
      assertFalse(predicate20.equals((Object)predicate14));
      assertFalse(predicate20.equals((Object)predicate7));
      assertFalse(predicate20.equals((Object)predicate23));
      assertFalse(predicate20.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate8));
      assertFalse(predicate20.equals((Object)predicate11));
      assertFalse(predicate20.equals((Object)predicate15));
      assertFalse(predicate20.equals((Object)predicate21));
      assertFalse(predicate21.equals((Object)predicate7));
      assertFalse(predicate21.equals((Object)predicate6));
      assertFalse(predicate21.equals((Object)predicate20));
      assertFalse(predicate21.equals((Object)predicate14));
      assertFalse(predicate21.equals((Object)predicate8));
      assertFalse(predicate21.equals((Object)predicate17));
      assertFalse(predicate21.equals((Object)predicate23));
      assertFalse(predicate21.equals((Object)predicate15));
      assertFalse(predicate21.equals((Object)predicate9));
      assertFalse(predicate21.equals((Object)predicate22));
      assertFalse(predicate21.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate22));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate23));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate21));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate15));
      assertFalse(predicate7.equals((Object)predicate22));
      assertFalse(predicate7.equals((Object)predicate21));
      assertFalse(predicate7.equals((Object)predicate23));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate14));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate17));
      assertFalse(predicate7.equals((Object)predicate20));
      assertFalse(predicate24.equals((Object)predicate14));
      assertFalse(predicate24.equals((Object)predicate11));
      assertFalse(predicate24.equals((Object)predicate6));
      assertFalse(predicate24.equals((Object)predicate21));
      assertFalse(predicate24.equals((Object)predicate9));
      assertFalse(predicate24.equals((Object)predicate22));
      assertFalse(predicate24.equals((Object)predicate7));
      assertFalse(predicate24.equals((Object)predicate23));
      assertFalse(predicate24.equals((Object)predicate15));
      assertFalse(predicate24.equals((Object)predicate17));
      assertFalse(predicate24.equals((Object)predicate8));
      assertFalse(predicate24.equals((Object)predicate20));
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate14, predicate7);
      assertNotSame(predicate14, predicate23);
      assertNotSame(predicate14, predicate11);
      assertNotSame(predicate14, predicate15);
      assertNotSame(predicate14, predicate21);
      assertNotSame(predicate15, predicate7);
      assertNotSame(predicate15, predicate14);
      assertNotSame(predicate15, predicate23);
      assertNotSame(predicate15, predicate11);
      assertNotSame(predicate15, predicate21);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate13);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate17, predicate22);
      assertNotSame(predicate17, predicate8);
      assertNotSame(predicate17, predicate20);
      assertNotSame(predicate17, predicate24);
      assertNotSame(predicate20, predicate17);
      assertNotSame(predicate20, predicate22);
      assertNotSame(predicate20, predicate24);
      assertNotSame(predicate20, predicate8);
      assertNotSame(predicate21, predicate7);
      assertNotSame(predicate21, predicate14);
      assertNotSame(predicate21, predicate23);
      assertNotSame(predicate21, predicate15);
      assertNotSame(predicate21, predicate11);
      assertNotSame(predicate7, predicate15);
      assertNotSame(predicate7, predicate21);
      assertNotSame(predicate7, predicate23);
      assertNotSame(predicate7, predicate14);
      assertNotSame(predicate7, predicate11);
      assertNotSame(predicate24, predicate22);
      assertNotSame(predicate24, predicate17);
      assertNotSame(predicate24, predicate8);
      assertNotSame(predicate24, predicate20);
      
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = fBCachedFetcher0.absolute((-1929));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.0069724918931833
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      fBCachedFetcher0.afterLast();
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      // Undeclared exception!
      try { 
        linkedList0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl0);
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      
      org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl1);
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl1.getTransaction();
      assertNull(abstractIscTrHandle0);
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      
      isc_stmt_handle_impl0.registerTransaction((AbstractIscTrHandle) null);
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertNotNull(isc_blob_handle_impl0);
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      assertNotNull(isc_blob_handle_impl1);
      assertFalse(isc_blob_handle_impl1.equals((Object)isc_blob_handle_impl0));
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      
      isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl1.getTr();
      assertNull(isc_tr_handle_impl0);
      assertFalse(isc_blob_handle_impl1.equals((Object)isc_blob_handle_impl0));
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertNotSame(isc_blob_handle_impl1, isc_blob_handle_impl0);
      
      isc_blob_handle_impl0.setTr((isc_tr_handle_impl) null);
      assertFalse(isc_blob_handle_impl0.equals((Object)isc_blob_handle_impl1));
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertNotSame(isc_blob_handle_impl0, isc_blob_handle_impl1);
      
      isc_tr_handle_impl isc_tr_handle_impl1 = isc_blob_handle_impl0.getTr();
      assertNull(isc_tr_handle_impl1);
      assertFalse(isc_blob_handle_impl0.equals((Object)isc_blob_handle_impl1));
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertNotSame(isc_blob_handle_impl0, isc_blob_handle_impl1);
      
      isc_stmt_handle_impl0.registerTransaction((AbstractIscTrHandle) null);
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      
      org.firebirdsql.gds.impl.wire.isc_tr_handle_impl isc_tr_handle_impl2 = new org.firebirdsql.gds.impl.wire.isc_tr_handle_impl();
      assertNotNull(isc_tr_handle_impl2);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, isc_tr_handle_impl2.getState());
      
      isc_tr_handle_impl2.forgetResultSets();
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, isc_tr_handle_impl2.getState());
      
      isc_tr_handle_impl2.registerStatementWithTransaction(isc_stmt_handle_impl1);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_tr_handle_impl2.getState());
      
      isc_tr_handle_impl2.unregisterStatementFromTransaction(isc_stmt_handle_impl1);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_tr_handle_impl2.getState());
      
      AbstractIscTrHandle abstractIscTrHandle1 = isc_stmt_handle_impl0.getTransaction();
      assertNull(abstractIscTrHandle1);
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      
      isc_stmt_handle_impl1.registerTransaction(isc_tr_handle_impl2);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_tr_handle_impl2.getState());
      
      isc_blob_handle_impl isc_blob_handle_impl2 = new isc_blob_handle_impl();
      assertNotNull(isc_blob_handle_impl2);
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl0));
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl1));
      assertEquals(0, isc_blob_handle_impl2.getRblId());
      assertFalse(isc_blob_handle_impl2.isEof());
      assertEquals(0L, isc_blob_handle_impl2.getBlobId());
      
      isc_blob_handle_impl2.setBlobId(2);
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl0));
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl1));
      assertEquals(0, isc_blob_handle_impl2.getRblId());
      assertFalse(isc_blob_handle_impl2.isEof());
      assertEquals(2L, isc_blob_handle_impl2.getBlobId());
      assertNotSame(isc_blob_handle_impl2, isc_blob_handle_impl0);
      assertNotSame(isc_blob_handle_impl2, isc_blob_handle_impl1);
      
      isc_blob_handle_impl2.setTr((isc_tr_handle_impl) null);
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl0));
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl1));
      assertEquals(0, isc_blob_handle_impl2.getRblId());
      assertFalse(isc_blob_handle_impl2.isEof());
      assertEquals(2L, isc_blob_handle_impl2.getBlobId());
      assertNotSame(isc_blob_handle_impl2, isc_blob_handle_impl0);
      assertNotSame(isc_blob_handle_impl2, isc_blob_handle_impl1);
      
      isc_blob_handle_impl2.setTr((isc_tr_handle_impl) null);
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl0));
      assertFalse(isc_blob_handle_impl2.equals((Object)isc_blob_handle_impl1));
      assertEquals(0, isc_blob_handle_impl2.getRblId());
      assertFalse(isc_blob_handle_impl2.isEof());
      assertEquals(2L, isc_blob_handle_impl2.getBlobId());
      assertNotSame(isc_blob_handle_impl2, isc_blob_handle_impl0);
      assertNotSame(isc_blob_handle_impl2, isc_blob_handle_impl1);
      
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl2);
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl0));
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl2.getRsrId());
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      
      isc_stmt_handle_impl isc_stmt_handle_impl3 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl3);
      assertFalse(isc_stmt_handle_impl3.equals((Object)isc_stmt_handle_impl2));
      assertFalse(isc_stmt_handle_impl3.equals((Object)isc_stmt_handle_impl0));
      assertNull(isc_stmt_handle_impl3.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl3.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl3.size());
      assertFalse(isc_stmt_handle_impl3.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl3.isValid());
      assertFalse(isc_stmt_handle_impl3.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl3.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl3.getRsrId());
      assertEquals(0, isc_stmt_handle_impl3.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl3.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl3.getInsertCount());
      assertFalse(isc_stmt_handle_impl3.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl3.getStatementType());
      
      AbstractIscTrHandle abstractIscTrHandle2 = isc_stmt_handle_impl1.getTransaction();
      assertNotNull(abstractIscTrHandle2);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, abstractIscTrHandle2.getState());
      assertSame(abstractIscTrHandle2, isc_tr_handle_impl2);
      
      isc_stmt_handle_impl3.registerTransaction(abstractIscTrHandle2);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertFalse(isc_stmt_handle_impl3.equals((Object)isc_stmt_handle_impl2));
      assertFalse(isc_stmt_handle_impl3.equals((Object)isc_stmt_handle_impl0));
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertNull(isc_stmt_handle_impl3.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl3.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl3.size());
      assertFalse(isc_stmt_handle_impl3.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl3.isValid());
      assertFalse(isc_stmt_handle_impl3.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl3.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl3.getRsrId());
      assertEquals(0, isc_stmt_handle_impl3.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl3.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl3.getInsertCount());
      assertFalse(isc_stmt_handle_impl3.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl3.getStatementType());
      assertEquals(0, abstractIscTrHandle2.getState());
      assertNotSame(isc_stmt_handle_impl3, isc_stmt_handle_impl2);
      assertNotSame(isc_stmt_handle_impl3, isc_stmt_handle_impl0);
      assertSame(abstractIscTrHandle2, isc_tr_handle_impl2);
      
      isc_blob_handle_impl isc_blob_handle_impl3 = new isc_blob_handle_impl();
      assertNotNull(isc_blob_handle_impl3);
      assertFalse(isc_blob_handle_impl3.equals((Object)isc_blob_handle_impl0));
      assertFalse(isc_blob_handle_impl3.equals((Object)isc_blob_handle_impl2));
      assertFalse(isc_blob_handle_impl3.equals((Object)isc_blob_handle_impl1));
      assertEquals(0, isc_blob_handle_impl3.getRblId());
      assertFalse(isc_blob_handle_impl3.isEof());
      assertEquals(0L, isc_blob_handle_impl3.getBlobId());
      
      isc_blob_handle_impl3.setRblId(400);
      assertFalse(isc_blob_handle_impl3.equals((Object)isc_blob_handle_impl0));
      assertFalse(isc_blob_handle_impl3.equals((Object)isc_blob_handle_impl2));
      assertFalse(isc_blob_handle_impl3.equals((Object)isc_blob_handle_impl1));
      assertEquals(400, isc_blob_handle_impl3.getRblId());
      assertFalse(isc_blob_handle_impl3.isEof());
      assertEquals(0L, isc_blob_handle_impl3.getBlobId());
      assertNotSame(isc_blob_handle_impl3, isc_blob_handle_impl0);
      assertNotSame(isc_blob_handle_impl3, isc_blob_handle_impl2);
      assertNotSame(isc_blob_handle_impl3, isc_blob_handle_impl1);
      
      isc_blob_handle_impl3.setBlobId(2);
      assertFalse(isc_blob_handle_impl3.equals((Object)isc_blob_handle_impl0));
      assertFalse(isc_blob_handle_impl3.equals((Object)isc_blob_handle_impl2));
      assertFalse(isc_blob_handle_impl3.equals((Object)isc_blob_handle_impl1));
      assertEquals(400, isc_blob_handle_impl3.getRblId());
      assertFalse(isc_blob_handle_impl3.isEof());
      assertEquals(2L, isc_blob_handle_impl3.getBlobId());
      assertNotSame(isc_blob_handle_impl3, isc_blob_handle_impl0);
      assertNotSame(isc_blob_handle_impl3, isc_blob_handle_impl2);
      assertNotSame(isc_blob_handle_impl3, isc_blob_handle_impl1);
      
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[5][0];
      byteArray0[0] = null;
      byteArray0[1] = null;
      byteArray0[2] = null;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte) (-9);
      byteArray1[2] = (byte) (-33);
      byteArray1[3] = (byte)22;
      byteArray1[4] = (byte) (-128);
      byteArray1[5] = (byte)113;
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte) (-83);
      byteArray1[8] = (byte)45;
      byteArray0[3] = byteArray1;
      byte[] byteArray2 = new byte[3];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-33);
      byteArray2[1] = (byte)113;
      byteArray2[2] = (byte) (-9);
      byteArray0[4] = byteArray2;
      boolean boolean0 = linkedList0.add(byteArray0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(5, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      
      boolean boolean1 = fBCachedFetcher0.isEmpty();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byteArray0));
      
      System.setCurrentTimeMillis(6);
      System.setCurrentTimeMillis(6);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      assertNotNull(delayQueue0);
      
      FBCachedLongVarCharField[] fBCachedLongVarCharFieldArray0 = new FBCachedLongVarCharField[5];
      int int0 = delayQueue0.size();
      assertEquals(0, int0);
      
      FBCachedLongVarCharField fBCachedLongVarCharField0 = mock(FBCachedLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBCachedLongVarCharFieldArray0[0] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[1] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[2] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[3] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[4] = fBCachedLongVarCharField0;
      FBCachedLongVarCharField[] fBCachedLongVarCharFieldArray1 = delayQueue0.toArray(fBCachedLongVarCharFieldArray0);
      assertNotNull(fBCachedLongVarCharFieldArray1);
      assertEquals(5, fBCachedLongVarCharFieldArray0.length);
      assertEquals(5, fBCachedLongVarCharFieldArray1.length);
      assertSame(fBCachedLongVarCharFieldArray0, fBCachedLongVarCharFieldArray1);
      assertSame(fBCachedLongVarCharFieldArray1, fBCachedLongVarCharFieldArray0);
      
      Delayed delayed0 = delayQueue0.poll();
      assertNull(delayed0);
      
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      Callable<byte[][]> callable0 = (Callable<byte[][]>) mock(Callable.class, new ViolatedAssumptionAnswer());
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[8];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[1] = fBBlobField0;
      fBBlobFieldArray0[2] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobField0;
      fBBlobFieldArray0[4] = fBBlobField0;
      fBBlobFieldArray0[5] = fBBlobField0;
      fBBlobFieldArray0[6] = fBBlobField0;
      fBBlobFieldArray0[7] = fBBlobField0;
      FBBlobField[] fBBlobFieldArray1 = linkedList0.toArray(fBBlobFieldArray0);
      assertNotNull(fBBlobFieldArray1);
      assertEquals(0, linkedList0.size());
      assertEquals(8, fBBlobFieldArray1.length);
      assertEquals(8, fBBlobFieldArray0.length);
      assertSame(fBBlobFieldArray1, fBBlobFieldArray0);
      assertSame(fBBlobFieldArray0, fBBlobFieldArray1);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      boolean boolean0 = fBCachedFetcher0.isAfterLast();
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean1 = fBCachedFetcher0.isLast();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      
      Instant instant0 = MockInstant.ofEpochSecond(2453L);
      assertNotNull(instant0);
      
      Timestamp timestamp0 = Timestamp.from(instant0);
      assertNotNull(timestamp0);
      assertEquals("1970-01-01 00:40:53.0", timestamp0.toString());
      assertEquals(0, timestamp0.getNanos());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      byte[] byteArray0 = new byte[23];
      byteArray0[6] = (byte)44;
      byteArray0[4] = (byte) (-6);
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertNotNull(calendar0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de_DE", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)calendar0.getTimeZone();
      assertNotNull(zoneInfo0);
      assertTrue(locale0.equals((Object)locale1));
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotSame(locale0, locale1);
      
      long long0 = calendar0.getTimeInMillis();
      assertEquals(1392409281320L, long0);
      assertTrue(locale0.equals((Object)locale1));
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertNotSame(locale0, locale1);
      
      calendar0.set(0, (-1170), 88, (-497), 110, (int) (byte)0);
      assertTrue(locale0.equals((Object)locale1));
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(calendar0.isLenient());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=0,MONTH=-1170,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=88,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=-497,MINUTE=110,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotSame(locale0, locale1);
      
      Locale locale2 = locale0.stripExtensions();
      assertNotNull(locale2);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale2.equals((Object)locale1));
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale2.getVariant());
      assertEquals("DE", locale2.getCountry());
      assertEquals("de", locale2.getLanguage());
      assertEquals("DEU", locale2.getISO3Country());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de_DE", locale2.toString());
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale2, locale1);
      assertSame(locale2, locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      assertNotNull(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.equals((Object)calendar0));
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      
      mockGregorianCalendar0.set(164, (int) (byte)44, 733, (int) (byte) (-6), 164);
      assertTrue(mockGregorianCalendar0.equals((Object)calendar0));
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=164,MONTH=44,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=733,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=-6,MINUTE=164,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de_DE", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertNotSame(mockGregorianCalendar0, calendar0);
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertNotNull(date0);
      assertTrue(mockGregorianCalendar0.equals((Object)calendar0));
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=164,MONTH=44,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=733,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=-6,MINUTE=164,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de_DE", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertNotSame(mockGregorianCalendar0, calendar0);
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      
      Timestamp timestamp1 = xSQLVAR0.encodeTimestamp(timestamp0, (Calendar) mockGregorianCalendar0, true);
      assertNotNull(timestamp1);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertTrue(mockGregorianCalendar0.equals((Object)calendar0));
      assertTrue(timestamp1.equals((Object)timestamp0));
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=164,MONTH=44,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=733,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=-6,MINUTE=164,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, timestamp1.getNanos());
      assertEquals("1970-01-01 00:40:53.0", timestamp1.toString());
      assertEquals("1970-01-01 00:40:53.0", timestamp0.toString());
      assertEquals(0, timestamp0.getNanos());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de_DE", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertNotSame(mockGregorianCalendar0, calendar0);
      assertNotSame(timestamp1, timestamp0);
      assertNotSame(timestamp0, timestamp1);
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      
      String string0 = locale1.getDisplayLanguage(locale2);
      assertEquals("Deutsch", string0);
      assertNotNull(string0);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      assertTrue(locale2.equals((Object)locale1));
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de_DE", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("DE", locale2.getCountry());
      assertEquals("de", locale2.getLanguage());
      assertEquals("DEU", locale2.getISO3Country());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de_DE", locale2.toString());
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale1);
      assertSame(locale2, locale0);
      
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((List<byte[][]>) null, (FBObjectListener.FetcherListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      
      Instant instant0 = MockInstant.ofEpochSecond(2466L);
      assertNotNull(instant0);
      
      Timestamp timestamp0 = Timestamp.from(instant0);
      assertNotNull(timestamp0);
      assertEquals(0, timestamp0.getNanos());
      assertEquals("1970-01-01 00:41:06.0", timestamp0.toString());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte)44;
      byteArray0[4] = (byte) (-6);
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertNotNull(calendar0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)calendar0.getTimeZone();
      assertNotNull(zoneInfo0);
      assertTrue(locale0.equals((Object)locale1));
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotSame(locale0, locale1);
      
      long long0 = calendar0.getTimeInMillis();
      assertEquals(1392409281320L, long0);
      assertTrue(locale0.equals((Object)locale1));
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotSame(locale0, locale1);
      
      calendar0.set(0, 107, 109, (-497), 110, (int) (byte)0);
      assertTrue(locale0.equals((Object)locale1));
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=0,MONTH=107,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=109,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=-497,MINUTE=110,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotSame(locale0, locale1);
      
      Locale locale2 = locale0.stripExtensions();
      assertNotNull(locale2);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale2.equals((Object)locale1));
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("DE", locale2.getCountry());
      assertEquals("de", locale2.getLanguage());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("DEU", locale2.getISO3Country());
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale2, locale1);
      assertSame(locale2, locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      assertNotNull(mockGregorianCalendar0);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      assertTrue(mockGregorianCalendar0.equals((Object)calendar0));
      
      mockGregorianCalendar0.set(164, (int) (byte)44, 733, (int) (byte) (-6), 164);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      assertTrue(mockGregorianCalendar0.equals((Object)calendar0));
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=164,MONTH=44,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=733,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=-6,MINUTE=164,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(mockGregorianCalendar0, calendar0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertNotNull(date0);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      assertTrue(mockGregorianCalendar0.equals((Object)calendar0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=164,MONTH=44,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=733,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=-6,MINUTE=164,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(mockGregorianCalendar0, calendar0);
      
      Timestamp timestamp1 = xSQLVAR0.encodeTimestamp(timestamp0, (Calendar) mockGregorianCalendar0, true);
      assertNotNull(timestamp1);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertTrue(timestamp1.equals((Object)timestamp0));
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      assertTrue(mockGregorianCalendar0.equals((Object)calendar0));
      assertEquals(0, timestamp1.getNanos());
      assertEquals("1970-01-01 00:41:06.0", timestamp1.toString());
      assertEquals(0, timestamp0.getNanos());
      assertEquals("1970-01-01 00:41:06.0", timestamp0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=164,MONTH=44,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=733,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=-6,MINUTE=164,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotSame(timestamp1, timestamp0);
      assertNotSame(timestamp0, timestamp1);
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(mockGregorianCalendar0, calendar0);
      
      String string0 = locale1.getDisplayLanguage(locale2);
      assertEquals("Deutsch", string0);
      assertNotNull(string0);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      assertTrue(locale2.equals((Object)locale1));
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("de_DE", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("DE", locale2.getCountry());
      assertEquals("de", locale2.getLanguage());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("DEU", locale2.getISO3Country());
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale1);
      assertSame(locale2, locale0);
      
      Timestamp timestamp2 = (Timestamp)timestamp1.clone();
      assertNotNull(timestamp2);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertTrue(timestamp1.equals((Object)timestamp0));
      assertTrue(timestamp0.equals((Object)timestamp1));
      assertTrue(timestamp2.equals((Object)timestamp0));
      assertTrue(timestamp2.equals((Object)timestamp1));
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      assertTrue(mockGregorianCalendar0.equals((Object)calendar0));
      assertEquals(0, timestamp1.getNanos());
      assertEquals("1970-01-01 00:41:06.0", timestamp1.toString());
      assertEquals(0, timestamp0.getNanos());
      assertEquals("1970-01-01 00:41:06.0", timestamp0.toString());
      assertEquals(0, timestamp2.getNanos());
      assertEquals("1970-01-01 00:41:06.0", timestamp2.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=164,MONTH=44,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=733,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=-6,MINUTE=164,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotSame(timestamp1, timestamp2);
      assertNotSame(timestamp1, timestamp0);
      assertNotSame(timestamp0, timestamp2);
      assertNotSame(timestamp0, timestamp1);
      assertNotSame(timestamp2, timestamp0);
      assertNotSame(timestamp2, timestamp1);
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(mockGregorianCalendar0, calendar0);
      
      Timestamp timestamp3 = Timestamp.from(instant0);
      assertNotNull(timestamp3);
      assertTrue(timestamp3.equals((Object)timestamp1));
      assertTrue(timestamp3.equals((Object)timestamp2));
      assertTrue(timestamp3.equals((Object)timestamp0));
      assertEquals("1970-01-01 00:41:06.0", timestamp3.toString());
      assertEquals(0, timestamp3.getNanos());
      assertNotSame(timestamp3, timestamp2);
      assertNotSame(timestamp3, timestamp0);
      assertNotSame(timestamp3, timestamp1);
      
      Timestamp timestamp4 = (Timestamp)timestamp1.clone();
      assertNotNull(timestamp4);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertTrue(timestamp1.equals((Object)timestamp0));
      assertTrue(timestamp1.equals((Object)timestamp3));
      assertTrue(timestamp1.equals((Object)timestamp2));
      assertTrue(timestamp0.equals((Object)timestamp2));
      assertTrue(timestamp0.equals((Object)timestamp3));
      assertTrue(timestamp0.equals((Object)timestamp1));
      assertTrue(timestamp4.equals((Object)timestamp0));
      assertTrue(timestamp4.equals((Object)timestamp2));
      assertTrue(timestamp4.equals((Object)timestamp3));
      assertTrue(timestamp4.equals((Object)timestamp1));
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      assertTrue(mockGregorianCalendar0.equals((Object)calendar0));
      assertEquals(0, timestamp1.getNanos());
      assertEquals("1970-01-01 00:41:06.0", timestamp1.toString());
      assertEquals(0, timestamp0.getNanos());
      assertEquals("1970-01-01 00:41:06.0", timestamp0.toString());
      assertEquals(0, timestamp4.getNanos());
      assertEquals("1970-01-01 00:41:06.0", timestamp4.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=164,MONTH=44,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=733,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=-6,MINUTE=164,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotSame(timestamp1, timestamp2);
      assertNotSame(timestamp1, timestamp3);
      assertNotSame(timestamp1, timestamp0);
      assertNotSame(timestamp1, timestamp4);
      assertNotSame(timestamp0, timestamp2);
      assertNotSame(timestamp0, timestamp1);
      assertNotSame(timestamp0, timestamp4);
      assertNotSame(timestamp0, timestamp3);
      assertNotSame(timestamp4, timestamp0);
      assertNotSame(timestamp4, timestamp1);
      assertNotSame(timestamp4, timestamp3);
      assertNotSame(timestamp4, timestamp2);
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(mockGregorianCalendar0, calendar0);
      
      Timestamp timestamp5 = Timestamp.from(instant0);
      assertNotNull(timestamp5);
      assertTrue(timestamp5.equals((Object)timestamp4));
      assertTrue(timestamp5.equals((Object)timestamp0));
      assertTrue(timestamp5.equals((Object)timestamp2));
      assertTrue(timestamp5.equals((Object)timestamp3));
      assertTrue(timestamp5.equals((Object)timestamp1));
      assertEquals("1970-01-01 00:41:06.0", timestamp5.toString());
      assertEquals(0, timestamp5.getNanos());
      assertNotSame(timestamp5, timestamp0);
      assertNotSame(timestamp5, timestamp1);
      assertNotSame(timestamp5, timestamp3);
      assertNotSame(timestamp5, timestamp4);
      assertNotSame(timestamp5, timestamp2);
      
      Instant instant1 = timestamp1.toInstant();
      assertNotNull(instant1);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertTrue(timestamp1.equals((Object)timestamp0));
      assertTrue(timestamp1.equals((Object)timestamp4));
      assertTrue(timestamp1.equals((Object)timestamp5));
      assertTrue(timestamp1.equals((Object)timestamp3));
      assertTrue(timestamp1.equals((Object)timestamp2));
      assertTrue(timestamp0.equals((Object)timestamp2));
      assertTrue(timestamp0.equals((Object)timestamp3));
      assertTrue(timestamp0.equals((Object)timestamp4));
      assertTrue(timestamp0.equals((Object)timestamp1));
      assertTrue(timestamp0.equals((Object)timestamp5));
      assertTrue(instant1.equals((Object)instant0));
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      assertTrue(mockGregorianCalendar0.equals((Object)calendar0));
      assertEquals(0, timestamp1.getNanos());
      assertEquals("1970-01-01 00:41:06.0", timestamp1.toString());
      assertEquals(0, timestamp0.getNanos());
      assertEquals("1970-01-01 00:41:06.0", timestamp0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=164,MONTH=44,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=733,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=-6,MINUTE=164,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotSame(timestamp1, timestamp2);
      assertNotSame(timestamp1, timestamp3);
      assertNotSame(timestamp1, timestamp0);
      assertNotSame(timestamp1, timestamp5);
      assertNotSame(timestamp1, timestamp4);
      assertNotSame(instant0, instant1);
      assertNotSame(timestamp0, timestamp5);
      assertNotSame(timestamp0, timestamp2);
      assertNotSame(timestamp0, timestamp1);
      assertNotSame(timestamp0, timestamp4);
      assertNotSame(timestamp0, timestamp3);
      assertNotSame(instant1, instant0);
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(mockGregorianCalendar0, calendar0);
      
      Timestamp timestamp6 = xSQLVAR0.encodeTimestamp(timestamp1, (Calendar) mockGregorianCalendar0, true);
      assertNotNull(timestamp6);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertTrue(timestamp1.equals((Object)timestamp0));
      assertTrue(timestamp1.equals((Object)timestamp4));
      assertTrue(timestamp1.equals((Object)timestamp5));
      assertTrue(timestamp1.equals((Object)timestamp3));
      assertTrue(timestamp1.equals((Object)timestamp2));
      assertTrue(instant0.equals((Object)instant1));
      assertTrue(timestamp0.equals((Object)timestamp2));
      assertTrue(timestamp0.equals((Object)timestamp3));
      assertTrue(timestamp0.equals((Object)timestamp4));
      assertTrue(timestamp0.equals((Object)timestamp1));
      assertTrue(timestamp0.equals((Object)timestamp5));
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(timestamp6.equals((Object)timestamp1));
      assertTrue(timestamp6.equals((Object)timestamp2));
      assertTrue(timestamp6.equals((Object)timestamp5));
      assertTrue(timestamp6.equals((Object)timestamp4));
      assertTrue(timestamp6.equals((Object)timestamp3));
      assertTrue(timestamp6.equals((Object)timestamp0));
      assertTrue(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      assertTrue(mockGregorianCalendar0.equals((Object)calendar0));
      assertEquals(0, timestamp1.getNanos());
      assertEquals("1970-01-01 00:41:06.0", timestamp1.toString());
      assertEquals(0, timestamp0.getNanos());
      assertEquals("1970-01-01 00:41:06.0", timestamp0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, timestamp6.getNanos());
      assertEquals("1970-01-01 00:41:06.0", timestamp6.toString());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=164,MONTH=44,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=733,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=-6,MINUTE=164,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotSame(timestamp1, timestamp2);
      assertNotSame(timestamp1, timestamp3);
      assertNotSame(timestamp1, timestamp0);
      assertNotSame(timestamp1, timestamp5);
      assertNotSame(timestamp1, timestamp4);
      assertNotSame(timestamp1, timestamp6);
      assertNotSame(instant0, instant1);
      assertNotSame(timestamp0, timestamp2);
      assertNotSame(timestamp0, timestamp5);
      assertNotSame(timestamp0, timestamp1);
      assertNotSame(timestamp0, timestamp4);
      assertNotSame(timestamp0, timestamp6);
      assertNotSame(timestamp0, timestamp3);
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(timestamp6, timestamp3);
      assertNotSame(timestamp6, timestamp2);
      assertNotSame(timestamp6, timestamp1);
      assertNotSame(timestamp6, timestamp0);
      assertNotSame(timestamp6, timestamp5);
      assertNotSame(timestamp6, timestamp4);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(mockGregorianCalendar0, calendar0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean0 = fBCachedFetcher0.last();
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqlscale);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<byte[][]> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      Predicate<byte[][]> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate2 = predicate0.negate();
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotSame(predicate2, predicate1);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Predicate<FBBlobField> predicate3 = Predicate.isEqual((Object) predicate2);
      assertNotNull(predicate3);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotSame(object0, object1);
      assertNotSame(predicate2, predicate1);
      
      Integer integer0 = new Integer(335544563);
      assertEquals(335544563, (int)integer0);
      assertNotNull(integer0);
      
      Predicate<Object> predicate4 = Predicate.isEqual((Object) integer0);
      assertNotNull(predicate4);
      
      Predicate<Object> predicate5 = predicate4.negate();
      assertNotNull(predicate5);
      assertFalse(predicate5.equals((Object)predicate4));
      
      Predicate<Object> predicate6 = predicate4.and(predicate4);
      assertNotNull(predicate6);
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate5));
      
      Predicate<byte[][]> predicate7 = predicate2.and(predicate0);
      assertNotNull(predicate7);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate0));
      assertNotSame(object0, object1);
      assertNotSame(predicate2, predicate1);
      
      Predicate<Object> predicate8 = predicate4.and(predicate5);
      assertNotNull(predicate8);
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate5));
      assertNotSame(predicate8, predicate6);
      
      Predicate<Object> predicate9 = predicate6.negate();
      assertNotNull(predicate9);
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate9.equals((Object)predicate8));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate5));
      assertNotSame(predicate6, predicate8);
      assertNotSame(predicate9, predicate5);
      
      Predicate<byte[][]> predicate10 = Predicate.isEqual((Object) predicate9);
      assertNotNull(predicate10);
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate9.equals((Object)predicate8));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate5));
      assertFalse(predicate10.equals((Object)predicate0));
      assertFalse(predicate10.equals((Object)predicate1));
      assertFalse(predicate10.equals((Object)predicate7));
      assertFalse(predicate10.equals((Object)predicate2));
      assertNotSame(predicate6, predicate8);
      assertNotSame(predicate9, predicate5);
      assertNotSame(predicate10, predicate0);
      
      Predicate<byte[][]> predicate11 = predicate7.or(predicate10);
      assertNotNull(predicate11);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate9.equals((Object)predicate8));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate5));
      assertFalse(predicate10.equals((Object)predicate0));
      assertFalse(predicate10.equals((Object)predicate1));
      assertFalse(predicate10.equals((Object)predicate7));
      assertFalse(predicate10.equals((Object)predicate2));
      assertFalse(predicate11.equals((Object)predicate1));
      assertFalse(predicate11.equals((Object)predicate2));
      assertFalse(predicate11.equals((Object)predicate0));
      assertFalse(predicate11.equals((Object)predicate10));
      assertFalse(predicate11.equals((Object)predicate7));
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate10);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate6, predicate8);
      assertNotSame(predicate9, predicate5);
      assertNotSame(predicate10, predicate0);
      
      Predicate<byte[][]> predicate12 = predicate0.negate();
      assertNotNull(predicate12);
      assertFalse(predicate12.equals((Object)predicate2));
      assertFalse(predicate12.equals((Object)predicate1));
      assertFalse(predicate12.equals((Object)predicate10));
      assertFalse(predicate12.equals((Object)predicate0));
      assertFalse(predicate12.equals((Object)predicate7));
      assertFalse(predicate12.equals((Object)predicate11));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate11));
      assertNotSame(predicate12, predicate2);
      assertNotSame(predicate12, predicate1);
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate10);
      
      Predicate<byte[][]> predicate13 = predicate12.and(predicate8);
      assertNotNull(predicate13);
      assertFalse(predicate12.equals((Object)predicate2));
      assertFalse(predicate12.equals((Object)predicate1));
      assertFalse(predicate12.equals((Object)predicate10));
      assertFalse(predicate12.equals((Object)predicate0));
      assertFalse(predicate12.equals((Object)predicate7));
      assertFalse(predicate12.equals((Object)predicate11));
      assertFalse(predicate13.equals((Object)predicate10));
      assertFalse(predicate13.equals((Object)predicate11));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate7));
      assertFalse(predicate13.equals((Object)predicate12));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate9));
      assertFalse(predicate8.equals((Object)predicate5));
      assertNotSame(predicate12, predicate2);
      assertNotSame(predicate12, predicate1);
      assertNotSame(predicate13, predicate7);
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate10);
      assertNotSame(predicate5, predicate9);
      assertNotSame(predicate8, predicate6);
      
      Predicate<byte[][]> predicate14 = predicate13.negate();
      assertNotNull(predicate14);
      assertFalse(predicate12.equals((Object)predicate2));
      assertFalse(predicate12.equals((Object)predicate1));
      assertFalse(predicate12.equals((Object)predicate10));
      assertFalse(predicate12.equals((Object)predicate0));
      assertFalse(predicate12.equals((Object)predicate7));
      assertFalse(predicate12.equals((Object)predicate11));
      assertFalse(predicate12.equals((Object)predicate13));
      assertFalse(predicate13.equals((Object)predicate10));
      assertFalse(predicate13.equals((Object)predicate11));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate7));
      assertFalse(predicate13.equals((Object)predicate12));
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate14.equals((Object)predicate1));
      assertFalse(predicate14.equals((Object)predicate13));
      assertFalse(predicate14.equals((Object)predicate12));
      assertFalse(predicate14.equals((Object)predicate2));
      assertFalse(predicate14.equals((Object)predicate11));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate0));
      assertFalse(predicate14.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate9));
      assertFalse(predicate8.equals((Object)predicate5));
      assertNotSame(predicate12, predicate2);
      assertNotSame(predicate12, predicate1);
      assertNotSame(predicate12, predicate14);
      assertNotSame(predicate13, predicate7);
      assertNotSame(object0, object1);
      assertNotSame(predicate14, predicate1);
      assertNotSame(predicate14, predicate12);
      assertNotSame(predicate14, predicate2);
      assertNotSame(predicate0, predicate10);
      assertNotSame(predicate5, predicate9);
      assertNotSame(predicate8, predicate6);
      
      Predicate<byte[][]> predicate15 = predicate7.negate();
      assertNotNull(predicate15);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate15.equals((Object)predicate14));
      assertFalse(predicate15.equals((Object)predicate13));
      assertFalse(predicate15.equals((Object)predicate1));
      assertFalse(predicate15.equals((Object)predicate0));
      assertFalse(predicate15.equals((Object)predicate2));
      assertFalse(predicate15.equals((Object)predicate12));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate15.equals((Object)predicate7));
      assertFalse(predicate15.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate13));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate7));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate14));
      assertFalse(predicate7.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate12));
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate10);
      assertNotSame(predicate15, predicate14);
      assertNotSame(predicate15, predicate1);
      assertNotSame(predicate15, predicate2);
      assertNotSame(predicate15, predicate12);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate14);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate12);
      assertNotSame(predicate7, predicate13);
      
      Predicate<Object> predicate16 = predicate4.negate();
      assertNotNull(predicate16);
      assertFalse(predicate16.equals((Object)predicate8));
      assertFalse(predicate16.equals((Object)predicate4));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate9));
      assertNotSame(predicate16, predicate5);
      assertNotSame(predicate16, predicate9);
      
      Predicate<Object> predicate17 = predicate5.and(predicate6);
      assertNotNull(predicate17);
      assertFalse(predicate17.equals((Object)predicate16));
      assertFalse(predicate17.equals((Object)predicate8));
      assertFalse(predicate17.equals((Object)predicate4));
      assertFalse(predicate17.equals((Object)predicate6));
      assertFalse(predicate17.equals((Object)predicate5));
      assertFalse(predicate17.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate9));
      assertNotSame(predicate17, predicate8);
      assertNotSame(predicate17, predicate6);
      assertNotSame(predicate5, predicate16);
      assertNotSame(predicate5, predicate9);
      assertNotSame(predicate6, predicate17);
      assertNotSame(predicate6, predicate8);
      
      Predicate<Object> predicate18 = predicate4.or(predicate16);
      assertNotNull(predicate18);
      assertFalse(predicate16.equals((Object)predicate8));
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate4));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate18.equals((Object)predicate6));
      assertFalse(predicate18.equals((Object)predicate17));
      assertFalse(predicate18.equals((Object)predicate8));
      assertFalse(predicate18.equals((Object)predicate16));
      assertFalse(predicate18.equals((Object)predicate5));
      assertFalse(predicate18.equals((Object)predicate9));
      assertFalse(predicate18.equals((Object)predicate4));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate16));
      assertNotSame(predicate16, predicate5);
      assertNotSame(predicate16, predicate9);
      
      Predicate<byte[][]> predicate19 = predicate7.and(predicate0);
      assertNotNull(predicate19);
      assertFalse(object0.equals((Object)object1));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate13));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate7));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate19.equals((Object)predicate11));
      assertFalse(predicate19.equals((Object)predicate10));
      assertFalse(predicate19.equals((Object)predicate7));
      assertFalse(predicate19.equals((Object)predicate1));
      assertFalse(predicate19.equals((Object)predicate15));
      assertFalse(predicate19.equals((Object)predicate12));
      assertFalse(predicate19.equals((Object)predicate0));
      assertFalse(predicate19.equals((Object)predicate2));
      assertFalse(predicate19.equals((Object)predicate14));
      assertFalse(predicate19.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate14));
      assertFalse(predicate7.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate15));
      assertFalse(predicate7.equals((Object)predicate12));
      assertNotSame(object0, object1);
      assertNotSame(predicate0, predicate10);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate14);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate12);
      assertNotSame(predicate19, predicate7);
      assertNotSame(predicate19, predicate13);
      assertNotSame(predicate7, predicate19);
      assertNotSame(predicate7, predicate13);
      
      Predicate<Object> predicate20 = predicate16.and(predicate4);
      assertNotNull(predicate20);
      assertFalse(predicate16.equals((Object)predicate8));
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate18));
      assertFalse(predicate16.equals((Object)predicate4));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate4));
      assertFalse(predicate20.equals((Object)predicate5));
      assertFalse(predicate20.equals((Object)predicate9));
      assertFalse(predicate20.equals((Object)predicate8));
      assertFalse(predicate20.equals((Object)predicate17));
      assertFalse(predicate20.equals((Object)predicate18));
      assertFalse(predicate20.equals((Object)predicate16));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate16));
      assertNotSame(predicate16, predicate5);
      assertNotSame(predicate16, predicate9);
      assertNotSame(predicate20, predicate6);
      assertNotSame(predicate20, predicate8);
      assertNotSame(predicate20, predicate17);
      
      Predicate<FBCachedBlobField> predicate21 = Predicate.isEqual((Object) predicate5);
      assertNotNull(predicate21);
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate20));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate20));
      assertFalse(predicate5.equals((Object)predicate17));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate18));
      assertFalse(predicate5.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate4));
      assertNotSame(predicate5, predicate16);
      assertNotSame(predicate5, predicate9);
      
      Predicate<Object> predicate22 = predicate20.or(predicate9);
      assertNotNull(predicate22);
      assertFalse(predicate16.equals((Object)predicate8));
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate18));
      assertFalse(predicate16.equals((Object)predicate20));
      assertFalse(predicate16.equals((Object)predicate4));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate4));
      assertFalse(predicate20.equals((Object)predicate5));
      assertFalse(predicate20.equals((Object)predicate9));
      assertFalse(predicate20.equals((Object)predicate8));
      assertFalse(predicate20.equals((Object)predicate17));
      assertFalse(predicate20.equals((Object)predicate18));
      assertFalse(predicate20.equals((Object)predicate16));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate20));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate22.equals((Object)predicate8));
      assertFalse(predicate22.equals((Object)predicate16));
      assertFalse(predicate22.equals((Object)predicate18));
      assertFalse(predicate22.equals((Object)predicate5));
      assertFalse(predicate22.equals((Object)predicate20));
      assertFalse(predicate22.equals((Object)predicate6));
      assertFalse(predicate22.equals((Object)predicate4));
      assertFalse(predicate22.equals((Object)predicate9));
      assertFalse(predicate22.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate18));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate9.equals((Object)predicate17));
      assertFalse(predicate9.equals((Object)predicate8));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate16));
      assertFalse(predicate9.equals((Object)predicate5));
      assertFalse(predicate9.equals((Object)predicate18));
      assertFalse(predicate9.equals((Object)predicate20));
      assertNotSame(predicate16, predicate5);
      assertNotSame(predicate16, predicate9);
      assertNotSame(predicate20, predicate6);
      assertNotSame(predicate20, predicate8);
      assertNotSame(predicate20, predicate17);
      assertNotSame(predicate22, predicate18);
      assertNotSame(predicate6, predicate20);
      assertNotSame(predicate6, predicate17);
      assertNotSame(predicate6, predicate8);
      assertNotSame(predicate9, predicate16);
      assertNotSame(predicate9, predicate5);
      
      Predicate<Delayed> predicate23 = Predicate.isEqual((Object) predicate4);
      assertNotNull(predicate23);
      assertFalse(predicate4.equals((Object)predicate22));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate20));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate16));
      
      Predicate<Object> predicate24 = predicate6.and(predicate18);
      assertNotNull(predicate24);
      assertFalse(predicate16.equals((Object)predicate8));
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate18));
      assertFalse(predicate16.equals((Object)predicate20));
      assertFalse(predicate16.equals((Object)predicate22));
      assertFalse(predicate16.equals((Object)predicate4));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate18.equals((Object)predicate20));
      assertFalse(predicate18.equals((Object)predicate6));
      assertFalse(predicate18.equals((Object)predicate22));
      assertFalse(predicate18.equals((Object)predicate17));
      assertFalse(predicate18.equals((Object)predicate8));
      assertFalse(predicate18.equals((Object)predicate16));
      assertFalse(predicate18.equals((Object)predicate5));
      assertFalse(predicate18.equals((Object)predicate9));
      assertFalse(predicate18.equals((Object)predicate4));
      assertFalse(predicate4.equals((Object)predicate22));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate20));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate22));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate18));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate24.equals((Object)predicate16));
      assertFalse(predicate24.equals((Object)predicate8));
      assertFalse(predicate24.equals((Object)predicate4));
      assertFalse(predicate24.equals((Object)predicate5));
      assertFalse(predicate24.equals((Object)predicate6));
      assertFalse(predicate24.equals((Object)predicate9));
      assertFalse(predicate24.equals((Object)predicate22));
      assertFalse(predicate24.equals((Object)predicate17));
      assertFalse(predicate24.equals((Object)predicate18));
      assertFalse(predicate24.equals((Object)predicate20));
      assertNotSame(predicate16, predicate5);
      assertNotSame(predicate16, predicate9);
      assertNotSame(predicate18, predicate22);
      assertNotSame(predicate6, predicate20);
      assertNotSame(predicate6, predicate17);
      assertNotSame(predicate6, predicate8);
      assertNotSame(predicate6, predicate24);
      assertNotSame(predicate24, predicate8);
      assertNotSame(predicate24, predicate6);
      assertNotSame(predicate24, predicate17);
      assertNotSame(predicate24, predicate20);
      
      boolean boolean0 = predicate20.test(predicate24);
      assertFalse(boolean0);
      assertFalse(predicate16.equals((Object)predicate24));
      assertFalse(predicate16.equals((Object)predicate8));
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate18));
      assertFalse(predicate16.equals((Object)predicate20));
      assertFalse(predicate16.equals((Object)predicate22));
      assertFalse(predicate16.equals((Object)predicate4));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate18.equals((Object)predicate20));
      assertFalse(predicate18.equals((Object)predicate6));
      assertFalse(predicate18.equals((Object)predicate22));
      assertFalse(predicate18.equals((Object)predicate17));
      assertFalse(predicate18.equals((Object)predicate8));
      assertFalse(predicate18.equals((Object)predicate24));
      assertFalse(predicate18.equals((Object)predicate16));
      assertFalse(predicate18.equals((Object)predicate5));
      assertFalse(predicate18.equals((Object)predicate9));
      assertFalse(predicate18.equals((Object)predicate4));
      assertFalse(predicate20.equals((Object)predicate22));
      assertFalse(predicate20.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate4));
      assertFalse(predicate20.equals((Object)predicate5));
      assertFalse(predicate20.equals((Object)predicate9));
      assertFalse(predicate20.equals((Object)predicate8));
      assertFalse(predicate20.equals((Object)predicate24));
      assertFalse(predicate20.equals((Object)predicate17));
      assertFalse(predicate20.equals((Object)predicate18));
      assertFalse(predicate20.equals((Object)predicate16));
      assertFalse(predicate4.equals((Object)predicate22));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate20));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate24));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate22));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate24));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate18));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate24.equals((Object)predicate16));
      assertFalse(predicate24.equals((Object)predicate8));
      assertFalse(predicate24.equals((Object)predicate4));
      assertFalse(predicate24.equals((Object)predicate5));
      assertFalse(predicate24.equals((Object)predicate6));
      assertFalse(predicate24.equals((Object)predicate9));
      assertFalse(predicate24.equals((Object)predicate22));
      assertFalse(predicate24.equals((Object)predicate17));
      assertFalse(predicate24.equals((Object)predicate18));
      assertFalse(predicate24.equals((Object)predicate20));
      assertNotSame(predicate16, predicate5);
      assertNotSame(predicate16, predicate9);
      assertNotSame(predicate18, predicate22);
      assertNotSame(predicate20, predicate6);
      assertNotSame(predicate20, predicate8);
      assertNotSame(predicate20, predicate24);
      assertNotSame(predicate20, predicate17);
      assertNotSame(predicate6, predicate20);
      assertNotSame(predicate6, predicate17);
      assertNotSame(predicate6, predicate8);
      assertNotSame(predicate6, predicate24);
      assertNotSame(predicate24, predicate8);
      assertNotSame(predicate24, predicate6);
      assertNotSame(predicate24, predicate17);
      assertNotSame(predicate24, predicate20);
      
      Predicate<Object> predicate25 = predicate20.negate();
      assertNotNull(predicate25);
      assertFalse(predicate16.equals((Object)predicate24));
      assertFalse(predicate16.equals((Object)predicate8));
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate18));
      assertFalse(predicate16.equals((Object)predicate20));
      assertFalse(predicate16.equals((Object)predicate22));
      assertFalse(predicate16.equals((Object)predicate4));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate22));
      assertFalse(predicate20.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate4));
      assertFalse(predicate20.equals((Object)predicate5));
      assertFalse(predicate20.equals((Object)predicate9));
      assertFalse(predicate20.equals((Object)predicate8));
      assertFalse(predicate20.equals((Object)predicate24));
      assertFalse(predicate20.equals((Object)predicate17));
      assertFalse(predicate20.equals((Object)predicate18));
      assertFalse(predicate20.equals((Object)predicate16));
      assertFalse(predicate4.equals((Object)predicate22));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate20));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate24));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate25.equals((Object)predicate22));
      assertFalse(predicate25.equals((Object)predicate6));
      assertFalse(predicate25.equals((Object)predicate4));
      assertFalse(predicate25.equals((Object)predicate5));
      assertFalse(predicate25.equals((Object)predicate9));
      assertFalse(predicate25.equals((Object)predicate16));
      assertFalse(predicate25.equals((Object)predicate24));
      assertFalse(predicate25.equals((Object)predicate8));
      assertFalse(predicate25.equals((Object)predicate17));
      assertFalse(predicate25.equals((Object)predicate18));
      assertFalse(predicate25.equals((Object)predicate20));
      assertNotSame(predicate16, predicate5);
      assertNotSame(predicate16, predicate9);
      assertNotSame(predicate16, predicate25);
      assertNotSame(predicate20, predicate6);
      assertNotSame(predicate20, predicate8);
      assertNotSame(predicate20, predicate24);
      assertNotSame(predicate20, predicate17);
      assertNotSame(predicate25, predicate5);
      assertNotSame(predicate25, predicate9);
      assertNotSame(predicate25, predicate16);
      
      Predicate<Object> predicate26 = predicate20.negate();
      assertNotNull(predicate26);
      assertFalse(predicate16.equals((Object)predicate24));
      assertFalse(predicate16.equals((Object)predicate8));
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate18));
      assertFalse(predicate16.equals((Object)predicate20));
      assertFalse(predicate16.equals((Object)predicate22));
      assertFalse(predicate16.equals((Object)predicate4));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate25));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate22));
      assertFalse(predicate20.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate4));
      assertFalse(predicate20.equals((Object)predicate5));
      assertFalse(predicate20.equals((Object)predicate9));
      assertFalse(predicate20.equals((Object)predicate8));
      assertFalse(predicate20.equals((Object)predicate24));
      assertFalse(predicate20.equals((Object)predicate17));
      assertFalse(predicate20.equals((Object)predicate18));
      assertFalse(predicate20.equals((Object)predicate16));
      assertFalse(predicate20.equals((Object)predicate25));
      assertFalse(predicate4.equals((Object)predicate22));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate20));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate24));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate25));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate26.equals((Object)predicate8));
      assertFalse(predicate26.equals((Object)predicate9));
      assertFalse(predicate26.equals((Object)predicate17));
      assertFalse(predicate26.equals((Object)predicate16));
      assertFalse(predicate26.equals((Object)predicate25));
      assertFalse(predicate26.equals((Object)predicate6));
      assertFalse(predicate26.equals((Object)predicate20));
      assertFalse(predicate26.equals((Object)predicate5));
      assertFalse(predicate26.equals((Object)predicate22));
      assertFalse(predicate26.equals((Object)predicate4));
      assertFalse(predicate26.equals((Object)predicate18));
      assertFalse(predicate26.equals((Object)predicate24));
      assertNotSame(predicate16, predicate26);
      assertNotSame(predicate16, predicate5);
      assertNotSame(predicate16, predicate9);
      assertNotSame(predicate16, predicate25);
      assertNotSame(predicate20, predicate6);
      assertNotSame(predicate20, predicate8);
      assertNotSame(predicate20, predicate24);
      assertNotSame(predicate20, predicate17);
      assertNotSame(predicate26, predicate9);
      assertNotSame(predicate26, predicate16);
      assertNotSame(predicate26, predicate25);
      assertNotSame(predicate26, predicate5);
      
      boolean boolean1 = predicate22.test(object1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(predicate16.equals((Object)predicate24));
      assertFalse(predicate16.equals((Object)predicate8));
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate18));
      assertFalse(predicate16.equals((Object)predicate20));
      assertFalse(predicate16.equals((Object)predicate22));
      assertFalse(predicate16.equals((Object)predicate4));
      assertFalse(predicate16.equals((Object)predicate26));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate25));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(object1.equals((Object)object0));
      assertFalse(predicate20.equals((Object)predicate22));
      assertFalse(predicate20.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate4));
      assertFalse(predicate20.equals((Object)predicate5));
      assertFalse(predicate20.equals((Object)predicate9));
      assertFalse(predicate20.equals((Object)predicate26));
      assertFalse(predicate20.equals((Object)predicate8));
      assertFalse(predicate20.equals((Object)predicate24));
      assertFalse(predicate20.equals((Object)predicate18));
      assertFalse(predicate20.equals((Object)predicate17));
      assertFalse(predicate20.equals((Object)predicate16));
      assertFalse(predicate20.equals((Object)predicate25));
      assertFalse(predicate4.equals((Object)predicate22));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate26));
      assertFalse(predicate4.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate20));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate24));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate25));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate22.equals((Object)predicate24));
      assertFalse(predicate22.equals((Object)predicate16));
      assertFalse(predicate22.equals((Object)predicate18));
      assertFalse(predicate22.equals((Object)predicate8));
      assertFalse(predicate22.equals((Object)predicate5));
      assertFalse(predicate22.equals((Object)predicate20));
      assertFalse(predicate22.equals((Object)predicate6));
      assertFalse(predicate22.equals((Object)predicate26));
      assertFalse(predicate22.equals((Object)predicate4));
      assertFalse(predicate22.equals((Object)predicate9));
      assertFalse(predicate22.equals((Object)predicate17));
      assertFalse(predicate22.equals((Object)predicate25));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate22));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate24));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate18));
      assertFalse(predicate6.equals((Object)predicate25));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate26));
      assertFalse(predicate9.equals((Object)predicate17));
      assertFalse(predicate9.equals((Object)predicate26));
      assertFalse(predicate9.equals((Object)predicate8));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate16));
      assertFalse(predicate9.equals((Object)predicate25));
      assertFalse(predicate9.equals((Object)predicate5));
      assertFalse(predicate9.equals((Object)predicate22));
      assertFalse(predicate9.equals((Object)predicate24));
      assertFalse(predicate9.equals((Object)predicate18));
      assertFalse(predicate9.equals((Object)predicate20));
      assertNotSame(predicate16, predicate26);
      assertNotSame(predicate16, predicate5);
      assertNotSame(predicate16, predicate9);
      assertNotSame(predicate16, predicate25);
      assertNotSame(object1, object0);
      assertNotSame(predicate20, predicate6);
      assertNotSame(predicate20, predicate8);
      assertNotSame(predicate20, predicate24);
      assertNotSame(predicate20, predicate17);
      assertNotSame(predicate22, predicate18);
      assertNotSame(predicate6, predicate20);
      assertNotSame(predicate6, predicate17);
      assertNotSame(predicate6, predicate8);
      assertNotSame(predicate6, predicate24);
      assertNotSame(predicate9, predicate26);
      assertNotSame(predicate9, predicate16);
      assertNotSame(predicate9, predicate25);
      assertNotSame(predicate9, predicate5);
      
      Predicate<Object> predicate27 = predicate8.negate();
      assertNotNull(predicate27);
      assertFalse(predicate27.equals((Object)predicate5));
      assertFalse(predicate27.equals((Object)predicate22));
      assertFalse(predicate27.equals((Object)predicate4));
      assertFalse(predicate27.equals((Object)predicate16));
      assertFalse(predicate27.equals((Object)predicate6));
      assertFalse(predicate27.equals((Object)predicate8));
      assertFalse(predicate27.equals((Object)predicate17));
      assertFalse(predicate27.equals((Object)predicate20));
      assertFalse(predicate27.equals((Object)predicate25));
      assertFalse(predicate27.equals((Object)predicate9));
      assertFalse(predicate27.equals((Object)predicate18));
      assertFalse(predicate27.equals((Object)predicate26));
      assertFalse(predicate27.equals((Object)predicate24));
      assertFalse(predicate4.equals((Object)predicate22));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate26));
      assertFalse(predicate4.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate20));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate24));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate25));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate20));
      assertFalse(predicate5.equals((Object)predicate17));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate22));
      assertFalse(predicate5.equals((Object)predicate24));
      assertFalse(predicate5.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate18));
      assertFalse(predicate5.equals((Object)predicate25));
      assertFalse(predicate5.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate26));
      assertFalse(predicate8.equals((Object)predicate22));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate26));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate9));
      assertFalse(predicate8.equals((Object)predicate20));
      assertFalse(predicate8.equals((Object)predicate24));
      assertFalse(predicate8.equals((Object)predicate16));
      assertFalse(predicate8.equals((Object)predicate18));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate17));
      assertFalse(predicate8.equals((Object)predicate25));
      assertNotSame(predicate27, predicate5);
      assertNotSame(predicate27, predicate16);
      assertNotSame(predicate27, predicate25);
      assertNotSame(predicate27, predicate9);
      assertNotSame(predicate27, predicate26);
      assertNotSame(predicate5, predicate27);
      assertNotSame(predicate5, predicate16);
      assertNotSame(predicate5, predicate25);
      assertNotSame(predicate5, predicate9);
      assertNotSame(predicate5, predicate26);
      assertNotSame(predicate8, predicate6);
      assertNotSame(predicate8, predicate20);
      assertNotSame(predicate8, predicate24);
      assertNotSame(predicate8, predicate17);
      
      Predicate<Object> predicate28 = predicate4.and(predicate24);
      assertNotNull(predicate28);
      assertFalse(predicate28.equals((Object)predicate5));
      assertFalse(predicate28.equals((Object)predicate16));
      assertFalse(predicate28.equals((Object)predicate18));
      assertFalse(predicate28.equals((Object)predicate22));
      assertFalse(predicate28.equals((Object)predicate6));
      assertFalse(predicate28.equals((Object)predicate9));
      assertFalse(predicate28.equals((Object)predicate24));
      assertFalse(predicate28.equals((Object)predicate26));
      assertFalse(predicate28.equals((Object)predicate25));
      assertFalse(predicate28.equals((Object)predicate20));
      assertFalse(predicate28.equals((Object)predicate8));
      assertFalse(predicate28.equals((Object)predicate17));
      assertFalse(predicate28.equals((Object)predicate4));
      assertFalse(predicate28.equals((Object)predicate27));
      assertFalse(predicate16.equals((Object)predicate24));
      assertFalse(predicate16.equals((Object)predicate27));
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate18));
      assertFalse(predicate16.equals((Object)predicate22));
      assertFalse(predicate16.equals((Object)predicate26));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate25));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate16.equals((Object)predicate8));
      assertFalse(predicate16.equals((Object)predicate20));
      assertFalse(predicate16.equals((Object)predicate4));
      assertFalse(predicate18.equals((Object)predicate20));
      assertFalse(predicate18.equals((Object)predicate17));
      assertFalse(predicate18.equals((Object)predicate27));
      assertFalse(predicate18.equals((Object)predicate16));
      assertFalse(predicate18.equals((Object)predicate4));
      assertFalse(predicate18.equals((Object)predicate6));
      assertFalse(predicate18.equals((Object)predicate22));
      assertFalse(predicate18.equals((Object)predicate8));
      assertFalse(predicate18.equals((Object)predicate24));
      assertFalse(predicate18.equals((Object)predicate26));
      assertFalse(predicate18.equals((Object)predicate25));
      assertFalse(predicate18.equals((Object)predicate5));
      assertFalse(predicate18.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate22));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate27));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate4.equals((Object)predicate26));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate20));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate24));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate25));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate27));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate22));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate24));
      assertFalse(predicate6.equals((Object)predicate18));
      assertFalse(predicate6.equals((Object)predicate25));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate26));
      assertFalse(predicate24.equals((Object)predicate16));
      assertFalse(predicate24.equals((Object)predicate27));
      assertFalse(predicate24.equals((Object)predicate4));
      assertFalse(predicate24.equals((Object)predicate5));
      assertFalse(predicate24.equals((Object)predicate6));
      assertFalse(predicate24.equals((Object)predicate9));
      assertFalse(predicate24.equals((Object)predicate26));
      assertFalse(predicate24.equals((Object)predicate18));
      assertFalse(predicate24.equals((Object)predicate25));
      assertFalse(predicate24.equals((Object)predicate8));
      assertFalse(predicate24.equals((Object)predicate22));
      assertFalse(predicate24.equals((Object)predicate17));
      assertFalse(predicate24.equals((Object)predicate20));
      assertNotSame(predicate28, predicate20);
      assertNotSame(predicate28, predicate6);
      assertNotSame(predicate28, predicate8);
      assertNotSame(predicate28, predicate17);
      assertNotSame(predicate28, predicate24);
      assertNotSame(predicate16, predicate27);
      assertNotSame(predicate16, predicate26);
      assertNotSame(predicate16, predicate5);
      assertNotSame(predicate16, predicate9);
      assertNotSame(predicate16, predicate25);
      assertNotSame(predicate18, predicate22);
      assertNotSame(predicate6, predicate20);
      assertNotSame(predicate6, predicate17);
      assertNotSame(predicate6, predicate8);
      assertNotSame(predicate6, predicate24);
      assertNotSame(predicate6, predicate28);
      assertNotSame(predicate24, predicate8);
      assertNotSame(predicate24, predicate6);
      assertNotSame(predicate24, predicate17);
      assertNotSame(predicate24, predicate28);
      assertNotSame(predicate24, predicate20);
      
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      
      try { 
        fBCachedFetcher0.absolute(0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      assertNotNull(delayQueue0);
      
      Delayed delayed0 = delayQueue0.poll();
      assertNull(delayed0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      Callable<byte[][]> callable0 = (Callable<byte[][]>) mock(Callable.class, new ViolatedAssumptionAnswer());
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[8];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[1] = fBBlobField0;
      fBBlobFieldArray0[2] = fBBlobField0;
      fBBlobFieldArray0[4] = fBBlobFieldArray0[3];
      fBBlobFieldArray0[5] = fBBlobFieldArray0[4];
      fBBlobFieldArray0[6] = fBBlobFieldArray0[5];
      fBBlobFieldArray0[7] = fBBlobFieldArray0[6];
      FBBlobField[] fBBlobFieldArray1 = linkedList0.toArray(fBBlobFieldArray0);
      assertNotNull(fBBlobFieldArray1);
      assertEquals(0, linkedList0.size());
      assertEquals(8, fBBlobFieldArray1.length);
      assertEquals(8, fBBlobFieldArray0.length);
      assertSame(fBBlobFieldArray1, fBBlobFieldArray0);
      assertSame(fBBlobFieldArray0, fBBlobFieldArray1);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      boolean boolean0 = fBCachedFetcher0.next();
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.1032731737259827
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[9][6];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)104;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      boolean boolean0 = linkedList0.add(byteArray0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(9, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      
      byte byte0 = (byte) (-37);
      byteArray2[0] = (byte) (-37);
      byteArray2[1] = (byte) (-110);
      byteArray2[3] = (byte)104;
      byteArray2[5] = (byte)104;
      byteArray2[8] = (byte)2;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[7];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)104;
      byteArray3[1] = (byte) (-37);
      byteArray3[2] = (byte)104;
      byteArray3[3] = (byte) (-110);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(linkedList0.contains(byteArray0));
      
      fBCachedFetcher0.close();
      assertEquals(1, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(linkedList0.contains(byteArray0));
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1437065979373684
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[9][6];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)110;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      boolean boolean0 = linkedList0.add(byteArray0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(9, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      
      byteArray2[0] = (byte) (-44);
      byteArray2[1] = (byte) (-110);
      byteArray2[3] = (byte)110;
      byteArray2[5] = (byte)110;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(linkedList0.contains(byteArray0));
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.beforeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7754337976947767
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      byte[][] byteArray0 = new byte[4][4];
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertNotNull(calendar0);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      
      Time time0 = xSQLVAR0.decodeTime((byte[]) null);
      assertNotNull(time0);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals("20:21:21", time0.toString());
      
      long long0 = time0.getTime();
      assertEquals(1392409281320L, long0);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals("20:21:21", time0.toString());
      
      LocalTime localTime0 = time0.toLocalTime();
      assertNotNull(localTime0);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals("20:21:21", time0.toString());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      
      Time time1 = Time.valueOf(localTime0);
      assertNotNull(time1);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertFalse(time1.equals((Object)time0));
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", time1.toString());
      assertNotSame(time0, time1);
      assertNotSame(time1, time0);
      
      String string0 = locale0.getDisplayVariant();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      
      long long1 = time1.getTime();
      assertEquals(73281000L, long1);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertFalse(time0.equals((Object)time1));
      assertFalse(time1.equals((Object)time0));
      assertFalse(long1 == long0);
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", time1.toString());
      assertNotSame(time0, time1);
      assertNotSame(time1, time0);
      
      boolean boolean0 = time0.after(time1);
      assertTrue(boolean0);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertFalse(time0.equals((Object)time1));
      assertFalse(time1.equals((Object)time0));
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", time1.toString());
      assertNotSame(time0, time1);
      assertNotSame(time1, time0);
      
      long long2 = time0.getTime();
      assertEquals(1392409281320L, long2);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertFalse(time0.equals((Object)time1));
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals("20:21:21", time0.toString());
      assertNotSame(time0, time1);
      
      Time time2 = new Time(0);
      assertNotNull(time2);
      assertFalse(time2.equals((Object)time0));
      assertFalse(time2.equals((Object)time1));
      assertEquals("00:00:00", time2.toString());
      
      Time time3 = xSQLVAR0.decodeTime(byteArray0[0]);
      assertNotNull(time3);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertFalse(time3.equals((Object)time2));
      assertTrue(time3.equals((Object)time0));
      assertFalse(time3.equals((Object)time1));
      assertEquals("20:21:21", time3.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time3, time0);
      assertNotSame(time3, time2);
      assertNotSame(time3, time1);
      
      String string1 = locale0.getDisplayVariant();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertSame(locale1, locale0);
      
      String string2 = locale0.getDisplayCountry(locale1);
      assertEquals("Canada", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertSame(locale1, locale0);
      assertSame(locale0, locale1);
      
      Time time4 = new Time(0);
      assertNotNull(time4);
      assertTrue(time4.equals((Object)time2));
      assertFalse(time4.equals((Object)time1));
      assertFalse(time4.equals((Object)time0));
      assertFalse(time4.equals((Object)time3));
      assertEquals("00:00:00", time4.toString());
      
      Time time5 = xSQLVAR0.decodeTime(byteArray0[0]);
      assertNotNull(time5);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertFalse(time5.equals((Object)time4));
      assertFalse(time5.equals((Object)time2));
      assertTrue(time5.equals((Object)time0));
      assertFalse(time5.equals((Object)time1));
      assertTrue(time5.equals((Object)time3));
      assertEquals("20:21:21", time5.toString());
      assertEquals(4, byteArray0.length);
      assertNotSame(time5, time3);
      assertNotSame(time5, time4);
      assertNotSame(time5, time0);
      assertNotSame(time5, time2);
      assertNotSame(time5, time1);
      
      Time time6 = Time.valueOf(localTime0);
      assertNotNull(time6);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertFalse(time0.equals((Object)time1));
      assertTrue(time0.equals((Object)time3));
      assertTrue(time0.equals((Object)time5));
      assertFalse(time0.equals((Object)time2));
      assertFalse(time0.equals((Object)time4));
      assertFalse(time6.equals((Object)time5));
      assertTrue(time6.equals((Object)time1));
      assertFalse(time6.equals((Object)time0));
      assertFalse(time6.equals((Object)time2));
      assertFalse(time6.equals((Object)time4));
      assertFalse(time6.equals((Object)time3));
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", time6.toString());
      assertNotSame(time0, time1);
      assertNotSame(time0, time2);
      assertNotSame(time0, time4);
      assertNotSame(time0, time6);
      assertNotSame(time0, time3);
      assertNotSame(time0, time5);
      assertNotSame(time6, time1);
      assertNotSame(time6, time5);
      assertNotSame(time6, time0);
      assertNotSame(time6, time2);
      assertNotSame(time6, time4);
      assertNotSame(time6, time3);
      
      Time time7 = Time.valueOf(localTime0);
      assertNotNull(time7);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertFalse(time0.equals((Object)time1));
      assertTrue(time0.equals((Object)time3));
      assertTrue(time0.equals((Object)time5));
      assertFalse(time0.equals((Object)time2));
      assertFalse(time0.equals((Object)time4));
      assertFalse(time0.equals((Object)time6));
      assertFalse(time7.equals((Object)time4));
      assertFalse(time7.equals((Object)time3));
      assertFalse(time7.equals((Object)time0));
      assertFalse(time7.equals((Object)time2));
      assertTrue(time7.equals((Object)time1));
      assertTrue(time7.equals((Object)time6));
      assertFalse(time7.equals((Object)time5));
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", time7.toString());
      assertNotSame(time0, time1);
      assertNotSame(time0, time2);
      assertNotSame(time0, time7);
      assertNotSame(time0, time4);
      assertNotSame(time0, time6);
      assertNotSame(time0, time3);
      assertNotSame(time0, time5);
      assertNotSame(time7, time1);
      assertNotSame(time7, time6);
      assertNotSame(time7, time4);
      assertNotSame(time7, time3);
      assertNotSame(time7, time0);
      assertNotSame(time7, time2);
      assertNotSame(time7, time5);
      
      long long3 = time0.getTime();
      assertEquals(1392409281320L, long3);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertFalse(time0.equals((Object)time1));
      assertTrue(time0.equals((Object)time3));
      assertTrue(time0.equals((Object)time5));
      assertFalse(time0.equals((Object)time2));
      assertFalse(time0.equals((Object)time7));
      assertFalse(time0.equals((Object)time4));
      assertFalse(time0.equals((Object)time6));
      assertTrue(long3 == long0);
      assertFalse(long3 == long1);
      assertTrue(long3 == long2);
      assertEquals("20:21:21", time0.toString());
      assertNotSame(time0, time1);
      assertNotSame(time0, time2);
      assertNotSame(time0, time7);
      assertNotSame(time0, time4);
      assertNotSame(time0, time6);
      assertNotSame(time0, time3);
      assertNotSame(time0, time5);
      
      Time time8 = xSQLVAR0.encodeTime(time5, calendar0, false);
      assertNotNull(time8);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertFalse(time5.equals((Object)time6));
      assertFalse(time5.equals((Object)time4));
      assertFalse(time5.equals((Object)time7));
      assertFalse(time5.equals((Object)time2));
      assertTrue(time5.equals((Object)time0));
      assertFalse(time5.equals((Object)time1));
      assertTrue(time5.equals((Object)time3));
      assertTrue(time8.equals((Object)time5));
      assertFalse(time8.equals((Object)time2));
      assertFalse(time8.equals((Object)time1));
      assertTrue(time8.equals((Object)time3));
      assertFalse(time8.equals((Object)time7));
      assertFalse(time8.equals((Object)time4));
      assertTrue(time8.equals((Object)time0));
      assertFalse(time8.equals((Object)time6));
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time5.toString());
      assertEquals("20:21:21", time8.toString());
      assertEquals(4, byteArray0.length);
      assertSame(locale0, locale1);
      assertNotSame(time5, time3);
      assertNotSame(time5, time6);
      assertNotSame(time5, time4);
      assertNotSame(time5, time7);
      assertNotSame(time5, time0);
      assertNotSame(time5, time2);
      assertNotSame(time5, time1);
      assertNotSame(time5, time8);
      assertNotSame(time8, time2);
      assertNotSame(time8, time0);
      assertNotSame(time8, time3);
      assertNotSame(time8, time1);
      assertNotSame(time8, time5);
      assertNotSame(time8, time7);
      assertNotSame(time8, time4);
      assertNotSame(time8, time6);
      
      Time time9 = Time.valueOf(localTime0);
      assertNotNull(time9);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertFalse(time0.equals((Object)time1));
      assertTrue(time0.equals((Object)time3));
      assertTrue(time0.equals((Object)time5));
      assertFalse(time0.equals((Object)time2));
      assertFalse(time0.equals((Object)time7));
      assertFalse(time0.equals((Object)time4));
      assertFalse(time0.equals((Object)time6));
      assertTrue(time0.equals((Object)time8));
      assertFalse(time9.equals((Object)time2));
      assertTrue(time9.equals((Object)time6));
      assertTrue(time9.equals((Object)time7));
      assertFalse(time9.equals((Object)time3));
      assertFalse(time9.equals((Object)time4));
      assertFalse(time9.equals((Object)time8));
      assertFalse(time9.equals((Object)time5));
      assertTrue(time9.equals((Object)time1));
      assertFalse(time9.equals((Object)time0));
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", time9.toString());
      assertNotSame(time0, time1);
      assertNotSame(time0, time8);
      assertNotSame(time0, time2);
      assertNotSame(time0, time7);
      assertNotSame(time0, time4);
      assertNotSame(time0, time6);
      assertNotSame(time0, time3);
      assertNotSame(time0, time5);
      assertNotSame(time0, time9);
      assertNotSame(time9, time2);
      assertNotSame(time9, time1);
      assertNotSame(time9, time3);
      assertNotSame(time9, time4);
      assertNotSame(time9, time8);
      assertNotSame(time9, time5);
      assertNotSame(time9, time6);
      assertNotSame(time9, time7);
      assertNotSame(time9, time0);
      
      Object object0 = time9.clone();
      assertNotNull(object0);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertFalse(time0.equals((Object)time1));
      assertTrue(time0.equals((Object)time3));
      assertTrue(time0.equals((Object)time5));
      assertFalse(time0.equals((Object)time2));
      assertFalse(time0.equals((Object)time7));
      assertFalse(time0.equals((Object)time4));
      assertFalse(time0.equals((Object)time6));
      assertFalse(time0.equals((Object)time9));
      assertTrue(time0.equals((Object)time8));
      assertFalse(time9.equals((Object)time2));
      assertTrue(time9.equals((Object)time6));
      assertTrue(time9.equals((Object)time7));
      assertFalse(time9.equals((Object)time3));
      assertFalse(time9.equals((Object)time4));
      assertFalse(time9.equals((Object)time8));
      assertFalse(time9.equals((Object)time5));
      assertTrue(time9.equals((Object)time1));
      assertFalse(time9.equals((Object)time0));
      assertFalse(object0.equals((Object)time4));
      assertFalse(object0.equals((Object)time5));
      assertTrue(object0.equals((Object)time6));
      assertTrue(object0.equals((Object)time7));
      assertFalse(object0.equals((Object)time8));
      assertFalse(object0.equals((Object)time3));
      assertTrue(object0.equals((Object)time9));
      assertFalse(object0.equals((Object)time2));
      assertTrue(object0.equals((Object)time1));
      assertFalse(object0.equals((Object)time0));
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", time9.toString());
      assertEquals("20:21:21", object0.toString());
      assertNotSame(time0, time1);
      assertNotSame(time0, object0);
      assertNotSame(time0, time8);
      assertNotSame(time0, time2);
      assertNotSame(time0, time7);
      assertNotSame(time0, time4);
      assertNotSame(time0, time6);
      assertNotSame(time0, time3);
      assertNotSame(time0, time5);
      assertNotSame(time0, time9);
      assertNotSame(time9, time2);
      assertNotSame(time9, time1);
      assertNotSame(time9, time3);
      assertNotSame(time9, time4);
      assertNotSame(time9, time8);
      assertNotSame(time9, time5);
      assertNotSame(time9, time6);
      assertNotSame(time9, time7);
      assertNotSame(time9, time0);
      assertNotSame(time9, object0);
      assertNotSame(object0, time4);
      assertNotSame(object0, time5);
      assertNotSame(object0, time6);
      assertNotSame(object0, time8);
      assertNotSame(object0, time3);
      assertNotSame(object0, time1);
      assertNotSame(object0, time7);
      assertNotSame(object0, time2);
      assertNotSame(object0, time0);
      assertNotSame(object0, time9);
      
      LocalTime localTime1 = time9.toLocalTime();
      assertNotNull(localTime1);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertFalse(time0.equals((Object)time1));
      assertFalse(time0.equals((Object)object0));
      assertTrue(time0.equals((Object)time3));
      assertTrue(time0.equals((Object)time5));
      assertFalse(time0.equals((Object)time2));
      assertFalse(time0.equals((Object)time7));
      assertFalse(time0.equals((Object)time4));
      assertFalse(time0.equals((Object)time6));
      assertFalse(time0.equals((Object)time9));
      assertTrue(time0.equals((Object)time8));
      assertFalse(time9.equals((Object)time2));
      assertTrue(time9.equals((Object)time6));
      assertTrue(time9.equals((Object)time7));
      assertFalse(time9.equals((Object)time3));
      assertFalse(time9.equals((Object)time4));
      assertFalse(time9.equals((Object)time8));
      assertFalse(time9.equals((Object)time5));
      assertTrue(time9.equals((Object)time1));
      assertTrue(time9.equals((Object)object0));
      assertFalse(time9.equals((Object)time0));
      assertTrue(localTime1.equals((Object)localTime0));
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", time9.toString());
      assertNotSame(time0, time1);
      assertNotSame(time0, object0);
      assertNotSame(time0, time8);
      assertNotSame(time0, time2);
      assertNotSame(time0, time7);
      assertNotSame(time0, time4);
      assertNotSame(time0, time6);
      assertNotSame(time0, time3);
      assertNotSame(time0, time5);
      assertNotSame(time0, time9);
      assertNotSame(localTime0, localTime1);
      assertNotSame(time9, time2);
      assertNotSame(time9, time1);
      assertNotSame(time9, time3);
      assertNotSame(time9, time4);
      assertNotSame(time9, time8);
      assertNotSame(time9, time5);
      assertNotSame(time9, time6);
      assertNotSame(time9, time7);
      assertNotSame(time9, time0);
      assertNotSame(time9, object0);
      assertNotSame(localTime1, localTime0);
      
      long long4 = time9.getTime();
      assertEquals(73281000L, long4);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertFalse(time0.equals((Object)time1));
      assertFalse(time0.equals((Object)object0));
      assertTrue(time0.equals((Object)time3));
      assertTrue(time0.equals((Object)time5));
      assertFalse(time0.equals((Object)time2));
      assertFalse(time0.equals((Object)time7));
      assertFalse(time0.equals((Object)time4));
      assertFalse(time0.equals((Object)time6));
      assertFalse(time0.equals((Object)time9));
      assertTrue(time0.equals((Object)time8));
      assertTrue(localTime0.equals((Object)localTime1));
      assertFalse(time9.equals((Object)time2));
      assertTrue(time9.equals((Object)time6));
      assertTrue(time9.equals((Object)time7));
      assertFalse(time9.equals((Object)time3));
      assertFalse(time9.equals((Object)time4));
      assertFalse(time9.equals((Object)time8));
      assertFalse(time9.equals((Object)time5));
      assertTrue(time9.equals((Object)time1));
      assertTrue(time9.equals((Object)object0));
      assertFalse(time9.equals((Object)time0));
      assertTrue(long4 == long1);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", time9.toString());
      assertNotSame(time0, time1);
      assertNotSame(time0, object0);
      assertNotSame(time0, time8);
      assertNotSame(time0, time2);
      assertNotSame(time0, time7);
      assertNotSame(time0, time4);
      assertNotSame(time0, time6);
      assertNotSame(time0, time3);
      assertNotSame(time0, time5);
      assertNotSame(time0, time9);
      assertNotSame(localTime0, localTime1);
      assertNotSame(time9, time2);
      assertNotSame(time9, time1);
      assertNotSame(time9, time3);
      assertNotSame(time9, time4);
      assertNotSame(time9, time8);
      assertNotSame(time9, time5);
      assertNotSame(time9, time6);
      assertNotSame(time9, time7);
      assertNotSame(time9, time0);
      assertNotSame(time9, object0);
      
      Time time10 = xSQLVAR0.decodeTime(time6, calendar0, true);
      assertNotNull(time10);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertTrue(time10.equals((Object)time6));
      assertFalse(time10.equals((Object)time0));
      assertTrue(time10.equals((Object)time9));
      assertFalse(time10.equals((Object)time8));
      assertFalse(time10.equals((Object)time4));
      assertFalse(time10.equals((Object)time2));
      assertTrue(time10.equals((Object)object0));
      assertFalse(time10.equals((Object)time5));
      assertTrue(time10.equals((Object)time1));
      assertFalse(time10.equals((Object)time3));
      assertTrue(time10.equals((Object)time7));
      assertFalse(time0.equals((Object)time1));
      assertFalse(time0.equals((Object)object0));
      assertTrue(time0.equals((Object)time3));
      assertTrue(time0.equals((Object)time5));
      assertFalse(time0.equals((Object)time2));
      assertFalse(time0.equals((Object)time7));
      assertFalse(time0.equals((Object)time4));
      assertFalse(time0.equals((Object)time6));
      assertFalse(time0.equals((Object)time9));
      assertTrue(time0.equals((Object)time8));
      assertTrue(time6.equals((Object)object0));
      assertFalse(time6.equals((Object)time5));
      assertTrue(time6.equals((Object)time1));
      assertTrue(time6.equals((Object)time7));
      assertFalse(time6.equals((Object)time0));
      assertFalse(time6.equals((Object)time2));
      assertFalse(time6.equals((Object)time8));
      assertTrue(time6.equals((Object)time9));
      assertFalse(time6.equals((Object)time4));
      assertFalse(time6.equals((Object)time3));
      assertTrue(localTime0.equals((Object)localTime1));
      assertEquals("20:21:21", time10.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", time6.toString());
      assertNotSame(time10, object0);
      assertNotSame(time10, time0);
      assertNotSame(time10, time8);
      assertNotSame(time10, time9);
      assertNotSame(time10, time4);
      assertNotSame(time10, time6);
      assertNotSame(time10, time2);
      assertNotSame(time10, time7);
      assertNotSame(time10, time5);
      assertNotSame(time10, time3);
      assertNotSame(time10, time1);
      assertSame(locale0, locale1);
      assertNotSame(time0, time1);
      assertNotSame(time0, object0);
      assertNotSame(time0, time8);
      assertNotSame(time0, time2);
      assertNotSame(time0, time7);
      assertNotSame(time0, time4);
      assertNotSame(time0, time6);
      assertNotSame(time0, time3);
      assertNotSame(time0, time5);
      assertNotSame(time0, time9);
      assertNotSame(time0, time10);
      assertNotSame(time6, time10);
      assertNotSame(time6, time7);
      assertNotSame(time6, time1);
      assertNotSame(time6, time5);
      assertNotSame(time6, object0);
      assertNotSame(time6, time9);
      assertNotSame(time6, time0);
      assertNotSame(time6, time2);
      assertNotSame(time6, time8);
      assertNotSame(time6, time4);
      assertNotSame(time6, time3);
      assertNotSame(localTime0, localTime1);
      
      Time time11 = Time.valueOf(localTime0);
      assertNotNull(time11);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertTrue(time11.equals((Object)time6));
      assertFalse(time11.equals((Object)time0));
      assertTrue(time11.equals((Object)time7));
      assertFalse(time11.equals((Object)time2));
      assertTrue(time11.equals((Object)time10));
      assertFalse(time11.equals((Object)time5));
      assertTrue(time11.equals((Object)object0));
      assertTrue(time11.equals((Object)time1));
      assertFalse(time11.equals((Object)time3));
      assertFalse(time11.equals((Object)time8));
      assertTrue(time11.equals((Object)time9));
      assertFalse(time11.equals((Object)time4));
      assertFalse(time0.equals((Object)time1));
      assertFalse(time0.equals((Object)object0));
      assertTrue(time0.equals((Object)time3));
      assertTrue(time0.equals((Object)time5));
      assertFalse(time0.equals((Object)time2));
      assertFalse(time0.equals((Object)time7));
      assertFalse(time0.equals((Object)time4));
      assertFalse(time0.equals((Object)time6));
      assertFalse(time0.equals((Object)time9));
      assertFalse(time0.equals((Object)time10));
      assertTrue(time0.equals((Object)time8));
      assertTrue(localTime0.equals((Object)localTime1));
      assertEquals("20:21:21", time11.toString());
      assertEquals("20:21:21", time0.toString());
      assertNotSame(time11, time0);
      assertNotSame(time11, time2);
      assertNotSame(time11, time9);
      assertNotSame(time11, time1);
      assertNotSame(time11, object0);
      assertNotSame(time11, time5);
      assertNotSame(time11, time7);
      assertNotSame(time11, time10);
      assertNotSame(time11, time3);
      assertNotSame(time11, time6);
      assertNotSame(time11, time8);
      assertNotSame(time11, time4);
      assertNotSame(time0, time11);
      assertNotSame(time0, time1);
      assertNotSame(time0, object0);
      assertNotSame(time0, time8);
      assertNotSame(time0, time2);
      assertNotSame(time0, time7);
      assertNotSame(time0, time4);
      assertNotSame(time0, time6);
      assertNotSame(time0, time3);
      assertNotSame(time0, time9);
      assertNotSame(time0, time5);
      assertNotSame(time0, time10);
      assertNotSame(localTime0, localTime1);
      
      Time time12 = xSQLVAR0.decodeTime(time2, calendar0, false);
      assertNotNull(time12);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertFalse(time2.equals((Object)time9));
      assertFalse(time2.equals((Object)time0));
      assertFalse(time2.equals((Object)time3));
      assertFalse(time2.equals((Object)time11));
      assertFalse(time2.equals((Object)time8));
      assertFalse(time2.equals((Object)time6));
      assertFalse(time2.equals((Object)time10));
      assertFalse(time2.equals((Object)time7));
      assertFalse(time2.equals((Object)time1));
      assertFalse(time2.equals((Object)object0));
      assertFalse(time2.equals((Object)time5));
      assertTrue(time2.equals((Object)time4));
      assertTrue(time12.equals((Object)time4));
      assertFalse(time12.equals((Object)time11));
      assertFalse(time12.equals((Object)time3));
      assertFalse(time12.equals((Object)time8));
      assertFalse(time12.equals((Object)time5));
      assertFalse(time12.equals((Object)time10));
      assertFalse(time12.equals((Object)time7));
      assertFalse(time12.equals((Object)time9));
      assertFalse(time12.equals((Object)time0));
      assertFalse(time12.equals((Object)object0));
      assertFalse(time12.equals((Object)time1));
      assertTrue(time12.equals((Object)time2));
      assertFalse(time12.equals((Object)time6));
      assertEquals("00:00:00", time2.toString());
      assertEquals("00:00:00", time12.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertNotSame(time2, time12);
      assertNotSame(time2, time0);
      assertNotSame(time2, time3);
      assertNotSame(time2, time11);
      assertNotSame(time2, time4);
      assertNotSame(time2, time8);
      assertNotSame(time2, time6);
      assertNotSame(time2, time10);
      assertNotSame(time2, time7);
      assertNotSame(time2, object0);
      assertNotSame(time2, time5);
      assertNotSame(time2, time9);
      assertNotSame(time2, time1);
      assertNotSame(time12, time11);
      assertNotSame(time12, time3);
      assertNotSame(time12, time4);
      assertNotSame(time12, time8);
      assertNotSame(time12, time5);
      assertNotSame(time12, time10);
      assertNotSame(time12, time7);
      assertNotSame(time12, time9);
      assertNotSame(time12, time0);
      assertNotSame(time12, object0);
      assertNotSame(time12, time2);
      assertNotSame(time12, time1);
      assertNotSame(time12, time6);
      assertSame(locale0, locale1);
      
      byte[][] byteArray1 = new byte[0][5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = linkedList0.add(byteArray1);
      assertTrue(boolean1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(linkedList0.contains(byteArray0));
      assertTrue(linkedList0.contains(byteArray1));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(linkedList0.contains(byteArray0));
      assertTrue(linkedList0.contains(byteArray1));
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.1084013788541878
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedList0.clear();
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      fBCachedFetcher0.beforeFirst();
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object object0 = new Object();
      Predicate<byte[][]> predicate0 = Predicate.isEqual(object0);
      Predicate<byte[][]> predicate1 = predicate0.negate();
      Predicate<byte[][]> predicate2 = predicate0.negate();
      Predicate.isEqual(object0);
      Predicate<byte[][]> predicate3 = predicate1.negate();
      Predicate<byte[][]> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = Predicate.isEqual(object0);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate5.negate();
      predicate1.negate();
      Predicate<Object> predicate8 = predicate6.negate();
      predicate3.or(predicate1);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      predicate7.test(jMXPrincipal0);
      Predicate<byte[][]> predicate9 = predicate1.and(predicate5);
      Predicate<Object> predicate10 = predicate8.and(predicate7);
      predicate7.test(predicate9);
      predicate7.test(predicate10);
      Predicate<Object> predicate11 = predicate8.negate();
      predicate11.test(predicate4);
      Predicate<byte[][]> predicate12 = predicate4.and(predicate9);
      predicate12.negate();
      predicate3.negate();
      Predicate<Object> predicate13 = predicate10.negate();
      predicate2.and(predicate5);
      predicate7.and(predicate8);
      Predicate.isEqual(object0);
      Predicate.isEqual((Object) predicate4);
      predicate8.and(predicate11);
      Predicate<Object> predicate14 = predicate13.negate();
      predicate10.negate();
      predicate14.and(predicate7);
      Object object1 = new Object();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][6];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)88;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte) (-103);
      byteArray1[5] = (byte) (-101);
      byteArray1[6] = (byte) (-47);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-101);
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte)43;
      byteArray2[3] = (byte) (-101);
      byteArray2[4] = (byte)88;
      byteArray2[5] = (byte) (-47);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)88;
      byteArray3[1] = (byte) (-21);
      byteArray3[2] = (byte)43;
      byteArray3[3] = (byte) (-62);
      byteArray3[4] = (byte) (-1);
      byteArray3[5] = (byte) (-56);
      byteArray3[6] = (byte) (-103);
      byteArray3[7] = (byte)43;
      byteArray0[2] = byteArray3;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      MockInstant.now();
      byte[][] byteArray0 = new byte[4][4];
      linkedList0.clear();
      Locale locale0 = Locale.TAIWAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Time time0 = xSQLVAR0.decodeTimeCalendar(byteArray0[0], calendar0);
      time0.getTime();
      LocalTime localTime0 = time0.toLocalTime();
      Time time1 = xSQLVAR0.decodeTime(byteArray0[0]);
      locale0.getDisplayVariant();
      time1.getTime();
      time1.getTime();
      time0.after(time1);
      time1.getTime();
      time1.after(time0);
      time1.getTime();
      Integer integer0 = new Integer(0);
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      xSQLVAR1.decodeTime(time1, calendar0, false);
      Time time2 = xSQLVAR0.decodeTime((byte[]) null);
      Locale locale1 = Locale.CANADA_FRENCH;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) null, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0, locale_FilteringMode1);
      locale1.getDisplayVariant();
      locale0.getExtensionKeys();
      linkedList0.add(byteArray0);
      Time time3 = new Time(0);
      Time.valueOf(localTime0);
      xSQLVAR0.decodeTime(time2, calendar0, false);
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative(46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Instant instant0 = MockInstant.ofEpochSecond(2466L);
      Timestamp timestamp0 = Timestamp.from(instant0);
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.ENGLISH;
      Locale locale2 = locale0.stripExtensions();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      Locale.getISOLanguages();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale3 = locale0.stripExtensions();
      Locale.setDefault(locale_Category0, locale3);
      Timestamp timestamp1 = xSQLVAR0.encodeTimestamp(timestamp0, (Calendar) mockGregorianCalendar0, true);
      locale1.getDisplayLanguage(locale2);
      timestamp1.clone();
      Timestamp.from(instant0);
      Timestamp timestamp2 = new Timestamp(0);
      Timestamp.from(instant0);
      timestamp1.toInstant();
      xSQLVAR0.encodeTimestamp(timestamp1, (Calendar) mockGregorianCalendar0, true);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isEmpty();
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList2.add((byte[][]) null);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList3.clear();
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList3, (FBObjectListener.FetcherListener) null);
      int int0 = fBCachedFetcher0.getFetchSize();
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      FBCachedLongVarCharField[] fBCachedLongVarCharFieldArray0 = new FBCachedLongVarCharField[5];
      FBCachedLongVarCharField fBCachedLongVarCharField0 = mock(FBCachedLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBCachedLongVarCharFieldArray0[0] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[1] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[2] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[3] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[3] = fBCachedLongVarCharField0;
      Callable<byte[][]> callable0 = (Callable<byte[][]>) mock(Callable.class, new ViolatedAssumptionAnswer());
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[8];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[5] = fBBlobField0;
      fBBlobFieldArray0[2] = fBBlobFieldArray0[0];
      fBBlobFieldArray0[1] = fBBlobFieldArray0[1];
      fBBlobFieldArray0[7] = fBBlobFieldArray0[2];
      fBBlobFieldArray0[4] = fBBlobFieldArray0[3];
      fBBlobFieldArray0[5] = fBBlobFieldArray0[4];
      fBBlobFieldArray0[6] = fBBlobFieldArray0[5];
      fBBlobFieldArray0[7] = fBBlobFieldArray0[4];
      linkedList0.toArray(fBBlobFieldArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][1];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)66;
      byteArray2[4] = (byte) (-42);
      byteArray2[5] = (byte) (-40);
      byteArray2[6] = (byte) (-43);
      byteArray2[7] = (byte) (-1);
      byteArray2[8] = (byte) (-34);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[11];
      byteArray3[1] = (byte) (-34);
      byteArray2[8] = (byte)36;
      byteArray3[4] = (byte)110;
      byteArray0[2] = byteArray3;
      boolean boolean0 = fBCachedFetcher0.first();
      assertFalse(boolean0);
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.9487205928347628
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Object object0 = new Object();
      Predicate<byte[][]> predicate0 = Predicate.isEqual(object0);
      Subject subject0 = new Subject();
      Predicate<byte[][]> predicate1 = predicate0.negate();
      Predicate<byte[][]> predicate2 = predicate0.negate();
      Object object1 = new Object();
      Predicate.isEqual(object1);
      Predicate<byte[][]> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      predicate3.and(predicate6);
      Predicate<Object> predicate7 = predicate4.and(predicate6);
      Predicate<Object> predicate8 = predicate5.negate();
      predicate2.and(predicate1);
      Predicate<byte[][]> predicate9 = predicate3.negate();
      predicate3.negate();
      Predicate<Object> predicate10 = predicate5.negate();
      predicate3.and(predicate0);
      Predicate<Object> predicate11 = predicate8.and(predicate10);
      Predicate.isEqual((Object) predicate11);
      Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate12 = predicate10.and(predicate11);
      Predicate<Object> predicate13 = predicate5.negate();
      predicate11.test(predicate7);
      predicate10.negate();
      predicate13.and(predicate12);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[6][7];
      byteArray0[0] = null;
      byteArray0[1] = byteArray0[0];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)100;
      byteArray0[2] = byteArray1;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Object object0 = new Object();
      Predicate<byte[][]> predicate0 = Predicate.isEqual(object0);
      Predicate<byte[][]> predicate1 = predicate0.negate();
      Predicate<byte[][]> predicate2 = predicate0.negate();
      Object object1 = new Object();
      Predicate.isEqual((Object) predicate2);
      Integer integer0 = new Integer(335544563);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate3.and(predicate3);
      Predicate<byte[][]> predicate6 = predicate2.and(predicate0);
      Predicate<Object> predicate7 = predicate3.and(predicate4);
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate<byte[][]> predicate9 = Predicate.isEqual((Object) predicate8);
      predicate6.or(predicate9);
      Predicate<byte[][]> predicate10 = predicate1.and(predicate8);
      Predicate<byte[][]> predicate11 = predicate10.and(predicate7);
      predicate11.negate();
      predicate6.negate();
      Predicate<Object> predicate12 = predicate3.negate();
      predicate4.and(predicate5);
      Predicate<Object> predicate13 = predicate3.or(predicate12);
      predicate6.and(predicate0);
      Predicate<Object> predicate14 = predicate12.and(predicate3);
      Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate15 = predicate14.or(predicate8);
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate16 = predicate5.and(predicate13);
      predicate14.test(predicate16);
      predicate14.negate();
      predicate14.negate();
      predicate15.test(object1);
      predicate7.negate();
      predicate3.and(predicate16);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      try { 
        fBCachedFetcher0.absolute(0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }
}
