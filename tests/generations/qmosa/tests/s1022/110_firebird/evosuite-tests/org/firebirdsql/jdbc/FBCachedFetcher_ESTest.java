/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 22:08:33 GMT 2020
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ThreadFactory;
import java.util.function.Consumer;
import java.util.function.Predicate;
import javax.management.remote.JMXPrincipal;
import javax.security.auth.Subject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.AbstractIscStmtHandle;
import org.firebirdsql.gds.impl.AbstractIscTrHandle;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.gds.impl.jni.NativeGDSImpl;
import org.firebirdsql.gds.impl.jni.isc_blob_handle_impl;
import org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl;
import org.firebirdsql.gds.impl.jni.isc_tr_handle_impl;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.isc_db_handle_impl;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.field.FBBlobField;
import org.firebirdsql.jdbc.field.FBCachedLongVarCharField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8734517375545654
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      MockInstant.ofEpochSecond((long) 0);
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate();
      MockDate mockDate2 = new MockDate(0, 0, 0, 164, 164, 0);
      Integer integer0 = new Integer((-1));
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      byte[][] byteArray0 = new byte[4][3];
      byteArray0[0] = null;
      byteArray0[1] = null;
      byteArray0[3] = null;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      byte[][] byteArray1 = new byte[4][8];
      byteArray1[0] = null;
      byteArray1[2] = null;
      byteArray1[3] = null;
      fBCachedFetcher0.insertRow(byteArray1);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.next();
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8848713335781606
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Instant instant0 = MockInstant.ofEpochSecond((long) 0);
      Timestamp timestamp0 = Timestamp.from(instant0);
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate();
      Locale locale0 = Locale.PRC;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      Locale locale1 = (Locale)locale0.clone();
      Locale locale2 = Locale.TAIWAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList2.add((Locale.LanguageRange) null);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) set0);
      PriorityBlockingQueue<Locale> priorityBlockingQueue0 = new PriorityBlockingQueue<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) priorityBlockingQueue0, locale_FilteringMode0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale0.getUnicodeLocaleKeys();
      Locale.setDefault(locale_Category0, locale1);
      locale1.getDisplayScript();
      Timestamp timestamp1 = xSQLVAR0.encodeTimestamp(timestamp0, (Calendar) mockGregorianCalendar0, true);
      timestamp1.before(timestamp0);
      timestamp1.clone();
      Timestamp timestamp2 = new Timestamp(0);
      Integer integer0 = new Integer(108);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8711604142318066
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Instant instant0 = MockInstant.ofEpochSecond((-2460L));
      Timestamp.from(instant0);
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate();
      MockDate mockDate2 = new MockDate(119, 1628, 164);
      Integer integer0 = new Integer((-1505));
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.addFirst((byte[][]) null);
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      System.setCurrentTimeMillis(164);
      boolean boolean0 = fBCachedFetcher0.next();
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8726130058604367
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      MockInstant.ofEpochSecond((long) 0);
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate();
      MockDate mockDate2 = new MockDate(0, 0, 0, 164, 164, 0);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      byte[][] byteArray0 = new byte[4][3];
      byteArray0[0] = null;
      byteArray0[1] = null;
      byteArray0[3] = null;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      byte[][] byteArray1 = new byte[4][8];
      byteArray1[0] = null;
      byteArray1[2] = null;
      fBCachedFetcher0.relative(2433);
      byteArray1[3] = null;
      fBCachedFetcher0.insertRow(byteArray1);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.insertRow((byte[][]) null);
      boolean boolean0 = fBCachedFetcher0.relative(0);
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8337855468200532
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Instant instant0 = MockInstant.ofEpochSecond((long) 0);
      Timestamp.from(instant0);
      MockDate mockDate0 = new MockDate();
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte)23;
      byteArray0[4] = (byte) (-6);
      MockDate mockDate1 = new MockDate();
      MockDate mockDate2 = new MockDate((byte) (-6), 164, 108);
      Integer integer0 = new Integer(108);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.previous();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.711845135233912
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Instant instant0 = MockInstant.ofEpochSecond((long) 0);
      Timestamp timestamp0 = Timestamp.from(instant0);
      MockDate mockDate0 = new MockDate();
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)69;
      MockDate mockDate1 = new MockDate();
      Locale locale0 = Locale.PRC;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      Locale locale1 = (Locale)locale0.clone();
      Locale locale2 = Locale.TAIWAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) set0);
      PriorityBlockingQueue<Locale> priorityBlockingQueue0 = new PriorityBlockingQueue<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) priorityBlockingQueue0, locale_FilteringMode0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale1);
      MockDate mockDate2 = new MockDate((byte)69, 164, 108);
      locale1.getDisplayScript();
      Timestamp timestamp1 = xSQLVAR0.encodeTimestamp(timestamp0, (Calendar) mockGregorianCalendar0, true);
      timestamp1.before(timestamp0);
      timestamp1.clone();
      Timestamp timestamp2 = new Timestamp(0);
      Integer integer0 = new Integer(108);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.isEmpty());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8848713335781606
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Instant instant0 = MockInstant.ofEpochSecond((long) 0);
      Timestamp timestamp0 = Timestamp.from(instant0);
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate();
      Locale locale0 = Locale.PRC;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      linkedList1.add((Locale.LanguageRange) null);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      Locale locale1 = (Locale)locale0.clone();
      Locale locale2 = Locale.TAIWAN;
      locale0.getDisplayName();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList2.add((Locale.LanguageRange) null);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) set0);
      PriorityBlockingQueue<Locale> priorityBlockingQueue0 = new PriorityBlockingQueue<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) priorityBlockingQueue0, locale_FilteringMode0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale0.getUnicodeLocaleKeys();
      Locale.setDefault(locale_Category0, locale1);
      locale1.getDisplayScript();
      Timestamp timestamp1 = xSQLVAR0.encodeTimestamp(timestamp0, (Calendar) mockGregorianCalendar0, true);
      timestamp1.before(timestamp0);
      timestamp1.clone();
      Timestamp timestamp2 = new Timestamp(0);
      Integer integer0 = new Integer(108);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      int int0 = fBCachedFetcher0.getRowNum();
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8905570113915662
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      linkedList5.pollLast();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList4);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.isFirst();
      fBCachedFetcher0.absolute((-1108));
      int int0 = 100;
      GDSType.getType("");
      NativeGDSImpl nativeGDSImpl0 = null;
      try {
        nativeGDSImpl0 = new NativeGDSImpl((GDSType) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9085352816435597
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Instant instant0 = MockInstant.ofEpochSecond((long) 0);
      Timestamp timestamp0 = Timestamp.from(instant0);
      MockDate mockDate0 = new MockDate();
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte)23;
      byteArray0[4] = (byte) (-6);
      MockDate mockDate1 = new MockDate();
      Locale locale0 = Locale.GERMANY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      calendar0.getCalendarType();
      Locale locale1 = (Locale)locale0.clone();
      calendar0.getTimeInMillis();
      locale0.stripExtensions();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      mockGregorianCalendar0.set(164, (int) (byte)23, 108, (int) (byte) (-6), 164);
      MockDate mockDate2 = new MockDate((byte) (-6), (-497), 0, (byte) (-6), (byte) (-6));
      locale1.getDisplayScript();
      Timestamp timestamp1 = xSQLVAR0.encodeTimestamp(timestamp0, (Calendar) mockGregorianCalendar0, true);
      timestamp1.before(timestamp0);
      timestamp1.clone();
      timestamp1.clone();
      Integer integer0 = new Integer(108);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.isEmpty());
      
      fBCachedFetcher0.deleteRow();
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3945573191650282
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Instant instant0 = MockInstant.ofEpochSecond((-2460L));
      Timestamp.from(instant0);
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate();
      MockDate mockDate2 = new MockDate(0, 0, 0, 164, 164, 0);
      Integer integer0 = new Integer((-1));
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      byte[][] byteArray0 = new byte[4][3];
      byteArray0[0] = null;
      byteArray0[1] = null;
      byteArray0[2] = null;
      byteArray0[3] = null;
      linkedList0.add(byteArray0);
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet1);
      byte[][] byteArray1 = new byte[4][8];
      byteArray1[0] = null;
      byteArray1[1] = null;
      byteArray1[2] = null;
      FBResultSet fBResultSet2 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet2);
      fBCachedFetcher0.relative(0);
      boolean boolean0 = fBCachedFetcher0.relative(2735);
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8711604142318063
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      MockInstant.ofEpochSecond((long) 0);
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate();
      MockDate mockDate2 = new MockDate(0, 0, 0, 164, 164, 0);
      Integer integer0 = new Integer((-1));
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      byte[][] byteArray0 = new byte[4][3];
      byteArray0[0] = null;
      byteArray0[1] = null;
      byteArray0[3] = null;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      byte[][] byteArray1 = new byte[4][8];
      byteArray1[0] = null;
      byteArray1[2] = null;
      byteArray1[3] = null;
      fBCachedFetcher0.insertRow(byteArray1);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.updateRow(byteArray1);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      byte[][] byteArray0 = new byte[7][2];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-126);
      byteArray1[1] = (byte)79;
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte) (-83);
      byteArray1[4] = (byte) (-32);
      byteArray1[5] = (byte)9;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)79;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)122;
      byteArray3[1] = (byte) (-1);
      byteArray3[2] = (byte) (-32);
      byteArray3[3] = (byte)9;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte) (-83);
      byteArray4[1] = (byte)79;
      byteArray4[2] = (byte) (-32);
      byteArray4[3] = (byte) (-32);
      byteArray4[4] = (byte)122;
      byteArray4[5] = (byte)79;
      byteArray4[6] = (byte) (-83);
      byteArray4[7] = (byte) (-126);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[3];
      byteArray5[0] = (byte)79;
      byteArray5[1] = (byte)79;
      byteArray5[2] = (byte) (-1);
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[3];
      byteArray6[0] = (byte)9;
      byteArray6[1] = (byte) (-32);
      byteArray6[2] = (byte) (-83);
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[4];
      byteArray7[0] = (byte)122;
      byteArray7[1] = (byte)122;
      byteArray7[2] = (byte) (-32);
      byteArray7[3] = (byte)122;
      byteArray0[6] = byteArray7;
      linkedList0.add(byteArray0);
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.relative(619);
      boolean boolean0 = fBCachedFetcher0.isAfterLast();
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      byte[][] byteArray0 = new byte[0][6];
      linkedList0.add(byteArray0);
      linkedList0.sort((Comparator<? super byte[][]>) null);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      linkedList4.offerLast(byteArray0);
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList3);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList4, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.first();
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBResultSet0.getRow());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Instant instant0 = MockInstant.ofEpochSecond((-2460L));
      Timestamp.from(instant0);
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate();
      MockDate mockDate2 = new MockDate(0, 0, 0, 164, 164, 0);
      Integer integer0 = new Integer((-1));
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      byte[][] byteArray0 = new byte[4][3];
      byteArray0[0] = null;
      byteArray0[1] = null;
      byteArray0[2] = null;
      byteArray0[3] = null;
      linkedList0.add(byteArray0);
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet1);
      byte[][] byteArray1 = new byte[4][8];
      byteArray1[0] = null;
      byteArray1[1] = null;
      byteArray1[2] = null;
      byteArray1[3] = null;
      fBCachedFetcher0.next();
      boolean boolean0 = fBCachedFetcher0.next();
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.451255557753324
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.parallelStream();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      fBCachedFetcher0.absolute((-725));
      fBCachedFetcher0.next();
      fBCachedFetcher0.relative((-2748));
      fBCachedFetcher0.previous();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.next();
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList1, fBResultSet0);
      fBCachedFetcher1.previous();
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.isEmpty();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.isLast();
      // Undeclared exception!
      try { 
        fBCachedFetcher1.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5367224694372192
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[10][4];
      linkedList0.add(byteArray0);
      byte[][] byteArray1 = new byte[8][0];
      linkedList0.add(byteArray1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      linkedList0.offerLast(byteArray1);
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.isEmpty();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl();
      isc_stmt_handle_impl1.getRsr_rdb();
      isc_stmt_handle_impl1.setRsr_rdb((isc_db_handle_impl) null);
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      isc_stmt_handle_impl1.registerTransaction(isc_tr_handle_impl0);
      org.firebirdsql.gds.impl.wire.isc_tr_handle_impl isc_tr_handle_impl1 = new org.firebirdsql.gds.impl.wire.isc_tr_handle_impl();
      isc_stmt_handle_impl0.registerTransaction(isc_tr_handle_impl1);
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      isc_blob_handle_impl1.getDb();
      isc_blob_handle_impl0.setDb((org.firebirdsql.gds.impl.jni.isc_db_handle_impl) null);
      isc_blob_handle_impl isc_blob_handle_impl2 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.getTr();
      isc_stmt_handle_impl0.getRsr_rdb();
      isc_blob_handle_impl0.setDb((org.firebirdsql.gds.impl.jni.isc_db_handle_impl) null);
      isc_tr_handle_impl1.forgetResultSets();
      isc_blob_handle_impl2.setTr((isc_tr_handle_impl) null);
      isc_tr_handle_impl isc_tr_handle_impl2 = new isc_tr_handle_impl();
      isc_stmt_handle_impl0.registerTransaction(isc_tr_handle_impl2);
      org.firebirdsql.gds.impl.wire.isc_tr_handle_impl isc_tr_handle_impl3 = new org.firebirdsql.gds.impl.wire.isc_tr_handle_impl();
      isc_tr_handle_impl1.unregisterStatementFromTransaction((AbstractIscStmtHandle) null);
      isc_tr_handle_impl3.forgetResultSets();
      isc_tr_handle_impl3.unregisterStatementFromTransaction((AbstractIscStmtHandle) null);
      isc_stmt_handle_impl0.setUpdateCount(1);
      isc_stmt_handle_impl0.setSelectCount(1);
      isc_stmt_handle_impl0.setSelectCount(0);
      isc_blob_handle_impl isc_blob_handle_impl3 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.setTr(isc_tr_handle_impl2);
      isc_blob_handle_impl2.setTr((isc_tr_handle_impl) null);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.last();
      assertEquals(0, fBResultSet0.getRow());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Object object0 = new Object();
      Predicate<byte[][]> predicate0 = Predicate.isEqual(object0);
      Subject subject0 = new Subject();
      Predicate<byte[][]> predicate1 = predicate0.negate();
      predicate1.negate();
      Predicate<byte[][]> predicate2 = predicate1.negate();
      Object object1 = new Object();
      Predicate.isEqual(object1);
      Predicate<byte[][]> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      Predicate<Object> predicate7 = predicate6.or(predicate5);
      predicate3.and(predicate7);
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate<byte[][]> predicate9 = predicate3.negate();
      Integer integer0 = new Integer(2004);
      Object object2 = new Object();
      predicate3.negate();
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate<Object> predicate11 = predicate5.negate();
      predicate3.and(predicate0);
      predicate4.test(subject0);
      Predicate<Object> predicate12 = predicate10.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate13 = predicate11.and(predicate8);
      Predicate<Object> predicate14 = predicate10.negate();
      predicate14.and(predicate13);
      predicate8.test(predicate10);
      predicate12.negate();
      predicate14.and(predicate13);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.push((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      MockInstant.now();
      byte[][] byteArray0 = new byte[9][4];
      Locale locale0 = Locale.GERMANY;
      MockCalendar.getInstance(locale0);
      Time time0 = xSQLVAR0.decodeTime((byte[]) null);
      time0.getTime();
      LocalTime localTime0 = time0.toLocalTime();
      Time time1 = xSQLVAR0.decodeTime(byteArray0[0]);
      time0.setTime((-2572L));
      locale0.getDisplayVariant();
      time1.getTime();
      time1.getTime();
      time0.after(time1);
      time0.getTime();
      Time time2 = new Time(0);
      Time time3 = new Time(0);
      locale0.getDisplayVariant();
      locale0.getExtensionKeys();
      Time time4 = new Time(0);
      xSQLVAR0.decodeTime(byteArray0[0]);
      Time.valueOf(localTime0);
      Time time5 = Time.valueOf(localTime0);
      time5.getTime();
      Time.valueOf(localTime0);
      Time time6 = new Time((-2572L));
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[9][6];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)110;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      linkedList0.add(byteArray0);
      byteArray2[0] = (byte) (-44);
      byteArray2[1] = (byte)117;
      byteArray2[3] = (byte)110;
      byteArray2[5] = (byte)110;
      linkedList0.add(byteArray0);
      byteArray2[8] = (byte) (-2);
      byteArray0[1] = byteArray2;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl();
      isc_stmt_handle_impl1.getTransaction();
      isc_stmt_handle_impl0.registerTransaction((AbstractIscTrHandle) null);
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.getTr();
      isc_blob_handle_impl1.setTr((isc_tr_handle_impl) null);
      isc_blob_handle_impl1.getTr();
      isc_stmt_handle_impl0.registerTransaction((AbstractIscTrHandle) null);
      org.firebirdsql.gds.impl.wire.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.wire.isc_tr_handle_impl();
      isc_tr_handle_impl0.unregisterStatementFromTransaction(isc_stmt_handle_impl1);
      isc_tr_handle_impl0.forgetResultSets();
      isc_tr_handle_impl0.unregisterStatementFromTransaction(isc_stmt_handle_impl1);
      isc_stmt_handle_impl1.registerTransaction(isc_tr_handle_impl0);
      isc_stmt_handle_impl0.setUpdateCount(1);
      isc_stmt_handle_impl0.setSelectCount(1);
      isc_stmt_handle_impl0.setSelectCount(0);
      isc_blob_handle_impl isc_blob_handle_impl2 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.setTr((isc_tr_handle_impl) null);
      isc_blob_handle_impl1.setTr((isc_tr_handle_impl) null);
      isc_stmt_handle_impl0.setStatementType(1);
      isc_stmt_handle_impl0.setExecutionPlan((String) null);
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl3 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl3.registerTransaction(isc_tr_handle_impl0);
      isc_blob_handle_impl0.setBlobId(0);
      isc_stmt_handle_impl isc_stmt_handle_impl4 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setStatementType(4);
      isc_stmt_handle_impl isc_stmt_handle_impl5 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl5.ensureCapacity(1);
      isc_stmt_handle_impl3.setExecutionPlan((String) null);
      isc_stmt_handle_impl isc_stmt_handle_impl6 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setSelectCount(4);
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((GDSHelper) null, 5, 4, isc_stmt_handle_impl6, (FBObjectListener.FetcherListener) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4142790651247086
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl();
      isc_stmt_handle_impl1.getTransaction();
      isc_stmt_handle_impl0.registerTransaction((AbstractIscTrHandle) null);
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.getTr();
      isc_blob_handle_impl1.setTr((isc_tr_handle_impl) null);
      isc_blob_handle_impl1.getTr();
      isc_stmt_handle_impl0.registerTransaction((AbstractIscTrHandle) null);
      org.firebirdsql.gds.impl.wire.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.wire.isc_tr_handle_impl();
      isc_tr_handle_impl0.forgetResultSets();
      isc_tr_handle_impl0.registerStatementWithTransaction(isc_stmt_handle_impl1);
      isc_tr_handle_impl0.unregisterStatementFromTransaction(isc_stmt_handle_impl0);
      isc_stmt_handle_impl0.getTransaction();
      isc_stmt_handle_impl1.registerTransaction((AbstractIscTrHandle) null);
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl2.setUpdateCount(5);
      isc_stmt_handle_impl2.setSelectCount((-2343));
      isc_stmt_handle_impl2.setSelectCount(1);
      isc_blob_handle_impl isc_blob_handle_impl2 = new isc_blob_handle_impl();
      isc_blob_handle_impl1.setTr((isc_tr_handle_impl) null);
      isc_blob_handle_impl1.setTr((isc_tr_handle_impl) null);
      isc_stmt_handle_impl0.setStatementType(2);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Predicate.isEqual((Object) isc_blob_handle_impl0);
      byte[][] byteArray0 = new byte[2][6];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)27;
      byteArray1[1] = (byte)57;
      byteArray1[2] = (byte)92;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)27;
      byteArray2[2] = (byte)57;
      byteArray2[3] = (byte)57;
      byteArray2[4] = (byte)57;
      byteArray2[5] = (byte)23;
      byteArray0[1] = byteArray2;
      linkedList0.add(byteArray0);
      linkedList0.listIterator();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute((-1929));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[][] byteArray0 = new byte[9][4];
      Time time0 = xSQLVAR0.decodeTime((byte[]) null);
      time0.getTime();
      LocalTime localTime0 = time0.toLocalTime();
      Time time1 = xSQLVAR0.decodeTime(byteArray0[0]);
      Time.valueOf(localTime0);
      time1.after(time0);
      time0.setTime((-2572L));
      time1.getTime();
      Time.valueOf(localTime0);
      time1.getTime();
      ZoneId.getAvailableZoneIds();
      time0.after(time1);
      time0.getTime();
      Time time2 = new Time(0);
      LocalTime localTime1 = time2.toLocalTime();
      Time time3 = new Time(0);
      LocalTime localTime2 = time3.toLocalTime();
      Time.valueOf(localTime2);
      Time.valueOf(localTime1);
      Time time4 = new Time(0);
      xSQLVAR0.decodeTime(byteArray0[0]);
      Time.valueOf(localTime0);
      Time time5 = Time.valueOf(localTime1);
      time5.before(time4);
      time5.after(time2);
      Time.valueOf(localTime1);
      time5.toLocalTime();
      time5.getTime();
      linkedList0.push((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative(1613);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3579778549873243
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[][] byteArray0 = new byte[9][4];
      Time time0 = xSQLVAR0.decodeTime((byte[]) null);
      time0.getTime();
      LocalTime localTime0 = time0.toLocalTime();
      Time time1 = xSQLVAR0.decodeTime(byteArray0[0]);
      Time time2 = Time.valueOf(localTime0);
      time1.after(time0);
      time0.setTime((-2572L));
      time1.getTime();
      Time time3 = Time.valueOf(localTime0);
      time1.getTime();
      ZoneId.getAvailableZoneIds();
      time0.after(time1);
      time0.getTime();
      LocalTime localTime1 = time1.toLocalTime();
      Time time4 = new Time(0);
      Time time5 = Time.valueOf(localTime1);
      linkedList0.removeFirstOccurrence(time3);
      time5.getTime();
      xSQLVAR0.decodeTime(byteArray0[0]);
      Time time6 = Time.valueOf(localTime0);
      time1.after(time5);
      Time.valueOf(localTime0);
      Time time7 = new Time(0);
      time7.before(time0);
      time3.after(time6);
      Time time8 = Time.valueOf(localTime1);
      Time.valueOf(localTime1);
      time2.toLocalTime();
      time8.getTime();
      linkedList0.push((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[][] byteArray0 = new byte[9][4];
      Time time0 = xSQLVAR0.decodeTime((byte[]) null);
      time0.getTime();
      LocalTime localTime0 = time0.toLocalTime();
      Time time1 = xSQLVAR0.decodeTime(byteArray0[0]);
      Time.valueOf(localTime0);
      time1.after(time0);
      time0.setTime((-2572L));
      time1.getTime();
      Time.valueOf(localTime0);
      time1.getTime();
      ZoneId.getAvailableZoneIds();
      time0.after(time1);
      time0.clone();
      time0.getTime();
      Time time2 = new Time(0);
      LocalTime localTime1 = time2.toLocalTime();
      Time time3 = new Time(0);
      LocalTime localTime2 = time3.toLocalTime();
      Time.valueOf(localTime2);
      Time.valueOf(localTime1);
      Time time4 = new Time(0);
      xSQLVAR0.decodeTime(byteArray0[0]);
      Time.valueOf(localTime0);
      Time time5 = Time.valueOf(localTime1);
      time5.before(time4);
      time5.after(time2);
      Time.valueOf(localTime1);
      time5.toLocalTime();
      time5.getTime();
      linkedList0.push((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8438614379613665
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[9][6];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)110;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      linkedList0.add(byteArray0);
      byteArray2[0] = (byte) (-44);
      byteArray2[1] = (byte) (-110);
      byteArray2[2] = (byte)110;
      byteArray2[3] = (byte)110;
      byteArray2[4] = (byte)110;
      byteArray2[3] = (byte)110;
      byteArray2[8] = (byte) (-2);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)110;
      byteArray3[1] = (byte) (-44);
      byteArray3[2] = (byte)110;
      byteArray3[3] = (byte) (-110);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.updateRow(byteArray0);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.afterLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[][] byteArray0 = new byte[3][6];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)104;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)104;
      byteArray2[1] = (byte) (-110);
      byteArray2[3] = (byte)104;
      byteArray2[5] = (byte)104;
      byteArray2[8] = (byte) (-2);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)104;
      byteArray3[1] = (byte)104;
      byteArray3[2] = (byte)104;
      byteArray3[3] = (byte)104;
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedBlockingQueue<byte[][]> linkedBlockingQueue0 = new LinkedBlockingQueue<byte[][]>();
      linkedList0.retainAll(linkedBlockingQueue0);
      Consumer<byte[][]> consumer0 = (Consumer<byte[][]>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isBeforeFirst();
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      MockInstant.now();
      byte[][] byteArray0 = new byte[5][4];
      linkedList0.clear();
      Locale locale0 = Locale.TAIWAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Time time0 = xSQLVAR0.decodeTimeCalendar(byteArray0[0], calendar0);
      time0.getTime();
      LocalTime localTime0 = time0.toLocalTime();
      Time time1 = xSQLVAR0.decodeTime(byteArray0[0]);
      locale0.getDisplayVariant();
      time1.getTime();
      time1.getTime();
      time0.after(time1);
      time0.getTime();
      Time time2 = new Time(0);
      Time time3 = xSQLVAR0.decodeTime(byteArray0[0]);
      locale0.getDisplayVariant();
      locale0.getExtensionKeys();
      Time time4 = new Time(0);
      time3.before(time0);
      Time time5 = xSQLVAR0.decodeTime(byteArray0[0]);
      time5.after(time3);
      xSQLVAR0.encodeTime(time5, calendar0, false);
      xSQLVAR0.encodeTime(time0);
      Time.valueOf(localTime0);
      Integer integer0 = new Integer((-1045));
      Time time6 = Time.valueOf(localTime0);
      time6.getTime();
      Time.valueOf(localTime0);
      xSQLVAR0.decodeTime(time6, calendar0, true);
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isFirst();
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      MockInstant.now();
      byte[][] byteArray0 = new byte[5][4];
      linkedList0.clear();
      Locale locale0 = Locale.TAIWAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Time time0 = xSQLVAR0.decodeTimeCalendar(byteArray0[0], calendar0);
      time0.getTime();
      LocalTime localTime0 = time0.toLocalTime();
      Time time1 = xSQLVAR0.decodeTime(byteArray0[0]);
      locale0.getDisplayVariant();
      time1.getTime();
      time1.getTime();
      time0.after(time1);
      time0.getTime();
      Time time2 = new Time(0);
      Time time3 = xSQLVAR0.decodeTime(byteArray0[0]);
      locale0.getDisplayVariant();
      locale0.getExtensionKeys();
      Time time4 = new Time(0);
      Time time5 = xSQLVAR0.decodeTime(byteArray0[0]);
      time5.after(time3);
      xSQLVAR0.encodeTime(time5, calendar0, false);
      xSQLVAR0.encodeTime(time0);
      Time.valueOf(localTime0);
      Integer integer0 = new Integer((-1045));
      Time time6 = Time.valueOf(localTime0);
      time6.getTime();
      Time.valueOf(localTime0);
      xSQLVAR0.decodeTime(time6, calendar0, true);
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isFirst();
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Object object0 = new Object();
      Predicate<byte[][]> predicate0 = Predicate.isEqual(object0);
      Predicate<byte[][]> predicate1 = predicate0.negate();
      Predicate<byte[][]> predicate2 = predicate1.negate();
      Predicate<byte[][]> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      Predicate<Object> predicate7 = predicate6.or(predicate5);
      Predicate<byte[][]> predicate8 = predicate3.and(predicate7);
      predicate7.negate();
      Predicate<Object> predicate9 = predicate4.negate();
      Predicate<byte[][]> predicate10 = predicate3.negate();
      predicate5.test(predicate7);
      Integer integer0 = new Integer(2004);
      predicate3.negate();
      Predicate<Object> predicate11 = predicate5.negate();
      Predicate<Object> predicate12 = predicate5.negate();
      Predicate<Object> predicate13 = predicate12.or(predicate6);
      predicate3.and(predicate0);
      Predicate<Object> predicate14 = predicate11.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate.isEqual((Object) predicate10);
      Predicate<Object> predicate15 = predicate12.and(predicate9);
      predicate11.test(predicate8);
      Predicate<Object> predicate16 = predicate11.or(predicate15);
      Predicate<Object> predicate17 = predicate12.negate();
      predicate17.or(predicate5);
      predicate12.or(predicate13);
      predicate15.and(predicate9);
      predicate16.negate();
      predicate17.and(predicate15);
      predicate14.negate();
      predicate17.and(predicate15);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.absolute(2004);
      assertFalse(boolean0);
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5403058252265167
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.afterLast();
      // Undeclared exception!
      try { 
        linkedList0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      FBCachedLongVarCharField[] fBCachedLongVarCharFieldArray0 = new FBCachedLongVarCharField[5];
      delayQueue0.size();
      FBCachedLongVarCharField fBCachedLongVarCharField0 = mock(FBCachedLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBCachedLongVarCharFieldArray0[0] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[1] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[2] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[3] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[4] = fBCachedLongVarCharField0;
      delayQueue0.toArray(fBCachedLongVarCharFieldArray0);
      delayQueue0.poll();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      Callable<byte[][]> callable0 = (Callable<byte[][]>) mock(Callable.class, new ViolatedAssumptionAnswer());
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[8];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[1] = fBBlobField0;
      fBBlobFieldArray0[2] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobField0;
      fBBlobFieldArray0[4] = fBBlobField0;
      fBBlobFieldArray0[5] = fBBlobField0;
      fBBlobFieldArray0[6] = fBBlobField0;
      fBBlobFieldArray0[7] = fBBlobField0;
      linkedList0.toArray(fBBlobFieldArray0);
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      boolean boolean0 = fBCachedFetcher0.isAfterLast();
      boolean boolean1 = fBCachedFetcher0.isLast();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[][] byteArray0 = new byte[9][4];
      Time time0 = xSQLVAR0.decodeTime((byte[]) null);
      time0.getTime();
      LocalTime localTime0 = time0.toLocalTime();
      Time time1 = xSQLVAR0.decodeTime(byteArray0[0]);
      Time time2 = Time.valueOf(localTime0);
      time1.after(time0);
      time0.setTime((-2572L));
      time1.getTime();
      Time time3 = Time.valueOf(localTime0);
      time1.getTime();
      ZoneId.getAvailableZoneIds();
      time0.after(time1);
      time0.getTime();
      LocalTime localTime1 = time1.toLocalTime();
      Time time4 = new Time(0);
      Time time5 = Time.valueOf(localTime1);
      linkedList0.removeFirstOccurrence(time3);
      time5.getTime();
      xSQLVAR0.decodeTime(byteArray0[0]);
      time5.clone();
      Time.valueOf(localTime0);
      time1.after(time5);
      Time time6 = Time.valueOf(localTime0);
      LocalTime localTime2 = MockLocalTime.now();
      Time.valueOf(localTime2);
      time6.before(time1);
      time6.after(time2);
      Time.valueOf(localTime1);
      Time.valueOf(localTime0);
      time1.toLocalTime();
      time4.getTime();
      linkedList0.push(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((List<byte[][]>) null, (FBObjectListener.FetcherListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1490596969706202
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Object object0 = new Object();
      Predicate<byte[][]> predicate0 = Predicate.isEqual(object0);
      Predicate<byte[][]> predicate1 = predicate0.negate();
      Predicate<byte[][]> predicate2 = predicate1.negate();
      Predicate<byte[][]> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      Predicate<Object> predicate7 = predicate6.or(predicate5);
      Predicate<byte[][]> predicate8 = predicate3.and(predicate7);
      predicate7.negate();
      Predicate<Object> predicate9 = predicate4.negate();
      Predicate<byte[][]> predicate10 = predicate3.negate();
      predicate5.test(predicate7);
      Integer integer0 = new Integer(2004);
      predicate3.negate();
      Predicate<Object> predicate11 = predicate5.negate();
      Predicate<Object> predicate12 = predicate5.negate();
      Predicate<Object> predicate13 = predicate12.or(predicate6);
      predicate3.and(predicate0);
      Predicate<Object> predicate14 = predicate11.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate.isEqual((Object) predicate10);
      Predicate<Object> predicate15 = predicate12.and(predicate9);
      predicate11.test(predicate8);
      Predicate<Object> predicate16 = predicate11.or(predicate15);
      Predicate<Object> predicate17 = predicate12.negate();
      predicate12.or(predicate13);
      predicate15.and(predicate9);
      predicate16.negate();
      predicate17.and(predicate15);
      predicate14.negate();
      predicate17.and(predicate15);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.last();
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[][] byteArray0 = new byte[8][4];
      Time time0 = xSQLVAR0.decodeTime((byte[]) null);
      time0.getTime();
      LocalTime localTime0 = time0.toLocalTime();
      Time time1 = xSQLVAR0.decodeTime((byte[]) null);
      Time time2 = (Time)time1.clone();
      Time.valueOf(localTime0);
      time1.after(time0);
      time0.setTime((-2572L));
      time1.getTime();
      Time.valueOf(localTime0);
      time2.getTime();
      ZoneId.getAvailableZoneIds();
      time0.after(time1);
      time0.getTime();
      Time time3 = Time.valueOf(localTime0);
      LocalTime localTime1 = time3.toLocalTime();
      Time time4 = Time.valueOf(localTime1);
      LocalTime localTime2 = time4.toLocalTime();
      Time.valueOf(localTime2);
      Time.valueOf(localTime1);
      Time time5 = Time.valueOf(localTime0);
      xSQLVAR0.decodeTime(byteArray0[0]);
      Time.valueOf(localTime0);
      Time time6 = Time.valueOf(localTime1);
      time6.before(time5);
      time6.after(time3);
      Time.valueOf(localTime1);
      Time.valueOf(localTime1);
      xSQLVAR0.deepCopy();
      time6.toLocalTime();
      time6.getTime();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean0 = fBCachedFetcher0.relative(1613);
      assertFalse(boolean0);
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1490596969706202
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Instant instant0 = MockInstant.ofEpochSecond(2466L);
      Timestamp timestamp0 = Timestamp.from(instant0);
      MockDate mockDate0 = new MockDate();
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte)44;
      byteArray0[4] = (byte) (-6);
      Locale locale0 = Locale.GERMANY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      calendar0.getCalendarType();
      Locale locale1 = (Locale)locale0.clone();
      calendar0.getTimeZone();
      calendar0.getTimeInMillis();
      calendar0.set(0, 108, 109, (-497), 110, (int) (byte)0);
      locale0.stripExtensions();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      mockGregorianCalendar0.set(164, (int) (byte)44, 733, (int) (byte) (-6), 164);
      mockGregorianCalendar0.getTime();
      Timestamp timestamp1 = xSQLVAR0.encodeTimestamp(timestamp0, (Calendar) mockGregorianCalendar0, true);
      timestamp1.clone();
      Timestamp.from(instant0);
      timestamp1.clone();
      timestamp1.toInstant();
      xSQLVAR0.encodeTimestamp(timestamp1, (Calendar) mockGregorianCalendar0, true);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.last();
      assertFalse(boolean0);
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1490596969706202
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Object object0 = new Object();
      Predicate<byte[][]> predicate0 = Predicate.isEqual(object0);
      Predicate<byte[][]> predicate1 = predicate0.negate();
      Predicate<byte[][]> predicate2 = predicate1.negate();
      Predicate<byte[][]> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      Predicate<Object> predicate7 = predicate6.or(predicate5);
      predicate3.and(predicate7);
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate<byte[][]> predicate9 = predicate3.negate();
      predicate5.test(predicate7);
      Integer integer0 = new Integer(2004);
      predicate3.negate();
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate<Object> predicate11 = predicate5.negate();
      predicate3.and(predicate0);
      Predicate<Object> predicate12 = predicate10.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate13 = predicate11.and(predicate8);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("$$~T7&2&cCCO");
      predicate5.test(jMXPrincipal0);
      predicate10.or(predicate13);
      Predicate<Object> predicate14 = predicate10.negate();
      predicate13.and(predicate8);
      predicate14.and(predicate13);
      predicate12.negate();
      predicate14.and(predicate13);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.relative(0);
      assertFalse(boolean0);
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Object object0 = new Object();
      Predicate<byte[][]> predicate0 = Predicate.isEqual(object0);
      Predicate<byte[][]> predicate1 = predicate0.negate();
      Predicate<byte[][]> predicate2 = predicate1.negate();
      Predicate<byte[][]> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      Predicate<Object> predicate7 = predicate6.or(predicate5);
      predicate3.and(predicate7);
      Predicate<Object> predicate8 = predicate4.negate();
      Predicate<byte[][]> predicate9 = predicate3.negate();
      predicate5.test(predicate7);
      Integer integer0 = new Integer(2004);
      predicate3.negate();
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate<Object> predicate11 = predicate5.negate();
      predicate11.or(predicate6);
      predicate3.and(predicate0);
      Predicate<Object> predicate12 = predicate10.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate13 = predicate11.and(predicate8);
      predicate10.or(predicate13);
      Predicate<Object> predicate14 = predicate10.negate();
      predicate13.and(predicate8);
      predicate14.negate();
      predicate14.and(predicate13);
      predicate12.negate();
      predicate14.and(predicate13);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      try { 
        fBCachedFetcher0.absolute(0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Object object0 = new Object();
      Predicate<byte[][]> predicate0 = Predicate.isEqual(object0);
      Subject subject0 = new Subject();
      Predicate<byte[][]> predicate1 = predicate0.negate();
      subject0.getPublicCredentials();
      Predicate<byte[][]> predicate2 = predicate1.negate();
      Predicate<byte[][]> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      Predicate<Object> predicate7 = predicate6.or(predicate5);
      predicate1.negate();
      Predicate<byte[][]> predicate8 = predicate3.negate();
      predicate5.test(predicate7);
      Integer integer0 = new Integer(2004);
      Predicate<byte[][]> predicate9 = predicate8.negate();
      predicate3.and(predicate9);
      predicate3.negate();
      predicate5.negate();
      predicate3.and(predicate0);
      predicate4.test(subject0);
      Predicate<Object> predicate10 = predicate6.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate11 = predicate6.negate();
      Predicate.isEqual((Object) predicate0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("$$~T7&2&cCCO");
      predicate5.test(jMXPrincipal0);
      predicate6.or(predicate11);
      predicate11.and(predicate6);
      predicate10.negate();
      predicate10.negate();
      predicate4.and(predicate11);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      try { 
        fBCachedFetcher0.absolute(0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6417347121875212
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[][] byteArray0 = new byte[9][4];
      Time time0 = xSQLVAR0.decodeTime((byte[]) null);
      time0.getTime();
      LocalTime localTime0 = time0.toLocalTime();
      Time time1 = xSQLVAR0.decodeTime(byteArray0[0]);
      Time.valueOf(localTime0);
      time1.after(time0);
      time0.setTime((-2572L));
      time1.getTime();
      Time time2 = Time.valueOf(localTime0);
      time1.getTime();
      ZoneId.getAvailableZoneIds();
      time0.after(time1);
      time0.getTime();
      LocalTime localTime1 = time1.toLocalTime();
      Time time3 = new Time(0);
      Time time4 = Time.valueOf(localTime1);
      linkedList0.removeFirstOccurrence(time2);
      time4.getTime();
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.close();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6731183626432506
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[9][6];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)110;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      linkedList0.add(byteArray0);
      byteArray2[0] = (byte) (-44);
      byteArray2[1] = (byte) (-110);
      byteArray2[3] = (byte)110;
      byteArray2[5] = (byte)110;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.beforeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[][] byteArray0 = new byte[9][4];
      Time time0 = xSQLVAR0.decodeTime((byte[]) null);
      time0.getTime();
      LocalTime localTime0 = time0.toLocalTime();
      Time time1 = xSQLVAR0.decodeTime(byteArray0[0]);
      Time time2 = Time.valueOf(localTime0);
      time1.after(time0);
      time0.setTime((-2572L));
      time1.getTime();
      Time time3 = Time.valueOf(localTime0);
      time1.getTime();
      ZoneId.getAvailableZoneIds();
      time0.after(time1);
      time0.getTime();
      LocalTime localTime1 = time1.toLocalTime();
      Time time4 = new Time(0);
      Time time5 = Time.valueOf(localTime1);
      linkedList0.removeFirstOccurrence(time3);
      time5.getTime();
      xSQLVAR0.decodeTime(byteArray0[0]);
      Time.valueOf(localTime0);
      time1.after(time5);
      Time time6 = Time.valueOf(localTime1);
      time6.before(time1);
      time6.after(time2);
      Time.valueOf(localTime1);
      Time.valueOf(localTime0);
      time6.toLocalTime();
      time6.getTime();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("qw]/\"qW!t&4z,G8`+gG");
      linkedList0.push(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[][] byteArray0 = new byte[9][4];
      Time time0 = xSQLVAR0.decodeTime((byte[]) null);
      time0.getTime();
      LocalTime localTime0 = time0.toLocalTime();
      Time time1 = xSQLVAR0.decodeTime(byteArray0[0]);
      Time time2 = Time.valueOf(localTime0);
      Time.valueOf(localTime0);
      time1.after(time0);
      time0.setTime((-2572L));
      time1.getTime();
      Time time3 = Time.valueOf(localTime0);
      time1.getTime();
      ZoneId.getAvailableZoneIds();
      time0.after(time1);
      time0.getTime();
      LocalTime localTime1 = time1.toLocalTime();
      Time time4 = new Time(0);
      Time time5 = Time.valueOf(localTime1);
      time5.toLocalTime();
      linkedList0.removeFirstOccurrence(time3);
      time5.getTime();
      xSQLVAR0.decodeTime(byteArray0[0]);
      Time.valueOf(localTime0);
      time1.after(time5);
      Time time6 = Time.valueOf(localTime0);
      time6.before(time1);
      time6.after(time2);
      Time.valueOf(localTime1);
      Time.valueOf(localTime0);
      time6.toLocalTime();
      time6.getTime();
      linkedList0.push(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = new Object();
      Predicate<byte[][]> predicate0 = Predicate.isEqual(object0);
      Subject subject0 = new Subject();
      Predicate<byte[][]> predicate1 = predicate0.negate();
      Predicate<byte[][]> predicate2 = predicate1.negate();
      Predicate<byte[][]> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      Predicate<Object> predicate7 = predicate6.or(predicate5);
      predicate7.test(predicate0);
      predicate1.negate();
      Predicate<byte[][]> predicate8 = predicate3.negate();
      predicate5.test(predicate7);
      Integer integer0 = new Integer(2004);
      predicate3.negate();
      predicate5.negate();
      predicate3.and(predicate0);
      predicate4.test(subject0);
      Predicate<Object> predicate9 = predicate6.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate10 = predicate6.negate();
      Predicate.isEqual((Object) predicate0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("$$~T7&2&cCCO");
      predicate5.test(jMXPrincipal0);
      predicate6.or(predicate10);
      predicate10.and(predicate6);
      predicate9.and(predicate10);
      predicate9.negate();
      predicate4.and(predicate10);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      int int0 = fBCachedFetcher0.getRowNum();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6417347121875212
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.clear();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.beforeFirst();
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      FBCachedLongVarCharField[] fBCachedLongVarCharFieldArray0 = new FBCachedLongVarCharField[5];
      delayQueue0.size();
      fBCachedLongVarCharFieldArray0[1] = fBCachedLongVarCharFieldArray0[0];
      fBCachedLongVarCharFieldArray0[2] = fBCachedLongVarCharFieldArray0[1];
      fBCachedLongVarCharFieldArray0[2] = fBCachedLongVarCharFieldArray0[2];
      fBCachedLongVarCharFieldArray0[3] = fBCachedLongVarCharFieldArray0[3];
      delayQueue0.toArray(fBCachedLongVarCharFieldArray0);
      delayQueue0.peek();
      Callable<byte[][]> callable0 = (Callable<byte[][]>) mock(Callable.class, new ViolatedAssumptionAnswer());
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[8];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[5] = fBBlobField0;
      fBBlobFieldArray0[1] = fBBlobFieldArray0[0];
      fBBlobFieldArray0[1] = fBBlobFieldArray0[1];
      fBBlobFieldArray0[7] = fBBlobFieldArray0[2];
      fBBlobFieldArray0[5] = fBBlobFieldArray0[4];
      fBBlobFieldArray0[6] = fBBlobFieldArray0[5];
      fBBlobFieldArray0[7] = fBBlobFieldArray0[4];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][1];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-2);
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte) (-41);
      byteArray2[3] = (byte) (-41);
      byteArray2[4] = (byte) (-42);
      byteArray2[5] = (byte) (-28);
      byteArray2[6] = (byte) (-43);
      byteArray2[7] = (byte) (-1);
      byteArray2[8] = (byte) (-34);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte) (-2);
      byteArray3[1] = (byte) (-34);
      byteArray3[2] = (byte) (-41);
      byteArray3[3] = (byte)36;
      byteArray3[4] = (byte)110;
      byteArray0[2] = byteArray3;
      linkedList1.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl();
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      isc_stmt_handle_impl1.registerTransaction(isc_tr_handle_impl0);
      org.firebirdsql.gds.impl.wire.isc_tr_handle_impl isc_tr_handle_impl1 = new org.firebirdsql.gds.impl.wire.isc_tr_handle_impl();
      isc_stmt_handle_impl0.registerTransaction(isc_tr_handle_impl1);
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.setRblId(5);
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      isc_tr_handle_impl isc_tr_handle_impl2 = new isc_tr_handle_impl();
      isc_blob_handle_impl0.setTr(isc_tr_handle_impl0);
      isc_tr_handle_impl isc_tr_handle_impl3 = new isc_tr_handle_impl();
      org.firebirdsql.gds.impl.wire.isc_tr_handle_impl isc_tr_handle_impl4 = new org.firebirdsql.gds.impl.wire.isc_tr_handle_impl();
      isc_tr_handle_impl1.unregisterStatementFromTransaction(isc_stmt_handle_impl0);
      org.firebirdsql.gds.impl.wire.isc_tr_handle_impl isc_tr_handle_impl5 = new org.firebirdsql.gds.impl.wire.isc_tr_handle_impl();
      isc_tr_handle_impl5.forgetResultSets();
      isc_tr_handle_impl4.unregisterStatementFromTransaction(isc_stmt_handle_impl0);
      isc_stmt_handle_impl1.registerTransaction(isc_tr_handle_impl4);
      isc_blob_handle_impl isc_blob_handle_impl2 = new isc_blob_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl3 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.registerTransaction(isc_tr_handle_impl2);
      isc_blob_handle_impl isc_blob_handle_impl3 = new isc_blob_handle_impl();
      isc_blob_handle_impl3.setBlobId((-1L));
      isc_stmt_handle_impl isc_stmt_handle_impl4 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl5 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl3.ensureCapacity(2);
      isc_stmt_handle_impl isc_stmt_handle_impl6 = new isc_stmt_handle_impl();
      isc_tr_handle_impl4.registerStatementWithTransaction(isc_stmt_handle_impl6);
      isc_stmt_handle_impl isc_stmt_handle_impl7 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl7.setSelectCount(5);
      isc_stmt_handle_impl2.registerTransaction(isc_tr_handle_impl0);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isEmpty();
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList2.add((byte[][]) null);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList3.clear();
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList3, (FBObjectListener.FetcherListener) null);
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(0, int0);
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.4708084763221112
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[][] byteArray0 = new byte[9][4];
      Time time0 = xSQLVAR0.decodeTime((byte[]) null);
      time0.getTime();
      LocalTime localTime0 = time0.toLocalTime();
      Time time1 = xSQLVAR0.decodeTime(byteArray0[0]);
      Time.valueOf(localTime0);
      time1.after(time0);
      time0.setTime((-2572L));
      time1.getTime();
      Time time2 = Time.valueOf(localTime0);
      time1.getTime();
      ZoneId.getAvailableZoneIds();
      time0.after(time1);
      time0.getTime();
      LocalTime localTime1 = time1.toLocalTime();
      Time time3 = new Time(0);
      Time time4 = Time.valueOf(localTime1);
      linkedList0.removeFirstOccurrence(time2);
      time4.getTime();
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.setFetchSize(142);
      assertEquals(142, fBCachedFetcher0.getFetchSize());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      FBCachedLongVarCharField[] fBCachedLongVarCharFieldArray0 = new FBCachedLongVarCharField[5];
      FBCachedLongVarCharField fBCachedLongVarCharField0 = mock(FBCachedLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBCachedLongVarCharFieldArray0[0] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[1] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[2] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[3] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[3] = fBCachedLongVarCharField0;
      Callable<byte[][]> callable0 = (Callable<byte[][]>) mock(Callable.class, new ViolatedAssumptionAnswer());
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[8];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[5] = fBBlobField0;
      fBBlobFieldArray0[1] = fBBlobFieldArray0[0];
      fBBlobFieldArray0[1] = fBBlobFieldArray0[1];
      fBBlobFieldArray0[7] = fBBlobFieldArray0[2];
      fBBlobFieldArray0[4] = fBBlobFieldArray0[3];
      fBBlobFieldArray0[5] = fBBlobFieldArray0[4];
      fBBlobFieldArray0[6] = fBBlobFieldArray0[5];
      fBBlobFieldArray0[7] = fBBlobFieldArray0[4];
      linkedList0.toArray(fBBlobFieldArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][1];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-2);
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)66;
      byteArray2[4] = (byte) (-42);
      byteArray2[5] = (byte) (-40);
      byteArray2[6] = (byte) (-43);
      byteArray2[7] = (byte) (-1);
      byteArray2[8] = (byte) (-34);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte) (-2);
      byteArray3[1] = (byte) (-34);
      byteArray2[8] = (byte)36;
      byteArray3[4] = (byte)110;
      byteArray0[2] = byteArray3;
      boolean boolean0 = fBCachedFetcher0.first();
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.4941751382893083
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Object object0 = new Object();
      Predicate<byte[][]> predicate0 = Predicate.isEqual(object0);
      Subject subject0 = new Subject();
      Predicate<byte[][]> predicate1 = predicate0.negate();
      Predicate<byte[][]> predicate2 = predicate0.negate();
      Object object1 = new Object();
      Predicate.isEqual(object1);
      Predicate<byte[][]> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      predicate3.and(predicate6);
      Predicate<Object> predicate7 = predicate4.and(predicate6);
      Predicate<Object> predicate8 = predicate5.negate();
      predicate2.and(predicate1);
      Predicate<byte[][]> predicate9 = predicate3.negate();
      predicate3.negate();
      Predicate<Object> predicate10 = predicate5.negate();
      predicate3.and(predicate0);
      Predicate<Object> predicate11 = predicate8.and(predicate10);
      Predicate.isEqual((Object) predicate11);
      Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate12 = predicate10.and(predicate11);
      Predicate<Object> predicate13 = predicate5.negate();
      predicate11.test(predicate7);
      predicate10.negate();
      predicate13.and(predicate12);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[6][7];
      byteArray0[0] = null;
      byteArray0[1] = byteArray0[0];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)100;
      byteArray0[2] = byteArray1;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }
}
