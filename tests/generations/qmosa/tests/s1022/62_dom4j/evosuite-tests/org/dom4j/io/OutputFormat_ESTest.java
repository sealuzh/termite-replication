/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 03:56:43 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.setEncoding("ON1RTAa47>3&qr),G:");
      outputFormat0.setXHTML(false);
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.isOmitEncoding();
      outputFormat0.getLineSeparator();
      assertEquals("ON1RTAa47>3&qr),G:", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.300526206894005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expadEmptyp]triext");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-indent";
      stringArray0[1] = "-trimText";
      stringArray0[2] = "-trimText";
      stringArray0[3] = "-trimText";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 4);
      int int0 = outputFormat0.parseOptions(stringArray0, 4);
      assertEquals("-trimText", outputFormat0.getIndent());
      assertEquals(4, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9136655198736401
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimTevt", true, "@w?");
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@w?";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "-suppressDeclaration";
      stringArray1[1] = "-trimTevt";
      int int0 = outputFormat0.parseOptions(stringArray1, 0);
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0287375017310743
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimTevt", false, "-lineSeparator");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "-lineSeparator";
      stringArray0[2] = "-lineSeparator";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3061140175290373
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, false, (String) null);
      outputFormat0.setNewlines(true);
      outputFormat0.setIndent("-expandEmpty-expandEmpty|Fi4|_AZOAT/t`");
      outputFormat0.setLineSeparator("-trimText");
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setIndent((String) null);
      outputFormat0.getLineSeparator();
      outputFormat0.setIndent("-trimText");
      outputFormat0.getEncoding();
      outputFormat0.getAttributeQuoteCharacter();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setNewLineAfterNTags((-1852612113));
      outputFormat1.setIndentSize(1908);
      OutputFormat.createCompactFormat();
      outputFormat1.setPadText(true);
      outputFormat1.setNewLineAfterDeclaration(false);
      outputFormat1.setOmitEncoding(false);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('5');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (5)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9179590133718845
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isPadText());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-exgpdndEmpty";
      stringArray0[1] = "=U8A!R@6";
      String[] stringArray1 = new String[8];
      String[] stringArray2 = new String[8];
      stringArray2[0] = "-padText";
      stringArray2[1] = "=U8A!R@6";
      stringArray2[2] = "-exgpdndEmpty";
      stringArray2[3] = "-exgpdndEmpty";
      stringArray2[4] = "Ig8jJ 2+M0";
      stringArray2[5] = "=U8A!R@6";
      stringArray2[6] = "Ig8jJ 2+M0";
      stringArray2[7] = "-exgpdndEmpty";
      outputFormat0.parseOptions(stringArray2, 0);
      outputFormat0.parseOptions(stringArray0, 0);
      int int0 = outputFormat0.parseOptions(stringArray1, 2324);
      assertTrue(outputFormat0.isPadText());
      assertEquals(2324, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.2770928451693395
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expadEmptyp]triext");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-xhtml-expadEmptyp]triext";
      stringArray0[1] = "-trimText";
      stringArray0[2] = "-encoding";
      stringArray0[3] = "-xhtml-expadEmptyp]triext";
      stringArray0[4] = "-xhtmlwO91kRQ";
      stringArray0[5] = "-trimText";
      stringArray0[6] = "-xhtml-expadEmptyp]triext";
      stringArray0[7] = "";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("-xhtml-expadEmptyp]triext", outputFormat0.getEncoding());
      assertEquals(7, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9136655198736401
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-expndEmpty", false, "x%el8Xwu){lI");
      assertFalse(outputFormat0.isTrimText());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "j1$YX B~+esemnw[8x";
      stringArray0[1] = "-expandEmpty-expndEmpty";
      stringArray0[2] = "-trimText";
      stringArray0[3] = "Ig8jJ";
      stringArray0[4] = "\"EY24UalWurG";
      stringArray0[5] = "x%el8Xwu){lI";
      stringArray0[6] = "-expandEmpty-expndEmpty";
      int int0 = outputFormat0.parseOptions(stringArray0, 2);
      assertTrue(outputFormat0.isTrimText());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.852140740384332
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      OutputFormat outputFormat0 = new OutputFormat("", true);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.isNewLineAfterDeclaration();
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
      
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2171203076827055
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtmlcI", true, "");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "-xhtmlcI";
      outputFormat0.setSuppressDeclaration(true);
      stringArray0[2] = "-xhtmlcI";
      stringArray0[3] = "-xhtmlcI";
      stringArray0[4] = "-xhtmlcI";
      stringArray0[5] = "-xhtmlcI";
      stringArray0[6] = "";
      stringArray0[7] = "j<7aYwy~JJ";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setLineSeparator("-xhtmlcI");
      outputFormat0.setOmitEncoding(true);
      outputFormat0.getEncoding();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("-xhtmlcI", outputFormat0.getLineSeparator());
      
      int int0 = outputFormat1.parseOptions(stringArray0, 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9136655198736401
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expadEmptyp]triext");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-xhtmlwO91kRQ";
      stringArray0[1] = "-indentSize";
      stringArray0[2] = "-triext";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-triext\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.679983198025875
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.setNewlines(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setNewlines(true);
      outputFormat0.setNewlines(true);
      outputFormat0.setPadText(true);
      outputFormat0.setNewLineAfterNTags(2286);
      outputFormat0.setXHTML(true);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setNewlines(true);
      outputFormat0.isXHTML();
      outputFormat0.isXHTML();
      outputFormat0.getLineSeparator();
      assertEquals(2286, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("{Y pgu1q$<5J", true, "-T[bF~.87auNe[3jZ");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('!');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (!)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6376398674083723
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[2] = "";
      OutputFormat.createPrettyPrint();
      outputFormat0.setLineSeparator("");
      String string0 = outputFormat0.getLineSeparator();
      assertEquals("", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("5Mf}`SWaL ?", false);
      outputFormat0.setNewLineAfterNTags((-1561));
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals((-1561), int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3489061161305265
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("f", true);
      outputFormat0.setIndentSize(1110);
      outputFormat0.getLineSeparator();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.isTrimText();
      outputFormat0.setNewLineAfterNTags(2);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setXHTML(false);
      outputFormat0.setIndent("\n");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setNewlines(true);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setTrimText(true);
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat1.setPadText(false);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setXHTML(true);
      outputFormat2.setXHTML(false);
      outputFormat2.setNewLineAfterDeclaration(false);
      outputFormat0.setIndent(true);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndentSize(513);
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
      
      outputFormat1.setOmitEncoding(true);
      outputFormat1.getLineSeparator();
      outputFormat1.getIndent();
      assertTrue(outputFormat1.isOmitEncoding());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(">HTU/D/rmhzYS?", true, "");
      String[] stringArray0 = new String[9];
      outputFormat0.setNewLineAfterNTags(1615);
      OutputFormat outputFormat1 = new OutputFormat(">HTU/D/rmhzYS?", true, ">HTU/D/rmhzYS?");
      outputFormat0.getNewLineAfterNTags();
      assertEquals(1615, outputFormat0.getNewLineAfterNTags());
      
      String string0 = outputFormat1.getLineSeparator();
      assertEquals("\n", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.945892037600053
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "aNXG-aVNJ:z].j");
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setTrimText(false);
      outputFormat0.setIndentSize((-1916129832));
      outputFormat0.getLineSeparator();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\n";
      stringArray0[1] = "";
      stringArray0[2] = "\n";
      stringArray0[3] = "\n";
      stringArray0[4] = "I@f%\"YhZ%#&.!";
      stringArray0[5] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.isPadText();
      outputFormat0.setIndent("");
      outputFormat0.setIndent("Invalid attribute quote character (");
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertEquals("Invalid attribute quote character (", outputFormat0.getIndent());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.011015831001672
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "2";
      stringArray0[1] = "'L";
      stringArray0[2] = "Dy&G+V8t_5o*/h";
      stringArray0[4] = "Dy&G+V8t_5o*/h";
      stringArray0[5] = "ILV";
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.getAttributeQuoteCharacter();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setPadText(true);
      outputFormat1.isPadText();
      outputFormat0.setAttributeQuoteCharacter('\"');
      outputFormat0.isPadText();
      assertTrue(outputFormat0.isSuppressDeclaration());
      
      outputFormat1.getAttributeQuoteCharacter();
      outputFormat1.getAttributeQuoteCharacter();
      int int0 = outputFormat1.parseOptions(stringArray0, 2424);
      assertTrue(outputFormat1.isPadText());
      assertEquals(2424, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7619172254785145
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("XAgP;wPi", true);
      outputFormat0.setIndent((String) null);
      outputFormat0.setIndent(true);
      outputFormat0.setIndent(true);
      outputFormat0.setIndent(false);
      outputFormat0.setIndent(false);
      outputFormat0.setIndent("");
      outputFormat0.setIndent("-xhtmlsqMK@p\"O/>>");
      outputFormat0.setIndent("-xhtmlsqMK@p\"O/>>");
      outputFormat0.setIndentSize(1913);
      outputFormat0.setIndent(false);
      outputFormat0.setIndent("-xhtmlsqMK@p\"O/>>");
      outputFormat0.setIndent("o!@[Rz:iwpK$o&");
      outputFormat0.setIndent("37I1]'ndttF^t0I$eb");
      outputFormat0.setIndent((String) null);
      outputFormat0.setIndent("-indentSize");
      outputFormat0.setIndent("MGh+");
      outputFormat0.setIndent("*=:s?6[-<qJsB:;xc");
      outputFormat0.setIndent("37I1]'ndttF^t0I$eb");
      outputFormat0.setIndent("jbpRx>;kL jJ#:5");
      outputFormat0.setIndent("o!@[Rz:iwpK$o&");
      assertEquals("o!@[Rz:iwpK$o&", outputFormat0.getIndent());
      
      outputFormat0.setIndent((String) null);
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "-trimText";
      String string1 = "-xhtmlwO91kRQ";
      String string2 = "-expadEmptyp]triext";
      OutputFormat outputFormat0 = new OutputFormat();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('%');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (%)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setAttributeQuoteCharacter('\"');
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-xhtmlwO91kRQ";
      stringArray0[7] = "\"EY24UalWurG";
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml-expdndEmpty", true);
      outputFormat0.setAttributeQuoteCharacter('\'');
      assertEquals('\'', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.isTrimText();
      outputFormat0.setLineSeparator("2");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setTrimText(true);
      assertEquals("2", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-lineSeparator");
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(boolean0);
      assertEquals("-lineSeparator", outputFormat0.getIndent());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.21611643356757
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("ik", true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setLineSeparator("V7?K)`)NyFvq");
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setLineSeparator("");
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setPadText(true);
      assertEquals("", outputFormat0.getLineSeparator());
      
      outputFormat1.setTrimText(true);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndent("ik");
      outputFormat1.setXHTML(false);
      outputFormat2.setIndent(true);
      outputFormat2.setNewLineAfterDeclaration(true);
      OutputFormat outputFormat3 = new OutputFormat("", true, "");
      outputFormat3.setNewlines(true);
      outputFormat1.setIndent("-suppressDeclaration");
      boolean boolean0 = outputFormat3.isExpandEmptyElements();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.544323780222337
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      outputFormat0.parseOptions(stringArray0, 1183);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setLineSeparator("L;IoBM");
      outputFormat1.setXHTML(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setNewLineAfterNTags(2550);
      outputFormat0.setTrimText(false);
      outputFormat1.setExpandEmptyElements(false);
      outputFormat0.setEncoding("");
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat0.getLineSeparator();
      outputFormat2.setSuppressDeclaration(true);
      outputFormat2.setPadText(true);
      outputFormat1.isNewlines();
      outputFormat2.getAttributeQuoteCharacter();
      outputFormat2.setIndent(false);
      outputFormat2.setTrimText(false);
      outputFormat2.isExpandEmptyElements();
      outputFormat1.setIndent("");
      // Undeclared exception!
      try { 
        outputFormat2.setAttributeQuoteCharacter('%');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (%)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals('\"', char0);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9410699503727393
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("p(L7(#4|_", false, "p(L7(#4|_");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setEncoding("p(L7(#4|_");
      outputFormat0.setIndent(false);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setNewlines(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setLineSeparator("p(L7(#4|_");
      outputFormat0.setIndentSize((-3257));
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setNewlines(true);
      outputFormat0.setIndent("-expanKEmptyUNXG-a;NJ:ziu].;j");
      outputFormat0.setIndent("p(L7(#4|_");
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertEquals("p(L7(#4|_", outputFormat0.getLineSeparator());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.149888735445366
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setXHTML(false);
      outputFormat0.setExpandEmptyElements(false);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.getAttributeQuoteCharacter();
      outputFormat0.setNewlines(false);
      outputFormat1.isExpandEmptyElements();
      outputFormat1.isNewlines();
      outputFormat0.setIndent("-newlnes");
      OutputFormat.createCompactFormat();
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setAttributeQuoteCharacter('\"');
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions((String[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-T[bF~.87auNe[3jZ", false);
      String string0 = outputFormat0.getEncoding();
      assertEquals("UTF-8", string0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("-T[bF~.87auNe[3jZ", outputFormat0.getIndent());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[9];
      stringArray0[6] = "-expadEmptyp]triext";
      stringArray0[1] = "%iCF2pkDikXPb";
      stringArray0[2] = "iu2YlqEgo<R7Oc^";
      stringArray0[3] = "-expndEmpty-expndEmpty";
      stringArray0[4] = "-expandEmptyhAg;wPi";
      stringArray0[5] = "--rEmText";
      stringArray0[6] = "-expadEmptyp]triext";
      stringArray0[7] = "%iCF2pkDikXPb";
      stringArray0[4] = "-+ocIea@St7c3w";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.679983198025875
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setSuppressDeclaration(true);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.isSuppressDeclaration();
      OutputFormat outputFormat2 = new OutputFormat("MT.'");
      String[] stringArray0 = new String[7];
      stringArray0[1] = "MT.'";
      stringArray0[2] = "MT.'";
      stringArray0[3] = "MT.'";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0980526298332742
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, false, "8MjE Y5{EeT6(sNPQ(\"");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-triext";
      stringArray0[1] = "8MjE Y5{EeT6(sNPQ(\"";
      outputFormat0.parseOptions(stringArray0, 2);
      outputFormat0.parseOptions(stringArray0, 2);
      int int0 = 395;
      outputFormat0.parseOptions(stringArray0, 466);
      outputFormat0.parseOptions(stringArray0, 461);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1477));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1477
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0325698333765367
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-padText";
      stringArray0[1] = "-xhtml";
      stringArray0[2] = "-newlines";
      stringArray0[3] = "-padText";
      stringArray0[4] = "-xhtmlwO9RQ";
      stringArray0[5] = "-xhtml-triext";
      stringArray0[6] = "-xhtml";
      stringArray0[7] = "B";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isXHTML());
      
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat1.isXHTML());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.626576161432449
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.getLineSeparator();
      outputFormat0.isSuppressDeclaration();
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      outputFormat0.setExpandEmptyElements(true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "MT.'";
      stringArray0[2] = "{P0hB]ki~irA?xKIv~u";
      stringArray0[3] = "";
      outputFormat0.setLineSeparator((String) null);
      stringArray0[4] = "{P0hB]ki~irA?xKIv~u";
      stringArray0[5] = "UTF-8";
      stringArray0[6] = "{P0hB]ki~irA?xKIv~u";
      stringArray0[6] = "";
      stringArray0[8] = "{P0hB]ki~irA?xKIv~u";
      outputFormat0.parseOptions(stringArray0, 2);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setOmitEncoding(true);
      outputFormat1.setOmitEncoding(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat1.isNewLineAfterDeclaration();
      String string0 = outputFormat1.getLineSeparator();
      assertEquals("\n", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.0225135569716235
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setEncoding((String) null);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[2];
      OutputFormat.createPrettyPrint();
      stringArray0[0] = "-trimText";
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.051435843948024
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.getIndent();
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setXHTML(true);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setNewlines(true);
      outputFormat1.setNewlines(true);
      outputFormat0.setPadText(true);
      outputFormat0.setNewLineAfterNTags(2286);
      outputFormat0.setXHTML(true);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setNewlines(true);
      assertEquals(2286, outputFormat0.getNewLineAfterNTags());
      
      outputFormat1.isXHTML();
      boolean boolean0 = outputFormat1.isXHTML();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty\n", false, "-expandEmpty\n");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-expandEmpty\n";
      stringArray0[1] = "-expandEmpty\n";
      stringArray0[2] = "-xhtml-expadEmptyp]triext";
      stringArray0[4] = "-expandEmpty\n";
      stringArray0[5] = "-xhtml-expadEmptyptriext";
      stringArray0[6] = "-expandEmpty\n";
      stringArray0[7] = "-expandEmpty\n";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, int0);
      assertEquals("-expandEmpty\n", outputFormat0.getIndent());
      assertEquals("-expandEmpty\n", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3794969701928985
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-newlnes";
      OutputFormat outputFormat1 = new OutputFormat("-newlnes", false);
      outputFormat1.setXHTML(false);
      outputFormat0.isXHTML();
      outputFormat0.parseOptions(stringArray0, 0);
      OutputFormat outputFormat2 = new OutputFormat("-newlnes", false);
      OutputFormat outputFormat3 = new OutputFormat();
      // Undeclared exception!
      try { 
        outputFormat3.parseOptions(stringArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.3489061161305265
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("f", true);
      outputFormat0.setIndentSize(1110);
      outputFormat0.getLineSeparator();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.isTrimText();
      outputFormat0.setNewLineAfterNTags(2);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setXHTML(false);
      outputFormat0.setIndent("\n");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setNewlines(true);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setTrimText(true);
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat1.setPadText(false);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setXHTML(true);
      outputFormat2.setXHTML(false);
      outputFormat2.setNewLineAfterDeclaration(false);
      outputFormat0.setIndent(true);
      outputFormat0.setSuppressDeclaration(false);
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
      
      outputFormat1.setIndentSize(513);
      outputFormat1.setOmitEncoding(true);
      outputFormat1.getLineSeparator();
      String string0 = outputFormat1.getIndent();
      assertEqualsstring0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6711893730418441
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtmlwO9RQ");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"EY24UalWurG";
      stringArray0[1] = "-expadEmpt)ptriext";
      stringArray0[2] = "-expadEmptyp]triext";
      stringArray0[3] = "-expadEmptyp]triext";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals(0, int0);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("-xhtmlwO9RQ", outputFormat0.getIndent());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6711893730418441
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-expadEmptyp]triext";
      stringArray0[1] = "%iCF2pkDikXPb";
      stringArray0[2] = "iu2YlqEgo<R7Oc^";
      stringArray0[3] = "-expndEmpty-expndEmpty";
      stringArray0[4] = "-expandEmptyhAg;wPi";
      stringArray0[5] = "--rEmText";
      stringArray0[6] = "-expadEmptyp]triext";
      stringArray0[7] = "%iCF2pkDikXPb";
      stringArray0[4] = "-+ocIea@St7c3w";
      OutputFormat outputFormat0 = new OutputFormat("/d\"]poP5>Rd;&}]]`y");
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, int0);
      assertFalse(outputFormat0.isPadText());
      assertEquals("/d\"]poP5>Rd;&}]]`y", outputFormat0.getIndent());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml-expdndEmpty", true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-indentSize";
      stringArray0[1] = "-xhtml-expdndEmpty";
      stringArray0[2] = "*=:s?6[-<qJsB:;xc";
      stringArray0[3] = "-indentSize";
      stringArray0[4] = "jbpRx>;kL jJ#:5";
      stringArray0[5] = "";
      stringArray0[6] = null;
      stringArray0[7] = "-expandEmpty-expdndEmpty";
      int int0 = outputFormat0.parseOptions(stringArray0, 11);
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals(11, int0);
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("-xhtml-expdndEmpty", outputFormat0.getIndent());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("2", false, "2");
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.isTrimText();
      outputFormat0.setLineSeparator("2");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setTrimText(true);
      assertEquals("2", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expadEmptyp]triext");
      outputFormat0.setIndentSize((-1833));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-expadEmptyp]triext";
      stringArray0[1] = "%iCF2pkDikXPb";
      stringArray0[2] = "iu2YlqEgo<R7Oc^";
      stringArray0[3] = "-expandEmpty-expndEmpty";
      stringArray0[4] = "-expandEmptyhAg;wPi";
      stringArray0[5] = "-trimText";
      stringArray0[6] = "-expadEmptyp]triext";
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0952017185161178
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xvZ)~]s\"7mU$s");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-expandEmpty-expndEmpty";
      stringArray0[1] = "-omitEncoding";
      stringArray0[2] = "-xvZ)~]s\"7mU$s";
      stringArray0[3] = "-trimTevt";
      stringArray0[4] = "-trimTevt";
      stringArray0[5] = "-trimTevt";
      stringArray0[6] = "-xvZ)~]s\"7mU$s";
      outputFormat0.parseOptions(stringArray0, 578);
      outputFormat0.parseOptions(stringArray0, 0);
      int int0 = (-109939320);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-109939320));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -109939320
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setOmitEncoding(false);
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertFalse(outputFormat0.isNewlines());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1185117418261412
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "-xhtmlwO9RQ";
      stringArray0[2] = "-expadEmptyp]triext";
      stringArray0[3] = "-expadEmptyp]triext";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1143);
      outputFormat0.parseOptions(stringArray0, 2);
      outputFormat0.parseOptions(stringArray0, 2);
      outputFormat0.parseOptions(stringArray0, 2);
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isTrimText());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isOmitEncoding());
      
      outputFormat0.setOmitEncoding(true);
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText");
      outputFormat0.setExpandEmptyElements(true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-xhtmlwO91kRQ";
      stringArray0[1] = "-trimText";
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, false);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('z');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (z)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.929538535746656
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty\n", false, "-expandEmpty\n");
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-expandEmpty\n";
      stringArray0[1] = "-expandEmpty\n";
      stringArray0[2] = "{oiy7)`m^[y.;E^QH";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertEquals(2, int0);
  }
}
