/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 03:58:30 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.447166931623387
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5);
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float((float) 5);
      StringWriter stringWriter2 = new StringWriter(5);
      Float float1 = new Float(1875.2375F);
      Float.max(0.0F, 2356.7F);
      JSONObject jSONObject0 = new JSONObject(float1);
      jSONObject0.put("getoUnsgnedLong", (double) 2356.7F);
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject1 = new JSONObject(boolean0);
      jSONObject1.optInt((String) null, 5);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Long.sum((-528L), 0L);
      boolean boolean1 = jSONObject0.isNull("getoUnsgnedLong");
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.782311654264149
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float(2618.6736F);
      StringWriter stringWriter2 = new StringWriter(27);
      JSONObject jSONObject0 = new JSONObject();
      Float float1 = new Float(2618.6736F);
      Float.max((-2181.0977F), 0.0F);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("<`]B\bt!lDtt", jSONArray0);
      Float float2 = new Float((double) 2618.6736F);
      JSONObject jSONObject1 = new JSONObject(float2);
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3288274798399655
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer integer0 = new Integer(8);
      Integer integer1 = new Integer(138);
      Integer.min((-22654515), (-3771));
      Integer.toUnsignedString((-22654515));
      Double double0 = new Double(1.0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "){i?bJG;9^j(N*DT";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Float.min((-22654515), (-22654515));
      Float.min(0.0F, 138);
      Float.sum(8, (-2.2654516E7F));
      Float.isFinite(0.0F);
      Float.isFinite(1290.3F);
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.doubleToString((-2.2654508E7F));
      assertEquals("-2.2654508E7", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6499814274058298
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "istoUpperCase";
      stringArray0[3] = "istoUpperCase";
      stringArray0[4] = "gettrim";
      String[] stringArray1 = JSONObject.getNames((Object) "gettrim");
      assertNotNull(stringArray1);
      
      stringArray0[5] = "istoUpperCase";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      Boolean.valueOf("issubstring");
      Short short0 = new Short((short)1);
      JSONObject jSONObject0 = new JSONObject("istoUpperCase", stringArray1);
      JSONObject jSONObject1 = jSONObject0.put("istoUpperCase", 0.0);
      jSONObject1.toString();
      double double0 = jSONObject0.optDouble(": ");
      assertEquals(2, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      StringWriter stringWriter0 = new StringWriter(40);
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float((float) 40);
      StringWriter stringWriter2 = new StringWriter(40);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "getoUnsgnedLong";
      Float float1 = new Float(0.0F);
      Float.max(1.0F, 0.0F);
      double double0 = Double.NaN;
      Float float2 = new Float(Double.NaN);
      try { 
        jSONObject0.accumulate("getoUnsgnedLong", float2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.101539402649526
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(97);
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float((float) 97);
      StringWriter stringWriter2 = new StringWriter(97);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject();
      Float float1 = new Float(1875.2375F);
      Float.sum(0.0F, 624.478F);
      Float float2 = new Float(1875.2375F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float1);
      Boolean boolean0 = new Boolean("!cAWH'x@Rgw");
      JSONObject jSONObject1 = new JSONObject((Object) "getoUnsgnedLong");
      Long.sum((-1L), (-1L));
      jSONObject0.isNull("getequals");
      String string0 = JSONObject.numberToString(float2);
      assertNotNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8763296242556975
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(0.0F);
      Float float1 = new Float(1.0F);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Float> linkedList2 = new LinkedList<Float>(linkedList1);
      Float float2 = new Float((-43.7726F));
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      LinkedList<Float> linkedList5 = new LinkedList<Float>(linkedList4);
      Float float3 = new Float(0.0F);
      Float.sum(0.0F, (-43.7726F));
      LinkedList<Float> linkedList6 = new LinkedList<Float>();
      linkedList1.add(float3);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", (Object) null);
      jSONObject1.toString(3550, 3550);
      jSONObject0.accumulate(",:]}/\"[{;=#", (Object) null);
      jSONObject0.putOpt("!'j|2`>", float1);
      jSONObject0.optLong("T{TjnqiT|0");
      JSONObject.valueToString(linkedList0);
      jSONObject0.names();
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.optLong("{\"java.lang.String@0000000003\": [null]}");
      try { 
        jSONObject2.getDouble("&,`a;mFO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&,`a;mFO\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6969386653960457
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Float float0 = new Float((-327.5252F));
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("{}", (double) 0.0F);
      jSONObject1.toString();
      Float.max((-1.0F), 693.5143F);
      jSONObject1.optDouble("{}");
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      try { 
        jSONObject1.getBoolean("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.432679893158973
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "~gzHH-aC<rH#J(N";
      boolean boolean0 = true;
      JSONObject jSONObject1 = jSONObject0.put("~gzHH-aC<rH#J(N", true);
      jSONObject1.optInt("[m#n");
      jSONObject1.optBoolean("~gzHH-aC<rH#J(N", true);
      try { 
        jSONObject1.getJSONObject("~gzHH-aC<rH#J(N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~gzHH-aC<rH#J(N\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2993111747168937
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Float.max(5, 0.0F);
      Float.isFinite(5.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(0.0F);
      Float float1 = new Float(1.0F);
      linkedList0.add(float0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Float> linkedList2 = new LinkedList<Float>(linkedList1);
      Float float2 = new Float((-43.7726F));
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      LinkedList<Float> linkedList5 = new LinkedList<Float>(linkedList4);
      Float float3 = new Float(0.0F);
      Float.sum(0.0F, (-43.7726F));
      LinkedList<Float> linkedList6 = new LinkedList<Float>();
      linkedList1.add(float3);
      linkedList0.add((Float) null);
      Float float4 = new Float(0.0);
      LinkedList<Float> linkedList7 = new LinkedList<Float>();
      Float float5 = new Float((-2161.0F));
      LinkedList<Float> linkedList8 = new LinkedList<Float>();
      Float float6 = new Float((double) 1.0F);
      linkedList0.push(float6);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList5);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.append("getdescendingIterator", linkedList3);
      String string0 = jSONObject0.toString(100, 5);
      assertNotNull(string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer integer0 = new Integer(8);
      Integer integer1 = new Integer(138);
      Integer.min((-22654515), (-3771));
      Integer.toUnsignedString((-22654515));
      Double double0 = new Double(1.0);
      Float float0 = new Float((-1.0F));
      Float float1 = new Float((float) (-22654515));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.push(float0);
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      HashMap<Object, Float> hashMap1 = new HashMap<Object, Float>();
      HashMap<Float, JSONArray> hashMap2 = new HashMap<Float, JSONArray>();
      hashMap0.put(float0, float0);
      HashMap<Double, Integer> hashMap3 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5294956116290943
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Map) null);
      jSONObject1.keys();
      jSONObject0.toString();
      StringWriter stringWriter0 = new StringWriter(5);
      Boolean boolean0 = new Boolean("com");
      jSONObject0.accumulate("{\"java.lang.String@0000000004\":wheel.json.JSONObject@0000000003}", "com");
      String string0 = "Chtx)b^JMgJ=IQj<";
      String string1 = "B#-;jq2jYD\\%.:v7L|";
      Integer.getInteger("B#-;jq2jYD%.:v7L|");
      jSONObject0.optJSONObject("] is not a JSONObject.");
      Object object0 = JSONObject.NULL;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        linkedList0.set(5, "{\"java.lang.String@0000000004\":wheel.json.JSONObject@0000000003}");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.869127420707309
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Float float0 = new Float((-327.5252F));
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "\\u";
      JSONObject jSONObject1 = jSONObject0.put(string0, (double) 0.0F);
      jSONObject1.getLong(string0);
      jSONObject1.toString();
      Float.max((-1.0F), 693.5143F);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      jSONObject0.toString(516, (-939));
      try { 
        jSONObject1.getBoolean(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.943057628455041
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "KL`/eev~7gTCk6A:M<W";
      Boolean boolean0 = new Boolean("KL`/eev~7gTCk6A:M<W");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.optLong("Missing value");
      int int0 = 93;
      JSONObject jSONObject1 = jSONObject0.put("KL`/eev~7gTCk6A:M<W", 93);
      JSONObject jSONObject2 = jSONObject1.put("{", 1.0);
      jSONObject2.getLong("{");
      jSONObject1.toString(93, 93);
      Boolean.logicalXor(true, false);
      jSONObject0.toString(93);
      jSONObject2.put("Missing value", (Object) "KL`/eev~7gTCk6A:M<W");
      jSONObject2.optDouble("", 828.23);
      jSONObject1.put("{", (Map) null);
      try { 
        jSONObject2.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9216824930785075
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.optInt("] is not a JSONObject.");
      Integer integer0 = new Integer(0);
      JSONObject.valueToString(integer0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Map) null);
      jSONObject0.getString("] is not a JSONObject.");
      JSONObject jSONObject2 = jSONObject0.put("^(Qa{P1EY", 43);
      String string0 = "e[(y?WM1ZwM3caZRuu";
      jSONObject1.optJSONArray("e[(y?WM1ZwM3caZRuu");
      jSONObject2.put("wheel.json.JSONE9ception", (-350.4648465));
      Integer integer1 = new Integer((-1120));
      String string1 = "Expected a ',' or '}'";
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of y
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.813175306092535
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("^ isno a JSSObect.", (Map) null);
      jSONObject0.toString();
      byte byte0 = (byte)44;
      Byte byte1 = new Byte((byte)44);
      Short.toUnsignedLong((short) (-1316));
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject2 = jSONObject1.append("{\"java.lang.String@0000000004\":wheel.json.JSONObject@0000000003}", boolean0);
      jSONObject2.toString((int) (short) (-1316), (int) (byte)44);
      Boolean.logicalOr(true, true);
      jSONObject0.accumulate("{\"java.lang.String@0000000004\":wheel.json.JSONObject@0000000003}", "^ isno a JSSObect.");
      Float float0 = new Float(1.0);
      Boolean.logicalXor(false, false);
      Float float1 = new Float((float) (short)1814);
      Float.isFinite((-1.0F));
      JSONObject jSONObject3 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000006\": [java.lang.Boolean@0000000007],\n\"java.lang.String@0000000004\": {}\n                                            }");
      JSONObject jSONObject4 = new JSONObject(jSONTokener0);
      try { 
        jSONObject1.getDouble("^ isno a JSSObect.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^ isno a JSSObect.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.926603370437274
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      String[] stringArray0 = new String[3];
      Byte.toUnsignedInt((byte)58);
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "B7?dng";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (double) (byte)39);
      jSONObject0.toString((int) (byte)39);
      jSONObject0.optString("a2H;Fk;R703/.", "] is not a JSONArray.");
      jSONObject0.opt("{\"java.lang.String@0000000002\": java.lang.Double@0000000003}");
      jSONObject1.put("B7?dng", false);
      jSONObject0.optLong("ik");
      jSONObject0.toString((int) (byte)39);
      Object object0 = JSONObject.NULL;
      String string0 = "y8!OREB(m,hgzc";
      JSONObject jSONObject2 = jSONObject1.put("y8!OREB(m,hgzc", object0);
      try { 
        jSONObject2.append("] is not a JSONArray.", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.106263704751992
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Float float0 = new Float((-327.033F));
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("{}", (double) 0.0F);
      JSONObject.valueToString(float0);
      float float2 = new Float(0.0F);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      boolean boolean0 = new Boolean("{}");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = (-821);
      Integer integer0 = new Integer((-821));
      Integer.toUnsignedString((-821));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "4294966475";
      stringArray0[1] = null;
      stringArray0[2] = "{en#a<=1'()";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "D|_+{7";
      stringArray0[7] = "4294966475";
      stringArray0[8] = null;
      JSONObject jSONObject0 = new JSONObject("{en#a<=1'()", stringArray0);
      try { 
        jSONObject0.put(stringArray0[4], 2359L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3199044298479494
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Integer.toUnsignedString(2);
      Boolean boolean0 = new Boolean("2");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "2";
      stringArray0[1] = "2";
      stringArray0[2] = "2";
      stringArray0[3] = "2";
      JSONObject jSONObject0 = new JSONObject("2", stringArray0);
      Object object0 = JSONObject.NULL;
      jSONObject0.append("2", object0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("2");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.4228801436936953
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(1998.964547);
      JSONObject jSONObject1 = jSONObject0.append("A@cO?VNGHPkjJu2", float0);
      jSONObject1.append("A@cO?VNGHPkjJu2", "A@cO?VNGHPkjJu2");
      Boolean boolean0 = new Boolean("getformat");
      Boolean.compare(true, true);
      Boolean.compare(true, true);
      JSONObject jSONObject2 = jSONObject0.put("getformat", (Map) hashMap0);
      hashMap0.put(jSONObject2, jSONObject2);
      jSONObject2.optDouble("getformat", Double.NaN);
      JSONObject jSONObject3 = new JSONObject((Object) hashMap0);
      try { 
        jSONObject0.getInt("getformat");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getformat\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6401934578801076
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Float.max(0.0F, 693.5143F);
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(693.5143F);
      hashMap0.put((JSONArray) null, double0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 60, 279);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Integer integer0 = new Integer((-821));
      Integer.toUnsignedString((-821));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{en#a<=1'()");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 11 of {en#a<=1'()
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float((-1885.3239));
      Float.isFinite(10);
      Float.max(1.0F, (-821));
      Float.isFinite(0.0F);
      Float.isFinite((-1546.2574F));
      Float.max(1.0F, 0.0F);
      Float.sum((-1255.2F), (-936.0F));
      Boolean.valueOf("$EBRZ0{Xi9iqd/yA");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = null;
      jSONObject0.putOpt((String) null, stringWriter0);
      jSONObject0.toString((-820), 2475);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject((-1270));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1270] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.463028234238358
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Integer integer0 = new Integer((-821));
      JSONObject jSONObject0 = new JSONObject(integer0);
      Integer integer1 = new Integer((-821));
      Integer.toUnsignedString((-821));
      Integer.min((-821), 2018);
      jSONObject0.optBoolean("/W_,B?i~I:-MW8${,z");
      JSONObject jSONObject1 = jSONObject0.put("getsum", 3258L);
      JSONObject jSONObject2 = jSONObject1.put("getsum", (-821));
      jSONObject2.append("4294966475", (Object) null);
      jSONObject1.getJSONArray("4294966475");
      try { 
        jSONObject1.getJSONObject("Bad value from toJSONString: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Bad value from toJSONString: \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0006803112743197
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(1998.964547);
      Float.min(0.0F, 804.59143F);
      jSONObject0.append("A@cO?VNGHPkjJu2", float0);
      String string0 = "getformat";
      Boolean boolean0 = new Boolean("getformat");
      Boolean.compare(true, true);
      Boolean.compare(true, true);
      JSONObject jSONObject1 = jSONObject0.put("getformat", (Map) hashMap0);
      try { 
        jSONObject1.getJSONArray("getformat");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getformat\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.9253539308675658
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      Boolean boolean0 = Boolean.TRUE;
      String string0 = "M{N\\K|WYzbT?PQ(qR6>";
      Boolean boolean1 = Boolean.FALSE;
      Boolean.getBoolean((String) null);
      Boolean.logicalOr(true, true);
      StringWriter stringWriter0 = new StringWriter();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      linkedList0.spliterator();
      short short0 = (short) (-73);
      Short short1 = new Short((short) (-73));
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(short1, stringArray0);
      try { 
        jSONObject0.put("M{NK|WYzbT?PQ(qR6>", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3717602676274168
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5);
      Float float0 = new Float((float) 5);
      StringWriter stringWriter1 = new StringWriter(5);
      String string0 = "getoUnsgnedLong";
      Float float1 = new Float(1875.2375F);
      Float.max(0.0F, 2356.7F);
      JSONObject jSONObject0 = new JSONObject(float1);
      jSONObject0.put("getoUnsgnedLong", (double) 2356.7F);
      jSONObject0.optLong("getoUnsgnedLong");
      stringWriter1.flush();
      try { 
        jSONObject0.getBoolean("getoUnsgnedLong");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getoUnsgnedLong\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0882757123194127
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Integer integer0 = new Integer((-821));
      JSONObject jSONObject0 = new JSONObject(integer0);
      Integer integer1 = new Integer((-821));
      Integer.toUnsignedString((-821));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("4294966475", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(43, 890.0);
      JSONArray jSONArray1 = new JSONArray();
      try { 
        jSONObject1.getJSONObject("4294966475");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4294966475\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8896634622218085
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Float float0 = new Float((-327.5252F));
      Float.max(0.0F, 0.0F);
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("0", float1);
      jSONObject1.optInt("0", 93);
      jSONObject0.getDouble("0");
      jSONObject1.toString(93, (-2235));
      jSONObject0.isNull("W&)CA=C~:W7/MX6$)LT");
      try { 
        jSONObject1.getLong("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.425714162826357
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject.quote("Substring bounds error");
      JSONObject jSONObject0 = new JSONObject();
      int int0 = (-2205);
      Integer integer0 = new Integer((-2205));
      JSONObject jSONObject1 = jSONObject0.putOpt("sig", integer0);
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      jSONObject1.has("sig");
      Long long0 = new Long((-1768L));
      JSONObject jSONObject2 = new JSONObject(long0);
      String string0 = ":scgxH:pkTro;&#Bzr";
      jSONObject0.optLong("sig", (-1768L));
      try { 
        jSONObject2.get("TX9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"TX9\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.944790345693331
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.optInt("] is not a JSONObject.");
      Integer integer0 = new Integer(0);
      JSONObject.valueToString(integer0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Map) null);
      jSONObject0.remove("] is not a JSONObject.");
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject2 = jSONObject1.put("M{NK|WYzbT?PQ(qR6>", (Object) "M{NK|WYzbT?PQ(qR6>");
      jSONObject0.remove("java.lang.Integer@0000000003");
      jSONObject2.optLong("Unclosed comment");
      Boolean boolean1 = new Boolean("M{NK|WYzbT?PQ(qR6>");
      Boolean.logicalOr(true, false);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      JSONObject.valueToString("M{NK|WYzbT?PQ(qR6>", (-321), (-321));
      try { 
        jSONObject0.getDouble("\"java.lang.String@0000000006\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"java.lang.String@0000000006\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.2672545771821317
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.optDouble("Unclosed comment", (-105.25812));
      jSONObject0.putOpt("ismax", boolean0);
      jSONObject0.get("ismax");
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      jSONObject0.put("AWvoO&x", (Map) hashMap0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer integer0 = new Integer(19);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "h}";
      stringArray0[1] = "h}";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("h}");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.094518159785979
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Float.isFinite(508.4559F);
      Float.max(1756.5248F, 1.0F);
      Float.isFinite(1756.5248F);
      Float.isFinite(1.0F);
      Float.max((-302.0F), 0.0F);
      Float.sum(1756.5248F, (-1546.2574F));
      Float.min(0.0F, 210.26733F);
      Float.isFinite(1756.5248F);
      Float.isFinite((-3731.4F));
      Float.isFinite(1.0F);
      Float.max(469.199F, 815.94F);
      Short short0 = new Short((short)59);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.put("'nls82ySr9'", (int) (short)59);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.190024762582879
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      JSONArray jSONArray0 = new JSONArray();
      hashMap0.put(jSONArray0, jSONObject0);
      jSONObject0.remove((String) null);
      String string0 = "M{N\\K|WYzbT?PQ(qR6>";
      Boolean boolean1 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.put("M{NK|WYzbT?PQ(qR6>", (Object) boolean1);
      jSONObject1.remove((String) null);
      Boolean boolean2 = new Boolean((String) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("M{NK|WYzbT?PQ(qR6>", (Collection) linkedList0);
      Boolean.logicalOr(false, true);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.remove("wLE/0i[~Q/?S$3Si@");
      jSONObject1.write(stringWriter0);
      try { 
        jSONObject0.getDouble("M{NK|WYzbT?PQ(qR6>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"M{NK|WYzbT?PQ(qR6>\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.131234541181259
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      Byte.toUnsignedLong((byte)44);
      String[] stringArray0 = new String[3];
      Byte.toUnsignedInt((byte)44);
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "B7?dng";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (double) (byte)39);
      jSONObject0.toString((int) (byte)39);
      String string0 = jSONObject0.optString("] is not a JSONArray.", "] is not a JSONArray.");
      jSONObject0.opt("{\"java.lang.String@0000000002\": java.lang.Double@0000000003}");
      jSONObject0.optLong("ik");
      jSONObject0.toString((int) (byte)39);
      Byte.compare((byte)97, (byte) (-119));
      jSONObject0.isNull("(_&");
      JSONObject.numberToString(byte0);
      JSONObject.quote("");
      JSONObject.doubleToString((byte) (-119));
      JSONObject.quote("wheel.json.JSONObject$1");
      Short short0 = Short.valueOf((short)3);
      JSONObject.valueToString(short0);
      JSONObject.doubleToString(216);
      JSONObject jSONObject2 = jSONObject1.append("gethashCode", "] is not a JSONArray.");
      jSONObject2.names();
      jSONObject0.toString((int) (byte)44, (int) (byte) (-119));
      String string1 = JSONObject.numberToString(byte0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.7866687254045313
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Long long0 = new Long((-2931L));
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">!^kJ`3i:T9lAk6A";
      stringArray0[1] = "xk&AuY";
      stringArray0[2] = "";
      stringArray0[3] = "";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.has("");
      Integer integer0 = new Integer(2282);
      JSONObject jSONObject1 = jSONObject0.putOpt("", integer0);
      jSONObject1.getDouble("");
      String string0 = jSONObject0.optString("");
      assertNotNull(string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Float.isFinite(508.4559F);
      Float.max(1756.5248F, 1.0F);
      Float.isFinite(1756.5248F);
      Float float0 = new Float((double) 1756.5248F);
      Float.max((-1225.7893F), 0.0F);
      Float float1 = new Float((-892.00653F));
      Float.min(0.0F, 0.0F);
      Float.max(0.0F, (-3220.706F));
      Float.min(0.0F, 0.0F);
      Float.isFinite(1.0F);
      Float.isFinite((-1.0F));
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(0.0F);
      Float float1 = new Float(0.0F);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Float> linkedList2 = new LinkedList<Float>(linkedList1);
      Float float2 = new Float((-43.7726F));
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      linkedList1.add(float2);
      LinkedList<Float> linkedList5 = new LinkedList<Float>(linkedList4);
      Float float3 = new Float(0.0F);
      linkedList4.add(float2);
      linkedList1.removeFirst();
      LinkedList<Float> linkedList6 = new LinkedList<Float>();
      linkedList3.add(float1);
      LinkedList<Float> linkedList7 = new LinkedList<Float>(linkedList4);
      Float float4 = new Float((-2205.3218F));
      Float.min(0.0F, 0.0F);
      Float.min(0.0F, (-2205.3218F));
      LinkedList<Float> linkedList8 = new LinkedList<Float>();
      linkedList0.add(float4);
      Float float5 = new Float(713.9F);
      LinkedList<Float> linkedList9 = new LinkedList<Float>();
      linkedList9.push((Float) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList7);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0866765380112486
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      Byte.toUnsignedLong((byte)44);
      String[] stringArray0 = new String[3];
      Byte.toUnsignedInt((byte)44);
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "B7?dng";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (double) (byte)39);
      jSONObject0.toString((int) (byte)39);
      jSONObject0.optString("a2H;Fk;R703/.", "] is not a JSONArray.");
      jSONObject0.opt("{\"java.lang.String@0000000002\": java.lang.Double@0000000003}");
      jSONObject0.optLong("ik");
      jSONObject0.toString((int) (byte)39);
      Byte.compare((byte)97, (byte) (-119));
      jSONObject0.isNull("(_&");
      JSONObject.numberToString(byte0);
      JSONObject.quote("");
      JSONObject.doubleToString((byte) (-119));
      JSONObject.quote("wheel.json.JSONObject$1");
      Short short0 = Short.valueOf((short)3);
      JSONObject.valueToString(short0);
      JSONObject.doubleToString(216);
      JSONObject jSONObject2 = jSONObject1.append("gethashCode", "] is not a JSONArray.");
      jSONObject0.toString((int) (byte)44, (int) (byte) (-119));
      Object object0 = jSONObject2.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, JSONObject> hashMap1 = new HashMap<Object, JSONObject>();
      try { 
        jSONObject0.put((String) null, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.2016160455217166
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Float float0 = new Float((-326.7905F));
      Float float1 = new Float(0.0F);
      Integer integer0 = new Integer((-4177984));
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.putOpt("{}", (Object) null);
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.881523774201196
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("] is not a JSONObject.");
      Integer integer0 = new Integer(0);
      JSONObject.valueToString(integer0);
      Integer.getInteger("getputAll");
      jSONObject0.put("] is not a JSONObject.", (Map) null);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter(5);
      Writer writer0 = jSONObject0.write(stringWriter1);
      writer0.write("java.lang.Integer@0000000003");
      jSONObject0.accumulate("] is not a JSONObject.", writer0);
      stringWriter0.write(5);
      stringWriter0.write(5);
      stringWriter0.append('F');
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.append((CharSequence) "java.lang.Integer@0000000003");
      stringWriter2.append((CharSequence) "getputAll");
      try { 
        jSONObject0.getLong("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(10);
      Float float0 = new Float((-1885.3239));
      Float.isFinite(10);
      Float.max(1.0F, (-821));
      Boolean boolean0 = Boolean.TRUE;
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.660010608977756
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Float float0 = new Float((-327.5252F));
      Float.min(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "{}";
      JSONObject jSONObject1 = jSONObject0.put("{}", 518.9508);
      String string1 = "J,/Ph.9`e('Sb=@";
      JSONObject jSONObject2 = jSONObject1.accumulate("get", jSONObject0);
      // Undeclared exception!
      jSONObject2.toString(103);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.704341066085106
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Short short0 = new Short((short)4938);
      String[] stringArray0 = new String[1];
      Short.toUnsignedInt((short) (-508));
      Short.toUnsignedInt((short)4938);
      String string0 = "is";
      stringArray0[0] = "is";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      Short.toUnsignedInt((short)4938);
      JSONObject jSONObject1 = jSONObject0.put("is", (long) (short)4938);
      Object object0 = new Object();
      jSONObject1.optLong("is");
      jSONObject0.optDouble("is");
      JSONObject jSONObject2 = jSONObject0.putOpt("is", object0);
      JSONObject.valueToString(jSONObject2);
      jSONObject2.opt("is");
      jSONObject2.keys();
      try { 
        jSONObject2.getLong("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.222035073387142
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      Byte.toUnsignedLong((byte)44);
      String[] stringArray0 = new String[3];
      Byte.toUnsignedInt((byte)44);
      String string0 = "] is not a JSONArray.";
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "to";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (double) (byte)39);
      jSONObject0.optString("a2H;Fk;R703/.", "] is not a JSONArray.");
      Object object0 = JSONObject.NULL;
      jSONObject0.optLong("ik");
      jSONObject0.toString((int) (byte)39);
      Integer.min((byte)44, 2330);
      jSONObject0.optBoolean("U");
      jSONObject0.put("] is not a JSONArray.", 3258L);
      JSONObject jSONObject2 = jSONObject1.put("(_&", 91);
      jSONObject2.optDouble("] is not a JSONArray.", (-1584.0633915));
      Long long0 = new Long(3258L);
      JSONObject jSONObject3 = jSONObject0.append("Expected a ',' or ']'", long0);
      try { 
        jSONObject3.getJSONArray(": ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\": \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.1193782217962913
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "getformat";
      Boolean boolean0 = new Boolean("getformat");
      Boolean.compare(true, true);
      JSONObject jSONObject1 = new JSONObject((Object) "getformat");
      jSONObject1.optDouble("0", (double) 0);
      hashMap0.put(jSONObject1, jSONObject1);
      jSONObject1.optDouble("getformat", Double.NaN);
      JSONObject jSONObject2 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject3 = new JSONObject();
      try { 
        jSONObject0.getInt("getformat");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getformat\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.7798198214680787
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a JSONObject.");
      jSONObject0.optInt("to");
      Integer integer0 = new Integer(48);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      Integer integer1 = new Integer(0);
      JSONObject jSONObject1 = jSONObject0.put(" of ", (Map) null);
      Integer integer2 = new Integer(48);
      Integer integer3 = new Integer(5);
      StringWriter stringWriter0 = new StringWriter(48);
      StringWriter stringWriter1 = new StringWriter(5);
      jSONObject1.write(stringWriter1);
      stringWriter0.write("null");
      jSONObject1.accumulate("null", integer3);
      stringWriter0.write(6);
      StringWriter stringWriter2 = stringWriter0.append('F');
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = stringWriter2.append((CharSequence) " of ");
      // Undeclared exception!
      try { 
        stringWriter4.append((CharSequence) "null", 46, 104);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.128293864223753
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("^ isno a JSSObect.", (Map) null);
      jSONObject0.toString();
      Short.valueOf((short)128);
      Byte byte0 = new Byte((byte)44);
      Short.toUnsignedLong((short) (-1310));
      Short short0 = new Short((short)9);
      JSONObject.valueToString(short0);
      jSONObject1.optDouble("java.lang.Short@0000000005", 1.0);
      Short.toUnsignedInt((short)1814);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject2 = jSONObject1.append("{\"java.lang.String@0000000004\":wheel.json.JSONObject@0000000003}", (Object) null);
      jSONObject2.toString((int) (short) (-1310), (int) (byte)44);
      JSONObject jSONObject3 = jSONObject0.accumulate("{\"java.lang.String@0000000004\":wheel.json.JSONObject@0000000003}", (Object) null);
      Short.toUnsignedLong((short)46);
      JSONObject jSONObject4 = jSONObject2.putOpt((String) null, jSONObject1);
      jSONObject4.optLong("java.lang.Short@0000000005");
      JSONObject.valueToString("java.lang.Short@0000000005");
      jSONObject3.names();
      jSONObject1.optLong(" of ");
      try { 
        jSONObject0.getDouble("!'j|2`>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!'j|2`>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.1974572914929142
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("^ isno a JSSObect.", (Map) null);
      jSONObject0.toString();
      Short.valueOf((short)128);
      Byte byte0 = new Byte((byte)44);
      Short.toUnsignedLong((short) (-1316));
      Short short0 = new Short((short)9);
      JSONObject.valueToString(short0);
      jSONObject1.optDouble("java.lang.Short@0000000005", 1.0);
      Short.toUnsignedInt((short)1814);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject2 = jSONObject1.append("{\"java.lang.String@0000000004\":wheel.json.JSONObject@0000000003}", (Object) null);
      jSONObject2.toString((int) (short) (-1316), (int) (byte)44);
      jSONObject0.accumulate("{\"java.lang.String@0000000004\":wheel.json.JSONObject@0000000003}", (Object) null);
      JSONObject jSONObject3 = jSONObject2.putOpt((String) null, jSONObject1);
      jSONObject3.optLong("java.lang.Short@0000000005");
      jSONObject3.toString(1814);
      Float.max((-247.2F), 0L);
      Byte byte1 = new Byte((byte)16);
      jSONObject0.accumulate("Bad value from toJSONString: ", byte1);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject4 = new JSONObject(object0);
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("{\"java.lang.String@0000000004\":wheel.json.JSONObject@0000000003}", long0);
      jSONObject4.put("java.lang.Short@0000000005", (Object) long1);
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.0322794504401815
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("^ isno a JSSObect.", (Map) null);
      jSONObject0.toString();
      Short.valueOf((short)128);
      Byte byte0 = new Byte((byte)44);
      Short.toUnsignedLong((short) (-1310));
      Short short0 = new Short((short)9);
      JSONObject.valueToString(short0);
      jSONObject1.optDouble("java.lang.Short@0000000005", 1.0);
      Short.toUnsignedInt((short)1814);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject2 = jSONObject1.append("{\"java.lang.String@0000000004\":wheel.json.JSONObject@0000000003}", (Object) null);
      jSONObject2.toString((int) (short) (-1310), (int) (byte)44);
      jSONObject0.accumulate("{\"java.lang.String@0000000004\":wheel.json.JSONObject@0000000003}", (Object) null);
      String string0 = "!'j|2`>";
      Short.toUnsignedLong((short)46);
      JSONObject jSONObject3 = jSONObject2.putOpt((String) null, jSONObject1);
      try { 
        jSONObject3.getLong("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.6187622161991664
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Short short0 = new Short((short)2145);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = new JSONObject();
      Boolean boolean1 = new Boolean(true);
      Boolean.valueOf("0.0");
      Double double0 = new Double(117);
      String string0 = "ToG4~#/io";
      Long long0 = new Long((-2283L));
      Long long1 = Long.getLong("ToG4~#/io", long0);
      JSONObject jSONObject2 = jSONObject1.put("ToG4~#/io", (Object) long1);
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("tr", object0);
      Boolean.logicalAnd(true, true);
      int int0 = 2475;
      jSONObject0.toString(2475, 9);
      jSONObject1.isNull("K#Pd$}7cN(dGP");
      try { 
        jSONObject2.getLong("e6@2(>3FE2_rK1;Zu.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"e6@2(>3FE2_rK1;Zu.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Short short0 = new Short((short)1543);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "e$yqRJ.eyg~U.ub";
      String string0 = "(RFa~T<<Z]8KF";
      Short.compare((short)0, (short)12);
      stringArray0[1] = "(RFa~T<<Z]8KF";
      stringArray0[2] = "getdecode";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.3886232369822666
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Float float0 = new Float((-327.5252F));
      Float float1 = new Float(1.4330761F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("{}", (double) 1.4330761F);
      JSONObject.valueToString("{}");
      Float.max(40.309467F, 693.5513F);
      JSONObject jSONObject2 = jSONObject1.put("{}", false);
      jSONObject2.length();
      JSONObject jSONObject3 = new JSONObject(jSONObject1);
      boolean boolean0 = jSONObject1.getBoolean("{}");
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.713652577152744
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject.getNames(jSONObject0);
      hashMap0.remove((Object) "5zO5bgV", (Object) "5zO5bgV");
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", 0L);
      String string0 = "&Jgfw,";
      jSONObject1.optDouble("&Jgfw,", (double) 0L);
      JSONObject jSONObject2 = jSONObject0.put("5zO5bgV", (Map) hashMap0);
      jSONObject2.optDouble("5zO5bgV");
      String string1 = "qiT%rzd9dWi*\"";
      jSONObject0.isNull("qiT%rzd9dWi*\"");
      JSONObject.getNames(jSONObject2);
      JSONObject jSONObject3 = jSONObject2.getJSONObject("5zO5bgV");
      try { 
        jSONObject3.getString("qiT%rzd9dWi*\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"qiT%rzd9dWi*\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.2675632284814613
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 5;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float((float) 5);
      StringWriter stringWriter2 = new StringWriter();
      String string0 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.013351167956459
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Float float0 = new Float((-327.5252F));
      Float.min(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject("{}");
      String string0 = "ishashCode";
      jSONObject0.optLong(":<7{8@F}^G/");
      jSONObject0.has("W5(uKy4;&4AtP");
      Float.sum(0.0F, (-327.5252F));
      Object object0 = JSONObject.NULL;
      Double double0 = new Double(0.0F);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Float float0 = new Float((-327.5252F));
      Float float1 = new Float(0.0F);
      JSONTokener jSONTokener0 = new JSONTokener("{Kq])dcZ`Nu");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {Kq])dcZ`Nu
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      Double double0 = new Double(2205.369);
      Double.min((-1355.316), 581.091);
      Double double1 = Double.valueOf((-1.0));
      hashMap0.put((JSONObject) null, double1);
      hashMap0.put((JSONObject) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      Integer.toUnsignedString(22);
      Boolean boolean1 = new Boolean("ale");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.3401196061221263
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Float.sum(179.44F, 0.0F);
      Float float0 = new Float((double) 0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float1 = new Float(1426.0F);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      linkedList2.addFirst(float1);
      Float float2 = new Float((double) 179.44F);
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      Float float3 = new Float(179.44F);
      linkedList4.push(float3);
      HashMap<Boolean, Short> hashMap0 = new HashMap<Boolean, Short>();
      HashMap<Object, Float> hashMap1 = new HashMap<Object, Float>();
      HashMap<Object, Float> hashMap2 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap1);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "{}", (-2568), (-286));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(0.0F);
      Float float1 = new Float(1.0F);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Float> linkedList2 = new LinkedList<Float>(linkedList1);
      Float float2 = new Float((-43.7726F));
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      linkedList1.add(float2);
      LinkedList<Float> linkedList5 = new LinkedList<Float>(linkedList4);
      Float float3 = new Float(0.0F);
      Float.sum(0.0F, (-43.7726F));
      LinkedList<Float> linkedList6 = new LinkedList<Float>();
      linkedList1.add(float3);
      Float float4 = new Float((double) (-43.7726F));
      linkedList1.add(float4);
      Float float5 = new Float(0.0);
      LinkedList<Float> linkedList7 = new LinkedList<Float>();
      Float float6 = new Float(0.0F);
      LinkedList<Float> linkedList8 = new LinkedList<Float>();
      Float float7 = new Float((double) (-2161.0F));
      LinkedList<Float> linkedList9 = new LinkedList<Float>();
      Float float8 = new Float(0.0F);
      linkedList9.push(float8);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList3);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.9080648236309732
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 5;
      StringWriter stringWriter0 = new StringWriter(5);
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float((float) 5);
      StringWriter stringWriter2 = new StringWriter(5);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "get";
      jSONObject0.accumulate("get", stringWriter1);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("get", object0);
      try { 
        jSONObject1.getDouble("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5);
      StringWriter stringWriter1 = new StringWriter();
      Integer integer0 = new Integer((-5130));
      Integer integer1 = new Integer((-5130));
      Integer.min(5, 19);
      Double double0 = new Double(5);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "){i?bJG;9^j(N*DT";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.9214405419782552
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5);
      StringWriter stringWriter1 = new StringWriter();
      Float.sum((-987.0665F), 5);
      Float float0 = new Float((double) 5);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Float float1 = new Float((-982.0665F));
      linkedList0.push(float1);
      String[] stringArray0 = new String[3];
      String string0 = "\\=bHl";
      stringArray0[0] = "=bHl";
      stringArray0[1] = "";
      stringArray0[2] = null;
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.optDouble("", (-1.0));
      Double double0 = new Double((-1.0));
      Double.max((-982.0665F), 0.0);
      jSONObject0.put("", (Object) null);
      try { 
        jSONObject0.getDouble("Null pointer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null pointer\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7099284913365564
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer integer0 = new Integer(8);
      Integer integer1 = new Integer(8);
      Integer.min((-2283), (-2580));
      Integer.toUnsignedString((-22654515));
      Integer.toUnsignedString(8);
      Double double0 = new Double(0.0);
      Double double1 = new Double((-2283));
      Float.min(8, 0.0F);
      Float.isFinite((-1853.1958F));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Float, Integer> hashMap1 = new HashMap<Float, Integer>();
      Float float0 = new Float(1115.10891);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Long.sum(8, (-2580));
      boolean boolean0 = new Boolean(true);
      jSONObject0.optJSONArray("IUo6J");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "getformat";
      Boolean boolean0 = new Boolean("getformat");
      Boolean.compare(true, true);
      Boolean.compare(true, true);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.1776313909219147
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5);
      StringWriter stringWriter1 = new StringWriter();
      Float.sum((-987.0665F), 179.44F);
      StringWriter stringWriter2 = new StringWriter(5);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONObject("{");
      Boolean.getBoolean("getoUnsgnedLong");
      Float float0 = new Float((-807.6265F));
      JSONObject jSONObject1 = jSONObject0.accumulate("getoUnsgnedLong", float0);
      jSONObject1.optInt("getoUnsgnedLong", 3583);
      jSONObject0.getDouble("getoUnsgnedLong");
      String string0 = "udhy>.9|&_<1C>/c-";
      try { 
        jSONObject0.getDouble("udhy>.9|&_<1C>/c-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"udhy>.9|&_<1C>/c-\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.9611035272855255
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      String string0 = "^ isno a JSSOb\\ect.";
      jSONObject0.toString();
      Short.valueOf((short)128);
      Byte byte0 = new Byte((byte)44);
      Short.toUnsignedLong((short) (-1316));
      Short short0 = new Short((byte)44);
      JSONObject.valueToString(short0);
      jSONObject0.optDouble("java.lang.Short@0000000003", 1.0);
      short short1 = (short)1814;
      Short.toUnsignedInt((short)1814);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.append("{}", boolean0);
      jSONObject1.toString((int) (short) (-1316), (int) (byte)44);
      JSONObject jSONObject2 = jSONObject1.putOpt((String) null, jSONObject0);
      jSONObject2.optLong("java.lang.Short@0000000003");
      JSONObject.valueToString("java.lang.Short@0000000003");
      jSONObject0.optLong(" of ");
      try { 
        jSONObject0.getDouble("!'j|2`>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!'j|2`>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.874700405858334
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(0.0F);
      Float float1 = new Float(1.0F);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Float> linkedList2 = new LinkedList<Float>(linkedList1);
      Float float2 = new Float((-43.7726F));
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      LinkedList<Float> linkedList5 = new LinkedList<Float>(linkedList4);
      Float float3 = new Float(0.0F);
      Float.sum(0.0F, (-43.7726F));
      LinkedList<Float> linkedList6 = new LinkedList<Float>();
      linkedList1.add(float3);
      linkedList0.add((Float) null);
      Float float4 = new Float(0.0);
      LinkedList<Float> linkedList7 = new LinkedList<Float>();
      Float float5 = new Float((-2161.0F));
      LinkedList<Float> linkedList8 = new LinkedList<Float>();
      Float float6 = new Float((double) 1.0F);
      linkedList0.push(float6);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList5);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.length();
      jSONObject0.optLong("");
      JSONObject jSONObject1 = jSONObject0.put("is", true);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.161962952292362
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5);
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float((double) 5);
      Float.sum((-987.0665F), 179.44F);
      Integer integer0 = new Integer(5);
      StringWriter stringWriter2 = new StringWriter(2545);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer1 = new Integer(5);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      Integer integer2 = new Integer(9);
      hashMap1.put(integer2, integer1);
      jSONObject0.put("{", (double) 5);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      jSONObject0.optJSONArray("{");
      jSONObject1.put("F~", (double) (-22654515));
      Integer integer3 = new Integer((-22654515));
      Boolean boolean0 = Boolean.FALSE;
      try { 
        jSONObject0.append((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.041432646277109
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("] is not a number.", 0);
      String string0 = "'\n";
      jSONObject0.put("'\n", 0L);
      try { 
        jSONObject0.getJSONObject("'\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'\\n\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.201267184834986
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Float.isFinite((-1955.4F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-327.5252F));
      Float float1 = new Float(0.0F);
      linkedList0.add(float1);
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      linkedList0.addLast(float1);
      Float float2 = new Float(0.0F);
      linkedList1.removeFirst();
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      LinkedList<Float> linkedList3 = new LinkedList<Float>(linkedList1);
      Float float3 = new Float(1757.357F);
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      linkedList4.add(float1);
      Boolean boolean0 = new Boolean("!cAWH'x@Rgw");
      JSONObject jSONObject0 = new JSONObject(float0);
      Long.sum(0L, (-1L));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "!cAWH'x@Rgw";
      stringArray0[1] = "!cAWH'x@Rgw";
      stringArray0[2] = "!cAWH'x@Rgw";
      stringArray0[3] = "!cAWH'x@Rgw";
      stringArray0[4] = "!cAWH'x@Rgw";
      stringArray0[5] = "!cAWH'x@Rgw";
      stringArray0[6] = "!cAWH'x@Rgw";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject0.getString("!cAWH'x@Rgw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!cAWH'x@Rgw\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.550834909924592
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(1998.964547);
      Float.isFinite((-1940.5267F));
      jSONObject0.append("A@cO?VNGHPkjJu2", float0);
      Boolean boolean0 = new Boolean("getformat");
      Boolean.compare(true, true);
      int int0 = Boolean.compare(true, true);
      JSONObject jSONObject1 = jSONObject0.put("getformat", (Map) hashMap0);
      jSONObject1.optLong("getformat", (long) 0);
      hashMap0.put(jSONObject1, jSONObject1);
      jSONObject1.optDouble("getformat", Double.NaN);
      JSONObject jSONObject2 = new JSONObject((Object) hashMap0);
      jSONObject0.put("getformat", (long) 0);
      int int1 = jSONObject0.getInt("getformat");
      assertTrue(int1 == int0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.9740936974679846
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Float.min(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject("{}");
      String string0 = "ishashCode";
      jSONObject0.put(":<7{8@F}^G/", (double) 0.0F);
      jSONObject0.optLong(":<7{8@F}^G/");
      jSONObject0.has("W5(uKy4;&4AtP");
      Float.sum(0.0F, (-327.5252F));
      jSONObject0.putOpt(":<7{8@F}^G/", ":<7{8@F}^G/");
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.04598343526306
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Float.isFinite((-1955.4F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-327.5252F));
      Float float1 = new Float(0.0F);
      linkedList0.add(float1);
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      Float float2 = new Float(0.0F);
      linkedList1.removeFirst();
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      LinkedList<Float> linkedList3 = new LinkedList<Float>(linkedList1);
      Float float3 = new Float(1757.357F);
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      linkedList4.add(float1);
      Boolean boolean0 = new Boolean("!cAWH'x@Rgw");
      JSONObject jSONObject0 = new JSONObject(float0);
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.9119048083827854
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      Byte.toUnsignedLong((byte)58);
      String[] stringArray0 = new String[3];
      Byte.toUnsignedInt((byte)58);
      stringArray0[0] = "] is not a JSONArray.";
      String string0 = "*bpp)j7=";
      stringArray0[1] = "*bpp)j7=";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (double) (byte)39);
      jSONObject0.toString((int) (byte)39);
      String string1 = "a2H;Fk;R703/.";
      jSONObject0.optString("a2H;Fk;R703/.", "] is not a JSONArray.");
      jSONObject0.opt("{\"java.lang.String@0000000002\": java.lang.Double@0000000003}");
      jSONObject0.optLong("ik");
      jSONObject0.toString((int) (byte)39);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject1.put(stringArray0[2], (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = new Integer(8);
      Integer integer1 = new Integer(138);
      Integer integer2 = new Integer(8);
      Integer.toUnsignedString((int) integer2);
      Integer.toUnsignedString(8);
      Double double0 = new Double((-169.761673));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8";
      stringArray0[2] = "8";
      stringArray0[4] = "8";
      stringArray0[5] = "8";
      JSONObject jSONObject0 = new JSONObject(integer1, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("\f");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.395874039742102
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Integer integer0 = new Integer(8);
      Integer integer1 = new Integer(138);
      Integer integer2 = new Integer(8);
      Integer.toUnsignedString((int) integer2);
      Integer.toUnsignedString(8);
      Double double0 = new Double((-169.761673));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8";
      stringArray0[1] = "";
      stringArray0[2] = "8";
      stringArray0[4] = "8";
      stringArray0[5] = "8";
      Boolean boolean0 = new Boolean("getrotateLeft");
      Float float0 = new Float((-1680.5668F));
      Long long0 = new Long(8);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      long long1 = jSONObject2.optLong("getrotateLeft");
      assertEquals(1, jSONObject1.length());
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0115053753997263
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.max((-1.0F), 693.5143F);
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get(",u[\"hp6%8fI:(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",u[\\\"hp6%8fI:(\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.3815837985741872
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1.0));
      Double.max(1.0, (-1.0));
      jSONObject0.putOpt("SY$ugXRP2wO!u+", double0);
      jSONObject0.optInt("rep");
      jSONObject0.put("SY$ugXRP2wO!u+", 1L);
      jSONObject0.length();
      String string0 = "%C#@gvN|g;v%;;&G";
      try { 
        jSONObject0.put("%C#@gvN|g;v%;;&G", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.37982457853943
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer integer0 = new Integer((-821));
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.optLong((String) null);
      Integer.remainderUnsigned((-821), (-821));
      jSONObject0.optString(".", (String) null);
      jSONObject0.optString(":scgxH:pkTro;&#Bzr", (String) null);
      try { 
        jSONObject0.put((String) null, (Object) ".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.188959760578142
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.isFinite((-734.58538));
      JSONObject jSONObject0 = new JSONObject(double0);
      long long0 = jSONObject0.optLong("9.O$:6C0E", 1L);
      assertEquals(1L, long0);
      
      String string0 = jSONObject0.optString("oj");
      assertEquals(3, jSONObject0.length());
      assertEquals("", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.1675979241255923
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("VUN<}8};Q!?AFvA,rt");
      Short short0 = new Short((short)2145);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = new JSONObject();
      String string0 = null;
      Boolean boolean1 = new Boolean(true);
      Integer integer0 = new Integer(117);
      jSONObject0.optDouble((String) null);
      JSONObject jSONObject2 = new JSONObject(boolean0);
      String string1 = "m>^G{zb";
      jSONObject2.optDouble("m>^G{zb", 95.46);
      Double double0 = new Double(Double.NaN);
      Double.max(0.0, 2799.0);
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("m>^G{zb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of m>^G{zb
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Short short0 = new Short((short) (-1672));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Nm";
      stringArray0[1] = "wheel.json.JSONTokener";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      double double0 = jSONObject0.optDouble("val");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "istoUpperCase";
      stringArray0[3] = "istoUpperCase";
      stringArray0[7] = "gettrim";
      JSONObject.getNames((Object) stringArray0[4]);
      stringArray0[5] = "istoUpperCase";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      Boolean.valueOf("issubstring");
      Short short0 = new Short((short)1);
      assertEquals((short)1, (short)short0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      Integer integer0 = new Integer(43);
      Integer.toUnsignedString(43);
      String string0 = "{en#a<=1'()";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.574666223988178
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5);
      StringWriter stringWriter1 = new StringWriter();
      Integer.getInteger((String) null);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      JSONObject jSONObject1 = jSONObject0.put("getputAll", (Map) null);
      Integer integer0 = new Integer(2072);
      Integer integer1 = new Integer(2072);
      StringWriter stringWriter2 = new StringWriter(128);
      StringWriter stringWriter3 = new StringWriter(128);
      jSONObject0.write(stringWriter1);
      String string0 = "A JSONObject text must end with '}'";
      stringWriter0.write("A JSONObject text must end with '}'");
      jSONObject1.accumulate("8%_;Xp", (Object) null);
      stringWriter0.write(13);
      stringWriter1.write(128);
      stringWriter2.append('L');
      StringWriter stringWriter4 = new StringWriter();
      stringWriter2.append((CharSequence) "A JSONObject text must end with '}'");
      StringWriter stringWriter5 = new StringWriter(2340);
      stringWriter5.append((CharSequence) "getputAll");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "A JSONObject text must end with '}'", 2340, 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.155461146462142
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Short short0 = new Short((short)1634);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = new JSONObject();
      boolean boolean1 = jSONObject0.optBoolean((String) null, true);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean1);
      
      Integer.toUnsignedString(55);
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2.equals((Object)boolean1));
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.2638580099045136
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Float.isFinite((-1955.4F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-327.5252F));
      Float float1 = new Float(0.0F);
      linkedList0.add(float1);
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      Float float2 = new Float(0.0F);
      linkedList1.removeFirst();
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      LinkedList<Float> linkedList3 = new LinkedList<Float>(linkedList1);
      Float float3 = new Float(1757.357F);
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      linkedList4.add(float1);
      Boolean boolean0 = new Boolean("!cAWH'x@Rgw");
      JSONObject jSONObject0 = new JSONObject(float0);
      Long.sum(0L, (-1L));
      jSONObject0.isNull("!cAWH'x@Rgw");
      jSONObject0.optBoolean("!cAWH'x@Rgw", false);
      try { 
        jSONObject0.getInt("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.93504084661911
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 19, 19);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5);
      StringWriter stringWriter1 = new StringWriter();
      JSONObject.quote("\b");
      Integer.toUnsignedString(918);
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = JSONObject.quote("si[IiiGx+uyye;\"2E4h");
      String string1 = Integer.toUnsignedString(2);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.7821682784622026
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Float float0 = new Float(1756.5248F);
      Float.isFinite(1756.5248F);
      Boolean boolean0 = new Boolean(true);
      Float float1 = new Float((-1386.0F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      linkedList1.add(float1);
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      Float float2 = new Float((-10.5386095F));
      Float.isFinite(1756.5248F);
      linkedList2.addFirst(float2);
      Float float3 = new Float(0.0);
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      Float float4 = new Float((-1386.0F));
      linkedList2.addAll((Collection<? extends Float>) linkedList0);
      linkedList2.addLast(float4);
      linkedList2.spliterator();
      Float float5 = new Float(1756.5248F);
      JSONObject jSONObject0 = new JSONObject(linkedList2);
      JSONObject jSONObject1 = new JSONObject();
      Float.isFinite((-2405.5222F));
      Float.max((-2405.5222F), (-1468.8511F));
      Double double0 = new Double((-2800.933059472));
      jSONObject0.append("a<'E>m ,MJ", double0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.max((-1.0F), 693.5143F);
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-46));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.580223547206074
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 5;
      StringWriter stringWriter0 = new StringWriter(5);
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float((double) 5);
      Float.sum((-987.0665F), 179.44F);
      StringWriter stringWriter2 = new StringWriter(5);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONObject("{");
      String string0 = "getoUnsgnedLong";
      Boolean.getBoolean("getoUnsgnedLong");
      Float float1 = new Float(1874.462F);
      JSONObject jSONObject1 = jSONObject0.accumulate("getoUnsgnedLong", float1);
      jSONObject1.optInt("getoUnsgnedLong", 3583);
      jSONObject0.getDouble("getoUnsgnedLong");
      StringWriter stringWriter3 = new StringWriter();
      stringWriter3.append((CharSequence) "getoUnsgnedLong");
      int int1 = 123;
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "getoUnsgnedLong", 123, 123);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.695600427808076
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.max((-1.0F), 693.5143F);
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(float0, (-46), (-46));
      assertNotNull(string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.7875550098159887
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5);
      StringWriter stringWriter1 = new StringWriter();
      Float.max(5, (-0.3987527F));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gettoHexString", false);
      jSONObject0.put("\b", true);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.087921501855678
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Float float0 = new Float(1756.5248F);
      Float.isFinite(1756.5248F);
      Float.isFinite((-10.5386095F));
      Float float1 = new Float((-1386.0F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float.isFinite(1.0F);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      linkedList1.add(float1);
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      Float float2 = new Float((-10.5386095F));
      Float.isFinite(1756.5248F);
      linkedList2.addFirst(float2);
      Float float3 = new Float(0.0);
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      Float float4 = new Float((-10.5386095F));
      linkedList2.addLast(float4);
      Float.max(1.4215035F, (-1386.0F));
      Short short0 = new Short((short)59);
      JSONObject jSONObject0 = new JSONObject(linkedList2);
      jSONObject0.optLong("Null key.", 0L);
      JSONObject jSONObject1 = new JSONObject(float3);
      Float.isFinite((-2405.5222F));
      float float5 = Float.max((-2405.5222F), (-1468.8511F));
      assertEquals((-1468.8511F), float5, 0.01F);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.7041946588399464
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Integer integer0 = new Integer((-821));
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.optLong((String) null);
      Integer.remainderUnsigned((-821), (-821));
      Boolean boolean0 = new Boolean("]");
      JSONObject.valueToString(boolean0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", "java.lang.Boolean@0000000005");
      JSONObject.valueToString(jSONObject1);
      Boolean boolean1 = new Boolean("wheel.json.JSONObject@0000000001");
      JSONObject jSONObject2 = new JSONObject((Object) "java.lang.Boolean@0000000005");
      jSONObject2.optLong(":scgxH:pkTro;&#Bzr", 963L);
      jSONObject1.putOpt("Ytc&:(ueSKUx.~", "|.V.*'cQ^cVV6ZA");
      Object object0 = JSONObject.NULL;
      jSONObject0.optString("ma", "] is not a number.");
      jSONObject0.optString(":scgxH:pkTro;&#Bzr", "");
      jSONObject1.optDouble("|.V.*'cQ^cVV6ZA", 388.0);
      jSONObject1.optBoolean("|.V.*'cQ^cVV6ZA");
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Object) ".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float((-1885.3239));
      Float.isFinite(10);
      Float.max(1.0F, (-821));
      Boolean boolean0 = new Boolean(true);
      Float.max(1.0F, 0.0F);
      Float.isFinite(0.0F);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Float, Integer> hashMap1 = new HashMap<Float, Integer>();
      HashMap<Byte, JSONObject> hashMap2 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getDouble("ispush");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ispush\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.5726694994129984
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Float.max(846.575F, 0.0F);
      Float.isFinite((-1955.4F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-327.5252F));
      Float float1 = new Float(0.0F);
      linkedList0.add(float1);
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      Float float2 = new Float(0.0F);
      linkedList1.removeFirst();
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      LinkedList<Float> linkedList3 = new LinkedList<Float>(linkedList1);
      Float float3 = new Float(1756.5248F);
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      linkedList4.add(float1);
      Boolean boolean0 = new Boolean("!cAWH'x@Rgw");
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.max(991.67F, (-1955.4F));
      jSONObject0.put("!cAWH'x@Rgw", (Collection) linkedList3);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(1.0F);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Float> linkedList2 = new LinkedList<Float>(linkedList1);
      Float float1 = new Float((-43.7726F));
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      linkedList1.add(float1);
      LinkedList<Float> linkedList5 = new LinkedList<Float>(linkedList4);
      Float float2 = new Float(0.0F);
      linkedList4.add(float1);
      linkedList1.removeFirst();
      linkedList3.add(float0);
      LinkedList<Float> linkedList6 = new LinkedList<Float>(linkedList4);
      Float float3 = new Float((-2205.3218F));
      Float.min((-43.7726F), 1.0F);
      Float.min((-1.0F), (-1.0F));
      LinkedList<Float> linkedList7 = new LinkedList<Float>();
      Float float4 = new Float((double) (-43.7726F));
      linkedList6.add(float4);
      Boolean boolean0 = new Boolean("P^NQ:)[");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.37982457853943
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Integer integer0 = new Integer((-821));
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.optLong((String) null);
      Integer.remainderUnsigned((-821), (-821));
      jSONObject0.optString("ma", (String) null);
      jSONObject0.optString(":scgxH:pkTro;&#Bzr", (String) null);
      try { 
        jSONObject0.put((String) null, (Object) ".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.4626869949611576
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      Byte.toUnsignedLong((byte)44);
      String[] stringArray0 = new String[3];
      Byte.toUnsignedInt((byte)44);
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "to";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put("] is not a JSONArray.", (double) (byte)39);
      jSONObject0.optString("a2H;Fk;R703/.", "] is not a JSONArray.");
      Object object0 = JSONObject.NULL;
      String string0 = "ik";
      jSONObject0.optLong("ik");
      jSONObject0.optJSONArray("] is not a JSONArray.");
      String string1 = "~";
      JSONTokener jSONTokener0 = new JSONTokener("ik");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ik
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Byte byte0 = new Byte((byte)42);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "+DvVM&yt=";
      stringArray0[1] = ": ";
      stringArray0[2] = "isrotateLeft";
      stringArray0[3] = "gethighestOneBit";
      stringArray0[4] = "k Ci@c}]uupQ";
      stringArray0[5] = "Substring bounds error";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      String string0 = jSONObject0.optString("k Ci@c}]uupQ");
      assertEquals("", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Float.isFinite(508.4559F);
      Float.max(1756.5248F, 1.0F);
      Float.isFinite(1756.5248F);
      Float.isFinite(1.0F);
      Float.max((-302.0F), 1756.5248F);
      Float.sum(1756.5248F, (-1546.2574F));
      Float float0 = new Float(508.4559F);
      Float.max((-302.0F), 1.0F);
      Float float1 = new Float(1756.5248F);
      Float.min(1756.5248F, 1756.5248F);
      Float.max(1756.5248F, 1756.5248F);
      Float.min((-1.0F), 1.0F);
      Float.isFinite((-767.8378F));
      Float.min((-302.0F), 1.0F);
      Float.isFinite((-1.0F));
      Float.isFinite((-1546.2574F));
      Float.max((-4.646835F), (-302.0F));
      String string0 = JSONObject.doubleToString(3205.918895887);
      assertEquals("3205.918895887", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Float.isFinite(508.4559F);
      Float.max(1756.5248F, 1.0F);
      Float.isFinite(1756.5248F);
      Float.isFinite(1.0F);
      Float.max((-302.0F), 0.0F);
      Float.sum(1756.5248F, (-1546.2574F));
      Float float0 = new Float((-1.0));
      Float.max(1756.5248F, 0.0F);
      Float float1 = new Float(0.0F);
      float float2 = new Float((double) 0.0F);
      Float.min((-653.46F), 398.0F);
      boolean boolean0 = new Boolean(true);
      Float.max(210.26733F, 0.0F);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Float.isFinite(508.4559F);
      float float0 = Float.max(508.4559F, 1.0F);
      Float.isFinite(1.0F);
      Integer.toUnsignedString((-1232));
      Boolean boolean0 = Boolean.FALSE;
      Float.max((-1232), 1.0F);
      Float float1 = new Float(508.4559F);
      Float.max(1.0F, 0.0F);
      Float.min(1.0F, 508.4559F);
      Float.isFinite(1.0F);
      Float.max(253.92181F, 1.0F);
      JSONObject.testValidity(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.7325398132774086
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(0.0F);
      Float float1 = new Float(1.0F);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Float> linkedList2 = new LinkedList<Float>(linkedList1);
      Float float2 = new Float((-43.7726F));
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      linkedList1.add(float2);
      LinkedList<Float> linkedList5 = new LinkedList<Float>(linkedList4);
      Float float3 = new Float(0.0F);
      linkedList4.stream();
      linkedList4.add(float2);
      linkedList1.removeFirst();
      LinkedList<Float> linkedList6 = new LinkedList<Float>();
      linkedList3.add(float1);
      LinkedList<Float> linkedList7 = new LinkedList<Float>(linkedList4);
      Float float4 = new Float((-2205.3218F));
      Float.min(0.0F, 0.0F);
      Float.min(0.0F, (-2205.3218F));
      LinkedList<Float> linkedList8 = new LinkedList<Float>();
      linkedList0.add(float4);
      Boolean boolean0 = new Boolean("*TS2#i@VGvS*>=8");
      JSONObject jSONObject0 = new JSONObject(linkedList3);
      Long.sum(0L, (-528L));
      Long long0 = new Long((-528L));
      jSONObject0.putOpt("E5traKZ$N/Xpi@HJ", long0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.3352106396729186
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float float1 = new Float(0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      Float float2 = new Float(1658.9539F);
      linkedList1.removeFirst();
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      LinkedList<Float> linkedList3 = new LinkedList<Float>(linkedList1);
      Float float3 = new Float((-1840.0F));
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList4.removeAll(linkedList5);
      linkedList2.add(float0);
      linkedList3.add(float2);
      Float float4 = new Float((double) 0.0F);
      LinkedList<Float> linkedList6 = new LinkedList<Float>();
      linkedList6.clear();
      Float float5 = new Float((-2609.0F));
      LinkedList<Float> linkedList7 = new LinkedList<Float>();
      linkedList4.pollLast();
      Float float6 = new Float((double) (-1840.0F));
      linkedList7.add(float6);
      Boolean boolean0 = new Boolean("joi");
      Float float7 = new Float(1796.069F);
      Long long0 = new Long(1L);
      JSONObject jSONObject0 = new JSONObject(float7);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "joi";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      long long1 = jSONObject1.optLong("joi");
      assertEquals(3, jSONObject0.length());
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float float1 = new Float(0.0F);
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      HashMap<Float, JSONArray> hashMap1 = new HashMap<Float, JSONArray>();
      HashMap<Double, Integer> hashMap2 = new HashMap<Double, Integer>();
      HashMap<Double, Float> hashMap3 = new HashMap<Double, Float>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "j!MuS;!A=Nx7v";
      stringArray0[0] = "j!MuS;!A=Nx7v";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject.quote("/W-iD!'Vt@&OwHOr(");
      String string0 = Integer.toUnsignedString(3);
      assertEquals("3", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.111940764054574
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5);
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float((double) 5);
      Float.sum((-987.0665F), 179.44F);
      StringWriter stringWriter2 = new StringWriter(5);
      Integer.toUnsignedString(103);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject((Object) "103");
      boolean boolean1 = jSONObject0.optBoolean("103");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5);
      StringWriter stringWriter1 = new StringWriter();
      Float.sum((-987.0665F), 179.44F);
      Float float0 = new Float((double) 179.44F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float1 = new Float(0.0F);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      linkedList0.addFirst(float1);
      Float float2 = new Float(0.0);
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      Float float3 = new Float(1263.1576F);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      try { 
        jSONArray0.getJSONObject((-15));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-15] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.9502320948067693
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5);
      Float float0 = new Float((-987.0665F));
      Float float1 = new Float(0.0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      linkedList0.addFirst(float0);
      Float float2 = new Float((-412.0));
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      Float float3 = new Float(90.2614F);
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      linkedList3.add(float2);
      linkedList0.push((Float) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.join("URJ\"z%3t'h");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.8672900914093027
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Float.max(846.575F, 0.0F);
      Float.isFinite((-1955.4F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-327.5252F));
      Float float1 = new Float(0.0F);
      linkedList0.add(float1);
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      Float float2 = new Float(0.0F);
      linkedList1.removeFirst();
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      LinkedList<Float> linkedList3 = new LinkedList<Float>(linkedList1);
      Float float3 = new Float(1757.7843F);
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      linkedList4.add(float1);
      linkedList0.add(float0);
      Float float4 = new Float((double) 846.575F);
      LinkedList<Float> linkedList5 = new LinkedList<Float>();
      linkedList5.clear();
      Float float5 = new Float((-2609.0F));
      LinkedList<Float> linkedList6 = new LinkedList<Float>();
      Float float6 = new Float((-2308.57715));
      linkedList5.add(float6);
      linkedList6.push(float4);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList5);
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Double double0 = new Double((-765.498071632918));
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.241480278110272
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5);
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float((float) 5);
      StringWriter stringWriter2 = new StringWriter(5);
      Float float1 = new Float(1875.2375F);
      Float.max(0.0F, 2356.7F);
      JSONObject jSONObject0 = new JSONObject(float1);
      JSONObject jSONObject1 = jSONObject0.put("getoUnsgnedLong", (double) 2356.7F);
      jSONObject1.put("pa", 5);
      stringWriter2.flush();
      String string0 = "mlQiu";
      try { 
        jSONObject0.getBoolean("getoUnsgnedLong");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getoUnsgnedLong\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "~\\dRwCS#{-D?5/N";
      JSONTokener jSONTokener0 = new JSONTokener("~dRwCS#{-D?5/N");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~dRwCS#{-D?5/N
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.7408056042355007
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Float.isFinite(4516.4253F);
      Float.isFinite(1756.5248F);
      Float.isFinite(1.0F);
      Float.sum(1067.41F, 2108.9995F);
      Float float0 = new Float(0.0F);
      Float float1 = new Float(0.0F);
      Float float2 = new Float(3176.4097F);
      Float.sum(1756.5248F, 1.0F);
      Float.min(1.0F, 1.0F);
      Float.isFinite(1757.5248F);
      Float.min(384.61407F, 1756.5248F);
      Boolean boolean0 = new Boolean(true);
      Float.min(0.0F, 0.0F);
      Float.isFinite((-1.0F));
      Float.min(4516.4253F, 1.0F);
      Float.min(1.0F, 0.0F);
      Float.min(1.0F, 1757.5248F);
      Float.isFinite(2320.41F);
      Float.isFinite(2978.61F);
      Float float3 = new Float(1067.41F);
      JSONObject.numberToString(float1);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(")5}z|M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of )5}z|M
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.01604970690462
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.put("cop", (Map) hashMap0);
      hashMap0.put(jSONObject0, jSONObject1);
      jSONObject0.optInt("getformat");
      Integer integer0 = new Integer(0);
      JSONObject jSONObject2 = jSONObject0.put("getformat", (Map) hashMap0);
      jSONObject2.optLong("getformat", (long) 0);
      jSONObject0.keys();
      int int0 = new Integer(0);
      jSONObject2.optBoolean("[", true);
      jSONObject0.toString();
      // Undeclared exception!
      jSONObject1.toString(0, 175);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.437262537349027
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "wheel.json.JSONArray";
      JSONObject jSONObject0 = new JSONObject((Object) "wheel.json.JSONArray");
      jSONObject0.put("wheel.json.JSONArray", 123);
      int int0 = 817;
      // Undeclared exception!
      jSONObject0.toString(123, 817);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "getmax";
      stringArray0[1] = "r";
      stringArray0[2] = "GZp_Q )";
      stringArray0[3] = "uu$D}iis>[V6Q3Sx.~I";
      stringArray0[4] = "!T'";
      stringArray0[5] = ",";
      stringArray0[6] = "] is not a number.";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      String string0 = jSONObject1.toString(125, (-1642));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.8148471841184795
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("^ isno a JSSObect.", (Map) null);
      jSONObject0.toString();
      byte byte0 = (byte)44;
      Byte byte1 = new Byte((byte)44);
      short short0 = (short) (-1316);
      Short.toUnsignedLong((short) (-1316));
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject2 = jSONObject1.append("{\"java.lang.String@0000000004\":wheel.json.JSONObject@0000000003}", boolean0);
      jSONObject2.toString((int) (short) (-1316), (int) (byte)44);
      jSONObject0.accumulate("{\"java.lang.String@0000000004\":wheel.json.JSONObject@0000000003}", (Object) null);
      try { 
        jSONObject1.getBoolean("{\"java.lang.String@0000000004\":wheel.json.JSONObject@0000000003}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000004\\\":wheel.json.JSONObject@0000000003}\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.9271582324153567
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      String[] stringArray0 = new String[3];
      Byte.toUnsignedInt((byte)58);
      String string0 = "] is not a JSONArray.";
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "*bpp)j7=";
      String string1 = "B7?dng";
      stringArray0[2] = "B7?dng";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (double) (byte)39);
      jSONObject0.toString((int) (byte)39);
      String string2 = "a2H;Fk;R703/.";
      jSONObject0.optString("a2H;Fk;R703/.", "] is not a JSONArray.");
      jSONObject0.opt("{\"java.lang.String@0000000002\": java.lang.Double@0000000003}");
      jSONObject1.put("B7?dng", false);
      jSONObject0.optLong("ik");
      jSONObject0.toString((int) (byte)39);
      Object object0 = JSONObject.NULL;
      jSONObject1.put("y8!OREB(m,hgzc", object0);
      try { 
        jSONObject1.getLong("y8!OREB(m,hgzc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"y8!OREB(m,hgzc\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.8350960376985253
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "<`]B\\bt!lDtt";
      JSONObject.quote("<`]B\bt!lDtt");
      JSONObject.valueToString("\"<`]B\\bt!lDtt\"", 69, 455);
      JSONObject.getNames((Object) "u");
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONObject.quote("4D+4(j4RTXNrvL1B?/");
      JSONObject jSONObject0 = new JSONObject((Object) "\"<`]B\\bt!lDtt\"");
      jSONObject0.append(".", "\"java.lang.String@0000000001\"");
      Long long0 = new Long(69);
      JSONObject jSONObject1 = jSONObject0.putOpt("\"4D+4(j4RTXNr\\vL1B?/\"", long0);
      jSONObject0.toString((-1461));
      jSONObject1.put("false", 0.0);
      JSONObject jSONObject2 = new JSONObject((Object) ".");
      try { 
        jSONObject2.getDouble("u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Integer integer0 = new Integer(8);
      Integer integer1 = new Integer(138);
      Integer integer2 = new Integer(8);
      Integer.toUnsignedString((int) integer2);
      Integer.toUnsignedString(8);
      Double double0 = new Double((-169.761673));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8";
      stringArray0[2] = "8";
      stringArray0[4] = "8";
      stringArray0[5] = "8";
      JSONObject jSONObject0 = new JSONObject(integer1, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("\"");
      jSONObject0.write(stringWriter0);
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.950089105224377
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Integer integer0 = new Integer(8);
      Integer integer1 = new Integer(138);
      Integer.min((-22654515), (-3771));
      Integer.toUnsignedString((-22654515));
      Double double0 = new Double(1.0);
      Float.min((-22654515), 138);
      Float.isFinite((-1853.1958F));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Float, Integer> hashMap1 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject(integer0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((double) (-3771));
      linkedList0.add(float0);
      Float float1 = new Float(0.0);
      linkedList0.offerFirst(float1);
      Long.sum((-528L), 0L);
      try { 
        jSONObject0.getInt("4272312781");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4272312781\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.8567266534724054
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = null;
      long long0 = 0L;
      Long long1 = new Long(0L);
      try { 
        jSONObject0.accumulate((String) null, long1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.5066224813652647
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(0.0F);
      Float float1 = new Float(1.0F);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Float> linkedList2 = new LinkedList<Float>(linkedList1);
      Float float2 = new Float((-43.7726F));
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      linkedList1.add(float2);
      LinkedList<Float> linkedList5 = new LinkedList<Float>(linkedList4);
      Float float3 = new Float(0.0F);
      linkedList4.stream();
      linkedList4.add(float2);
      linkedList1.removeFirst();
      LinkedList<Float> linkedList6 = new LinkedList<Float>();
      linkedList3.add(float1);
      LinkedList<Float> linkedList7 = new LinkedList<Float>(linkedList4);
      Float float4 = new Float((-2205.3218F));
      Float.min(0.0F, 0.0F);
      Float.min(0.0F, (-2205.3218F));
      LinkedList<Float> linkedList8 = new LinkedList<Float>();
      linkedList0.add(float4);
      Boolean boolean0 = new Boolean("*TS2#i@VGvS*>=8");
      JSONObject jSONObject0 = new JSONObject(linkedList3);
      jSONObject0.toString((-1));
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Integer integer0 = new Integer(8);
      Integer integer1 = new Integer(138);
      Integer.min((-22654515), (-3771));
      String string0 = Integer.toUnsignedString((-22654515));
      Double double0 = new Double(1.0);
      Float.isFinite((-3771));
      Float float0 = new Float(0.0F);
      String string1 = JSONObject.numberToString(integer1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(5);
      StringWriter stringWriter1 = new StringWriter();
      Float.max(5, (-0.3987527F));
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.8269349581735326
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float((float) 5);
      StringWriter stringWriter2 = new StringWriter(5);
      JSONObject jSONObject0 = new JSONObject();
      Float float1 = new Float(1875.2375F);
      Float.max(0.0F, 2356.7F);
      jSONObject0.accumulate("getoUnsgnedLong", float1);
      JSONObject jSONObject1 = new JSONObject(float1);
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.6614227267964183
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Integer integer0 = new Integer(8);
      Integer integer1 = new Integer(138);
      Integer.min(8, (-3771));
      Integer.toUnsignedString((-3771));
      Double double0 = new Double(1.0);
      Float.min((-3771), 138);
      Float.isFinite((-1853.1958F));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Float, Integer> hashMap1 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject.quote("4294963525");
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Integer integer0 = new Integer(8);
      Integer integer1 = new Integer(138);
      Integer integer2 = new Integer(8);
      Integer.toUnsignedString((int) integer2);
      Integer.toUnsignedString((-2314));
      Double double0 = new Double((-169.761673));
      Float.min(8, 217.27467F);
      Float.isFinite((-1.0F));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Float, Integer> hashMap1 = new HashMap<Float, Integer>();
      HashMap<Byte, JSONObject> hashMap2 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject.quote((String) null);
      Integer.toUnsignedString(22);
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.0762750631413014
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Float.isFinite(508.4559F);
      Float.max(1756.5248F, 1.0F);
      Float.isFinite(1756.5248F);
      Float.isFinite(1.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(0.0F);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      linkedList2.add(float0);
      linkedList2.addFirst(float0);
      Float float1 = new Float((double) 1756.5248F);
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      Float.max(0.0F, 1.0F);
      Short short0 = new Short((short)59);
      JSONObject jSONObject0 = new JSONObject((Object) "isvalueOf");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "isvalueOf";
      stringArray0[1] = "isvalueOf";
      stringArray0[2] = "isvalueOf";
      stringArray0[3] = "isvalueOf";
      stringArray0[4] = "isvalueOf";
      jSONObject0.remove((String) null);
      stringArray0[5] = "isvalueOf";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.013709311559073
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(0.0F);
      Float float1 = new Float(1.0F);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Float> linkedList2 = new LinkedList<Float>(linkedList1);
      Float float2 = new Float((-43.7726F));
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      linkedList1.add(float2);
      LinkedList<Float> linkedList5 = new LinkedList<Float>(linkedList4);
      Float float3 = new Float(0.0F);
      linkedList4.stream();
      linkedList4.add(float2);
      linkedList1.removeFirst();
      LinkedList<Float> linkedList6 = new LinkedList<Float>();
      linkedList3.add(float1);
      LinkedList<Float> linkedList7 = new LinkedList<Float>(linkedList4);
      Float float4 = new Float((-2205.3218F));
      Float.min(0.0F, 0.0F);
      Float.min(0.0F, (-2205.3218F));
      Float.sum(1.0F, 1.0F);
      LinkedList<Float> linkedList8 = new LinkedList<Float>();
      linkedList0.add(float4);
      Boolean boolean0 = new Boolean("*TS2#i@VGvS*>=8");
      JSONObject jSONObject0 = new JSONObject(linkedList3);
      try { 
        jSONObject0.getBoolean("xu@BpCF1SC`)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"xu@BpCF1SC`)\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.1807382878069084
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Float.max((-1216.5505F), 0.0F);
      Float float0 = new Float((-1463.0F));
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      HashMap<Float, JSONArray> hashMap1 = new HashMap<Float, JSONArray>();
      HashMap<Double, Integer> hashMap2 = new HashMap<Double, Integer>();
      HashMap<Double, Float> hashMap3 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      try { 
        jSONObject0.getJSONArray(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float((-1885.3239));
      Float.isFinite(10);
      Float.max(1.0F, 160);
      Float.max(160.0F, 0.0F);
      stringWriter1.write("2f<9 tRr[6jnmw");
      String string0 = "5oyiEk-";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("5oyiEk-", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
