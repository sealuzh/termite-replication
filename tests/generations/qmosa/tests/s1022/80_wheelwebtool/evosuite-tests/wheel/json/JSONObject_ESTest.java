/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 20:59:32 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.767710301135895
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      String string0 = "getgetJSONArray";
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("getgetJSONArray", (Collection) linkedList0);
      jSONObject0.optJSONArray("getgetJSONArray");
      JSONObject jSONObject1 = jSONObject0.put("getgetJSONArray", true);
      String string1 = "0..";
      try { 
        jSONObject1.getBoolean("0..");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0..\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Long long0 = new Long((-362L));
      Long.remainderUnsigned((-362L), (-362L));
      Long long1 = new Long((-362L));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L$knZRgMRH9,=y#*h#";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "*bpp)j7=";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(59);
      Integer.getInteger("*bpp)j7=");
      linkedList0.add((Integer) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Float float0 = new Float((-1.0));
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4452500657877791
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject.quote("Unclosed comment");
      Long long0 = new Long((-1108L));
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject((Map) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertNull(stringArray0);
      
      Byte byte0 = new Byte((byte) (-3));
      Float float0 = new Float(79.2);
      JSONObject jSONObject2 = jSONObject0.accumulate("Unclosed comment", (Object) null);
      assertEquals(0, jSONObject2.length());
      
      String string0 = JSONObject.quote("getcompare");
      assertEquals("\"getcompare\"", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.34393298130802
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      String[] stringArray0 = new String[10];
      Byte byte1 = new Byte((byte)39);
      stringArray0[8] = "] is not a JSONArray.";
      String string0 = "*qbppPj}=";
      JSONObject jSONObject0 = new JSONObject("] is not a JSONArray.", stringArray0);
      Byte.toUnsignedLong((byte)39);
      jSONObject0.put("] is not a JSONArray.", (-1352.7761683246));
      Byte.toUnsignedLong((byte) (-128));
      Object object0 = JSONObject.NULL;
      jSONObject0.optLong("] is not a JSONArray.");
      Byte.toUnsignedInt((byte)97);
      Byte.compare((byte) (-128), (byte) (-128));
      jSONObject0.isNull("iXZwi5`[%[`S&*MGI}");
      Object object1 = JSONObject.NULL;
      StringWriter stringWriter0 = new StringWriter(1988);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("getvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of getvalueOf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.161801036639182
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      Boolean.compare(false, false);
      Boolean.getBoolean("%I)2g%n=)ygBN");
      JSONObject.getNames((Object) boolean0);
      JSONObject jSONObject0 = new JSONObject((Object) "%I)2g%n=)ygBN");
      jSONObject0.optDouble("%I)2g%n=)ygBN");
      StringWriter stringWriter0 = new StringWriter(0);
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.getString("my:0*+C%!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"my:0*+C%!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6718370371046167
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Float float0 = new Float((-326.5349F));
      Float float1 = new Float((-326.5349F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "{}";
      JSONObject jSONObject1 = jSONObject0.put("{}", 518.9508);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      byte byte0 = (byte)126;
      jSONObject0.remove("{}");
      try { 
        jSONObject1.getDouble("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5444505811622622
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Float.valueOf((-327.5252F));
      Float.min(0.0F, 0.0F);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Byte byte0 = new Byte((byte)126);
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      Byte byte1 = new Byte((byte)126);
      linkedList1.spliterator();
      linkedList0.parallelStream();
      Byte.toUnsignedInt((byte)101);
      JSONObject.valueToString(linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("{%)mvWZ/>98_Q$=Ezf8/");
      String string0 = "JeoT?-\"";
      jSONObject0.putOpt("JeoT?-\"", "J,/Ph.9`e('Sb=@");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {%)mvWZ/>98_Q$=Ezf8/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8891591637540206
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer.toUnsignedString(100);
      Integer integer0 = new Integer(100);
      StringWriter stringWriter0 = new StringWriter(100);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(128);
      Integer integer2 = new Integer(519);
      Integer.divideUnsigned(92, 42);
      Integer integer3 = Integer.valueOf(2433);
      linkedList0.add(integer3);
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optLong("100");
      JSONObject.valueToString(hashMap0, 14, 2147483645);
      try { 
        jSONObject1.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.1802858502715776
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Long long0 = new Long((-362L));
      Long.remainderUnsigned((-362L), (-362L));
      Long.compareUnsigned((-362L), 0L);
      Long.remainderUnsigned((-362L), (-362L));
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      Byte byte0 = new Byte((byte)93);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      String string0 = "XSff,^j6W;JwIQ";
      JSONObject jSONObject1 = jSONObject0.put("XSff,^j6W;JwIQ", (double) 0L);
      jSONObject0.toString(1);
      Object object0 = JSONObject.NULL;
      Byte byte1 = new Byte((byte)29);
      jSONObject1.optLong("AY.[ llR p@vF]'z", (long) (byte)93);
      Float float0 = new Float(0.0);
      jSONObject0.getLong("XSff,^j6W;JwIQ");
      try { 
        jSONObject1.get("{\"java.lang.String@0000000002\": java.lang.Double@0000000003}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000002\\\": java.lang.Double@0000000003}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3961001489141087
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      Short short0 = new Short((short)1879);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double((short)1879);
      Integer integer0 = new Integer(2950);
      hashMap0.put(double0, integer0);
      Double double1 = new Double((-1.0));
      jSONObject0.put("ishashCode", (double) (short)1879);
      jSONObject0.put("1", (-3556.02));
      try { 
        jSONObject0.getJSONArray("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ishashCode\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8851576208792151
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Float float0 = new Float((-326.5349F));
      Float float1 = new Float((-326.5349F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("{}", 519.7129802838277);
      Byte.toUnsignedLong((byte) (-61));
      JSONObject jSONObject2 = jSONObject0.put("{}", 1827.2);
      Byte.toUnsignedLong((byte) (-61));
      Object object0 = JSONObject.NULL;
      String string0 = "ik";
      jSONObject2.optLong("{}");
      byte byte0 = (byte)10;
      Byte.compare((byte) (-23), (byte)10);
      jSONObject1.isNull("gettoString");
      Object object1 = JSONObject.NULL;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Float float0 = new Float((-326.5349F));
      Float float1 = new Float((-326.5349F));
      JSONObject.quote("");
      Long long0 = new Long(0L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      Double double0 = new Double((-1170.0257904));
      linkedList0.add(double0);
      Double.max(0L, (-1170.0257904));
      Long long1 = new Long(0L);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "gettoUpperCase";
      stringArray0[1] = "";
      stringArray0[2] = "gettoUpperCase";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "\"\"";
      stringArray0[6] = "\"\"";
      stringArray0[7] = "";
      stringArray0[8] = "JSONObject[";
      JSONObject jSONObject0 = new JSONObject(long1, stringArray0);
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1324592147571555
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      String[] stringArray0 = new String[10];
      stringArray0[8] = "] is not a JSONArray.";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "] is not a JSONArray.";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Byte.toUnsignedLong((byte)39);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (double) (byte)39);
      jSONObject1.append("getoptJSONArray", jSONObject0);
      // Undeclared exception!
      jSONObject0.toString((int) (byte)39);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.931190864302259
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Float.valueOf((-327.5252F));
      Float.min(0.0F, 0.0F);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = new Object();
      Byte byte0 = new Byte((byte)126);
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      Byte byte1 = new Byte((byte)126);
      linkedList1.spliterator();
      linkedList0.parallelStream();
      Byte.toUnsignedInt((byte)101);
      JSONObject.valueToString(linkedList0);
      JSONObject.valueToString(object0);
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("{%:mvWZ/>98_Q$=zf8/");
      JSONObject jSONObject1 = jSONObject0.putOpt("OV0T-lkXCs.,Ae", "J,/Ph.9`e('Sb=@");
      jSONObject1.optBoolean("OV0T-lkXCs.,Ae");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('K');
      Double double0 = new Double(0.0F);
      jSONObject0.putOpt("wheel.json.JSONException", (Object) null);
      try { 
        jSONObject1.put((String) null, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 13;
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>(13);
      Boolean.valueOf("get");
      Double double0 = new Double(13);
      Double double1 = new Double((-4637.835617056999));
      hashMap0.put(double0, double1);
      Double double2 = new Double((-2943.2));
      hashMap0.put(hashMap0, double2);
      String[] stringArray0 = new String[9];
      Float float0 = new Float(3525.726934349);
      stringArray0[1] = "get";
      stringArray0[2] = "] is not a Boolean.";
      String string0 = "p0JV~u{VV";
      stringArray0[3] = "p0JV~u{VV";
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Map) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.729876821379027
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      String[] stringArray0 = new String[10];
      Byte byte1 = new Byte((byte)39);
      stringArray0[8] = "] is not a JSONArray.";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "] is not a JSONArray.";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (double) (byte)39);
      jSONObject0.toString((int) (byte)39);
      Object object0 = JSONObject.NULL;
      jSONObject0.optLong("ik");
      JSONObject.valueToString("] is not a JSONArray.");
      Byte byte2 = new Byte((byte)39);
      jSONObject0.isNull("(_&");
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000002\": java.lang.Double@0000000003}");
      jSONObject0.optLong("ik");
      JSONObject.valueToString((Object) null, 32, (-2544));
      jSONObject1.optJSONArray("*bpp)j7=");
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      try { 
        jSONObject1.put((String) null, (Object) jSONObject3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9417176546252977
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Float float0 = Float.valueOf((-327.5252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("{}", 518.9508);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      Float.sum(0.0F, (-327.5252F));
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.skipTo('s');
      jSONTokener0.skipTo('s');
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Long long0 = new Long(0L);
      String string0 = "\\n";
      Long.getLong("\n", long0);
      stringWriter1.append('0');
      String string1 = "'";
      JSONTokener jSONTokener1 = new JSONTokener("'");
      Float.min((-327.5252F), 0.0F);
      jSONObject0.optLong("{}", (-1L));
      jSONObject0.put("gettoUpperCase", (Map) null);
      Float float1 = new Float((double) (-327.5252F));
      jSONObject0.getLong("{}");
      try { 
        jSONObject1.get("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8072180062889975
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Boolean boolean0 = Boolean.TRUE;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double.max(957.3887, 957.3887);
      Double double0 = new Double(957.3887);
      Double.valueOf(957.3887);
      Double double1 = new Double((-4.300425297133851));
      linkedList0.add(double1);
      jSONObject0.optJSONArray("istoUpperCase");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('6');
      Double double2 = new Double(1.0);
      String string0 = null;
      jSONObject0.putOpt((String) null, boolean0);
      jSONObject0.put("J(K&?Xq{T'Fg[&2HF", false);
      try { 
        jSONObject0.getString("grW_'AOG-if[<XwMR{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"grW_'AOG-if[<XwMR{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1371804520659343
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 13;
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>(13);
      Boolean boolean0 = Boolean.valueOf("get");
      Double double0 = new Double(13);
      Double.sum(1.0, 13);
      hashMap0.put(boolean0, double0);
      Object object0 = JSONObject.NULL;
      Double double1 = new Double((-4637.835617056999));
      hashMap0.put(double0, double1);
      Double double2 = new Double((-2943.2));
      hashMap0.put(object0, double2);
      String[] stringArray0 = new String[9];
      Float float0 = new Float(3525.726934349);
      stringArray0[1] = "Z";
      stringArray0[2] = "] is not a Boolean.";
      String string0 = "p0JV~u{VV";
      stringArray0[3] = "p0JV~u{VV";
      stringArray0[4] = "a>(3H]W1";
      stringArray0[5] = "4v)7wYwy@>>";
      stringArray0[6] = "`00MMvjO_a";
      stringArray0[7] = "Z";
      stringArray0[8] = "fl";
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject0 = new JSONObject("7Y3jB", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.309893243915062
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = JSONObject.getNames((Object) long0);
      Long.sum(4109L, (-1026L));
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.length();
      jSONObject0.toString();
      String string0 = "issignum";
      try { 
        jSONObject1.getDouble("issignum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issignum\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6853292889694904
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Float float0 = Float.valueOf((-327.5252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject jSONObject1 = jSONObject0.put("{}", 518.9508);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.put("J,/Ph.9`e('Sb=@", (Object) jSONArray0);
      jSONObject2.toJSONArray(jSONArray0);
      Float float1 = new Float((double) 0.0F);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.nextTo('Y');
      jSONTokener0.skipTo('s');
      jSONTokener0.skipTo('s');
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Long long0 = new Long(0L);
      Long long1 = new Long(1644L);
      Long.getLong("{}", long1);
      stringWriter1.append('\u0000');
      Long.getLong("\n", long0);
      stringWriter1.append('0');
      jSONObject2.optJSONArray("{}");
      JSONTokener jSONTokener1 = new JSONTokener("'");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.033662343665036
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Byte byte0 = new Byte((byte)92);
      Byte.toUnsignedInt((byte) (-32));
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      String string0 = "DK'u{]%";
      hashMap1.putIfAbsent(byte0, "DK'u{]%");
      hashMap1.put(hashMap0, "DK'u{]%");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.names();
      Float float0 = new Float(0.0);
      jSONObject0.accumulate("Nu(j", float0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7696468789271156
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Float float0 = new Float((-326.5349F));
      Float float1 = new Float((-326.5349F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "{}";
      jSONObject0.put("{}", 519.7129802838277);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = new Object();
      byte byte0 = (byte)126;
      Byte byte1 = new Byte((byte)126);
      JSONObject.numberToString(float1);
      Byte.toUnsignedLong((byte) (-115));
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5256979185800383
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.optInt("] is not a JSONObject.");
      Integer integer0 = new Integer(0);
      JSONObject.valueToString(integer0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Map) null);
      jSONObject1.keys();
      JSONObject.valueToString((Object) null, 0, 0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter(0);
      JSONObject.doubleToString(0);
      JSONObject.valueToString("] is not a JSONObject.", 0, 0);
      Long long0 = new Long(0);
      jSONObject1.append("\"java.lang.String@0000000005\"", long0);
      jSONObject0.toString(0, 0);
      JSONObject.valueToString("java.lang.Integer@0000000003");
      JSONObject jSONObject2 = jSONObject1.optJSONObject("] is not a JSONObject.");
      jSONObject2.accumulate("null", stringWriter0);
      try { 
        jSONObject0.getLong("\"java.lang.String@0000000009\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"java.lang.String@0000000009\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1793420283490152
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.optInt("] is not a JSONObject.");
      Integer integer0 = new Integer(0);
      JSONObject.valueToString(integer0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Map) null);
      jSONObject1.keys();
      JSONObject.valueToString((Object) null, 0, 0);
      Integer integer1 = new Integer(0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter(0);
      jSONObject1.optInt("java.lang.Integer@0000000003", 0);
      StringWriter stringWriter2 = new StringWriter();
      Long long0 = new Long((-460L));
      // Undeclared exception!
      try { 
        stringWriter2.append((CharSequence) "java.lang.Integer@0000000003", 128, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3189328019081783
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      jSONObject0.optInt("Prn\"|H>P+o%esP=3E", 8);
      String string0 = jSONObject0.optString("in", "");
      Object object0 = new Object();
      String string1 = JSONObject.valueToString(object0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(6);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(6);
      Integer integer1 = new Integer(93);
      Integer integer2 = new Integer(93);
      Integer integer3 = new Integer(93);
      Integer.getInteger(")o*Gx{(9", integer3);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer4 = new Integer(59);
      linkedList1.add(integer2);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      Float float0 = new Float(0.0);
      Short.compare((short)10, (short)687);
      Short.toUnsignedLong((short) (-599));
      Short.compare((short)60, (short)60);
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.294361354119524
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.optInt("] is not a JSONObject.");
      Integer integer0 = new Integer(0);
      JSONObject.valueToString(integer0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Map) null);
      jSONObject0.optString("java.lang.Integer@0000000003", (String) null);
      jSONObject0.optBoolean((String) null);
      Long.getLong("", (Long) null);
      String string0 = ",\n";
      try { 
        jSONObject1.getBoolean("0(|!_0M,}u*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0(|!_0M,}u*\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.toJSONObject(jSONArray0);
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap1);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9836548375344727
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Float float0 = Float.valueOf((-327.5252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("{}", (double) (-327.5252F));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Float.sum(0.0F, (-327.5252F));
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.nextTo("{}");
      jSONTokener0.skipTo('s');
      jSONTokener0.skipTo('s');
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Long long0 = new Long(0L);
      Float.sum(1278.14F, (-327.5252F));
      Long.compareUnsigned(0L, 0L);
      stringWriter1.append('0');
      JSONTokener jSONTokener1 = new JSONTokener("'");
      Float.min((-327.5252F), 0.0F);
      jSONObject0.optLong("{}", (-1L));
      JSONObject jSONObject2 = jSONObject0.put("gettoUpperCase", (Map) null);
      Float float1 = new Float((double) (-327.5252F));
      jSONObject0.getLong("{}");
      jSONObject1.put("gettoUpperCase", (double) (-327L));
      jSONObject2.optLong("isputOpt");
      try { 
        jSONObject1.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5088198909642434
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Float float0 = Float.valueOf((-327.5252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("{}", 518.9508);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.put("J,/Ph.9`e('Sb=@", (Object) jSONArray0);
      Float.sum(912.91455F, (-818.0037F));
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      jSONObject2.getString("J,/Ph.9`e('Sb=@");
      linkedList1.spliterator();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("9B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 9B
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.0948333907591605
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Long long0 = new Long((-362L));
      Long.remainderUnsigned((-362L), (-362L));
      Long.compareUnsigned((-362L), 0L);
      Long.remainderUnsigned((-362L), (-362L));
      Short short0 = new Short((short)1879);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = Integer.valueOf((-2972));
      hashMap0.put((Double) null, integer0);
      Double double0 = new Double((-1.0));
      JSONObject jSONObject1 = jSONObject0.put("ishashCode", 0.0);
      jSONObject1.optLong("ishashCode");
      Long long1 = new Long((-362L));
      jSONObject0.names();
      Long.getLong("tr", long1);
      StringWriter stringWriter0 = new StringWriter((short)1879);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Float.min(0L, 0.0F);
      Float.min(0L, 0L);
      HashMap<Byte, Integer> hashMap1 = new HashMap<Byte, Integer>();
      JSONObject jSONObject2 = jSONObject1.put("tr", (Map) hashMap0);
      jSONObject2.get("tr");
      jSONObject0.optJSONArray("to");
      try { 
        jSONObject0.getInt("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.0783992874998374
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "Unclosed comment";
      JSONObject jSONObject0 = new JSONObject((Object) "Unclosed comment");
      jSONObject0.optInt("Unclosed comment");
      JSONObject jSONObject1 = jSONObject0.put("Unclosed comment", (Object) "Unclosed comment");
      jSONObject0.optLong("Unclosed comment", (-1081L));
      Long long0 = new Long((-1081L));
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      linkedList1.add((Float) null);
      linkedList1.retainAll(linkedList0);
      linkedList0.removeAll(linkedList1);
      jSONObject2.put("'z2mb", (Collection) linkedList0);
      try { 
        jSONObject1.getBoolean("Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unclosed comment\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.257133793549772
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Long.remainderUnsigned((-362L), (-362L));
      Long.compareUnsigned((-362L), 0L);
      Long.remainderUnsigned((-362L), (-362L));
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      Short short0 = new Short((short)1879);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short.compare((short)1879, (short) (-455));
      String string0 = "ishasCode";
      JSONObject jSONObject1 = jSONObject0.put("ishasCode", (Object) short0);
      try { 
        jSONObject1.getJSONObject("ishasCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ishasCode\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6761389064361045
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Byte.toUnsignedInt((byte)4);
      Long long0 = new Long(1L);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      Long long1 = Long.getLong("'", long0);
      stringWriter0.append('l');
      jSONObject0.optLong("wheel.json.JSONTokener", 1L);
      jSONObject0.optDouble("0C?Lt}Y%O[q?G[VA", (-2865.0));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      jSONObject0.put("'", (Object) long1);
      try { 
        jSONObject0.getDouble("getgetInteger");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetInteger\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      String[] stringArray0 = new String[10];
      Byte byte1 = new Byte((byte)39);
      stringArray0[8] = "] is not a JSONArray.";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("] is not a JSONArray.");
      String string0 = "X@w;h#";
      double double0 = new Byte((byte)39);
      Double double1 = new Double(0.0);
      Boolean boolean0 = Boolean.FALSE;
      String string1 = "isfloaatToRawIntBits";
      double double2 = 0.0;
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.2207245034238423
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Float float0 = Float.valueOf((-327.5252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("{}", 518.9508);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      Float.sum(0.0F, (-327.5252F));
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.skipTo('s');
      jSONTokener0.skipTo('s');
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Long long0 = new Long(0L);
      Long.getLong("\n", long0);
      stringWriter1.append('0');
      JSONTokener jSONTokener1 = new JSONTokener("'");
      Float.min((-327.5252F), 0.0F);
      jSONObject0.optLong("{}", (-1L));
      jSONObject0.optString("'\"ifglO");
      jSONObject1.optInt("[]");
      jSONObject1.optDouble("gettoUpperCase");
      try { 
        jSONObject0.put("[]", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7165164469072214
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer.toUnsignedString(100);
      Integer integer0 = new Integer(100);
      StringWriter stringWriter0 = new StringWriter(100);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long.compareUnsigned(128, 100);
      Long.remainderUnsigned(100, 1);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.flush();
      Long long0 = new Long(0L);
      Long long1 = new Long(1L);
      Double double0 = new Double((-1439L));
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      Integer integer1 = new Integer(1);
      JSONObject jSONObject1 = jSONObject0.putOpt("100", integer1);
      jSONObject1.put("Wg|MB'&", false);
      try { 
        jSONObject0.getString("bat,(|@ww");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"bat,(|@ww\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.077556327066801
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Byte byte0 = new Byte((byte)92);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Double double0 = new Double(1019.3328);
      hashMap0.put(byte0, double0);
      Double double1 = new Double((-2943.2));
      Double double2 = new Double((-2943.2));
      hashMap0.put(double0, double2);
      Double double3 = new Double((byte)92);
      hashMap0.put(hashMap0, double1);
      Float float0 = new Float(0.0);
      JSONObject.testValidity((Object) null);
      String string0 = JSONObject.valueToString(double3);
      assertNotNull(string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1701093574485166
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Float.valueOf((-327.5252F));
      Float.min(0.0F, 0.0F);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = new Object();
      Byte byte0 = new Byte((byte)126);
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      Byte byte1 = new Byte((byte)126);
      linkedList1.spliterator();
      linkedList0.parallelStream();
      Byte.toUnsignedInt((byte)101);
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
      
      String string1 = JSONObject.valueToString(object0);
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("{%:mvWZ/>98_Q$=zf8/");
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Boolean> linkedList3 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList3);
      Float float0 = new Float((-84.4));
      String string2 = JSONObject.valueToString(jSONTokener0, 92, (-62164681));
      assertFalse(string2.equals((Object)string1));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.3232464117332952
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Float float0 = Float.valueOf((-327.5252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("{}", 518.9508);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.put("{}", 518.9508);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = "|NNZyDL";
      try { 
        jSONObject2.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.432424752867325
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Integer integer0 = new Integer((-822));
      JSONObject jSONObject0 = new JSONObject(integer0);
      Integer integer1 = new Integer(2);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject1 = jSONObject0.put(",9f", (Collection) linkedList0);
      jSONObject0.toString(2);
      Byte.compare((byte)97, (byte)39);
      jSONObject0.isNull("J}L");
      JSONObject.numberToString(integer0);
      JSONObject.quote("null");
      JSONObject.doubleToString(0.0);
      JSONObject.quote("*or!n");
      JSONObject.doubleToString(2);
      Integer.divideUnsigned(2, 2);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.valueToString((Object) null, 58, (byte)97);
      jSONObject0.accumulate(",9f", "J}L");
      jSONObject1.optInt("java.lang.Integer@0000000006", 2);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.4218956404837546
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      String[] stringArray0 = new String[10];
      Byte byte1 = new Byte((byte)39);
      stringArray0[8] = "] i n1t a F:ONArray.";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "] i n1t a F:ONArray.";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Double double0 = new Double(0.0);
      Long long0 = new Long((byte)39);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      Double double1 = new Double((-1170.0257904));
      Double double2 = new Double(0.0);
      Double double3 = new Double((-612.6));
      linkedList0.add(double3);
      Double.max((-3200.0), (-1925.11));
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.add(double0);
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      linkedList0.removeAll(linkedList2);
      jSONObject1.optJSONArray("] i n1t a F:ONArray.");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.0253484421926267
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Unclosed comment");
      jSONObject0.optInt("%|bmZP$ms4*`Z");
      Double.sum(0, (-2539.678));
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Double double0 = new Double((-3833.8));
      hashMap0.put("%|bmZP$ms4*`Z", double0);
      Object object0 = JSONObject.NULL;
      Double double1 = new Double((-2943.2));
      JSONArray jSONArray0 = new JSONArray();
      hashMap0.put(jSONArray0, double0);
      Short short0 = new Short((short)8);
      Double double2 = new Double((-2353.7113816));
      Double double3 = new Double(0.0);
      Double double4 = new Double((-1.0));
      Float float0 = new Float(1.0F);
      hashMap0.put(float0, (Double) null);
      Float float1 = new Float((-1.0));
      Double double5 = new Double(0.0);
      String string0 = JSONObject.valueToString(double5);
      jSONObject0.length();
      Long long0 = new Long(0L);
      Long.getLong("Unclosed comment");
      String string1 = JSONObject.numberToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Long long0 = new Long((-362L));
      Float float0 = new Float((double) (-362L));
      Float.min((-362L), (-362L));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject("az>.\"EOe:&w%^v");
      try { 
        jSONObject0.get("istoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.6008674619717835
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      Byte.toUnsignedLong((byte)44);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "] is not a JSONArray.";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (double) (byte)39);
      jSONObject0.optString("a2H;Fk;R703/.", "] is not a JSONArray.");
      jSONObject0.opt("] is not a JSONArray.");
      jSONObject0.optLong("ik");
      jSONObject0.toString((int) (byte)39);
      Byte.compare((byte)97, (byte) (-119));
      jSONObject0.isNull("(_&");
      jSONObject0.put("getvalueOf", (Object) null);
      JSONObject.numberToString(byte0);
      JSONObject.quote("");
      JSONObject.doubleToString((byte) (-119));
      JSONObject.quote("wheel.json.JSONObject$1");
      JSONObject.doubleToString(216);
      jSONObject1.append("gethashCode", "] is not a JSONArray.");
      String string0 = jSONObject0.toString((int) (byte)44, (int) (byte) (-119));
      String string1 = JSONObject.valueToString("a2H;Fk;R703/.");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7191124163851728
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Float float0 = new Float((-326.5349F));
      Float float1 = new Float((-326.5349F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "{}";
      JSONObject jSONObject1 = jSONObject0.put("{}", 519.7129802838277);
      Float float2 = new Float(1378.28334);
      jSONObject0.put("?KC", (Object) float2);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject1.optLong("{}", 0L);
      Object object0 = new Object();
      byte byte0 = (byte)126;
      Byte byte1 = new Byte((byte)126);
      try { 
        jSONObject0.append("{}", byte1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[{}] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      String[] stringArray0 = new String[10];
      Byte byte1 = new Byte((byte)39);
      stringArray0[8] = "] is not a JSONArray.";
      stringArray0[1] = "*bpp)j7=";
      Double double0 = new Double((byte)39);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Double double1 = new Double(0.0);
      hashMap0.put("] is not a JSONArray.", double1);
      Double double2 = new Double(0.0);
      hashMap0.put(double2, double0);
      Float float0 = new Float((-2378.29945));
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      String string0 = "):9|EyB2'J|>`t";
      try { 
        Integer.valueOf("):9|EyB2'J|>`t", (-2309));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -2309 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Long long0 = new Long((-362L));
      Boolean.valueOf("getdoubleToString");
      Double double0 = new Double((-362L));
      Double.sum(1443.772992, 2820.913677);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      hashMap0.put((Object) null, double0);
      Object object0 = JSONObject.NULL;
      Double double1 = new Double((-4637.835617056999));
      Object object1 = JSONObject.NULL;
      Double double2 = new Double(1443.772992);
      hashMap0.put(object1, double2);
      Double double3 = new Double((-1632.3248244689764));
      Double double4 = new Double((-4637.835617056999));
      hashMap0.put(long0, double4);
      Float float0 = new Float((-2943.2));
      Boolean boolean0 = new Boolean(true);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.0031800451207324
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Float float0 = Float.valueOf((-327.5252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("{}", 518.9508);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.put("J,/Ph.9`e('Sb=@", (Object) jSONArray0);
      jSONObject2.toJSONArray(jSONArray0);
      Float float1 = new Float((double) 0.0F);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.nextTo('Y');
      jSONTokener0.skipTo('s');
      jSONTokener0.skipTo('s');
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Long long0 = new Long(0L);
      Long long1 = new Long(1644L);
      Long.getLong("{}", long1);
      stringWriter1.append('\u0000');
      Long.getLong("\n", long0);
      StringWriter stringWriter2 = stringWriter1.append('0');
      JSONTokener jSONTokener1 = new JSONTokener("'");
      JSONObject jSONObject3 = new JSONObject();
      jSONObject0.write(stringWriter2);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.7003183727298967
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Float float0 = new Float((-326.5349F));
      Float float1 = new Float((-326.5349F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("{}", 519.7129802838277);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = new Object();
      Byte byte0 = new Byte((byte)126);
      JSONObject jSONObject1 = new JSONObject("{}");
      double double0 = 1.0;
      Double.max(1.0, 1.0);
      Double double1 = new Double(1.0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      double double2 = 158.084;
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.1411719023484963
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.optBoolean("Y,{+}&Rb{_2s;Z;HppF", true);
      JSONObject.valueToString(jSONObject0, 160, 160);
      JSONObject.valueToString("{}");
      Long long0 = new Long(160);
      JSONObject jSONObject1 = new JSONObject((Object) "\"java.lang.String@0000000003\"");
      jSONObject0.optString("{}", "wheel.json.JSONTokener");
      jSONObject1.optBoolean((String) null);
      jSONObject0.length();
      Long.getLong("'", long0);
      try { 
        jSONObject0.getBoolean(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Long long0 = new Long(160);
      StringWriter stringWriter0 = new StringWriter();
      Long.getLong("'", long0);
      stringWriter0.append('l');
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.6364983272433733
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      Byte.toUnsignedLong((byte)44);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "B7?dng";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (double) (byte)39);
      jSONObject0.toString((int) (byte)39);
      jSONObject0.optString("a2H;Fk;R703/.", "] is not a JSONArray.");
      jSONObject0.opt("{\"java.lang.String@0000000002\": java.lang.Double@0000000003}");
      jSONObject1.optDouble("] is not a JSONArray.");
      jSONObject0.optLong("ik");
      jSONObject0.toString((int) (byte)39);
      Byte.compare((byte)97, (byte) (-119));
      jSONObject0.isNull("(_&");
      JSONObject.numberToString(byte0);
      jSONObject0.put("{\"java.lang.String@0000000002\": java.lang.Double@0000000003}", (double) 44L);
      JSONObject.quote("");
      JSONObject.doubleToString((byte) (-119));
      JSONObject.quote("wheel.json.JSONObject$1");
      JSONObject.quote("mi");
      Double double0 = new Double(0L);
      Short short0 = new Short((short)92);
      jSONObject1.putOpt("*bpp)j7=", short0);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.619502584891735
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      String[] stringArray0 = new String[10];
      Byte byte1 = new Byte((byte)39);
      stringArray0[8] = "] is not a JSONArray.";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "] is not a JSONArray.";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (double) (byte)39);
      jSONObject0.toString((int) (byte)39);
      Object object0 = JSONObject.NULL;
      String string0 = "ik";
      jSONObject0.optLong("ik");
      JSONObject.valueToString("] is not a JSONArray.");
      Byte byte2 = new Byte((byte)39);
      jSONObject0.isNull("(_&");
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000002\": java.lang.Double@0000000003}");
      jSONObject0.optLong("ik");
      int int0 = 32;
      JSONObject.valueToString((Object) null, 32, (-2544));
      jSONObject1.optJSONArray("*bpp)j7=");
      try { 
        jSONObject1.getInt("le");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"le\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Float.min(0.0F, 0.0F);
      byte byte0 = (byte)126;
      Byte byte1 = new Byte((byte)126);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Byte byte2 = new Byte((byte)126);
      linkedList0.spliterator();
      byte byte3 = (byte)101;
      Byte.toUnsignedInt((byte)101);
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("{%:mvWZ/>98_Q$=zf8/");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 8 of {%:mvWZ/>98_Q$=zf8/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[8] = "] is not a JSONArray.";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "] is not a JSONArray.";
      Object object0 = JSONObject.NULL;
      Float float0 = new Float((-799.9647796662));
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.2678654362412694
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Float float0 = new Float((-326.5349F));
      Float float1 = new Float((-326.5349F));
      JSONObject jSONObject0 = new JSONObject(float0);
      assertEquals(3, jSONObject0.length());
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = new Object();
      Byte byte0 = new Byte((byte)126);
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      Byte.toUnsignedInt((byte)126);
      linkedList1.spliterator();
      String string0 = JSONObject.valueToString(linkedList0, 126, 73);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.4327135842747671
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Float float0 = Float.valueOf((-327.5252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      Float.sum(0.0F, (-327.5252F));
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.skipTo('s');
      jSONTokener0.skipTo('s');
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Long long0 = new Long(0L);
      Long.getLong("\n", long0);
      stringWriter1.append('0');
      Float.min(1.0F, 0.0F);
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0, 9, 9);
      assertNotNull(string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.6447663143907048
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer integer0 = new Integer((-822));
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.toString(2);
      jSONObject0.names();
      Byte.compare((byte)97, (byte)39);
      jSONObject0.isNull("J}L");
      JSONObject.numberToString(integer0);
      JSONObject.quote("null");
      JSONObject.doubleToString((-3975.728522));
      JSONObject.quote("*or!n");
      JSONObject.doubleToString(2);
      JSONObject jSONObject1 = jSONObject0.append("Pg$YjR1{$j&", (Object) null);
      jSONObject1.toString((int) (byte)39, 2);
      Double double0 = new Double(0.0);
      JSONObject.valueToString(double0);
      jSONObject0.keys();
      JSONObject jSONObject2 = jSONObject0.put("{\n                                         \"java.lang.String@0000000007\": [null],\n                                         \"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n  }", true);
      jSONObject2.optInt("null", 58);
      jSONObject1.put("|3[", (long) 2);
      jSONObject2.getBoolean("{\n                                         \"java.lang.String@0000000007\": [null],\n                                         \"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n  }");
      try { 
        jSONObject1.getBoolean("\"*or!n\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"*or!n\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.5504596525827967
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      Byte.toUnsignedLong((byte)44);
      String[] stringArray0 = new String[3];
      Byte.toUnsignedLong((byte)51);
      stringArray0[1] = stringArray0[0];
      stringArray0[2] = "B7?dng";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (double) (byte)39);
      jSONObject0.optString("a2H;Fk;R703/.", "] is not a JSONArray.");
      jSONObject0.opt(stringArray0[1]);
      jSONObject0.optLong("ik");
      jSONObject0.toString((int) (byte)39);
      Byte.compare((byte)97, (byte) (-119));
      jSONObject0.isNull("(_&");
      JSONObject.numberToString(byte0);
      JSONObject.quote("9");
      JSONObject.doubleToString((byte) (-119));
      JSONObject.quote("wheel.json.JSONObject$1");
      Double double0 = new Double(44L);
      jSONObject1.putOpt("gettoString", double0);
      JSONObject.testValidity("gettoString");
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0861895081867026
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Float.min(0.0F, 0.0F);
      Float float0 = new Float((double) 0.0F);
      Float.min(0.0F, 0.0F);
      Short short0 = new Short((short)1017);
      Short.compare((short) (-874), (short)1017);
      Short.toUnsignedLong((short) (-988));
      Short.toUnsignedLong((short) (-988));
      Short.compare((short)48, (short)92);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ",eZ$,.Y";
      stringArray0[1] = "FgV;TSBPG5R`";
      stringArray0[2] = ".";
      stringArray0[3] = "Fs";
      stringArray0[4] = "issum";
      stringArray0[5] = "Cw.ez?gMFue6Hf4fA.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.get(",eZ$,.Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",eZ$,.Y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.1793420283490152
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      String string0 = "] is not a JSONObject.";
      jSONObject0.optInt("] is not a JSONObject.");
      Integer integer0 = new Integer(0);
      JSONObject.valueToString(integer0);
      jSONObject0.put("] is not a JSONObject.", (Map) null);
      JSONObject.valueToString((Object) null, 0, 0);
      Integer integer1 = new Integer(0);
      String string1 = "#|j1";
      try { 
        jSONObject0.getJSONArray("#|j1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#|j1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(6);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(6);
      Integer integer1 = new Integer(93);
      Integer integer2 = new Integer(93);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer3 = new Integer(59);
      Integer.getInteger("2YD(");
      linkedList1.add(integer3);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      JSONObject.valueToString(jSONArray1, 83, 6);
      jSONArray1.optJSONObject((-821));
      Double double0 = new Double(93);
      String string0 = "$>";
      try { 
        jSONObject0.getJSONObject("$>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Byte.toUnsignedInt((byte)4);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Float.sum((byte)4, 1L);
      JSONTokener jSONTokener0 = new JSONTokener("m\t");
      jSONTokener0.skipTo('s');
      jSONTokener0.skipTo('5');
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      linkedList2.spliterator();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("isdecode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isdecode\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.6001660731596457
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer.toUnsignedString(100);
      Integer integer0 = new Integer(100);
      StringWriter stringWriter0 = new StringWriter(100);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject.doubleToString(100);
      JSONObject.doubleToString(Double.NaN);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList1.removeAll(linkedList0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(integer0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Long.remainderUnsigned((-362L), (-362L));
      Long.compareUnsigned((-362L), 0L);
      Long.remainderUnsigned((-362L), (-362L));
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      Short short0 = new Short((short)1879);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      Short.compare((short)1, (short)32);
      Short.compare((short)123, (short)92);
      Short.toUnsignedLong((short) (-988));
      Short.toUnsignedLong((short)13);
      Short.compare((short)92, (short)8192);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.710805389817248
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Float float0 = new Float((-327.5252F));
      Float.min((-327.5252F), (-327.5252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("{}", (double) (-327.5252F));
      jSONObject1.remove("] is not a JSONObject.");
      Object object0 = new Object();
      byte byte0 = (byte)126;
      jSONObject1.getDouble("{}");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      linkedList0.spliterator();
      String string0 = "}Hlw{85v46*ZD";
      try { 
        jSONObject1.getDouble("}Hlw{85v46*ZD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}Hlw{85v46*ZD\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Long long0 = new Long((-362L));
      Long.remainderUnsigned((-362L), (-362L));
      Long.compareUnsigned((-362L), 0L);
      Long.remainderUnsigned((-362L), (-362L));
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      Short short0 = new Short((short)1879);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "ishashCode";
      Object object0 = JSONObject.NULL;
      jSONObject0.put("ishashCode", object0);
      try { 
        jSONObject0.getInt("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ishashCode\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.2775667499451857
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Float float0 = Float.valueOf((-327.5252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("{}", 518.9508);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      Float.sum(0.0F, (-327.5252F));
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.skipTo('s');
      jSONTokener0.skipTo('s');
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Long long0 = new Long(0L);
      Long.getLong("\n", long0);
      stringWriter1.append('0');
      JSONTokener jSONTokener1 = new JSONTokener("'");
      Float.min((-327.5252F), 0.0F);
      Float.min((-327.5252F), 0L);
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      jSONObject1.put("J,/Ph.9`e('Sb=@", (Map) hashMap0);
      jSONObject1.write(stringWriter1);
      jSONObject0.optJSONArray("Q@{LRw]z|");
      try { 
        jSONObject0.getInt("b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7108053898172477
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Float float0 = new Float((-327.5252F));
      Float.min(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("{}", 518.9508);
      Object object0 = new Object();
      Byte byte0 = new Byte((byte)126);
      jSONObject1.getDouble("{}");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Byte.toUnsignedInt((byte)126);
      linkedList0.spliterator();
      jSONObject0.getInt("{}");
      byte byte1 = (byte)8;
      Byte.compare((byte)126, (byte)8);
      try { 
        jSONObject1.getDouble("}Hlw{85v46*ZD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}Hlw{85v46*ZD\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.076252256532968
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("] is not a JSONObject.");
      Integer integer0 = new Integer(0);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject jSONObject1 = new JSONObject((Map) null);
      JSONObject jSONObject2 = jSONObject1.put("] is not a JSONObject.", (Map) null);
      jSONObject2.keys();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter(1330);
      Integer.getInteger("null", 65);
      Integer integer1 = new Integer(0);
      jSONObject0.accumulate("RG3e(4~Y[;P", integer1);
      jSONObject1.optInt("", 97);
      Integer.getInteger("] is not a JSONObject.");
      Integer integer2 = new Integer(0);
      Integer.getInteger("sh", integer2);
      String string0 = jSONObject1.optString("] is not a JSONObject.", "RG3e(4~Y[;P");
      String string1 = JSONObject.valueToString("null");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.938602657469107
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Float float0 = Float.valueOf((-327.5252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("{}", (double) (-327.5252F));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Float.sum(0.0F, (-327.5252F));
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      Double double0 = new Double(1175.4414817);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      HashMap<Object, Double> hashMap1 = new HashMap<Object, Double>(hashMap0);
      Double double1 = new Double((-129.6072819895));
      jSONObject1.optInt("{>rn|=hH~``4K2Sh", (-490));
      hashMap1.put(jSONObject1, double1);
      Double.isFinite((-327.5252F));
      Double.sum((-19.05667374372019), (-129.6072819895));
      Double.isFinite((-129.6072819895));
      Double double2 = new Double((-327.5252F));
      hashMap1.replace((Object) "{}", double2, (Double) null);
      Double double3 = new Double(1174.708814527);
      hashMap0.put("Missing value", double0);
      Float float1 = new Float(759.3922);
      JSONObject.valueToString((Object) null);
      jSONObject0.optString("{}");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Short short0 = new Short((short)900);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.put("000", 2);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.22136714086409
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Byte.toUnsignedInt((byte) (-78));
      Long long0 = new Long(1L);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      Long.getLong("wheel.json.JSONTokener", long0);
      stringWriter0.append('l');
      jSONObject0.optLong("wheel.json.JSONTokener", 1L);
      jSONObject0.optDouble("0C?Lt}Y%O[q?G[VA", (-2865.0));
      Long long1 = new Long(5057L);
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.putOpt("Null key.", "wheel.json.JSONTokener");
      jSONObject2.put("wheel.json.JSONTokener", (-2865.0));
      JSONObject jSONObject3 = jSONObject2.put("null", 178);
      JSONObject.getNames(jSONObject3);
      assertEquals(3, jSONObject2.length());
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.2536263610304355
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      byte byte1 = (byte)44;
      Byte.toUnsignedLong((byte)44);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "B7?dng";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (double) (byte)39);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optString("a2H;Fk;R703/.", "] is not a JSONArray.");
      jSONObject0.optBoolean("getparseFloat");
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      StringWriter stringWriter1 = stringWriter0.append(' ');
      jSONObject0.write(stringWriter1);
      try { 
        jSONObject1.getBoolean("B7?dng");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"B7?dng\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.2067368439362582
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double((byte)39);
      jSONObject0.optInt("' and instead saw '");
      double double1 = jSONObject0.optDouble("is", (double) (byte)39);
      Double double2 = new Double((byte)39);
      Long long0 = new Long((byte)39);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      Double double3 = new Double(0);
      Double double4 = new Double(3581.0);
      Double double5 = new Double(29.0);
      linkedList0.add(double5);
      linkedList0.add(double4);
      linkedList0.add((Double) null);
      Double.max(0L, 0.0);
      linkedList0.add(double0);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      linkedList0.removeAll(linkedList2);
      assertTrue(linkedList0.contains(double1));
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Long long0 = new Long((-362L));
      Long.remainderUnsigned((-362L), (-362L));
      Long.compareUnsigned((-362L), 0L);
      Long.remainderUnsigned((-362L), (-362L));
      StringWriter stringWriter0 = new StringWriter();
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject.valueToString((Object) null);
      Byte byte0 = new Byte((byte) (-119));
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.455500877075017
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float float1 = new Float((-626.71F));
      JSONObject jSONObject0 = new JSONObject(float1);
      double double0 = 519.7129802838277;
      jSONObject0.put("{}", 0.0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = new Object();
      Byte byte0 = new Byte((byte)59);
      try { 
        jSONObject0.append("{}", "{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[{}] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.2067368439362582
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      jSONObject0.optInt(";t2t");
      jSONObject0.optDouble("Q!w.'g?(h]`.m[7", 0.0);
      Double double1 = new Double(0.0);
      Double.sum(0.0, 0.0);
      hashMap0.put(double0, double1);
      Double double2 = new Double(0.0);
      hashMap0.put(double1, double2);
      String string0 = "";
      jSONObject0.optInt(";t2t", 2107);
      StringWriter stringWriter0 = new StringWriter();
      Long long0 = new Long(2107);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "Q!w.'g?(h]`.m[7", 0, 3851);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.8709639070052877
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      JSONObject.quote("\"\"");
      jSONObject0.optInt("%|bmZP$ms4*`Z");
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Object) "%|bmZP$ms4*`Z");
      String string0 = "'z2mb";
      jSONObject0.optLong("%|bmZP$ms4*`Z", (-1108L));
      Long long0 = new Long((-1108L));
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject2.put("'z2mb", (Collection) linkedList0);
      try { 
        jSONObject2.getDouble("%|bmZP$ms4*`Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%|bmZP$ms4*`Z\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.9407655983870606
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      jSONObject0.optInt(";t2");
      jSONObject0.optDouble("Q!w.'g?(h]`.m[7", 0.0);
      Double double1 = new Double(0.0);
      Double.sum(0.0, 0.0);
      hashMap0.put(double0, double1);
      Double.sum(1.0, 0.0);
      Double double2 = new Double(0.0);
      hashMap0.put(double1, double2);
      String string0 = "";
      jSONObject0.optBoolean("p/j%o\"u<\u0001h#", false);
      Integer integer0 = new Integer(0);
      jSONObject0.optJSONArray("wI@J~[b)+VrR3S$Wt");
      Long long0 = new Long(2107);
      Long.getLong("toJ", long0);
      jSONObject0.optLong("");
      jSONObject0.put("get", false);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-917));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float float1 = new Float((-626.71F));
      JSONObject jSONObject0 = new JSONObject(float1);
      Object object0 = new Object();
      Byte byte0 = new Byte((byte)59);
      jSONObject0.append("{}", "{}");
      Double.max(908.1, (-1310.9460027));
      Double double0 = new Double((-1310.9460027));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double1 = new Double(519.7129802838277);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      boolean boolean0 = linkedList1.add(double0);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      LinkedList<JSONArray> linkedList4 = new LinkedList<JSONArray>();
      boolean boolean1 = linkedList3.removeAll(linkedList0);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.294545165844896
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Long long0 = new Long((-362L));
      Long.remainderUnsigned((-362L), (-362L));
      Long.compareUnsigned((-362L), 0L);
      Long.remainderUnsigned((-362L), (-362L));
      Long.sum(0L, (-362L));
      Long.sum(0L, (-1027L));
      Short.compare((short) (-1234), (short)21);
      Short.compare((short)3, (short)687);
      Short.toUnsignedLong((short)687);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList1.removeAll(linkedList2);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("fl", false);
      jSONObject0.put("I%*<bqMzm8n2=", (double) 1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", 0L);
      jSONObject0.put("Expected '", true);
      jSONObject0.optString("Z4 ");
      Long long0 = new Long(0L);
      double double0 = (-925.278091363);
      try { 
        Long.parseUnsignedLong("Expected '");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Expected '\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.85098315815325
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Float float0 = new Float((-327.5252F));
      Float.min(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString();
      jSONObject0.put("{}", 524.5513540818487);
      JSONTokener jSONTokener0 = new JSONTokener("java.lang.Long@00000000070");
      jSONTokener0.skipPast("{}");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 26 of java.lang.Long@00000000070
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Float float0 = new Float((-326.5349F));
      Float float1 = new Float((-326.5349F));
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      Long long0 = new Long(0L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      Double double0 = new Double((-1170.0257904));
      linkedList0.add(double0);
      Double.max(0L, (-1170.0257904));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      linkedList0.add(double0);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      linkedList0.removeAll(linkedList2);
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.toString();
      assertEquals("{}", string1);
      assertNotNull(string1);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.7900981501087787
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Integer integer0 = new Integer(84);
      JSONObject jSONObject0 = new JSONObject(integer0);
      String string0 = "%|bmZP$ms4*`Z";
      jSONObject0.optInt("JSONArray initial value should be a string or collection or array.");
      Short short0 = new Short((short) (-1754));
      JSONObject jSONObject1 = jSONObject0.put("Unclosed comment", (Object) short0);
      long long0 = (-1081L);
      String string1 = "getcompare";
      jSONObject1.optLong("getcompare", (long) 0);
      Long long1 = new Long((-1081L));
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Long long0 = new Long((-362L));
      Long.remainderUnsigned((-362L), (-362L));
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.098147389135067
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Byte byte0 = new Byte((byte)35);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "6c},*`}03(INA";
      stringArray0[1] = "' and instead saw '";
      stringArray0[2] = "~G^\"$pR@z3RVeYgv7";
      stringArray0[3] = "com";
      stringArray0[4] = "k";
      stringArray0[5] = "umvOYgr4U/?8g|d=J";
      stringArray0[6] = "aW1c+sr&x y$";
      stringArray0[7] = "9Bk'>$L_r:H4";
      stringArray0[8] = "flo";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("aW1c+sr&x y$", (Object) "flo");
      JSONObject jSONObject2 = jSONObject1.append("{", "aW1c+sr&x y$");
      HashMap<JSONObject, Long> hashMap0 = new HashMap<JSONObject, Long>();
      jSONObject2.put("com", (Map) hashMap0);
      HashMap<Double, String> hashMap1 = new HashMap<Double, String>();
      Byte.toUnsignedLong((byte)2);
      HashMap<Double, String> hashMap2 = new HashMap<Double, String>(hashMap1);
      jSONObject0.put("toS", (Map) hashMap2);
      jSONObject2.put("9Bk'>$L_r:H4", true);
      JSONObject jSONObject3 = jSONObject2.append("umvOYgr4U/?8g|d=J", hashMap2);
      assertEquals(6, jSONObject1.length());
      assertEquals(6, jSONObject3.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Float float0 = new Float((-326.5349F));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = new Object();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      linkedList4.removeAll(linkedList3);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.keys();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.7664123555634643
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      jSONObject0.optInt(";t2t");
      jSONObject0.optDouble("Q!w.'g?(h]`.m[7", 0.0);
      Double double1 = new Double(0.0);
      Double.sum(0.0, 0.0);
      hashMap0.put(double0, double1);
      Double.isFinite((-1.0));
      Double.sum(1.0, 0.0);
      Double double2 = new Double(0.0);
      Double.isFinite(0.0);
      hashMap0.put(double1, double2);
      Integer integer0 = new Integer(0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Long long0 = new Long(0L);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "Q!w.'g?(h]`.m[7", 0, 0);
      Long long1 = new Long(2403);
      Long long2 = new Long(4696L);
      Long.getLong(";t2t", long2);
      StringWriter stringWriter3 = new StringWriter(2403);
      stringWriter2.append('n');
      jSONObject0.optDouble("mA|=oX6|'FOuZk:");
      jSONObject0.put(";t2t", (long) 0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.9758204357711924
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Unclosed comment");
      jSONObject0.optInt("%|bmZP$ms4*`Z");
      JSONObject jSONObject1 = jSONObject0.put("Unclosed comment", (Object) "%|bmZP$ms4*`Z");
      jSONObject0.optLong("%|bmZP$ms4*`Z", (-1081L));
      Long long0 = new Long((-1081L));
      Object object0 = JSONObject.NULL;
      jSONObject1.optLong("'z2mb");
      Byte.toUnsignedInt((byte)97);
      Byte.compare((byte)1, (byte)1);
      jSONObject1.isNull("isfloatToRawIntBits");
      Object object1 = JSONObject.NULL;
      StringWriter stringWriter0 = new StringWriter(13);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of wheel.json.JSONArray
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.5117115507704915
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      Byte.toUnsignedLong((byte)44);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "B7?dng";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put("] is not a JSONArray.", (double) (byte)39);
      jSONObject0.toString((int) (byte)39);
      jSONObject0.optString("a2H;Fk;R703/.", "] is not a JSONArray.");
      jSONObject0.opt("{\"java.lang.String@0000000002\": java.lang.Double@0000000003}");
      jSONObject0.optLong("ik");
      Integer.toUnsignedString((int) (byte)44);
      boolean boolean0 = jSONObject0.optBoolean("max");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.0253262207700673
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Long long0 = new Long((-362L));
      Long.remainderUnsigned((-362L), (-362L));
      Long.compareUnsigned((-362L), 0L);
      Long.remainderUnsigned((-362L), (-362L));
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      Short short0 = new Short((short)1879);
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "isopt";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = jSONObject1.toString(1);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.4056108899847253
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      Double double2 = new Double(0.0);
      Double.max(0.0, 0.0);
      Double.sum(0.0, 0.0);
      hashMap0.put(double0, double1);
      jSONObject0.optString("jo", "i_");
      jSONObject0.optBoolean("");
      StringWriter stringWriter0 = new StringWriter();
      int int0 = (-1059);
      int int1 = 3851;
      String string0 = "null";
      jSONObject0.optInt("null", (-1059));
      StringWriter stringWriter1 = new StringWriter();
      Long long0 = new Long((-2015L));
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "null", (-1059), 2403);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.0090027922505898
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "gethashCode";
      Long long0 = new Long((-362L));
      Long.remainderUnsigned((-362L), (-362L));
      Long long1 = new Long((-362L));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L$knZRgMRH9,=y#*h#";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "*bpp)j7=";
      stringArray0[3] = "gethashCode";
      stringArray0[4] = "gethashCode";
      Long.toUnsignedString(0L);
      JSONObject jSONObject0 = new JSONObject(long1, stringArray0);
      jSONObject0.put("gethashCode", true);
      Byte.toUnsignedLong((byte)5);
      JSONObject jSONObject1 = jSONObject0.put("-_1z.8Eo)D", (double) (byte)5);
      Byte.toUnsignedLong((byte)5);
      Object object0 = JSONObject.NULL;
      jSONObject0.optLong("L$knZRgMRH9,=y#*h#");
      Byte.toUnsignedInt((byte)5);
      Byte.compare((byte)97, (byte) (-111));
      jSONObject1.isNull("-_1z.8Eo)D");
      Object object1 = JSONObject.NULL;
      StringWriter stringWriter0 = new StringWriter(890);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("*bpp)j7=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of *bpp)j7=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "op";
      JSONTokener jSONTokener0 = new JSONTokener("op");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of op
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.9736489231972635
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-822));
      Integer.compare(2366, 1);
      JSONObject jSONObject0 = new JSONObject(integer0);
      Integer.toUnsignedString(2);
      Integer integer1 = new Integer(2);
      Boolean boolean0 = new Boolean("[");
      boolean boolean1 = Boolean.logicalXor(true, true);
      JSONObject.testValidity(boolean0);
      assertTrue(boolean0.equals((Object)boolean1));
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.3335154937451494
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Float.valueOf((-327.5252F));
      Float.min(0.0F, 0.0F);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = new Object();
      Byte byte0 = new Byte((byte)126);
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      Byte byte1 = new Byte((byte)126);
      linkedList1.spliterator();
      linkedList0.parallelStream();
      Byte.toUnsignedInt((byte)101);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      hashMap1.putAll(hashMap2);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "gRJ}N7X$T4I2:>'XI";
      stringArray0[1] = "-M;4";
      stringArray0[2] = "-M;4";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getJSONArray("-M;4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-M;4\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      Integer integer0 = new Integer(0);
      String string0 = "=/%ydELl6W5ISb}x-o";
      try { 
        jSONObject0.getInt("=/%ydELl6W5ISb}x-o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=/%ydELl6W5ISb}x-o\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject.quote("5/Aem9I`ltO0%n>C");
      Byte.toUnsignedInt((byte)105);
      Long long0 = new Long((byte)105);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      Double double0 = new Double(0.0);
      Double double1 = new Double((byte)39);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList0.stream();
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      boolean boolean0 = linkedList0.removeAll(linkedList4);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.6521819881717519
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Float float0 = Float.valueOf((-327.5252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("{}", (double) (-327.5252F));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Float.sum(0.0F, (-327.5252F));
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.nextTo("{}");
      jSONTokener0.skipTo('s');
      jSONTokener0.skipTo('s');
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Long long0 = new Long(0L);
      Float.sum(1278.14F, (-327.5252F));
      Long.compareUnsigned(0L, 0L);
      Float float1 = new Float(3774.660786536033);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      jSONObject0.append("q-.#$WFw_Nf1tc[", (Object) null);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Float.min(160, (-1888.549F));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      Float float0 = new Float((double) (-1888.549F));
      Float.max(0.0F, 0.0F);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 92, 1);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      String[] stringArray0 = new String[0];
      Object object0 = JSONObject.NULL;
      Byte.toUnsignedLong((byte)39);
      JSONObject.valueToString((Object) null);
      Byte byte1 = new Byte((byte) (-119));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("5/Aem9I`ltO0%n>C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 5/Aem9I`ltO0%n>C
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Long long0 = new Long((-2951L));
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">!^kJ`3i:T9lAk6A";
      stringArray0[1] = "xk&AuY";
      stringArray0[2] = "";
      stringArray0[3] = "";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      boolean boolean0 = jSONObject0.has("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.69222770736024
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.put("J", (double) (byte)39);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = new Object();
      Byte byte1 = new Byte((byte)39);
      jSONObject0.append(";x", linkedList0);
      try { 
        jSONObject1.getDouble(";x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";x\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Float float0 = new Float((-327.5252F));
      Float.min((-327.5252F), (-327.5252F));
      Byte byte0 = new Byte((byte) (-1));
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Byte byte1 = new Byte((byte)126);
      linkedList0.spliterator();
      byte byte2 = (byte)101;
      Byte.toUnsignedInt((byte)126);
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("~='l");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~='l
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Float.min(0.0F, 0.0F);
      Float float0 = new Float((double) 0.0F);
      Float.min(0.0F, 0.0F);
      Short short0 = new Short((short)1017);
      Long.compareUnsigned((short)1017, (short)1017);
      String string0 = "=/%ydELl6W5ISb}x-o";
      JSONTokener jSONTokener0 = new JSONTokener("=/%ydELl6W5ISb}x-o");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("=/%ydELl6W5ISb}x-o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of =/%ydELl6W5ISb}x-o
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.141894079600891
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Unclosed comment");
      JSONObject.quote("Unclosed comment");
      jSONObject0.optInt("%|bmZP$ms4*`Z");
      // Undeclared exception!
      jSONObject0.toString(1530, (-2117));
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.8424488410327955
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Byte.toUnsignedInt((byte)4);
      Long long0 = new Long(1L);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      String string0 = "wheel.json.JSONTokener";
      JSONObject jSONObject1 = jSONObject0.append("6SazT;D?dsaINgoG+;%", "\"f,r7]JbP`M-@Gd");
      jSONObject1.toString(4, 1971);
      String string1 = "vH@?~`pFP'{";
      try { 
        jSONObject1.getInt("/(uK_(>OfbwoO=yU^Ac");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/(uK_(>OfbwoO=yU^Ac\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte.toUnsignedInt((byte)4);
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)4);
      String string0 = jSONObject1.toString((-1275), (-1195));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.626949017138496
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      String[] stringArray0 = new String[10];
      stringArray0[8] = "!z5rZs`V7[&&";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "!z5rZs`V7[&&";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("!z5rZs`V7[&&", (double) (byte)39);
      jSONObject0.toString((int) (byte)39);
      Object object0 = JSONObject.NULL;
      jSONObject0.optDouble("Vpp8Z^+.7\"", (double) (byte)39);
      jSONObject0.optLong("ik");
      JSONObject.valueToString("!z5rZs`V7[&&");
      jSONObject1.optBoolean((String) null, false);
      jSONObject0.isNull("(_&");
      JSONObject jSONObject2 = jSONObject0.put("FnlUHJmNg{", (Object) null);
      JSONObject.quote("");
      JSONObject.quote("!z5rZs`V7[&&");
      JSONObject.quote("\"java.lang.String@0000000002\"");
      jSONObject1.append("(_&", stringArray0[0]);
      jSONObject0.toString((int) (byte)44, (int) (byte) (-119));
      jSONObject2.optJSONObject("cA:&$5W$Cj60Q");
      jSONObject0.optLong((String) null);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.241673296557307
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      String[] stringArray0 = new String[10];
      stringArray0[8] = "] is not a JSONArray.";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "] is not a JSONArray.";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (double) (byte)39);
      jSONObject0.toString((int) (byte)39);
      Long long0 = new Long((-1L));
      jSONObject0.append("*bpp)j7=", byte0);
      jSONObject1.toString(49, 88);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject2.toString((int) (byte)39);
      jSONObject2.putOpt((String) null, "{\n                                                                                                                                         \"java.lang.String@0000000002\": java.lang.Double@0000000003,\n                                                                                                                                         \"java.lang.String@0000000005\": [java.lang.Byte@0000000006]\n                                                                                        }");
      Object object0 = jSONObject2.remove("q:");
      assertNull(object0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.329591306514515
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Unclosed comment");
      jSONObject0.optInt("%|bmZP$ms4*`Z");
      JSONObject jSONObject1 = jSONObject0.put("Unclosed comment", (Object) "%|bmZP$ms4*`Z");
      jSONObject0.optLong("%|bmZP$ms4*`Z", (-1081L));
      Long long0 = new Long((-1081L));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      linkedList0.removeAll(linkedList1);
      jSONObject0.toString(0);
      jSONObject1.putOpt("n-LfDmy", "n-LfDmy");
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.040497979219962
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte byte0 = (byte)4;
      Byte.toUnsignedInt((byte)4);
      long long0 = 1L;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      String string0 = "\\n";
      JSONObject jSONObject1 = jSONObject0.put("\n", (Object) linkedList1);
      jSONObject1.toString(1823);
      Integer integer0 = Integer.getInteger("\n", 3903);
      Integer.sum(3903, 4);
      Integer.toUnsignedString(3903);
      linkedList1.add(integer0);
      try { 
        jSONObject0.getBoolean("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\n\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.179267325383342
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      String[] stringArray0 = new String[10];
      String string0 = "] is not a JSONArray.";
      stringArray0[8] = "] is not a JSONArray.";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "] is not a JSONArray.";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Byte.toUnsignedLong((byte)39);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (double) (byte)39);
      jSONObject0.toString((int) (byte)39);
      Object object0 = JSONObject.NULL;
      String string1 = "+up,:1|OB5'7L";
      try { 
        jSONObject1.getJSONArray("+up,:1|OB5'7L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+up,:1|OB5'7L\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Long long0 = new Long((-362L));
      Long.remainderUnsigned((-362L), (-362L));
      Long.compareUnsigned((-362L), 0L);
      Long.remainderUnsigned((-362L), (-362L));
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      Short short0 = new Short((short)1879);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((-667.6));
      Float.max(1.0F, (-1650.0F));
      String string0 = JSONObject.valueToString(jSONObject0, 2, 566);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.2067368439362582
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      String[] stringArray0 = new String[10];
      Byte byte1 = new Byte((byte)39);
      stringArray0[8] = "] is not a JSONArray.";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("] is not a JSONArray.");
      jSONObject0.optDouble("X@w;h#", (double) 0);
      Double double0 = new Double(0.0);
      Long long0 = new Long((byte)39);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      Double double1 = new Double(2182.9255787);
      Double double2 = new Double(0L);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList0.stream();
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      boolean boolean0 = linkedList4.removeAll(linkedList3);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>(13);
      Boolean.valueOf("get");
      Double double0 = new Double(13);
      Byte.toUnsignedInt((byte) (-46));
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONArray, JSONObject> hashMap1 = new HashMap<JSONArray, JSONObject>();
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject1);
      Byte byte0 = new Byte((byte) (-32));
      Float float0 = new Float((double) (byte)12);
      assertEquals(12.0F, (float)float0, 0.01F);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.4795008699302592
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Integer.toUnsignedString(100);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      Double double0 = new Double(128);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double.max(128, 0.0);
      linkedList2.add(double0);
      Double.max(91.1469010179331, (-1170.0257904));
      linkedList2.add(double0);
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      linkedList2.removeAll(linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.getInt("w=C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"w=C\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.3767266534724054
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = 0.0;
      Double double1 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double1);
      String string0 = null;
      long long0 = 0L;
      Long long1 = new Long(0L);
      try { 
        jSONObject0.accumulate((String) null, long1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Byte byte0 = new Byte((byte)92);
      byte byte1 = (byte) (-32);
      Byte.toUnsignedInt((byte) (-32));
      Long.valueOf((long) (byte) (-32));
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("j,/ph.9`e('sb=@", byte0);
      String string0 = "FkRRiTt<{p$U;FA";
      JSONTokener jSONTokener0 = new JSONTokener("FkRRiTt<{p$U;FA");
      jSONTokener0.nextValue();
      jSONTokener0.skipPast("j,/ph.9`e('sb=@");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 15 of FkRRiTt<{p$U;FA
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.9850531879046152
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Float.min(0.0F, 0.0F);
      Long.compareUnsigned((-2246L), (-1105L));
      Long.remainderUnsigned((-1), (-1105L));
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      Short short0 = new Short((short) (-233));
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("0", (Object) hashMap0);
      Long long0 = new Long((-1));
      JSONObject jSONObject2 = jSONObject1.accumulate("0", long0);
      Float float0 = new Float(942.53);
      jSONObject2.putOpt("0", float0);
      String string0 = null;
      try { 
        jSONObject1.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Float.min(0.0F, 0.0F);
      Float float0 = new Float((double) 0.0F);
      Float.min(0.0F, 0.0F);
      Short short0 = new Short((short)1017);
      Long.compareUnsigned((short)1017, (short)1017);
      JSONObject.numberToString(short0);
      JSONTokener jSONTokener0 = new JSONTokener("17r2i5,+Gh8t+");
      StringWriter stringWriter0 = new StringWriter();
      jSONTokener0.syntaxError("=z/#5rX ](<W}Hna*");
      StringWriter stringWriter1 = new StringWriter();
      Long long0 = new Long((-985L));
      Long long1 = new Long((short)1017);
      StringWriter stringWriter2 = new StringWriter(0);
      stringWriter2.flush();
      try { 
        Long.decode("17r2i5,+Gh8t+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"17r2i5,+Gh8t+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.5549076808144329
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Float.min(0.0F, 0.0F);
      Float float0 = new Float((double) (-327.5252F));
      Float.min(0.0F, 0.0F);
      Float.min(0.0F, 118.0F);
      Float.max(0.0F, 0.0F);
      Float.max((-3975.089F), 808.34F);
      Float.sum(252.88885F, (-2275.1035F));
      Float.min(252.88885F, (-2090.294F));
      Float.min(783.7F, 5199.0F);
      String string0 = JSONObject.valueToString(float0, 73, 73);
      assertNotNull(string0);
      
      Boolean boolean0 = new Boolean((String) null);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.108250009830047
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "gethashCode";
      Long long0 = new Long((-362L));
      Long.remainderUnsigned((-362L), (-362L));
      Long long1 = new Long((-362L));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L$knZRgMRH9,=y#*h#";
      stringArray0[1] = "*bpp)j7=";
      stringArray0[2] = "*bpp)j7=";
      stringArray0[3] = "gethashCode";
      stringArray0[4] = "gethashCode";
      Long.toUnsignedString(0L);
      JSONObject jSONObject0 = new JSONObject(long1, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("gethashCode", true);
      Object object0 = JSONObject.NULL;
      jSONObject1.accumulate("#U^?I^a$o", object0);
      Byte.toUnsignedLong((byte)5);
      JSONObject jSONObject2 = jSONObject0.put("-_1z.8Eo)D", (double) (byte)5);
      Byte.toUnsignedLong((byte)5);
      Object object1 = JSONObject.NULL;
      jSONObject0.optLong("L$knZRgMRH9,=y#*h#");
      Byte.toUnsignedInt((byte)5);
      jSONObject2.isNull("-_1z.8Eo)D");
      Object object2 = JSONObject.NULL;
      StringWriter stringWriter0 = new StringWriter(890);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("*bpp)j7=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of *bpp)j7=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.4375503412075572
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte byte0 = (byte)4;
      Byte.toUnsignedInt((byte)4);
      long long0 = 1L;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      String string0 = "\\n";
      Integer integer0 = Integer.getInteger("\n", 3903);
      Integer.toUnsignedString(3903);
      linkedList1.add(integer0);
      try { 
        jSONObject0.getBoolean("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.7173186896035182
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Integer integer0 = new Integer((-822));
      JSONObject jSONObject0 = new JSONObject(integer0);
      Object object0 = new Object();
      String string0 = "wheel.json.JSONTokener";
      jSONObject0.put("wheel.json.JSONTokener", (Object) integer0);
      byte byte0 = (byte)108;
      Byte byte1 = new Byte((byte)108);
      String string1 = "Substring bounds error";
      jSONObject0.append("Substring bounds error", "wheel.json.JSONTokener");
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.remove("wheel.json.JSONTokener");
      try { 
        jSONObject1.getDouble("wheel.json.JSONTokener");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONTokener\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      Long.remainderUnsigned((-1L), (-1L));
      Long.compareUnsigned(0L, (-1L));
      Long.remainderUnsigned((-1L), (-54L));
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      Short short0 = new Short((short) (-1751));
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Double double0 = new Double((-1462.731343));
      Integer integer0 = new Integer(13);
      Double double1 = new Double((-1L));
      Object object0 = JSONObject.NULL;
      jSONObject0.put("ishashCode", (Object) null);
      try { 
        jSONObject0.getJSONObject("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ishashCode\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      JSONObject.quote((String) null);
      Long long0 = new Long((-578L));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-1.0F));
      Double double1 = new Double((-1.0));
      boolean boolean0 = linkedList0.add(double1);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      boolean boolean1 = new Boolean((String) null);
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      boolean boolean2 = linkedList1.removeAll(linkedList0);
      assertFalse(boolean2 == boolean0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Long long0 = new Long((-362L));
      Long.remainderUnsigned((-362L), (-362L));
      Long.compareUnsigned((-362L), 0L);
      Long.remainderUnsigned((-362L), (-362L));
      Long.sum(0L, (-362L));
      Long.sum(0L, (-1027L));
      Short.compare((short) (-1234), (short) (-1234));
      Short.compare((short) (-1234), (short)687);
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      hashMap0.clear();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = Double.valueOf((-501.442097));
      linkedList0.add(double0);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double1 = new Double(0L);
      linkedList2.add(double1);
      LinkedList<JSONArray> linkedList3 = new LinkedList<JSONArray>();
      linkedList0.removeAll(linkedList2);
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }
}
