/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 05:06:37 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "^bI>szMLE+JJ";
      stringArray0[1] = "^bI>szMLE+JJ";
      stringArray0[2] = "^bI>szMLE+JJ";
      stringArray0[3] = "+#09fdO1PX";
      stringArray0[4] = "^bI>szMLE+JJ";
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      stringArray0[5] = "^bI>szMLE+JJ";
      archiveScanner0.setIncludes(stringArray0);
      Locale locale0 = Locale.ITALIAN;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      locale0.getUnicodeLocaleKeys();
      Locale locale1 = (Locale)locale0.clone();
      Locale locale2 = Locale.forLanguageTag("+#09fdO1PX");
      Locale.getISOLanguages();
      Locale locale3 = Locale.GERMANY;
      locale2.hasExtensions();
      Vector<Locale> vector1 = new Vector<Locale>();
      locale1.hasExtensions();
      Vector<Locale> vector2 = new Vector<Locale>();
      locale1.getDisplayCountry(locale2);
      archiveScanner0.haveSlowResults = true;
      vector0.addAll((Collection<?>) vector2);
      vector2.add(locale2);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "Kear", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/.ZIP1g~RL|Ld^`2rXq+");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/cZIP0$1z~bK4(C:z|vz\\;n");
      FileSystemHandling.createFolder(evoSuiteFile1);
      byteArray0[2] = (byte) (-104);
      byteArray0[6] = (byte) (-104);
      byteArray0[0] = (byte) (-22);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/tmp/.ZIP1g~RL|Ld^`2rXq+");
      FileSystemHandling.appendLineToFile(evoSuiteFile2, "Y9");
      ImprovedFile improvedFile0 = new ImprovedFile((File) null, "$1z~bK4(C:z|vz;n");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "$1z~bK4(C:z|vz;n");
      byte[] byteArray1 = new byte[1];
      FileSystemHandling.appendLineToFile(evoSuiteFile2, "Ze#Is$JK*($61P<.8O");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendDataToFile(evoSuiteFile2, byteArray1);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[2];
      Vector<Locale> vector0 = new Vector<Locale>();
      archiveScanner0.dirsNotIncluded = vector0;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      stringArray0[0] = "$1z~bK4(C:z|vz;n";
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "$1z~bK4(C:z|vz;n");
      stringArray0[1] = "$1z~bK4(C:z|vz;n";
      MockFile.createTempFile("cZIP", "$1z~bK4(C:z|vz;n");
      archiveScanner0.setIncludes(stringArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      archiveScanner0.excludes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "$1z~bK4(C:z|vz;n", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.filesNotIncluded = null;
      String[] stringArray0 = new String[4];
      Vector<String> vector0 = new Vector<String>(2, 1);
      archiveScanner0.dirsIncluded = vector0;
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.filesIncluded = vector1;
      stringArray0[0] = "com.lts.io.ArchiveScanner";
      Vector<String> vector2 = new Vector<String>();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      archiveScanner0.filesNotIncluded = vector2;
      stringArray0[1] = "com.lts.io.ArchiveScanner";
      stringArray0[2] = "com.lts.io.ArchiveScanner";
      archiveScanner0.excludes = stringArray0;
      vector1.ensureCapacity((-1816));
      stringArray0[3] = "com.lts.io.ArchiveScanner";
      vector0.add("com.lts.io.ArchiveScanner");
      vector0.add("e:[1.jar0e:[1.jar.jar");
      System.setCurrentTimeMillis(2);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "com.lts.io.ArchiveScanner", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/.ZIP1g~RL|Ld^`2rXq+");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/cZIP0$1z~bK4(C:z|vz\\;n");
      FileSystemHandling.createFolder(evoSuiteFile1);
      byteArray0[2] = (byte) (-104);
      byteArray0[6] = (byte) (-104);
      byteArray0[0] = (byte) (-22);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/tmp/.ZIP1g~RL|Ld^`2rXq+");
      FileSystemHandling.appendLineToFile(evoSuiteFile2, "Y9");
      ImprovedFile improvedFile0 = new ImprovedFile((File) null, "$1z~bK4(C:z|vz;n");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".EAR");
      byte[] byteArray1 = new byte[1];
      FileSystemHandling.appendLineToFile(evoSuiteFile2, "Ze#Is$JK*($61P<.8O");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendDataToFile(evoSuiteFile2, byteArray1);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[2];
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      stringArray0[0] = "$1z~bK4(C:z|vz;n";
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "$1z~bK4(C:z|vz;n");
      stringArray0[1] = ".EAR";
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector0;
      MockFile.createTempFile("cZIP", "$1z~bK4(C:z|vz;n");
      archiveScanner0.setIncludes(stringArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      archiveScanner0.excludes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, ".EAR", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      File file0 = MockFile.createTempFile("e:[", "");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/e:[0");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e:[");
      ImprovedFile improvedFile0 = new ImprovedFile(file0, "");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "e:[");
      ImprovedFile.createTempDirectory(improvedFile0);
      file0.setReadable(true, true);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[2];
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/e:[0");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "");
      stringArray0[0] = "g~nRL|Ld^`+rXBq+";
      FileSystemHandling.createFolder(evoSuiteFile0);
      improvedFile0.makeDirectories();
      stringArray0[1] = "";
      improvedFile0.setWritable(true);
      archiveScanner0.setIncludes(stringArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      improvedFile0.createTempDir("e:[", "w-^(`}gC~y%qpl%3z");
      file0.toPath();
      Vector<BufferedInputStream> vector0 = new Vector<BufferedInputStream>();
      archiveScanner0.filesIncluded = vector0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      improvedFile0.getAbsolutePath();
      archiveScanner0.excludes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      improvedFile0.renameTo(file0);
      archiveScanner0.processFile("g~nRL|Ld^`+rXBq+");
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = MockFile.createTempFile("e:[", "");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/e:[0");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e:[");
      ImprovedFile improvedFile0 = new ImprovedFile(file0, "");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "e:[");
      ImprovedFile.createTempDirectory(improvedFile0);
      file0.setReadable(true, true);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[2];
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/e:[0");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "");
      stringArray0[0] = "g~nRL|Ld^`+rXBq+";
      FileSystemHandling.createFolder(evoSuiteFile0);
      improvedFile0.makeDirectories();
      stringArray0[1] = "";
      archiveScanner0.setIncludes(stringArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      improvedFile0.createTempDir("e:[", "w-^(`}gC~y%qpl%3z");
      file0.toPath();
      file0.setExecutable(false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      improvedFile0.getAbsolutePath();
      archiveScanner0.excludes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      improvedFile0.renameTo(file0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("g~nRL|Ld^`+rXBq+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[4];
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsIncluded = vector0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stringArray0[0] = "com.lts.io.ArchiveScanner";
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.removeAllElements();
      stringArray0[1] = "com.lts.io.ArchiveScanner";
      stringArray0[2] = "com.lts.io.ArchiveScanner";
      archiveScanner0.excludes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      DirectoryScanner.matchPatternStart("com.lts.io.ArchiveScanner", "com.lts.io.ArchiveScanner");
      stringArray0[3] = "com.lts.io.ArchiveScanner";
      System.setCurrentTimeMillis(0);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "com.lts.io.ArchiveScanner", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\"e:[";
      archiveScanner0.setBasedir("QF6\"a8Px:,EYU&MOAn");
      DirectoryScanner.matchPatternStart("QF6\"a8Px:,EYU&MOAn", "ss 0");
      stringArray0[1] = "8AY)9EgNkI.w";
      stringArray0[2] = "8AY)9EgNkI.w";
      Vector<String> vector0 = new Vector<String>();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      archiveScanner0.dirsNotIncluded = vector0;
      stringArray0[3] = "+O#09d>1PX";
      stringArray0[4] = "ss 0";
      stringArray0[5] = "8AY)9EgNkI.w";
      archiveScanner0.setIncludes(stringArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      Object object1 = new Object();
      vector1.add(object1);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[4];
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsIncluded = vector0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stringArray0[0] = "com.lts.io.ArchiveScanner";
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.removeAllElements();
      stringArray0[1] = "com.lts.io.ArchiveScanner";
      stringArray0[2] = "com.lts.io.ArchiveScanner";
      archiveScanner0.excludes = stringArray0;
      DirectoryScanner.matchPatternStart("com.lts.io.ArchiveScanner", "com.lts.io.ArchiveScanner");
      vector0.removeAllElements();
      stringArray0[3] = "com.lts.io.ArchiveScanner";
      vector0.add("H5glze#x");
      String string0 = "The event type code, 0h{C;d$B}_=,:.jar";
      vector0.add("The event type code, 0h{C;d$B}_=,:.jar");
      System.setCurrentTimeMillis(1395L);
      archiveScanner0.setIncludes(stringArray0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "e:[1.jar0e:[1.jar.jar");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate2.or(predicate0);
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.filesIncluded = vector1;
      predicate2.negate();
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("com.lts.io.ArchiveScanner");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7653327875937666
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.filesNotIncluded = null;
      String[] stringArray0 = new String[4];
      DirectoryScanner.matchPath("OZHBBkl", "_s");
      String string0 = ".jar";
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesExcluded = vector0;
      stringArray0[0] = ".jar";
      stringArray0[1] = "g06rgf<";
      stringArray0[2] = "g06rgf<";
      vector0.listIterator();
      archiveScanner0.excludes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      DirectoryScanner.matchPatternStart("g06rgf<", "&&c%");
      stringArray0[3] = "g06rgf<";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processArchive((File) null, ".jar");
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      archiveScanner0.processFile(string0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, stringArray0[1], boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = MockFile.createTempFile("e:[", "");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/g~nRL|Ld^`+rXBq+26iUpT");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      ImprovedFile improvedFile0 = new ImprovedFile(file0, "");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "e:[");
      File file1 = file0.getCanonicalFile();
      ImprovedFile.createTempDirectory(improvedFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[2];
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesNotIncluded = vector0;
      stringArray0[0] = "g~nRL|Ld^`+rXBq+";
      FileSystemHandling.createFolder(evoSuiteFile0);
      improvedFile0.makeDirectories();
      stringArray0[1] = "";
      archiveScanner0.setIncludes(stringArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      improvedFile0.createTempDir("e:[", "w-^(`}gC~y%qpl%3z");
      boolean boolean0 = archiveScanner0.haveSlowResults;
      MockFile.createTempFile("g~nRL|Ld^`+rXBq+", "g~nRL|Ld^`+rXBq+");
      archiveScanner0.excludes = stringArray0;
      improvedFile0.renameTo(file1);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("g~nRL|Ld^`+rXBq+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/.ZIP1g~RL|Ld^`2rXq+");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/cZIP0$1z~bK4(C:z|vz\\;n");
      FileSystemHandling.createFolder(evoSuiteFile1);
      byteArray0[2] = (byte) (-104);
      byteArray0[6] = (byte) (-104);
      byteArray0[0] = (byte) (-22);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/tmp/.ZIP1g~RL|Ld^`2rXq+");
      FileSystemHandling.appendLineToFile(evoSuiteFile2, "Y9");
      ImprovedFile improvedFile0 = new ImprovedFile((File) null, "$1z~bK4(C:z|vz;n");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".EAR");
      byte[] byteArray1 = new byte[1];
      FileSystemHandling.appendLineToFile(evoSuiteFile2, "Ze#Is$JK*($61P<.8O");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendDataToFile(evoSuiteFile2, byteArray1);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[2];
      Vector<Locale> vector0 = new Vector<Locale>();
      archiveScanner0.dirsNotIncluded = vector0;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      stringArray0[0] = "$1z~bK4(C:z|vz;n";
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "$1z~bK4(C:z|vz;n");
      stringArray0[1] = ".EAR";
      MockFile.createTempFile("cZIP", "$1z~bK4(C:z|vz;n");
      archiveScanner0.setIncludes(stringArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      archiveScanner0.excludes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, ".EAR", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.filesNotIncluded = null;
      String[] stringArray0 = new String[4];
      Vector<String> vector0 = new Vector<String>(2, 1);
      archiveScanner0.dirsIncluded = vector0;
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.filesIncluded = vector1;
      stringArray0[0] = "com.lts.io.ArchiveScanner";
      vector1.add((Object) null);
      Vector<String> vector2 = new Vector<String>();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      archiveScanner0.filesNotIncluded = vector2;
      stringArray0[1] = "com.lts.io.ArchiveScanner";
      stringArray0[2] = "com.lts.io.ArchiveScanner";
      archiveScanner0.excludes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      vector1.ensureCapacity((-1816));
      stringArray0[3] = "com.lts.io.ArchiveScanner";
      vector0.add("com.lts.io.ArchiveScanner");
      vector0.add("e:[1.jar0e:[1.jar.jar");
      System.setCurrentTimeMillis(2);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "com.lts.io.ArchiveScanner", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[4];
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsIncluded = vector0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stringArray0[0] = "com.lts.io.ArchiveScanner";
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.removeAllElements();
      stringArray0[1] = "com.lts.io.ArchiveScanner";
      stringArray0[2] = "com.lts.io.ArchiveScanner";
      archiveScanner0.excludes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      DirectoryScanner.matchPatternStart("com.lts.io.ArchiveScanner", "com.lts.io.ArchiveScanner");
      stringArray0[3] = "com.lts.io.ArchiveScanner";
      System.setCurrentTimeMillis(0);
      archiveScanner0.setIncludes(stringArray0);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("3E>BZUYRZP!C~VW*p_B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[4];
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsIncluded = vector0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stringArray0[0] = "com.lts.io.ArchiveScanner";
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.removeAllElements();
      stringArray0[1] = "com.lts.io.ArchiveScanner";
      stringArray0[2] = "com.lts.io.ArchiveScanner";
      archiveScanner0.excludes = stringArray0;
      DirectoryScanner.matchPatternStart("com.lts.io.ArchiveScanner", "com.lts.io.ArchiveScanner");
      vector0.removeAllElements();
      stringArray0[3] = "com.lts.io.ArchiveScanner";
      vector0.add("H5glze#x");
      vector0.add("The event type code, 0h{C;d$B}_=,:.jar");
      System.setCurrentTimeMillis(1395L);
      archiveScanner0.setIncludes(stringArray0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "e:[1.jar0e:[1.jar.jar");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate2.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      vector0.removeIf(predicate3);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "The event type code, 0h{C;d$B}_=,:.jar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Pe:[";
      stringArray0[1] = "8AY)9EgNkI.w";
      stringArray0[2] = "Pe:[";
      stringArray0[3] = "Pe:[";
      stringArray0[4] = "Pe:[";
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) "Pe:[");
      archiveScanner0.dirsNotIncluded = vector0;
      stringArray0[5] = "xzpD.w?u.4";
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector1 = new Vector<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector1.sort((Comparator<? super Object>) null);
      Vector<Object> vector2 = new Vector<Object>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector1.sort((Comparator<? super Object>) null);
      Vector<Object> vector3 = new Vector<Object>();
      Vector<Object> vector4 = new Vector<Object>();
      vector2.listIterator();
      Vector<Object> vector5 = new Vector<Object>();
      vector3.add((Object) "Pe:[");
      vector5.add((Object) vector2);
      Object object0 = new Object();
      Object object1 = new Object();
      vector3.add((Object) "+#09fdO1PX");
      vector1.add(object1);
      vector3.addElement("Pe:[");
      Vector<Object> vector6 = new Vector<Object>();
      Object object2 = new Object();
      vector3.add((Object) "+#09fdO1PX");
      vector0.removeElement(vector5);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("com.lts.io.IpprovedFile");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.filesNotIncluded = null;
      String[] stringArray0 = new String[4];
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsIncluded = vector0;
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.filesIncluded = vector1;
      stringArray0[0] = "com.lts.io.ArchiveScanner";
      vector1.add((Object) vector1);
      Vector<String> vector2 = new Vector<String>();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      archiveScanner0.filesNotIncluded = vector2;
      stringArray0[1] = "com.lts.io.ArchiveScanner";
      stringArray0[2] = "com.lts.io.ArchiveScanner";
      archiveScanner0.excludes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      vector1.ensureCapacity(1);
      boolean boolean0 = archiveScanner0.haveSlowResults;
      vector1.ensureCapacity((-1816));
      stringArray0[3] = "com.lts.io.ArchiveScanner";
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "com.lts.io.ArchiveScanner");
      Predicate<Object> predicate1 = predicate0.negate();
      vector1.removeIf(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate2.negate();
      Integer integer0 = new Integer(3822);
      predicate0.or(predicate2);
      Predicate.isEqual((Object) integer0);
      vector0.add("com.lts.io.ArchiveScanner");
      vector0.add("e:[1.jar0e:[1.jar.jar");
      System.setCurrentTimeMillis(2);
      archiveScanner0.setIncludes(stringArray0);
      vector2.removeIf(predicate1);
      archiveScanner0.processFile("e:[1.jar0e:[1.jar.jar");
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.filesNotIncluded = null;
      String[] stringArray0 = new String[4];
      Vector<String> vector0 = new Vector<String>(2, 1);
      archiveScanner0.dirsIncluded = vector0;
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.filesIncluded = vector1;
      stringArray0[0] = "com.lts.io.ArchiveScanner";
      vector1.add((Object) vector1);
      Vector<String> vector2 = new Vector<String>();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      archiveScanner0.filesNotIncluded = vector2;
      stringArray0[1] = "com.lts.io.ArchiveScanner";
      stringArray0[2] = "com.lts.io.ArchiveScanner";
      archiveScanner0.excludes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      vector2.add("com.lts.io.ArchiveScanner");
      vector1.ensureCapacity((-1816));
      stringArray0[3] = "com.lts.io.ArchiveScanner";
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "com.lts.io.ArchiveScanner");
      Predicate<Object> predicate1 = predicate0.negate();
      vector1.removeIf(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate1.or(predicate3);
      predicate2.negate();
      Integer integer0 = new Integer(3822);
      predicate0.or(predicate2);
      Predicate.isEqual((Object) integer0);
      vector0.add("com.lts.io.ArchiveScanner");
      vector0.add("e:[1.jar0e:[1.jar.jar");
      System.setCurrentTimeMillis(2);
      archiveScanner0.setIncludes(stringArray0);
      vector2.removeIf(predicate1);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "com.lts.io.ArchiveScanner");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      Vector<Object> vector2 = new Vector<Object>();
      Vector<Object> vector3 = new Vector<Object>();
      Vector<Object> vector4 = new Vector<Object>();
      Vector<Object> vector5 = new Vector<Object>();
      vector2.add((Object) null);
      vector5.listIterator();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) vector4;
      objectArray0[1] = (Object) vector4;
      vector4.toArray(objectArray0);
      Object object0 = new Object();
      vector5.add(object0);
      Vector<Object> vector6 = new Vector<Object>();
      Object[] objectArray1 = new Object[4];
      Object object1 = new Object();
      objectArray1[0] = object1;
      objectArray1[3] = (Object) vector2;
      objectArray1[2] = (Object) null;
      objectArray1[3] = (Object) null;
      vector6.toArray(objectArray1);
      Object object2 = new Object();
      vector6.add(object2);
      vector4.add((Object) vector6);
      vector4.add((Object) vector1);
      Object object3 = new Object();
      vector2.add((Object) null);
      Vector<Object> vector7 = new Vector<Object>();
      vector7.add((Object) vector3);
      vector7.add(object0);
      Vector<Object> vector8 = new Vector<Object>();
      Object object4 = new Object();
      Object object5 = new Object();
      vector8.add(object5);
      ImprovedFile improvedFile0 = new ImprovedFile("^_nXq*ISnSusDuD&)&YG", "^_nXq*ISnSusDuD&)&YG");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "^Y[";
      stringArray0[1] = "^Y[";
      stringArray0[2] = "^Y[";
      stringArray0[3] = "+#09fdO1PX";
      stringArray0[4] = "^Y[";
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      stringArray0[5] = "^Y[";
      archiveScanner0.setIncludes(stringArray0);
      vector0.addElement(archiveScanner0.dirsNotIncluded);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale0 = Locale.CANADA;
      linkedList0.clear();
      locale0.getUnicodeLocaleKeys();
      Locale locale1 = (Locale)locale0.clone();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Locale locale2 = Locale.SIMPLIFIED_CHINESE;
      Locale.getISOCountries();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale3 = Locale.TRADITIONAL_CHINESE;
      Locale.setDefault(locale_Category0, locale3);
      locale2.hasExtensions();
      Vector<Locale> vector1 = new Vector<Locale>();
      locale1.hasExtensions();
      Vector<Locale> vector2 = new Vector<Locale>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) vector2, locale_FilteringMode1);
      locale1.getDisplayCountry(locale2);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      DirectoryScanner.matchPatternStart("^Y[", "^Y[");
      archiveScanner0.processDirectory((File) null, "Kear", true);
      assertEquals(0, ArchiveScanner.FILE);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8548720307766426
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("e:[", "");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/e:[0");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "e:[1");
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0, "");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".jar");
      mockFile0.getCanonicalFile();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImprovedFile.createTempDirectory(improvedFile0);
      ImprovedFile.createTempImprovedFile("w-^(`}gC~y%qpl%3z", "e:[", mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "^bkI>szMLE+JJ";
      stringArray0[4] = stringArray0[1];
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale0 = Locale.forLanguageTag("^bkI>szMLE+JJ");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.pollFirst();
      linkedList1.spliterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.setDefault(locale0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList2, locale_FilteringMode0);
      Locale locale1 = Locale.ITALY;
      Locale locale2 = Locale.forLanguageTag("^bkI>szMLE+JJ");
      Locale.getISOLanguages();
      locale2.getDisplayLanguage(locale0);
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      UnaryOperator<Locale> unaryOperator0 = UnaryOperator.identity();
      linkedList2.add("^bkI>szMLE+JJ");
      linkedList3.replaceAll(unaryOperator0);
      Locale.lookupTag(linkedList1, list0);
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList3, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList3, (Locale.FilteringMode) null);
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list1);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode1);
      Locale.setDefault(locale_Category0, locale2);
      ImprovedFile improvedFile0 = new ImprovedFile("");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.scandir(improvedFile0, "", true);
      assertEquals("", improvedFile0.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      File file0 = MockFile.createTempFile("e:[", "");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "e:[1");
      ImprovedFile improvedFile0 = new ImprovedFile(file0, "");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".jar");
      file0.getCanonicalFile();
      ImprovedFile.createTempDirectory(improvedFile0);
      ImprovedFile.createTempImprovedFile("w-^(`}gC~y%qpl%3z", "e:[", file0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("e:[", "");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      improvedFile0.mkdir();
      archiveScanner0.toFileType(improvedFile0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("bgI~5(wLZVoU\"b");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/tmp/cZIP0$1z~bK4(C:z|vz\\;n");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[20];
      byteArray0[6] = (byte) (-3);
      byteArray0[6] = (byte) (-3);
      byteArray0[0] = (byte) (-3);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-61);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder(evoSuiteFile2);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      EvoSuiteFile evoSuiteFile3 = new EvoSuiteFile("Y9/%E`q0e:[0enh6Dn?8{i7djar");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile3);
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "Zv^sXJK*$6rP<.j+");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ImprovedFile improvedFile0 = new ImprovedFile("Error initializing tree");
      improvedFile0.createTempDir("%E`q", "e:[0enh6Dn?8{i7djar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "%E`q", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "e:[";
      String string1 = "";
      ImprovedFile improvedFile0 = new ImprovedFile("e:[", "");
      ImprovedFile improvedFile1 = ImprovedFile.createTempImprovedFile("e:[", "", improvedFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      archiveScanner0.toFileType(improvedFile1);
      String string2 = "bgI~5(w\\LZVoU\"b";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(string2);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Vector<Object> vector1 = new Vector<Object>();
      Vector<Object> vector2 = new Vector<Object>();
      Vector<Object> vector3 = new Vector<Object>();
      Vector<Object> vector4 = new Vector<Object>();
      Vector<Object> vector5 = new Vector<Object>();
      vector5.add((Object) null);
      vector0.listIterator();
      Vector<Object> vector6 = new Vector<Object>();
      Object[] objectArray0 = new Object[10];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[3] = (Object) vector2;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) consumer0;
      vector6.toArray(objectArray0);
      Object object1 = new Object();
      vector6.add(object1);
      vector4.add((Object) vector6);
      vector4.add((Object) vector1);
      Object object2 = new Object();
      vector2.add((Object) null);
      Vector<Object> vector7 = new Vector<Object>();
      vector7.add((Object) vector3);
      Vector<Object> vector8 = new Vector<Object>();
      Object object3 = new Object();
      Object object4 = new Object();
      vector8.add(object4);
      ImprovedFile improvedFile0 = new ImprovedFile("**/CVS/**", "**/CVS/**");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("e:[", "");
      ImprovedFile improvedFile1 = ImprovedFile.createTempImprovedFile("e:[", "", improvedFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      archiveScanner0.toFileType(improvedFile1);
      String string0 = "bgI~5(w\\LZVoU\"b";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(string0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.filesNotIncluded = null;
      String[] stringArray0 = new String[4];
      Vector<String> vector0 = new Vector<String>(2, 1);
      archiveScanner0.dirsIncluded = vector0;
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.filesIncluded = vector1;
      stringArray0[0] = "{N%Fo";
      vector1.add((Object) vector1);
      Vector<String> vector2 = new Vector<String>();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      archiveScanner0.filesNotIncluded = vector2;
      stringArray0[1] = "{N%Fo";
      stringArray0[2] = "{N%Fo";
      archiveScanner0.excludes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      vector2.add("{N%Fo");
      vector1.ensureCapacity((-1816));
      stringArray0[3] = "{N%Fo";
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "{N%Fo");
      Predicate<Object> predicate1 = predicate0.negate();
      vector1.removeIf(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate2.negate();
      Integer integer0 = new Integer(3822);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate.isEqual((Object) integer0);
      predicate0.and(predicate3);
      vector0.add("{N%Fo");
      vector0.add("e:[1.jar0e:[1.jar.jar");
      System.setCurrentTimeMillis(2);
      archiveScanner0.setIncludes(stringArray0);
      vector2.removeIf(predicate1);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "{N%Fo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.filesNotIncluded = null;
      String[] stringArray0 = new String[4];
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsIncluded = vector0;
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.filesIncluded = vector1;
      stringArray0[0] = "com.lts.io.ArchiveScanner";
      vector1.add((Object) vector1);
      Vector<String> vector2 = new Vector<String>();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      archiveScanner0.filesNotIncluded = vector2;
      stringArray0[1] = "com.lts.io.ArchiveScanner";
      stringArray0[2] = "com.lts.io.ArchiveScanner";
      archiveScanner0.excludes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      vector1.ensureCapacity(1);
      boolean boolean0 = archiveScanner0.haveSlowResults;
      vector1.ensureCapacity((-1816));
      stringArray0[3] = "com.lts.io.ArchiveScanner";
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "com.lts.io.ArchiveScanner");
      Predicate<Object> predicate1 = predicate0.negate();
      vector1.removeIf(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate2.negate();
      Integer integer0 = new Integer(3822);
      predicate0.or(predicate2);
      Predicate.isEqual((Object) integer0);
      vector0.add("com.lts.io.ArchiveScanner");
      vector0.add("e:[1.jar0e:[1.jar.jar");
      System.setCurrentTimeMillis(2);
      archiveScanner0.setIncludes(stringArray0);
      vector2.removeIf(predicate1);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "com.lts.io.ArchiveScanner");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("l.LKear");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      try { 
        archiveScanner0.scandir(improvedFile0, "qS:LH5}xcL/a\"P", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/l.LKear
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile("{e:[");
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0, "");
      mockFile0.mkdir();
      ImprovedFile.createTempDirectory(improvedFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.scandir(improvedFile0, "w-^(`}gC~y%qpl%3z", false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 3007);
      Vector<Object> vector0 = new Vector<Object>();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 789);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "^bkI>szMLE+JJ";
      stringArray0[0] = "^bkI>szMLE+JJ";
      stringArray0[4] = stringArray0[1];
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale0 = Locale.forLanguageTag("^bkI>szMLE+JJ");
      linkedList0.clear();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.pollFirst();
      linkedList1.spliterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.setDefault(locale0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      locale0.clone();
      Locale locale1 = Locale.forLanguageTag("^bkI>szMLE+JJ");
      Locale.getISOLanguages();
      locale1.getDisplayLanguage(locale0);
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList3, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list1);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale1);
      ImprovedFile improvedFile0 = new ImprovedFile("%L9MUc/w[Fn/{@#");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scandir(improvedFile0, "", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/%L9MUc/w[Fn/{@#
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".Lcear");
      InputStream inputStream0 = null;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.isArchive(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      BufferedInputStream[] bufferedInputStreamArray0 = new BufferedInputStream[8];
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = 8;
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(byteArrayInputStream0, int0);
      BufferedInputStream bufferedInputStream3 = new BufferedInputStream(bufferedInputStream2, byte0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int1 = (-829);
      BufferedInputStream bufferedInputStream4 = null;
      try {
        bufferedInputStream4 = new BufferedInputStream(bufferedInputStream3, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      Vector<Object> vector2 = new Vector<Object>();
      Vector<Object> vector3 = new Vector<Object>();
      Vector<Object> vector4 = new Vector<Object>();
      vector1.add((Object) null);
      vector4.listIterator();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) vector0;
      objectArray0[1] = (Object) vector4;
      vector3.toArray(objectArray0);
      Object object0 = new Object();
      vector4.add(object0);
      Vector<Object> vector5 = new Vector<Object>();
      Object[] objectArray1 = new Object[4];
      Object object1 = new Object();
      objectArray1[0] = (Object) vector3;
      objectArray1[3] = (Object) vector0;
      objectArray1[3] = (Object) null;
      objectArray1[3] = (Object) null;
      vector5.toArray(objectArray1);
      Object object2 = new Object();
      vector5.add(object2);
      vector3.add((Object) vector5);
      vector3.add((Object) vector1);
      Object object3 = new Object();
      vector1.add((Object) null);
      Vector<Object> vector6 = new Vector<Object>();
      vector6.add((Object) vector0);
      vector6.add(object0);
      Vector<Object> vector7 = new Vector<Object>();
      Object object4 = new Object();
      Object object5 = new Object();
      vector7.add(object5);
      ImprovedFile improvedFile0 = new ImprovedFile("^u_nXq*ISnSusDuD&)&Y", "^u_nXq*ISnSusDuD&)&Y");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      vector0.sort((Comparator<? super Object>) null);
      Vector<Object> vector1 = new Vector<Object>();
      Vector<Object> vector2 = new Vector<Object>();
      vector2.sort((Comparator<? super Object>) null);
      Vector<Object> vector3 = new Vector<Object>();
      Vector<Object> vector4 = new Vector<Object>();
      Vector<Object> vector5 = new Vector<Object>();
      vector1.add((Object) vector2);
      vector1.listIterator();
      Object object0 = new Object();
      vector5.add(object0);
      Vector<Object> vector6 = new Vector<Object>();
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) vector2;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) consumer0;
      vector6.toArray(objectArray0);
      Object object2 = new Object();
      vector6.add(object2);
      vector4.add((Object) vector6);
      vector4.add((Object) vector1);
      Object object3 = new Object();
      vector2.add((Object) null);
      Vector<Object> vector7 = new Vector<Object>();
      vector7.add((Object) vector3);
      vector7.add(object0);
      Vector<Object> vector8 = new Vector<Object>();
      Object object4 = new Object();
      Object object5 = new Object();
      vector8.add(object5);
      ImprovedFile improvedFile0 = new ImprovedFile("%u<*]uB .", "%u<*]uB .");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      Vector<Object> vector2 = new Vector<Object>();
      Vector<Object> vector3 = new Vector<Object>();
      Vector<Object> vector4 = new Vector<Object>();
      Vector<Object> vector5 = new Vector<Object>();
      vector2.add((Object) null);
      vector3.listIterator();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) vector4;
      objectArray0[1] = (Object) vector4;
      vector4.toArray(objectArray0);
      Object object0 = new Object();
      vector5.add(object0);
      Vector<Object> vector6 = new Vector<Object>();
      Object[] objectArray1 = new Object[4];
      Object object1 = new Object();
      objectArray1[0] = object1;
      objectArray1[3] = (Object) vector2;
      objectArray1[2] = (Object) null;
      objectArray1[3] = (Object) null;
      vector6.toArray(objectArray1);
      Object object2 = new Object();
      vector6.add(object2);
      vector4.add((Object) vector6);
      vector4.add((Object) vector1);
      Object object3 = new Object();
      vector2.add((Object) null);
      vector2.add((Object) vector3);
      vector3.add(object0);
      Vector<Object> vector7 = new Vector<Object>();
      Object object4 = new Object();
      Object object5 = new Object();
      vector7.add(object5);
      ImprovedFile improvedFile0 = new ImprovedFile("_nXq*ISnSusDuD&)&YG", "_nXq*ISnSusDuD&)&YG");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      Vector<Object> vector2 = new Vector<Object>();
      Vector<Object> vector3 = new Vector<Object>();
      Vector<Object> vector4 = new Vector<Object>();
      Vector<Object> vector5 = new Vector<Object>();
      vector2.add((Object) null);
      vector5.listIterator();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) vector0;
      objectArray0[1] = (Object) vector4;
      vector4.toArray(objectArray0);
      Object object0 = new Object();
      vector5.add(object0);
      Vector<Object> vector6 = new Vector<Object>();
      Object[] objectArray1 = new Object[4];
      Object object1 = new Object();
      objectArray1[0] = (Object) vector4;
      objectArray1[3] = (Object) vector2;
      objectArray1[3] = (Object) null;
      objectArray1[3] = (Object) null;
      vector6.toArray(objectArray1);
      Object object2 = new Object();
      vector6.add(object2);
      vector4.add((Object) vector6);
      vector4.add((Object) vector1);
      Object object3 = new Object();
      vector2.add((Object) null);
      Vector<Object> vector7 = new Vector<Object>();
      vector7.add((Object) vector2);
      vector7.add(object0);
      Vector<Object> vector8 = new Vector<Object>();
      Object object4 = new Object();
      Object object5 = new Object();
      vector8.add(object5);
      ImprovedFile improvedFile0 = new ImprovedFile("^u_nXq*ISnSusDuD&)&Y", "^u_nXq*ISnSusDuD&)&Y");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      Vector<Object> vector2 = new Vector<Object>();
      Vector<Object> vector3 = new Vector<Object>();
      Vector<Object> vector4 = new Vector<Object>();
      Vector<Object> vector5 = new Vector<Object>();
      vector2.add((Object) null);
      vector3.listIterator();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) vector4;
      objectArray0[1] = (Object) vector4;
      vector4.toArray(objectArray0);
      Object object0 = new Object();
      vector5.add(object0);
      Vector<Object> vector6 = new Vector<Object>();
      Object[] objectArray1 = new Object[5];
      Object object1 = new Object();
      objectArray1[0] = object1;
      objectArray1[3] = (Object) vector2;
      objectArray1[2] = (Object) null;
      objectArray1[3] = (Object) null;
      vector6.toArray(objectArray1);
      Object object2 = new Object();
      vector6.add(object2);
      vector4.add((Object) vector6);
      vector4.add((Object) vector1);
      Object object3 = new Object();
      vector2.add((Object) null);
      Vector<Object> vector7 = new Vector<Object>();
      vector7.add((Object) vector3);
      vector7.add(object0);
      Vector<Object> vector8 = new Vector<Object>();
      Object object4 = new Object();
      Object object5 = new Object();
      vector8.add(object5);
      ImprovedFile improvedFile0 = new ImprovedFile("_nXq*ISnSusDuD&)&YG", "_nXq*ISnSusDuD&)&YG");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "^bkIGszMLE+JJ";
      stringArray0[4] = stringArray0[1];
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale0 = Locale.forLanguageTag("^bkIGszMLE+JJ");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      String string0 = linkedList2.pollFirst();
      linkedList1.spliterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.setDefault(locale0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList2, locale_FilteringMode0);
      Locale locale1 = Locale.CANADA_FRENCH;
      linkedList2.add(string0);
      Locale locale2 = Locale.forLanguageTag("^bkIGszMLE+JJ");
      Locale.getISOLanguages();
      locale2.getDisplayLanguage(locale0);
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      UnaryOperator<Locale> unaryOperator0 = UnaryOperator.identity();
      linkedList2.add("^bkIGszMLE+JJ");
      linkedList3.replaceAll(unaryOperator0);
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) null, locale_FilteringMode0);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList3, (Locale.FilteringMode) null);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      linkedList0.removeFirstOccurrence(locale1);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.setDefault(locale_Category0, locale2);
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scanArchive(improvedFile0, "w-^(%}gC~y%qpl%3z0e:[");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "^bI>szMLE+JJ";
      stringArray0[4] = "^bI>szMLE+JJ";
      stringArray0[2] = stringArray0[1];
      stringArray0[4] = "^bI>szMLE+JJ";
      stringArray0[5] = stringArray0[1];
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale0 = Locale.ITALIAN;
      linkedList0.clear();
      Locale.getISOCountries();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      locale0.getUnicodeLocaleKeys();
      Locale locale1 = (Locale)locale0.clone();
      Locale locale2 = Locale.forLanguageTag("+#09fdO1PX");
      Locale.getISOLanguages();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale3 = Locale.GERMANY;
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) linkedList3, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale.setDefault(locale_Category0, locale3);
      locale0.getUnicodeLocaleAttributes();
      locale2.hasExtensions();
      Vector<Locale> vector0 = new Vector<Locale>();
      locale1.hasExtensions();
      Vector<Locale> vector1 = new Vector<Locale>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) vector1, locale_FilteringMode1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      vector1.add(locale2);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, "^bI>szMLE+JJ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".Lcear");
      InputStream inputStream0 = null;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.isArchive(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      BufferedInputStream[] bufferedInputStreamArray0 = new BufferedInputStream[8];
      byte[] byteArray0 = new byte[19];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = 8;
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(byteArrayInputStream0, int0);
      BufferedInputStream bufferedInputStream3 = new BufferedInputStream(bufferedInputStream2, byte0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int1 = (-829);
      BufferedInputStream bufferedInputStream4 = null;
      try {
        bufferedInputStream4 = new BufferedInputStream(bufferedInputStream3, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }
}
