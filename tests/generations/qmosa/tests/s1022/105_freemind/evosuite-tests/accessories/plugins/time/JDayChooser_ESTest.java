/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 04:15:45 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.main.FreeMindApplet;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.filemode.FileMode;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.DefaultFocusTraversalPolicy;
import java.awt.Dialog;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.AttributedCharacterIterator;
import java.time.LocalTime;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import javax.swing.AbstractButton;
import javax.swing.Action;
import javax.swing.DebugGraphics;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTextPane;
import javax.swing.JTree;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.GapContent;
import javax.swing.text.JTextComponent;
import javax.swing.text.LabelView;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellEditor;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreeCellEditor;
import org.apache.batik.apps.svgbrowser.Application;
import org.apache.batik.apps.svgbrowser.JSVGViewerFrame;
import org.apache.batik.ext.awt.color.ICCColorSpaceExt;
import org.apache.batik.ext.awt.color.NamedProfileCache;
import org.apache.batik.gvt.renderer.StrokingTextPainter;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.xerces.util.SymbolTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.swing.ImageIconUIResource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(1095);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.169980761415708
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.green;
      jDayChooser0.setSundayForeground(color0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2555801440565983
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      HierarchyListener hierarchyListener2 = AWTEventMulticaster.add((HierarchyListener) null, hierarchyListener1);
      AWTEventMulticaster.remove((HierarchyListener) null, hierarchyListener2);
      StyleContext styleContext0 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle(styleContext_NamedStyle0);
      styleContext_NamedStyle1.copyAttributes();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(2769);
      jDayChooser0.init();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      Timestamp timestamp0 = new Timestamp(1L);
      Date date0 = new Date(1L);
      jDayChooser0.setSelectableDateRange(date0, timestamp0);
      boolean boolean1 = jDayChooser0.isDayBordersVisible();
      assertFalse(boolean1 == boolean0);
      
      Boolean boolean2 = new Boolean(true);
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3533850511953793
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getDay();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMonth(14);
      NamedProfileCache namedProfileCache0 = new NamedProfileCache();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser1.addInputMethodListener((InputMethodListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      StyleContext styleContext0 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext styleContext1 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext1.new NamedStyle("day", styleContext_NamedStyle0);
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext0.new NamedStyle(styleContext_NamedStyle1);
      styleContext_NamedStyle1.copyAttributes();
      jDayChooser0.setMaxDayCharacters(14);
      jDayChooser0.init();
      jDayChooser0.isDecorationBordersVisible();
      java.util.Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      jDayChooser1.initDecorations();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2404401212809124
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.drawWeeks();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser0.printAll(debugGraphics0);
      int int0 = 12;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 12, 12, (-134), 12, 'N');
      InputEvent.getModifiersExText(709);
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame("day");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.273437045004896
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(false);
      jDayChooser0.getVerifyInputWhenFocusTarget();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1236, (-330L), 13, 1236, 'c');
      jDayChooser0.keyPressed(keyEvent0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<AWTKeyStroke> treeSet0 = new TreeSet<AWTKeyStroke>(comparator0);
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy1 = new DefaultFocusTraversalPolicy();
      defaultFocusTraversalPolicy0.setImplicitDownCycleTraversal(true);
      jDayChooser0.setFocusTraversalPolicy(defaultFocusTraversalPolicy1);
      LinkedHashSet<AWTKeyStroke> linkedHashSet0 = new LinkedHashSet<AWTKeyStroke>();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getColorModel();
      HashMap<AttributedCharacterIterator.Attribute, AWTKeyStroke> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, AWTKeyStroke>();
      KeyStroke.getKeyStrokeForEvent(keyEvent0);
      HashMap<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute> hashMap1 = null;
      try {
        hashMap1 = new HashMap<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute>((-1394));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1394
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3052944427430493
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMonth(1);
      NamedProfileCache namedProfileCache0 = new NamedProfileCache();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster0, (HierarchyListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyListener) aWTEventMulticaster1, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((HierarchyListener) aWTEventMulticaster2, (HierarchyListener) null);
      StyleContext styleContext0 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle(styleContext_NamedStyle0);
      styleContext_NamedStyle1.copyAttributes();
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.init();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.initDecorations();
      jDayChooser0.setMaxDayCharacters(1);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2826106418013303
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getDay();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser1, 14, false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser1.addInputMethodListener((InputMethodListener) null);
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.remove(hierarchyListener0, (HierarchyListener) null);
      AWTEventMulticaster.add(hierarchyListener1, hierarchyListener1);
      HierarchyListener hierarchyListener2 = AWTEventMulticaster.add((HierarchyListener) null, hierarchyListener1);
      focusEvent0.paramString();
      AWTEventMulticaster.remove(hierarchyListener1, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener(hierarchyListener2);
      jDayChooser1.focusGained(focusEvent0);
      int int0 = (-2151);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.setDay((-2151));
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.MODELESS;
      jDayChooser1.isDecorationBordersVisible();
      JDayChooser jDayChooser3 = new JDayChooser(true);
      jDayChooser2.isDecorationBordersVisible();
      Timestamp timestamp0 = new Timestamp(313L);
      jDayChooser0.setMinSelectableDate(timestamp0);
      MockDate mockDate0 = new MockDate(0L);
      jDayChooser2.setSelectableDateRange(mockDate0, mockDate0);
      int int1 = 313;
      long long0 = (-4364L);
      int int2 = (-3161);
      char char0 = '.';
      MenuElement[] menuElementArray0 = new MenuElement[9];
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser3.new DecoratorButton();
      jDayChooser_DecoratorButton0.getDisabledSelectedIcon();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem((Icon) null);
      menuElementArray0[0] = (MenuElement) jCheckBoxMenuItem0;
      FileMode fileMode0 = new FileMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.268923501670829
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDay();
      jDayChooser0.getMaxDayCharacters();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1767), false);
      jDayChooser0.removeNotify();
      jDayChooser0.setMaxDayCharacters(2);
      jDayChooser0.init();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setSelectableDateRange((java.util.Date) null, (java.util.Date) null);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2054857020763965
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDay();
      jDayChooser0.getMaxDayCharacters();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1767), false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      String string0 = AbstractButton.DISABLED_SELECTED_ICON_CHANGED_PROPERTY;
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.drawWeeks();
      Font font0 = Font.decode("disabledSelectedIcon");
      jDayChooser0.setFont(font0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.18789884704427
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getVerifyInputWhenFocusTarget();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.isDoubleBuffered();
      jDayChooser1.maxSelectableDate = null;
      jDayChooser0.initDecorations();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser0.getWeekdayForeground();
      Locale locale0 = Locale.GERMAN;
      HashSet<String> hashSet0 = new HashSet<String>();
      Locale.setDefault(locale0);
      // Undeclared exception!
      try { 
        jDayChooser1.setLocale(locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.387067225300517
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMonth(1);
      NamedProfileCache namedProfileCache0 = new NamedProfileCache();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster0, (HierarchyListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyListener) aWTEventMulticaster1, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((HierarchyListener) aWTEventMulticaster1, (HierarchyListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((HierarchyListener) aWTEventMulticaster2, (HierarchyListener) null);
      StyleContext styleContext0 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle(styleContext_NamedStyle0);
      styleContext_NamedStyle1.copyAttributes();
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.init();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.isDayBordersVisible();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      ImageIconUIResource imageIconUIResource0 = (ImageIconUIResource)defaultTreeCellRenderer0.getClosedIcon();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("dK=XP", imageIconUIResource0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuElement[] menuElementArray0 = new MenuElement[1];
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jRadioButtonMenuItem0, 1, 1, 100, 1, '', menuElementArray0, menuSelectionManager1);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setDay((-2199));
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1016510389035683
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      JButton[] jButtonArray0 = new JButton[5];
      JButton jButton0 = new JButton();
      jButtonArray0[0] = jButton0;
      JButton jButton1 = new JButton();
      jButtonArray0[1] = jButton1;
      JButton jButton2 = new JButton();
      jButtonArray0[2] = jButton2;
      JButton jButton3 = jDayChooser0.selectedDay;
      jButtonArray0[3] = null;
      JButton jButton4 = jDayChooser0.selectedDay;
      jButtonArray0[4] = null;
      jDayChooser0.weeks = jButtonArray0;
      HashMap<AttributedCharacterIterator.Attribute, AWTKeyStroke> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, AWTKeyStroke>();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)StrokingTextPainter.PAINT_INFO;
      KeyStroke.getKeyStroke(')');
      KeyStroke.getKeyStroke("day");
      hashMap0.replace((AttributedCharacterIterator.Attribute) gVTAttributedCharacterIterator_TextAttribute0, (AWTKeyStroke) null, (AWTKeyStroke) null);
      Font font0 = new Font(hashMap0);
      jButton2.getHierarchyBoundsListeners();
      // Undeclared exception!
      try { 
        jDayChooser0.setFont(font0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2560058288242555
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(5283);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMonth(1);
      NamedProfileCache namedProfileCache0 = new NamedProfileCache();
      namedProfileCache0.request("1");
      namedProfileCache0.put("lPzG+SNsF}JLnTs)eA", (ICCColorSpaceExt) null);
      namedProfileCache0.isDone("m D.V`(flO1:Im0=");
      jDayChooser0.removeNotify();
      namedProfileCache0.put("lPzG+SNsF}JLnTs)eA", (ICCColorSpaceExt) null);
      StyleContext styleContext0 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle("1YOo}^qD", styleContext_NamedStyle0);
      styleContext_NamedStyle1.copyAttributes();
      GapContent gapContent0 = new GapContent(150);
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext1);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) (-21));
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, false);
      jDayChooser0.setWeekOfYearVisible(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 5283, 150, (-21), 4, (-21));
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setDecorationBackgroundVisible(true);
      java.util.Date date0 = jDayChooser0.defaultMaxSelectableDate;
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2255514346759724
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDay();
      jDayChooser0.getMaxDayCharacters();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1767), false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      String string0 = AbstractButton.DISABLED_SELECTED_ICON_CHANGED_PROPERTY;
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.setDay(0);
      ActionEvent actionEvent0 = new ActionEvent(focusEvent0, 0, "j");
      actionEvent0.paramString();
      jDayChooser0.setMaxDayCharacters(518);
      jDayChooser0.init();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.21628715325465
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addNotify();
      jDayChooser0.setDay(329);
      jDayChooser0.getMaxSelectableDate();
      int int0 = 1550;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1550);
      focusEvent0.setSource("14");
      jDayChooser0.focusLost(focusEvent0);
      int int1 = (-4248);
      jDayChooser0.setMaxDayCharacters((-4248));
      long long0 = 393L;
      int int2 = 7;
      char char0 = 'e';
      MenuElement[] menuElementArray0 = new MenuElement[9];
      JMenu jMenu0 = new JMenu((Action) null);
      menuElementArray0[0] = (MenuElement) jMenu0;
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("9Y)h", false);
      menuElementArray0[1] = (MenuElement) jCheckBoxMenuItem0;
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Action) null);
      menuElementArray0[2] = (MenuElement) jRadioButtonMenuItem0;
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      JMenu jMenu1 = structuredMenuHolder0.addMenu(jMenu0, "HD[u)JN+I|-");
      menuElementArray0[3] = (MenuElement) jMenu1;
      Application application0 = mock(Application.class, new ViolatedAssumptionAnswer());
      JSVGViewerFrame jSVGViewerFrame0 = null;
      try {
        jSVGViewerFrame0 = new JSVGViewerFrame(application0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1700419077878936
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "'%vq]d@5W[x}?1!@";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'%vq]d@5W[x}?1!@");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">HoC=T^B");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDoubleBuffered();
      jDayChooser0.initDecorations();
      jDayChooser0.getWeekdayForeground();
      Locale locale0 = Locale.GERMAN;
      locale0.getUnicodeLocaleAttributes();
      Locale.setDefault(locale0);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getSundayForeground();
      JButton[] jButtonArray0 = new JButton[0];
      jDayChooser0.weeks = jButtonArray0;
      SystemColor systemColor0 = SystemColor.desktop;
      // Undeclared exception!
      try { 
        jDayChooser0.setForeground(systemColor0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.058591591902833
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setDecorationBackgroundVisible(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.200125946979306
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDay();
      jDayChooser0.getMaxDayCharacters();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1768), true);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      focusEvent0.paramString();
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setDay(0);
      ActionEvent actionEvent0 = new ActionEvent(focusEvent0, 0, "j");
      jDayChooser0.updateUI();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.getMinSelectableDate();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDoubleBuffered();
      char char0 = '>';
      int int0 = 14;
      int int1 = (-379);
      int int2 = 3271;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 14, 14, (-379), 3271, '>');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2055099842350803
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      long long0 = 2448L;
      NamedProfileCache namedProfileCache0 = NamedProfileCache.getDefaultCache();
      String string0 = "C";
      ICCColorSpaceExt iCCColorSpaceExt0 = namedProfileCache0.request("C");
      float[] floatArray0 = new float[7];
      jDayChooser0.setMonth(iCCColorSpaceExt0.RELATIVE_COLORIMETRIC);
      namedProfileCache0.put(string0, iCCColorSpaceExt0);
      float float0 = 0.0F;
      String string1 = "+Q|G";
      namedProfileCache0.isDone(string1);
      floatArray0[0] = float0;
      floatArray0[1] = (float) iCCColorSpaceExt0.AUTO;
      jDayChooser0.removeNotify();
      EvoSuiteFile evoSuiteFile0 = null;
      String string2 = "3,rmAt<,IsN|R:GrO";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, string2);
      floatArray0[2] = (float) long0;
      floatArray0[3] = (float) iCCColorSpaceExt0.SATURATION;
      floatArray0[4] = (float) iCCColorSpaceExt0.AUTO;
      String string3 = "__z~Sh =c#|";
      namedProfileCache0.put(string3, iCCColorSpaceExt0);
      floatArray0[6] = (float) iCCColorSpaceExt0.PERCEPTUAL;
      String string4 = null;
      StyleContext styleContext0 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle(string4, styleContext_NamedStyle0);
      styleContext_NamedStyle0.copyAttributes();
      int int0 = 2540;
      GapContent gapContent0 = new GapContent(int0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      Font font0 = defaultStyledDocument0.getFont(styleContext_NamedStyle1);
      jDayChooser0.setFont(font0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(boolean0);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      KeyEvent keyEvent0 = null;
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.240247623800649
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(5283);
      MockDate mockDate0 = new MockDate();
      String string0 = "lPzG+SNsF}JLnTs)eA";
      jDayChooser0.setMonth(1);
      NamedProfileCache namedProfileCache0 = new NamedProfileCache();
      namedProfileCache0.request("1");
      namedProfileCache0.put("lPzG+SNsF}JLnTs)eA", (ICCColorSpaceExt) null);
      namedProfileCache0.isDone("m D.V`(flO1:Im0=");
      jDayChooser0.removeNotify();
      namedProfileCache0.put("lPzG+SNsF}JLnTs)eA", (ICCColorSpaceExt) null);
      StyleContext styleContext0 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      Enumeration<AWTKeyStroke> enumeration0 = (Enumeration<AWTKeyStroke>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      styleContext_NamedStyle0.removeAttributes(enumeration0);
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle("Metal", styleContext_NamedStyle0);
      styleContext_NamedStyle1.getResolveParent();
      styleContext_NamedStyle1.copyAttributes();
      GapContent gapContent0 = new GapContent(3);
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext1);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) (-21));
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, true);
      jDayChooser0.setWeekOfYearVisible(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.255982845866119
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(5283);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMonth(1);
      NamedProfileCache namedProfileCache0 = new NamedProfileCache();
      namedProfileCache0.request("1");
      namedProfileCache0.put("lPzG+SNsF}JLnTs)eA", (ICCColorSpaceExt) null);
      namedProfileCache0.isDone("m D.V`(flO1:Im0=");
      namedProfileCache0.put("lPzG+SNsF}JLnTs)eA", (ICCColorSpaceExt) null);
      StyleContext styleContext0 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      Enumeration<AWTKeyStroke> enumeration0 = (Enumeration<AWTKeyStroke>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      styleContext_NamedStyle0.removeAttributes(enumeration0);
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle("Metal", styleContext_NamedStyle0);
      styleContext_NamedStyle1.setName("Metal");
      styleContext_NamedStyle1.getResolveParent();
      styleContext_NamedStyle1.copyAttributes();
      GapContent gapContent0 = new GapContent(150);
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext1);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) (-21));
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, false);
      jDayChooser0.setWeekOfYearVisible(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.101664358916888
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      JButton[] jButtonArray0 = new JButton[5];
      JButton jButton0 = new JButton();
      jButtonArray0[0] = jButton0;
      JButton jButton1 = new JButton();
      jButtonArray0[1] = jButton1;
      JButton jButton2 = new JButton();
      jButtonArray0[2] = jButton2;
      JButton jButton3 = jDayChooser0.selectedDay;
      jButtonArray0[3] = null;
      JButton jButton4 = jDayChooser0.selectedDay;
      jButtonArray0[4] = null;
      jDayChooser0.weeks = jButtonArray0;
      // Undeclared exception!
      try { 
        jDayChooser0.setDecorationBackgroundVisible(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.133845519447487
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      long long0 = 2448L;
      NamedProfileCache namedProfileCache0 = NamedProfileCache.getDefaultCache();
      String string0 = "C";
      ICCColorSpaceExt iCCColorSpaceExt0 = namedProfileCache0.request("C");
      float[] floatArray0 = new float[7];
      jDayChooser0.setMonth(iCCColorSpaceExt0.RELATIVE_COLORIMETRIC);
      namedProfileCache0.put(string0, iCCColorSpaceExt0);
      float float0 = 0.0F;
      String string1 = "+Q|G";
      namedProfileCache0.isDone(string1);
      floatArray0[0] = float0;
      floatArray0[1] = (float) iCCColorSpaceExt0.AUTO;
      jDayChooser0.removeNotify();
      floatArray0[2] = (float) long0;
      floatArray0[3] = (float) iCCColorSpaceExt0.SATURATION;
      floatArray0[4] = (float) iCCColorSpaceExt0.AUTO;
      String string2 = "__z~Sh =c#|";
      namedProfileCache0.put(string2, iCCColorSpaceExt0);
      floatArray0[6] = (float) iCCColorSpaceExt0.PERCEPTUAL;
      int int0 = 6;
      LocalTime localTime0 = MockLocalTime.of(int0, int0);
      Time.valueOf(localTime0);
      jDayChooser0.updateUI();
      int int1 = 90;
      int int2 = 0;
      char char0 = '1';
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, int1, iCCColorSpaceExt0.ABSOLUTE_COLORIMETRIC, int2, iCCColorSpaceExt0.AUTO, char0);
      jDayChooser0.keyReleased(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2033341312403727
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDoubleBuffered();
      jDayChooser0.initDecorations();
      Color color0 = jDayChooser0.getWeekdayForeground();
      Locale locale0 = Locale.GERMAN;
      HashSet<String> hashSet0 = new HashSet<String>();
      Locale.setDefault(locale0);
      String string0 = AbstractButton.BORDER_PAINTED_CHANGED_PROPERTY;
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser1.addHierarchyListener((HierarchyListener) null);
      SystemColor systemColor0 = SystemColor.controlText;
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser1.setForeground(systemColor0);
      jDayChooser1.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1700989912782065
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      GapContent gapContent0 = new GapContent();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextPane0.new AccessibleJTextComponent();
      jTextComponent_AccessibleJTextComponent0.getTextBounds(3234, 47);
      jDayChooser0.getBounds((Rectangle) null);
      jDayChooser0.setAutoscrolls(true);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.updateUI();
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.211263088283608
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMonth(1);
      NamedProfileCache namedProfileCache0 = new NamedProfileCache();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster0, (HierarchyListener) aWTEventMulticaster0);
      StyleContext styleContext0 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle((Style) null);
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle("qD?X2", styleContext_NamedStyle0);
      styleContext_NamedStyle1.copyAttributes();
      jDayChooser0.setMaxDayCharacters(2);
      jDayChooser0.init();
      jDayChooser0.getSelectedDay();
      String string0 = null;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(2, (-98), (-708));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -708
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1336666818916004
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addListeners(0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jDayChooser0;
      objectArray0[1] = (Object) jDayChooser0;
      objectArray0[2] = (Object) jDayChooser0;
      objectArray0[3] = (Object) jDayChooser0;
      JTree jTree0 = new JTree(objectArray0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0, (TreeCellEditor) null);
      Component component0 = defaultTreeCellEditor0.getTreeCellEditorComponent(jTree0, (Object) null, true, true, false, 90);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(component0, (-2703), (-5441L), (-2703), 164, 'q', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.205578958473202
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(5283);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMonth(1);
      NamedProfileCache namedProfileCache0 = new NamedProfileCache();
      namedProfileCache0.isDone("m D.V`(flO1:Im0=");
      StyleContext styleContext0 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.PAINT_INFO;
      styleContext_NamedStyle0.getAttribute(gVTAttributedCharacterIterator_TextAttribute0);
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle((String) null, styleContext_NamedStyle0);
      SymbolTable symbolTable0 = new SymbolTable();
      Color color0 = jDayChooser0.getSundayForeground();
      SystemColor systemColor0 = SystemColor.desktop;
      systemColor0.getColorSpace();
      jDayChooser0.setForeground(color0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m D.V`(flO1:Im0=");
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2608448164936306
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1519, 312, 20, 20, '>');
      jDayChooser0.keyPressed(keyEvent0);
      Comparator<AWTKeyStroke> comparator0 = (Comparator<AWTKeyStroke>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<AWTKeyStroke> treeSet0 = new TreeSet<AWTKeyStroke>(comparator0);
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      defaultFocusTraversalPolicy0.setImplicitDownCycleTraversal(false);
      jDayChooser0.setFocusTraversalPolicy(defaultFocusTraversalPolicy0);
      LinkedHashSet<AWTKeyStroke> linkedHashSet0 = new LinkedHashSet<AWTKeyStroke>();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setFocusTraversalKeysEnabled(false);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser0.setDay(8825);
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.MODELESS;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(8825, 1519, 312, 8825, 312);
      Dialog.ModalityType dialog_ModalityType1 = Dialog.ModalityType.DOCUMENT_MODAL;
      ActionEvent actionEvent0 = new ActionEvent(dialog_ModalityType1, 4848, "");
      actionEvent0.paramString();
      ActionEvent actionEvent1 = new ActionEvent(mockGregorianCalendar0, (-4922), "28", 2186);
      jDayChooser2.getSundayForeground();
      // Undeclared exception!
      try { 
        jDayChooser2.actionPerformed(actionEvent1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.193428640036987
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDoubleBuffered();
      jDayChooser0.setName("'%vq]d@5W[x}?1!@");
      jDayChooser0.initDecorations();
      Locale locale0 = Locale.GERMAN;
      HashSet<String> hashSet0 = new HashSet<String>();
      Locale.setDefault(locale0);
      String string0 = AbstractButton.BORDER_PAINTED_CHANGED_PROPERTY;
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UK 5m!co]T:${:X=F");
      jDayChooser1.addHierarchyListener((HierarchyListener) null);
      SystemColor systemColor0 = SystemColor.controlText;
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser1.setForeground(systemColor0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2610), (-2610), (-2610), (-2610), (-2610), (-2610));
      jDayChooser2.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-2610,MONTH=-2610,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2610,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-2610,HOUR_OF_DAY=-2610,MINUTE=-2610,SECOND=-2610,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      SystemColor systemColor1 = SystemColor.activeCaptionBorder;
      jDayChooser2.setDecorationBackgroundColor(systemColor1);
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1700989912782065
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(true);
      boolean boolean0 = new Boolean(true);
      jDayChooser0.getFocusTraversalKeys(0);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.updateUI();
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.160267008020239
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HashSet<String> hashSet0 = new HashSet<String>();
      String string0 = AbstractButton.BORDER_PAINTED_CHANGED_PROPERTY;
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      SystemColor systemColor0 = SystemColor.controlText;
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser0.setForeground(systemColor0);
      JDayChooser jDayChooser3 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate(9998, 9998, 2308, 90, 17);
      jDayChooser3.setMaxSelectableDate(mockDate0);
      jDayChooser3.getMaxSelectableDate();
      assertEquals(14, jDayChooser3.getDay());
      assertFalse(jDayChooser3.isDecorationBordersVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1903696361392897
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getDay();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser1, 14, false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser1.addInputMethodListener((InputMethodListener) null);
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.remove(hierarchyListener0, (HierarchyListener) null);
      AWTEventMulticaster.add(hierarchyListener1, hierarchyListener1);
      HierarchyListener hierarchyListener2 = AWTEventMulticaster.add((HierarchyListener) null, hierarchyListener1);
      focusEvent0.paramString();
      AWTEventMulticaster.remove(hierarchyListener1, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener(hierarchyListener2);
      jDayChooser1.focusGained(focusEvent0);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.setDay((-2151));
      Dialog.ModalityType dialog_ModalityType0 = Dialog.ModalityType.MODELESS;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(41, 39, 14, 14, 65406);
      ActionEvent actionEvent0 = new ActionEvent(mockGregorianCalendar0, (-3512), "28");
      actionEvent0.paramString();
      ActionEvent actionEvent1 = new ActionEvent(mockGregorianCalendar0, (-863), "<*!WE5YM?/qnv/H9", 2186);
      // Undeclared exception!
      try { 
        jDayChooser2.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.2091854589505613
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1236, (-330L), 13, 1236, 'g');
      jDayChooser0.keyPressed(keyEvent0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<AWTKeyStroke> treeSet0 = new TreeSet<AWTKeyStroke>(comparator0);
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy1 = new DefaultFocusTraversalPolicy();
      jDayChooser0.setFocusTraversalPolicy(defaultFocusTraversalPolicy1);
      LinkedHashSet<AWTKeyStroke> linkedHashSet0 = new LinkedHashSet<AWTKeyStroke>();
      JDayChooser jDayChooser1 = new JDayChooser();
      HashMap<AttributedCharacterIterator.Attribute, AWTKeyStroke> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, AWTKeyStroke>();
      KeyStroke.getKeyStrokeForEvent(keyEvent0);
      HashMap<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute> hashMap1 = new HashMap<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute>(1236);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.CHAR_INDEX;
      hashMap1.put(gVTAttributedCharacterIterator_TextAttribute0, gVTAttributedCharacterIterator_TextAttribute0);
      hashMap1.getOrDefault(jDayChooser1, gVTAttributedCharacterIterator_TextAttribute0);
      Font font0 = new Font(hashMap0);
      jDayChooser1.drawDays();
      jDayChooser1.setFocus();
      // Undeclared exception!
      try { 
        AWTKeyStroke.getAWTKeyStroke("28");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String formatted incorrectly
         //
         verifyException("java.awt.AWTKeyStroke", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.1286650206809776
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(29);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      Element element0 = defaultStyledDocument0.getParagraphElement(15);
      LabelView labelView0 = new LabelView(element0);
      labelView0.getBackground();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.initDecorations();
      jDayChooser0.drawDays();
      jDayChooser0.drawWeeks();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'%vq]d@5W[x}?1!@");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">HoC=T^B");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initDecorations();
      String string0 = jDayChooser0.getName();
      assertEquals("JDayChooser", string0);
      
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(90, color0.getGreen());
      
      Color color1 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getHierarchyListeners();
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
      
      JButton jButton0 = new JButton((Action) null);
      jDayChooser0.setForeground(color1);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.205556586357807
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'%vq]d@5W[x}?1!@");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">HoC=T^B");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDoubleBuffered();
      jDayChooser0.initDecorations();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(164, color0.getBlue());
      
      Locale locale0 = Locale.GERMAN;
      locale0.getUnicodeLocaleAttributes();
      Locale.setDefault(locale0);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getSundayForeground();
      SystemColor systemColor0 = SystemColor.desktop;
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.241263879956505
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(784);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 41, (-1L), (-297), (-1209), '$');
      jDayChooser0.keyPressed(keyEvent0);
      Comparator<AWTKeyStroke> comparator0 = (Comparator<AWTKeyStroke>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      defaultFocusTraversalPolicy0.setImplicitDownCycleTraversal(false);
      jDayChooser0.setFocusTraversalPolicy(defaultFocusTraversalPolicy0);
      LinkedHashSet<AWTKeyStroke> linkedHashSet0 = new LinkedHashSet<AWTKeyStroke>();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.getColorModel();
      HashMap<AttributedCharacterIterator.Attribute, AWTKeyStroke> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, AWTKeyStroke>();
      KeyStroke.getKeyStrokeForEvent(keyEvent0);
      HashMap<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute> hashMap1 = null;
      try {
        hashMap1 = new HashMap<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute>((-1209));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1209
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.1236915691512697
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.CHAR_INDEX;
      HashMap<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute>();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute1 = (GVTAttributedCharacterIterator.TextAttribute)StrokingTextPainter.TEXT_COMPOUND_DELIMITER;
      hashMap0.put(gVTAttributedCharacterIterator_TextAttribute0, gVTAttributedCharacterIterator_TextAttribute1);
      Object object0 = new Object();
      hashMap0.getOrDefault(object0, gVTAttributedCharacterIterator_TextAttribute1);
      Font font0 = new Font(hashMap0);
      jDayChooser0.drawDays();
      JDayChooser jDayChooser1 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.273025862898697
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1236, (-330L), 13, 1236, 'g');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.keyPressed(keyEvent0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<AWTKeyStroke> treeSet0 = new TreeSet<AWTKeyStroke>(comparator0);
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy1 = new DefaultFocusTraversalPolicy();
      jDayChooser0.setFocusTraversalPolicy(defaultFocusTraversalPolicy1);
      LinkedHashSet<AWTKeyStroke> linkedHashSet0 = new LinkedHashSet<AWTKeyStroke>();
      JDayChooser jDayChooser1 = new JDayChooser();
      HashMap<AttributedCharacterIterator.Attribute, AWTKeyStroke> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, AWTKeyStroke>();
      KeyStroke.getKeyStrokeForEvent(keyEvent0);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.CHAR_INDEX;
      jDayChooser1.getDecorationBackgroundColor();
      Font font0 = new Font(hashMap0);
      jDayChooser1.drawDays();
      JDayChooser jDayChooser2 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.241553739417929
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1519, 312, 20, 20, '>');
      jDayChooser0.keyPressed(keyEvent0);
      Comparator<AWTKeyStroke> comparator0 = (Comparator<AWTKeyStroke>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<AWTKeyStroke> treeSet0 = new TreeSet<AWTKeyStroke>(comparator0);
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      defaultFocusTraversalPolicy0.setImplicitDownCycleTraversal(false);
      jDayChooser0.setFocusTraversalPolicy(defaultFocusTraversalPolicy0);
      Set<AWTKeyStroke> set0 = new LinkedHashSet<AWTKeyStroke>();
      JDayChooser jDayChooser1 = new JDayChooser();
      HashMap<AttributedCharacterIterator.Attribute, AWTKeyStroke> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, AWTKeyStroke>();
      KeyStroke.getKeyStrokeForEvent(keyEvent0);
      HashMap<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute> hashMap1 = new HashMap<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute>(20);
      Font font0 = new Font(hashMap1);
      jDayChooser0.drawDays();
      JDayChooser jDayChooser2 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser2.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.PINK;
      jDayChooser0.setWeekdayForeground(color0);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getVerifyInputWhenFocusTarget();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      defaultFocusTraversalPolicy0.setImplicitDownCycleTraversal(true);
      jDayChooser0.setFocusTraversalPolicy(defaultFocusTraversalPolicy0);
      Set<AWTKeyStroke> set0 = new LinkedHashSet<AWTKeyStroke>();
      jDayChooser0.getDayPanel();
      HashMap<AttributedCharacterIterator.Attribute, AWTKeyStroke> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, AWTKeyStroke>();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-31), ">");
      actionEvent0.setSource(set0);
      actionEvent0.paramString();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedHashSet cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }
}
