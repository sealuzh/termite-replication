/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 05:08:35 GMT 2019
 */

package org.jcvi.jillion.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.net.URI;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jcvi.jillion.core.util.FileIterator;
import org.jcvi.jillion.core.util.MultipleFileFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileIterator_ESTest extends FileIterator_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.591557832047261
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("=/=/=/=");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "~n06fu<jG[r");
      MockFile mockFile0 = new MockFile("=", "=");
      mockFile0.getCanonicalPath();
      mockFile0.mkdirs();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.toPath();
      File file0 = MockFile.createTempFile("Kz|Rx4F3DXYL&Zh%Q", "", (File) mockFile0);
      mockFile0.setWritable(false, false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder1.build();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.getNextFile();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator0.getNextFile();
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      File file1 = fileIterator0.getNextFile();
      assertNull(file1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.801404402105766
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator0.getNextFile();
      FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      fileIterator1.hasNext();
      fileIterator0.spliterator();
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(false);
      fileIterator0.hasNext();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      File file0 = fileIterator1.getNextFile();
      fileIterator0.spliterator();
      FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      fileIterator_FileIteratorBuilder2.build();
      File file1 = fileIterator1.getNextFile();
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator.createBreadthFirstFileIteratorBuilder(file1);
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      // Undeclared exception!
      try { 
        fileIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.675537735948769
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("=/=/=/=");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "<9,>@\"<*S.*H");
      MockFile mockFile0 = new MockFile("=", "=");
      MockFile mockFile1 = new MockFile(mockFile0, "=");
      mockFile1.getCanonicalPath();
      mockFile0.mkdirs();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.toPath();
      MockFile.createTempFile("Kz|Rx4F3DXYL&Zh%Q", "", (File) mockFile1);
      mockFile1.setWritable(false, false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      fileIterator1.getNextFile();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      File file0 = fileIterator0.next();
      assertEquals(0L, file0.getUsableSpace());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.729258839318404
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.jcvi.jillion.core.util.FileIterator", "org.jcvi.jillion.core.util.FileIterator");
      File file0 = MockFile.createTempFile("t-- N0[Yl,~5c9+m9b", "&SPsd", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "");
      mockFile1.setReadable(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.jcvi.jillion.core.util.FileIterator");
      mockFile0.createNewFile();
      mockFile0.setExecutable(false);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      mockFile0.setReadable(true, false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Iterator<File> iterator0 = fileIterator0.iterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      fileIterator0.getNextFile();
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      fileIterator0.next();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      FileIterator.createNonRecursiveFileIteratorBuilder((File) null);
      fileIterator0.iterator();
      FileIterator.createNonRecursiveFileIteratorBuilder((File) null);
      fileIterator0.getNextFile();
      Iterator<File> iterator1 = fileIterator0.iterator();
      assertNotSame(iterator1, iterator0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.55189216202367
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      mockFile0.delete();
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      fileIterator0.getNextFile();
      FileIterator.createNonRecursiveFileIteratorBuilder((File) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator0.iterator();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4400155732690902
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      MockFile mockFile1 = new MockFile("", "Kfc3q]-|K\"");
      mockFile1.toPath();
      MockFile mockFile2 = new MockFile(mockFile1, "");
      mockFile0.getCanonicalPath();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      MockFile mockFile3 = new MockFile(mockFile0, "");
      mockFile2.mkdirs();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile2.toPath();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects");
      FileSystemHandling.createFolder(evoSuiteFile1);
      MockFile.createTempFile("@b&n/.,DpKl", (String) null);
      mockFile1.getAbsolutePath();
      mockFile2.getAbsolutePath();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "org.jcvi.jillion.core.util.LIFOQueue");
      FileSystemHandling.createFolder(evoSuiteFile1);
      mockFile0.toPath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.6770135200332486
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      mockFile1.getCanonicalPath();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockFile1.setLastModified(0L);
      MockFile mockFile2 = new MockFile(mockFile1, "(?v");
      mockFile0.mkdirs();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      mockFile1.toPath();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects");
      FileSystemHandling.createFolder(evoSuiteFile1);
      File file0 = MockFile.createTempFile("org.jcvi.jillion.internal.core.util.AbstractFOQueue", "org.jcvi.jillion.core.util.FileItera6or$NullFileFilter");
      mockFile1.getAbsolutePath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      File file1 = fileIterator0.getNextFile();
      assertNotNull(file1);
      
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      fileIterator0.next();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(file1);
      assertFalse(fileIterator0.hasNext());
      assertTrue(file1.equals((Object)file0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.285091806161143
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.iterator();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator0.iterator();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.784555317325582
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.iterator();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator1.forEach(consumer0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      File file0 = fileIterator0.next();
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      fileIterator0.getNextFile();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      fileIterator0.iterator();
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      fileIterator1.getNextFile();
      fileIterator1.iterator();
      File file1 = fileIterator0.getNextFile();
      assertNotSame(file1, mockFile0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.8213663292747744
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder1.build();
      File file0 = fileIterator2.getNextFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder3.build();
      FileIterator fileIterator3 = fileIterator_FileIteratorBuilder2.build();
      fileIterator3.hasNext();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      fileIterator3.setUpInitialState(file0);
      fileIterator_FileIteratorBuilder4.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder5 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator3.hasNext();
      File file1 = fileIterator1.next();
      FileIterator.createNonRecursiveFileIteratorBuilder(file1);
      fileIterator_FileIteratorBuilder5.build();
      fileIterator2.getNextFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder6 = FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      mockFile0.setLastModified(0L);
      fileIterator_FileIteratorBuilder6.includeHiddenFiles(true);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      File file2 = fileIterator2.getNextFile();
      assertTrue(file2.isAbsolute());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.6112294040424016
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        fileIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.4417659538502003
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=bJP#%spC", "=bJP#%spC");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile1 = new MockFile("=bJP#%spC", "");
      MockFile mockFile2 = new MockFile(mockFile1, "");
      mockFile1.setReadOnly();
      mockFile2.setReadOnly();
      mockFile1.getCanonicalPath();
      mockFile2.setLastModified(0L);
      mockFile0.toURL();
      MockFile mockFile3 = new MockFile(mockFile1, "(?v");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      mockFile1.toPath();
      mockFile1.mkdir();
      MockFile mockFile4 = new MockFile("org.jcvi.jillion.core.util.iter.IteratorUtil$EmptyIterator");
      MockFile mockFile5 = new MockFile("=bJP#%spC");
      MockFile mockFile6 = new MockFile("=bJP#%spC", "");
      mockFile4.delete();
      MockFile mockFile7 = new MockFile(mockFile5, "X}=|U#PnRz`hXce");
      MockFile mockFile8 = new MockFile("+71s&", "org.jcvi.jillion.internal.core.util.AbstractFOQueue");
      mockFile0.toPath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.setUpInitialState(mockFile1);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile2);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile7);
      // Undeclared exception!
      try { 
        fileIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.7128202247129387
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.toPath();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.setWritable(false, true);
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      assertNotSame(fileIterator_FileIteratorBuilder3, fileIterator_FileIteratorBuilder2);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3834187422144164
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      File file0 = null;
      // Undeclared exception!
      try { 
        fileIterator0.updateFileIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.4414067374149844
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=bJP#%spC", "=bJP#%spC");
      MockFile mockFile1 = new MockFile("=bJP#%spC", "");
      MockFile mockFile2 = new MockFile(mockFile1, "");
      mockFile1.setReadOnly();
      mockFile2.setReadOnly();
      mockFile1.getCanonicalPath();
      mockFile2.setExecutable(false, false);
      mockFile2.setLastModified(12L);
      mockFile0.toURL();
      MockFile mockFile3 = new MockFile(mockFile1, "(?v");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      mockFile1.toPath();
      mockFile1.mkdir();
      MockFile mockFile4 = new MockFile("org.jcvi.jillion.core.util.LIFOQueue");
      MockFile mockFile5 = new MockFile("Y");
      MockFile mockFile6 = new MockFile("Y", "org.jcvi.jillion.internal.core.util.AbstractFOQueue");
      mockFile6.delete();
      MockFile mockFile7 = new MockFile(mockFile6, "(?v");
      mockFile3.renameTo(mockFile5);
      MockFile mockFile8 = new MockFile("l", "org.jcvi.jillion.core.util.LIFOQueue");
      mockFile1.toPath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.updateFileIterator(mockFile7);
      fileIterator0.iterator();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile8);
      assertFalse(fileIterator_FileIteratorBuilder1.equals((Object)fileIterator_FileIteratorBuilder0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.5690096592690184
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=bJP#%spC", "=bJP#%spC");
      MockFile mockFile1 = new MockFile("=bJP#%spC", "");
      MockFile mockFile2 = new MockFile(mockFile1, "");
      mockFile1.setReadOnly();
      mockFile2.setReadOnly();
      mockFile1.getCanonicalPath();
      mockFile2.setExecutable(false, false);
      mockFile2.setLastModified(0L);
      mockFile0.toURL();
      MockFile mockFile3 = new MockFile(mockFile1, "(?v");
      mockFile0.mkdirs();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      mockFile0.toPath();
      mockFile0.mkdir();
      MockFile mockFile4 = new MockFile("no elements in empty iterator");
      MockFile mockFile5 = new MockFile("\"R]q+W,B@Wb");
      MockFile mockFile6 = new MockFile("aIQ =", "=bJP#%spC");
      mockFile3.delete();
      MockFile mockFile7 = new MockFile(mockFile6, "aIQ =");
      mockFile4.mkdir();
      MockFile mockFile8 = new MockFile("aIQ =");
      MockFile mockFile9 = new MockFile(")");
      mockFile3.renameTo(mockFile2);
      mockFile5.toPath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile5);
      fileIterator0.iterator();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.6531938152356886
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.toPath();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.setWritable(true, true);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder2.equals((Object)fileIterator_FileIteratorBuilder0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.7777718118965256
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.getNextFile();
      fileIterator_FileIteratorBuilder2.includeDirectories(false);
      File file0 = fileIterator0.getNextFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      fileIterator_FileIteratorBuilder3.build();
      File file1 = fileIterator0.getNextFile();
      FileIterator.createBreadthFirstFileIteratorBuilder(file1);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3650427653016277
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=bJP#%spC", "=bJP#%spC");
      MockFile mockFile1 = new MockFile("=bJP#%spC", "");
      MockFile mockFile2 = new MockFile(mockFile1, "");
      mockFile1.setReadOnly();
      mockFile2.setReadOnly();
      mockFile1.getCanonicalPath();
      mockFile2.setLastModified(0L);
      mockFile0.toURL();
      MockFile mockFile3 = new MockFile(mockFile1, "(]~?v");
      mockFile0.mkdirs();
      mockFile3.setReadable(false, false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      mockFile1.toPath();
      mockFile1.mkdir();
      MockFile mockFile4 = new MockFile("org.jcvi.jillion.core.util.iter.IteratorUtil$EmptyIterator");
      MockFile mockFile5 = new MockFile("=bJP#%spC");
      MockFile mockFile6 = new MockFile("=bJP#%spC", "");
      MockFile.createTempFile("org.jcvi.jillion.internal.core.util.AbstractFOQueue", "org.jcvi.jillion.core.util.iter.IteratorUtil$EmptyIterator", (File) mockFile2);
      MockFile mockFile7 = new MockFile(mockFile5, "X}=|U#PnRz`hXce");
      mockFile4.renameTo(mockFile3);
      MockFile mockFile8 = new MockFile("+71s&", "org.jcvi.jillion.internal.core.util.AbstractFOQueue");
      mockFile0.toPath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertTrue(fileIterator0.hasNext());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.6313750821961626
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileIterator_FileIteratorBuilder1.fileFilter(multipleFileFilter0);
      fileIterator0.getNextFile();
      URI uRI0 = MockURI.aHttpURI;
      fileIterator_FileIteratorBuilder1.build();
      // Undeclared exception!
      try { 
        fileIterator0.setUpInitialState((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator$RecursiveFileIterator", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.529173200397233
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("=bJP#%spC", "=bJP#%spC");
      MockFile mockFile1 = new MockFile("=bJP#%spC", "");
      mockFile1.setReadOnly();
      mockFile1.setReadOnly();
      mockFile1.getCanonicalPath();
      mockFile1.setLastModified(0L);
      mockFile0.toURL();
      MockFile mockFile2 = new MockFile(mockFile1, "(?v");
      mockFile0.mkdirs();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      mockFile1.toPath();
      mockFile1.mkdir();
      MockFile mockFile3 = new MockFile("org.jcvi.jillion.core.util.iter.IteratorUtil$EmptyIterator");
      MockFile mockFile4 = new MockFile("=bJP#%spC");
      MockFile mockFile5 = new MockFile("=bJP#%spC", "");
      MockFile mockFile6 = new MockFile(mockFile4, "X}=|U#PnRz`hXce");
      mockFile3.renameTo(mockFile2);
      MockFile mockFile7 = new MockFile("+71s&", "org.jcvi.jillion.internal.core.util.AbstractFOQueue");
      mockFile0.toPath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.setUpInitialState(mockFile3);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile2);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile6);
      assertFalse(fileIterator_FileIteratorBuilder2.equals((Object)fileIterator_FileIteratorBuilder1));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.489215694582582
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder1.build();
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator0.hasNext();
      fileIterator0.getNextFile();
      URI uRI0 = MockURI.aHttpURI;
      fileIterator_FileIteratorBuilder0.build();
      // Undeclared exception!
      try { 
        fileIterator0.forEach((Consumer<? super File>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.432757197408911
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[4] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(fileFilterArray0);
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter5);
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter12 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter13 = new MultipleFileFilter(linkedList2);
      MultipleFileFilter multipleFileFilter14 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter15 = new MultipleFileFilter(linkedList3);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter16 = new MultipleFileFilter(linkedList4);
      assertFalse(multipleFileFilter16.equals((Object)multipleFileFilter15));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4466856169199285
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      File file0 = null;
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.fileFilter(multipleFileFilter0);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder2.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = (-12);
      Integer integer0 = new Integer((-12));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-10));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      Integer integer8 = new Integer((-4563));
      Integer integer9 = new Integer((-1141));
      Integer integer10 = new Integer(int0);
      MockFile mockFile0 = new MockFile("vIPJ4yQ6fvtXf;", "^u1voF0z");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.432757197408911
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = (-12);
      Integer integer0 = new Integer((-12));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      int int1 = (-1);
      Integer integer5 = new Integer((-1));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      Integer integer8 = new Integer((-4563));
      Integer integer9 = new Integer(int1);
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder((File) null);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }
}
