/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 21:04:58 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1487632306713156
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.of((-264L), 1353L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-264L), (-91L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(7155415495144L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 1421L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3191893076343777
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = range_Builder1.build();
      Range range1 = Range.of(670L);
      Range range2 = Range.of(65535L, 65535L);
      range2.equals(range1);
      range2.equals(range_Builder1);
      Object object0 = new Object();
      range1.equals("$FYH#9Di%*!");
      Object object1 = new Object();
      range1.equals(range2);
      Object object2 = new Object();
      Object object3 = new Object();
      Long long0 = new Long(670L);
      range2.equals(long0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range2);
      range0.complementFrom(linkedList0);
      Range range3 = Range.of(65535L);
      Range.Builder range_Builder2 = new Range.Builder();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range3.complement(range1);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      range1.isSubRangeOf(range2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4217875945125256
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.ofLength(65558L);
      Range range1 = Range.of(257L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 257L, 2147483647L);
      Object object0 = new Object();
      range1.equals(range2);
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(",|C5*67adYC");
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range range3 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      List<Range> list0 = range3.complement(range0);
      range3.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(65558L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.377531525876655
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.intersection(range1);
      range1.getLength();
      long long0 = 4294967284L;
      Object object0 = new Object();
      Range.of(4294967284L);
      // Undeclared exception!
      range1.split(long0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2256634357542717
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(1159L, 6786048308720L);
      Range range1 = range_Builder0.build();
      range1.equals(range_CoordinateSystem0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.600610979959961
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.ofLength(65558L);
      Range range1 = Range.of(263L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range1.equals("org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream");
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range range2 = Range.of((-547L));
      Range.Builder range_Builder0 = new Range.Builder();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      List<Range> list0 = range2.complement(range1);
      assertTrue(list0.contains(range2));
      
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      boolean boolean1 = range0.isSubRangeOf(range2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.809435436338025
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of((-608L));
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = Range.of((-608L));
      long long0 = range1.getLength();
      assertEquals(2147483647L, long0);
      
      Range range3 = Range.of(2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      range3.equals(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object3);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range4 = Range.ofLength(9223372036854771024L);
      List<Range> list0 = range3.complement(range1);
      List<Range> list1 = range4.complementFrom(list0);
      Range.of(2103L, 9223372036854771024L);
      List<Range> list2 = range2.complementFrom(linkedList0);
      assertTrue(list2.equals((Object)list1));
      
      Range range5 = range2.intersection(range4);
      assertTrue(range5.isEmpty());
      
      Range.Comparators.values();
      Range range6 = Range.of(2147483647L);
      range6.asRange();
      long long1 = range6.getLength();
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0458182955099
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(7121055756871L);
      Range range1 = Range.ofLength(7121055756871L);
      Object object0 = new Object();
      long long0 = 9223372036854775807L;
      Range range2 = Range.of(9223372036854775807L);
      range1.equals((Object) null);
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(range2);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 7121055756871L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.5138454716428784
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1625L), 0L);
      long long0 = 1501L;
      range_Builder0.expandEnd(1501L);
      Range range0 = Range.ofLength(65558L);
      Range range1 = Range.of(263L, 2147483647L);
      range0.complement(range1);
      Object object0 = new Object();
      range0.equals((Object) null);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long1 = 34L;
      // Undeclared exception!
      try { 
        Range.of(1140L, 34L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.667844092520447
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775796L), (-9223372036854775796L));
      List<Range> list0 = range0.complement(range0);
      Range range1 = Range.ofLength(9223372036852873031L);
      List<Range> list1 = range1.complement(range0);
      range1.complementFrom(list1);
      Long long0 = new Long((-9223372036854775796L));
      Long long1 = new Long(113L);
      range1.equals(long1);
      Object object0 = new Object();
      Long long2 = new Long(65535L);
      Range range2 = Range.of(113L);
      Long long3 = new Long(9223372036852873031L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range2.complementFrom(list0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 113, -9223372036854775797 are not valid Zero Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.5257637196325864
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(501L, 1348L);
      range0.asRange();
      Range range1 = Range.ofLength(1962L);
      Range range2 = range1.intersection(range0);
      Long long0 = new Long(1962L);
      Range.of(501L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, (-1354L), (-1354L));
      Object object0 = new Object();
      range3.equals(object0);
      range2.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      range2.complementFrom(list0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.4221979832999527
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of(114L);
      Range range1 = Range.ofLength(114L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range2 = range0.intersection(range1);
      range1.getLength();
      Range range3 = Range.of(4294967295L);
      range3.iterator();
      Object object0 = new Object();
      range3.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 114L, 114L);
      Range range4 = range_Builder0.build();
      Range.CoordinateSystem.values();
      Object object3 = new Object();
      range2.equals(range_Builder0);
      range2.equals(range4);
      Range.CoordinateSystem.values();
      range1.complement(range4);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.128044921185588
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of((-1610L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range range2 = range1.intersection(range0);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3934205449149863
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = range_Builder1.build();
      Range range1 = Range.of(670L, 65535L);
      Range range2 = Range.of(65535L, 65535L);
      range2.equals(range1);
      range2.equals(range_Builder1);
      Range.CoordinateSystem.values();
      range2.complement(range1);
      Range range3 = Range.of(1406L, 65535L);
      Range range4 = range3.intersection(range1);
      range4.asRange();
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem.values();
      range2.endsBefore(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.283661928233661
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-1043L);
      Range range0 = Range.of((-1043L), 0L);
      range0.equals(range_CoordinateSystem0);
      long long2 = 4294967295L;
      long long3 = 97L;
      Range.of(range_CoordinateSystem0, 0L, 97L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.331220148081147
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(9223372036852872986L);
      Range range1 = Range.of(129L);
      range1.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 129L);
      range1.equals(range2);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036852872986L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.5722024044991687
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(1L);
      Range range1 = Range.of(129L);
      List<Range> list0 = range1.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(29L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 29L, 129L);
      range2.equals(range0);
      Long long0 = new Long(1L);
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 129L, 129L);
      Range.CoordinateSystem.values();
      List<Range> list1 = range1.complement(range3);
      List<Range> list2 = range3.complementFrom(list1);
      Range range4 = Range.of((-841L), 2103L);
      range4.complementFrom(list2);
      range3.intersection(range2);
      Range.Comparators.values();
      Range range5 = range0.asRange();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range3.complementFrom(list2);
      assertFalse(list2.equals((Object)list0));
      assertEquals(0, list2.size());
      
      Range range6 = range5.intersection(range1);
      assertSame(range1, range3);
      assertTrue(range6.isEmpty());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.113233180865426
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.ofLength(670L);
      Range range0 = Range.of(670L);
      range0.equals(range_Builder1);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(670L, 129L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2391737324834815
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(2705L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775695L, 9223372036854775695L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2705L, 40L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9190235060608334
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = Range.of((-2396L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.014635675651483
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.ofLength(670L);
      range_Builder1.contractBegin(0L);
      Range range0 = Range.ofLength(670L);
      range0.equals(range_Builder1);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(670L, 129L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.313091062187154
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      range0.getLength();
      Range range1 = Range.of((-2147483648L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range1.equals(object2);
      Object object3 = new Object();
      Object object4 = new Object();
      range1.equals(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-2147483648L), 296L);
      Range.of(1L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Nu(j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Nu(j
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.457580105001813
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1407L);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of((-264L), 1407L);
      range1.endsBefore(range0);
      range0.equals(range1);
      range0.isEmpty();
      Long long0 = new Long(1486L);
      range1.equals(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range1.complementFrom(linkedList1);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      range0.complementFrom(linkedList1);
      Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder();
      LinkedList<Range> linkedList4 = new LinkedList<Range>();
      Range.of(range_CoordinateSystem0, 255L, 255L);
      // Undeclared exception!
      try { 
        Range.ofLength((-528L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.6155909983608088
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      Range range1 = range0.asRange();
      Range range2 = Range.ofLength(127L);
      Range range3 = range2.intersection(range0);
      Long long0 = new Long((-9223372036854775304L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, (-9223372036854775304L), (-9223372036854775301L));
      Long.getLong("aRg\"");
      boolean boolean0 = range4.equals((Object) null);
      Object object0 = new Object();
      Long long1 = new Long(65535L);
      range2.equals("aRg\"");
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range3.complementFrom(linkedList0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range5 = range_Builder0.build();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      range5.complementFrom(linkedList1);
      assertNotSame(range5, range3);
      assertTrue(range5.isEmpty());
      
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      Range range6 = Range.of((-9223372036854775295L));
      boolean boolean1 = range6.intersects(range4);
      assertTrue(boolean1 == boolean0);
      assertFalse(range6.isEmpty());
      
      range1.complementFrom(linkedList0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.367637005030383
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of(129L);
      List<Range> list0 = range1.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of((-2147483649L));
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range2.complementFrom(list0);
      range2.complement(range0);
      range0.intersection(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.871649625135927
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.5293135476249953
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1L);
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 4294967295L);
      range0.intersection(range1);
      Range range2 = Range.of(1L);
      range0.equals(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(object1);
      Object object2 = new Object();
      range2.equals(object2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range.of(2147483647L, 9223372036854775138L);
      Range.of(0L, 0L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("can not add null range to cache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.can not add null range to cache
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0301121582968897
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = 2147483647L;
      Range.of(2147483647L);
      Range range0 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.of(65535L, 58L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3662616223641653
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of((-1316L));
      Range range1 = Range.ofLength(2147483647L);
      range1.getLength();
      range0.complement(range1);
      Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      String string0 = "o^\"x714p6{\\u_";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.o^\"x714p6{\\u_
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.455844815256683
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = 114L;
      Range range0 = Range.of(114L, 114L);
      Range range1 = Range.ofLength(114L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.intersection(range1);
      range1.getLength();
      Range.of(4294967295L);
      Object object0 = new Object();
      Range range2 = Range.of(4294967295L);
      List<Range> list0 = range2.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      Range range3 = Range.of(4294967295L);
      range3.complementFrom(list1);
      // Undeclared exception!
      try { 
        Range.of(1044L, (-1392L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.392841079260725
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(7121055756871L);
      Range.ofLength(7121055756871L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object3);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-2945L), 7151120527859L);
      // Undeclared exception!
      try { 
        Range.of(7138235626007L, (-2515L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8647385121905677
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long long0 = 2705L;
      Range range0 = Range.of(2705L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.5476078350464255
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-9223372036854775796L);
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775796L), (-9223372036854775796L));
      range0.complement(range0);
      long long1 = 9223372036852873031L;
      Range range1 = Range.ofLength(9223372036852873031L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      Range range2 = Range.of((-9223372036854775796L));
      // Undeclared exception!
      try { 
        range2.complementFrom(list1);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775796 would make range [9223372036852873031 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.671687405092227
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(129L, 129L);
      Range range1 = range0.asRange();
      Range range2 = Range.ofLength(129L);
      Range range3 = range2.intersection(range0);
      Range range4 = range1.intersection(range2);
      Range range5 = Range.of((-1902774L));
      Long long0 = new Long(65535L);
      range3.equals(long0);
      Object object0 = new Object();
      Long long1 = new Long((-1902774L));
      range4.equals(long1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range2.complementFrom(linkedList1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range6 = Range.of(range_CoordinateSystem0, (-1251L), (-1251L));
      assertTrue(range6.isEmpty());
      
      Range.CoordinateSystem.values();
      Object object1 = new Object();
      range3.equals(range5);
      assertFalse(range5.isEmpty());
      
      boolean boolean0 = range0.isSubRangeOf(range4);
      assertFalse(boolean0);
      
      Range.CoordinateSystem.values();
      range3.complement(range0);
      assertTrue(range3.isEmpty());
      
      range0.intersects(range4);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range7 = Range.of(range_CoordinateSystem1, 1L, 1L);
      range7.complementFrom(linkedList1);
      assertFalse(range7.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.4637776594788563
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(114L, 114L);
      Range range1 = Range.ofLength(114L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range2 = range0.intersection(range1);
      range1.getLength();
      Range range3 = Range.of(4294967295L);
      Object object0 = new Object();
      range3.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(linkedList0);
      Range range4 = Range.of(114L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range5 = range_Builder0.build();
      range5.complement(range2);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range3.complement(range4);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.7912945696950127
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-2147483648L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483648 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.6946934848729263
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(9223372036854775807L);
      List<Range> list0 = range0.complement(range0);
      long long0 = 9223372036852873031L;
      Range range1 = Range.of(9223372036852873031L);
      range1.isSubRangeOf(range0);
      range0.complement(range1);
      range1.complementFrom(list0);
      Range.of(129L);
      range1.complementFrom(list0);
      Range.of((-4166L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.ofLength(9223372036852873031L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2201L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3343072668301055
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.of(670L);
      Range range0 = Range.ofLength(9223372036854774030L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object3);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-2L), 58L);
      // Undeclared exception!
      try { 
        Range.of(467L, 441L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.293565300259372
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      Range range1 = Range.of((-886L));
      range0.endsBefore(range1);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 4294967295L);
      range_Builder0.expandEnd((-1379L));
      Range.of((-1379L), 127L);
      Range.of((-1439L), 32767L);
      Range.of((-1379L));
      Range.Builder range_Builder1 = new Range.Builder(1125L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.55440480822986
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1625L), 0L);
      range_Builder0.expandEnd(1501L);
      Range range0 = Range.ofLength(65535L);
      long long0 = 2147483647L;
      Range range1 = Range.of(263L, 2147483647L);
      List<Range> list0 = new LinkedList<Range>();
      range1.complementFrom(list0);
      Range.of(2147483647L);
      Range.ofLength(1365L);
      Range.of((-32768L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.694293488622627
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of((-1271L), 2705L);
      range0.complement(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder();
      range0.startsBefore(range0);
      range0.spliterator();
      range0.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      range0.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-32768L), (-1271L));
      Range range1 = Range.of(111L, 9223372036854771831L);
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1506776429748933
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Object object0 = new Object();
      range0.equals(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long0 = new Long(1553L);
      range0.equals(long0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-2945L), 0L);
      Range.of((-32768L), 2146L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Nu(j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Nu(j
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.475611607665767
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, 1513L, 2704L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = Range.of(388L);
      boolean boolean0 = range2.startsBefore(range0);
      boolean boolean1 = range0.isSubRangeOf(range0);
      assertTrue(boolean1);
      
      Range.CoordinateSystem.values();
      boolean boolean2 = range0.endsBefore(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean2 == boolean0);
      
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range3 = range_Builder0.build();
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.611684193386377
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(9223372036854775694L);
      Range range1 = Range.of(2886L);
      range1.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of((-1509L));
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 129L, 1928L);
      Range.Builder range_Builder1 = new Range.Builder(1928L);
      Range range3 = range_Builder1.build();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range4 = Range.of(1928L);
      range4.complementFrom(linkedList0);
      range4.complement(range3);
      range4.complementFrom(linkedList0);
      Range range5 = Range.of(9223372036854775694L);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      range5.complementFrom(linkedList2);
      // Undeclared exception!
      try { 
        range0.intersection(range2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1509 would make range [9223372036854775694 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.7042836639944774
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1L);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      Range range2 = Range.of(0L);
      Range range3 = Range.ofLength(1975L);
      Range.of((-9223372036854775808L));
      List<Range> list1 = range3.complementFrom(list0);
      assertFalse(range0.isEmpty());
      assertFalse(list1.contains(range2));
      
      Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range4 = range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list2 = range4.complementFrom(linkedList0);
      range4.complementFrom(list2);
      Range range5 = Range.of(1975L, 9223372036854775807L);
      Range range6 = range5.intersection(range1);
      assertTrue(range6.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-1453L));
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.550940270202306
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(2705L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775695L, 9223372036854775695L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range range2 = Range.of((-2396L));
      range1.startsBefore(range0);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      range0.endsBefore(range1);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        range1.complement(range2);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2396 would make range [9223372036854775695 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.539907123366063
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(129L, 129L);
      range0.asRange();
      Range range1 = Range.ofLength(129L);
      Range range2 = range1.intersection(range0);
      Range.of((-1902774L));
      Long long0 = new Long(65535L);
      Long.min(129L, 65535L);
      range2.equals(long0);
      Object object0 = new Object();
      Long long1 = new Long((-1902774L));
      range1.equals(long1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range1.complementFrom(linkedList1);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      range0.complementFrom(linkedList3);
      // Undeclared exception!
      try { 
        Range.of(3611L, (-1902774L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.408026110491895
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1353L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      Range range1 = Range.of((-264L), 1353L);
      boolean boolean1 = range1.endsBefore(range0);
      boolean boolean2 = range0.equals(range1);
      range0.isEmpty();
      Range range2 = Range.of((-32768L));
      range1.startsBefore(range1);
      Range.Comparators.values();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range3 = Range.of((-264L), 1353L);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer1);
      Range.Builder range_Builder0 = new Range.Builder();
      boolean boolean3 = range2.startsBefore(range0);
      assertFalse(boolean3 == boolean1);
      
      boolean boolean4 = range3.isSubRangeOf(range0);
      assertTrue(boolean4 == boolean2);
      
      Range.CoordinateSystem.values();
      range3.endsBefore(range1);
      boolean boolean5 = range1.endsBefore(range3);
      assertSame(range3, range1);
      assertFalse(boolean5);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.507816126502671
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(114L, 114L);
      Range range1 = Range.ofLength(114L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long0 = new Long(114L);
      boolean boolean0 = range1.intersects(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = range0.startsBefore(range1);
      assertFalse(boolean1);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder1.build();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      List<Range> list0 = range1.complement(range2);
      assertTrue(list0.contains(range1));
      
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      boolean boolean2 = range2.isSubRangeOf(range0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.7284075400342904
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.ofLength(4294967295L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("(d+)s*,s*(d+)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.(d+)s*,s*(d+)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.5355936327048783
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of((-18L));
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      range0.complement(range1);
      Range range2 = Range.of((-18L));
      Range range3 = range2.asRange();
      range1.isEmpty();
      range3.startsBefore(range1);
      Range range4 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.4464388796471828
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      Range range1 = range0.asRange();
      Range range2 = Range.ofLength(127L);
      Range range3 = range2.intersection(range0);
      long long0 = new Long(127L);
      Range range4 = Range.of(127L);
      boolean boolean0 = range4.equals(range0);
      Object object0 = new Object();
      range3.equals(object0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range4.complementFrom(linkedList0);
      Range.of(127L);
      Range.Builder range_Builder0 = new Range.Builder();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      List<Range> list0 = range3.complement(range4);
      assertTrue(list0.contains(range3));
      
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      boolean boolean1 = range1.isSubRangeOf(range2);
      assertFalse(boolean1 == boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(range2.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.235728868512792
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1353L, 1353L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range range1 = Range.of(range_CoordinateSystem0, 1353L, 1353L);
      range0.startsBefore(range1);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem.values();
      range1.endsBefore(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.633912549017009
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(670L);
      range_Builder0.expandEnd(670L);
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.ofLength(65535L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range range2 = Range.ofLength(83L);
      range2.complement(range1);
      range0.complementFrom(list0);
      Object object0 = new Object();
      Range range3 = Range.of((-246L), 2147483647L);
      range1.equals(range3);
      Range.of((-246L), 3275L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("zFa^!F-q]?1zM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.zFa^!F-q]?1zM
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.445168006232742
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of((-264L), 0L);
      range1.endsBefore(range0);
      range0.equals(range1);
      range0.isEmpty();
      long long0 = (-32768L);
      long long1 = 1655L;
      Range.of(1655L);
      Range range2 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.5541524394648074
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.ofLength(1011L);
      Range range1 = Range.ofLength(4785L);
      Range range2 = Range.of((-128L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder();
      range2.equals((Object) null);
      Range.CoordinateSystem.values();
      range2.complement(range1);
      // Undeclared exception!
      try { 
        Range.of(3078L, (-2437L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.305846748554307
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.endsBefore(range0);
      range0.equals(range0);
      range0.isEmpty();
      long long0 = (-32768L);
      long long1 = 1655L;
      Range.of(1655L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.2365485002830328
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(114L, 114L);
      Range range1 = Range.ofLength(114L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long0 = new Long(114L);
      range0.equals(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.startsBefore(range1);
      Range.ofLength(18L);
      Range.ofLength(694L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("(d+)s*,s*(d+)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.(d+)s*,s*(d+)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.3059987139116167
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(129L, 129L);
      Range range1 = range0.asRange();
      Range range2 = Range.ofLength(129L);
      Range range3 = range2.intersection(range0);
      Range.of(129L, 3977L);
      Object object0 = new Object();
      range1.intersects(range2);
      Range range4 = Range.ofLength(261L);
      range4.startsBefore(range3);
      Range.ofLength(1784L);
      Range range5 = Range.ofLength(261L);
      range5.isSubRangeOf(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.5605586972200856
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.ofLength(1353L);
      range0.intersection(range0);
      range0.getLength();
      Range range1 = Range.of(255L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range.of((-3450L));
      range0.complement(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.374701108553916
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of((-608L));
      long long0 = 2147483647L;
      Range range1 = Range.ofLength(2147483647L);
      range1.intersection(range0);
      range1.getLength();
      Range.of(2147483647L);
      Object object0 = new Object();
      range0.equals((Object) null);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object1 = new Object();
      long long1 = (-1L);
      Long long2 = new Long((-608L));
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("lzR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.lzR
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.267189920670504
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(9223372036854771024L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(range_CoordinateSystem0, 9223372036854771024L, 9223372036854771024L);
      //  // Unstable assertion: assertSame(range2, range1);
      
      List<Range> list0 = range2.complement(range0);
      Range range3 = range2.intersection(range1);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      
      List<Range> list1 = range1.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list1.contains(range0));
      
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range2.intersects(range1);
      List<Range> list2 = range0.complementFrom(linkedList1);
      //  // Unstable assertion: assertFalse(list2.equals((Object)list0));
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.6252242326054738
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775798L, 9223372036854775798L);
      List<Range> list0 = range0.complement(range0);
      Range range1 = Range.of(9223372036852873031L);
      range1.isSubRangeOf(range0);
      range0.complement(range1);
      range1.complementFrom(list0);
      range1.endsBefore(range0);
      range1.complementFrom(list0);
      Range range2 = Range.of(range_CoordinateSystem0, (-1852L), 2674L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range3 = Range.of(129L);
      range2.startsBefore(range3);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      range1.endsBefore(range2);
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.5356397059288303
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(129L, 129L);
      range0.asRange();
      Range range1 = Range.ofLength(129L);
      Range range2 = range1.intersection(range0);
      Range.of((-1902774L));
      Long long0 = new Long(65535L);
      Long.min(129L, 65535L);
      range2.equals(long0);
      Object object0 = new Object();
      Long long1 = new Long((-1902774L));
      range1.equals(long1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range1.complementFrom(linkedList1);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.524830817047316
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      Range range1 = range0.asRange();
      Range range2 = Range.of(127L);
      Range range3 = range2.intersection(range0);
      Long long0 = new Long(127L);
      Range range4 = Range.of(127L);
      range4.equals(range0);
      Object object0 = new Object();
      range0.endsBefore(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range4.complementFrom(linkedList0);
      Range.of(127L);
      Range.Builder range_Builder0 = new Range.Builder();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      List<Range> list0 = range3.complement(range4);
      assertEquals(0, list0.size());
      
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      boolean boolean0 = range1.isSubRangeOf(range2);
      assertTrue(boolean0);
      assertSame(range2, range3);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.7422438451352105
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(1L);
      Range range1 = Range.of(129L);
      range1.endsBefore(range0);
      range0.equals("");
      range1.isEmpty();
      Range range2 = Range.of(1455L);
      range1.startsBefore(range2);
      Range.Comparators.values();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range.of((-32768L), 32767L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range3 = Range.ofLength(0L);
      range3.startsBefore(range1);
      Range range4 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483646L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range5 = Range.of(range_CoordinateSystem1, 0L, 4419L);
      range1.isSubRangeOf(range5);
      Range.CoordinateSystem.values();
      range3.endsBefore(range1);
      // Undeclared exception!
      try { 
        range4.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.6582360556733184
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-1043L), 0L);
      range0.equals(range_CoordinateSystem0);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.ofLength(0L);
      Range range2 = range0.intersection(range1);
      range2.intersects(range0);
      Range range3 = Range.ofLength(4785L);
      long long0 = (-128L);
      Range range4 = Range.of((-128L));
      range0.startsBefore(range2);
      Range.ofLength(0L);
      Range.ofLength(1009L);
      range3.isSubRangeOf(range4);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-128L), (-660L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.3535781515098884
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1353L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1353L);
      long long1 = (-264L);
      Range range1 = Range.of((-264L), 1353L);
      range1.endsBefore(range0);
      Range range2 = Range.of(1353L);
      range0.equals("rd!>");
      Object object0 = new Object();
      Object object1 = new Object();
      range2.equals(range0);
      // Undeclared exception!
      try { 
        Range.of(378L, (-264L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.3419868673205837
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 139L, 441L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of((-1149L));
      range0.startsBefore(range1);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      range1.endsBefore(range0);
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.641484391766931
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of(129L, 129L);
      Range range1 = range0.asRange();
      Range range2 = Range.ofLength(129L);
      Range range3 = range2.intersection(range0);
      Range.of((-1902774L));
      Long long0 = new Long(65535L);
      List<Range> list0 = range2.complement(range0);
      range3.complementFrom(list0);
      Range.of(65535L);
      range1.complementFrom(list0);
      long long1 = (-1946L);
      Range.of((-1946L), (-1233L));
      Range.of((-1392L), (-1392L));
      // Undeclared exception!
      try { 
        Range.of(255L, (-1946L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.110962765998967
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(0L, 1353L);
      Range.ofLength(2484L);
      range0.split(1353L);
      long long0 = (-280L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1353L, (-280L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.5648081325146665
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(2705L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775695L, 9223372036854775695L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.of((-2396L));
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
      
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      boolean boolean1 = range1.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      boolean boolean2 = range0.endsBefore(range1);
      assertFalse(boolean2 == boolean1);
      
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      List<Range> list0 = range0.split(1L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.376012467419817
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(114L);
      Range range1 = Range.ofLength(114L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.ofLength(1345L);
      Range range2 = range0.intersection(range1);
      range1.getLength();
      Range range3 = Range.of(4294967295L, 4294967295L);
      range3.intersects(range0);
      Object object0 = new Object();
      range2.isEmpty();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.of(114L, 34L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.5543391537307354
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of((-1300L), 2705L);
      range0.complement(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder();
      range0.startsBefore(range0);
      range0.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      range0.endsBefore(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.5912945898125166
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(1L);
      Range range1 = Range.of(129L);
      range1.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(29L);
      Range.of(1285L, 1285L);
      Range.of((-700L), 1285L);
      Range range3 = Range.of((-4167L), 3027L);
      range3.startsBefore(range2);
      range1.isSubRangeOf(range3);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.of(3573L, (-4167L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.245722306133545
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.expandEnd(670L);
      Range range0 = Range.of(670L, 65535L);
      Range range1 = Range.of(670L);
      range1.startsBefore(range0);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem.values();
      range0.endsBefore(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.713342277263526
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(9223372036852873031L);
      Range range1 = Range.of(65535L);
      List<Range> list0 = range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(2705L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1198L), 9223372036852873031L);
      Range range3 = range_Builder0.build();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range3.complement(range2);
      range0.complement(range1);
      range0.complementFrom(linkedList1);
      range3.complementFrom(list0);
      range2.intersection(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.3345713813271542
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = range_Builder1.build();
      Range range1 = Range.of(670L);
      Range range2 = Range.of(670L, 670L);
      range2.equals(range1);
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Range.Builder range_Builder3 = new Range.Builder();
      Range range3 = Range.of(670L);
      range1.startsBefore(range0);
      range3.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      range1.endsBefore(range2);
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf(" into a Range");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem. into a Range
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.301139645849776
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = range_Builder1.build();
      Range range1 = Range.of(670L);
      Range range2 = Range.of(286L, 286L);
      range2.equals(range1);
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Range.Builder range_Builder3 = new Range.Builder();
      Range range3 = Range.of(286L);
      range1.startsBefore(range0);
      range3.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      range1.endsBefore(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("l#u+,_yj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.l#u+,_yj
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.4242746329428124
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1353L);
      range0.equals(range_CoordinateSystem0);
      range0.endsBefore(range0);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      
      boolean boolean1 = range0.isEmpty();
      Range range1 = Range.of((-32768L));
      range0.startsBefore(range0);
      Range.Comparators.values();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = Range.of((-264L), 1353L);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Range.Builder range_Builder0 = new Range.Builder();
      boolean boolean2 = range1.startsBefore(range0);
      range2.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      boolean boolean3 = range2.endsBefore(range0);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = range0.endsBefore(range2);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.502094864737637
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 670L;
      range_Builder0.expandEnd(670L);
      Range range0 = Range.ofLength(65535L);
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      Range.of(2147483647L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2201L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.3241458622387348
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      range0.asRange();
      Range range1 = Range.ofLength(127L);
      range1.intersection(range0);
      Range.of(127L, 1345L);
      Range.of(127L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("o#o1bh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.o#o1bh
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.7456441933591886
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1353L);
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of((-264L), 1353L);
      Range range1 = Range.ofLength(1353L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 0L, 1784L);
      Range.Builder range_Builder1 = range_Builder0.shift(1353L);
      Range range2 = range_Builder0.build();
      range2.iterator();
      Range.of(229L);
      range_Builder1.contractBegin(0L);
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem2.toString();
      Range.of(1784L);
      Range.Builder range_Builder2 = range_Builder1.expandEnd(229L);
      assertSame(range_Builder0, range_Builder2);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.645925149366813
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of((-2147483648L));
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      range1.equals(range_CoordinateSystem0);
      Range range2 = Range.of((-2147483648L), (-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range range3 = Range.of(388L);
      range3.startsBefore(range2);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem.values();
      boolean boolean1 = range2.endsBefore(range1);
      assertTrue(boolean1 == boolean0);
      
      long long0 = range3.getBegin();
      assertEquals(388L, long0);
      
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range4 = range0.intersection(range3);
      assertTrue(range4.isEmpty());
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.495695750247913
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(7121055756871L);
      Range range1 = Range.ofLength(7121055756871L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 7121055756871 .. 7121055756872 ]/SB", string0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = Range.of(7121055756871L, 7121055756871L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.parseRange("[ 7121055756871 .. 7121055756872 ]/SB", range_CoordinateSystem1);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer1);
      Range.Builder range_Builder0 = new Range.Builder();
      range0.startsBefore(range1);
      boolean boolean0 = range1.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      Range range3 = Range.parseRange("[ 7121055756871 .. 7121055756872 ]/SB");
      range3.endsBefore(range0);
      boolean boolean1 = range1.endsBefore(range0);
      assertFalse(boolean1 == boolean0);
      assertSame(range0, range2);
      assertFalse(range1.isEmpty());
      assertNotSame(range0, range3);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.593798873018007
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1L);
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 4294967295L);
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range.parseRange("[ 0 .. 4294967294 ]/0B", range_CoordinateSystem0);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range1.forEach(consumer1);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.504564362854092
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(114L, 114L);
      Range range1 = Range.ofLength(114L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.isEmpty();
      Range range2 = Range.of(1668L);
      range1.startsBefore(range2);
      Range.Comparators.values();
      long long0 = 1954L;
      Range.ofLength(1954L);
      range1.isSubRangeOf(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 617L;
      Range.of(range_CoordinateSystem0, 114L, 113L);
      long long2 = (-1L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.1548331594979837
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(670L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long0 = new Long(670L);
      Range range1 = Range.ofLength(670L);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Range.Builder range_Builder1 = new Range.Builder();
      boolean boolean0 = range1.startsBefore(range0);
      range0.spliterator();
      range1.isSubRangeOf(range0);
      Range range2 = Range.ofLength(670L);
      boolean boolean1 = range0.endsBefore(range2);
      assertTrue(boolean1 == boolean0);
      
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = 9223372036852873031L;
      Range.of(9223372036852873031L);
      Range.of(9223372036852873031L);
      Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(353L);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(353L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.406005409493522
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.ofLength(9223372036852873031L);
      Range.of(9223372036852873031L);
      Range.of(9223372036852873031L, 9223372036852873031L);
      Range.of(1954L, 9223372036852873031L);
      long long0 = (-609L);
      Range.of((-9223372036854775796L), (-609L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("inputstream can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.inputstream can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.118894891962924
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.ofLength(65558L);
      Range.of(257L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 257L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.of(65558L, 4294967295L);
      Range.of(4294967295L, 4294967295L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.0594891092421146
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of((-1271L), 2705L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1618L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.4980766616000043
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1L);
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), 4294967295L);
      range0.intersection(range1);
      range0.getLength();
      range0.equals(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(object1);
      long long0 = 794L;
      Range range2 = Range.ofLength(794L);
      range2.getEnd();
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-1043L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.401420670595008
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-608L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-608L), 1574L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range range2 = Range.of(1574L);
      Range range3 = Range.of((-608L));
      range3.startsBefore(range2);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775695L, (-608L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -608 would make range [9223372036854775695 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.353683872513527
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775796L), (-9223372036854775796L));
      range0.getEnd();
      range0.complement(range0);
      long long0 = 9223372036852873031L;
      Range range1 = Range.of(9223372036852873031L);
      // Undeclared exception!
      try { 
        range1.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775797 would make range [9223372036852873031 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.897932597473466
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getEnd();
      String string0 = "org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache";
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.0026974323801805
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of((-264L), 1353L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-264L), (-75L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 32767L, 112L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.14458019683849
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(670L);
      Range range0 = Range.ofLength(670L);
      List<Range> list0 = range0.split(670L);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.9668267598925535
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(2765L, 2765L);
      range0.split(153L);
      List<Range> list0 = range0.split(1955L);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.347398399411561
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(114L, 114L);
      Range range1 = Range.ofLength(114L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long0 = new Long(114L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Range.Builder range_Builder0 = new Range.Builder();
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      
      range0.spliterator();
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem.values();
      boolean boolean1 = range0.endsBefore(range1);
      Range.Comparators.values();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean2 = range1.intersects(range0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean2 == boolean1);
      
      range0.complementFrom(linkedList0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.9381824546861237
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 802L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.6049921090002695
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-1043L), 0L);
      range0.equals(range_CoordinateSystem0);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.ofLength(1011L);
      Range range2 = range0.intersection(range1);
      range2.intersects(range0);
      Range range3 = Range.ofLength(4785L);
      long long0 = (-128L);
      Range range4 = Range.of((-128L));
      range0.startsBefore(range2);
      Range.ofLength(0L);
      Range range5 = Range.ofLength(1009L);
      range5.toString();
      range3.isSubRangeOf(range4);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-128L), (-660L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.17979323980706
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-41L), (-41L));
      range_Builder0.expandEnd(670L);
      Range.of(670L, 65535L);
      Range.of(65535L, 65535L);
      Range.Builder range_Builder2 = new Range.Builder(65535L);
      Range range0 = range_Builder2.build();
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.ofLength((-609L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.3870385339797515
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = 1353L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-264L), 1353L);
      Range.ofLength(1353L);
      range0.split(1353L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 1784L);
      range_Builder0.contractBegin(1353L);
      long long1 = (-3470L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1353L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.3378228964452252
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of((-1043L), 0L);
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 1784L);
      range_Builder0.contractBegin((-3470L));
      range0.getLength();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.087603047312437
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(9223372036852873031L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1692L, 9223372036852873031L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.9381824546861237
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 139L, 441L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.4206999264194464
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(114L, 114L);
      Range range1 = Range.ofLength(114L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long0 = new Long(114L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Range.of(114L);
      Range.Builder range_Builder0 = new Range.Builder();
      range0.startsBefore(range1);
      range0.spliterator();
      range0.isSubRangeOf(range1);
      range1.getBegin();
      Range.CoordinateSystem.values();
      range0.endsBefore(range1);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.1839025008182364
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder();
      Range range0 = Range.of(670L, 65535L);
      Range range1 = Range.of(65535L, 65535L);
      range1.startsBefore(range0);
      boolean boolean0 = range0.isSubRangeOf(range1);
      boolean boolean1 = range1.endsBefore(range0);
      assertFalse(boolean1);
      
      Range.CoordinateSystem.values();
      boolean boolean2 = range0.endsBefore(range1);
      assertTrue(boolean2 == boolean0);
      
      Range.Comparators.values();
      Range range2 = range1.asRange();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-30L), (-30L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.7612974284326706
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of((-2147483648L));
      range0.startsBefore(range1);
      range0.spliterator();
      Range range2 = Range.of(1330L, 1330L);
      boolean boolean0 = range1.isSubRangeOf(range2);
      Range.CoordinateSystem.values();
      range_Builder0.build();
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.isEmpty());
      
      Range.of((-2147483648L), (-83L));
      Range range3 = Range.of((-83L));
      boolean boolean1 = range1.endsBefore(range3);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.6027051384283197
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(9223372036852873031L);
      Range range1 = Range.of(9223372036852873031L);
      List<Range> list0 = range1.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 9223372036852873031L);
      Range range3 = range_Builder0.build();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range3.complementFrom(linkedList1);
      range0.complement(range2);
      range3.complementFrom(linkedList0);
      range2.complementFrom(list0);
      range2.intersection(range3);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.5423086917364217
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(9223372036852873031L);
      Range range1 = Range.of(129L);
      List<Range> list0 = range1.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 129L);
      range1.complementFrom(list0);
      Range.of(2L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range1);
      range_Builder2.copy();
      range_Builder2.build();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294967295L, (-1125L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.3433942030706123
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(9223372036852873031L);
      Range range1 = Range.of(65535L);
      range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-9223372036854775808L), (-259L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -260 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.2935873253398236
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = 9223372036852873031L;
      Range range0 = Range.of(9223372036852873031L);
      Range range1 = Range.of(9223372036852873031L);
      range1.complement(range0);
      Object object0 = new Object();
      range0.equals(object0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complement(range1);
      Object object1 = new Object();
      range1.iterator();
      long long1 = (-1L);
      Long long2 = new Long(9223372036852873031L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.parseRange("ZoY5[J\"[zKNrZ`M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ZoY5[J\"[zKNrZ`M into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.6027051384283197
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(9223372036852873031L);
      Range range1 = Range.of(65535L);
      List<Range> list0 = range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(2705L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1198L), 9223372036852873031L);
      Range range3 = range_Builder0.build();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range3.complementFrom(list0);
      range0.complement(range1);
      range0.complementFrom(linkedList1);
      range3.complementFrom(list0);
      range2.intersection(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.559275842367208
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.ofLength(2705L);
      range0.complement(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder();
      range0.startsBefore(range0);
      range0.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      range0.endsBefore(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.0450382972958727
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 26L, 255L);
      Range range1 = Range.ofLength(842L);
      range0.intersection(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.519353352611208
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(501L, 1348L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 501L, 501L);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = Range.of(range_CoordinateSystem0, (-3026L), 128L);
      range1.startsBefore(range0);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      range1.endsBefore(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.4548922289707957
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of((-608L));
      Range range1 = Range.ofLength(2147483647L);
      range1.intersection(range0);
      range1.getLength();
      long long0 = 4294967295L;
      Range range2 = Range.of(2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      range2.equals(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object3);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.1839025008182364
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.expandEnd(670L);
      Range range0 = Range.of(670L, 65535L);
      Range range1 = Range.of(65535L, 65535L);
      range1.startsBefore(range0);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem.values();
      range0.endsBefore(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.5067988296022516
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.build();
      Range range0 = Range.of(670L);
      Range.of(286L, 286L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder();
      Range range1 = Range.of(286L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder4 = new Range.Builder(range_CoordinateSystem0, (-1628L), 625L);
      Range range2 = range_Builder4.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complementFrom(linkedList0);
      range0.complement(range1);
      range2.complementFrom(linkedList0);
      range1.complementFrom(list0);
      range0.intersection(range2);
      Range.Comparators.values();
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.5036996256759467
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of(2705L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775695L, 9223372036854775695L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      range1.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Range range2 = Range.of(2705L);
      range2.equals("O/:y`f");
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range3 = Range.of((-1L), 2858L);
      range3.getBegin();
      Range.of(1329L, 1342L);
      String string0 = "Space Based";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Space Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Space Based
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of((-119L));
      // Undeclared exception!
      try { 
        range0.split((-119L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.267246881926398
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.ofLength(4784L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(object4);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-2L), 4784L);
      // Undeclared exception!
      try { 
        Range.of(1L, (-2L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.246828738589743
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.ofLength(1011L);
      Range.ofLength(4785L);
      Range.of((-128L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        Range.ofLength((-1955L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(0L, 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.368446457842076
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-3465L));
      range_Builder0.contractBegin((-1075L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd(670L);
      range_Builder1.copy();
      Range.ofLength(65535L);
      range_Builder0.expandBegin(314L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range0 = Range.ofLength(2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.3423560629361564
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-3465L));
      long long0 = (-1075L);
      range_Builder0.contractBegin((-1075L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd(670L);
      range_Builder1.shift(2147483647L);
      range_Builder1.copy();
      range_Builder0.contractEnd(127L);
      Range.ofLength(65535L);
      long long1 = 304L;
      range_Builder1.expandEnd(2147483647L);
      range_Builder0.expandBegin(304L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      // Undeclared exception!
      try { 
        Range.of(65535L, 304L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(159L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = (-1911L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1911L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.1410870058689966
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of(670L, 670L);
      Range.Builder range_Builder1 = new Range.Builder(670L);
      range_Builder1.build();
      // Undeclared exception!
      try { 
        Range.ofLength((-609L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775695L, (-516L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -517 would make range [9223372036854775694 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.7519159690311215
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(9223372036854775807L);
      Long long1 = new Long((-1116L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(285L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      assertFalse(linkedList2.contains(range0));
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.of((-1050L), (-1271L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.1330252472126636
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of((-264L), 1353L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.of(32767L, 112L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
