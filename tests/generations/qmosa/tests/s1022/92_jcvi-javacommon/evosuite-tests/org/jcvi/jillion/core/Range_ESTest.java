/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 03:41:25 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.877367845988757
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(664L, 664L);
      Range range1 = Range.ofLength(664L);
      Range range2 = Range.of(2265L);
      range0.equals(range2);
      Long long0 = new Long((-470L));
      range1.intersection(range2);
      Range.parseRange("^8,7X?Nve");
      Long long1 = new Long((-470L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.add(range1);
      Range.of(225L);
      // Undeclared exception!
      try { 
        Range.ofLength((-470L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.57787291806302
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775579L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.startsBefore(range0);
      range1.equals(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 255L, 9223372036854775807L);
      range0.equals(range2);
      Object object3 = new Object();
      Object object4 = new Object();
      Range range3 = Range.ofLength(2147483647L);
      range2.equals(range3);
      Object object5 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range3.forEach(consumer0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3456710349775833
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 1L;
      Range range0 = Range.ofLength(3207L);
      range0.equals(range_CoordinateSystem0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 3207L);
      String string0 = "";
      range1.equals("");
      Object object3 = new Object();
      range0.equals(range1);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      long long1 = (-302L);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-302L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.903623841181873
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483655L), 1618L);
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483655L), (-2147483655L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Range range2 = Range.of(range_CoordinateSystem0, (-2147483655L), (-2147483655L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range3 = Range.of((-301L));
      range2.equals(range3);
      Object object3 = new Object();
      range1.equals((Object) null);
      Object object4 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Object object5 = new Object();
      Object object6 = new Object();
      range0.intersection(range2);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.9195453648511713
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of(664L, 664L);
      Range range1 = Range.ofLength(664L);
      Range range2 = Range.of(2265L);
      range0.equals(range2);
      Long long0 = new Long((-470L));
      range1.intersection(range2);
      Long long1 = new Long(255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range2.equals(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(range1);
      Object object2 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Object object3 = new Object();
      Object object4 = new Object();
      Range range3 = range0.intersection(range1);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
      //  // Unstable assertion: assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2953576177629293
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(3207L);
      range0.equals(range_CoordinateSystem0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 3207L);
      range1.equals(range_CoordinateSystem0);
      Object object3 = new Object();
      range1.equals(range0);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 3207L, (-464L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.557765320626558
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = 9223372036854775579L;
      Range range0 = Range.ofLength(9223372036854775579L);
      Range range1 = Range.of(9223372036854775579L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775579L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -459 would make range [9223372036854775579 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.7293650834968948
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 0L);
      assertTrue(range2.isEmpty());
      
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-4294967947L));
      Object object2 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem2, 1L, 9223372036854743041L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem3, 9223372036854743041L, 9223372036854775538L);
      range0.intersection(range3);
      Range range4 = Range.of(range_CoordinateSystem3, 988L, (-9223372036854775808L));
      assertFalse(range4.isEmpty());
      
      range3.intersection(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range3.equals((Object)range4));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.9352883744000926
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(9223372036854775537L);
      Range range1 = Range.of(9223372036854775537L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      List<Range> list0 = range1.split(9223372036854775538L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 9223372036854775537L, 9223372036854775537L);
      Long long0 = new Long(9223372036854775537L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem2);
      range2.complementFrom(list0);
      range2.complementFrom(list0);
      range2.getEnd(range_CoordinateSystem0);
      List<Range> list1 = range1.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range3 = Range.of((-374L));
      linkedList0.add(range3);
      Range range4 = Range.of(9223372036854775537L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range4.forEach(consumer0);
      // Undeclared exception!
      try { 
        range3.complementFrom(list1);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -374 would make range [9223372036854775537 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.5207659877951056
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775579L);
      range0.equals(range0);
      Range.CoordinateSystem.values();
      Range range1 = Range.of(9223372036854775579L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range1.equals(object2);
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(object4);
      Object object5 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object6 = new Object();
      Range range2 = range0.intersection(range1);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=4.0357973688211315
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775579L);
      Range range1 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range.CoordinateSystem.values();
      Range.of(9223372036854775579L);
      Range range2 = Range.ofLength(9223372036854775807L);
      Range range3 = Range.ofLength(9223372036854775807L);
      List<Range> list0 = range3.complement(range0);
      range0.complementFrom(list0);
      Range range4 = Range.ofLength(9223372036854775579L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range4.forEach(consumer0);
      Range range5 = Range.of(9223372036854775579L);
      List<Range> list1 = range1.complement(range4);
      List<Range> list2 = range2.complementFrom(list1);
      //  // Unstable assertion: assertEquals(0, list2.size());
      
      Range.of((-358L));
      Range range6 = range1.intersection(range4);
      //  // Unstable assertion: assertSame(range4, range6);
      
      range1.asRange();
      //  // Unstable assertion: assertFalse(range1.equals((Object)range5));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.5484669559787645
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-2147483648L), 1583L);
      Range.of((-2147483648L));
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 1583L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.5879032873705623
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = (-1006L);
      long long1 = (-653L);
      Range range0 = Range.of((-1006L), (-653L));
      Range range1 = Range.of((-653L));
      range0.intersects(range1);
      range1.equals(range0);
      Range.CoordinateSystem.values();
      Range.of((-653L));
      // Undeclared exception!
      try { 
        Range.ofLength((-653L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.49184973626665
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 670L;
      Range range0 = Range.of((-1L), 670L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1271L), 670L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 670L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.541992110302383
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = 32767L;
      Range range0 = Range.of(32767L, 9223372036854775681L);
      Range.ofLength(9223372036854775681L);
      range0.equals((Object) null);
      Range.CoordinateSystem.values();
      Range.ofLength(32767L);
      // Undeclared exception!
      try { 
        Range.ofLength((-199L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.704344864728906
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.ofLength(1L);
      Long.valueOf(1L);
      Range.of(266L, 2282L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 266L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 266L, 4294967295L);
      Object object0 = new Object();
      range0.equals("");
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 290L, 1503L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(255L, 2282L);
      List<Range> list0 = range2.split(1L);
      // Undeclared exception!
      range1.complementFrom(list0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.8654057578761707
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of(9223372036854775579L);
      Range range1 = Range.of(9223372036854775579L);
      range0.intersects(range1);
      range0.complement(range0);
      Range range2 = Range.ofLength(9223372036854775579L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      range2.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 32767L;
      Range.of(range_CoordinateSystem1, 581L, 32767L);
      range3.equals(range_CoordinateSystem1);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 207L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.402764703463285
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      long long0 = 4294967295L;
      Long long1 = new Long(4294967295L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(4294967295L);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = 9223372036854775807L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem1, 9223372036854775807L, 9223372036854773293L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.848158259768426
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = 9223372036854775537L;
      Range range0 = Range.of(9223372036854775537L);
      range0.spliterator();
      Range range1 = Range.of(9223372036854775537L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 9223372036854775537L, 9223372036854775537L);
      Range range3 = Range.of(2147483472L);
      range1.equals(range2);
      Long long1 = new Long((-4347L));
      Range range4 = range1.intersection(range3);
      Long long2 = new Long((-2065L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      range4.complementFrom(linkedList2);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 9223372036854775538L, 9223372036854775537L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.7030752603903236
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Object object0 = new Object();
      range0.equals(object0);
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder((-711L), 0L);
      Range range1 = range_Builder0.build();
      Long long0 = new Long(1073L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(3001L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long1 = (-177L);
      // Undeclared exception!
      try { 
        Range.ofLength((-24L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=4.095020277377161
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-2147483655L));
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483655L), (-2147483655L));
      range1.equals(range0);
      Range range2 = Range.of(range_CoordinateSystem0, (-2147483655L), (-301L));
      Range.CoordinateSystem.values();
      Range range3 = range1.asRange();
      range2.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range4 = range_Builder0.build();
      Long long0 = new Long(0L);
      range_Builder0.expandBegin((-3198L));
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range3);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Range.of((-177L));
      range4.complement(range0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Object object0 = new Object();
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=4.016199057861405
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483655L), 1618L);
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483655L), (-2147483655L));
      range1.equals(range0);
      Range range2 = Range.of(range_CoordinateSystem0, (-2147483655L), (-309L));
      Range.CoordinateSystem.values();
      Range range3 = range2.intersection(range0);
      range3.asRange();
      range2.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(3393L, 3393L);
      Range range4 = range_Builder0.build();
      Long long0 = new Long(0L);
      range_Builder0.expandBegin((-3187L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-3393L), 9987L);
      range1.intersection(range4);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem3, 307L, 307L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 3393L, 3252L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.5543026475751325
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775579L);
      Range range1 = Range.of(707L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals(object2);
      Object object3 = new Object();
      boolean boolean1 = range1.equals(range0);
      assertTrue(boolean1 == boolean0);
      
      Object object4 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object5 = new Object();
      Object object6 = new Object();
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1925863485716692
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-32768L);
      Range range0 = Range.of((-32768L));
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=4.027457516459561
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-620L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range range1 = Range.ofLength(4294967301L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967301L, 4294967301L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long0 = 875L;
      range_Builder1.expandBegin(875L);
      Range.Builder range_Builder2 = new Range.Builder(49L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add((Range) null);
      linkedList0.add(range1);
      // Undeclared exception!
      try { 
        range1.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The second parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.4673929844050857
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object2);
      Object object3 = new Object();
      range0.equals((Object) null);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      // Undeclared exception!
      try { 
        Range.parseRange("(;MH20mqe,10");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse (;MH20mqe,10 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.866749731750013
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.ofLength(1928L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1928L);
      long long0 = 859L;
      Range range1 = Range.ofLength(1928L);
      Range.Builder range_Builder2 = range_Builder0.expandBegin(9223372032559806368L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      range_Builder3.build();
      range_Builder1.expandBegin(4294L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      range_Builder4.contractBegin(244L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      linkedList0.add((Range) null);
      linkedList0.add(range0);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The first parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.437240382221239
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of(6090L, 9223372036854774449L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of(924L, 6090L);
      range0.equals("org.jcvi.jillion.core.Range$1");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object2 = new Object();
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.31975773181139
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long long0 = (-1L);
      Range.of((-1223L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin((-1223L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.757929087444002
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483655L), 1618L);
      range0.equals(range0);
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483655L), (-302L));
      Range.CoordinateSystem.values();
      Range range2 = range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.iterator();
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 127L;
      Range.of(range_CoordinateSystem1, (-2147483655L), 127L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range2.complementFrom(linkedList1);
      // Undeclared exception!
      range1.split(127L);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.5123548294273754
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.of(664L, 664L);
      Range range0 = Range.ofLength(664L);
      range0.equals((Object) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of(664L, 664L);
      try { 
        Long.valueOf((String) null, 3);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.582125145771378
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-1L), 4294967295L);
      Range.CoordinateSystem.values();
      Range range1 = range0.asRange();
      range1.equals(range0);
      long long0 = 3393L;
      long long1 = 3995L;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(8712L, 3995L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.6125568028378754
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 1L;
      Range.ofLength(1L);
      Long.valueOf(1L);
      Range.of(266L, 2282L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 266L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 266L, 4294967295L);
      Object object0 = new Object();
      range0.equals("");
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 2230L, 266L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.6402415607263237
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = (-2147483648L);
      long long1 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 1575L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 32767L, 32767L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.3280084721129053
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(9223372036854775601L);
      Object object0 = new Object();
      range0.equals(range0);
      Object object1 = new Object();
      Object object2 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object3 = new Object();
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=4.097996192016285
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range2 = range0.asRange();
      Long long0 = new Long(266L);
      Range.ofLength(1L);
      boolean boolean0 = range0.equals(range2);
      assertTrue(boolean0);
      
      range0.iterator();
      assertFalse(range0.isEmpty());
      
      Range.of((-9223372036854775808L));
      Range.of(672L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 4294966623L, 4294967295L);
      Range range4 = range1.intersection(range3);
      assertTrue(range4.isEmpty());
      
      Range range5 = Range.ofLength(797L);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.379071374912653
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(9223372036854775579L);
      long long0 = 4294967295L;
      Range.ofLength(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      Long long1 = new Long(3690L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range0.equals(object5);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775579L, 4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=4.212879122217551
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483655L), 1618L);
      Range range1 = Range.of((-2147483655L));
      range1.equals(range0);
      Range range2 = Range.of(range_CoordinateSystem0, (-2147483655L), (-302L));
      Range.CoordinateSystem.values();
      Range range3 = range1.asRange();
      range2.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(3393L, 3393L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(2147483354L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range4 = range_Builder0.build();
      Long long0 = new Long((-470L));
      Range.Builder range_Builder3 = new Range.Builder(127L);
      Range.Builder range_Builder4 = range_Builder3.expandBegin((-1L));
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Range range5 = Range.of((-2147473668L));
      range3.complement(range5);
      List<Range> list0 = range4.complementFrom(linkedList0);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range2));
      
      Range.of(9223372036854775807L);
      Range range6 = range1.intersection(range3);
      Range range7 = range1.asRange();
      assertSame(range7, range6);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.4200900506229734
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 4294967311L;
      long long1 = (-302L);
      range_Builder0.expandBegin((-302L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967311L, 9223372036854773662L);
      long long2 = (-297L);
      Long long3 = new Long((-297L));
      range0.equals(range_Builder0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-23L));
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_Builder1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.9175090710420144
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      Range range1 = Range.ofLength(127L);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 127L, 127L);
      Range range3 = range2.asRange();
      range2.intersects(range3);
      Long.getLong("8WfYS=@ZsYI(CF");
      range2.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getEnd(range_CoordinateSystem1);
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.264264375053301
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 9223372036854775601L);
      Object object0 = null;
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775601L, (-2147473664L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147473664 would make range [9223372036854775601 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.282280414466573
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774449L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object2);
      Object object3 = new Object();
      boolean boolean0 = range0.equals("(;MH20mqe,10");
      assertFalse(boolean0);
      
      Object object4 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object5 = new Object();
      Object object6 = new Object();
      Range range1 = range0.intersection(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.8532939555078687
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-176L));
      Range range1 = Range.of((-2147483648L));
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-176L), (-176L));
      range2.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem3, (-2547L), 2202L);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      assertEquals("Residue Based", range_CoordinateSystem4.toString());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.3956041225346545
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = 3102L;
      Range range0 = Range.of(3102L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.4459414386001623
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854773662L);
      Long long0 = new Long((-1201L));
      Range.of(range_CoordinateSystem0, (-1995L), 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem1, 0L, (-1995L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.4053913599588315
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      Range range1 = Range.of(127L, 127L);
      range1.equals(range0);
      long long0 = (-2988L);
      // Undeclared exception!
      try { 
        Range.of(127L, (-2988L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.2397208470799024
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long long0 = (-18L);
      Range.of((-18L));
      long long1 = (-2147483648L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-2147483648L), (-2147483648L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.769932695347808
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 670L, 670L);
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object3);
      Object object4 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Object object5 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object6 = new Object();
      Object object7 = new Object();
      Range range1 = Range.of(65535L, 65535L);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.537729898556888
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(0L);
      range0.equals(range_CoordinateSystem0);
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 0L, 0L);
      Object object0 = new Object();
      Object object1 = new Object();
      long long0 = 1644L;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 769L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 1592L, 769L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.828225708188433
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      assertFalse(range0.isEmpty());
      
      Range.of(266L, 4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-2463L));
      Range.Builder range_Builder0 = new Range.Builder(2354L);
      Range range1 = range_Builder0.build();
      Range.of((-2528L), 2147483647L);
      Range.of(9223372036854773661L);
      range1.complementFrom(linkedList0);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=4.160865179244856
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(664L);
      Range.Builder range_Builder0 = new Range.Builder(2293L, 2293L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(664L);
      Range range1 = Range.ofLength(65535L);
      range_Builder1.expandBegin(65535L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range2 = range_Builder2.build();
      range_Builder0.expandBegin(304L);
      range_Builder1.contractBegin(664L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      linkedList0.add(range1);
      linkedList0.removeFirstOccurrence(range_Builder0);
      linkedList0.add(range2);
      range2.complementFrom(linkedList0);
      Range.Builder range_Builder3 = new Range.Builder(664L);
      Range.of((-4118L));
      range0.intersection(range1);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Range coordinates %d, %d are not valid %s coordinates");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Range coordinates %d, %d are not valid %s coordinates
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=4.069576008507093
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1353L, 1618L);
      Range range1 = Range.of(1353L);
      Range range2 = Range.of(127L, 5205L);
      Range range3 = Range.ofLength(127L);
      Range.of((-1516L));
      Range range4 = Range.of((-1L), 127L);
      range4.complement(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 690L, 845L);
      range0.complement(range1);
      Range.of(range_CoordinateSystem0, 1814L, 9223372036854774454L);
      range3.intersection(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.core.Range$UnsignedByteStartShortLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.core.Range$UnsignedByteStartShortLengthRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.5468410810001596
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = 9223372036854775579L;
      Range range0 = Range.of(9223372036854775579L);
      Range range1 = Range.of(9223372036854775579L);
      range0.intersects(range1);
      range1.complement(range0);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-541L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 9223372036854775579L, (-541L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -541 would make range [9223372036854775579 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.5589255848276404
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      Range range1 = Range.ofLength(127L);
      range1.equals(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object0);
      Object object3 = new Object();
      range1.equals(consumer0);
      Object object4 = new Object();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Object object5 = new Object();
      Object object6 = new Object();
      // Undeclared exception!
      try { 
        Range.of(127L, (-2739L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.3961222179333994
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774449L);
      Range range1 = Range.of(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals(object2);
      Object object3 = new Object();
      boolean boolean1 = range1.equals("(;MH20mqe,10");
      assertTrue(boolean1 == boolean0);
      
      Object object4 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object5 = new Object();
      Object object6 = new Object();
      Range range2 = range1.intersection(range0);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.3817195144408756
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Long long0 = new Long((-1201L));
      Range.of(range_CoordinateSystem0, (-1995L), 0L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-611L), 9223372036854775681L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.4500027198890115
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.equals(range_CoordinateSystem0);
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 0L, 0L);
      Object object0 = new Object();
      Object object1 = new Object();
      long long0 = 1644L;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 769L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 1371L, 769L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.849680336880862
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = (-18L);
      Range range0 = Range.of((-18L));
      long long1 = (-2147483648L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      range0.complement(range1);
      Range range2 = Range.of((-18L));
      range2.asRange();
      range0.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        range2.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.779228641468243
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-1271L));
      range_Builder0.expandEnd((-1271L));
      range_Builder0.contractBegin((-3085L));
      Range.of((-1271L), 255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 0L;
      Range.of(0L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, (-9223372036854774447L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854774447 would make range [4294967295 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.943434245924464
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 0L, 1L);
      Range range0 = Range.of(range_CoordinateSystem0, (-2397L), 1L);
      List<Range> list0 = new LinkedList<Range>();
      Range range1 = Range.of((-2147483629L));
      Range range2 = range0.asRange();
      Range range3 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range3.isSubRangeOf(range1);
      Range.CoordinateSystem.values();
      Range.of(range_CoordinateSystem1, (-688L), 255L);
      // Undeclared exception!
      try { 
        range2.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=4.018868814261036
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(685L, 685L);
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(685L, 65535L);
      Range range2 = Range.ofLength(685L);
      Range.of((-1L), 32767L);
      range2.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem1, (-2988L), 2588L);
      range2.complement(range0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 1414L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=4.180037246309706
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(304L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder3 = range_Builder1.expandBegin(304L);
      range_Builder3.contractBegin(304L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range.Builder range_Builder4 = new Range.Builder(304L);
      Range.of(362L);
      range1.intersection(range0);
      Range range2 = Range.of(1113L, 32767L);
      range2.intersection(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Range coordinates %d, %d are not valid %s coordinates");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Range coordinates %d, %d are not valid %s coordinates
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.1459983229767676
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.656685407099163
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(9223372036854775579L);
      Range range1 = Range.of(9223372036854775579L);
      boolean boolean0 = range0.intersects(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertFalse(list0.isEmpty());
      
      Range range2 = Range.ofLength(1L);
      range0.getLength();
      List<Range> list1 = range2.split(1L);
      //  // Unstable assertion: assertTrue(list1.contains(range2));
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      Range range3 = Range.ofLength(664L);
      //  // Unstable assertion: assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.6544936718497665
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.of(9223372036854775579L);
      Range range0 = Range.of(304L);
      range0.split(409L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object2);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      
      Object object3 = new Object();
      Range range1 = Range.ofLength(304L);
      Range range2 = Range.ofLength(2590L);
      //  // Unstable assertion: assertNotSame(range2, range1);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.886203792209481
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of((-1L), 4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long0 = 1660L;
      Range.of(1660L);
      Range.Builder range_Builder1 = new Range.Builder(705L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 1660L, 4294967295L);
      // Undeclared exception!
      try { 
        Range.of(1068L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=4.225458082579083
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(670L);
      Range range0 = Range.ofLength(65535L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(304L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      range_Builder1.expandBegin(304L);
      range_Builder1.contractBegin(362L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range range2 = Range.of(362L);
      linkedList0.add(range2);
      linkedList0.add(range1);
      range1.complementFrom(linkedList0);
      Range.Builder range_Builder3 = new Range.Builder(65535L);
      Range range3 = range0.intersection(range2);
      range2.intersection(range3);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("SHORTEST_TO_LONGEST");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.SHORTEST_TO_LONGEST
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.483567388445162
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of((-35314L));
      Object object0 = new Object();
      Long long0 = new Long((-236L));
      range0.equals(long0);
      Object object1 = new Object();
      Object object2 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.8506349963108364
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-176L));
      Range range1 = Range.of((-2147483648L));
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-176L), (-176L));
      range2.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem3, (-176L), 2202L);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      assertNotSame(range_CoordinateSystem4, range_CoordinateSystem1);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.8351503465510133
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.of(9223372036854775579L);
      Range range0 = Range.of(305L, 305L);
      assertFalse(range0.isEmpty());
      
      Range.of(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-9223372036854775808L));
      Range.Builder range_Builder0 = new Range.Builder(705L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
      
      Range.of((-2029L), 65534L);
      Range range2 = Range.of(705L);
      assertNotSame(range2, range0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.6151781208718576
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = 1360L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1360L, 1618L);
      Range range1 = Range.of(range_CoordinateSystem0, 1360L, 1360L);
      range1.equals(range0);
      Range range2 = Range.of((-258L), 1360L);
      Long long1 = Long.valueOf(1360L);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-258L), 1360L);
      Object object1 = new Object();
      range2.equals(long1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem1, 1360L, (-406L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.963951831523088
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(670L, 670L);
      Range range0 = Range.ofLength(65535L);
      Range.Builder range_Builder2 = range_Builder0.expandBegin(670L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range_Builder2.expandBegin((-1029L));
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      
      Range range1 = Range.of(65535L);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertNotSame(range2, range1);
      //  // Unstable assertion: assertFalse(range2.equals((Object)range1));
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.354100214318228
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Range.of((-128L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.846348198527308
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(670L, 670L);
      Range range0 = Range.ofLength(65535L);
      Range.Builder range_Builder2 = range_Builder0.expandBegin(304L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range_Builder2.expandBegin((-1029L));
      Range.Builder range_Builder4 = new Range.Builder();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range1 = Range.of(304L, 65535L);
      range1.complement(range0);
      Range.of(304L);
      // Undeclared exception!
      try { 
        Range.of(9223372032559808513L, (-1029L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.5006678114313647
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.of((-1006L), (-653L));
      Range.of((-653L));
      Range.of((-653L));
      Range.Builder range_Builder0 = new Range.Builder();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-794L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -794 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.7471483114309185
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of(9223372036854775579L);
      Range range1 = Range.of(9223372036854775579L);
      range0.intersects(range1);
      range1.complement(range0);
      Range range2 = Range.ofLength(4294967295L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range2.forEach(consumer0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.165754881412656
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(32767L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.750654106309853
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(664L, 664L);
      Range range1 = Range.of(2265L);
      range0.equals(range1);
      Long long0 = new Long((-470L));
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      Long long1 = new Long(255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.add(range0);
      assertFalse(range0.isEmpty());
      
      Range range3 = Range.of(225L);
      Range.ofLength(255L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range4 = Range.ofLength(225L);
      assertFalse(range4.isEmpty());
      assertFalse(range4.equals((Object)range3));
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.738843374086925
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(664L, 664L);
      Range range1 = Range.ofLength(664L);
      range0.equals(range0);
      Long long0 = new Long((-470L));
      Range range2 = range1.intersection(range0);
      Long long1 = new Long(255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.add(range1);
      //  // Unstable assertion: assertTrue(linkedList0.contains(range2));
      
      Range.of(225L);
      Range range3 = Range.ofLength(255L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range4 = Range.ofLength(225L);
      //  // Unstable assertion: assertNotSame(range4, range3);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.831992863473256
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.ofLength(1L);
      Long.valueOf(1L);
      long long0 = 2282L;
      Range range0 = Range.of(266L, 2282L);
      Range range1 = Range.of(1845L);
      Range range2 = Range.ofLength(4294967295L);
      Range.ofLength(2282L);
      range1.complement(range0);
      Collection<Range> collection0 = null;
      // Undeclared exception!
      try { 
        range2.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.7818227807360874
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 670L;
      Range.of((-1L), 670L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(670L);
      Range.Builder range_Builder1 = new Range.Builder(1262L);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder2.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.846993235926048
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      Range range1 = range0.asRange();
      Range range2 = Range.ofLength(127L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem.values();
      Range range3 = Range.of(127L);
      Range range4 = Range.of(127L, 127L);
      range2.endsBefore(range0);
      Range.Builder range_Builder0 = new Range.Builder(range3);
      range_Builder0.expandEnd(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range3.getBegin(range_CoordinateSystem0);
      range4.getBegin();
      range3.intersects(range1);
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("0B", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.8119146178124996
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = (-653L);
      Range range0 = Range.of((-2509L), (-2509L));
      Range range1 = Range.of(1491L);
      range1.intersects(range0);
      long long1 = (-2147473665L);
      Range range2 = Range.of((-2147473665L));
      range0.equals(range2);
      Range.CoordinateSystem.values();
      Range.of((-653L));
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.919998630120175
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Long long0 = new Long(4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-600L), 1053L);
      Range.ofLength(2756L);
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.complement(range0);
      Range.of(1111L);
      Range range3 = range2.intersection(range1);
      Range range4 = Range.of((-1201L));
      assertFalse(range4.isEmpty());
      
      range0.intersection(range3);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.9336302446525155
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      Range range1 = range0.asRange();
      Range range2 = Range.ofLength(127L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem.values();
      Range range3 = Range.of(127L);
      Range range4 = Range.of(127L, 127L);
      Range range5 = range3.intersection(range0);
      Range range6 = range4.intersection(range5);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.isSubRangeOf(range3);
      Range.CoordinateSystem.values();
      range2.complement(range6);
      // Undeclared exception!
      try { 
        range6.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.968862973899904
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      Range range1 = Range.of(127L, 127L);
      Range range2 = Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.expandBegin(683L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range range3 = Range.of(4294967295L);
      assertFalse(range3.isEmpty());
      
      Range.Builder range_Builder4 = new Range.Builder(255L);
      Range.Builder range_Builder5 = new Range.Builder();
      Range range4 = range_Builder5.build();
      Range.of(255L, 255L);
      Range range5 = Range.of((-974L));
      assertFalse(range5.equals((Object)range3));
      
      Range range6 = range1.intersection(range2);
      assertTrue(range6.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range4.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.983556218600004
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.intersects(range0);
      range2.complement(range0);
      Range range3 = range1.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.complement(range3);
      Range.of(0L);
      Range range4 = Range.of((-886L), (-1L));
      range0.intersection(range4);
      Range range5 = Range.of((-1073L));
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.7071459938437585
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-32768L));
      Range range2 = Range.of(0L, 2498L);
      assertFalse(range2.isEmpty());
      
      Object object0 = new Object();
      Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals((-32767L), long0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=4.046729777662974
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range.of((-4333L), 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range range1 = Range.of(0L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range_Builder0.expandBegin((-29L));
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList0.add(range1);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of((-4015L), (-2423L));
      List<Range> list0 = range0.complement(range2);
      range2.complementFrom(list0);
      Range range3 = Range.of((-4333L));
      Range range4 = range3.intersection(range2);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.720551632423639
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long long0 = 664L;
      Range.of(402L, 664L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 0L;
      Range range0 = Range.ofLength(0L);
      Range.of(0L);
      range0.equals(range_CoordinateSystem0);
      long long2 = (-1L);
      Long long3 = new Long(2265L);
      Object object0 = new Object();
      range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem2, (-9223372036854775808L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.9928764449331173
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(670L, 670L);
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.ofLength(304L);
      Range range2 = Range.of((-2988L), (-2513L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      Range range3 = Range.ofLength(304L);
      Range range4 = Range.of((-195L), 304L);
      List<Range> list0 = range3.complement(range4);
      assertEquals(0, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem1, (-195L), 845L);
      range0.complement(range3);
      range1.intersection(range3);
      List<Range> list1 = range1.complement(range2);
      assertTrue(list1.contains(range1));
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.9569302624580196
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1L));
      Range range0 = Range.ofLength(859L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin(507L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder2.build();
      range_Builder0.expandBegin((-1L));
      range_Builder1.contractBegin((-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      Range.CoordinateSystem.values();
      Range range2 = Range.of((-1947L));
      Range range3 = range2.intersection(range1);
      range3.intersection(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.874560870063184
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(9223372036854775537L);
      Range range1 = Range.of(9223372036854775537L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      List<Range> list0 = range1.split(9223372036854775538L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 9223372036854775537L, 9223372036854775537L);
      Long long0 = new Long(9223372036854775537L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem2);
      //  // Unstable assertion: assertEquals("[ 9223372036854775538 .. 9223372036854775538 ]/RB", string0);
      
      range2.complementFrom(list0);
      List<Range> list1 = range2.complementFrom(list0);
      range2.getEnd(range_CoordinateSystem0);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem3);
      Range.CoordinateSystem.values();
      Range range3 = Range.parseRange("[ 9223372036854775538 .. 9223372036854775538 ]/RB", range_CoordinateSystem1);
      range0.complement(range2);
      range2.complementFrom(list1);
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      //  // Unstable assertion: assertEquals(1, list1.size());
      
      Range range4 = Range.of(127L);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      
      Range range5 = range2.intersection(range3);
      range2.asRange();
      //  // Unstable assertion: assertFalse(range2.equals((Object)range5));
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.9219544165880373
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.of(9223372036854775579L);
      range0.intersects(range1);
      range0.complement(range1);
      Range range2 = Range.ofLength(9223372036854775145L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem.values();
      Range range3 = Range.of((-967L));
      range3.intersection(range2);
      // Undeclared exception!
      try { 
        range1.intersection(range3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -967 would make range [9223372036854775579 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=4.123774258288021
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1L));
      Range range0 = Range.ofLength(859L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin(507L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder2.build();
      range_Builder0.expandBegin((-1L));
      range_Builder1.contractBegin((-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      linkedList0.add(range1);
      range0.complementFrom(linkedList0);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder((-2724L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=4.128249907170407
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of((-4333L));
      Range range1 = Range.of((-600L), (-298L));
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.expandBegin((-2L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-1L), 2233L);
      Range range3 = range1.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.isSubRangeOf(range2);
      Range.CoordinateSystem.values();
      range3.isSubRangeOf(range2);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range range4 = Range.ofLength(2233L);
      range4.complement(range2);
      range4.endsBefore(range1);
      Range.CoordinateSystem.values();
      Range.of(169L);
      range2.startsBefore(range3);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertNotSame(range_CoordinateSystemArray1, range_CoordinateSystemArray0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=4.081321282883508
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(664L, 664L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 664L, 664L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.endsBefore(range0);
      Range range2 = Range.of((-128L));
      Range range3 = Range.of(range_CoordinateSystem0, 664L, 664L);
      Range range4 = range3.asRange();
      range1.endsBefore(range2);
      Range.ofLength(664L);
      Object object0 = new Object();
      List<Range> list0 = range4.complement(range0);
      range1.complementFrom(list0);
      Range.of(664L);
      range2.intersection(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.904350816555439
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = 664L;
      Range range0 = Range.of(664L, 664L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.complement(range0);
      range0.endsBefore(range0);
      Range range1 = Range.of((-128L));
      Range range2 = Range.of(range_CoordinateSystem0, 664L, 664L);
      range2.asRange();
      range0.endsBefore(range1);
      range0.isSubRangeOf(range2);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 602L, (-449L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.4950861174394925
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(9223372036854775542L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals("1;}(.2a*Iw\".3");
      Object object3 = new Object();
      Object object4 = new Object();
      Range range1 = Range.ofLength(4294967295L);
      range1.equals(object3);
      Object object5 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range1.forEach(consumer0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.8758208327740444
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of((-1L), 4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range_Builder0.copy();
      Range range0 = Range.of(1660L);
      range_Builder0.build();
      Range.of((-1L), 255L);
      Range range1 = Range.of(1660L);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.5035034775050047
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = 127L;
      Range.of(127L, 127L);
      long long1 = 4294967295L;
      Range.ofLength(680L);
      Long.valueOf(680L);
      Range.of(1941L, 2282L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 1941L, 1941L);
      range0.getBegin();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967295L, (-195L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=4.026365485257472
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Long long0 = new Long(4294967295L);
      range0.spliterator();
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-600L), 1053L);
      range1.isSubRangeOf(range0);
      Range.ofLength(2756L);
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.complement(range0);
      Range range3 = Range.of(1111L);
      range2.intersection(range1);
      Range range4 = Range.of((-1201L));
      assertFalse(range4.equals((Object)range3));
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.1792007145348498
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.7534937692840167
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-1223L));
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-32768L), 1636L);
      Range range3 = range1.intersection(range2);
      assertTrue(range3.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.6819581596305837
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-1223L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-295L), (-195L));
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-195L), (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.97967838245482
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1L);
      Range range1 = Range.of(range_CoordinateSystem0, (-2397L), 1L);
      range0.complement(range1);
      Range range2 = Range.of((-2147483629L));
      range1.asRange();
      Range range3 = range1.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = null;
      range3.isSubRangeOf(range2);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.4757788902418008
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.parseRange("p+Zm]1-4rxoE\"XE;#");
      // Undeclared exception!
      try { 
        Range.of(32767L, 815L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.3345273820231456
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.isEmpty();
      Object object4 = new Object();
      Object object5 = new Object();
      // Undeclared exception!
      try { 
        Range.of((-1546L), 9223372036854775579L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.815156834159608
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = (-4333L);
      Range range0 = Range.of((-4333L));
      Range range1 = Range.of((-600L), (-298L));
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-2L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range range2 = Range.of(9223372036854775504L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range_Builder2.expandBegin((-600L));
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList1.add(range1);
      // Undeclared exception!
      try { 
        range0.complement(range2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4333 would make range [9223372036854775504 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.9908111699555784
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1L);
      Range range1 = Range.of(range_CoordinateSystem0, (-2397L), 1L);
      range0.complement(range1);
      Range range2 = Range.of((-2147483629L));
      range1.asRange();
      Range range3 = range1.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = null;
      range3.isSubRangeOf(range2);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.6278402380193517
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(670L, 670L);
      Range.of(670L);
      Range.Builder range_Builder1 = new Range.Builder(1262L);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder2.build();
      Range.of(670L, 1068L);
      Range.of(670L);
      Range range1 = Range.of(9223372036854775807L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.56270132215393
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(670L);
      Range.ofLength(65535L);
      Range range0 = Range.ofLength(772L);
      List<Range> list0 = range0.split(670L);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.674767833203746
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.of((-32768L));
      Range.of(2147483646L);
      Range.of(2507L, 2507L);
      Object object0 = new Object();
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.3425294285712166
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range.of(0L, 4294967295L);
      Object object4 = new Object();
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object1));
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.57807068011382
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.ofLength(3430L);
      Range range1 = Range.of(9223372036854775433L);
      range1.intersection(range0);
      String string0 = "given length %d would make range [%d - ? ] beyond max allowed end offset";
      range1.getEnd();
      // Undeclared exception!
      try { 
        Range.parseRange("given length %d would make range [%d - ? ] beyond max allowed end offset");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse given length %d would make range [%d - ? ] beyond max allowed end offset into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.9267317968808344
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(664L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1334L;
      Range range1 = Range.of(range_CoordinateSystem0, 664L, 1334L);
      range1.complement(range0);
      Range range2 = Range.of(range_CoordinateSystem0, 664L, 1334L);
      range2.complement(range0);
      Range range3 = Range.of((-1896L));
      Range range4 = range3.asRange();
      Range range5 = range4.intersection(range3);
      range5.intersection(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.939786364315775
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(9223372036854775537L);
      Range range1 = Range.of(9223372036854775537L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 9223372036854775537L, 9223372036854775537L);
      Range.of(2147483472L);
      range1.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(range_CoordinateSystem1, 9223372036854775538L, 9223372036854775537L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, (-373L), 672L);
      Range range3 = Range.ofLength(4294967295L);
      range3.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem4, 3238L, 266L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.301171875628497
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(670L);
      Range range0 = Range.ofLength(670L);
      range0.getLength();
      range0.split(6219L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("4L[%4}x:;_?36fC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.4L[%4}x:;_?36fC
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.198608631016716
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.of((-32768L));
      long long0 = (-1L);
      Range range0 = Range.of((-1223L));
      range0.getEnd();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.6126574216435303
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      Long.valueOf(1L);
      Range.of(266L, 2282L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 266L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 266L, 4294967295L);
      Object object0 = new Object();
      String string0 = "";
      range1.equals("");
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem2, 4294967295L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.782996695416967
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of(9223372036854775579L);
      Range range1 = Range.of(9223372036854775579L);
      range0.intersects(range1);
      range1.complement(range0);
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range2.toString(range_CoordinateSystem1);
      Range.parseRange("[ 9223372036854775579 .. 9223372036854775579 ]/0B");
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem2, 4294967295L, 9223372036854775579L);
      range0.endsBefore(range3);
      String string0 = null;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 1427L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.515261591594097
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(0L);
      range_Builder0.expandEnd(670L);
      Range range0 = Range.of(0L, 670L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.631296300516567
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = (-653L);
      Range range0 = Range.of((-1006L), (-653L));
      range0.intersects(range0);
      range0.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 1958L;
      Range.of(range_CoordinateSystem0, 1958L, 1958L);
      Object object0 = new Object();
      Object object1 = new Object();
      long long2 = 1644L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1958L, 732L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.408385208188493
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-1302L), (-1302L));
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.946032297744674
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range_Builder0.copy();
      long long0 = 670L;
      Range.Builder range_Builder1 = new Range.Builder(670L, 670L);
      Range range0 = Range.ofLength(65535L);
      long long1 = 287L;
      range_Builder0.expandBegin(287L);
      Range.of(670L);
      Range range1 = Range.of(266L);
      range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long2 = 1418L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 3238L, 1418L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.5151970040872667
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-2147479961L));
      long long0 = (-302L);
      range_Builder0.expandBegin((-302L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854773662L);
      long long1 = (-1201L);
      Long long2 = new Long((-1201L));
      range0.equals(range_Builder0);
      range0.toString();
      Range.Comparators.values();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_Builder1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.948670972223787
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of((-4333L));
      Range range1 = Range.of((-600L), (-298L));
      range1.getLength();
      range0.complement(range1);
      Range.of(9223372036854775807L);
      range0.asRange();
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.909944251626011
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of((-1L), 4294967295L);
      Range range0 = Range.of(705L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(1660L);
      Range.Builder range_Builder1 = new Range.Builder(705L);
      Range range1 = range_Builder0.build();
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem.values();
      long long0 = range2.getLength();
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.861106911228343
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of((-1L), 4294967295L);
      Range.of(705L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long0 = 1660L;
      Range.of(1660L);
      Range.Builder range_Builder1 = new Range.Builder(705L);
      Range range0 = range_Builder0.build();
      range0.split(705L);
      // Undeclared exception!
      try { 
        Range.of(1068L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.8944964710351835
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-176L));
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-176L), (-176L));
      Range range2 = range1.intersection(range0);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      assertTrue(range3.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem3, (-2547L), 2202L);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      List<Range> list0 = range1.split(2265L);
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.7699152797677917
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-1271L));
      range_Builder0.contractBegin((-3085L));
      Range range0 = Range.of((-1271L), 255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem1, 255L, 32767L);
      range_Builder1.copy();
      range_Builder1.build();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.6371612861993285
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-1271L));
      range_Builder0.expandEnd((-1271L));
      range_Builder0.expandEnd((-1271L));
      range_Builder0.contractBegin((-3085L));
      Range range0 = Range.of((-1271L), 255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 255L, 32830L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("VRK_bT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.VRK_bT
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.55084322228119
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.getBegin();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object3);
      Long long0 = new Long((-2172L));
      range0.equals((Object) null);
      Object object4 = new Object();
      Object object5 = new Object();
      Range range1 = Range.of(255L, 255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Object object6 = new Object();
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object6));
  }

  /**
  //Test case number: 134
  /*Coverage entropy=4.2758451161007285
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-1L), 4294967295L);
      Range range1 = Range.of(705L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complement(range1);
      Range range2 = Range.of(2149L);
      Range range3 = range2.intersection(range1);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(705L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range4 = Range.of((-1L));
      linkedList1.add(range4);
      linkedList1.add(range4);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range5 = Range.of(4294967295L);
      Range range6 = Range.of((-1861L));
      range5.complement(range6);
      range6.complementFrom(linkedList1);
      Range.of(255L);
      range4.intersection(range3);
      Range range7 = range0.asRange();
      assertFalse(range7.equals((Object)range5));
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.7872545919304095
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-1L);
      Range.of((-2147483648L), 65535L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(1660L);
      Range.Builder range_Builder1 = new Range.Builder(705L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.of(255L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.5808979655072615
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(564L);
      range_Builder0.build();
      range_Builder0.contractEnd((-1083L));
      range_Builder0.expandEnd(670L);
      Range range0 = Range.ofLength(65535L);
      Range.ofLength(2147483647L);
      // Undeclared exception!
      try { 
        range0.split((-3667L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.55440435354133
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(670L);
      Range range0 = Range.ofLength(670L);
      range0.getLength();
      range0.split(670L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("4L[%4}x:;_?36fC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.4L[%4}x:;_?36fC
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.446690285610852
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Range.of(185L, (-1458L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.9992383898124912
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of(664L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 664L, 1334L);
      range1.complement(range0);
      range1.endsBefore(range0);
      Range.of((-128L));
      Range range2 = Range.of(range_CoordinateSystem0, 664L, 664L);
      range2.asRange();
      range2.iterator();
      String string0 = "";
      range0.intersects(range2);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.5646185722286714
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of((-361L), 0L);
      Range range1 = Range.of((-361L));
      assertFalse(range1.isEmpty());
      
      Range range2 = range0.intersection(range0);
      assertFalse(range2.isEmpty());
      assertNotSame(range2, range1);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.8893680066939185
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-600L), (-600L));
      Range range0 = Range.ofLength(797L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder3 = range_Builder2.expandBegin((-1201L));
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.parallelStream();
      linkedList1.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      range0.complementFrom(linkedList2);
      Range range1 = Range.of(127L);
      Range range2 = range1.intersection(range0);
      List<Range> list0 = range2.complement(range1);
      assertSame(range2, range1);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=4.012388102380445
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(1333L, 1333L);
      Range range0 = Range.ofLength(65535L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range_Builder2.expandBegin((-1029L));
      Range.Builder range_Builder4 = new Range.Builder();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range1 = Range.of((-2001L), 65535L);
      range1.complement(range0);
      Range.of((-2001L));
      // Undeclared exception!
      try { 
        Range.of(9223372032559808513L, (-1029L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.92530980152774
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of((-361L), (-361L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range1 = Range.of((-361L));
      Range range2 = range1.intersection(range0);
      range_Builder0.expandBegin((-361L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.add(range0);
      assertTrue(linkedList2.contains(range2));
      
      Range range3 = Range.of((-1930L));
      range2.complement(range1);
      range3.complement(range0);
      range1.complementFrom(linkedList1);
      Range.of((-720L));
      Range range4 = range1.intersection(range0);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.8864334837554333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-2661L), (-2661L));
      Range range2 = Range.of((-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range3 = Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range4 = range_Builder0.build();
      range3.intersection(range4);
      List<Range> list0 = range2.complement(range4);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertTrue(list0.contains(range2));
      
      range4.intersection(range1);
      //  // Unstable assertion: assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.6759440194602493
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-2147483648L));
      range0.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      assertNotSame(range_CoordinateSystem2, range_CoordinateSystem0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.682120700828623
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.ofLength(3207L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long0 = new Long(3207L);
      Object object4 = new Object();
      Long long1 = new Long(3676L);
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
      
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Range range1 = Range.of(3207L, 4294967295L);
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.4104897128884657
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 581L, 32767L);
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Range.of(32767L, 2841L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-1271L));
      range_Builder0.contractBegin((-3085L));
      // Undeclared exception!
      try { 
        Range.parseRange("end of file reached before entire block was skipped");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse end of file reached before entire block was skipped into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.3656255287503853
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(670L);
      Range.ofLength(65535L);
      Range.ofLength(255L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(65535L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.288673411698496
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of((-1223L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-128L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object3);
      Object object4 = new Object();
      Object object5 = new Object();
      range0.equals(object5);
      Object object6 = new Object();
      // Undeclared exception!
      try { 
        range1.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.3256729466856068
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.of(9223372036854775579L);
      Range range1 = Range.ofLength(9223372036854775579L);
      Object object0 = new Object();
      range0.intersects(range0);
      Object object1 = new Object();
      Object object2 = new Object();
      range0.startsBefore(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object3 = new Object();
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.481000494853288
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-302L);
      range_Builder0.expandBegin((-302L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854773651L);
      long long1 = (-1195L);
      Long long2 = new Long(9223372036854773651L);
      range0.startsBefore(range0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_Builder1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.5600232382587094
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(670L, 670L);
      Range.of(143L, 4294967323L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(4294967295L);
      Range.Builder range_Builder2 = new Range.Builder(4294967323L, 4294967323L);
      range_Builder1.build();
      long long0 = 1L;
      // Undeclared exception!
      try { 
        Range.of(255L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Object object0 = new Object();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.of((-2615L), 9223372036854774474L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.5225648037862802
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.of((-32768L));
      Range range0 = Range.of((-1223L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1223L), (-1223L));
      long long0 = range1.getBegin();
      assertEquals((-1223L), long0);
      
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.887891392618
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of((-18L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range1.getLength();
      range0.getBegin();
      range0.complement(range1);
      Range range2 = Range.of((-18L));
      Range range3 = range2.asRange();
      range1.startsBefore(range3);
      // Undeclared exception!
      try { 
        Range.ofLength((-3420L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.298155571027304
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 639L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.6162450950846288
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Range.of((-4396L));
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      Range range0 = Range.of(973L);
      Range range1 = Range.of(65535L);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.6422165264472737
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 670L;
      Range.Builder range_Builder1 = new Range.Builder(670L, 670L);
      long long1 = (-31932L);
      Range.Builder range_Builder2 = range_Builder1.expandEnd((-31932L));
      // Undeclared exception!
      try { 
        range_Builder2.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=3.5986785766221523
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(670L, 670L);
      long long0 = 65535L;
      Range.Builder range_Builder2 = range_Builder0.expandBegin(65535L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range_Builder2.expandBegin((-1029L));
      Range.Builder range_Builder4 = new Range.Builder();
      Range.of(670L, 65535L);
      Range.of(65535L);
      // Undeclared exception!
      try { 
        Range.of(9223372032559808513L, (-1029L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=3.835216114452051
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1L));
      Range range0 = Range.ofLength(857L);
      range_Builder0.contractEnd((-1L));
      Range.Builder range_Builder2 = range_Builder1.expandBegin(507L);
      range_Builder0.shift(32767L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder2.build();
      range_Builder0.expandBegin((-1L));
      range_Builder1.contractBegin((-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem.values();
      Range.of(507L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 162
  /*Coverage entropy=3.272590588465372
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range.of(6090L, 9223372036854774449L);
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Range.of(9223372036854774449L, 6090L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=3.3764058124683003
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range.of(6084L, 9223372036854774449L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object5));
  }

  /**
  //Test case number: 164
  /*Coverage entropy=3.3404630968646387
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Long long0 = new Long(2370L);
      Object object0 = new Object();
      Long long1 = new Long(3690L);
      Range range0 = Range.of(2370L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object1 = new Object();
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
  }

  /**
  //Test case number: 165
  /*Coverage entropy=3.4544586606672874
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-176L), (-176L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem3, (-2547L), 2202L);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      assertEquals("RB", range_CoordinateSystem4.getAbbreviatedName());
  }

  /**
  //Test case number: 166
  /*Coverage entropy=3.408641287701287
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range.of((-653L), 9223372036854774449L);
      Object object6 = new Object();
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object1));
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Cp;~lUUDg:+r(ARCu", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Cp;~lUUDg:+r(ARCu into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
