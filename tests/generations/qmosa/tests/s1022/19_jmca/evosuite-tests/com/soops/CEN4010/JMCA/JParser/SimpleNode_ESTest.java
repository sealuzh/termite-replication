/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 21:45:20 GMT 2020
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(1);
      simpleNode0.identifiers = null;
      char char0 = ';';
      StringWriter stringWriter1 = new StringWriter(';');
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.4270610433807247
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(63);
      simpleNode0.toString();
      simpleNode0.setIdentifier(":");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.close();
      stringWriter1.flush();
      MockFile mockFile0 = new MockFile("Literal");
      mockFile0.setReadOnly();
      mockFile0.setExecutable(false);
      MockFile mockFile1 = new MockFile(mockFile0, "!!$zf)P1ETS&");
      MockFile mockFile2 = new MockFile(":");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.toPath();
      mockFile0.getCanonicalPath();
      simpleNode0.toString("Literal");
      MockFile mockFile3 = new MockFile("/home/ubuntu/replication/scripts/projects/19_jmca/Literal", ">");
      mockFile2.setLastModified(63);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(":");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ">");
      MockPrintStream mockPrintStream1 = new MockPrintStream(">");
      MockFile mockFile4 = new MockFile(">");
      char[] charArray0 = new char[9];
      charArray0[1] = 'C';
      simpleNode0.dump("%c4p*.ot>dMgh6n>0x", stringWriter0);
      assertEquals("<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\n", stringWriter0.toString());
      
      charArray0[2] = 'C';
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      charArray0[0] = '+';
      charArray0[4] = ' ';
      charArray0[5] = 'C';
      String string0 = simpleNode0.toString(">");
      assertEquals(">Literal : :", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(3);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add(">");
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.listIterator();
      MockFile mockFile0 = new MockFile("7'b[ziEhin");
      MockFile mockFile1 = new MockFile("7'b[ziEhin", "7'b[ziEhin");
      mockFile1.setReadable(true, true);
      mockFile1.getAbsolutePath();
      MockFile mockFile2 = new MockFile("7'b[ziEhin", "/home/ubuntu/replication/scripts/projects/19_jmca/7'b[ziEhin/7'b[ziEhin");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("7'b[ziEhin/7'b[ziEhin");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      simpleNode0.dump("7'b[ziEhin", stringWriter0);
      assertEquals("<Modifiers>\n  <identifier>*gt</identifier>\n</Modifiers>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u1q$<5JC%j/^&:W!!$&");
      SimpleNode simpleNode0 = new SimpleNode(0);
      SystemInUtil.addInputLine("u1q$<5JC%j/^&:W!!$&");
      simpleNode0.id = 0;
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("t");
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-4);
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)101;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t");
      StringReader stringReader0 = new StringReader("u1q$<5JC%j/^&:W!!$&");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("R>4(>sq56ge v?", stringWriter0);
      simpleNode0.jjtGetNumChildren();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.8131904766573733
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("G-um");
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.printf("&", objectArray0);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) "G-um";
      objectArray1[1] = (Object) mockPrintStream0;
      objectArray1[2] = (Object) stringWriter0;
      mockPrintStream0.format("&", objectArray1);
      mockPrintStream0.write((int) (byte)18);
      StringWriter stringWriter1 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(68);
      simpleNode0.setIdentifier("&");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      StringWriter stringWriter2 = stringWriter1.append('e');
      char[] charArray0 = new char[6];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      stringWriter1.flush();
      charArray0[4] = 'e';
      charArray0[5] = '&';
      stringWriter0.write(charArray0);
      simpleNode0.dump(":", stringWriter2);
      assertEquals("e<AllocationExpression>\n  <identifier>*amp</identifier>\n</AllocationExpression>\n", stringWriter2.toString());
      
      String string0 = simpleNode0.toString("&");
      assertEquals("&AllocationExpression : &", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.16302362949436594
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.clone();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump(")", stringWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "<=";
      objectArray0[1] = (Object) arrayList0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) "<=";
      arrayList0.toArray(objectArray0);
      arrayList0.add("<=");
      arrayList0.add("&&");
      simpleNode0.dump(")", stringWriter0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("throw");
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange1 = new Locale.LanguageRange("throw");
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale.LanguageRange.parse("throw");
      arrayList1.add(locale_LanguageRange1);
      Locale.LanguageRange locale_LanguageRange2 = new Locale.LanguageRange("throw");
      arrayList2.add(locale_LanguageRange1);
      Locale.LanguageRange locale_LanguageRange3 = new Locale.LanguageRange("throw");
      arrayList1.add(locale_LanguageRange3);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      arrayList1.stream();
      arrayList2.stream();
      Locale.LanguageRange locale_LanguageRange4 = null;
      try {
        locale_LanguageRange4 = new Locale.LanguageRange("[t;G|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=[t;g|
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[23];
      byteArray0[1] = (byte)47;
      JavaParser javaParser0 = new JavaParser("`.");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (byte)47);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("2");
      arrayList0.listIterator();
      arrayList0.add("&&");
      MockFile mockFile0 = new MockFile("\"\r\"");
      MockFile mockFile1 = new MockFile("`.", "<yt*.a'");
      mockFile1.setReadable(true, true);
      mockFile0.getAbsolutePath();
      MockFile mockFile2 = new MockFile((String) null, "1/=WsA");
      MockFile mockFile3 = new MockFile("`.");
      MockFile mockFile4 = new MockFile("\"\r\"", "^AM");
      mockFile4.getCanonicalPath();
      MockFile mockFile5 = new MockFile(mockFile4, "<yt*.a'");
      MockFile mockFile6 = new MockFile("`.", "`.");
      simpleNode0.dump("XK~dy'JyJS", stringWriter0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      simpleNode0.dump((String) null, stringWriter0);
      assertEquals("<InstanceOfExpression>\n  <identifier>2</identifier>\n  <identifier>*amp</identifier>\n</InstanceOfExpression>\n<InstanceOfExpression>\n  <identifier>2</identifier>\n  <identifier>*amp</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[23];
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)18);
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (byte)18);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      String string0 = "S";
      arrayList0.add("B|,}");
      arrayList0.add("S");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("B|,}", stringWriter1);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      arrayList0.add("S");
      stringWriter1.close();
      // Undeclared exception!
      try { 
        byteArrayInputStream0.read(byteArray0, (int) (byte)18, (int) (byte)18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[23];
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)18);
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (byte)18);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      String string0 = "S";
      String string1 = "B|,}";
      arrayList0.add("B|,}");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("B|,}", stringWriter1);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("B|,}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=b|,}
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(1);
      simpleNode0.identifiers = null;
      // Undeclared exception!
      try { 
        simpleNode0.setIdentifier("#gytb7-6H9:DA=Cu_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8306855287903425
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("suF}I5j=kCTWfvse=f,_");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 1, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      StringWriter stringWriter0 = new StringWriter();
      javaCharStream0.bufline = javaParserTokenManager0.jjnewLexState;
      javaParser1.RelationalExpression();
      javaParser1.Modifiers();
      SimpleNode simpleNode0 = new SimpleNode(javaParser1, 1);
      stringReader0.markSupported();
      stringReader0.skip((-761L));
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.curLexState = 0;
      javaCharStream0.bufline = javaParserTokenManager0.jjnewLexState;
      simpleNode0.setIdentifier("{");
      Token.newToken(0);
      javaParserTokenManager0.TokenLexicalActions(javaParser1.jj_nt);
      javaParserTokenManager0.TokenLexicalActions(javaParser0.token);
      stringReader0.mark(1096);
      simpleNode0.dump("Li%er`", stringWriter0);
      assertEquals("<PackageDeclaration>\n</PackageDeclaration>\n", stringWriter0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      String string0 = simpleNode0.toString((String) null);
      assertEquals("nullPackageDeclaration : {", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9918043194309514
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("suF}I5j=kWf.s<e=R,_");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 1, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      stringReader0.ready();
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 1);
      simpleNode0.jjtAddChild(simpleNode1, 21);
      StringWriter stringWriter0 = new StringWriter(21);
      javaParser1.RelationalExpression();
      simpleNode0.setIdentifier("4#");
      stringWriter0.write("</");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("O6", stringWriter0);
      simpleNode0.jjtGetChild(21);
      stringWriter1.write("{");
      stringWriter1.append('%');
      stringWriter1.write("*");
      assertFalse(stringWriter1.equals((Object)stringWriter0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.167944147734173
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter1 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      SimpleNode simpleNode0 = new SimpleNode(39);
      simpleNode0.dump((String) null, stringWriter1);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("}");
      String string0 = "0#NplFSd\\yxUm_*O";
      arrayList0.add("0#NplFSdyxUm_*O");
      arrayList0.add(":");
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump((String) null, stringWriter0);
      Locale locale0 = Locale.ENGLISH;
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange((String) null, 1.105994373604296);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 0;
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node node0 = null;
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtAddChild((Node) null, 0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.trimToSize();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode0.jjtGetParent();
      int int1 = 1;
      simpleNode0.jjtAddChild((Node) null, 1);
      simpleNode1.jjtGetParent();
      StringWriter stringWriter2 = new StringWriter();
      String string0 = "5A.2\"=/Uh{HpSs?X";
      JavaParser javaParser0 = new JavaParser("5A.2\"=/Uh{HpSs?X");
      try { 
        javaParser0.RelationalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.7668750081804474
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtAddChild((Node) null, 0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("yaX^OB *l*){82");
      arrayList0.trimToSize();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "yaX^OB *l*){82");
      stringWriter2.write("yaX^OB *l*){82");
      simpleNode0.setIdentifier("<");
      stringWriter2.write("<");
      StringWriter stringWriter3 = new StringWriter(0);
      stringWriter1.write("#5ING%Qu+");
      simpleNode0.setIdentifier("\"@\"");
      StringWriter stringWriter4 = stringWriter3.append((CharSequence) "<");
      stringWriter1.write("T$X#y_M#80b#?#j");
      StringWriter stringWriter5 = new StringWriter(73);
      StringWriter stringWriter6 = new StringWriter();
      stringWriter4.write((String) null);
      StringWriter stringWriter7 = new StringWriter();
      simpleNode0.dump("dfE9;b5@Rj++e", stringWriter5);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-272));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -272
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.5305096302300272
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("suF}I5j=kWf.s<e=R,_");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 1, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      stringReader0.skip((-3402L));
      javaCharStream0.BeginToken();
      javaParserTokenManager0.curChar = 's';
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 73);
      simpleNode0.setIdentifier("dfE9;b5@Rj++e");
      JavaParser javaParser2 = new JavaParser("AnnotationTypeBody");
      simpleNode0.parser = javaParser2;
      StringWriter stringWriter1 = stringWriter0.append('\'');
      simpleNode0.dump("dfE9;b5@Rj++e", stringWriter0);
      simpleNode0.setIdentifier(">>");
      simpleNode0.dump("a(SdLv ", stringWriter1);
      assertEquals("'<Block>\n  <identifier>dfE9;b5@Rj++e</identifier>\n</Block>\n<Block>\n  <identifier>dfE9;b5@Rj++e</identifier>\n  <identifier>*rshft</identifier>\n</Block>\n", stringWriter1.toString());
      assertEquals("'<Block>\n  <identifier>dfE9;b5@Rj++e</identifier>\n</Block>\n<Block>\n  <identifier>dfE9;b5@Rj++e</identifier>\n  <identifier>*rshft</identifier>\n</Block>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.024571686999246
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 355;
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader("");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 25);
      SimpleNode simpleNode1 = (SimpleNode)javaParser0.currNode;
      simpleNode0.jjtAddChild(simpleNode1, 355);
      simpleNode0.jjtAddChild(simpleNode1, 355);
      simpleNode0.jjtGetParent();
      simpleNode0.setIdentifier("<<");
      simpleNode0.jjtSetParent(simpleNode1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.listIterator();
      arrayList0.trimToSize();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.write("");
      SimpleNode simpleNode2 = new SimpleNode((-1934332342));
      simpleNode1.jjtGetParent();
      StringWriter stringWriter2 = new StringWriter(355);
      simpleNode2.jjtSetParent((Node) null);
      // Undeclared exception!
      simpleNode1.dump("d!lOa!qy2Li@i`)xQ", stringWriter1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.7668750081804474
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 355;
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader("c:Qq@{'mb#");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      stringReader0.read();
      int int1 = 0;
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      simpleNode0.jjtAddChild(simpleNode0, 355);
      simpleNode0.setIdentifier("c:Qq@{'mb#");
      Node[] nodeArray0 = new Node[0];
      stringWriter0.flush();
      String string0 = "";
      simpleNode0.setIdentifier("");
      stringReader0.skip(0);
      int int2 = 335;
      simpleNode0.jjtAddChild(simpleNode0, 335);
      stringReader0.read();
      stringWriter0.write("c:Qq@{'mb#");
      stringWriter0.write("");
      int int3 = 45;
      SimpleNode simpleNode1 = new SimpleNode(45);
      // Undeclared exception!
      simpleNode0.dump("b@<\"+I=BF\u0007R{Bb", stringWriter0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.16302362949436594
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.clone();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump(")", stringWriter0);
      arrayList0.add(")");
      arrayList0.add(">=");
      stringWriter0.close();
      arrayList0.add("<<");
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.listIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile(")");
      MockFile mockFile1 = new MockFile(")", "_fS_y5+cUZ");
      mockFile1.getAbsolutePath();
      MockFile mockFile2 = new MockFile("W[R`))Z2`", "&:#OH+by");
      simpleNode0.dump("<<", stringWriter0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      simpleNode0.dump("3ILMvYG", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>)</identifier>\n  <identifier>*ge</identifier>\n  <identifier>*lshft</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>)</identifier>\n  <identifier>*ge</identifier>\n  <identifier>*lshft</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9256504262569104
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.jjtSetParent(simpleNode0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("ReferenceType");
      arrayList1.add("<=");
      arrayList1.listIterator();
      arrayList0.trimToSize();
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(503);
      stringWriter2.write(2611);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) ">=");
      stringWriter2.close();
      StringWriter stringWriter4 = new StringWriter();
      char[] charArray0 = new char[3];
      stringWriter0.write(charArray0);
      StringWriter stringWriter5 = new StringWriter();
      stringWriter2.close();
      stringWriter4.append('g');
      stringWriter2.append((CharSequence) "ReferenceType");
      stringWriter4.append((CharSequence) null);
      simpleNode0.dump("&", stringWriter3);
      stringWriter4.append('\u0000');
      StringWriter stringWriter6 = new StringWriter(503);
      simpleNode0.toString();
      Node node0 = simpleNode0.jjtGetParent();
      assertEquals(0, node0.jjtGetNumChildren());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.539654447440098
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(38);
      StringReader stringReader0 = new StringReader("rEYIKW_NRunTV$11");
      JavaParser javaParser0 = new JavaParser("rEYIKW_NRunTV$11");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 38);
      simpleNode0.jjtAddChild(simpleNode0, 38);
      simpleNode0.jjtAddChild(simpleNode0, 38);
      SimpleNode simpleNode1 = new SimpleNode(0);
      StringWriter stringWriter1 = new StringWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      stringWriter1.write(charArray0);
      StringWriter stringWriter2 = new StringWriter();
      stringWriter1.write("rEYIKW_NRunTV$11");
      SimpleNode simpleNode2 = new SimpleNode(311);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode2;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode1;
      nodeArray0[4] = (Node) simpleNode1;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode2;
      nodeArray0[7] = (Node) simpleNode1;
      nodeArray0[8] = (Node) simpleNode0;
      simpleNode2.children = nodeArray0;
      StringWriter stringWriter3 = new StringWriter(311);
      simpleNode1.dump("b@<\"+I=BF\u0007R{Bb", stringWriter1);
      simpleNode0.jjtGetChild(38);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(39, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[21];
      charArray0[1] = '<';
      charArray0[2] = '6';
      charArray0[3] = '<';
      stringWriter0.write(charArray0);
      SimpleNode simpleNode0 = new SimpleNode(3);
      stringWriter0.write("y");
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add((String) null);
      arrayList0.add("y");
      stringWriter0.write("y");
      StringWriter stringWriter1 = new StringWriter(1);
      stringWriter1.write("7fK~qlbX[J", 3, 1);
      stringWriter1.close();
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.write(1);
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter('<');
      stringWriter4.write("FE$7fwtahS");
      stringWriter4.close();
      stringWriter2.write(charArray0);
      StringWriter stringWriter5 = new StringWriter();
      StringWriter stringWriter6 = new StringWriter();
      stringWriter0.flush();
      StringWriter stringWriter7 = new StringWriter();
      stringWriter0.write(1);
      StringWriter stringWriter8 = stringWriter1.append('<');
      stringWriter1.write(charArray0);
      StringWriter stringWriter9 = new StringWriter();
      stringWriter9.close();
      // Undeclared exception!
      try { 
        simpleNode0.dump("y", stringWriter8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9504094967322703
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("odTfiers");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 1, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      JavaParser javaParser1 = new JavaParser((JavaParserTokenManager) null);
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      javaParserTokenManager0.jjround = 1;
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = 'B';
      charArray0[2] = 't';
      charArray0[3] = '/';
      charArray0[4] = 'q';
      charArray0[5] = 'q';
      stringReader0.read(charArray0);
      javaCharStream0.bufpos = 1;
      javaParser0.jj_nt = javaParser1.token;
      javaParser0.VariableInitializer();
      javaParser0.generateParseException();
      JavaParser javaParser2 = new JavaParser("odTfiers");
      JavaParser javaParser3 = new JavaParser((String) null);
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.setIdentifier(";");
      simpleNode0.dump(",_8#{?&-S51Et/z~)", stringWriter0);
      assertEquals("<CompilationUnit>\n</CompilationUnit>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString((String) null);
      assertEquals("nullCompilationUnit : ;", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.30463609734923813
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[21];
      charArray0[1] = '<';
      charArray0[2] = '6';
      charArray0[3] = '<';
      stringWriter0.write(charArray0);
      SimpleNode simpleNode0 = new SimpleNode(3);
      stringWriter0.write("");
      stringWriter0.write((String) null);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("");
      stringWriter0.write("");
      StringWriter stringWriter1 = new StringWriter(1);
      stringWriter1.write("7fK~q{NI[J", 3, 1);
      stringWriter1.close();
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.write(1);
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      stringWriter4.write("FE$7fwtahS");
      stringWriter4.close();
      stringWriter2.write(charArray0);
      StringWriter stringWriter5 = new StringWriter();
      StringWriter stringWriter6 = new StringWriter();
      stringWriter0.flush();
      StringWriter stringWriter7 = new StringWriter();
      stringWriter0.write(1);
      StringWriter stringWriter8 = stringWriter1.append('<');
      stringWriter1.write(charArray0);
      StringWriter stringWriter9 = new StringWriter();
      stringWriter9.close();
      simpleNode0.dump("", stringWriter8);
      assertEquals("~<\u0000<6<\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000<Modifiers>\n</Modifiers>\n", stringWriter1.toString());
      assertEquals("~<\u0000<6<\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000<Modifiers>\n</Modifiers>\n", stringWriter8.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-35));
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.clone();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump(")", stringWriter0);
      arrayList0.add(")");
      arrayList0.add(">=");
      stringWriter0.close();
      stringWriter0.flush();
      arrayList0.add("*gt");
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.flush();
      StringWriter stringWriter2 = new StringWriter();
      stringWriter0.flush();
      StringWriter stringWriter3 = new StringWriter();
      stringWriter0.write((-35));
      StringWriter stringWriter4 = stringWriter2.append('y');
      stringWriter0.append('b');
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 'P';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      charArray0[5] = 'b';
      charArray0[6] = 'b';
      charArray0[7] = 'b';
      stringWriter2.write(charArray0);
      StringWriter stringWriter5 = new StringWriter();
      stringWriter4.close();
      // Undeclared exception!
      try { 
        simpleNode0.dump("ForInit", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9943536917623688
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-97);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u1q$<5JC%j/^&:W!!$&");
      SimpleNode simpleNode0 = new SimpleNode(0);
      SystemInUtil.addInputLine("u1q$<5JC%j/^&:W!!$&");
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray1 = new byte[5];
      byteArray1[3] = (byte) (-4);
      simpleNode0.dump("u1q$<5JC%j/^&:W!!$&", stringWriter0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)101;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t");
      StringReader stringReader0 = new StringReader("u1q$<5JC%j/^&:W!!$&");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetChild(0);
      assertEquals(1, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader(")");
      stringReader0.mark(106);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      javaCharStream0.Done();
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.parent = null;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList1, locale_FilteringMode0);
      arrayList0.retainAll(list0);
      arrayList0.trimToSize();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.write("Y-4t");
      simpleNode0.jjtAddChild((Node) null, 106);
      MockFile mockFile0 = new MockFile(")");
      mockFile0.setWritable(false);
      MockFile mockFile1 = new MockFile(mockFile0, "Y-4t");
      File file0 = MockFile.createTempFile("Y-4t", "Y-4t", (File) mockFile1);
      assertEquals("/home/ubuntu/replication/scripts/projects/19_jmca/)/Y-4t/Y-4t0Y-4t", file0.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[21];
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      stringWriter0.write(charArray0);
      SimpleNode simpleNode0 = new SimpleNode(3);
      stringWriter0.write("y");
      stringWriter0.write((String) null);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("y");
      stringWriter0.write("y");
      StringWriter stringWriter1 = new StringWriter(1);
      stringWriter1.close();
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.write(1);
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      stringWriter4.write("FE$7fwtahS");
      stringWriter4.close();
      stringWriter2.write(charArray0);
      StringWriter stringWriter5 = new StringWriter();
      StringWriter stringWriter6 = new StringWriter();
      stringWriter0.flush();
      StringWriter stringWriter7 = new StringWriter();
      stringWriter0.write(1);
      StringWriter stringWriter8 = stringWriter1.append('<');
      stringWriter1.write(charArray0);
      StringWriter stringWriter9 = new StringWriter();
      stringWriter9.close();
      simpleNode0.dump("y", stringWriter8);
      assertEquals("<\u0000<<<\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000<Modifiers>\n  <identifier>y</identifier>\n</Modifiers>\n", stringWriter1.toString());
      assertEquals("<\u0000<<<\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000<Modifiers>\n  <identifier>y</identifier>\n</Modifiers>\n", stringWriter8.toString());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(53);
      JavaParser javaParser0 = new JavaParser("Uk7R<");
      Node node0 = javaParser0.currNode;
      simpleNode0.jjtAddChild((Node) null, 53);
      Node node1 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 53);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-1706));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1706
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[23];
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      File file0 = MockFile.createTempFile("\"@\"", "<=");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      mockFileInputStream0.getChannel();
      mockFileInputStream0.read(byteArray0, (int) (byte)18, (int) (byte)18);
      mockFileInputStream0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0, 101, (byte)18, (byte)18);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      file0.mkdir();
      MockFile mockFile0 = new MockFile("\"!\"");
      MockFile mockFile1 = new MockFile(file0, "<=");
      MockFile mockFile2 = new MockFile("\"@\"", "\"@\"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile2);
      mockFile2.getCanonicalPath();
      MockFile mockFile3 = new MockFile("\"@\"");
      FileSystemHandling.createFolder(evoSuiteFile0);
      char[] charArray0 = new char[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[1] = 'M';
      mockPrintStream0.println(charArray0);
      SimpleNode simpleNode0 = new SimpleNode(124);
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 124
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(Integer.MAX_VALUE);
      SimpleNode simpleNode1 = new SimpleNode((-2990));
      simpleNode0.jjtAddChild(simpleNode1, 1960);
      // Undeclared exception!
      try { 
        simpleNode1.jjtAddChild(simpleNode0, (-2990));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("3qb*sE6r^={I}wj~");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      Node node0 = simpleNode0.parent;
      simpleNode0.parent = null;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "3qb*sE6r^={I}wj~";
      stringArray0[1] = "3qb*sE6r^={I}wj~";
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode0.jjtOpen();
      // Undeclared exception!
      try { 
        simpleNode1.jjtGetChild((-1934766081));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)95;
      byteArray0[2] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      byteArrayInputStream0.skip(0L);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (byte)95);
      simpleNode0.jjtClose();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("odTfiers");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 1, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      JavaParser javaParser1 = new JavaParser((JavaParserTokenManager) null);
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      javaParserTokenManager0.jjround = 0;
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = 'B';
      charArray0[2] = '\u0083';
      charArray0[5] = 'q';
      stringReader0.read(charArray0);
      javaParser0.jj_nt = javaParser1.token;
      javaParser0.VariableInitializer();
      javaParser1.lookingAhead = false;
      javaParser0.token_source = null;
      javaParser0.generateParseException();
      JavaParser javaParser2 = new JavaParser((JavaParserTokenManager) null);
      javaParserTokenManager0.curChar = 'o';
      JavaParser javaParser3 = new JavaParser("");
      StringWriter stringWriter0 = new StringWriter(0);
      javaParserTokenManager0.jjmatchedPos = 2789;
      SimpleNode simpleNode0 = new SimpleNode('T');
      javaParser1.token_source = null;
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      String string0 = simpleNode0.toString();
      assertEquals("ForInit", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      File file0 = MockFile.createTempFile("*K(jpTglnr-}C,.}{n", "/#J^[}ufg");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      mockFileInputStream0.close();
      file0.mkdir();
      MockFile mockFile0 = new MockFile("\"!\"");
      MockFile mockFile1 = new MockFile(file0, "/#J^[}ufg");
      MockFile mockFile2 = new MockFile("`g", "`g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile2);
      MockFile mockFile3 = new MockFile("`g");
      char[] charArray0 = new char[5];
      mockFile2.mkdir();
      charArray0[1] = 'M';
      mockPrintStream0.append('E');
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = '5';
      mockPrintStream0.println(charArray0);
      SimpleNode simpleNode0 = new SimpleNode((byte)47);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("suF}I5j=kWf.s<e=R,_");
      stringReader0.read();
      stringReader0.read();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kN^V");
      SimpleNode simpleNode0 = new SimpleNode((-1847));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "odTfiers";
      StringReader stringReader0 = new StringReader("odTfiers");
      int int0 = 0;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 1, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      JavaParser javaParser1 = new JavaParser((JavaParserTokenManager) null);
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      javaParserTokenManager0.jjround = 1;
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = 'B';
      charArray0[2] = 't';
      charArray0[3] = '/';
      charArray0[4] = 'q';
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.listIterator();
      SimpleNode simpleNode0 = new SimpleNode((-1167));
      // Undeclared exception!
      try { 
        simpleNode0.toString((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1167
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, 3125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      String string0 = simpleNode0.toString();
      assertEquals("CompilationUnit", string0);
  }
}
