/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 04:52:29 GMT 2019
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6449630711309897
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("otide");
      lovinsStemmer0.stem("");
      String string1 = lovinsStemmer0.stem("Q");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6278135279301018
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("entations");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("O c");
      lovinsStemmer1.stemString("ement");
      lovinsStemmer0.toString();
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6792444075231054
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "sa";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("sa");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("MvMH197T{}A");
      String string0 = lovinsStemmer0.stem("\u001E");
      String string1 = lovinsStemmer0.stem("ucu");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString(string0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("Jh,z");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString(" 4Ozxn0Xq#3P");
      lovinsStemmer0.stemString("istr");
      lovinsStemmer0.stem("ond");
      lovinsStemmer1.getTechnicalInformation();
      String string2 = lovinsStemmer0.toString();
      assertFalse(string2.equals((Object)string1));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5902448344816873
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stem("contents");
      assertEquals("content", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("1|H ");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("metr");
      assertEquals("meter", string1);
      
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      String string2 = lovinsStemmer6.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5848944447896454
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      String string0 = lovinsStemmer0.stem("&TB?)'v-Ezn&HgSDPP");
      assertEquals("&tb?)'v-ezn&hgsdp", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("kco,(l");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer2.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string1 = lovinsStemmer1.stemString("kco,(l");
      assertEquals("kc,(l", string1);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.stem("kco,(l");
      String string2 = lovinsStemmer3.getRevision();
      assertEquals("8034", string2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5449952350280987
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("");
      String string1 = lovinsStemmer0.stem("eQntal");
      assertEquals("eqnt", string1);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6771598046208336
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("-l");
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("+ScyGw5_~iQtp_v*-/");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-l";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("R6{4wFq}[}YV");
      lovinsStemmer0.stem("editor");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("1thi");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stem("ions");
      lovinsStemmer1.stemString("weka.core.stemmers.lovinsstemmerlux");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.658703861201862
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[9];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("wek.cor.stemmer.lovinsstemmer");
      lovinsStemmer1.stem("QW}<=_AnS5|;FMu%FU");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stem("I#");
      lovinsStemmer2.stemString("6vb");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("iev");
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      String string0 = lovinsStemmer1.toString();
      lovinsStemmer1.stemString("*bx1OV%`");
      lovinsStemmer1.stemString("wek.cor.stemmer.lovinsstemmer");
      lovinsStemmer2.toString();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stem("i#");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.789439243445569
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString(":x]>0sv?'3.rm!|s&m7ex");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString(":x]>0sv?'3.rm!|s&m7ax");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8537553097682573
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[9];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stem("id[~#Xd+ _r-s2><");
      lovinsStemmer2.stem("\\~");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer1.stemString("T=}f!tiq!ZpN7'");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string2 = lovinsStemmer4.stemString("LYG^Y+Tz$wR_HLaTBB`");
      assertEquals("lyg^y+tz$wr_hlatb`", string2);
      
      String string3 = lovinsStemmer4.stem("1986");
      assertEquals("1986", string3);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6677415211241788
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("qpyl\rgd \"}9vqr&;|vpand");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("qpyl\rgd \"}9vqr&;|vdex");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("Qj{{G");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("q@i6DON&KS?oArj#");
      lovinsStemmer0.stemString("uas");
      lovinsStemmer0.stemString("arj");
      LovinsStemmer.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.647538410657427
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "sa";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("PVe");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stem("hconferlud");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("hconferlus");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("5k.-JO>f4t2obNZg}/");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.stem("}O0(N0Z42eh;SHu");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer6.toString();
      lovinsStemmer4.toString();
      LovinsStemmer.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6266586127404132
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = "CONFERENE";
      lovinsStemmer0.stemString("CONFERENE");
      lovinsStemmer0.stemString("CONFERENE");
      String[] stringArray0 = new String[12];
      lovinsStemmer0.globalInfo();
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "CONFERENE";
      stringArray0[2] = "confer";
      lovinsStemmer0.stem("KEYWORDS");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("The price of the document.");
      lovinsStemmer0.stemString("th pric of th docum.");
      lovinsStemmer0.stemString("CONFERENE");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6217493399407912
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Z^_rORCEaeK";
      stringArray0[1] = "contents";
      stringArray0[2] = "@3ud-Ww.~i2BmLW5M";
      stringArray0[5] = "~>I2lY";
      stringArray0[6] = "5B-JoVR[V`wcf}|FL";
      stringArray0[7] = "A part of a book, which may be a chapter (or section or whatever) and/or a range of pages.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("allic");
      assertEquals("al", string0);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6187215392749486
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.globalInfo();
      String string0 = lovinsStemmer0.stem("eness");
      assertEquals("enes", string0);
      
      String string1 = lovinsStemmer2.stem("5F_RhYGVv,9_Y");
      assertEquals("5f_rhygvv,9_", string1);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("<BTq?");
      assertEquals("<btq?", string2);
      
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.globalInfo();
      lovinsStemmer4.globalInfo();
      lovinsStemmer3.toString();
      lovinsStemmer2.toString();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      String string3 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7124856155506487
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("wrslyz");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("wrslys");
      String string0 = lovinsStemmer0.stemString("wrslys");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "wrslyz";
      stringArray0[1] = "lovinsstemmermit";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("5q8gg(;JF");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.toString();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.stemString("her");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer4.getRevision();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer5.globalInfo();
      lovinsStemmer1.stemString("hes");
      String string1 = lovinsStemmer4.getRevision();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.617782062133342
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.toString();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.stemString("probToLogOdds: probability must be in [0,1] ");
      assertEquals("probtologod: prob must be in [0,1] ", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.toString();
      lovinsStemmer3.toString();
      lovinsStemmer2.globalInfo();
      String string2 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6385695029840672
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("rpt");
      lovinsStemmer0.stemString("Original array with NaN (doubles): ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer1.stem("KEYWORDS");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer0.stemString("Original array with NaN (doubles): ");
      assertEquals("origin arra with nan (doubl): ", string1);
      
      String string2 = lovinsStemmer0.stemString("origin arra with nan (doubl): ");
      assertEquals("origin ar with nan (doubl): ", string2);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("\"1|Z_SP!)V]T");
      String string3 = lovinsStemmer0.stemString("rpt");
      assertEquals("rb", string3);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5273554457028151
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "~>I2lY";
      stringArray0[1] = "~>I2lY";
      stringArray0[2] = "@3ud-Ww.~i2BmLW5M";
      stringArray0[3] = "~>I2lY";
      stringArray0[4] = "~>I2lY";
      stringArray0[5] = "contents";
      stringArray0[6] = "contents";
      lovinsStemmer0.stem("The month in which the work was published or, for an unpublished work, in which it was written. You should use the standard three-letter abbreviation, as described in Appendix B.1.3 of the LaTeX book.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stemString("contents");
      lovinsStemmer1.stemString("The month in which the work was published or, for an unpublished work, in which it was written. You should use the standard three-letter abbreviation, as described in Appendix B.1.3 of the LaTeX book.");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("R");
      // Undeclared exception!
      try { 
        lovinsStemmer1.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6269247126833621
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[9];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("iful");
      assertEquals("ifl", string1);
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6416977100718035
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Z^_rORCEaeK";
      stringArray0[1] = "contents";
      stringArray0[2] = "@3ud-Ww.~i2BmLW5M";
      stringArray0[4] = "The uthors ffiRiation.";
      stringArray0[5] = "~>I2lY";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer1.stemString("Fatal error.");
      assertEquals("fat error.", string1);
      
      lovinsStemmer1.stemString("5.7 < 5.70001 ? ");
      lovinsStemmer1.stemString("contents");
      String string2 = lovinsStemmer1.stemString("1986");
      assertEquals("1986", string2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6142415337634888
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Z^_rORCEaeK";
      stringArray0[1] = "contents";
      stringArray0[2] = "@3ud-Ww.~i2BmLu5M";
      stringArray0[4] = "The uthors ffiliation.";
      stringArray0[5] = "~>I2lY";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("V8hOo");
      String[] stringArray1 = new String[3];
      stringArray1[0] = "contents";
      stringArray1[1] = "~>I2lY";
      stringArray1[2] = "v8ho";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("cid");
      lovinsStemmer0.stemString("i2bmlw5muad");
      lovinsStemmer0.stemString("fHHkIW:b3:FF,STE");
      lovinsStemmer0.stemString("cid");
      lovinsStemmer0.stem("!2U^k?Inf Hx");
      lovinsStemmer0.stemString("ex");
      lovinsStemmer0.stem("pic");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.628742883398116
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("pex");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("Z0k1Aw66Rn{5u");
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "pic";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.toString();
      String string0 = lovinsStemmer0.stemString("vctcycMJYi{^X)");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6596256898587052
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("MJ?/L.G&P\"Tg2");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("Morgan Kaufmann Publishers");
      lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7801372300704894
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "erid";
      stringArray0[1] = "hd!k1E1l%U<4nx";
      stringArray0[2] = "+HBWENZ~\"1T?Lz";
      stringArray0[3] = "vad";
      stringArray0[4] = "Min index (doubles): ";
      stringArray0[5] = "R. Quinlan";
      stringArray0[6] = "Q}u)l";
      stringArray0[7] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer2.stemString("`am,wrud");
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7983026953384573
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "lovinsstemmertex";
      stringArray0[1] = "";
      stringArray0[2] = "lovinsstemmeryt";
      stringArray0[3] = "B]}I~Q~f\"_BZ";
      stringArray0[4] = " = {";
      stringArray0[5] = "J";
      stringArray0[6] = "ening";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer2.stemString("B]}I~Q~f\"_BZ");
      assertEquals("b]}i~q~f\"_bz", string0);
      
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("lovinsstemmeryt");
      assertEquals("lovinsstemmerys", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer2.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer2.stemString("ex");
      assertEquals("ex", string3);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6606535493061116
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ax";
      stringArray0[1] = "ionlux";
      stringArray0[2] = "qqv10>O@d$i";
      stringArray0[3] = "<N8oFUA,Jt5F7F";
      stringArray0[4] = "'h";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString(" tB4a~gBc$su5");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("ionyz");
      String string1 = lovinsStemmer2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.653214870012501
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("CONFERENE");
      String string0 = lovinsStemmer0.stemString("CONFERENE");
      assertEquals("confer", string0);
      
      String[] stringArray0 = new String[12];
      lovinsStemmer0.globalInfo();
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "CONFERENE";
      stringArray0[2] = "confer";
      lovinsStemmer0.stem("KEYWORDS");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer2.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string2 = lovinsStemmer3.stemString("o9}gyN3I&9~C~*kV");
      assertEquals("o9}gyn3&9~c~*kv", string2);
      
      String string3 = lovinsStemmer2.stemString("lux");
      assertEquals("luc", string3);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4586776368685925
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.";
      stringArray0[4] = "a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[6] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      String string0 = lovinsStemmer0.stem("ancies");
      assertEquals("anci", string0);
      
      String string1 = lovinsStemmer1.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6985638131921648
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("doubllud");
      assertEquals("doubllus", string0);
      
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5761107879401999
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("tex");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("lud");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("lus");
      String string0 = lovinsStemmer0.stemString("tic");
      assertEquals("tic", string0);
      
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      String string1 = lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.stemString("[$");
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer3.stemString("52$hc&t]<$Llb5?'7~9");
      assertEquals("52$hc&t]<$llb5?'7~9", string3);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5666253130118255
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray1 = new String[3];
      stringArray1[0] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      stringArray1[1] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      stringArray1[2] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString("A classname has to be provided with the -W option!");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string0 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer.main(stringArray1);
      lovinsStemmer3.toString();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string1 = lovinsStemmer4.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string1);
      
      String string2 = lovinsStemmer4.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7883621621389374
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("8034erid");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("zJ#");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String[] stringArray1 = new String[0];
      LovinsStemmer.main(stringArray1);
      lovinsStemmer2.toString();
      String[] stringArray2 = new String[8];
      stringArray2[0] = "_:])zV ";
      stringArray2[1] = "n8qher";
      stringArray2[2] = "zJ#";
      stringArray2[3] = "1`8HR/rXF-";
      stringArray2[4] = "zJ#";
      stringArray2[5] = "weka.core.stemmers.LovinsStemmer";
      stringArray2[6] = "weka.core.stemmers.LovinsStemmer";
      stringArray2[7] = "8034erid";
      LovinsStemmer.main(stringArray2);
      lovinsStemmer2.toString();
      LovinsStemmer.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6441580230126513
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[9];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("iful");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer1.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("eousness");
      String string2 = lovinsStemmer0.stemString("O9PR)(_wIHP'1cD-ru");
      assertEquals("o9pr)(_wihp'1cd-ru", string2);
      
      lovinsStemmer0.stemString("cid");
      String string3 = lovinsStemmer1.stemString("&DkHZnG9:JzN+A");
      assertEquals("&dkhzng9:jzn+a", string3);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6806328518544424
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Z^_rORCEaeK";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("g6end");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer2.toString();
      LovinsStemmer.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6505879040284819
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmerhesend");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.getRevision();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6248116507956443
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[9];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("iful");
      assertEquals("ifl", string1);
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("end");
      lovinsStemmer0.stemString("0vm02kPyfF B/t*8WK");
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6276267190054259
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.toString();
      lovinsStemmer2.globalInfo();
      String string0 = lovinsStemmer0.stemString("b6omvex");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer3.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6139063675125453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray1 = new String[3];
      stringArray1[0] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      stringArray1[1] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      stringArray1[2] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString("A classname has to be provided with the -W option!");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("ond");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6201847681715973
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("qpyl\rgd \"}9vqr&;|vpand");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("qpyl\rgd \"}9vqr&;|vdex");
      assertEquals("qpyl\rgd \"}9vqr&;|vdic", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("Qj{{G");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stemString("q@i6DON&KS?oArj#");
      assertEquals("q@i6don&ks?oarj#", string2);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.toString();
      String string3 = lovinsStemmer0.stemString("A document having an author and title, but not formally published.");
      assertEquals("a docum hav an author and titl, but not form publ.", string3);
      
      String string4 = lovinsStemmer0.stemString("\"Q?Sk");
      assertEquals("\"q?sk", string4);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6945841995580817
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[9];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String[] stringArray1 = new String[0];
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("lid");
      assertEquals("lis", string0);
      
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer2.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string1 = lovinsStemmer5.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5782165799392776
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("qpyl\rgd \"}9vqr&;|vpand");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("qpyl\rgd \"}9vqr&;|vdex");
      assertEquals("qpyl\rgd \"}9vqr&;|vdic", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("Qj{{G");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("qj{{g");
      String string2 = lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string2);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.619906021968441
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Z^_rORCEaeK";
      stringArray0[1] = "contents";
      stringArray0[2] = "@3ud-Ww.~i2BmLW5M";
      stringArray0[5] = "contents";
      stringArray0[6] = "5B-JoVR[V`wcf}|FL";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("allic");
      assertEquals("al", string0);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.4217022844075329
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("mit");
      assertEquals("mis", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6195964910568401
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("An annotation. It is not used by the standard bibliography styles, but may be used by others that produce an annotated bibliography.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6267723833585614
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string0);
      
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6208628968146166
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[9];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("rtlapbex");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("aging");
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer1.stemString("1Azl,r6J`[u*~?1G)Bw");
      assertEquals("1azl,r6j`[u*~?1g)bw", string1);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5390515863799124
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String[] stringArray1 = new String[3];
      stringArray1[0] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      stringArray1[1] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      stringArray1[2] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      LovinsStemmer.main(stringArray1);
      String string1 = lovinsStemmer0.stemString("A classname has to be provided with the -W option!");
      assertEquals("a classnam ha to be provid with th -w opt!", string1);
      
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer2.toString();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String[] stringArray2 = new String[7];
      stringArray2[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray2[1] = "a classnam ha to be provid with th -w opt!";
      stringArray2[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray2[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray2[4] = "A classname has to be provided with the -W option!";
      stringArray2[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray2[6] = "a classnam ha to be provid with th -w opt!";
      LovinsStemmer.main(stringArray2);
      lovinsStemmer1.toString();
      lovinsStemmer2.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      String string3 = lovinsStemmer2.stemString("The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.");
      assertEquals("th nam of a ser or ses of book. when cit an entir book, th th titl field giv it titl and an opt ser field giv th nam of a ser or mult-volum ses in which th book is publ.", string3);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.627254298155964
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("%hvif|szhsi6vad");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("%hvif|szhsi6vad");
      lovinsStemmer0.stemString("ionert");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ionert";
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("um2uittex");
      String string0 = lovinsStemmer0.stemString("");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("LtK,nDV8kAso2DZb");
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "sa";
      stringArray0[1] = "";
      stringArray0[2] = "$&``$)U_NlPzG+S";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = ".<^sXZL2&3*&2foa";
      stringArray0[6] = "";
      stringArray0[2] = "ary";
      stringArray0[8] = ":K0`hR?:'i&yET+c$p";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.4449354114502373
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Z^_rORCEaeK";
      stringArray0[1] = "contents";
      stringArray0[2] = "@3ud-Ww.~i2BmLW5M";
      stringArray0[4] = "The uthors ffiliation.";
      stringArray0[5] = "";
      stringArray0[6] = "5B-JoVR[V`wcf}|FL";
      stringArray0[7] = "hes";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("@3ud-Ww.~i2BmLW5M");
      String string0 = lovinsStemmer0.stem("encing");
      assertEquals("enc", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stem("yt");
      assertEquals("yt", string1);
      
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.659391999873051
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = "?t#v>x\\z0%";
      lovinsStemmer0.stemString("?t#v>xz0%");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string1 = "t";
      lovinsStemmer0.stemString("t");
      lovinsStemmer0.stem("ens");
      lovinsStemmer0.stem("");
      lovinsStemmer0.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5871533250055652
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Z^_rORCEaeK";
      stringArray0[1] = "contents";
      stringArray0[2] = "@3ud-Ww.~i2BmLW5M";
      stringArray0[4] = "The uthors ffiRiation.";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("contents");
      assertEquals("content", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("ne36v.Pgmu@xQwu<Yw");
      assertEquals("ne36v.pgmu@xqwu<yw", string2);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string3);
      
      String string4 = lovinsStemmer0.stemString("Median (ints): ");
      assertEquals("med (int): ", string4);
  }
}
