/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 06:01:21 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMO;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.OneR;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Stopwords;
import weka.core.TestInstances;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.kdtrees.KDTreeNode;
import weka.core.stemmers.LovinsStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.Tokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      boolean boolean0 = true;
      Instance instance0 = null;
      naiveBayesMultinomialText0.m_lowercaseTokens = false;
      boolean boolean1 = true;
      Tokenizer tokenizer0 = naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.870621442595209
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(true);
      double[] doubleArray0 = new double[8];
      TestInstances testInstances0 = new TestInstances();
      SMO sMO0 = new SMO();
      Capabilities capabilities0 = sMO0.getCapabilities();
      capabilities0.enableAllClasses();
      Instances instances0 = testInstances0.generate("r:[g'^Uu{#R=>hm");
      TestInstances testInstances1 = new TestInstances();
      SparseInstance sparseInstance0 = new SparseInstance(23);
      instances0.add((Instance) sparseInstance0);
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.setNumDate(2);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TestInstances testInstances3 = new TestInstances();
      testInstances0.setNumClasses((-979));
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      SparseInstance sparseInstance1 = new SparseInstance((-1), doubleArray0, intArray0, 657);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, (-979));
      naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
      naiveBayesMultinomialText0.setOptions(testInstances3.DEFAULT_WORDS);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0189260049770015
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[8];
      OneR oneR0 = new OneR();
      naiveBayesMultinomialText0.setPeriodicPruning(1);
      Capabilities capabilities0 = oneR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNoClass(false);
      Object object0 = testInstances0.clone();
      capabilities0.enableAllClasses();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumClasses((-1021));
      naiveBayesMultinomialText0.setNorm((-1.0));
      testInstances1.setNumDate((-2));
      oneR0.listOptions();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      TestInstances testInstances2 = new TestInstances();
      testInstances0.setNumClasses(13);
      capabilities0.enableAllAttributes();
      int[] intArray0 = new int[6];
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0, intArray0, (-2));
      naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      System.setCurrentTimeMillis(13);
      System.setCurrentTimeMillis(6);
      naiveBayesMultinomialText0.setOptions(((TestInstances) object0).DEFAULT_WORDS);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2260537947138115
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("?");
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      naiveBayesMultinomialText0.m_leplace = (-1960.3589153097);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("The file containing the stopwords (if this is a directory then the default ones are used).", arrayList0, 61);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("org.tartarus.snowball.ext", instances1, protectedProperties0);
      capabilities0.test(attribute0);
      Attribute attribute1 = new Attribute("", protectedProperties0);
      attribute0.addStringValue(attribute1, 30);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      attribute0.equalsMsg(attribute1);
      FileSystemHandling.appendLineToFile(evoSuiteFile1, " _r%Ik");
      capabilities0.toSource("real");
      naiveBayesMultinomialText0.toString();
      System.setCurrentTimeMillis(61);
      naiveBayesMultinomialText0.setOptions(stringArray0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8754202543382474
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[8];
      OneR oneR0 = new OneR();
      oneR0.toString();
      Capabilities capabilities0 = oneR0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      capabilities0.getAttributeCapabilities();
      testInstances0.setNoClass(false);
      TestInstances testInstances1 = (TestInstances)testInstances0.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.m_useStopList = true;
      capabilities0.enableAllClasses();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.setNumClasses((-1021));
      naiveBayesMultinomialText0.buildClassifier(instances0);
      TestInstances testInstances2 = new TestInstances();
      capabilities0.enableAllAttributes();
      int[] intArray0 = new int[6];
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0, intArray0, (-2));
      testInstances1.setNumString(12);
      naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      System.setCurrentTimeMillis(13);
      System.setCurrentTimeMillis(6);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "stopwords");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      naiveBayesMultinomialText0.toString();
      System.setCurrentTimeMillis(1L);
      naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, false);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.053085404600997
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.listOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      naiveBayesMultinomialText0.m_tokenizer = (Tokenizer) alphabeticTokenizer0;
      naiveBayesMultinomialText0.m_periodicP = 1982292598;
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.m_periodicP = 1982292598;
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      Random.setNextRandom(2021161080);
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.getStemmer();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getStemmer();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getStemmer();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1982292598;
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getData();
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(1, 1982292598, intArray0, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3628988161529048
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[4];
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("");
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) snowballStemmer0;
      naiveBayesMultinomialText0.getOptions();
      stringArray0[0] = "@u}ePZ{>tAI[z";
      stringArray0[1] = "XZQkp5!W!-U0T|";
      naiveBayesMultinomialText0.reset();
      stringArray0[2] = "X*;=;H,";
      SnowballStemmer.listStemmers();
      naiveBayesMultinomialText0.m_minWordP = (-212.19844);
      snowballStemmer0.getStemmer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[3] = "R`<";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.m_norm = (-212.19844);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      naiveBayesMultinomialText0.getOptions();
      System.setCurrentTimeMillis(0L);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0L, (int[]) null, 5);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance2, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.listOptions();
      SGDText sGDText0 = new SGDText();
      sGDText0.setLNorm((-1305.213168));
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.normTipText();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      try { 
        principalComponents0.convertInstance(sparseInstance1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // convertInstance: Principal components not built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2077792035682693
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("RRocLz06");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      double[] doubleArray0 = new double[9];
      KDTree kDTree0 = new KDTree();
      double[][] doubleArray1 = new double[2][3];
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = 1.3;
      doubleArray2[2] = 12.0;
      doubleArray2[6] = 2.0;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      StringReader stringReader0 = new StringReader("not-relational-atts");
      stringReader0.ready();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(stringReader0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"not-relational-atts\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2808765576791212
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      OneR oneR0 = new OneR();
      oneR0.getCapabilities();
      naiveBayesMultinomialText0.setPeriodicPruning(1454);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.getCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "kF:mjUvRgf`P0znA1S}");
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.lowercaseTokensTipText();
      naiveBayesMultinomialText1.minWordFrequencyTipText();
      naiveBayesMultinomialText1.getStopwords();
      System.setCurrentTimeMillis(1454);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.098960119081391
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.setMinWordFrequency((-2781.87514028737));
      naiveBayesMultinomialText0.m_norm = (-2781.87514028737);
      naiveBayesMultinomialText0.m_t = 12.0;
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      Stopwords stopwords0 = new Stopwords();
      stopwords0.add("\"?N}_^~");
      naiveBayesMultinomialText0.m_periodicP = (-267);
      naiveBayesMultinomialText0.m_stopwords = stopwords0;
      naiveBayesMultinomialText0.setOptions((String[]) null);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      stopwords0.getRevision();
      naiveBayesMultinomialText0.getStopwords();
      System.setCurrentTimeMillis(0L);
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setOptions((String[]) null);
      int[] intArray0 = new int[2];
      intArray0[0] = 31;
      intArray0[1] = (-267);
      TestInstances testInstances0 = new TestInstances();
      // Undeclared exception!
      try { 
        testInstances0.getRelationalFormat((-267));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -267
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = 1;
      OneR oneR0 = new OneR();
      OneR oneR1 = new OneR();
      oneR1.getCapabilities();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setPeriodicPruning(1);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText1.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8839939822643736
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[8];
      OneR oneR0 = new OneR();
      oneR0.toString();
      Capabilities capabilities0 = oneR0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      capabilities0.getAttributeCapabilities();
      testInstances0.setNoClass(false);
      TestInstances testInstances1 = (TestInstances)testInstances0.clone();
      capabilities0.enableAllClasses();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.setSeed(2000);
      testInstances0.setNumClasses((-1021));
      oneR0.listOptions();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      TestInstances testInstances3 = new TestInstances();
      testInstances0.setNumClasses(13);
      capabilities0.enableAllAttributes();
      int[] intArray0 = new int[6];
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0, intArray0, (-2));
      testInstances0.setNumInstances((-947));
      testInstances1.setNumString(12);
      double[] doubleArray1 = naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
      assertArrayEquals(new double[] {0.5454545454545454, 0.4545454545454546}, doubleArray1, 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      System.setCurrentTimeMillis(13);
      System.setCurrentTimeMillis(6);
      naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, false);
      naiveBayesMultinomialText0.pruneDictionary();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals("The tokenizing algorithm to use on the strings.", string0);
      
      naiveBayesMultinomialText0.getStopwords();
      SGDText sGDText0 = new SGDText();
      File file0 = sGDText0.getStopwords();
      MockFile mockFile0 = new MockFile("The tokenizing algorithm to use on the strings.");
      File file1 = mockFile0.getCanonicalFile();
      String string1 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string1);
      
      MockFile mockFile1 = new MockFile("d`uD5;, |E9{A4Bz", "xL_H yzM");
      mockFile1.getCanonicalFile();
      MockFile.createTempFile("d`uD5;, |E9{A4Bz", "9QOFh", file1);
      MockFile mockFile2 = new MockFile("The tokenizing algorithm to use on the strings.");
      MockFile mockFile3 = new MockFile(file1, "9QOFh");
      file0.toURI();
      naiveBayesMultinomialText0.setStopwords(mockFile2);
      KDTree kDTree0 = new KDTree();
      KDTreeNode kDTreeNode0 = new KDTreeNode(36, 1, (-2459), (double[][]) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("    result = new Object[i.length];\n", arrayList0, 1);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-2459);
      intArray0[2] = 0;
      intArray0[3] = (-2459);
      kDTreeNode0.m_NodeNumber = 0;
      intArray0[5] = (-2459);
      intArray0[6] = 1;
      intArray0[7] = 1;
      kDTree0.assignSubToCenters(kDTreeNode0, instances0, intArray0, intArray0);
      kDTree0.getTechnicalInformation();
      SparseInstance sparseInstance0 = new SparseInstance(2120);
      File file2 = naiveBayesMultinomialText0.getStopwords();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals("The tokenizing algorithm to use on the strings.", file2.toString());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[8];
      OneR oneR0 = new OneR();
      oneR0.toString();
      Capabilities capabilities0 = oneR0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      testInstances0.setNoClass(true);
      TestInstances.forCapabilities(capabilities1);
      capabilities0.enableAllClasses();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setSeed(2000);
      testInstances0.setNumClasses((-1021));
      testInstances1.setNumDate((-2));
      oneR0.listOptions();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.setTokenizer((Tokenizer) null);
      naiveBayesMultinomialText0.m_lnorm = (-1049.439087);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals((-1049.439087), naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.8839674112533467
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[8];
      OneR oneR0 = new OneR();
      Capabilities capabilities0 = oneR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.clone();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumDate((-2));
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      TestInstances testInstances2 = new TestInstances();
      testInstances0.setNumClasses(13);
      capabilities0.enableAllAttributes();
      int[] intArray0 = new int[6];
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0, intArray0, (-2));
      naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      System.setCurrentTimeMillis(13);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9627011894750575
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "3L&y";
      stringArray0[2] = "*P";
      stringArray0[3] = "-lnorm";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -lnorm option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.147468410552229
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("?");
      sGDText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.getOptions();
      OneR oneR0 = new OneR();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Object object0 = testInstances0.clone();
      Instances instances0 = testInstances0.generate("org.tartarus.snowball.ext");
      instances0.getRandomNumberGenerator(376L);
      sGDText0.setEpochs((-1));
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      sGDText0.setNorm((-294.8349499));
      SGDText.main(((TestInstances) object0).DEFAULT_WORDS);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumClasses(0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-2);
      intArray0[2] = (-1);
      intArray0[3] = (-2);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, (-2));
      naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
      
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2482901973068032
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[3];
      naiveBayesMultinomialText0.toString();
      SGDText sGDText0 = new SGDText();
      Stemmer stemmer0 = sGDText0.getStemmer();
      sGDText0.listOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      naiveBayesMultinomialText0.m_stemmer = stemmer0;
      stringArray0[0] = "nZxhFoK8";
      stringArray0[1] = "     ";
      stringArray0[2] = "kR2NMdC0S";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      naiveBayesMultinomialText0.setStopwords((File) null);
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      assertEquals(12, stringArray1.length);
      
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      
      System.setCurrentTimeMillis(0L);
      String[] stringArray2 = new String[6];
      stringArray2[0] = "NaiveBayesMultinomialText: No model built yet.\n";
      stringArray2[1] = "     ";
      stringArray2[2] = "NaiveBayesMultinomialText: No model built yet.\n";
      stringArray2[3] = "nZxhFoK8";
      stringArray2[4] = "     ";
      stringArray2[5] = "kR2NMdC0S";
      naiveBayesMultinomialText0.setOptions(stringArray2);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dik,uy?y6*6Tm)obU))");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_norm = 769.10506;
      SGDText sGDText0 = new SGDText();
      Stemmer stemmer0 = sGDText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7401591094179802
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("?");
      SGDText sGDText0 = new SGDText();
      sGDText0.setStemmer(snowballStemmer0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setLowercaseTokens(true);
      boolean boolean0 = naiveBayesMultinomialText1.getLowercaseTokens();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      OneR oneR0 = new OneR();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ">V";
      stringArray0[1] = "-T";
      stringArray0[2] = "8)n#=J%(<'A";
      stringArray0[3] = "] *mLzKS";
      stringArray0[5] = "Xd<Ym";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(true);
      double[] doubleArray0 = new double[8];
      AllFilter allFilter0 = new AllFilter();
      Capabilities capabilities0 = allFilter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNoClass(true);
      testInstances0.clone();
      capabilities0.enableAllClasses();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumDate((-1));
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[8];
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals("The tokenizing algorithm to use on the strings.", string0);
      
      File file0 = naiveBayesMultinomialText0.getStopwords();
      SGDText sGDText0 = new SGDText();
      MockFile mockFile0 = new MockFile("The tokenizing algorithm to use on the strings.");
      File file1 = mockFile0.getCanonicalFile();
      String string1 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string1);
      
      MockFile mockFile1 = new MockFile("d`uD5;, |E9{A4Bz", "xL_H yzM");
      mockFile1.getCanonicalFile();
      MockFile.createTempFile("d`uD5;, |E9{A4Bz", "9QOFh", file1);
      MockFile mockFile2 = new MockFile("The tokenizing algorithm to use on the strings.");
      MockFile mockFile3 = new MockFile(file1, "9QOFh");
      file0.toURI();
      naiveBayesMultinomialText0.setStopwords(mockFile2);
      KDTree kDTree0 = new KDTree();
      KDTreeNode kDTreeNode0 = new KDTreeNode(36, 1, (-2459), (double[][]) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("    result = new Object[i.length];\n", arrayList0, 1);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-2459);
      intArray0[2] = 0;
      intArray0[3] = (-2459);
      kDTreeNode0.m_NodeNumber = 0;
      intArray0[5] = (-2459);
      intArray0[6] = 1;
      intArray0[7] = 1;
      kDTree0.assignSubToCenters(kDTreeNode0, instances0, intArray0, intArray0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string2 = naiveBayesMultinomialText0.getRevision();
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals("9122", string2);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.9737955386768893
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = (NaiveBayesMultinomialText)AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      naiveBayesMultinomialText1.m_stemmer = (Stemmer) lovinsStemmer0;
      naiveBayesMultinomialText0.m_norm = 23.0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.getOptions();
      double double0 = naiveBayesMultinomialText0.getNorm();
      assertEquals(23.0, double0, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      naiveBayesMultinomialText0.getCapabilities();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      costSensitiveClassifier0.setMinimizeExpectedCost(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      naiveBayesMultinomialText0.m_stopwordsFile = file0;
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      Random.setNextRandom(1994091958);
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.listOptions();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getUseStopList();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      naiveBayesMultinomialText0.m_tokenizer = (Tokenizer) wordTokenizer0;
      naiveBayesMultinomialText0.m_tokenizer = (Tokenizer) wordTokenizer0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "m";
      stringArray0[1] = "The LNorm to use for document length normalization.";
      stringArray0[2] = ":GhxOcb'dB";
      stringArray0[3] = "-stopwords";
      stringArray0[4] = "dic";
      stringArray0[5] = "normalize";
      stringArray0[6] = "normalize";
      stringArray0[7] = "@*90P5QDky";
      stringArray0[8] = "lnorm";
      WordTokenizer.main(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = (NaiveBayesMultinomialText)AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.m_periodicP = 0;
      naiveBayesMultinomialText1.setMinWordFrequency((-1.0));
      naiveBayesMultinomialText1.setLNorm((-1.0));
      naiveBayesMultinomialText1.minWordFrequencyTipText();
      naiveBayesMultinomialText0.setLNorm((-1.0));
      double double0 = naiveBayesMultinomialText1.getMinWordFrequency();
      assertEquals((-1.0), naiveBayesMultinomialText1.getLNorm(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4435896416877303
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals("The tokenizing algorithm to use on the strings.", string0);
      
      File file0 = naiveBayesMultinomialText0.getStopwords();
      SGDText sGDText0 = new SGDText();
      MockFile mockFile0 = new MockFile("The tokenizing algorithm to use on the strings.");
      File file1 = mockFile0.getCanonicalFile();
      String string1 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string1);
      
      MockFile mockFile1 = new MockFile("d`uD5;, |E9{A4Bz", "xL_H yzM");
      mockFile1.mkdirs();
      mockFile1.getCanonicalFile();
      MockFile.createTempFile("d`uD5;, |E9{A4Bz", "9QOFh", file1);
      MockFile mockFile2 = new MockFile("The tokenizing algorithm to use on the strings.");
      MockFile mockFile3 = new MockFile(file1, "9QOFh");
      file0.toURI();
      naiveBayesMultinomialText0.setStopwords(mockFile2);
      KDTree kDTree0 = new KDTree();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int[] intArray0 = new int[8];
      intArray0[3] = (-2459);
      intArray0[5] = (-2459);
      intArray0[7] = 1;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string2 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string2);
      
      naiveBayesMultinomialText0.listOptions();
      boolean boolean0 = naiveBayesMultinomialText0.getNormalizeDocLength();
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(boolean0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.269394275120508
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      KDTree kDTree0 = new KDTree();
      double[][] doubleArray1 = new double[2][3];
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = 1.3;
      doubleArray2[2] = 12.0;
      doubleArray2[3] = (double) (-2);
      doubleArray2[4] = (double) (-1);
      doubleArray2[5] = (double) (-1);
      doubleArray2[6] = 2.0;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      KDTreeNode kDTreeNode0 = new KDTreeNode((-2), (-2), (-1), doubleArray1, doubleArray1);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      StringReader stringReader0 = new StringReader("not-relational-atts");
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(stringReader0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"not-relational-atts\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8274946474339555
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      naiveBayesMultinomialText0.toString();
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("NaiveBayesMultinomialText: No model built yet.\n");
      naiveBayesMultinomialText0.setStemmer(lovinsStemmer0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "* <x-y,x-y>^2)";
      stringArray0[1] = "";
      stringArray0[2] = "NaiveBayesMultinomialText: No model built yet.\n";
      stringArray0[3] = "";
      stringArray0[4] = "* <x-y,x-y>^2)";
      stringArray0[5] = "* <x-y,x-y>^2)";
      stringArray0[6] = "* <x-y,x-y>^2)";
      stringArray0[7] = "NaiveBayesMultinomialText: No model built yet.\n";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      naiveBayesMultinomialText0.pruneDictionary();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      naiveBayesMultinomialText0.setTokenizer(alphabeticTokenizer0);
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      naiveBayesMultinomialText0.getStemmer();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setStemmer(lovinsStemmer0);
      naiveBayesMultinomialText0.pruneDictionary();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instance instance0 = null;
      naiveBayesMultinomialText0.reset();
      try { 
        naiveBayesMultinomialText0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.269394275120508
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_norm = 21.0;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      KDTree kDTree0 = new KDTree();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(21.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "hE7g>cF";
      stringArray0[1] = "";
      stringArray0[2] = "\"5BLHo/D^j";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "z]2?p&r4VM8x\"_x";
      stringArray0[6] = "";
      stringArray0[7] = "";
      Tokenizer.runTokenizer(nGramTokenizer0, stringArray0);
      nGramTokenizer0.nextElement();
      naiveBayesMultinomialText0.setTokenizer(nGramTokenizer0);
      String string0 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string0);
      
      String string1 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string1);
      
      naiveBayesMultinomialText0.getLowercaseTokens();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 10.0;
      doubleArray0[3] = 10.0;
      doubleArray0[4] = 10.0;
      DenseInstance denseInstance0 = new DenseInstance(10.0, doubleArray0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) denseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.4435896416877303
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.getStopwords();
      SGDText sGDText0 = new SGDText();
      File file0 = sGDText0.getStopwords();
      MockFile mockFile0 = new MockFile("The tokenizing algorithm to use on the strings.");
      File file1 = mockFile0.getCanonicalFile();
      naiveBayesMultinomialText0.stopwordsTipText();
      MockFile mockFile1 = new MockFile("d`uD5;, |E9{A4Bz", "xL_H yzM");
      mockFile1.getCanonicalFile();
      MockFile.createTempFile("d`uD5;, |E9{A4Bz", "9QOFh", file1);
      MockFile mockFile2 = new MockFile("The tokenizing algorithm to use on the strings.");
      MockFile mockFile3 = new MockFile(file1, "9QOFh");
      file0.toURI();
      naiveBayesMultinomialText0.setStopwords(mockFile2);
      KDTree kDTree0 = new KDTree();
      KDTreeNode kDTreeNode0 = new KDTreeNode(36, 1, (-2459), (double[][]) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("    result = new Object[i.length];\n", arrayList0, 1);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      kDTreeNode0.m_NodeNumber = 0;
      intArray0[5] = (-2459);
      intArray0[6] = 1;
      intArray0[7] = 1;
      kDTree0.assignSubToCenters(kDTreeNode0, instances0, intArray0, intArray0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      naiveBayesMultinomialText0.useStopListTipText();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 36;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2459);
      doubleArray0[4] = (double) 36;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 36;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0, intArray0, 2);
      try { 
        naiveBayesMultinomialText0.updateClassifier(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "]k8~Xyf+H>eVW";
      stringArray0[1] = "\tA file containing stopwords to override the default ones.\n\tUsing this option automatically sets the flag ('-stoplist') to use the\n\tstoplist if the file exists.\n\tFormat: one stopword per line, lines starting with '#'\n\tare interpreted as comments and ignored.";
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("");
      naiveBayesMultinomialText0.m_data = instances0;
      stringArray0[2] = "\":..6_+d9";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      String[] stringArray1 = nGramTokenizer0.getOptions();
      nGramTokenizer0.setDelimiters("");
      naiveBayesMultinomialText0.setTokenizer(nGramTokenizer0);
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.getNorm();
      NaiveBayesMultinomialText.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.724454707919629
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.setPeriodicPruning(101);
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.m_stopwordsFile = file0;
      naiveBayesMultinomialText0.m_t = 0.0;
      naiveBayesMultinomialText0.m_lnorm = 0.0;
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.setMinWordFrequency(1000.0);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.getCapabilities();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(101);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.reset();
      boolean boolean0 = naiveBayesMultinomialText0.getUseWordFrequencies();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      naiveBayesMultinomialText0.setNorm(2305.018291);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      KDTree kDTree0 = new KDTree();
      double[][] doubleArray1 = new double[2][3];
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = 1.3;
      doubleArray2[2] = 12.0;
      doubleArray2[3] = (double) (-2);
      doubleArray2[4] = (double) (-1);
      doubleArray2[5] = (double) (-1);
      doubleArray2[6] = 2.0;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      KDTreeNode kDTreeNode0 = new KDTreeNode((-2), (-2), (-1), doubleArray1, doubleArray1);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      StringReader stringReader0 = new StringReader("not-relational-atts");
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(stringReader0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"not-relational-atts\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
