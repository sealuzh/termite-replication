/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 04:54:14 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Random;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.balltrees.BottomUpConstructor;
import weka.core.neighboursearch.balltrees.MiddleOutConstructor;
import weka.core.tokenizers.NGramTokenizer;
import weka.filters.Filter;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.unsupervised.attribute.Remove;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      protectedProperties1.elements();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      Object object0 = new Object();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, (String) null);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = 1.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(117);
      jRip0.toString();
      jRip_NumericAntd0.toString();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockRandom0.nextInt(1872);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6f`76jJ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6f`76jJ");
      mockRandom0.doubles();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6f`76jJ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis((byte)79);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6f`76jJ");
      Instances instances0 = new Instances("6f`76jJ", arrayList0, 404);
      MockRandom mockRandom1 = new MockRandom();
      instances0.randomize(mockRandom1);
      instances0.resampleWithWeights((Random) mockRandom0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6f`76jJ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(404);
      instances0.add((Instance) binarySparseInstance0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("6f`76jJ", 105);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      org.evosuite.runtime.Random.setNextRandom(75);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, (-151.49975), (-696));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`7 jJ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`7 jJ");
      mockRandom0.doubles();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      System.setCurrentTimeMillis((byte)79);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`7 jJ");
      Instances instances0 = new Instances("`7 jJ", arrayList0, 404);
      MockRandom mockRandom1 = new MockRandom();
      instances0.randomize(mockRandom1);
      Instances instances1 = instances0.resampleWithWeights((Random) mockRandom0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`7 jJ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SparseInstance sparseInstance0 = new SparseInstance((byte)79);
      instances0.add((Instance) sparseInstance0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("d>=6&(W4ak?k", instances1, 67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      instances0.add((Instance) sparseInstance0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, (-151.499753388), (-696));
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.2215523079930732
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Attribute attribute0 = new Attribute("Very simple classifica8ion rules perform well on mosS coEmonly used datasets", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 2);
      Properties properties0 = new Properties();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "Very simple classifica8ion rules perform well on mosS coEmonly used datasets");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Object object0 = new Object();
      Predicate<Object> predicate4 = predicate0.and(predicate1);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate2.and(predicate5);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate4);
      Predicate<Object> predicate9 = predicate7.and(predicate8);
      predicate8.and(predicate3);
      predicate0.negate();
      predicate3.or(predicate8);
      Predicate<Object> predicate10 = predicate0.and(predicate9);
      predicate10.negate();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(4.94E-321);
      JRip jRip1 = new JRip();
      jRip_RipperRule0.grow(instances0);
      assertEquals(4.94E-321, jRip_RipperRule0.getConsequent(), 0.01);
      
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JRip.NominalAntd jRip_NominalAntd1 = jRip1.new NominalAntd(attribute0);
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getSeed();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.turnChecksOff();
      jRip_RipperRule0.hasAntds();
      Utils.log2 = 1777.3845486302;
      jRip_RipperRule0.setConsequent((-1738.978524));
      jRip_RipperRule0.hasAntds();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`7 jJ");
      mockRandom0.doubles((long) (byte)79);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = new Instances("[j@*wdRV,Fu", arrayList0, 404);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.doubles(1740L);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      instances0.randomize(mockRandom1);
      Instances instances1 = instances0.resampleWithWeights((Random) mockRandom0);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[j@*wdRV,Fu");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SparseInstance sparseInstance0 = new SparseInstance((byte)79);
      instances1.add((Instance) sparseInstance0);
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jRip0.foldsTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      jRip0.getOptions();
      MockRandom mockRandom0 = new MockRandom();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(linkedList0);
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.ITALIAN;
      Locale locale2 = Locale.GERMANY;
      locale2.getUnicodeLocaleAttributes();
      Set<String> set0 = locale2.getUnicodeLocaleKeys();
      assertTrue(set0.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      jRip0.getOptions();
      MockRandom mockRandom0 = new MockRandom();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.ITALIAN;
      Locale locale2 = Locale.FRENCH;
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange(" rules are deleted");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range= rules are deleted
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      jRip0.setUsePruning(false);
      boolean boolean0 = jRip0.getUsePruning();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`7 jJ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`7 jJ");
      mockRandom0.doubles((long) (byte)79);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = new Instances("[j@*wdRV,Fu", arrayList0, (byte)79);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.nextInt();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      instances0.randomize(mockRandom1);
      Instances instances1 = instances0.resampleWithWeights((Random) mockRandom0);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[j@*wdRV,Fu");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SparseInstance sparseInstance0 = new SparseInstance((byte)79);
      instances0.add((Instance) sparseInstance0);
      JRip jRip0 = new JRip();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      Attribute attribute0 = new Attribute("xYdBfF8t", instances1, (int) (byte)79);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip0.foldsTipText();
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, (-410.0), (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3129809585039767
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      MockRandom mockRandom0 = new MockRandom();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, 2);
      properties0.clone();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 1;
      doubleArray0[0] = (double) 2;
      doubleArray0[4] = (double) 1;
      doubleArray0[7] = (double) 3;
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      doubleArray0[8] = (double) 1;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      DenseInstance.main(stringArray0);
      properties0.entrySet();
      multiClassClassifierUpdateable0.setRandomWidthFactor(2.0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties0.forEach(biConsumer0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      jRip0.getUsePruning();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.value = (double) 1;
      jRip_NominalAntd0.covers(denseInstance0);
      String[] stringArray1 = new String[7];
      AbstractClassifier.makeCopy(multiClassClassifierUpdateable0);
      stringArray1[0] = "integer";
      stringArray1[1] = "integer";
      stringArray1[1] = "numeric";
      stringArray1[3] = null;
      stringArray1[4] = "date";
      stringArray1[5] = "@attribute";
      stringArray1[6] = "string";
      try { 
        jRip0.setOptions(stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute((String) null, 3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = (double) 4;
      DenseInstance denseInstance0 = new DenseInstance(2.0, doubleArray0);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setRandomWidthFactor(-0.0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      jRip0.getUsePruning();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(denseInstance0);
      attribute0.setStringValue("\tSet the minimal weights of instances\n\twithin a split.\n\t(default 2.0)");
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      Instance instance0 = null;
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      AdditiveRegression additiveRegression1 = new AdditiveRegression();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      protectedProperties2.clone();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties3);
      Attribute attribute0 = new Attribute((String) null, (String) null);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1831);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      long long0 = jRip0.getSeed();
      assertEquals(1L, long0);
      
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(boolean0);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      MockRandom mockRandom0 = new MockRandom();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, 3);
      Properties properties1 = new Properties();
      Properties properties2 = (Properties)properties1.clone();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      double[] doubleArray0 = new double[6];
      properties1.values();
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      properties1.keys();
      multiClassClassifierUpdateable0.setRandomWidthFactor((-4.0));
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties0.forEach(biConsumer0);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties2);
      jRip0.getUsePruning();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(denseInstance0);
      attribute0.setStringValue("\tSet number of folds for REP\n\tOne fold is used as pruning set.\n\t(default 3)");
      System.setCurrentTimeMillis((-696));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2925683891723425
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("$", (String) null, protectedProperties0);
      properties0.replace((Object) multiClassClassifierUpdateable0, (Object) attribute0);
      Attribute attribute1 = new Attribute((String) null, 0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      Attribute attribute2 = new Attribute("@attribute", protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute1);
      String string0 = jRip_NumericAntd1.toString();
      assertEquals("null <= NaN", string0);
      
      DenseInstance denseInstance0 = new DenseInstance(2);
      MockRandom mockRandom1 = new MockRandom();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable1 = new MultiClassClassifierUpdateable();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties2.forEach(biConsumer0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties2);
      jRip0.getUsePruning();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      boolean boolean0 = jRip_NominalAntd0.covers(denseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      protectedProperties1.clone();
      Attribute attribute0 = new Attribute("!Hp{JcZNg'y*T:8N)h", protectedProperties3);
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      SystemInUtil.addInputLine("numeric");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, intArray0, 27752);
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(3, jRip0.getFolds());
      assertTrue(boolean0);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`7 jJ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`7 jJ");
      mockRandom0.doubles((long) (byte)79);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      System.setCurrentTimeMillis((byte)79);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = new Instances("[j@*wdRV,Fu", arrayList0, 404);
      MockRandom mockRandom1 = new MockRandom();
      instances0.randomize(mockRandom1);
      Properties properties0 = new Properties();
      Instances instances1 = instances0.resampleWithWeights((Random) mockRandom0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[j@*wdRV,Fu");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SparseInstance sparseInstance0 = new SparseInstance((byte)79);
      instances0.add((Instance) sparseInstance0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("xYdBfF8t", instances1, 67);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, (-410.0), (-1.0));
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Attribute attribute0 = new Attribute("Very simple classifica8ion rules perform well on mosS commonly used datasets", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 2);
      Properties properties0 = new Properties();
      ClassOrder classOrder0 = new ClassOrder();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "Very simple classifica8ion rules perform well on mosS commonly used datasets");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Object object0 = new Object();
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate4 = predicate0.and(predicate1);
      Attribute attribute1 = new Attribute("Very simple classifica8ion rules perform well on mosS commonly used datasets", (List<String>) null, 0);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) attribute1);
      Predicate<Object> predicate6 = predicate2.and(predicate5);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate4);
      predicate7.and(predicate8);
      Predicate<Object> predicate9 = predicate6.and(predicate4);
      predicate9.and(predicate8);
      DecisionTable decisionTable0 = new DecisionTable();
      try { 
        jRip0.rulesetForOneClass(2218.7, instances0, (-1.7976931348623157E308), Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`7 jJ");
      mockRandom0.doubles((long) (byte)79);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = new Instances("[j@*wdRV,Fu", arrayList0, 404);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.doubles(1740L);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      instances0.randomize(mockRandom1);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[j@*wdRV,Fu");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = jRip0.foldsTipText();
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, false);
      assertEquals(1L, jRip0.getSeed());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, (String) null);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "date";
      stringArray0[1] = ",DeVcY";
      jRip0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`7 jl");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`7 jl");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-9);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`7 jl");
      Instances instances0 = new Instances("`7 jl", arrayList0, 395);
      MockRandom mockRandom1 = new MockRandom();
      instances0.randomize(mockRandom1);
      instances0.resampleWithWeights((Random) mockRandom0);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`7 jl");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attribute attribute0 = new Attribute("D", "");
      JRip jRip0 = new JRip();
      Attribute attribute1 = new Attribute("NY}?niC^f$E");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      attribute0.formatDate(1);
      Attribute attribute2 = new Attribute("@end", "", 1);
      Utils.SMALL = -0.0;
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute2);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      jRip0.globalInfo();
      double double0 = jRip_NominalAntd1.getAccu();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attribute attribute0 = new Attribute("D", "");
      JRip jRip0 = new JRip();
      Attribute attribute1 = new Attribute("NY}?niC^f$E");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute2 = new Attribute("@end", "", 1);
      Utils.SMALL = -0.0;
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute2);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      jRip0.globalInfo();
      double double0 = jRip_NominalAntd1.getAccu();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jRip0.setOptimizations(6);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Properties properties0 = new Properties();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Accuracy (discrete class only)");
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Accuracy (discrete class only)", protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(6, jRip0.getOptimizations());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      Object object0 = new Object();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, (String) null);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(117);
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      String string1 = jRip_NumericAntd0.toString();
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertNotSame(jRip_NumericAntd0, jRip_NumericAntd1);
      assertEquals("null <= NaN", string1);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("Very iple classifica8ion rules perform well on mosS commly useddatasets");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 0);
      ClassOrder classOrder0 = new ClassOrder();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "Very iple classifica8ion rules perform well on mosS commly useddatasets");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Object object0 = new Object();
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate1.and(predicate4);
      Predicate<Object> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = predicate2.and(predicate6);
      predicate5.negate();
      Predicate<Object> predicate8 = predicate5.and(predicate6);
      Predicate<Object> predicate9 = predicate2.and(predicate8);
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate<Object> predicate11 = predicate6.negate();
      Predicate<Object> predicate12 = predicate6.negate();
      Predicate<Object> predicate13 = predicate11.or(predicate12);
      predicate7.negate();
      predicate9.negate();
      predicate10.negate();
      Predicate<Object> predicate14 = predicate0.and(predicate9);
      Predicate<Object> predicate15 = predicate8.negate();
      predicate9.and(predicate15);
      predicate13.negate();
      Predicate<Object> predicate16 = predicate6.or(predicate3);
      predicate16.and(predicate11);
      predicate8.negate();
      instances0.removeIf(predicate7);
      predicate14.negate();
      jRip0.getDebug();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, (-1605.5), 0);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("-$U");
      jRip_RipperRule0.toString(attribute0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      Locale locale0 = Locale.CHINESE;
      System.setCurrentTimeMillis((-502L));
      locale0.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      IBk iBk0 = new IBk((-408));
      CoverTree coverTree0 = new CoverTree();
      LinkedList<RuleStats> linkedList2 = new LinkedList<RuleStats>();
      LinkedList<RuleStats> linkedList3 = new LinkedList<RuleStats>();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier3 = new InputMappedClassifier();
      System.setCurrentTimeMillis((-1625));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds((-448));
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      additiveRegression0.setClassifier(jRip0);
      AbstractClassifier.runClassifier(additiveRegression0, (String[]) null);
      Attribute attribute0 = new Attribute("", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.accu = (double) 2;
      jRip_NominalAntd0.toString();
      jRip_NominalAntd0.att = attribute0;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      jRip0.getFolds();
      jRip0.setOptimizations(2);
      jRip_NominalAntd0.getRevision();
      jRip0.debugTipText();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      JRip jRip0 = new JRip();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      Instances instances1 = decisionTable1.m_dtInstances;
      Remove remove0 = decisionTable2.m_delTransform;
      decisionTable0.m_delTransform = null;
      DecisionTable decisionTable3 = new DecisionTable();
      int[] intArray0 = new int[0];
      decisionTable1.m_decisionFeatures = intArray0;
      decisionTable0.m_numAttributes = 4;
      DecisionTable decisionTable4 = new DecisionTable();
      DecisionTable decisionTable5 = new DecisionTable();
      decisionTable3.getSearch();
      DecisionTable decisionTable6 = new DecisionTable();
      DecisionTable decisionTable7 = new DecisionTable();
      boolean boolean0 = jRip0.getCheckErrorRate();
      assertTrue(boolean0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      AdditiveRegression additiveRegression1 = new AdditiveRegression();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      Instances instances0 = decisionTable3.m_dtInstances;
      DecisionTable decisionTable4 = new DecisionTable();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      decisionTable2.m_evaluationMeasure = 3;
      decisionTable4.setUseIBk(true);
      int[] intArray0 = new int[4];
      decisionTable4.setCrossVal(117);
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 5;
      doubleArray0[8] = (double) 1;
      decisionTable4.m_decisionFeatures = intArray0;
      decisionTable4.m_classPriors = doubleArray0;
      doubleArray0[1] = (double) 4;
      doubleArray0[1] = (double) 5;
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      SparseInstance sparseInstance0 = new SparseInstance(5);
      jRip_RipperRule0.covers(sparseInstance0);
      try { 
        jRip0.rulesetForOneClass(1, (Instances) null, 5, (-2056.92692));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassOrder[] classOrderArray0 = new ClassOrder[6];
      ClassOrder classOrder0 = new ClassOrder();
      classOrderArray0[0] = classOrder0;
      ClassOrder classOrder1 = new ClassOrder();
      classOrderArray0[1] = classOrder1;
      ClassOrder classOrder2 = new ClassOrder();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 487.0909301147;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.setValueSparse(1, 2.0);
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers(binarySparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance1.attribute(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassOrder[] classOrderArray0 = new ClassOrder[9];
      ClassOrder classOrder0 = new ClassOrder();
      classOrderArray0[0] = classOrder0;
      ClassOrder classOrder1 = new ClassOrder();
      classOrderArray0[1] = classOrder0;
      ClassOrder classOrder2 = new ClassOrder();
      Filter.makeCopy(classOrder0);
      classOrderArray0[2] = classOrder2;
      ClassOrder classOrder3 = new ClassOrder();
      ClassOrder classOrder4 = new ClassOrder();
      ClassOrder classOrder5 = new ClassOrder();
      JRip jRip0 = new JRip();
      Utils.log2 = (double) 1;
      // Undeclared exception!
      try { 
        jRip0.getMeasure("nI9@F>7!*z+J;ug`?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nI9@F>7!*z+J;ug`? not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.05569358184064
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ANN Programming Manual";
      stringArray0[1] = "size";
      jRip0.setOptions(stringArray0);
      jRip0.setSeed((-1L));
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1467);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getMaxInfoGain();
      binarySparseInstance0.dataset();
      // Undeclared exception!
      try { 
        binarySparseInstance0.enumerateAttributes();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      assertNotSame(jRip_RipperRule0, jRip_RipperRule1);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      DecisionTable decisionTable0 = new DecisionTable();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      decisionTable0.m_classPriorCounts = doubleArray0;
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      decisionTable1.getSearchSpec();
      DecisionTable decisionTable3 = new DecisionTable();
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 5;
      doubleArray1[1] = (-1986.956837);
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 3;
      doubleArray1[3] = (double) 3;
      doubleArray1[5] = (double) 3;
      doubleArray1[6] = (double) 3;
      doubleArray1[7] = (double) 5;
      decisionTable1.m_classPriorCounts = doubleArray1;
      DecisionTable decisionTable4 = new DecisionTable();
      decisionTable1.getSearch();
      Instances instances0 = decisionTable4.m_dtInstances;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      DecisionTable decisionTable5 = new DecisionTable();
      DecisionTable decisionTable6 = new DecisionTable();
      Properties properties0 = new Properties();
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-284.2);
      doubleArray0[1] = (-284.2);
      doubleArray0[2] = (-284.2);
      doubleArray0[3] = (-284.2);
      doubleArray0[4] = (-284.2);
      doubleArray0[5] = (-284.2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-284.2), doubleArray0);
      binarySparseInstance0.isMissing(1);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3469992135645263
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      MockRandom mockRandom0 = new MockRandom();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3-&0]");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m@0S-6");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)39;
      jRip0.setOptions(stringArray0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(11, stringArray0.length);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>(arrayList0);
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.ITALIAN;
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      locale0.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      JRip jRip1 = new JRip();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-F";
      stringArray0[1] = "c6KuPn8";
      stringArray0[2] = "oQP#p{_YEt+z";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "u+,_yj^ftL+";
      try { 
        jRip1.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"c6KuPn8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.0426322117102855
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = 1.0;
      jRip0.setDebug(true);
      jRip0.setFolds(1);
      jRip0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DecisionTable decisionTable0 = new DecisionTable();
      IBk iBk0 = decisionTable0.m_ibk;
      Instances instances0 = decisionTable0.m_dtInstances;
      try { 
        jRip0.rulesetForOneClass(3, (Instances) null, 1735.99, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[8];
      String string0 = jRip0.optimizationsTipText();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("The number of optimization runs.", string0);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      AdditiveRegression additiveRegression1 = new AdditiveRegression();
      Attribute attribute0 = new Attribute("Very imple classifica8ion rules perform well on mosS commoly useddatasets", (List<String>) null);
      ClassOrder classOrder0 = new ClassOrder();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "Very imple classifica8ion rules perform well on mosS commoly useddatasets");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Object object0 = new Object();
      Predicate<Object> predicate4 = predicate0.and(predicate1);
      Predicate<Object> predicate5 = predicate2.and(predicate1);
      Predicate<Object> predicate6 = predicate4.and(predicate2);
      Predicate<Object> predicate7 = predicate6.and(predicate0);
      Predicate<Object> predicate8 = predicate5.negate();
      predicate8.test(predicate5);
      predicate6.and(predicate8);
      Predicate<Object> predicate9 = predicate5.and(predicate4);
      Predicate<Object> predicate10 = predicate3.negate();
      Predicate<Object> predicate11 = predicate10.and(predicate7);
      Predicate<Object> predicate12 = predicate10.or(predicate8);
      Predicate<Object> predicate13 = predicate2.or(predicate3);
      Predicate<Object> predicate14 = predicate3.negate();
      Predicate<Object> predicate15 = predicate11.or(predicate9);
      Predicate<Object> predicate16 = predicate4.and(predicate15);
      Predicate<Object> predicate17 = predicate11.negate();
      predicate5.and(predicate1);
      predicate7.and(predicate5);
      predicate3.and(predicate16);
      Predicate<Object> predicate18 = predicate17.or(predicate12);
      predicate18.negate();
      predicate5.or(predicate6);
      predicate14.and(predicate15);
      predicate13.negate();
      predicate2.negate();
      predicate1.negate();
      JRip jRip0 = new JRip();
      int int0 = jRip0.getOptimizations();
      assertFalse(jRip0.getDebug());
      assertEquals(2, int0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      decisionTable1.setDisplayRules(false);
      decisionTable1.m_majority = 2456.01630044538;
      DecisionTable decisionTable2 = new DecisionTable();
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 5;
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (double) 3;
      decisionTable2.m_classPriors = doubleArray0;
      doubleArray1[7] = (double) 5;
      decisionTable0.m_classPriorCounts = doubleArray1;
      DecisionTable decisionTable3 = new DecisionTable();
      decisionTable2.getSearch();
      DecisionTable decisionTable4 = new DecisionTable();
      DecisionTable decisionTable5 = new DecisionTable();
      String string0 = jRip0.seedTipText();
      assertFalse(jRip0.getDebug());
      assertEquals("The seed used for randomizing the data.", string0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALIAN;
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      locale1.getUnicodeLocaleKeys();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      linkedList1.add("d@GKG]<!Q:>TX");
      locale1.getDisplayName();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      locale1.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "https://";
      stringArray0[1] = "Chinese (Taiwan)";
      stringArray0[2] = "Chinese (Taiwan)";
      stringArray0[3] = "d@GKG]<!Q:>TX";
      stringArray0[4] = "2*Ttrg&S{7";
      stringArray0[5] = "d@GKG]<!Q:>TX";
      stringArray0[6] = "Chinese (Taiwan)";
      JRip.main(stringArray0);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      DenseInstance denseInstance0 = new DenseInstance(200003);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      try { 
        bottomUpConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BottomUpConstructor", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      AdditiveRegression additiveRegression1 = new AdditiveRegression();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      protectedProperties2.clone();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties3);
      ClassOrder classOrder0 = new ClassOrder();
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.304704691639832
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      AdditiveRegression additiveRegression1 = new AdditiveRegression();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      protectedProperties2.clone();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties3);
      Attribute attribute0 = new Attribute((String) null, (String) null);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1831);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
      
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("null <= NaN", string0);
      
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertNotSame(jRip_NumericAntd0, jRip_NumericAntd1);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.05477796069814
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Attribute attribute0 = new Attribute("Very simple classifica8ion rules perform well on mosS coEmonly used datasets", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 2);
      Properties properties0 = new Properties();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "Very simple classifica8ion rules perform well on mosS coEmonly used datasets");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate1.or(predicate2);
      jRip_NominalAntd0.copy();
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate2.and(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.or(predicate3);
      Predicate<Object> predicate8 = predicate6.and(predicate7);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate9 = predicate5.and(predicate3);
      Predicate<Object> predicate10 = predicate6.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      predicate9.and(predicate7);
      Predicate<Object> predicate12 = predicate7.and(predicate5);
      predicate12.negate();
      Predicate<Object> predicate13 = predicate11.or(predicate3);
      predicate3.and(predicate13);
      predicate8.test(predicate3);
      predicate5.or(predicate7);
      predicate6.negate();
      JRip jRip1 = new JRip();
      try { 
        jRip1.rulesetForOneClass((-2056.92692), instances0, 2.0, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.062711125700289
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Attribute attribute0 = new Attribute("<a<2JTn", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 2);
      Properties properties0 = new Properties();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "<a<2JTn");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      predicate1.or(predicate2);
      Object object0 = new Object();
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate2.and(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.or(predicate3);
      Predicate<Object> predicate8 = predicate6.and(predicate7);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate9 = predicate5.and(predicate3);
      Predicate<Object> predicate10 = predicate6.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      predicate9.and(predicate7);
      predicate1.negate();
      Predicate<Object> predicate12 = predicate11.or(predicate3);
      predicate3.and(predicate12);
      predicate7.test(predicate3);
      predicate6.negate();
      predicate8.negate();
      instances0.removeIf(predicate2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 45.0, (-0.23485960907737277));
      assertEquals(1, instancesArray0.length);
      
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertNotSame(jRip_RipperRule0, jRip_RipperRule1);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      DecisionTable decisionTable0 = new DecisionTable();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      decisionTable0.m_classPriorCounts = doubleArray0;
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      decisionTable1.getSearchSpec();
      DecisionTable decisionTable3 = new DecisionTable();
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 5;
      doubleArray1[1] = (-1986.956837);
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 3;
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (double) 3;
      doubleArray1[6] = (double) 3;
      doubleArray1[7] = (double) 5;
      decisionTable1.m_classPriorCounts = doubleArray1;
      DecisionTable decisionTable4 = new DecisionTable();
      decisionTable1.getSearch();
      Instances instances0 = decisionTable4.m_dtInstances;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      DecisionTable decisionTable5 = new DecisionTable();
      DecisionTable decisionTable6 = new DecisionTable();
      Properties properties0 = new Properties();
      String string0 = jRip0.minNoTipText();
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals("The minimum total weight of the instances in a rule.", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Attribute attribute0 = new Attribute("\tThe size of the internal cache (a prime number).\n\t(default: 200003)");
      ClassOrder classOrder0 = new ClassOrder();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "\tThe size of the internal cache (a prime number).\n\t(default: 200003)");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate0.and(predicate1);
      Predicate<Object> predicate5 = predicate2.and(predicate1);
      Predicate<Object> predicate6 = predicate4.and(predicate2);
      predicate4.and(predicate0);
      Predicate<Object> predicate7 = predicate6.and(predicate0);
      Predicate<Object> predicate8 = predicate5.negate();
      predicate8.test(predicate5);
      predicate6.and(predicate8);
      Predicate<Object> predicate9 = predicate5.and(predicate4);
      Predicate<Object> predicate10 = predicate3.negate();
      Predicate<Object> predicate11 = predicate10.and(predicate7);
      Predicate<Object> predicate12 = predicate10.or(predicate8);
      Predicate<Object> predicate13 = predicate2.or(predicate3);
      Predicate<Object> predicate14 = predicate3.negate();
      Predicate<Object> predicate15 = predicate11.or(predicate9);
      Predicate<Object> predicate16 = predicate4.and(predicate15);
      Predicate<Object> predicate17 = predicate8.negate();
      predicate4.negate();
      predicate3.and(predicate16);
      Predicate<Object> predicate18 = predicate17.or(predicate12);
      Predicate.isEqual((Object) "\tThe size of the internal cache (a prime number).\n\t(default: 200003)");
      predicate18.negate();
      predicate5.or(predicate6);
      predicate14.and(predicate15);
      predicate13.negate();
      predicate2.negate();
      predicate1.negate();
      JRip jRip0 = new JRip();
      String string0 = jRip0.checkErrorRateTipText();
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getFolds();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("", linkedList0, 3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      linkedList0.add("`LM");
      jRip_NumericAntd0.att = attribute0;
      Attribute attribute1 = jRip_NumericAntd0.getAttr();
      jRip_NumericAntd0.copy();
      jRip0.minNoTipText();
      attribute0.addStringValue("real");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.copy();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      try { 
        middleOutConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ClassOrder[] classOrderArray0 = new ClassOrder[6];
      ClassOrder classOrder0 = new ClassOrder();
      classOrderArray0[0] = classOrder0;
      ClassOrder classOrder1 = new ClassOrder();
      classOrderArray0[1] = classOrder1;
      ClassOrder classOrder2 = new ClassOrder();
      classOrderArray0[2] = classOrder2;
      ClassOrder classOrder3 = new ClassOrder();
      classOrderArray0[3] = classOrder3;
      ClassOrder classOrder4 = new ClassOrder();
      classOrderArray0[4] = classOrder4;
      ClassOrder classOrder5 = new ClassOrder();
      classOrderArray0[5] = classOrder5;
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = 64.0;
      doubleArray0[6] = 24.9283535183;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = 24.9283535183;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(24.9283535183, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      JRip jRip0 = new JRip();
      jRip0.setDebug(false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers(sparseInstance0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(boolean0);
      assertFalse(jRip0.getDebug());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.563413311326071
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      String[] stringArray0 = jRip0.getOptions();
      AbstractClassifier.makeCopies(jRip0, 74);
      jRip0.setOptions(stringArray0);
      assertTrue(jRip0.getDebug());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`7 jl");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`7 jl");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-9);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`7 jl");
      Instances instances0 = new Instances("`7 jl", arrayList0, 395);
      instances0.randomize(mockRandom0);
      instances0.resampleWithWeights((Random) mockRandom0);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`7 jl");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SparseInstance sparseInstance0 = new SparseInstance((byte)49);
      instances0.add((Instance) sparseInstance0);
      JRip jRip0 = new JRip();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("{?no9[!s sq>ay", (-1539));
      String[] stringArray0 = new String[16];
      stringArray0[0] = "string";
      stringArray0[1] = "date";
      stringArray0[2] = "@end";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      attribute0.setStringValue("real");
      attribute0.addRelation((Instances) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.maxInfoGain = (double) (-1539);
      attribute0.addStringValue("");
      jRip_RipperRule0.size();
      jRip0.setFolds(0);
      jRip_NumericAntd0.getAccuRate();
      jRip_RipperRule0.getConsequent();
      assertEquals(1L, jRip0.getSeed());
      
      jRip0.setSeed(0);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.8821103874851657
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JRip jRip0 = new JRip();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Attribute attribute0 = new Attribute("Very simple classifica8ion rules perform well on mosS coEmonly used datasets", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 2);
      Properties properties0 = new Properties();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "Very simple classifica8ion rules perform well on mosS coEmonly used datasets");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate1.or(predicate2);
      Object object0 = new Object();
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate2.and(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.or(predicate3);
      Predicate<Object> predicate8 = predicate6.and(predicate7);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate9 = predicate5.and(predicate3);
      predicate6.negate();
      Predicate<Object> predicate10 = predicate7.negate();
      predicate9.and(predicate7);
      predicate7.and(predicate5);
      predicate1.negate();
      Predicate<Object> predicate11 = predicate10.or(predicate3);
      predicate3.and(predicate11);
      predicate8.test(predicate3);
      predicate5.or(predicate7);
      predicate6.negate();
      predicate6.negate();
      instances0.removeIf(predicate2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 45.0, (-0.23485960907737277));
      assertEquals(1, instancesArray0.length);
      
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("8118", string0);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JRip jRip0 = new JRip();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      AdditiveRegression additiveRegression1 = new AdditiveRegression();
      Attribute attribute0 = new Attribute("Very simple classifica8ion rules perform well on mosS commonly used datasets", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 2);
      Properties properties0 = new Properties();
      ClassOrder classOrder0 = new ClassOrder();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "Very simple classifica8ion rules perform well on mosS commonly used datasets");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Object object0 = new Object();
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate4 = predicate0.and(predicate1);
      Attribute attribute1 = new Attribute("Very simple classifica8ion rules perform well on mosS commonly used datasets", (List<String>) null, 0);
      Predicate<Object> predicate5 = predicate2.and(predicate1);
      Predicate<Object> predicate6 = predicate4.and(predicate3);
      Predicate<Object> predicate7 = predicate1.or(predicate4);
      Predicate<Object> predicate8 = predicate6.and(predicate7);
      Predicate<Object> predicate9 = predicate5.and(predicate4);
      Predicate<Object> predicate10 = predicate9.and(predicate7);
      predicate10.or(predicate4);
      predicate8.negate();
      predicate1.and(predicate6);
      predicate6.negate();
      predicate8.negate();
      instances0.removeIf(predicate2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_NominalAntd0.toString();
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.8821103874851657
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JRip jRip0 = new JRip();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Attribute attribute0 = new Attribute("Very simple classifica8ion rules perform well on mosS commonly used datasets", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 2);
      Properties properties0 = new Properties();
      ClassOrder classOrder0 = new ClassOrder();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "Very simple classifica8ion rules perform well on mosS commonly used datasets");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Object object0 = new Object();
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate4 = predicate0.and(predicate1);
      Attribute attribute1 = new Attribute("Very simple classifica8ion rules perform well on mosS commonly used datasets", (List<String>) null, 0);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) attribute1);
      Predicate<Object> predicate6 = predicate2.and(predicate5);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate4);
      Predicate<Object> predicate9 = predicate7.and(predicate8);
      Predicate<Object> predicate10 = predicate6.and(predicate4);
      Predicate<Object> predicate11 = predicate10.and(predicate8);
      predicate10.and(predicate8);
      Predicate<Object> predicate12 = predicate11.or(predicate4);
      predicate4.and(predicate12);
      predicate7.negate();
      predicate9.negate();
      instances0.removeIf(predicate2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, false);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 45.0, (-0.23485960907737277));
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(1, instancesArray0.length);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.8821103874851657
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JRip jRip0 = new JRip();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Attribute attribute0 = new Attribute("Very simple classifica8ion rules perform well on mosS coEmonly used datasets", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 2);
      Properties properties0 = new Properties();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "Very simple classifica8ion rules perform well on mosS coEmonly used datasets");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      predicate1.or(predicate2);
      Object object0 = new Object();
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate2.and(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.or(predicate3);
      Predicate<Object> predicate8 = predicate6.and(predicate7);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate9 = predicate5.and(predicate3);
      Predicate<Object> predicate10 = predicate6.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      predicate9.and(predicate7);
      predicate7.and(predicate5);
      predicate1.negate();
      Predicate<Object> predicate12 = predicate11.or(predicate3);
      predicate3.and(predicate12);
      predicate8.test(predicate3);
      predicate5.or(predicate7);
      predicate6.negate();
      predicate6.negate();
      instances0.removeIf(predicate2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 45.0, 2);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(1, instancesArray0.length);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      
      String string0 = jRip0.usePruningTipText();
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals("Whether pruning is performed.", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      AdditiveRegression additiveRegression1 = new AdditiveRegression();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      protectedProperties2.clone();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties3);
      Attribute attribute0 = new Attribute((String) null, (String) null);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1831);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      
      String string0 = jRip0.debugTipText();
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("Whether debug information is output to the console.", string0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassOrder[] classOrderArray0 = new ClassOrder[6];
      ClassOrder classOrder0 = new ClassOrder();
      classOrderArray0[0] = classOrder0;
      ClassOrder classOrder1 = new ClassOrder();
      classOrderArray0[1] = classOrder0;
      ClassOrder classOrder2 = new ClassOrder();
      classOrderArray0[2] = classOrder2;
      ClassOrder classOrder3 = new ClassOrder();
      ClassOrder classOrder4 = new ClassOrder();
      ClassOrder classOrder5 = new ClassOrder();
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "lwmbKpFW20O";
      stringArray0[1] = "";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.copy();
      jRip_RipperRule0.hasAntds();
      double[] doubleArray0 = new double[2];
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      decisionTable0.getSearchSpec();
      DecisionTable decisionTable2 = new DecisionTable();
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 5;
      doubleArray1[1] = (-1986.956837);
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (double) 3;
      doubleArray1[7] = (double) 5;
      decisionTable0.m_classPriorCounts = doubleArray1;
      DecisionTable decisionTable3 = new DecisionTable();
      decisionTable0.getSearch();
      Instances instances0 = decisionTable0.m_theInstances;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      DecisionTable decisionTable4 = new DecisionTable();
      DecisionTable decisionTable5 = new DecisionTable();
      Properties properties0 = new Properties();
      System.setCurrentTimeMillis(3);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`7 jJ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`7 jJ");
      mockRandom0.doubles((long) (byte)79);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = new Instances("[j@*wdRV,Fu", arrayList0, 404);
      MockRandom mockRandom1 = new MockRandom();
      instances0.randomize(mockRandom1);
      Properties properties0 = new Properties();
      Instances instances1 = instances0.resampleWithWeights((Random) mockRandom0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[j@*wdRV,Fu");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SparseInstance sparseInstance0 = new SparseInstance((byte)79);
      instances0.add((Instance) sparseInstance0);
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      Attribute attribute0 = new Attribute("xYdBfF8t", instances1, 102);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, (-410.0), (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = 0.001;
      String string0 = jRip0.getRevision();
      assertEquals("8118", string0);
      
      String string1 = jRip0.usePruningTipText();
      assertEquals("Whether pruning is performed.", string1);
      
      jRip0.setUsePruning(true);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      double double0 = jRip_NumericAntd0.getAttrValue();
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ClassOrder[] classOrderArray0 = new ClassOrder[6];
      ClassOrder classOrder0 = new ClassOrder();
      classOrderArray0[0] = classOrder0;
      ClassOrder classOrder1 = new ClassOrder();
      classOrderArray0[1] = classOrder1;
      ClassOrder classOrder2 = new ClassOrder();
      classOrderArray0[2] = classOrder2;
      ClassOrder classOrder3 = new ClassOrder();
      ClassOrder classOrder4 = new ClassOrder();
      ClassOrder classOrder5 = new ClassOrder();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute((String) null, 2);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("null <= NaN", string0);
      
      org.evosuite.runtime.Random.setNextRandom(1);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.304704691639832
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ClassOrder[] classOrderArray0 = new ClassOrder[6];
      ClassOrder classOrder0 = new ClassOrder();
      classOrderArray0[0] = classOrder0;
      ClassOrder classOrder1 = new ClassOrder();
      classOrderArray0[1] = classOrder0;
      ClassOrder classOrder2 = new ClassOrder();
      classOrderArray0[2] = classOrder2;
      ClassOrder classOrder3 = new ClassOrder();
      Attribute attribute0 = new Attribute((String) null, (String) null);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals("8118", string0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertNotSame(jRip_NumericAntd0, jRip_NumericAntd1);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(boolean0);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      Instances instances0 = decisionTable2.m_dtInstances;
      DecisionTable decisionTable3 = new DecisionTable();
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = 2;
      intArray0[2] = 79;
      intArray0[3] = 4;
      intArray0[4] = 1;
      jRip0.setFolds(1);
      intArray0[5] = 3;
      decisionTable2.m_decisionFeatures = intArray0;
      DecisionTable decisionTable4 = new DecisionTable();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("@data", (Instances) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      JRip jRip0 = new JRip();
      MockRandom mockRandom0 = new MockRandom();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("@attribute", arrayList0);
      attribute0.addStringValue(attribute1, 1);
      stringArray0[1] = "numeric";
      stringArray0[3] = "";
      stringArray0[4] = "string";
      stringArray0[5] = "date";
      stringArray0[6] = "relational";
      stringArray0[7] = "numeric";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      IBk iBk0 = new IBk();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute1);
      double double0 = jRip_NumericAntd0.getCover();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("Very iple classifica8ion rules perform well on mosS commly useddatasets", (List<String>) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 0);
      ClassOrder classOrder0 = new ClassOrder();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "Very iple classifica8ion rules perform well on mosS commly useddatasets");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Object object0 = new Object();
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate1.and(predicate4);
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate2.and(predicate6);
      Predicate<Object> predicate8 = predicate5.and(predicate6);
      Predicate<Object> predicate9 = predicate2.and(predicate8);
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate<Object> predicate11 = predicate9.and(predicate7);
      Predicate<Object> predicate12 = predicate6.negate();
      predicate11.or(predicate12);
      Predicate<Object> predicate13 = predicate7.negate();
      predicate10.negate();
      Predicate<Object> predicate14 = predicate0.and(predicate9);
      Predicate<Object> predicate15 = predicate8.negate();
      predicate9.and(predicate15);
      predicate11.and(predicate10);
      Predicate<Object> predicate16 = predicate6.or(predicate3);
      predicate16.and(predicate11);
      predicate8.negate();
      instances0.removeIf(predicate7);
      predicate14.negate();
      instances0.removeIf(predicate13);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 1.2, 0);
      jRip_NumericAntd0.getRevision();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip0 = new JRip();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      DecisionTable decisionTable3 = new DecisionTable();
      decisionTable1.m_evaluationMeasure = 4;
      decisionTable0.m_numAttributes = 4;
      DecisionTable decisionTable4 = new DecisionTable();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Properties properties0 = new Properties();
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(124);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ClassOrder classOrder0 = new ClassOrder();
      Properties properties0 = new Properties();
      JRip jRip0 = new JRip();
      jRip0.setMinNo(2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|:[@");
      int[] intArray0 = new int[2];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, intArray0, 27752);
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Remove remove0 = new Remove();
      DecisionTable decisionTable2 = new DecisionTable();
      decisionTable1.setCrossVal(4);
      decisionTable0.m_evaluationMeasure = 4;
      DecisionTable decisionTable3 = new DecisionTable();
      jRip0.enumerateMeasures();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JRip jRip0 = new JRip();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      jRip0.globalInfo();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.5;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      boolean boolean0 = jRip_RipperRule0.covers(sparseInstance0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(boolean0);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ClassOrder[] classOrderArray0 = new ClassOrder[6];
      ClassOrder classOrder0 = new ClassOrder();
      classOrderArray0[0] = classOrder0;
      ClassOrder classOrder1 = new ClassOrder();
      classOrderArray0[1] = classOrder1;
      ClassOrder classOrder2 = new ClassOrder();
      classOrderArray0[2] = classOrder2;
      ClassOrder classOrder3 = new ClassOrder();
      classOrderArray0[3] = classOrder3;
      ClassOrder classOrder4 = new ClassOrder();
      classOrderArray0[4] = classOrder4;
      ClassOrder classOrder5 = new ClassOrder();
      classOrderArray0[5] = classOrder5;
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = 64.0;
      doubleArray0[6] = 24.9283535183;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = 24.9283535183;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(24.9283535183, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip_RipperRule0.setConsequent(0);
      boolean boolean0 = jRip_RipperRule0.covers(sparseInstance0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      DecisionTable decisionTable0 = new DecisionTable();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      decisionTable0.m_classPriorCounts = doubleArray0;
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      decisionTable2.setDisplayRules(false);
      decisionTable2.m_majority = 2456.01630044538;
      DecisionTable decisionTable3 = new DecisionTable();
      decisionTable1.getEvaluationMeasure();
      double[] doubleArray1 = new double[8];
      decisionTable0.getTechnicalInformation();
      doubleArray1[0] = (double) 5;
      doubleArray1[1] = (double) 4;
      doubleArray1[3] = (double) 3;
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (double) 3;
      doubleArray1[6] = (double) 3;
      decisionTable3.m_classPriors = doubleArray0;
      doubleArray1[7] = (double) 5;
      decisionTable1.m_classPriorCounts = doubleArray1;
      DecisionTable decisionTable4 = new DecisionTable();
      decisionTable3.getSearch();
      DecisionTable decisionTable5 = new DecisionTable();
      DecisionTable decisionTable6 = new DecisionTable();
      jRip0.getTechnicalInformation();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }
}
