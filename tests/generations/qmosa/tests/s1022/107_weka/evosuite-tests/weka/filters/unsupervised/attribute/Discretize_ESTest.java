/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 05:29:33 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6151104036339126
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "qWTqcj`Vz";
      discretize0.setInvertSelection(true);
      stringArray0[1] = "qWTqcj`Vz";
      stringArray0[2] = "qWTqcj`Vz";
      stringArray0[3] = "'";
      stringArray0[4] = "DuR";
      discretize0.getOptions();
      SystemInUtil.addInputLine("Numeric class");
      int int0 = 460;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(460);
      // Undeclared exception!
      try { 
        binarySparseInstance0.setClassValue("qWTqcj`Vz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.011796378353658
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.stream();
      Consumer<Attribute> consumer0 = (Consumer<Attribute>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      Attribute attribute0 = new Attribute("Pc4c");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2);
      arrayList1.add(attribute0);
      arrayList1.remove((Object) "Pc4c");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("date", 1);
      ArrayList<Attribute> arrayList4 = new ArrayList<Attribute>();
      arrayList4.iterator();
      arrayList4.add(attribute0);
      Discretize discretize0 = new Discretize();
      attribute1.equalsMsg("string");
      attribute0.value(1698);
      Instances instances0 = new Instances("real", arrayList1, 2);
      Attribute.typeToString(attribute1);
      ArrayList<Attribute> arrayList5 = new ArrayList<Attribute>();
      discretize0.m_FindNumBins = true;
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[9];
      attribute0.toString();
      doubleArray0[8] = (double) 1;
      doubleArray0[1] = (double) 4;
      doubleArray0[3] = (double) 1;
      attribute0.copy(")");
      attribute0.equalsMsg(arrayList5);
      ArrayList<Attribute> arrayList6 = new ArrayList<Attribute>();
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.647826624623992
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      discretize0.setMakeBinary(true);
      discretize0.setIgnoreClass(true);
      discretize0.setUseEqualFrequency(true);
      discretize0.getOptions();
      discretize0.getInvertSelection();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9960738125395787
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Consumer<Attribute> consumer0 = (Consumer<Attribute>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      Attribute attribute0 = new Attribute("Pc4c");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2);
      arrayList1.add(attribute0);
      arrayList1.remove((Object) "Pc4c");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("@end", arrayList3);
      ArrayList<Attribute> arrayList4 = new ArrayList<Attribute>();
      arrayList4.iterator();
      arrayList4.add(attribute0);
      Discretize discretize0 = new Discretize();
      attribute1.equalsMsg("string");
      Instances instances0 = new Instances("real", arrayList1, 2);
      Attribute.typeToString(attribute1);
      ArrayList<Attribute> arrayList5 = new ArrayList<Attribute>();
      discretize0.m_FindNumBins = true;
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      arrayList1.add(attribute1);
      double[] doubleArray0 = new double[9];
      attribute0.toString();
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) 1;
      discretize0.getBinRangesString(0);
      attribute1.enumerateValues();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object object0 = new Object();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "ZUmP8Tg");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      String string0 = "_{}<pCIC $";
      discretize0.m_MakeBinary = true;
      int int0 = 25;
      Instances instances0 = new Instances("_{}<pCIC $", arrayList0, 25);
      Instances instances1 = instances0.stringFreeStructure();
      instances1.toString();
      discretize0.getMakeBinary();
      try { 
        discretize0.setInputFormat(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2232037457964493
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Properties properties0 = new Properties();
      arrayList1.add((String) null);
      StringReader stringReader0 = new StringReader("$Revision: 8964 $");
      properties0.load((Reader) stringReader0);
      properties0.values();
      Properties properties1 = new Properties(properties0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      arrayList1.add((String) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) arrayList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) list0, locale_FilteringMode1);
      Attribute attribute0 = new Attribute((String) null, (String) null);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      int[] intArray0 = new int[0];
      discretize0.setAttributeIndicesArray(intArray0);
      attribute0.equalsMsg((Object) null);
      Instances instances0 = new Instances("nO`QEZ/@gt", arrayList0, 2);
      instances0.setClass(attribute0);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-908.632267), doubleArray0);
      discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
      
      String string0 = discretize1.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.925776261162424
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object object0 = new Object();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("18,18");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList2, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("18,18", "18,18");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      Discretize discretize1 = new Discretize();
      attribute0.equalsMsg(discretize0);
      Instances instances0 = new Instances("real", arrayList0, 3);
      instances0.setClass(attribute0);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      DenseInstance denseInstance0 = new DenseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(82);
      binarySparseInstance0.isMissing(1);
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = 1;
      intArray0[2] = 3;
      intArray0[3] = 1;
      intArray0[4] = 10;
      intArray0[5] = 2;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(461.1369959963112, intArray0, 0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(1073.0575375241, doubleArray0, intArray0, (-1210));
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(sparseInstance0);
      assertFalse(binarySparseInstance3.equals((Object)binarySparseInstance2));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1308614609952925
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Consumer<Attribute> consumer0 = (Consumer<Attribute>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      Attribute attribute0 = new Attribute("Pc4c");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2);
      arrayList1.add(attribute0);
      Attribute attribute1 = attribute0.copy("weka.filters.unsupervised.attribute.Discretize");
      attribute0.addStringValue(attribute1, (-179));
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Attribute attribute2 = new Attribute("@end", arrayList3);
      ArrayList<Attribute> arrayList4 = new ArrayList<Attribute>();
      arrayList4.iterator();
      arrayList4.add(attribute0);
      Discretize discretize0 = new Discretize();
      attribute2.equalsMsg("string");
      Instances instances0 = new Instances("real", arrayList1, 2);
      Attribute.typeToString(attribute2);
      ArrayList<Attribute> arrayList5 = new ArrayList<Attribute>();
      discretize0.m_FindNumBins = true;
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[9];
      attribute0.toString();
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) 1;
      attribute2.enumerateValues();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      SparseInstance sparseInstance0 = new SparseInstance(1.7976931348623157E308, doubleArray0);
      discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "AH4c;";
      objectArray0[2] = (Object) "AH4c;";
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.iterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList2, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) list0, locale_FilteringMode1);
      Attribute attribute0 = new Attribute("18,18", "18,18");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      Instances instances0 = new Instances("U&m3u", arrayList0, 25);
      instances0.enumerateInstances();
      instances0.delete();
      attribute0.setStringValue("?](=gf)!9ml+z");
      discretize0.getCapabilities();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.062257174304032
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 62);
      attribute0.setStringValue("Pc4c");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2);
      arrayList1.add(attribute0);
      arrayList1.remove((Object) "Pc4c");
      arrayList1.addAll((Collection<? extends Attribute>) arrayList0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(0);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("@end", arrayList4);
      ArrayList<Attribute> arrayList5 = new ArrayList<Attribute>();
      arrayList5.add(attribute0);
      Discretize discretize0 = new Discretize();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      attribute1.equalsMsg("string");
      Instances instances0 = new Instances("real", arrayList1, 2);
      ArrayList<Attribute> arrayList6 = new ArrayList<Attribute>();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance(5.5, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance((-306.53545002), doubleArray0);
      discretize0.input(denseInstance0);
      System.setCurrentTimeMillis((-516L));
      System.setCurrentTimeMillis(3);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2427276237316462
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "AH4c;";
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "AH4c;";
      arrayList0.remove(object0);
      objectArray0[3] = (Object) arrayList0;
      objectArray0[1] = (Object) arrayList0;
      objectArray0[5] = (Object) arrayList0;
      objectArray0[6] = (Object) "AH4c;";
      Attribute attribute0 = new Attribute("6!zKw})j)Ix", (List<String>) null, 2288);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(98);
      attribute0.equals(integer0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "real";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "6!zKw})j)Ix");
      Filter.runFilter(discretize0, stringArray0);
      discretize0.m_NumBins = 1;
      Instances instances0 = new Instances("real", arrayList0, 1763);
      instances0.spliterator();
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2708));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.109929193430825
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Consumer<Attribute> consumer0 = (Consumer<Attribute>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      Attribute attribute0 = new Attribute("Pc4c");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2);
      arrayList1.add(attribute0);
      arrayList1.remove((Object) "Pc4c");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("@end", arrayList2);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      arrayList3.iterator();
      arrayList3.add(attribute0);
      Discretize discretize0 = new Discretize();
      attribute1.equalsMsg("string");
      Instances instances0 = new Instances("real", arrayList1, 2);
      Attribute.typeToString(attribute1);
      ArrayList<Attribute> arrayList4 = new ArrayList<Attribute>();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[9];
      attribute0.toString();
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) 1;
      discretize0.getBinRangesString(0);
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      arrayList2.replaceAll(unaryOperator0);
      discretize0.calculateCutPoints();
      discretize0.batchFinished();
      Random.setNextRandom(3);
      Random.setNextRandom(4);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.062257174304032
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "AH4c;";
      Attribute attribute0 = new Attribute("Ym>!\"PB:@xM :eKZ,{B", 62);
      attribute0.setStringValue("Ym>!\"PB:@xM :eKZ,{B");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2);
      arrayList1.add(attribute0);
      arrayList1.remove((Object) "Ym>!\"PB:@xM :eKZ,{B");
      arrayList1.addAll((Collection<? extends Attribute>) arrayList0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(0);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      arrayList3.add(")>a6WPjSH1M,8 ^Gv");
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) arrayList3);
      Attribute attribute1 = new Attribute((String) null, list0);
      ArrayList<Attribute> arrayList4 = new ArrayList<Attribute>();
      arrayList4.add(attribute0);
      Discretize discretize0 = new Discretize();
      Object object0 = new Object();
      attribute1.equalsMsg("string");
      Instances instances0 = new Instances("real", arrayList1, 2);
      Instances instances1 = new Instances("@data", arrayList4, 4);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(62);
      discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4548917612619334
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("A4c", arrayList1, 2302);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(68);
      attribute0.equals("A4c");
      arrayList0.add(attribute0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      Discretize discretize0 = new Discretize();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, true);
      Instances instances0 = new Instances("@end", arrayList0, 1);
      arrayList0.add(attribute0);
      instances0.setClass(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'A4c' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.985572789946291
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "AH4c;";
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "AH4c;";
      arrayList0.remove(object0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList2, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) list0, locale_FilteringMode1);
      Attribute attribute0 = new Attribute("18,18", "18,18");
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("U&m3u", arrayList0, 25);
      instances0.enumerateInstances();
      instances0.delete();
      attribute0.setStringValue("18,18");
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.findNumBins(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1967);
      // Undeclared exception!
      try { 
        binarySparseInstance0.setClassValue("-O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3448446247581227
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize("tF`Cj!PctBd3)?f");
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)66;
      byteArray0[1] = (byte) (-78);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.pentaho.packageManagement.manager");
      byteArray0[2] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      discretize0.setFindNumBins(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tF`Cj!PctBd3)?f");
      discretize0.m_DiscretizeCols = null;
      // Undeclared exception!
      try { 
        discretize0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1337133121220337
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Properties properties0 = new Properties();
      arrayList1.add("real");
      properties0.values();
      Properties properties1 = new Properties(properties0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) arrayList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) list0, locale_FilteringMode1);
      Attribute attribute0 = new Attribute((String) null, (String) null);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      Attribute attribute1 = attribute0.copy("WjFZ@5KF>fJ");
      attribute1.equalsMsg("real");
      Instances instances0 = new Instances("n:OEZ/@gt", arrayList0, 2);
      instances0.setClass(attribute0);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((-908.632267), doubleArray0);
      discretize0.input(sparseInstance1);
      discretize0.calculateCutPointsByEqualWidthBinning(0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1330352552673695
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Properties properties0 = new Properties();
      arrayList1.add((String) null);
      StringReader stringReader0 = new StringReader("$Revision: 8964 $");
      properties0.load((Reader) stringReader0);
      properties0.values();
      Properties properties1 = new Properties(properties0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      arrayList1.add((String) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) arrayList1, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) list0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute((String) null, (String) null);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      attribute0.equalsMsg((Object) null);
      Instances instances0 = new Instances("nO`QEZ/@gt", arrayList0, 2);
      instances0.setClass(attribute0);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-908.632267), doubleArray0);
      discretize0.input(sparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(830);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 830
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize("@Xb?$<O5[N0b{<r.~u");
      SystemInUtil.addInputLine("@Xb?$<O5[N0b{<r.~u");
      discretize0.getAttributeIndices();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0660708377143053
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object[] objectArray0 = new Object[8];
      Attribute attribute0 = new Attribute("Ym>!\"PB:@xM :eKZ,{B", 62);
      attribute0.setStringValue("Ym>!\"PB:@xM :eKZ,{B");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2);
      arrayList1.add(attribute0);
      arrayList1.remove((Object) "Ym>!\"PB:@xM :eKZ,{B");
      arrayList1.addAll((Collection<? extends Attribute>) arrayList0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(0);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      arrayList3.add("numeric");
      List<String> list0 = new LinkedList<String>();
      Attribute attribute1 = new Attribute((String) null, list0);
      ArrayList<Attribute> arrayList4 = new ArrayList<Attribute>();
      arrayList4.add(attribute0);
      Discretize discretize0 = new Discretize();
      Object object0 = new Object();
      attribute1.equalsMsg("string");
      Instances instances0 = new Instances("real", arrayList1, 2);
      Instances instances1 = new Instances("@data", arrayList4, 4);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      discretize0.batchFinished();
      discretize0.input(binarySparseInstance0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      objectArray0[6] = (Object) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0);
      discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.123168425011997
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 62);
      attribute0.setStringValue("AH4c;");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2);
      arrayList1.add(attribute0);
      arrayList1.remove((Object) "AH4c;");
      arrayList1.addAll((Collection<? extends Attribute>) arrayList0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(0);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("@end", arrayList4);
      ArrayList<Attribute> arrayList5 = new ArrayList<Attribute>();
      arrayList5.add(attribute0);
      Discretize discretize0 = new Discretize();
      attribute1.equalsMsg("string");
      Instances instances0 = new Instances("real", arrayList1, 2);
      ArrayList<Attribute> arrayList6 = new ArrayList<Attribute>();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      arrayList4.ensureCapacity(3);
      doubleArray0[6] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      discretize0.input(sparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2870));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2870
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3903221739223985
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Consumer<Attribute> consumer0 = (Consumer<Attribute>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Attribute attribute0 = new Attribute("Pc4c");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(2);
      arrayList0.add(attribute0);
      arrayList0.remove((Object) "Pc4c");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("@end", arrayList1);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Object[] objectArray0 = new Object[8];
      objectArray0[7] = (Object) arrayList1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) arrayList0;
      objectArray0[3] = (Object) "Pc4c";
      objectArray0[4] = (Object) arrayList0;
      objectArray0[5] = (Object) attribute0;
      objectArray0[6] = (Object) attribute0;
      arrayList1.add("D; a=WV");
      objectArray0[7] = (Object) attribute1;
      arrayList2.toArray(objectArray0);
      arrayList2.add(attribute0);
      Discretize discretize0 = new Discretize();
      attribute1.equalsMsg("string");
      Instances instances0 = new Instances("real", arrayList0, 2);
      Attribute.typeToString(attribute1);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">*!)s;9awwq");
      Filter.runFilter(discretize0, (String[]) null);
      Iterator<String> iterator0 = arrayList1.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.05592522077561
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 62);
      attribute0.setStringValue("AH4c;");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2);
      arrayList1.add(attribute0);
      arrayList1.remove((Object) "AH4c;");
      arrayList1.addAll((Collection<? extends Attribute>) arrayList0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(0);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("@end", arrayList4);
      ArrayList<Attribute> arrayList5 = new ArrayList<Attribute>();
      arrayList5.add(attribute0);
      Discretize discretize0 = new Discretize();
      attribute1.equalsMsg("string");
      Instances instances0 = new Instances("real", arrayList1, 2);
      ArrayList<Attribute> arrayList6 = new ArrayList<Attribute>();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(513.1967881434, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2);
      discretize0.input(binarySparseInstance1);
      assertFalse(discretize0.isNewBatch());
      
      discretize0.batchFinished();
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0627299875428027
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 62);
      attribute0.setStringValue("Pc4c");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2);
      arrayList1.add(attribute0);
      arrayList1.remove((Object) "Pc4c");
      arrayList1.addAll((Collection<? extends Attribute>) arrayList0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(0);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("@end", arrayList4);
      ArrayList<Attribute> arrayList5 = new ArrayList<Attribute>();
      arrayList5.add(attribute0);
      Discretize discretize0 = new Discretize();
      attribute1.equalsMsg("string");
      Instances instances0 = new Instances("real", arrayList1, 2);
      ArrayList<Attribute> arrayList6 = new ArrayList<Attribute>();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 4;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(575.7512690337, doubleArray1);
      SparseInstance sparseInstance1 = new SparseInstance(3, doubleArray1);
      discretize0.input(sparseInstance1);
      discretize0.convertInstance(sparseInstance1);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1356630787162723
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "AH4c;";
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "AH4c;";
      arrayList0.remove(object0);
      objectArray0[3] = (Object) arrayList0;
      objectArray0[4] = (Object) arrayList0;
      objectArray0[3] = (Object) arrayList0;
      objectArray0[6] = (Object) "AH4c;";
      Attribute attribute0 = new Attribute("Quote parse error.", (List<String>) null, 2288);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "real";
      stringArray0[1] = "numeric";
      stringArray0[2] = "Quote parse error.";
      stringArray0[3] = "relational";
      stringArray0[4] = "numeric";
      stringArray0[5] = "numeric";
      stringArray0[6] = "@attribute";
      Filter.runFilter(discretize0, stringArray0);
      Instances instances0 = new Instances("@Xb?$<O5[N0b{<r.~u", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 2288;
      doubleArray1[1] = (double) 4;
      doubleArray1[2] = (double) 2288;
      doubleArray1[3] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 2;
      doubleArray2[6] = (double) 2;
      doubleArray2[7] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 1.7976931348623157E308;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 1;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (double) 3;
      doubleArray3[6] = (double) 0;
      doubleArray3[7] = (double) 1;
      doubleArray3[8] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (double) 2;
      doubleArray4[1] = (double) 2;
      doubleArray4[2] = (double) 3;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (double) 2;
      doubleArray4[5] = (double) 1;
      doubleArray4[6] = (double) 1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = (double) 1;
      doubleArray5[3] = (double) 0;
      doubleArray5[4] = (double) 0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = (double) 2;
      doubleArray6[3] = (-1.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 1.7976931348623157E308;
      doubleArray7[1] = 1.7976931348623157E308;
      doubleArray7[2] = 1.7976931348623157E308;
      doubleArray7[3] = Double.POSITIVE_INFINITY;
      doubleArray7[4] = (double) 2288;
      doubleArray7[5] = (-1.0);
      doubleArray7[6] = (double) 2;
      doubleArray7[7] = (double) 0;
      doubleArray7[8] = 2552.24144420333;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = (double) 1;
      doubleArray0[7] = doubleArray8;
      discretize0.m_CutPoints = doubleArray0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9793359043859584
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "AH4c;";
      Attribute attribute0 = new Attribute((String) null, 62);
      attribute0.setStringValue("Ym>!\"PB:@xM :eKZ,{B");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2);
      arrayList1.add(attribute0);
      arrayList1.addAll((Collection<? extends Attribute>) arrayList0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(0);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      Attribute attribute1 = new Attribute((String) null, arrayList4);
      ArrayList<Attribute> arrayList5 = new ArrayList<Attribute>();
      SparseInstance[] sparseInstanceArray0 = new SparseInstance[6];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      sparseInstanceArray0[0] = sparseInstance0;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      sparseInstanceArray0[1] = (SparseInstance) binarySparseInstance1;
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-1479.052874877196), intArray0, 3);
      sparseInstanceArray0[2] = (SparseInstance) binarySparseInstance2;
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      sparseInstanceArray0[3] = sparseInstance1;
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(160);
      sparseInstanceArray0[4] = (SparseInstance) binarySparseInstance3;
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance1);
      sparseInstanceArray0[5] = (SparseInstance) binarySparseInstance4;
      arrayList5.toArray(sparseInstanceArray0);
      arrayList5.add((Attribute) null);
      arrayList5.add(attribute0);
      Discretize discretize0 = new Discretize();
      attribute1.equalsMsg("string");
      Instances instances0 = new Instances("real", arrayList1, 2);
      instances0.setClass(attribute0);
      ArrayList<Attribute> arrayList6 = new ArrayList<Attribute>();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      SparseInstance sparseInstance2 = new SparseInstance(0, doubleArray0);
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize1.input(sparseInstance2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0312947409037507
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'B2of2'";
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) linkedList0, locale_FilteringMode0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      linkedList1.add("Attributes differ at position ");
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) null);
      linkedList1.parallelStream();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null, linkedList1, 2288);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      arrayList3.add(attribute0);
      Discretize discretize0 = new Discretize();
      Filter.runFilter(discretize0, stringArray0);
      Instances instances0 = new Instances("Q2K1QriAlS)&y", arrayList3, 2589);
      instances0.enumerateInstances();
      instances0.delete();
      discretize0.setInputFormat(instances0);
      discretize0.input((Instance) null);
      assertFalse(discretize0.isNewBatch());
      
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1390.0118;
      doubleArray1[1] = (-519.569958);
      doubleArray1[2] = 2367.571091999535;
      doubleArray1[3] = 2367.571091999535;
      doubleArray1[4] = (-1307.2402375162);
      doubleArray1[5] = (-1334.765453015516);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-1.0);
      doubleArray1[8] = 1.7976931348623157E308;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 1390.0118;
      doubleArray2[1] = (-1334.765453015516);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-519.569958);
      doubleArray2[6] = 1390.0118;
      doubleArray2[7] = 1390.0118;
      doubleArray2[8] = 2367.571091999535;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-519.569958);
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = 1390.0118;
      doubleArray3[3] = 1.7976931348623157E308;
      doubleArray3[4] = 2367.571091999535;
      double[] doubleArray4 = new double[4];
      doubleArray4[1] = 2367.571091999535;
      doubleArray4[2] = 1390.0118;
      doubleArray4[3] = 2367.571091999535;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = (-519.569958);
      doubleArray5[2] = 2.0;
      doubleArray5[3] = (-1.0);
      doubleArray5[4] = (-1307.2402375162);
      doubleArray5[5] = 2367.571091999535;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = (-519.569958);
      doubleArray5[8] = 2367.571091999535;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (-1334.765453015516);
      doubleArray6[1] = 1.7976931348623157E308;
      doubleArray6[2] = 1390.0118;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 2.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = 2499.278;
      doubleArray0[7] = doubleArray8;
      discretize0.m_CutPoints = doubleArray0;
      stringArray0[0] = "Dc1*in8@82G";
      stringArray0[1] = "^]LtC,%O_<";
      stringArray0[2] = "";
      stringArray0[3] = "$^I`X1p#LKX <";
      stringArray0[4] = "}Q";
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((-969));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -969
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      discretize0.getOptions();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1226.311800302311, doubleArray0);
      binarySparseInstance0.isMissing(1369);
      BinarySparseInstance binarySparseInstance1 = null;
      try {
        binarySparseInstance1 = new BinarySparseInstance((-541));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.4461755171495705
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(true);
      discretize0.getOptions();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1390.0118;
      doubleArray0[1] = (-519.569958);
      doubleArray0[2] = 1390.0118;
      doubleArray0[3] = 1390.0118;
      DenseInstance denseInstance0 = new DenseInstance(1485);
      double[] doubleArray1 = null;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-541), doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1932735280);
      intArray0[1] = (-1932735280);
      int int0 = 5;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.isMissing(5);
      // Undeclared exception!
      try { 
        binarySparseInstance1.setValue((-1932735280), "')dt][iSa^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.4614573134231286
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1856.93728;
      discretize0.setUseBinNumbers(true);
      discretize0.binsTipText();
      discretize0.getUseEqualFrequency();
      discretize0.getFindNumBins();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.makeBinaryTipText();
      discretize0.setDesiredWeightOfInstancesPerInterval(1856.93728);
      discretize0.getAttributeIndices();
      Discretize.main((String[]) null);
      discretize0.getMakeBinary();
      discretize0.getOptions();
      discretize0.getAttributeIndices();
      discretize0.setOutputFormat();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1856.93728;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5.5, doubleArray0);
      int int0 = 16;
      binarySparseInstance0.isMissing(16);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1856.93728;
      discretize0.setUseBinNumbers(true);
      discretize0.binsTipText();
      discretize0.getUseEqualFrequency();
      discretize0.getFindNumBins();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.makeBinaryTipText();
      discretize0.setDesiredWeightOfInstancesPerInterval(1856.93728);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Discretize discretize1 = new Discretize("weka.filters.unsupervised.attribute.Discretize");
      discretize1.m_UseEqualFrequency = false;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(105);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.0570302119775192
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "P0oNZ";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      Attribute attribute0 = new Attribute("P0oNZ", 2);
      attribute0.setStringValue("o");
      arrayList0.add(attribute0);
      objectArray0[1] = (Object) arrayList0;
      objectArray0[2] = (Object) "P0oNZ";
      arrayList0.remove(object0);
      objectArray0[7] = (Object) arrayList0;
      objectArray0[4] = (Object) arrayList0;
      objectArray0[5] = (Object) arrayList0;
      objectArray0[6] = (Object) "P0oNZ";
      Attribute attribute1 = new Attribute("date", (List<String>) null);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute1);
      Discretize discretize0 = new Discretize();
      Object object1 = new Object();
      attribute1.equalsMsg(object1);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      discretize0.setUseBinNumbers(true);
      Instances instances0 = new Instances("@end", arrayList2, 245);
      Instances instances1 = new Instances("<+", arrayList0, 18);
      discretize0.setInputFormat(instances1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(95);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.StringLocator", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5015166969605436
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'B2of2'";
      stringArray0[1] = "";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-1);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'B2of2'", arrayList0, 0);
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList2);
      Attribute attribute0 = new Attribute((String) null, linkedList1, (byte) (-63));
      arrayList0.add(attribute0);
      Filter.runFilter(discretize0, stringArray0);
      discretize1.setInputFormat(instances0);
      discretize1.setBins(0);
      // Undeclared exception!
      try { 
        discretize1.calculateCutPointsByEqualFrequencyBinning(77);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.384415616105067
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 62);
      attribute0.setStringValue("Pc4c");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2);
      arrayList1.add(attribute0);
      arrayList1.remove((Object) "Pc4c");
      arrayList1.addAll((Collection<? extends Attribute>) arrayList0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(0);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("@end", arrayList4);
      ArrayList<Attribute> arrayList5 = new ArrayList<Attribute>();
      arrayList5.add(attribute0);
      Discretize discretize0 = new Discretize();
      attribute1.equalsMsg("string");
      Instances instances0 = new Instances("numeric", arrayList5, 4);
      Instances instances1 = instances0.stringFreeStructure();
      Instances instances2 = new Instances("C]5h", arrayList0, 3887);
      instances1.enumerateInstances();
      instances2.delete();
      discretize0.setInputFormat(instances1);
      Random.setNextRandom(1);
      Discretize discretize1 = new Discretize("@attribute");
      try { 
        discretize1.setInputFormat(instances1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at @attribute
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.0351503820150283
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("A4c", arrayList1, 2302);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(68);
      attribute0.equals("A4c");
      arrayList0.add(attribute0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      Discretize discretize0 = new Discretize();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, true);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "U&bu");
      Filter.runFilter(discretize0, (String[]) null);
      Instances instances0 = new Instances("relational", arrayList0, 210);
      arrayList1.iterator();
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.012976629698871
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "P0oNZ";
      Attribute attribute0 = new Attribute("P0oNZ", 2);
      arrayList0.add(attribute0);
      objectArray0[1] = (Object) arrayList0;
      objectArray0[2] = (Object) "P0oNZ";
      arrayList0.remove(object0);
      objectArray0[3] = (Object) arrayList0;
      objectArray0[4] = (Object) arrayList0;
      objectArray0[5] = (Object) arrayList0;
      objectArray0[6] = (Object) "P0oNZ";
      Attribute attribute1 = new Attribute("Quote parse error.", (List<String>) null, 2288);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute1);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "real";
      stringArray0[2] = "real";
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@end", arrayList2, 245);
      Instances instances1 = new Instances("<+", arrayList0, 18);
      discretize0.setInputFormat(instances1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(95);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.StringLocator", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize("n:OEZ/@gt");
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.m_UseEqualFrequency = true;
      discretize0.getOptions();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 1;
      Integer integer0 = new Integer(1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.107291076631567
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Properties properties0 = new Properties();
      arrayList1.add((String) null);
      StringReader stringReader0 = new StringReader("$Revision: 8964 $");
      properties0.load((Reader) stringReader0);
      Collection<Object> collection0 = new ArrayList<Object>();
      Properties properties1 = new Properties(properties0);
      properties1.remove((Object) "$Revision: 8964 $");
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      arrayList1.add((String) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) arrayList1, locale_FilteringMode0);
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("real");
      arrayList2.add(locale_LanguageRange0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) list0, locale_FilteringMode1);
      Attribute attribute0 = new Attribute((String) null, (String) null);
      Discretize discretize0 = new Discretize();
      Attribute attribute1 = attribute0.copy("WjFZ@5KF>fJ");
      attribute1.equalsMsg((Object) null);
      Attribute.typeToString(3847);
      Instances instances0 = new Instances("n:OEZ/@gt", arrayList0, 2);
      arrayList0.add(attribute1);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-908.632267), doubleArray0);
      discretize0.input(sparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-1280));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1280
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.4428352147175594
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 62);
      attribute0.setStringValue("Pc4c");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2);
      arrayList1.add(attribute0);
      arrayList1.remove((Object) "Pc4c");
      arrayList1.addAll((Collection<? extends Attribute>) arrayList0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(0);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("@end", arrayList4);
      ArrayList<Attribute> arrayList5 = new ArrayList<Attribute>();
      arrayList5.add(attribute0);
      Discretize discretize0 = new Discretize();
      attribute1.equalsMsg("string");
      Instances instances0 = new Instances("real", arrayList1, 2);
      ArrayList<Attribute> arrayList6 = new ArrayList<Attribute>();
      discretize0.setInputFormat(instances0);
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[5] = (double) 1;
      discretize0.setMakeBinary(true);
      doubleArray0[17] = (double) 4;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.314368654677984
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1390.0118;
      doubleArray0[1] = (-519.569958);
      doubleArray0[2] = 1390.0118;
      int int0 = 1186;
      Attribute attribute0 = new Attribute("^'Zx.c!j/}c~H", (List<String>) null, 1186);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Discretize discretize1 = new Discretize();
      Filter.runFilter(discretize1, stringArray0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("numeric", arrayList1, 4);
      try { 
        discretize1.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "|5CFx<H";
      stringArray0[1] = "u624+T_L";
      stringArray0[2] = "}I";
      stringArray0[3] = "?](=gf)!9ml+z";
      stringArray0[4] = "#\"3FxNv";
      stringArray0[5] = "/*_";
      stringArray0[6] = "DoNotLoadIfFileNotPresentMessage";
      Filter.runFilter(discretize0, stringArray0);
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.getBinRangesString(30000);
      discretize0.setIgnoreClass(false);
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(true);
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(2302);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, false);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "r4B");
      Filter.runFilter(discretize0, (String[]) null);
      arrayList0.iterator();
      discretize0.getCutPoints(2302);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Zr[8(O");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("");
      discretize0.getBinRangesString(46);
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      
      System.setCurrentTimeMillis(46);
      System.setCurrentTimeMillis((-401L));
      discretize0.getAttributeIndices();
      String string1 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string1);
      
      discretize0.setOutputFormat();
      String string2 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string2);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("6`]+-<I0d1<");
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), double0, 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("A4c", arrayList1, 2302);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(68);
      attribute0.equals("A4c");
      arrayList0.add(attribute0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "v6n'4");
      Filter.runFilter(discretize0, (String[]) null);
      arrayList1.iterator();
      int int0 = discretize0.getBins();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      String string0 = null;
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[20];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2<1 'RR8d~I");
      stringArray0[2] = "2<1 'RR8d~I";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[5] = "3di8/SRokF][7G@m+pR";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getRevision();
      discretize0.m_MakeBinary = false;
      int int0 = (-1982292581);
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-1982292581));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = 2367.571091999535;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.toArray((Object[]) stringArray0);
      Discretize discretize1 = new Discretize("Can't ignore class when changing the number of attributes!");
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-225));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)99;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Discretize discretize0 = new Discretize("?](=gf)!9ml+z");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "?](=gf)!9ml+z";
      SystemInUtil.addInputLine("b,gNF925~");
      Filter.runFilter(discretize0, stringArray0);
      Discretize discretize1 = new Discretize();
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getMakeBinary());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getUseBinNumbers());
      
      discretize0.setAttributeIndices("");
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      discretize0.setBins((-2034458190));
      discretize0.m_MakeBinary = true;
      int[] intArray0 = new int[5];
      discretize0.findNumBinsTipText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(25, intArray0, (-1044));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      discretize0.invertSelectionTipText();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = null;
      try {
        binarySparseInstance3 = new BinarySparseInstance((-541));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Discretize discretize0 = new Discretize("18,18");
      String string0 = discretize0.globalInfo();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "isP";
      stringArray0[1] = ":NFF_!";
      stringArray0[2] = "VBrDJ";
      stringArray0[3] = "Z0vV[rk>z";
      stringArray0[4] = "?crq'XVy0[WG";
      stringArray0[5] = "VmSve";
      stringArray0[6] = "EMPTY_NOMINAL_CLASS";
      stringArray0[7] = "<Jyk,QRxF9)v";
      stringArray0[8] = "p2;%Q7('iLEH6";
      discretize0.setOptions(stringArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "AH4c;";
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "AH4c;";
      objectArray0[3] = (Object) arrayList0;
      objectArray0[4] = (Object) arrayList0;
      objectArray0[5] = (Object) arrayList0;
      Object object1 = new Object();
      arrayList0.remove(object1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 7;
      objectArray0[7] = (Object) 7;
      doubleArray0[3] = (double) (-954);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) (-954);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (-1.0);
      int[] intArray0 = new int[8];
      intArray0[0] = 7;
      intArray0[1] = 1;
      intArray0[2] = 7;
      intArray0[3] = 7;
      intArray0[4] = 7;
      intArray0[5] = (-954);
      intArray0[6] = 7;
      intArray0[7] = 7;
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.attributeIndicesTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'B2of2'";
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale locale0 = new Locale("'B2of2'");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode1);
      linkedList0.add("Z0vV[rk>z");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedList0.add("XUOT>A8h|G-");
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.2049915089181553
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "qWTqcj`Vz";
      stringArray0[1] = "qWTqcj`Vz";
      stringArray0[2] = "qWTqcj`Vz";
      stringArray0[3] = "'";
      stringArray0[4] = "R";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.getOptions();
      SystemInUtil.addInputLine("Numeric class");
      int int0 = (-1789569704);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1335.8324894337366;
      DenseInstance denseInstance0 = new DenseInstance((-1.0), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-541));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseEqualFrequency(false);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2129.6088);
      doubleArray0[1] = (-2129.6088);
      int[] intArray0 = new int[20];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 3377;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S>@ETS5P:ZGA-~");
      intArray0[3] = 3215;
      intArray0[4] = 326;
      discretize0.setFindNumBins(false);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(81);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Discretize discretize0 = new Discretize();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, true);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "U&bu");
      Filter.runFilter(discretize0, (String[]) null);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCapabilities();
      int int0 = (-1982292595);
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-1982292595));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = null;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
