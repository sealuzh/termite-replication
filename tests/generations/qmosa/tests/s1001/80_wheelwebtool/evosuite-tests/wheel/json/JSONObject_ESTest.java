/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 06:41:41 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0693694740853013
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("K%VmS$iKrXB!@");
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.put("K%VmS$iKrXB!@", (-26L));
      JSONObject jSONObject1 = jSONObject0.put("istoLowerCase", (Collection) linkedList0);
      jSONObject0.optJSONArray((String) null);
      jSONObject0.toString(0);
      Object object1 = JSONObject.NULL;
      jSONObject1.toString(0, 0);
      Long long0 = new Long(0L);
      Long long1 = new Long((-1088L));
      Long.getLong("{\n\"java.lang.String@0000000007\": [],\n\"java.lang.String@0000000004\": java.lang.Long@0000000005\n}", long1);
      jSONObject0.optDouble("K%VmS$iKrXB!@");
      Long.compare(4123L, (-1L));
      JSONObject jSONObject2 = new JSONObject(long0);
      Object object2 = new Object();
      try { 
        jSONObject0.append((String) null, jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.384415616105067
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "isreverse";
      jSONObject0.optDouble("isreverse");
      jSONObject0.names();
      hashMap0.put("isreverse", "isreverse");
      jSONObject0.toString();
      jSONObject0.keys();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8808421307236456
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Byte, Long> hashMap1 = new HashMap<Byte, Long>();
      Short short0 = new Short((short)36);
      Double double0 = new Double((short)36);
      Double.max((-1194.058516345), (-3604.19794));
      hashMap0.putIfAbsent((Double) null, (Double) null);
      Double.max(Double.NaN, 0.0);
      Short.compare((short)36, (short)10);
      Double.min(0.0, 1496.1427326897);
      Object object0 = hashMap0.clone();
      Double double1 = new Double(0.0);
      Double.min(2964.37, 1.0);
      Double.min(1.0, 0.0);
      hashMap0.getOrDefault("getnotify", double1);
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      HashMap<String, Double> hashMap3 = new HashMap<String, Double>();
      HashMap<Double, Double> hashMap4 = new HashMap<Double, Double>();
      Short short1 = new Short((short)10);
      Integer integer0 = new Integer(26);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      String string0 = JSONObject.valueToString(object0);
      assertNull(string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3959387713398894
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[5];
      Long.max((-1L), (-1L));
      stringArray0[0] = "K%VmS$iKrXB!@";
      stringArray0[1] = "K%VmS$iKrXB!@";
      stringArray0[2] = "K%VmS$iKrXB!@";
      stringArray0[4] = "K%VmS$iKrXB!@";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("K%VmS$iKrXB!@", long0);
      jSONObject1.put("s[}l3eEQB5nMP", (int) (short)8762);
      jSONObject1.put("Si2HD", (-1L));
      Short short0 = new Short((short)8762);
      jSONObject1.append("xl", jSONObject0);
      JSONObject.numberToString(short0);
      JSONTokener jSONTokener0 = new JSONTokener("K%VmS$iKrXB!@");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.10987014179609
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      Long long0 = new Long(282L);
      Long.sum(282L, 282L);
      hashMap0.remove((Object) long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean(";!ht?sg", false);
      jSONObject0.optBoolean("4AY@NHAy!llN-y");
      jSONObject0.optBoolean("", false);
      JSONObject.quote("4AY@NHAy!llN-y");
      jSONObject0.put("4AY@NHAy!llN-y", false);
      jSONObject0.getBoolean("4AY@NHAy!llN-y");
      Byte byte0 = new Byte((byte) (-61));
      Byte.toUnsignedInt((byte) (-61));
      JSONObject.testValidity(byte0);
      jSONObject0.get("4AY@NHAy!llN-y");
      JSONObject jSONObject1 = jSONObject0.put("\"4AY@NHAy!llN-y\"", (int) (byte) (-61));
      try { 
        jSONObject1.get(":**mM=7DA1 yP2*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\":**mM=7DA1 yP2*\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5191709023509072
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject.doubleToString((-446.71));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8797986094610106
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Set<Map.Entry<Double, Double>> set0 = (Set<Map.Entry<Double, Double>>)hashMap0.entrySet();
      hashMap0.entrySet();
      JSONObject.valueToString(hashMap0, 1395, 8);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Integer, Float> hashMap2 = new HashMap<Integer, Float>();
      Short short0 = new Short((short)5);
      JSONObject jSONObject0 = new JSONObject("{}");
      jSONObject0.put("{}", (double) 1395);
      jSONObject0.optLong("{}");
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONTokener", (Collection) set0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6666727619063795
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "K%VmS$iKrXB!@";
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("K%VmS$iKrXB!@");
      Object object0 = JSONObject.NULL;
      linkedList0.add(object0);
      JSONObject jSONObject2 = jSONObject1.put("istoLowerCase", (Collection) linkedList0);
      jSONObject1.optJSONArray((String) null);
      String string1 = null;
      jSONObject1.optInt("");
      jSONObject1.optInt("mvXI", 0);
      jSONObject1.opt("uq_;2^/,:tJB");
      String string2 = "#cg\\\"zku=!l";
      jSONObject2.getString("istoLowerCase");
      JSONTokener jSONTokener0 = new JSONTokener("istoLowerCase");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of istoLowerCase
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6189978958658688
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Byte, Long> hashMap1 = new HashMap<Byte, Long>();
      Short.compare((short)10, (short)32);
      Double.min((-1868.0), (-1868.0));
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Short.compare((short)70, (short)70);
      JSONObject jSONObject0 = new JSONObject((Object) "");
      try { 
        jSONObject0.put((String) null, 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3074153952359477
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Float float0 = new Float((-821.927F));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Double.max((-821.927F), 1290.6869371526402);
      Double.max(1290.6869371526402, 1415.33804394);
      short short0 = (short)10;
      Short.compare((short)28, (byte) (-1));
      Double.min(1290.6869371526402, (-1868.0));
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      hashMap0.getOrDefault(linkedList0, (Double) null);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<String, Double> hashMap2 = new HashMap<String, Double>();
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Short short1 = new Short((short)10);
      Short.compare((short) (-1116), (short)28);
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      Short short2 = new Short((short)44);
      JSONObject jSONObject0 = new JSONObject(short2, stringArray0);
      jSONObject0.names();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = 'C';
      charArray0[2] = '}';
      charArray0[3] = 'l';
      charArray0[4] = 'J';
      charArray0[5] = 'X';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 8, (int) (short) (-1116));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6511726838162377
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[5];
      long long1 = new Long((-1L));
      stringArray0[0] = "K%VmS$iKrXB!@";
      stringArray0[1] = "K%VmS$iKrXB!@";
      stringArray0[2] = "K%VmS$iKrXB!@";
      stringArray0[3] = "K%VmS$iKrXB!@";
      stringArray0[4] = "K%VmS$iKrXB!@";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("K%VmS$iKrXB!@", long0);
      JSONObject jSONObject2 = jSONObject1.put("s[}l3eEEB5nMP", (-38689130));
      jSONObject2.names();
      jSONObject1.put("Si2HD", (-1L));
      Short short0 = new Short((short)8762);
      jSONObject1.append("val", jSONObject0);
      jSONObject0.put("K%VmS$iKrXB!@", 199.78986);
      jSONObject0.optString("K%VmS$iKrXB!@");
      try { 
        jSONObject0.getJSONObject("K%VmS$iKrXB!@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K%VmS$iKrXB!@\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4203044280116917
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Long long0 = new Long((-1L));
      Integer integer0 = new Integer(306);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer1 = new Integer(306);
      Integer integer2 = new Integer(58);
      Integer.getInteger((String) null, integer2);
      Integer.divideUnsigned(1544, (-3717));
      Integer.sum(0, 4);
      Integer integer3 = new Integer(58);
      Integer integer4 = Integer.getInteger("is", 300);
      hashMap0.put(integer4, (Boolean) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.isNull("nRtdI 6,-#wDay2");
      jSONObject0.optLong("ismin");
      JSONObject jSONObject1 = jSONObject0.put("is", 2886L);
      JSONObject jSONObject2 = jSONObject1.put(";K|quDtkasUY", true);
      jSONObject0.opt(";K|quDtkasUY");
      JSONArray jSONArray0 = jSONObject2.optJSONArray("is");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      hashMap1.clone();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Double double0 = new Double(Double.NaN);
      Double.min(Double.NaN, Double.NaN);
      Function<Double, Double> function0 = Function.identity();
      hashMap0.computeIfAbsent(double0, function0);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      HashMap<Boolean, Byte> hashMap4 = new HashMap<Boolean, Byte>();
      hashMap3.clone();
      HashMap<Double, Double> hashMap5 = new HashMap<Double, Double>(68, 68);
      HashMap<Double, Double> hashMap6 = new HashMap<Double, Double>();
      hashMap1.keySet();
      hashMap3.clone();
      HashMap<Double, Double> hashMap7 = new HashMap<Double, Double>();
      JSONArray jSONArray1 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6421025234633815
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      Integer.remainderUnsigned((-643), (-643));
      String string0 = "getreplaceFirst";
      JSONObject jSONObject1 = jSONObject0.accumulate("getreplaceFirst", "getreplaceFirst");
      JSONObject jSONObject2 = jSONObject0.append("RzFnsnc2~Wf3{i5u", "RzFnsnc2~Wf3{i5u");
      jSONObject2.optBoolean("RzFnsnc2~Wf3{i5u", false);
      JSONObject.getNames(jSONObject1);
      try { 
        jSONObject1.getLong("getreplaceFirst");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getreplaceFirst\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.578600015269585
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "OntIO>n,?w";
      jSONObject0.append("OntIO>n,?w", "OntIO>n,?w");
      Integer.remainderUnsigned(62, 62);
      jSONObject0.getJSONArray("OntIO>n,?w");
      jSONObject0.put("sp", false);
      jSONObject0.put("<,Bv+~f{+BQ:FPK0\"m", (long) 0);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-744));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.729910171019988
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("par");
      String string0 = "K%VmS$iKrXB!@";
      String string1 = "spl";
      jSONObject0.optLong("spl", 249L);
      JSONObject jSONObject1 = new JSONObject((Object) "K%VmS$iKrXB!@");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("K%VmS$iKrXB!@");
      short short0 = (short)117;
      Short short1 = new Short((short)117);
      linkedList0.add((Object) short1);
      linkedList0.add((Object) linkedList0);
      linkedList0.parallelStream();
      linkedList0.offerLast("par");
      String string2 = "de";
      jSONObject1.put("de", (Collection) linkedList0);
      jSONObject1.optJSONArray((String) null);
      // Undeclared exception!
      JSONObject.valueToString(linkedList0, 0, (short)117);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.10447245914544
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      Long long0 = new Long(1612L);
      linkedList0.add((Object) long0);
      // Undeclared exception!
      JSONObject.valueToString(linkedList0, 4176, 4176);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.284263420533369
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[5];
      Long.max(0L, 0L);
      stringArray0[0] = "K%VmS$iKrXB!@";
      stringArray0[1] = "K%VmS$iKrXB!@";
      stringArray0[2] = "K%VmS$iKrXB!@";
      stringArray0[3] = "K%VmS$iKrXB!@";
      stringArray0[4] = "K%VmS$iKrXB!@";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject((Object) "K%VmS$iKrXB!@");
      Object object1 = new Object();
      JSONObject jSONObject2 = jSONObject1.append("K%VmS$iKrXB!@", long0);
      Short short0 = new Short((short)8762);
      jSONObject2.append("val", jSONObject1);
      jSONObject0.put("K%VmS$iKrXB!@", 199.78986);
      JSONObject jSONObject3 = new JSONObject((Map) null);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject4 = jSONObject3.accumulate(" Ht9kqlA9TXo0J6(Cm", jSONArray0);
      assertFalse(jSONObject4.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4715093613566137
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(121);
      Integer.compareUnsigned(121, 121);
      jSONObject0.accumulate("OntIO>n,?w", integer0);
      StringWriter stringWriter0 = new StringWriter();
      Double.sum((-375.46756), 0);
      Double double0 = new Double((-1.0));
      Double double1 = new Double(1864.5);
      Double.min(Double.NaN, 565.6575);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double2 = new Double(0.0);
      hashMap0.replace(double2, double0, double1);
      Double double3 = new Double((-375.46756));
      Double double4 = new Double((-1583.841));
      Double double5 = new Double(Double.NaN);
      hashMap0.replace(double4, double3, double5);
      hashMap0.clone();
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      hashMap1.clone();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      hashMap0.clone();
      hashMap0.clone();
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      jSONObject0.getString("OntIO>n,?w");
      jSONObject0.putOpt("java.lang.Integer@0000000003", "java.lang.Integer@0000000003");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.4398548143262975
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[5];
      Long.max((-1L), (-1L));
      stringArray0[0] = "K%VmS$iKrXB!@";
      stringArray0[0] = "K%VmS$iKrXB!@";
      stringArray0[2] = "K%VmS$iKrXB!@";
      stringArray0[4] = "K%VmS$iKrXB!@";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      Double double0 = new Double((-1L));
      jSONObject0.putOpt("K%VmS$iKrXB!@", double0);
      jSONObject0.put("s[}l3eEQB5nMP", (int) (short)8762);
      Short short0 = new Short((short)8762);
      jSONObject0.append("xl", jSONObject0);
      try { 
        jSONObject0.put(stringArray0[1], 199.78986);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9985204846596742
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(Double.NaN);
      hashMap0.put(double0, double0);
      int int0 = 1395;
      int int1 = (-32);
      try { 
        JSONObject.valueToString(hashMap0, 1395, (-32));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.500456523494731
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[5];
      Long.max(0L, 0L);
      stringArray0[0] = "K%VmS$iKrXB!@";
      stringArray0[1] = "K%VmS$iKrXB!@";
      stringArray0[2] = "K%VmS$iKrXB!@";
      stringArray0[3] = "K%VmS$iKrXB!@";
      stringArray0[4] = "K%VmS$iKrXB!@";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("K%VmS$iKrXB!@", long0);
      jSONObject1.put("s[}l3eEEB5nMP", (-38689130));
      jSONObject1.put("Si2HD", 0L);
      Short short0 = new Short((short)8762);
      jSONObject1.append("val", jSONObject0);
      JSONObject jSONObject2 = jSONObject0.put("K%VmS$iKrXB!@", 199.78986);
      jSONObject2.getLong("s[}l3eEEB5nMP");
      JSONObject.valueToString(object1);
      try { 
        jSONObject0.getJSONObject("K%VmS$iKrXB!@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K%VmS$iKrXB!@\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.3533050763123917
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "OntIO>n,?w";
      int int0 = 121;
      Integer integer0 = new Integer(121);
      int int1 = 62;
      Integer.remainderUnsigned(62, 62);
      JSONObject jSONObject1 = jSONObject0.accumulate("OntIO>n,?w", integer0);
      JSONObject.getNames(jSONObject1);
      jSONObject1.getLong("OntIO>n,?w");
      try { 
        jSONObject0.getJSONArray("OntIO>n,?w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"OntIO>n,?w\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5626918108181798
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Integer integer0 = new Integer(60);
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      Integer.getInteger(";K|quDtkasUY");
      Integer.getInteger("is", (Integer) null);
      Integer.divideUnsigned(60, 60);
      Integer.sum(1, 1);
      hashMap1.put((Integer) null, (Boolean) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(";K|quDtkasUY", (-1L));
      jSONObject1.isNull(";K|quDtkasUY");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.optLong(";K|quDtkasUY");
      jSONObject1.optInt(" of ");
      Byte byte0 = new Byte((byte)84);
      JSONObject jSONObject2 = jSONObject0.put(";K|quDtkasUY", (Object) byte0);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2959750291701715
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "9&4w#xRfvi>");
      linkedList0.parallelStream();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.offer("9&4w#xRfvi>");
      Object object0 = new Object();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Short short0 = new Short((short) (-867));
      JSONObject jSONObject1 = new JSONObject((Object) "9&4w#xRfvi>");
      jSONObject1.toString();
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.550809899150051
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "K%VmS$iKrXB!@";
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("K%VmS$iKrXB!@");
      jSONObject1.accumulate("K%VmS$iKrXB!@", jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "K%VmS$iKrXB!@");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "K%VmS$iKrXB!@", 0, 0);
      // Undeclared exception!
      jSONObject1.write(stringWriter2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.501232927363681
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 615;
      int int1 = (-4895);
      JSONObject.valueToString("Null key.", 615, (-4895));
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Null key.", "\"java.lang.String@0000000001\"");
      Boolean boolean0 = new Boolean("\"java.lang.String@0000000001\"");
      JSONObject jSONObject2 = jSONObject0.put("\"java.lang.String@0000000001\"", (Map) hashMap0);
      Boolean boolean1 = Boolean.FALSE;
      jSONObject0.put("Null key.", (-1382.7834639684));
      jSONObject2.accumulate("\"java.lang.String@0000000001\"", boolean1);
      jSONObject1.getInt("Null key.");
      Object object0 = new Object();
      jSONObject0.putOpt("C<[UR1tF1[0Fr a", object0);
      Object object1 = new Object();
      Long long0 = new Long((-1382));
      HashMap<Float, Integer> hashMap1 = new HashMap<Float, Integer>();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "$m#u,_dI59`", (-1382), (-1851));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.501232927363681
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = (-4895);
      JSONObject.valueToString("Null key.", 615, (-4895));
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Null key.", "\"java.lang.String@0000000001\"");
      Boolean boolean0 = new Boolean("\"java.lang.String@0000000001\"");
      JSONObject jSONObject2 = jSONObject0.put("\"java.lang.String@0000000001\"", (Map) hashMap0);
      Boolean boolean1 = Boolean.FALSE;
      jSONObject0.put("Null key.", (double) 615);
      jSONObject2.accumulate("\"java.lang.String@0000000001\"", boolean1);
      jSONObject1.getInt("Null key.");
      Object object0 = new Object();
      jSONObject0.putOpt("C<[UR1tF1[0Fr a", object0);
      Long long0 = new Long(615);
      HashMap<Float, Integer> hashMap1 = new HashMap<Float, Integer>();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "$m#u,_dI59`", 615, (-1851));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.028393725270425
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.optJSONObject("min");
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      String string0 = "getvalueOf";
      try { 
        jSONObject0.getJSONArray("getvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getvalueOf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8024235905964554
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("par");
      jSONObject0.optLong("spl", 249L);
      JSONObject jSONObject1 = new JSONObject((Object) "K%VmS$iKrXB!@");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("K%VmS$iKrXB!@");
      Object object0 = JSONObject.NULL;
      Short short0 = new Short((short)117);
      linkedList0.add((Object) short0);
      linkedList0.add(object0);
      linkedList0.parallelStream();
      linkedList0.offerLast("par");
      Object object1 = new Object();
      JSONObject.valueToString(object1);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Short short1 = new Short((short)1392);
      StringWriter stringWriter0 = new StringWriter((short)117);
      jSONObject1.write(stringWriter0);
      try { 
        jSONObject1.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.29741408472037
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "K%VmS$iKrXB!@";
      stringArray0[1] = "K%VmS$iKrXB!@";
      stringArray0[3] = "K%VmS$iKrXB!@";
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Pc^] 1HU", "K%VmS$iKrXB!@");
      jSONObject0.has("iu.@D96+eeAM52$@;");
      JSONObject jSONObject2 = jSONObject0.put("K%VmS$iKrXB!@", (Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      jSONObject2.optJSONObject("K%VmS$iKrXB!@");
      JSONObject jSONObject3 = jSONObject1.accumulate("$m#u,_dI59`", "K%VmS$iKrXB!@");
      try { 
        jSONObject3.getInt("K%VmS$iKrXB!@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K%VmS$iKrXB!@\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.266585296197314
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      Short short0 = new Short((short)35);
      Object object1 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (Object) short0);
      String string0 = "p_<2\\gOs";
      jSONObject1.optInt("wheel.json.JSONArray");
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONArray");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wheel.json.JSONArray
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(false);
      jSONObject0.toJSONArray(jSONArray0);
      int int0 = 9;
      Integer integer0 = new Integer(9);
      Float float0 = new Float((float) 9);
      String string0 = "A?(BB5}GDoD\\";
      StringWriter stringWriter0 = new StringWriter();
      int int1 = (-1153);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "A?(BB5}GDoD", (-1153), (-1153));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Float float0 = new Float(Double.NaN);
      Float.sum(2659.665F, (-4401.323F));
      Float.isFinite(1363.8124F);
      Float.isFinite(1.0F);
      Float.isFinite(3157.0F);
      Float.sum(0.0F, 3868.1F);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      JSONObject.doubleToString(Double.NaN);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.8051447213627108
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("K%VmS$iKrXB!@");
      Object object0 = JSONObject.NULL;
      linkedList0.add(object0);
      jSONObject1.put("istoLowerCase", (Collection) linkedList0);
      jSONObject1.optJSONArray((String) null);
      jSONObject1.toString(0);
      jSONObject1.optLong("] is not a JSONObject.");
      Short short0 = new Short((short)16);
      Object object1 = new Object();
      String string0 = "";
      jSONObject0.optString("&>huv^Z<kyEA~J", "");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter((short)16);
      StringWriter stringWriter2 = stringWriter0.append('S');
      stringWriter2.getBuffer();
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "", 115, (-1109));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9564191693517015
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("par");
      jSONObject0.optLong("spl", 249L);
      JSONObject jSONObject1 = new JSONObject((Object) "K%VmS$iKrXB!@");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("K%VmS$iKrXB!@");
      Object object0 = JSONObject.NULL;
      Short short0 = new Short((short)117);
      linkedList0.add((Object) short0);
      linkedList0.add(object0);
      linkedList0.parallelStream();
      linkedList0.offerLast("par");
      JSONObject jSONObject2 = jSONObject1.put("de", (Collection) linkedList0);
      jSONObject1.optJSONArray((String) null);
      JSONObject.valueToString(linkedList0, 0, (short)117);
      long long0 = new Short((short)117);
      long long1 = new Short((short)117);
      jSONObject0.optDouble("de");
      jSONObject2.optDouble("[T#n[5<Eu?7t");
      Double double0 = new Double(0);
      JSONObject.valueToString(double0, 21, 125);
      jSONObject2.append("K%VmS$iKrXB!@", object0);
      JSONObject jSONObject3 = new JSONObject();
      JSONObject.quote("[\n                                                                                                                     java.lang.Short@0000000074,\n                                                                                                                     null,\n                                                                                                                     \"java.lang.String@0000000075\"\n                                                                                                                     ]");
      jSONObject0.optInt("\"[\n                                                                                                                     java.lang.Short@0000000074,\n                                                                                                                     null,\n                                                                                                                     \"java.lang.String@0000000075\"\n                                                                                                                     ]\"");
      JSONObject.quote(")#lNjt%6@xujBG[");
      try { 
        jSONObject3.getInt("\")#lNjt%6@xujBG[\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\")#lNjt%6@xujBG[\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Integer integer0 = new Integer(3480);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer1 = new Integer(3480);
      Boolean.valueOf(false);
      Integer integer2 = new Integer(3480);
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put(integer2, boolean0);
      String string0 = ";K|uDtk\\asUY";
      Integer integer3 = new Integer(3480);
      Integer integer4 = new Integer(3480);
      Integer.getInteger(";K|uDtkasUY", integer4);
      Integer.divideUnsigned(53, 3480);
      Integer.sum(1180, 1180);
      hashMap0.put(integer3, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-1570L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4550299248745695
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[5];
      Long.max((-1L), (-1L));
      stringArray0[0] = "K%VmS$iKrXB!@";
      stringArray0[1] = "K%VmS$iKrXB!@";
      stringArray0[2] = "K%VmS$iKrXB!@";
      stringArray0[4] = "K%VmS$iKrXB!@";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("K%VmS$iKrXB!@", long0);
      jSONObject1.put("s[}l3eEQB5nMP", (int) (short)8762);
      jSONObject1.put("K%VmS$iKrXB!@", (-1L));
      Short short0 = new Short((short)8762);
      try { 
        jSONObject1.append("K%VmS$iKrXB!@", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[K%VmS$iKrXB!@] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.2962254658226184
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[5];
      Long.max(0L, 0L);
      stringArray0[0] = "K%VmS$iKrXB!@";
      stringArray0[1] = "K%VmS$iKrXB!@";
      stringArray0[2] = "K%VmS$iKrXB!@";
      stringArray0[3] = "K%VmS$iKrXB!@";
      JSONObject jSONObject0 = new JSONObject("K%VmS$iKrXB!@", stringArray0);
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      Byte byte0 = new Byte((byte)16);
      JSONObject jSONObject1 = jSONObject0.append("getjoin", byte0);
      JSONObject jSONObject2 = jSONObject1.put("K%VmS$iKrXB!@", 830L);
      Short short0 = new Short((short) (-2386));
      jSONObject2.append("getjoin", "7hWwBeLkNBflUM>$f|!");
      jSONObject0.put("null", 0.0);
      try { 
        jSONObject0.getJSONObject("H$(D&qY##B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"H$(D&qY##B\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.569352124124555
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[5];
      Long.max(0L, 0L);
      stringArray0[0] = "K%VmS$iKrXB!@";
      stringArray0[1] = "K%VmS$iKrXB!@";
      stringArray0[2] = "K%VmS$iKrXB!@";
      stringArray0[3] = "K%VmS$iKrXB!@";
      stringArray0[4] = "K%VmS$iKrXB!@";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("K%VmS$iKrXB!@", long0);
      jSONObject1.put("Si2HD", 0L);
      Short short0 = new Short((short)8762);
      JSONObject jSONObject2 = jSONObject1.append("val", jSONObject0);
      jSONObject2.remove("K%VmS$iKrXB!@");
      jSONObject2.optLong(".");
      jSONObject0.put("K%VmS$iKrXB!@", 199.78986);
      try { 
        jSONObject0.getJSONObject("K%VmS$iKrXB!@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K%VmS$iKrXB!@\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.4592045174343244
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalOr(false, false);
      Integer.getInteger("th%}t.;");
      Integer.toUnsignedLong(10);
      Integer.getInteger(";K|quDtkasUY", (Integer) null);
      Integer.divideUnsigned((-749), (-749));
      Integer.sum(49, 49);
      Integer integer0 = new Integer(35);
      JSONObject jSONObject1 = jSONObject0.put("getmin", (-1L));
      jSONObject1.isNull("Oes");
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject2 = jSONObject1.accumulate("getmin", integer0);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.4445595606837074
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[5];
      Long.max(0L, 0L);
      stringArray0[0] = "K%VmS$iKrXB!@";
      stringArray0[1] = "K%VmS$iKrXB!@";
      stringArray0[2] = "K%VmS$iKrXB!@";
      stringArray0[3] = "K%VmS$iKrXB!@";
      stringArray0[4] = "K%VmS$iKrXB!@";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("K%VmS$iKrXB!@", long0);
      JSONObject jSONObject2 = jSONObject1.put("s[}l3eEEB5nMP", (-38689130));
      Short short0 = new Short((short)8762);
      jSONObject1.append("val", jSONObject0);
      jSONObject0.put("K%VmS$iKrXB!@", 199.78986);
      JSONObject jSONObject3 = jSONObject1.accumulate("val", "val");
      assertSame(jSONObject3, jSONObject2);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Byte, Long> hashMap1 = new HashMap<Byte, Long>();
      Short short0 = new Short((short)46);
      Double double0 = new Double((short)46);
      Double.max((short)46, (-3572.876526569865));
      Double.max(Double.NaN, 0.0);
      Double double1 = new Double(46.0);
      Double.max(1.0, (-1.0));
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Object object0 = hashMap0.clone();
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Byte byte0 = new Byte((byte) (-18));
      Long long0 = new Long((byte) (-18));
      hashMap2.getOrDefault(long0, double0);
      hashMap1.clear();
      HashMap<Double, Double> hashMap4 = new HashMap<Double, Double>();
      HashMap<String, Double> hashMap5 = new HashMap<String, Double>();
      HashMap<Double, Double> hashMap6 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap7 = new HashMap<Double, Double>();
      HashMap<String, Double> hashMap8 = new HashMap<String, Double>();
      HashMap<Double, Double> hashMap9 = new HashMap<Double, Double>();
      Short.compare((short)46, (short) (-1664));
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8199213937762493
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      jSONObject0.optLong("K%VmS$iKrXB!@");
      Object object0 = JSONObject.NULL;
      jSONObject1.optJSONArray((String) null);
      jSONObject0.append("joi", (Object) null);
      JSONObject.valueToString(jSONObject0, (-16), (-16));
      jSONObject1.optLong("] is not a JSONObject.");
      Short short0 = new Short((short)16);
      Object object1 = new Object();
      JSONObject jSONObject2 = jSONObject1.put("wheel.json.JSONArray", object1);
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000005\": [null],\n\"java.lang.String@0000000002\": \"java.lang.String@0000000002\"\n}");
      JSONObject jSONObject3 = new JSONObject(jSONTokener0);
      jSONObject3.optString((String) null);
      String string0 = "N^3||0=E=<m]PGJT)";
      try { 
        jSONObject2.getDouble("N^3||0=E=<m]PGJT)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"N^3||0=E=<m]PGJT)\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.544865498099271
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "K%VmS$iKrXB!@";
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "K%VmS$iKrXB!@";
      stringArray0[1] = "K%VmS$iKrXB!@";
      stringArray0[2] = "K%VmS$iKrXB!@";
      stringArray0[3] = "K%VmS$iKrXB!@";
      stringArray0[4] = "K%VmS$iKrXB!@";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = new Object();
      jSONObject0.put("ha", object0);
      int int0 = (-259);
      Integer integer0 = new Integer((-259));
      JSONObject jSONObject1 = new JSONObject((Object) "K%VmS$iKrXB!@");
      Object object1 = new Object();
      JSONObject jSONObject2 = jSONObject1.putOpt("#e", object1);
      Integer.compare(2503, 2503);
      // Undeclared exception!
      jSONObject2.toString(34, 872);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9353978368993783
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("K%VmS$iKrXB!@");
      Object object0 = new Object();
      jSONObject0.put("K%VmS$iKrXB!@", (-26L));
      JSONObject jSONObject1 = jSONObject0.put("istoLowerCase", (Collection) linkedList0);
      String string0 = null;
      jSONObject0.optJSONArray((String) null);
      jSONObject0.toString(0);
      Object object1 = JSONObject.NULL;
      jSONObject1.toString(0, 0);
      Long long0 = new Long(0L);
      Long.compare(4123L, (-1L));
      JSONObject jSONObject2 = new JSONObject(long0);
      Object object2 = new Object();
      try { 
        jSONObject0.append((String) null, jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.9425261499602335
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "K%VmS$iKrXB!@");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("K%VmS$iKrXB!@");
      Object object0 = JSONObject.NULL;
      linkedList0.add(object0);
      String string0 = "de";
      jSONObject1.put("de", (Collection) linkedList0);
      jSONObject1.optJSONArray((String) null);
      jSONObject1.toString(0);
      String string1 = "] is not a JSONObject.";
      jSONObject0.optJSONObject((String) null);
      String string2 = null;
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.4104265834348126
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Byte, Long> hashMap1 = new HashMap<Byte, Long>();
      Short short0 = new Short((short)46);
      Double double0 = new Double((short)46);
      Double.max((-1194.058516345), (-3604.19794));
      Double.max(Double.NaN, 0.0);
      Short.compare((short)46, (short)10);
      Double.min(0.0, 1496.1427326897);
      Long.compare((short)10, 3101L);
      Short short1 = new Short((short)10);
      JSONObject jSONObject0 = new JSONObject(short1);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("val", "val");
      jSONObject0.optString("val", "<Q\"3Ot#");
      jSONObject1.opt("Bbq");
      Short short2 = new Short((short)10);
      JSONObject jSONObject2 = jSONObject0.put("val", (long) 36);
      jSONObject1.isNull("EvQgyqmq@ovAB");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject2.accumulate("getnotify", hashMap1);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, jSONObject2.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.4707191315505317
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "getsplit";
      jSONObject0.optString("getsplit", "getsplit");
      jSONObject0.optInt("getsplit");
      long long0 = (-1L);
      Long long1 = new Long((-1L));
      Integer integer0 = new Integer(0);
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONTokener", integer0);
      String string1 = "&7";
      int int0 = 3490;
      jSONObject1.put("&7", 3490);
      JSONObject jSONObject2 = new JSONObject(long1);
      String string2 = "CMe";
      jSONObject2.optDouble("CMe", (-231.06813764862));
      Integer integer1 = new Integer(3490);
      try { 
        jSONObject2.put((String) null, (Object) integer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.882505283907115
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalOr(false, false);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("gD?i5LD\b;=~!jo`\"");
      JSONObject jSONObject1 = jSONObject0.put("gD?i5LD\b;=~!jo`\"", (-1L));
      jSONObject0.optDouble("5b2;55M0(_CM7", (-1.9790171127685992));
      jSONObject1.optDouble("gD?i5LD\b;=~!jo`\"", (-1.9790171127685992));
      jSONObject1.isNull("gD?i5LD\b;=~!jo`\"");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.put("5b2;55M0(_CM7", (-1289));
      StringWriter stringWriter1 = new StringWriter();
      jSONObject1.optString("Z", "gD?i5LD\b;=~!jo`\"");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject2 = jSONObject0.put("gettoUpperCase", (Collection) linkedList0);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.788238280664919
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "OnXqtIO>,?w";
      Integer integer0 = new Integer(121);
      JSONObject jSONObject1 = jSONObject0.accumulate("OnXqtIO>,?w", integer0);
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 0;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "OnXqtIO>,?w", 0, 0);
      stringWriter0.flush();
      stringWriter0.append('{');
      Integer.compareUnsigned(121, 0);
      Integer.toUnsignedString(121);
      stringWriter0.write("] not found.");
      int int1 = (-1909);
      stringWriter1.write("OnXqtIO>,?w");
      Integer integer1 = new Integer((-1084));
      stringWriter1.flush();
      jSONObject0.optBoolean("OnXqtIO>,?w");
      jSONObject1.optDouble("OnXqtIO>,?w");
      jSONObject1.write(stringWriter0);
      StringWriter stringWriter2 = new StringWriter(128);
      StringWriter stringWriter3 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter3.getBuffer();
      // Undeclared exception!
      try { 
        stringWriter2.append((CharSequence) stringBuffer0, 121, 121);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 121
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.4347240733919024
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Integer integer0 = new Integer(60);
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      Integer integer1 = new Integer(34);
      Boolean boolean0 = Boolean.valueOf(false);
      Integer integer2 = new Integer(60);
      hashMap1.put(integer2, boolean0);
      Integer integer3 = new Integer(60);
      Integer integer4 = new Integer(32);
      Integer.getInteger("] is not a number.", integer4);
      Integer.divideUnsigned(13, (-26705495));
      Integer.sum(57, 47);
      hashMap1.put(integer3, (Boolean) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.put("R+]R-lyX_=)g\u0007U9", 1228L);
      jSONObject0.isNull(",:]}/\"[{;=#");
      StringWriter stringWriter0 = new StringWriter();
      try { 
        jSONObject0.accumulate((String) null, integer3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.517257006003491
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("K%VS$KrXB!@", (Object) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject(object0);
      jSONObject1.optLong("K%VS$KrXB!@", (long) 0);
      jSONObject0.optBoolean("K%VS$KrXB!@");
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      jSONObject1.optBoolean("getequals");
      Double double0 = new Double((-4595.50034041));
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("K%VS$KrXB!@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of K%VS$KrXB!@
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject.valueToString(boolean0, 101, 65);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(175.158376549535);
      hashMap0.getOrDefault("java.lang.Boolean@0000000002", double0);
      Boolean.logicalOr(false, true);
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(1345);
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      hashMap0.clone();
      HashMap<Double, Double> hashMap3 = null;
      try {
        hashMap3 = new HashMap<Double, Double>((-34), 1345);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -34
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.939049545198912
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[5];
      Long.max(0L, 0L);
      stringArray0[0] = "K%VmS$iKrXB!@";
      stringArray0[2] = "K%VmS$iKrXB!@";
      stringArray0[4] = "K%VmS$iKrXB!@";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject((Object) "K%VmS$iKrXB!@");
      Object object1 = new Object();
      try { 
        jSONObject1.append(stringArray0[1], long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.3427566146785748
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject.valueToString(hashMap0, 1395, (-34));
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      Double double0 = new Double(1395);
      hashMap1.replace((Double) null, double0);
      hashMap1.getOrDefault(hashMap0, (Double) null);
      Boolean.logicalOr(false, true);
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(6);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      hashMap0.clone();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      stringArray0[2] = "{}";
      stringArray0[3] = "{}";
      stringArray0[4] = "{}";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.8199213937762493
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      jSONObject0.optLong("K%VmS$iKrXB!@");
      Object object0 = JSONObject.NULL;
      jSONObject1.optJSONArray((String) null);
      String string0 = "joi";
      jSONObject0.append("joi", (Object) null);
      JSONObject.valueToString(jSONObject0, 0, 0);
      jSONObject1.optLong("] is not a JSONObject.");
      Object object1 = new Object();
      JSONObject jSONObject2 = jSONObject1.put("wheel.json.JSONArray", object1);
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000005\": [null],\n\"java.lang.String@0000000002\": \"java.lang.String@0000000002\"\n}");
      JSONObject jSONObject3 = new JSONObject(jSONTokener0);
      jSONObject3.optString((String) null);
      String string1 = "N^3||0=E=<m]PGJT)";
      try { 
        jSONObject2.getDouble("N^3||0=E=<m]PGJT)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"N^3||0=E=<m]PGJT)\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Byte, Long> hashMap1 = new HashMap<Byte, Long>();
      Short short0 = new Short((short)46);
      Double double0 = new Double((short)46);
      Double.max((-1194.058516345), (-3604.19794));
      Double.max(Double.NaN, 0.0);
      Short.compare((short)46, (short)10);
      Double.min(0.0, 1496.1427326897);
      Double double1 = new Double(0.0);
      Double.min(1.0, 0.0);
      hashMap0.getOrDefault("getnotify", double1);
      hashMap1.clear();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      HashMap<String, Double> hashMap3 = new HashMap<String, Double>();
      HashMap<Double, Double> hashMap4 = new HashMap<Double, Double>();
      Short short1 = new Short((short)10);
      HashMap<Double, Double> hashMap5 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      try { 
        jSONObject0.getString("getnotify");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getnotify\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.0925074217320687
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("K%VmS$iKrXB!@");
      Object object0 = new Object();
      linkedList0.add(object0);
      JSONObject jSONObject2 = jSONObject1.put("istoLowerCase", (Collection) linkedList0);
      jSONObject1.optJSONArray((String) null);
      JSONObject jSONObject3 = jSONObject0.append("joi", (Object) null);
      jSONObject3.toString();
      JSONObject.valueToString(jSONObject0, 0, 0);
      jSONObject1.optLong("] is not a JSONObject.");
      Short short0 = new Short((short)16);
      Object object1 = new Object();
      JSONObject jSONObject4 = jSONObject2.put("wheel.json.JSONArray", object1);
      jSONObject1.optInt("p_<2gOs");
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000005\": [\"java.lang.Object@0000000008\"],\n\"java.lang.String@0000000007\": [null],\n\"java.lang.String@0000000002\": \"java.lang.String@0000000002\"\n}");
      JSONObject jSONObject5 = new JSONObject(jSONTokener0);
      jSONObject5.optString((String) null);
      try { 
        jSONObject4.getDouble("qZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"qZ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.87222021873468
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "K%VmS$iKrXB!@";
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("K%VmS$iKrXB!@");
      Object object0 = JSONObject.NULL;
      linkedList0.add(object0);
      JSONObject jSONObject2 = jSONObject0.put("K%VmS$iKrXB!@", 0L);
      jSONObject1.put("istoLowerCase", (Collection) linkedList0);
      Object object1 = new Object();
      Object object2 = new Object();
      JSONObject jSONObject3 = jSONObject2.putOpt("@h:x[i&,o", (Object) null);
      Integer.compare(2503, 2503);
      jSONObject0.toString(62, 2738);
      Object object3 = new Object();
      StringWriter stringWriter0 = new StringWriter(48);
      String string1 = "}U";
      jSONObject3.get("istoLowerCase");
      try { 
        jSONObject2.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.0153632953768166
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "K%VmS$iKrXB!@";
      jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      int int0 = 3366;
      int int1 = (-2803);
      Integer integer0 = new Integer((-2803));
      Object object0 = new Object();
      jSONObject0.accumulate("K%VmS$iKrXB!@", object0);
      try { 
        jSONObject0.getBoolean("K%VmS$iKrXB!@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K%VmS$iKrXB!@\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.0300388177574233
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "9&4w#xRuvi>";
      Integer.getInteger("9&4w#xRuvi>");
      JSONObject jSONObject1 = jSONObject0.accumulate("9&4w#xRuvi>", "9&4w#xRuvi>");
      try { 
        jSONObject1.getBoolean("9&4w#xRuvi>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9&4w#xRuvi>\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.507602114451442
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(87);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)67);
      jSONObject0.accumulate("<,Bv+~f{+BQ:FPK0\"7", byte0);
      jSONObject0.getInt("<,Bv+~f{+BQ:FPK0\"7");
      Object object0 = new Object();
      jSONObject0.putOpt((String) null, (Object) null);
      Object object1 = new Object();
      Float float0 = new Float((-1844.401F));
      String string0 = JSONObject.valueToString(float0, (byte)67, 1095);
      assertNotNull(string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.3834744755118558
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 47;
      JSONObject.valueToString((Object) null, (-1104), 1798);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject1 = new JSONObject((Map) null);
      JSONObject.getNames((Object) jSONObject0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      JSONObject jSONObject2 = new JSONObject();
      String string0 = "getintern";
      JSONObject jSONObject3 = jSONObject1.putOpt("getintern", (Object) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject3.optJSONObject("getintern");
      String string1 = "gettoUpperCase";
      String string2 = "iW.UH";
      JSONTokener jSONTokener0 = new JSONTokener("iW.UH");
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of iW.UH
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.108335652604384
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("max", 0L);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      String string0 = "tri";
      jSONObject1.optLong("tri", 0L);
      jSONObject1.getDouble("max");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.31406939441681
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "K%VmS$iKrXB!@";
      stringArray0[1] = "K%VmS$iKrXB!@";
      stringArray0[2] = "K%VmS$iKrXB!@";
      stringArray0[4] = "K%VmS$iKrXB!@";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("K%VmS$iKrXB!@", long0);
      jSONObject1.put("K%VmS$iKrXB!@", (int) (short)8762);
      jSONObject1.getDouble("K%VmS$iKrXB!@");
      jSONObject1.append("xl", jSONObject0);
      jSONObject0.put("K%VmS$iKrXB!@", 199.78986);
      try { 
        jSONObject0.getJSONObject("K%VmS$iKrXB!@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K%VmS$iKrXB!@\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.674493185364617
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("JSONObject[");
      Object object0 = JSONObject.NULL;
      Double double0 = new Double(0L);
      linkedList0.add((Object) double0);
      JSONObject jSONObject1 = jSONObject0.put("istoLowerCase", (Collection) linkedList0);
      jSONObject1.optJSONArray("istoLowerCase");
      JSONObject.valueToString(object0, 102, 0);
      jSONObject0.optLong("Substring bounds error");
      Short short0 = new Short((short)8);
      Object object1 = new Object();
      jSONObject0.put("wheel.json.JSONException", (Object) "Substring bounds error");
      String string0 = "getnotifyAll";
      jSONObject1.optInt("getnotifyAll");
      JSONTokener jSONTokener0 = new JSONTokener("0");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.943909799407348
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("K%VmS$iKrXB!@");
      Object object0 = JSONObject.NULL;
      linkedList0.add(object0);
      JSONObject jSONObject2 = jSONObject1.put("istoLowerCase", (Collection) linkedList0);
      jSONObject1.optJSONArray((String) null);
      JSONObject.valueToString(jSONObject0, 0, 0);
      jSONObject1.optLong("] is not a JSONObject.");
      Short short0 = new Short((short)16);
      Object object1 = new Object();
      JSONObject jSONObject3 = jSONObject2.put("wheel.json.JSONArray", object1);
      jSONObject1.optInt("p_<2gOs");
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000005\": [null],\n\"java.lang.String@0000000002\": \"java.lang.String@0000000002\"\n}");
      JSONObject jSONObject4 = new JSONObject(jSONTokener0);
      jSONObject4.optString((String) null);
      try { 
        jSONObject3.getDouble("qZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"qZ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.5229965553634166
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long.max(0L, 0L);
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wvn_b=XA";
      JSONObject jSONObject1 = new JSONObject(object0, stringArray0);
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject2 = new JSONObject((Object) "wvn_b=XA");
      Object object2 = new Object();
      Object object3 = new Object();
      jSONObject1.append("wvn_b=XA", object3);
      Short short0 = new Short((short)8762);
      Object object4 = new Object();
      JSONObject jSONObject3 = jSONObject1.append("|v?q$CJW_mSu.O^gx]", object4);
      // Undeclared exception!
      jSONObject3.toString((int) (short)8762);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.1547371714232053
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      hashMap0.put(double0, double1);
      int int0 = 1395;
      Double double2 = new Double((-1034.2668034023));
      hashMap0.put(double2, double2);
      JSONObject.valueToString(hashMap0, 1395, (-34));
      HashMap<Double, Double> hashMap1 = null;
      try {
        hashMap1 = new HashMap<Double, Double>((-34));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -34
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.076836307778038
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(1.0);
      BiFunction<Object, Object, Short> biFunction0 = (BiFunction<Object, Object, Short>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute(double0, biFunction0);
      BiFunction<Double, Object, Short> biFunction1 = (BiFunction<Double, Object, Short>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(anyDouble() , any());
      hashMap0.compute(double0, biFunction1);
      double double1 = jSONObject0.optDouble("}a!^bK(mO2wJ", 1.0);
      assertEquals(1.0, double1, 0.01);
      
      boolean boolean0 = jSONObject0.optBoolean("Rqo[xWm[5$NGQ");
      assertFalse(boolean0);
      
      jSONObject0.put("{i", (Object) double0);
      assertEquals((double)double0, (double)double1, 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.2353003035423797
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("K%VmS$iKrXB!@");
      jSONObject0.toString();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (-26L));
      JSONObject jSONObject2 = jSONObject0.put("istoLowerCase", (Collection) linkedList0);
      jSONObject0.optJSONArray("istoLowerCase");
      jSONObject0.toString(0);
      Object object1 = JSONObject.NULL;
      jSONObject2.toString(0, 0);
      Long long0 = new Long(0L);
      Long.compare(4123L, (-1L));
      JSONObject jSONObject3 = new JSONObject(long0);
      Object object2 = new Object();
      JSONObject jSONObject4 = jSONObject0.append("istoLowerCase", jSONObject2);
      jSONObject1.optString("istoLowerCase", "get");
      jSONObject0.opt("{\n\"java.lang.String@0000000006\": [],\n\"java.lang.String@0000000003\": java.lang.Long@0000000004\n}");
      Short short0 = new Short((short)68);
      jSONObject3.put("#:", 0L);
      jSONObject0.isNull("");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject4.accumulate("val", "{\n\"java.lang.String@0000000006\": [],\n\"java.lang.String@0000000003\": java.lang.Long@0000000004\n}");
      boolean boolean0 = jSONObject1.optBoolean("get");
      assertEquals(3, jSONObject1.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.406744666487589
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "K%VmS$iKrXB!@");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("K%VmS$iKrXB!@");
      Object object0 = JSONObject.NULL;
      linkedList0.add(object0);
      JSONObject jSONObject2 = jSONObject1.put("de", (Collection) linkedList0);
      jSONObject1.optJSONArray((String) null);
      jSONObject1.optLong("] is not a JSONObject.");
      Short short0 = new Short((short)16);
      Object object1 = new Object();
      double double0 = new Integer((short)16);
      Integer integer0 = new Integer(2208);
      Boolean.valueOf("pa");
      JSONObject jSONObject3 = jSONObject2.append("K%VmS$iKrXB!@", object1);
      jSONObject3.optJSONArray("K%VmS$iKrXB!@");
      assertEquals(5, jSONObject2.length());
      assertEquals(5, jSONObject1.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.9364781359632175
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "{";
      stringArray0[1] = "KR";
      stringArray0[2] = "=iqq+0~I@RD12r$^";
      stringArray0[3] = "D4F4h~d! v^6:i8o";
      stringArray0[4] = "4I#<P";
      stringArray0[5] = "";
      stringArray0[6] = "`X~B'pE[UY&n";
      stringArray0[7] = "JSON does not allow non-finite numbers.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optBoolean("Expected a ',' or ']'", false);
      try { 
        jSONObject0.getJSONObject("|5Btb,WEj:S?;vjxPR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|5Btb,WEj:S?;vjxPR\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.214553751907803
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("K%VS$KrXB!@", (Object) "K%VS$KrXB!@");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("K%VS$KrXB!@");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject(object0);
      Float float0 = new Float(1709.0173F);
      Integer integer0 = new Integer(34);
      Float.sum((-17.26F), 1709.0173F);
      String string0 = "A?(BB5}GDoD\\";
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "K%VS$KrXB!@", 3104, 101);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.9214405419782552
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(121);
      Integer.remainderUnsigned(62, 121);
      jSONObject0.accumulate("toJ", (Object) null);
      String string0 = "z]`2$XZWKp";
      try { 
        jSONObject0.getJSONArray("z]`2$XZWKp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"z]`2$XZWKp\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.2239569212444765
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.accumulate("getmin", jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "K%VmS$iKrXB!@");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "K%VmS$iKrXB!@", 10, 10);
      stringWriter1.flush();
      int int0 = new Integer((-1909));
      stringWriter2.flush();
      Writer writer0 = jSONObject0.write(stringWriter0);
      jSONObject0.write(writer0);
      int int1 = 47;
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      StringWriter stringWriter5 = stringWriter3.append((CharSequence) "K%VmS$iKrXB!@");
      stringWriter5.getBuffer();
      // Undeclared exception!
      try { 
        stringWriter5.append((CharSequence) "getmin", 62, (-62164681));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.7970246464755704
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[5];
      Long.max((-1L), (-1L));
      stringArray0[3] = "K%VmS$iKrXB!@";
      stringArray0[1] = "K%VmS$iKrXB!@";
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = new Boolean(stringArray0[0]);
      Boolean.logicalAnd(true, true);
      hashMap0.put((Integer) null, boolean0);
      Integer integer0 = new Integer(110);
      Integer integer1 = new Integer((-576));
      Integer integer2 = Integer.getInteger(";K|uDtkasUY", integer1);
      Integer.divideUnsigned((-2093064), (-1379));
      Integer integer3 = new Integer((-1379));
      Integer.compareUnsigned(0, 0);
      Boolean boolean1 = new Boolean(true);
      Boolean.getBoolean("K%VmS$iKrXB!@");
      Boolean.logicalAnd(true, false);
      hashMap0.put(integer2, boolean1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("z}w>OS{vN", (-1L));
      jSONObject0.isNull("z}w>OS{vN");
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject2 = jSONObject1.accumulate(";K|uDtkasUY", jSONObject0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.9905316608182642
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "l%Kq\"->iM=*7 2f&S";
      stringArray0[1] = "T";
      stringArray0[2] = "T";
      stringArray0[3] = "T";
      stringArray0[4] = "H=";
      stringArray0[5] = "H=";
      stringArray0[6] = "isintern";
      stringArray0[7] = "isintern";
      stringArray0[8] = "isintern";
      JSONObject jSONObject0 = new JSONObject("joi", stringArray0);
      JSONObject jSONObject1 = new JSONObject((Object) "T");
      JSONArray jSONArray0 = jSONObject1.names();
      assertNotNull(jSONArray0);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.7522801170929885
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.parallelStream();
      Object object0 = new Object();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Short short0 = new Short((short) (-4953));
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(linkedList1);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.125234345326339
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Integer integer0 = new Integer(60);
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      Integer.getInteger(";K|quDtkasUY");
      Integer.getInteger("is", (Integer) null);
      Integer.divideUnsigned(60, 60);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ";K|quDtkasUY";
      stringArray0[1] = "true";
      stringArray0[2] = ";K|quDtkasUY";
      stringArray0[3] = "true";
      JSONObject jSONObject0 = new JSONObject(";K|quDtkasUY", stringArray0);
      JSONObject jSONObject1 = new JSONObject(integer0);
      JSONObject.getNames(jSONObject1);
      Boolean.logicalOr(false, false);
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      Integer integer1 = new Integer(5);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      hashMap3.clone();
      HashMap<Double, Double> hashMap4 = new HashMap<Double, Double>(4, 4);
      hashMap4.keySet();
      hashMap3.clone();
      HashMap<Double, Double> hashMap5 = new HashMap<Double, Double>();
      assertTrue(hashMap5.equals((Object)hashMap0));
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.327013837089565
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Float float0 = new Float(617.243162);
      Float.sum(2659.665F, (-1774.4619F));
      Float.isFinite(2659.665F);
      Float.isFinite(1363.8124F);
      Long.compare(0L, 0L);
      JSONObject jSONObject0 = new JSONObject(float0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("Null pointer", "Null pointer");
      jSONObject0.optString("C.}j", "BZBrHr??u&v");
      jSONObject1.opt("getreplaceFirst");
      Short short0 = new Short((short)2555);
      jSONObject1.put("BZBrHr??u&v", (long) (short)68);
      jSONObject1.isNull("#:");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.accumulate("\"mJm", "val");
      assertEquals(6, jSONObject1.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.4423618618034577
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object object0 = new Object();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      byte byte0 = (byte) (-9);
      Byte byte1 = new Byte((byte) (-9));
      function1.apply(byte1);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Long long0 = new Long((byte) (-9));
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Integer, String> function2 = unaryOperator1.andThen((Function<? super Integer, ? extends String>) function1);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function4 = function1.andThen((Function<? super String, ? extends Integer>) function3);
      function1.compose((Function<? super Integer, ?>) function2);
      JSONObject.valueToString(function4);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Byte, Long> hashMap1 = new HashMap<Byte, Long>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      Double double0 = new Double((short)36);
      Double.sum(0.0, 0.0);
      Double.min(1800.42877, 0.0);
      Double double1 = new Double(0.0);
      Double double2 = new Double((-498.779121702));
      hashMap2.replace(double1, double2, double2);
      hashMap2.clone();
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap4 = new HashMap<Double, Double>();
      hashMap4.clone();
      HashMap<Double, Double> hashMap5 = new HashMap<Double, Double>();
      hashMap0.clone();
      hashMap3.clone();
      HashMap<Double, Double> hashMap6 = new HashMap<Double, Double>();
      Byte byte0 = new Byte((byte)34);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "O^Z\ta";
      stringArray0[1] = "isrotateRight";
      stringArray0[2] = "VT>T~%sMoS*(";
      stringArray0[3] = "ismax";
      stringArray0[4] = "getremainderUnsigned";
      stringArray0[5] = "}=zJF{_-4fXY";
      stringArray0[6] = "toU";
      stringArray0[7] = ",\n";
      stringArray0[8] = "\"WY0:0$%v/tyTy4\"";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      String string0 = jSONObject0.optString(",\n");
      assertEquals("", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.370640645235503
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Integer integer0 = new Integer(60);
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalOr(false, false);
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      Integer.getInteger(";K|quDtkasUY");
      Integer.toUnsignedString(60);
      Integer.getInteger("is", (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "is";
      stringArray0[1] = "`X~B'pE[UY&n";
      stringArray0[2] = ";K|quDtkasUY";
      stringArray0[3] = "^";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Short short0 = new Short((short)35);
      String string0 = jSONObject0.toString((int) (short)35, 118);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.640708983771778
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Float float0 = new Float((-821.927F));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Byte byte0 = new Byte((byte) (-1));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("t|K?7/${]pf");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONArray0, (-1493), (-1493));
      jSONObject0.optLong("jo");
      Short short0 = new Short((byte)5);
      Object object0 = new Object();
      String string0 = "wheel.json.JSONArray";
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("isintern", object1);
      jSONObject1.optInt("isintern");
      JSONTokener jSONTokener0 = new JSONTokener("[]");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of []
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.6809758931039966
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Long.max((-1L), (-1L));
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = new Boolean(" 84IGPa`k");
      Boolean boolean1 = Boolean.TRUE;
      hashMap0.put((Integer) null, boolean1);
      Integer integer0 = new Integer(110);
      Integer integer1 = new Integer((-576));
      Integer integer2 = Integer.valueOf(110);
      Integer.getInteger(";K|uDtkasUY", integer2);
      Integer integer3 = new Integer((-576));
      Integer integer4 = new Integer((-1379));
      Boolean.valueOf(false);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (Object) integer4);
      jSONObject1.optInt("wheel.json.JSONArray");
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONArray");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wheel.json.JSONArray
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 10, 1136);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>(1395, 10);
      Integer.getInteger("K%VmS$iKrXB!@");
      hashMap1.getOrDefault((Object) null, (Double) null);
      Boolean.logicalOr(true, false);
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(10);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      hashMap0.clone();
      HashMap<Double, Double> hashMap4 = null;
      try {
        hashMap4 = new HashMap<Double, Double>(1136, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.7962209059715708
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject.quote("&!IR$O:zs9/K+a-uN\"A");
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      hashMap0.clone();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      hashMap2.clone();
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      HashMap<Boolean, Byte> hashMap4 = new HashMap<Boolean, Byte>();
      hashMap2.clone();
      HashMap<Double, Double> hashMap5 = new HashMap<Double, Double>(32, 1969.1176F);
      hashMap5.keySet();
      hashMap1.clone();
      HashMap<Double, Double> hashMap6 = new HashMap<Double, Double>();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "&!IR$O:zs9/K+a-uN\"A";
      stringArray0[1] = "ke";
      stringArray0[2] = "\"&!IR$O:zs9/K+a-uN\"A\"";
      stringArray0[3] = "\"&!IR$O:zs9/K+a-uN\"A\"";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.4651935718829296
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = Boolean.TRUE;
      Boolean.logicalAnd(true, false);
      Boolean boolean2 = Boolean.FALSE;
      Integer integer0 = new Integer(16);
      Integer integer1 = new Integer((-576));
      Integer.valueOf(79);
      Integer.min(79, 128);
      Integer.getInteger(" 84IGPa`k");
      Integer.divideUnsigned(79, 841);
      Integer.getInteger(";K|uDtkasUY", (Integer) null);
      Integer integer2 = new Integer((-1379));
      Integer integer3 = new Integer((-2089));
      Boolean.valueOf(false);
      Boolean.logicalAnd(true, false);
      Integer integer4 = new Integer(128);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (Map) hashMap0);
      stringArray0[0] = ";K|uDtkasUY";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.7773532220346295
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(1395);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      Long long0 = new Long(1395);
      JSONObject jSONObject0 = new JSONObject(long0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.8645439912733885
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = ",:]}/\\\"[{;=#";
      try { 
        jSONObject0.getBoolean(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.3842619652235086
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[5];
      Long.max(0L, 0L);
      stringArray0[0] = "K%VmS$iKrXB!@";
      stringArray0[1] = "K%VmS$iKrXB!@";
      stringArray0[2] = "K%VmS$iKrXB!@";
      stringArray0[4] = "K%VmS$iKrXB!@";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("K%VmS$iKrXB!@", long0);
      short short0 = (short)8762;
      JSONObject jSONObject2 = jSONObject1.put("s[}l3eEQB5nMP", (int) (short)8762);
      try { 
        jSONObject2.getDouble("K%VmS$iKrXB!@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K%VmS$iKrXB!@\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.527095896912811
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[5];
      Long.max((-1L), (-1L));
      stringArray0[0] = "K%VmS$iKrXB!@";
      stringArray0[1] = "K%VmS$iKrXB!@";
      stringArray0[2] = "K%VmS$iKrXB!@";
      stringArray0[4] = "K%VmS$iKrXB!@";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("K%VmS$iKrXB!@", long0);
      jSONObject1.put("s[}l3eEQB5nMP", (int) (short)8762);
      JSONObject jSONObject2 = jSONObject1.put("Si2HD", (-1L));
      jSONObject2.get("K%VmS$iKrXB!@");
      Short short0 = new Short((short)8762);
      jSONObject1.append("xl", jSONObject0);
      JSONObject jSONObject3 = jSONObject0.put("K%VmS$iKrXB!@", 199.78986);
      assertSame(jSONObject0, jSONObject3);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Short short0 = new Short((short)120);
      Double double0 = new Double(1966.460928700522);
      Short.compare((short)120, (short) (-2351));
      Double.min(0.0, (-2493.0));
      Double double1 = new Double(0.0);
      Double.min((-0.01704772274702743), (-2549.5));
      Double.min(310.1480851169, (-2549.5));
      Double double2 = new Double(310.1480851169);
      Double double3 = new Double(0.0);
      hashMap0.putIfAbsent(double1, double3);
      Double.isFinite(0.0);
      hashMap0.getOrDefault(double2, double0);
      HashMap<Byte, Long> hashMap1 = new HashMap<Byte, Long>();
      hashMap1.clear();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      HashMap<String, Double> hashMap3 = new HashMap<String, Double>();
      HashMap<Double, Double> hashMap4 = new HashMap<Double, Double>();
      hashMap2.keySet();
      HashMap<Double, Double> hashMap5 = new HashMap<Double, Double>();
      HashMap<String, Double> hashMap6 = new HashMap<String, Double>();
      HashMap<Double, Double> hashMap7 = new HashMap<Double, Double>();
      Float.sum(2471, 1.0F);
      JSONObject.numberToString(double3);
      JSONTokener jSONTokener0 = new JSONTokener("v>");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.6576479832508033
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Byte byte0 = new Byte((byte) (-1));
      linkedList0.spliterator();
      Byte.toUnsignedInt((byte)14);
      Byte byte1 = new Byte((byte) (-50));
      Byte.toUnsignedInt((byte)5);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray();
      linkedList1.add(jSONArray0);
      Byte.toUnsignedLong((byte)55);
      jSONObject0.put("G&ut4L?C4", (double) (byte) (-50));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "tr";
      stringArray0[1] = "in";
      stringArray0[2] = "FEt+Cq()7AwAz";
      stringArray0[3] = "vM&(CpvwYi>";
      stringArray0[4] = "k<`I6'fN)jZYz7'z?^i";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      try { 
        jSONObject0.getInt("FEt+Cq()7AwAz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"FEt+Cq()7AwAz\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.527530113152498
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[5];
      Long.max((-1L), (-1L));
      stringArray0[0] = "K%VmS$iKrXB!@";
      stringArray0[1] = "K%VmS$iKrXB!@";
      stringArray0[2] = "K%VmS$iKrXB!@";
      stringArray0[4] = "K%VmS$iKrXB!@";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("K%VmS$iKrXB!@", long0);
      jSONObject1.put("s[}l3eEQB5nMP", (int) (short)8762);
      jSONObject1.put("Si2HD", (-1L));
      Short short0 = new Short((short)8762);
      jSONObject1.append("xl", jSONObject0);
      JSONObject jSONObject2 = jSONObject0.put("K%VmS$iKrXB!@", 199.78986);
      jSONObject2.put("K%VmS$iKrXB!@", true);
      StringWriter stringWriter0 = new StringWriter(42);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "K%VmS$iKrXB!@", 114, (-3796));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Byte, Long> hashMap1 = new HashMap<Byte, Long>();
      Short short0 = new Short((short)46);
      Double double0 = new Double((short)46);
      Double.max((-1194.058516345), (-3604.19794));
      Double.max(Double.NaN, (-3061.0));
      Double double1 = new Double((-1194.058516345));
      Double.max(1.0, (-1.0));
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      hashMap0.clone();
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      Double double2 = new Double(0.0);
      hashMap3.replace(double1, double1);
      HashMap<Double, Double> hashMap4 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap5 = new HashMap<Double, Double>();
      hashMap5.clone();
      hashMap5.clone();
      Long long0 = new Long((short)46);
      String string0 = JSONObject.quote("\b");
      assertEquals("\"\\b\"", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject.quote((String) null);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double((-1.0));
      Double double1 = new Double((-1.0));
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      hashMap2.clone();
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      hashMap2.clone();
      HashMap<Double, Double> hashMap4 = new HashMap<Double, Double>();
      hashMap1.clone();
      HashMap<Double, Double> hashMap5 = new HashMap<Double, Double>();
      assertTrue(hashMap5.equals((Object)hashMap4));
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Integer integer0 = new Integer(60);
      Integer integer1 = new Integer(60);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.5174714039166524
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Integer integer0 = new Integer(17);
      String string0 = JSONObject.valueToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(65);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.159479161922104
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Jonr=r9lke-:";
      JSONObject jSONObject1 = jSONObject0.put("Jonr=r9lke-:", (Object) "Jonr=r9lke-:");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("");
      linkedList0.add((Object) jSONObject1);
      JSONObject jSONObject2 = jSONObject1.put("*", (Collection) linkedList0);
      jSONObject1.optJSONArray("Jonr=r9lke-:");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      jSONObject2.optLong(",\n", (-1171L));
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.3987405541121611
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(3);
      JSONObject.quote("{}");
      JSONTokener jSONTokener0 = new JSONTokener("B6<I(H,e*k4Z|");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of B6<I(H,e*k4Z|
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.392412435442944
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[5];
      Long.max(0L, 0L);
      stringArray0[0] = "K%VmS$iKrXB!@";
      stringArray0[1] = "K%VmS$iKrXB!@";
      stringArray0[2] = "K%VmS$iKrXB!@";
      stringArray0[3] = "K%VmS$iKrXB!@";
      stringArray0[4] = "K%VmS$iKrXB!@";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("K%VmS$iKrXB!@", long0);
      JSONObject jSONObject2 = jSONObject1.put("s[}l3eEEB5nMP", (-38689130));
      jSONObject2.optDouble("true", (double) 0L);
      jSONObject1.put("Si2HD", 0L);
      Short short0 = new Short((short)8762);
      jSONObject1.append("val", jSONObject0);
      jSONObject0.put("K%VmS$iKrXB!@", 199.78986);
      try { 
        jSONObject0.getJSONObject("K%VmS$iKrXB!@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K%VmS$iKrXB!@\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.809260436172578
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Long long0 = new Long(376L);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = new Boolean(" 84IGPa`k");
      Boolean boolean1 = Boolean.TRUE;
      hashMap0.put((Integer) null, boolean1);
      Integer integer0 = new Integer(110);
      Integer integer1 = new Integer((-576));
      Integer integer2 = new Integer((-576));
      Integer.min(1886, 6);
      Integer.getInteger(";K|uDtkasUY", integer2);
      Integer integer3 = new Integer((-576));
      Integer integer4 = new Integer((-1379));
      Boolean.valueOf(false);
      Boolean.logicalAnd(false, true);
      Integer integer5 = new Integer((-2093064));
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " 84IGPa`k";
      stringArray0[1] = ";K|uDtkasUY";
      stringArray0[1] = ";K|uDtkasUY";
      stringArray0[3] = ";K|uDtkasUY";
      stringArray0[4] = ";K|uDtkasUY";
      stringArray0[5] = ";K|uDtkasUY";
      stringArray0[6] = ";K|uDtkasUY";
      stringArray0[7] = ";K|uDtkasUY";
      stringArray0[8] = " 84IGPa`k";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Byte, Long> hashMap1 = new HashMap<Byte, Long>();
      Double double0 = new Double((short)46);
      Byte byte0 = new Byte((byte)33);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "nwlz839'";
      stringArray0[1] = "isvalueOf";
      stringArray0[2] = "nwlz839'";
      stringArray0[3] = "[]";
      stringArray0[4] = "nwlz839'";
      stringArray0[5] = "nwlz839'";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Boolean.logicalOr(false, false);
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(16);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      hashMap3.clone();
      HashMap<Double, Double> hashMap4 = new HashMap<Double, Double>(10, (short)46);
      hashMap0.keySet();
      hashMap0.clone();
      HashMap<Double, Double> hashMap5 = new HashMap<Double, Double>();
      try { 
        jSONObject0.getBoolean("nwlz839'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nwlz839'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.7385727210046005
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      Boolean boolean0 = new Boolean("K%VmS$iKrXB!@");
      Boolean boolean1 = Boolean.TRUE;
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      hashMap0.put((Integer) null, boolean1);
      Integer integer0 = new Integer(110);
      Integer integer1 = new Integer((-576));
      Integer.valueOf((-466));
      Integer.min(2, (-576));
      Integer.getInteger("l7TV /c*t$lRN3", (Integer) null);
      Integer integer2 = new Integer((-2093064));
      Integer integer3 = new Integer((-2093064));
      Boolean.valueOf(false);
      Boolean.logicalAnd(false, false);
      Integer integer4 = new Integer((-576));
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.475644998784904
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Long long0 = new Long((-1L));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offer(long0);
      Object object0 = new Object();
      linkedList0.add((Object) long0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Short short0 = new Short((short) (-867));
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      
      jSONObject0.toString(12, 160);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Float float0 = new Float((double) 8);
      Float.max((-1.0F), 3053.005F);
      JSONObject.valueToString(float0, 48, 48);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Integer, Float> hashMap2 = new HashMap<Integer, Float>();
      Short short0 = new Short((short)128);
      assertEquals((short)128, (short)short0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.47021591933456
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Long long0 = new Long((-1L));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Float float0 = new Float((float) (-1L));
      linkedList0.removeLastOccurrence(float0);
      linkedList0.parallelStream();
      linkedList0.offer(long0);
      Object object0 = new Object();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Short short0 = new Short((short) (-867));
      JSONObject jSONObject0 = new JSONObject(long0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      
      jSONObject0.toString((int) (short) (-867), (int) (short) (-867));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.1957795154427355
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Long long0 = new Long(376L);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = new Boolean(" 84IGPa`k");
      Boolean boolean1 = Boolean.TRUE;
      hashMap0.put((Integer) null, boolean1);
      Integer integer0 = new Integer(110);
      Integer integer1 = new Integer((-576));
      Integer integer2 = Integer.valueOf(110);
      Integer.min(1866, 6);
      Integer.getInteger(";K|uDtkasUY", integer2);
      Integer integer3 = new Integer((-576));
      Integer integer4 = new Integer((-1379));
      Boolean.valueOf(false);
      Boolean.logicalAnd(false, true);
      Integer integer5 = new Integer((-2093064));
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " 84IGPa`k";
      stringArray0[1] = ";K|uDtkasUY";
      jSONObject0.putOpt(" 84IGPa`k", boolean0);
      stringArray0[2] = ";K|uDtkasUY";
      stringArray0[3] = ";K|uDtkasUY";
      stringArray0[4] = ";K|uDtkasUY";
      stringArray0[5] = ";K|uDtkasUY";
      stringArray0[6] = ";K|uDtkasUY";
      stringArray0[7] = ";K|uDtkasUY";
      stringArray0[8] = " 84IGPa`k";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("Substring bounds error");
      jSONTokener0.nextClean();
      Float float0 = new Float(184.91967);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject("Substring bounds error", stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.optJSONObject("] not found.");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.5489540843932357
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.1571704053558287
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "y^:*-pRDa{J\\$~9h";
      jSONObject0.optJSONArray("y^:*-pRDa{J$~9h");
      jSONObject0.optInt("y^:*-pRDa{J$~9h", (-1349));
      jSONObject0.optInt("z_{B2SNq*},jAj");
      jSONObject0.length();
      jSONObject0.optBoolean("z_{B2SNq*},jAj", true);
      String string1 = "t\\N__*\"`?f";
      jSONObject0.has("tN__*\"`?f");
      String string2 = "";
      try { 
        jSONObject0.getJSONArray("000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"000\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.998634901447859
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      hashMap0.clone();
      Short short0 = new Short((short)46);
      Double double0 = new Double((short)46);
      Short.compare((short)46, (short)46);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap1.forEach(biConsumer0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      Short short1 = new Short((short) (-2135));
      Float float0 = new Float((float) (short)46);
      JSONObject jSONObject0 = new JSONObject(float0);
      Short short2 = new Short((short)46);
      int int0 = jSONObject0.optInt(",\n", (-800));
      assertEquals((-800), int0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Float float0 = new Float(617.243162);
      Float.sum(2659.665F, (-1774.4619F));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.parallelStream();
      linkedList0.offer(float0);
      Object object0 = new Object();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Short short0 = new Short((short)47);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.3406676157795956
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Long long0 = new Long((-1L));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.parallelStream();
      linkedList0.offer(long0);
      Object object0 = new Object();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Short short0 = new Short((short) (-867));
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = jSONObject0.toString();
      assertEquals(4, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = jSONObject0.remove("9^gm5H#Fq");
      assertNull(object0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.sum((-1774.4619F), (-1L));
      Float.isFinite(1363.8124F);
      Float.min((-3240.83F), (-524.485F));
      Float.isFinite(1363.8124F);
      Float.isFinite(0.0F);
      Float.sum((-1774.4619F), 0.0F);
      Float.isFinite(0.0F);
      Float.isFinite((-832.11707F));
      Float.max(0.0F, (-1965.225F));
      Float.sum(2170.9104F, 0.0F);
      Float.isFinite(273.60916F);
      Float.max((-2552.57F), 3970.184F);
      Float.min(1363.8124F, 0.0F);
      Float.sum(0.0F, 564.6553F);
      Float.sum(1.0F, 1.0F);
      Short.compare((short)10, (short)10);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.511131016705062
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject.valueToString("Null key.", 615, (-4895));
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Null key.", "\"java.lang.String@0000000001\"");
      jSONObject0.has("\"java.lang.String@0000000001\"");
      JSONObject jSONObject2 = jSONObject0.put("\"java.lang.String@0000000001\"", (Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      jSONObject2.optJSONObject("$m#u,_dI59`");
      jSONObject2.accumulate("\"java.lang.String@0000000001\"", boolean0);
      try { 
        jSONObject1.getInt("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null key.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.509594113652256
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("Substring bounds error");
      jSONTokener0.nextClean();
      jSONTokener0.next();
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Float float0 = new Float(Double.NaN);
      Float float1 = new Float((float) 'u');
      HashMap<Float, String> hashMap1 = new HashMap<Float, String>();
      hashMap1.put(float1, "Substring bounds error");
      hashMap1.put(float0, "Substring bounds error");
      Float.isFinite(1.0F);
      JSONObject jSONObject1 = new JSONObject(float0);
      jSONObject1.optString("g%VFhz<", "getsplit");
      jSONObject1.optInt("getsplit");
      Long long0 = new Long((-1L));
      jSONObject1.accumulate("getsplit", long0);
      JSONObject jSONObject2 = jSONObject1.put("g%VFhz<", 20);
      jSONObject2.optBoolean((String) null, true);
      double double0 = new Double(Double.NaN);
      // Undeclared exception!
      try { 
        Long.divideUnsigned((-1L), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.431116069782998
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject.valueToString(hashMap0, (-4895), 1395);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      HashMap<JSONObject, Double> hashMap2 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      String string0 = "6&9R`)6W!;c7tW6v4";
      JSONObject jSONObject1 = jSONObject0.accumulate("6&9R`)6W!;c7tW6v4", "6&9R`)6W!;c7tW6v4");
      jSONObject1.has("6&9R`)6W!;c7tW6v4");
      jSONObject1.put("] not found.", (Map) hashMap2);
      String string1 = "isformat";
      try { 
        jSONObject0.getInt("isformat");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isformat\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.9925623248862889
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "{";
      stringArray0[1] = "KR";
      stringArray0[2] = "=iqq+0~I@RD12r$^";
      stringArray0[3] = "D4F4h~d! v^6:i8o";
      stringArray0[4] = "4I#<P";
      stringArray0[5] = "";
      StringWriter stringWriter0 = new StringWriter(1009);
      try { 
        jSONObject0.get("/$o. ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/$o. \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Short short0 = new Short((short) (-236));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XHmK|n$4$P$kAWhLUm_";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      try { 
        jSONObject0.getDouble("q{vI5)`hn-.n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"q{vI5)`hn-.n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalOr(false, false);
      Byte.toUnsignedInt((byte)5);
      Byte.toUnsignedInt((byte)5);
      Byte byte0 = new Byte((byte)5);
      Byte.toUnsignedInt((byte)5);
      Byte.toUnsignedInt((byte)4);
      Long long0 = new Long((byte)57);
      Byte.toUnsignedLong((byte)4);
      Float.sum(4, 0.0F);
      JSONObject.numberToString(byte0);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.912893377853286
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object object0 = new Object();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Byte byte0 = new Byte((byte) (-9));
      JSONObject.valueToString(unaryOperator0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Long long0 = new Long((byte) (-9));
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Integer, String> function2 = unaryOperator1.andThen((Function<? super Integer, ? extends String>) function1);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function4 = function1.andThen((Function<? super String, ? extends Integer>) function3);
      function1.compose((Function<? super Integer, ?>) function2);
      JSONObject.valueToString(function4);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject(function0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Short short0 = new Short((byte) (-9));
      assertEquals((short) (-9), (short)short0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.8797390850354352
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = JSONObject.NULL;
      linkedList0.add(object0);
      jSONObject0.optDouble("iscopyValueOf");
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      jSONObject0.optLong(",\n", 0L);
      jSONObject0.optDouble("*ct`|]-ld=");
      jSONObject0.optLong((String) null);
      Short short0 = new Short((short) (-1823));
      jSONObject0.opt((String) null);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Byte, Long> hashMap1 = new HashMap<Byte, Long>();
      Short short0 = new Short((short)46);
      Double double0 = new Double((short)46);
      HashMap<Byte, Long> hashMap2 = new HashMap<Byte, Long>();
      hashMap1.putAll(hashMap2);
      Double.max((-1194.058516345), (-3604.19794));
      Double.max(Double.NaN, 1894.573);
      Double double1 = new Double(Double.NaN);
      Double.max((-2693.27), 1894.573);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap4 = new HashMap<Double, Double>();
      hashMap4.clone();
      HashMap<Double, Double> hashMap5 = new HashMap<Double, Double>();
      Double double2 = new Double(1.0);
      Double double3 = new Double((short)46);
      Double double4 = new Double(84.30263);
      hashMap4.replace(double3, double4);
      HashMap<Double, Double> hashMap6 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap7 = new HashMap<Double, Double>();
      hashMap6.clone();
      hashMap0.clone();
      hashMap5.clone();
      Long long0 = new Long((short)46);
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.1155151397838714
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[5];
      Long.max(0L, 0L);
      stringArray0[0] = "K%VmS$iKrXB!@";
      stringArray0[1] = "K%VmS$iKrXB!@";
      stringArray0[2] = "K%VmS$iKrXB!@";
      Integer.getInteger("0AYbv$/H;2!%G");
      Integer.toUnsignedString(12);
      Integer integer0 = new Integer((-458));
      Integer integer1 = Integer.getInteger("K%VmS$iKrXB!@", integer0);
      Integer.getInteger("K%VmS$iKrXB!@", integer1);
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Short short0 = new Short((short)4);
      int int0 = jSONObject1.optInt("K%VmS$iKrXB!@");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{tM96`";
      stringArray0[1] = "false";
      stringArray0[2] = "null";
      stringArray0[3] = "9o 6o10We9RYE`r{CL";
      stringArray0[4] = "DXF/!fx7 7YedEt?e";
      stringArray0[5] = "L%`L!";
      stringArray0[6] = "v@YWY`=08b";
      stringArray0[7] = "U-op^hY.'Kj%!B";
      stringArray0[8] = "n16z?.ERnY";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      double double0 = jSONObject0.optDouble("false");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.3300185960211162
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Byte, Long> hashMap1 = new HashMap<Byte, Long>();
      Short short0 = new Short((short)46);
      Double double0 = new Double((short)46);
      Double.max(Double.NaN, (-1194.058516345));
      Short.compare((short)46, (short)10);
      Double.min(0.0, 1496.1427326897);
      Double double1 = new Double(0.0);
      HashMap<Boolean, Byte> hashMap2 = new HashMap<Boolean, Byte>();
      hashMap0.clone();
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>((short)46, 36);
      hashMap3.keySet();
      HashMap<Double, Double> hashMap4 = new HashMap<Double, Double>();
      hashMap3.keySet();
      HashMap<Double, Double> hashMap5 = new HashMap<Double, Double>();
      hashMap4.clone();
      HashMap<Double, Double> hashMap6 = new HashMap<Double, Double>();
      hashMap6.clear();
      String string0 = JSONObject.valueToString(hashMap6);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      Byte byte0 = new Byte((byte)50);
      Double double0 = new Double((-1.0));
      Boolean.logicalOr(true, true);
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer((byte)50);
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      hashMap1.clone();
      HashMap<Double, Double> hashMap4 = new HashMap<Double, Double>((byte)50, (byte)50);
      HashMap<Double, Double> hashMap5 = new HashMap<Double, Double>();
      hashMap4.clone();
      HashMap<Double, Double> hashMap6 = new HashMap<Double, Double>();
      try { 
        jSONObject0.getJSONObject("o+g^YJnV;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"o+g^YJnV;\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.0359432497154195
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.sum((-1774.4619F), (-1L));
      Float.isFinite(1363.8124F);
      Float.isFinite(0.0F);
      Float.sum((-1774.4619F), 0.0F);
      Float.isFinite(0.0F);
      Float.max(0.0F, (-1965.225F));
      Float.sum(2182.9827F, 0.0F);
      Float.isFinite(273.60916F);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Short short0 = new Short((short)3319);
      int int0 = jSONObject0.optInt("Unclosed comment", (int) (short)3319);
      assertEquals(1, jSONObject0.length());
      assertEquals(3319, int0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.1807382878069084
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = Boolean.TRUE;
      Boolean.logicalAnd(true, false);
      Boolean boolean2 = Boolean.FALSE;
      String string0 = ";K|uDtk\\asUY";
      Integer integer0 = new Integer(16);
      Integer integer1 = new Integer((-576));
      Integer.valueOf(110);
      Integer.min(110, 128);
      Integer.getInteger(" 84IGPa`k");
      Integer.getInteger(";K|uDtkasUY", (Integer) null);
      Integer integer2 = new Integer((-1379));
      Integer integer3 = new Integer((-2089));
      Boolean.valueOf(false);
      Boolean.logicalAnd(true, true);
      Integer integer4 = new Integer(128);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      try { 
        jSONObject0.getLong(";K|uDtkasUY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";K|uDtkasUY\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Float float0 = new Float(617.243162);
      Float.sum(2659.665F, (-1774.4619F));
      Float.isFinite(2659.665F);
      Float.isFinite(1363.8124F);
      Float.isFinite(0.0F);
      Float.max(0.0F, 2103.87F);
      Float.sum((-1.0F), (-1774.4619F));
      Float.isFinite(0.0F);
      Float.sum(1363.8124F, 1.0F);
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.563413311326071
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Float float0 = new Float(1.0);
      Float.sum(0.0F, 1269.795F);
      JSONObject.numberToString(float0);
      JSONTokener jSONTokener0 = new JSONTokener("java.lang.Float@0000000001");
      JSONTokener jSONTokener1 = new JSONTokener("4g");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 4g
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.3628722294375422
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.sum((-1774.4619F), (-1L));
      Float.isFinite(1363.8124F);
      Float.min((-3240.83F), (-524.485F));
      Float.isFinite(1363.8124F);
      Float.isFinite(0.0F);
      Float.sum((-1774.4619F), 0.0F);
      Float.isFinite(0.0F);
      Float.isFinite((-832.11707F));
      Float.max(0.0F, (-1965.225F));
      Float.sum(2170.9104F, 0.0F);
      Float.isFinite(273.60916F);
      Float.min(1363.8124F, 0.0F);
      Float.sum(0.0F, 564.6553F);
      Float.sum(1.0F, 1.0F);
      JSONObject.numberToString(float0);
      JSONTokener jSONTokener0 = new JSONTokener("mD$e38&UmGbG34");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "[f";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("[f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of [f
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Integer integer0 = new Integer(114);
      Integer integer1 = Integer.valueOf(44);
      Integer.min(1886, 44);
      Integer.getInteger("1%X=JGH#y@K)zq#-Qh|", integer1);
      Integer integer2 = new Integer((-151));
      Integer integer3 = new Integer(32);
      StringWriter stringWriter0 = new StringWriter(44);
      Integer integer4 = new Integer((-210));
      Boolean.valueOf(false);
      Integer integer5 = new Integer(116);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
