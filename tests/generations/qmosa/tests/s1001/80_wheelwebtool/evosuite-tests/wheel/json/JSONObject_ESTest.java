/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 01:46:34 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.245171589411516
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      Boolean boolean0 = new Boolean(false);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      BiFunction<Object, Object, Boolean> biFunction0 = (BiFunction<Object, Object, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      Object object0 = new Object();
      Float float0 = new Float((float) 3);
      Float.max(1.0F, 297.01F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      jSONObject0.put("fo", false);
      boolean boolean1 = jSONObject0.optBoolean("fo");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0725119444516937
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString(32);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(1463);
      StringWriter stringWriter2 = new StringWriter(32);
      JSONTokener jSONTokener0 = new JSONTokener("{\n                                \"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n                                \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      String string0 = "getreplaceAll";
      try { 
        jSONObject1.get("getreplaceAll");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getreplaceAll\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.673992731488805
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      Short short0 = new Short((short) (-796));
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(8u";
      stringArray0[1] = "(8u";
      stringArray0[2] = "(8u";
      JSONObject jSONObject1 = new JSONObject(hashMap0, stringArray0);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      jSONObject0.put("(8u", (Collection) linkedList1);
      jSONObject0.append("(8u", jSONObject1);
      try { 
        jSONObject0.getJSONArray("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3503272597288665
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Short short0 = new Short((short)1815);
      jSONObject0.putOpt("{}", short0);
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      function1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Byte byte0 = new Byte((byte)124);
      JSONObject jSONObject1 = jSONObject0.put(": ", (int) (byte)124);
      jSONObject0.has(": ");
      jSONObject1.put("HqP(#", (Map) hashMap0);
      int int0 = (-360);
      Integer integer0 = new Integer((-360));
      String[] stringArray0 = new String[6];
      stringArray0[0] = ": ";
      stringArray0[1] = "~O7u.@/59\"hWQFX";
      stringArray0[0] = "HqP(#";
      stringArray0[4] = "~O7u.@/59\"hWQFX";
      stringArray0[5] = ": ";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.optDouble("isputOpt", (double) (byte)124);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.addFirst((Byte) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.464816384890813
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "[";
      try { 
        jSONObject0.accumulate(stringArray0[2], "[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      int int0 = 92;
      JSONObject.valueToString(object0, 92, 92);
      byte byte0 = (byte) (-20);
      Byte byte1 = new Byte((byte) (-20));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(byte1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("re", "re");
      jSONObject1.getJSONArray("re");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9062134059500715
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Jonr=r9lke-:";
      JSONObject jSONObject1 = jSONObject0.put("Jonr=r9lke-:", (Object) "Jonr=r9lke-:");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("cj{+))");
      linkedList0.add((Object) jSONObject1);
      JSONObject jSONObject2 = jSONObject1.put("Jonr=r9lke-:", (Collection) linkedList0);
      jSONObject1.optJSONArray("Jonr=r9lke-:");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSONObject2.put("cj{+))", 1.0);
      linkedList0.sort(comparator0);
      jSONObject2.optLong("Jonr=r9lke-:", (-1171L));
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0033121939551717
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = " of ";
      String string1 = "t";
      int int0 = 46;
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("t", 46);
      jSONObject1.getDouble("t");
      JSONObject jSONObject2 = jSONObject0.put(" of ", false);
      jSONObject2.remove("t");
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      jSONObject0.put("", (Map) null);
      try { 
        jSONObject0.getInt("NvDqe];!]0u-o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"NvDqe];!]0u-o\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8636799873410004
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ">B 6IIS'\"S;DX4mH0";
      stringArray0[1] = "&!IR$O:zs9/K+a-uN\"A";
      stringArray0[2] = ">B 6IIS'\"S;DX4mH0";
      stringArray0[4] = "&!IR$O:zs9/K+a-uN\"A";
      stringArray0[5] = ">B 6IIS'\"S;DX4mH0";
      stringArray0[6] = "&!IR$O:zs9/K+a-uN\"A";
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("&!IR$O:zs9/K+a-uN\"A", jSONArray0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("getformat");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6731947481222245
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate(">2bT:@lX.%hto)P", object0);
      try { 
        jSONObject1.getBoolean(">2bT:@lX.%hto)P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">2bT:@lX.%hto)P\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1285962936622183
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.553848341566947
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "[";
      stringArray0[2] = "[";
      String string0 = ">2bT:@lX.%hto)P";
      JSONObject jSONObject1 = jSONObject0.accumulate(">2bT:@lX.%hto)P", "[");
      try { 
        jSONObject1.getBoolean(">2bT:@lX.%hto)P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">2bT:@lX.%hto)P\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.622996276085791
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Short short0 = new Short((short)1815);
      Short.toUnsignedLong((short) (-2003));
      jSONObject0.putOpt("{}", short0);
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      function1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Byte byte0 = new Byte((byte)124);
      JSONObject jSONObject1 = jSONObject0.put(": ", (int) (byte)124);
      jSONObject0.has(": ");
      JSONObject jSONObject2 = jSONObject1.put("HqP(#", (Map) hashMap0);
      Integer integer0 = new Integer((-360));
      String[] stringArray0 = new String[6];
      stringArray0[0] = ": ";
      stringArray0[1] = "~O7u.@/59\"hWQFX";
      stringArray0[0] = "HqP(#";
      stringArray0[4] = "~O7u.@/59\"hWQFX";
      stringArray0[5] = ": ";
      jSONObject1.put("", (-1L));
      jSONObject2.optDouble(": ", (-4842.3));
      jSONObject2.isNull(": ");
      StringWriter stringWriter0 = new StringWriter(62);
      StringWriter stringWriter1 = new StringWriter();
      int int0 = jSONObject0.getInt(": ");
      assertEquals(4, jSONObject0.length());
      assertEquals(124, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.759838145692218
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(87);
      Integer integer1 = new Integer((-1525));
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalOr(false, true);
      BiFunction<Integer, Boolean, Boolean> biFunction0 = (BiFunction<Integer, Boolean, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      Boolean.logicalOr(false, false);
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>(linkedList0);
      String string0 = "]X!";
      JSONObject jSONObject1 = jSONObject0.put("]X!", (Collection) linkedList0);
      jSONObject1.optBoolean("]X!", false);
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9875383330353842
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optDouble("\b");
      jSONObject0.names();
      String string0 = ",";
      int int0 = 79;
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate(",", object1);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      try { 
        jSONObject1.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Float float0 = new Float(3429.2F);
      Float.max(3429.2F, 3429.2F);
      Float.isFinite((-6.724311F));
      Short short0 = new Short((short)9);
      String string0 = "tfNfAeh'7U";
      JSONObject jSONObject0 = new JSONObject();
      String string1 = "false";
      jSONObject0.put("false", (Object) null);
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("y!PrVeAfJ+K5'E)FvZU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of y!PrVeAfJ+K5'E)FvZU
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("`n|4");
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalOr(true, false);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      BiFunction<Object, Boolean, Boolean> biFunction0 = (BiFunction<Object, Boolean, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      Boolean.logicalOr(true, true);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "6";
      String string1 = "r5!+x!<wq";
      Boolean boolean1 = new Boolean((String) null);
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6616978345766547
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("");
      jSONObject0.optDouble("");
      jSONObject0.toString();
      jSONObject0.opt("{}");
      jSONObject0.remove("");
      jSONObject0.optInt("");
      JSONObject.valueToString(jSONObject0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3633980504069996
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "|";
      JSONObject.quote("|");
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.max(0.0F, 0.0F);
      Short short0 = new Short((short)1469);
      Short.toUnsignedLong((short)1469);
      Short.toUnsignedInt((short)1469);
      JSONObject jSONObject1 = jSONObject0.putOpt("|", short0);
      JSONObject.numberToString(float0);
      JSONObject.doubleToString(1469);
      jSONObject1.optBoolean("i`f");
      jSONObject1.toString();
      jSONObject1.optInt("\"|\"", (-4725));
      try { 
        Long.valueOf("{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000008\":java.lang.Short@0000000009,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}", 69);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 69 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1580510496905323
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject((Object) "k05V)'v=M!c1_");
      try { 
        jSONObject0.put("k05V)'v=M!c1_", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2520866155123476
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Short short0 = new Short((short)1815);
      JSONObject jSONObject1 = jSONObject0.putOpt("{}", short0);
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = function1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Byte.valueOf((byte)124);
      JSONObject jSONObject2 = jSONObject0.put(": ", (int) (byte)124);
      jSONObject0.has(": ");
      jSONObject2.put("HqP(#", (Map) hashMap0);
      Integer integer0 = new Integer((-360));
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.put("{}", 2889.0);
      jSONObject2.write(stringWriter0);
      JSONObject jSONObject3 = jSONObject0.append("c`w)g!csJnI|5_", function2);
      assertSame(jSONObject3, jSONObject1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.3229366620465006
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("isreverse", (-1305));
      JSONObject.getNames((Object) "Bexu-\"e{x+qG");
      JSONObject jSONObject1 = new JSONObject((Object) "isreverse");
      String string0 = jSONObject1.toString(32);
      String string1 = JSONObject.quote(string0);
      jSONObject0.put("] is not a Boolean.", false);
      jSONObject0.append(string1, (Object) null);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.821445435207044
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "kno&S>*@`iBrF";
      stringArray0[2] = "kno&S>*@`iBrF";
      JSONObject jSONObject1 = jSONObject0.accumulate(">2bT:@lX.%hto)P", "kno&S>*@`iBrF");
      jSONObject1.optBoolean(">2bT:@lX.%hto)P", true);
      jSONObject1.has("yY20[]hai?.i;aLM");
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("kno&S>*@`iBrF", (Map) hashMap0);
      Integer integer0 = new Integer(2724);
      JSONObject.valueToString(">2bT:@lX.%hto)P", 10, 10);
      jSONObject2.toString(10);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      hashMap2.clone();
      jSONObject2.get(">2bT:@lX.%hto)P");
      Short short0 = new Short((short) (-2301));
      JSONObject jSONObject3 = jSONObject2.accumulate("kno&S>*@`iBrF", short0);
      jSONObject1.getString("kno&S>*@`iBrF");
      jSONObject0.optLong("O<IL1tH__;B*#+m]");
      Short short1 = new Short((short) (-1884));
      JSONObject jSONObject4 = jSONObject2.put("tfNfAeh'7U", (Object) "O<IL1tH__;B*#+m]");
      Object object0 = JSONObject.NULL;
      jSONObject4.putOpt("\f", object0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject3.put("wheel.json.JSONArray@0000000006", 0.0);
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject3.append("wheel.json.JSONArray@0000000006", "kno&S>*@`iBrF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[wheel.json.JSONArray@0000000006] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.30565733829864
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "false";
      stringArray0[2] = "false";
      JSONObject jSONObject1 = jSONObject0.accumulate(">2bT:@lX.%hto)P", "false");
      jSONObject1.optBoolean(">2bT:@lX.%hto)P", true);
      Byte byte0 = new Byte((byte)115);
      JSONObject jSONObject2 = jSONObject1.putOpt(":#H N'rz|K3F6L", "false");
      jSONObject0.optBoolean(">2bT:@lX.%hto)P", false);
      Boolean boolean0 = new Boolean(true);
      jSONObject2.isNull(":#H N'rz|K3F6L");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append((CharSequence) ">2bT:@lX.%hto)P");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) ":#H N'rz|K3F6L", 3015, (int) (byte)115);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2470101629490316
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "<Ks(S";
      JSONObject jSONObject0 = new JSONObject((Object) "<Ks(S");
      JSONObject jSONObject1 = jSONObject0.append("<Ks(S", "<Ks(S");
      jSONObject1.toString();
      jSONObject0.toString(13, 9);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('=');
      Float float0 = new Float(0.0);
      JSONObject.valueToString(float0);
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "java.lang.Float@0000000045", 3159, 59);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.084715235772544
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      Short short0 = new Short((short) (-796));
      String string0 = "tSNfAeh'7U";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("tSNfAeh'7U", (Object) linkedList0);
      Object object1 = new Object();
      Object object2 = new Object();
      JSONObject jSONObject2 = jSONObject0.putOpt("tSNfAeh'7U", object2);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject3 = new JSONObject(linkedList0);
      jSONObject2.write(stringWriter0);
      Short short1 = new Short((short) (-796));
      JSONObject.valueToString(short1);
      try { 
        jSONObject1.append("tSNfAeh'7U", jSONObject2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[tSNfAeh'7U] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6270327303856096
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("`n|4");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function.identity();
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      function1.compose((Function<? super Integer, ?>) function2);
      Integer.max(57, (byte)124);
      Boolean boolean0 = new Boolean(false);
      Boolean boolean1 = new Boolean(false);
      Function.identity();
      Boolean.valueOf("m 2`Q3gIdrE");
      Boolean.compare(true, true);
      Long long0 = new Long((byte)124);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "`n|4";
      stringArray0[1] = ">B 6IIS'\"S;DX4mH0";
      stringArray0[2] = "`n|4";
      stringArray0[3] = "m 2`Q3gIdrE";
      stringArray0[4] = "`n|4";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(function2);
      jSONObject1.optJSONObject("] is not a JONObect.");
      jSONObject1.append("JSON does not allow non-finite numbers.", (Object) null);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.3745023444803017
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Long> function0 = (Function<Object, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends Long>) function0);
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Short short0 = new Short((short)1815);
      jSONObject0.putOpt("{}", short0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      function2.andThen((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      Byte byte0 = new Byte((byte)124);
      JSONObject jSONObject1 = jSONObject0.put(": ", (int) (byte)124);
      jSONObject0.has(": ");
      Object object0 = new Object();
      Object object1 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      Object object2 = JSONObject.NULL;
      JSONObject jSONObject2 = new JSONObject(object2);
      JSONObject.valueToString(short0);
      jSONObject1.names();
      jSONObject1.optLong("rM~[N");
      JSONObject jSONObject3 = new JSONObject();
      JSONObject jSONObject4 = jSONObject1.accumulate("{}", jSONObject3);
      assertSame(jSONObject0, jSONObject4);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.0090027922505898
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "false";
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.append(">2bT:@lX.%hto)P", "false");
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate(">2bT:@lX.%hto)P", "false");
      jSONObject1.optBoolean(">2bT:@lX.%hto)P", true);
      Boolean boolean0 = new Boolean(true);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      try { 
        jSONObject1.put(stringArray0[2], (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      byte byte0 = (byte)124;
      Byte byte1 = Byte.valueOf((byte)124);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put(" of ", "j:'M&cDHMxfp*(A'\"");
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Byte.compare((byte)50, (byte)12);
      unaryOperator1.andThen((Function<? super Integer, ? extends String>) function2);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends Integer>) function3);
      function2.compose((Function<? super Integer, ?>) function1);
      Object object0 = new Object();
      hashMap0.computeIfAbsent(object0, function1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.addFirst(byte1);
      JSONObject jSONObject2 = jSONObject0.putOpt(" of ", (Object) null);
      Boolean boolean0 = new Boolean("j:'M&cDHMxfp*(A'\"");
      try { 
        jSONObject2.put((String) null, (Object) boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Float float0 = new Float(3429.2F);
      Float.max(3429.2F, 3429.2F);
      Double double0 = new Double((-2907.3454839661927));
      Double.min(1253.635462133012, 1253.635462133012);
      Double.isFinite(1.0);
      Double.min((-1.0), 5874.345581575976);
      Double.isFinite((-2907.3454839661927));
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.2240978714293633
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 3, 3);
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("{}", 1041);
      double double0 = jSONObject1.optDouble("{}");
      assertEquals(1041.0, double0, 0.01);
      
      jSONObject0.get("{}");
      long long0 = new Integer(3);
      long long1 = jSONObject1.getLong("{}");
      assertEquals(1041L, long1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6761389064361045
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(87);
      Boolean boolean0 = Boolean.valueOf(true);
      Boolean boolean1 = Boolean.FALSE;
      hashMap0.replace(integer0, boolean0, boolean1);
      Integer.divideUnsigned(87, 87);
      Integer.max(87, 87);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(" aW", (long) 1);
      jSONObject1.optDouble(" aW", 0.0);
      String string0 = "getwait";
      jSONObject1.isNull("getwait");
      StringWriter stringWriter0 = new StringWriter(128);
      try { 
        jSONObject1.getInt("getwait");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getwait\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7414590197990432
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Double double0 = new Double(1596.0);
      JSONTokener jSONTokener0 = new JSONTokener("xtQsLM 0_#5jM?VLE");
      Double.min(0.0, (-2107.68596355));
      Float float0 = new Float(1596.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
      
      jSONObject0.toString(106, 106);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.158423462601367
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "kno&S>*@`iBrF";
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.accumulate("kno&S>*@`iBrF", hashMap0);
      jSONObject0.optBoolean("r5[@~yZ9-=*mG/u:", true);
      jSONObject2.has("kno&S>*@`iBrF");
      String string0 = "%E2fTxm";
      HashMap<Boolean, JSONObject> hashMap1 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject3 = jSONObject2.put("%E2fTxm", (Map) hashMap1);
      Integer integer0 = new Integer(49);
      String string1 = jSONObject3.toString(1129);
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap3 = new HashMap<Double, Double>();
      hashMap3.clone();
      jSONObject0.optString("%E2fTxm", "");
      try { 
        jSONObject3.get(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\njava.lang.String@0000000008\\\": {},\\njava.lang.String@0000000003\\\": {}\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.476247132983033
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(46);
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put(integer0, boolean0);
      Boolean boolean1 = new Boolean(false);
      Boolean.logicalOr(false, false);
      Boolean boolean2 = Boolean.TRUE;
      hashMap0.getOrDefault(boolean0, boolean2);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("gD?i5LD\b;=~!jo`\"");
      JSONObject jSONObject1 = jSONObject0.put("<,Bv+~f{+BQ:FPK0\"7", 18L);
      double double0 = jSONObject1.optDouble("gD?i5LD\b;=~!jo`\"", (-1.9790171127685992));
      assertEquals((-1.9790171127685992), double0, 0.01);
      
      boolean boolean3 = jSONObject1.isNull("<,Bv+~f{+BQ:FPK0\"7");
      assertFalse(boolean3);
      
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      String string0 = jSONObject1.optString("<,Bv+~f{+BQ:FPK0\"7");
      String string1 = jSONObject1.getString("<,Bv+~f{+BQ:FPK0\"7");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7292530729986983
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Short short0 = new Short((short)1815);
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      function1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Byte.valueOf((byte)124);
      JSONObject jSONObject1 = jSONObject0.put(": ", (int) (byte)124);
      jSONObject0.has(": ");
      jSONObject1.put("HqP(#", (Map) hashMap0);
      Integer integer0 = new Integer((-360));
      String[] stringArray0 = new String[6];
      stringArray0[0] = ": ";
      stringArray0[1] = "~O7u.@/59\"hWQFX";
      stringArray0[2] = "HqP(#";
      JSONObject.quote((String) null);
      try { 
        jSONObject0.getLong("HqP(#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"HqP(#\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.611212599421004
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(2155, 2155);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("t", 46);
      jSONObject1.getDouble("t");
      JSONObject jSONObject2 = jSONObject0.put(" of ", false);
      JSONObject.getNames(jSONObject0);
      jSONObject2.put("{}", (double) 46);
      jSONObject0.get(" of ");
      jSONObject1.optInt("{}");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(46);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "t", 2544, 2155);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.844240223877993
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString((-2443));
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.quote("fNIO5oSPTs");
      assertEquals("\"fNIO5oSPTs\"", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.1080131405369578
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "kno&S>*@`iBrF");
      String string0 = jSONObject1.toString(32);
      JSONObject jSONObject2 = new JSONObject(string0);
      assertEquals(3, jSONObject2.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.099292799933921
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "kno&S\\>*@`iBrF";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "kno&S>*@`iBrF";
      stringArray0[2] = "kno&S>*@`iBrF";
      stringArray0[2] = "kno&S>*@`iBrF";
      stringArray0[3] = "Bexu-\"e{x+qG";
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.getNames((Object) "Bexu-\"e{x+qG");
      jSONObject0.put("kno&S>*@`iBrF", (-853.24396909531));
      jSONObject0.get("kno&S>*@`iBrF");
      jSONObject0.optInt("kno&S>*@`iBrF");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-853));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.479122436509394
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(87);
      Integer integer1 = new Integer((-1525));
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalOr(true, false);
      BiFunction<Integer, Boolean, Boolean> biFunction0 = (BiFunction<Integer, Boolean, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      Boolean.logicalOr(true, true);
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("gD$i5LD;;=~!j/`zF\"");
      Boolean boolean1 = new Boolean("r5!+x!<wq");
      hashMap0.put(integer0, boolean1);
      JSONObject jSONObject1 = jSONObject0.put("gD$i5LD;;=~!j/`zF\"", (-1L));
      jSONObject1.optDouble("gD$i5LD;;=~!j/`zF\"", (-1.9790171127685992));
      jSONObject1.isNull("gD$i5LD;;=~!j/`zF\"");
      StringWriter stringWriter0 = new StringWriter(87);
      jSONObject1.getInt("gD$i5LD;;=~!j/`zF\"");
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.2226119448555581
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(3);
      String string0 = "{";
      JSONObject.quote("{");
      JSONTokener jSONTokener0 = new JSONTokener("B6I,e*k4Z|");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "A JSONArray rext must starF with '['";
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6283356526043842
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, JSONArray> hashMap1 = new HashMap<Integer, JSONArray>();
      hashMap0.putAll(hashMap1);
      Short short0 = new Short((short)1815);
      JSONObject jSONObject1 = jSONObject0.putOpt("{}", short0);
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      unaryOperator0.apply("java.lang.float@0000000001");
      function1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Byte.valueOf((byte)124);
      String string0 = "Ofo";
      jSONObject1.put("{}", (Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.9142073530547528
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "<Ks(S");
      JSONObject jSONObject1 = jSONObject0.append("<Ks(S", "<Ks(S");
      jSONObject1.optBoolean("getcompareTo");
      jSONObject1.putOpt("Y:_ttOK?.I\"a)*XW)~", "Y:_ttOK?.I\"a)*XW)~");
      try { 
        jSONObject0.getJSONObject("<Ks(S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<Ks(S\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{+IWHC#hB\"u`SV:>K9");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 18 of {+IWHC#hB\"u`SV:>K9
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5607104090414068
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Long> function0 = (Function<Object, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends Long>) function0);
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      byte byte0 = (byte)88;
      Byte byte1 = new Byte((byte)88);
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      hashMap2.put(jSONObject1, "H$(D&qY##B");
      Function.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Integer, ? extends String>) function1);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      Function<String, Integer> function4 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.andThen((Function<? super String, ? extends Integer>) function4);
      function3.compose((Function<? super Integer, ?>) unaryOperator1);
      Object object0 = new Object();
      Set<Object> set0 = hashMap2.keySet();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap2);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.addFirst(byte1);
      JSONArray jSONArray0 = new JSONArray((Collection) set0);
      jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "Bqsz3^@p", 45, (int) (short)1815);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "{+IWHC#hB\"u`SV:>K9";
      JSONTokener jSONTokener0 = new JSONTokener("{+IWHC#hB\"u`SV:>K9");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 18 of {+IWHC#hB\"u`SV:>K9
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.9164532914985546
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(3542L);
      JSONObject jSONObject1 = jSONObject0.accumulate(">2bT:@lX.%hto)P", long0);
      Byte byte0 = new Byte((byte)27);
      jSONObject0.putOpt("X6", jSONObject1);
      jSONObject0.optBoolean(">2bT:@lX.%hto)P", true);
      Boolean boolean0 = new Boolean(true);
      jSONObject0.isNull("&hjmnlL&Y");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "X6");
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "G~`8LlCK$h/7eoR~.");
      // Undeclared exception!
      try { 
        stringWriter3.append((CharSequence) "&hjmnlL&Y", 114, (-224));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.8683388399445078
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("`n|4");
      jSONTokener0.nextClean();
      jSONTokener0.next();
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Float float0 = new Float(Double.NaN);
      Float float1 = new Float(1.0F);
      hashMap0.put(float1, "-7kz");
      hashMap0.put(float0, "`n|4");
      JSONObject jSONObject0 = new JSONObject((Object) "gettoUnsignedLong");
      jSONObject0.optString("tgd,bn2-zug", "tgd,bn2-zug");
      Object object0 = JSONObject.NULL;
      long long0 = jSONObject0.optLong("get");
      assertEquals(0L, long0);
      
      Short short0 = new Short((short) (-1823));
      JSONObject jSONObject1 = jSONObject0.put("<BnIXx~", (Object) null);
      String string0 = jSONObject1.optString("T");
      assertEquals(3, jSONObject1.length());
      assertEquals("", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.1458417525947544
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = jSONObject0.accumulate(">2bT:@lX.%hto)P", stringArray0[0]);
      Byte byte0 = new Byte((byte)27);
      jSONObject1.putOpt(stringArray0[2], byte0);
      StringWriter stringWriter0 = new StringWriter(537);
      jSONObject1.isNull("lYYy`/*t`");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.append((CharSequence) ">2bT:@lX.%hto)P");
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) stringArray0[0], 15, 761);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.0528274368488786
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = (-4895);
      JSONObject.valueToString("Null key.", 612, (-4895));
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Null key.", "\"java.lang.String@0000000001\"");
      jSONObject1.optBoolean("\"java.lang.String@0000000001\"", true);
      jSONObject0.has("\"java.lang.String@0000000001\"");
      JSONObject jSONObject2 = jSONObject0.put("\"java.lang.String@0000000001\"", (Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject3 = new JSONObject(object0);
      jSONObject2.optString("tgd,bn2-*zug", "");
      try { 
        jSONObject1.get("tgd,bn2-*zug");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"tgd,bn2-*zug\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Byte byte0 = new Byte((byte)124);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator.identity();
      Byte.compare((byte)124, (byte)12);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends Integer>) function3);
      function2.compose((Function<? super Integer, ?>) function1);
      Object object0 = new Object();
      hashMap0.computeIfAbsent(object0, function1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.addFirst(byte0);
      jSONObject0.putOpt(" of ", (Object) null);
      Boolean boolean0 = new Boolean("j:'M&cDHMxfp*(A'\"");
      try { 
        jSONObject1.put((String) null, (-1509));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Float float0 = new Float((-806.4884F));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "7f9IjPd7]]";
      stringArray0[1] = "JSONObject[";
      stringArray0[2] = "is";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      BiFunction<Float, Object, Double> biFunction0 = (BiFunction<Float, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.132192240087886
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 3, 3);
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("{}", 1041);
      jSONObject0.get("{}");
      long long0 = jSONObject0.optLong("{}", 1574L);
      assertEquals(1041L, long0);
      
      long long1 = jSONObject1.getLong("{}");
      assertEquals(1041L, long1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.0033121939551717
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = " of ";
      String string1 = "t";
      int int0 = 46;
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("t", 46);
      jSONObject1.getDouble("t");
      jSONObject0.put(" of ", false);
      UnaryOperator.identity();
      jSONObject1.optLong("t");
      UnaryOperator.identity();
      Function.identity();
      try { 
        jSONObject0.getInt("xvDqe];]j-o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"xvDqe];]j-o\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.8110728100022484
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Jonr=r9lke-:";
      JSONObject jSONObject1 = jSONObject0.put("Jonr=r9lke-:", (Object) "Jonr=r9lke-:");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("cj{+))");
      linkedList0.add((Object) jSONObject1);
      JSONObject jSONObject2 = jSONObject1.put("*", (Collection) linkedList0);
      jSONObject1.optJSONArray("Jonr=r9lke-:");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      jSONObject2.optLong("*", (-1171L));
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.5532370029937144
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      int int0 = 87;
      Integer integer0 = new Integer(87);
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalOr(false, false);
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "gD?i5LD\\b;=~!jo`\"";
      jSONObject0.remove("gD?i5LD\b;=~!jo`\"");
      Short short0 = new Short((short)1826);
      JSONObject jSONObject1 = jSONObject0.append("gD?i5LD\b;=~!jo`\"", short0);
      JSONObject.getNames((Object) null);
      String string1 = "<,Bv+~f{+BQ:FPK0\"7";
      jSONObject0.optDouble("gD?i5LD\b;=~!jo`\"", (-1.0));
      jSONObject1.isNull("<,Bv+~f{+BQ:FPK0\"7");
      String string2 = "Missing value";
      jSONObject0.optDouble("Missing value");
      jSONObject0.remove("Missing value");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.2677946372884996
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "kno&S>*@`iBrF");
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject2 = new JSONObject((Object) "kno&S>*@`iBrF");
      JSONObject.valueToString(jSONObject1);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6759010305740114
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = JSONObject.valueToString(boolean0);
      Integer integer0 = new Integer(1033);
      Object object0 = new Object();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Short short0 = new Short((short)113);
      Short short1 = new Short((short)113);
      String string1 = JSONObject.valueToString(object0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.8660598702493092
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Byte.valueOf((byte)124);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put(" of ", "j:'M&cDHMxfp*(A'\"");
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Integer, ? extends String>) function2);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends Integer>) function3);
      function2.compose((Function<? super Integer, ?>) function1);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      hashMap1.clone();
      jSONObject0.optString((String) null, (String) null);
      String string0 = null;
      String string1 = "] is not a JSONObject.";
      try { 
        jSONObject0.get("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "`nit";
      JSONTokener jSONTokener0 = new JSONTokener("`nit");
      jSONTokener0.syntaxError("`nit");
      jSONTokener0.nextTo('r');
      jSONTokener0.skipTo('[');
      jSONTokener0.back();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("", "V`w*uUOJ.e");
      String string1 = "ishashCode";
      try { 
        jSONObject0.get("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ishashCode\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.435925266737808
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("kno&S>*@`iBrF", (long) 32);
      JSONObject jSONObject1 = jSONObject0.put("kno&S>*@`iBrF", 0.0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.8840633284714166
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "[";
      stringArray0[2] = "[";
      JSONObject jSONObject1 = jSONObject0.accumulate(">2bT:@lX.%hto)P", "[");
      byte byte0 = (byte)27;
      jSONObject1.optBoolean(">2bT:@lX.%hto)P", false);
      Boolean boolean0 = new Boolean(false);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.optString("[");
      jSONObject1.put("[", (-1320));
      StringWriter stringWriter1 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) stringBuffer0, (-756), (-1201));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -756
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.479122436509394
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(87);
      Integer integer1 = new Integer((-1525));
      Boolean boolean0 = new Boolean(true);
      boolean boolean1 = true;
      Boolean.logicalOr(true, true);
      Boolean boolean2 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("gD$i5LD;;=~!j/`zF\"");
      Boolean boolean3 = new Boolean("r5!+x!<wq");
      hashMap0.put(integer0, boolean3);
      JSONObject jSONObject1 = jSONObject0.put("gD$i5LD;;=~!j/`zF\"", 0L);
      jSONObject1.optDouble("gD$i5LD;;=~!j/`zF\"", (-9.33563434900296));
      jSONObject1.isNull("gD$i5LD;;=~!j/`zF\"");
      StringWriter stringWriter0 = new StringWriter(87);
      jSONObject1.getInt("gD$i5LD;;=~!j/`zF\"");
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.quote("&!IR$O:zs9/K+a-uN\"A");
      assertEquals("\"&!IR$O:zs9/K+a-uN\\\"A\"", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.4118191793225021
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "kno&S\\>*@`iBrF";
      boolean boolean0 = false;
      jSONObject0.put("kno&S>*@`iBrF", false);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      try { 
        jSONObject0.getInt("kno&S>*@`iBrF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"kno&S>*@`iBrF\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Byte byte0 = Byte.valueOf((byte)124);
      hashMap0.put(byte0, "JSON does not allow non-finite numbers.");
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Integer, String> function2 = unaryOperator1.andThen((Function<? super Integer, ? extends String>) function1);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      function1.andThen((Function<? super String, ? extends Integer>) function3);
      function1.compose((Function<? super Integer, ?>) function2);
      hashMap0.computeIfAbsent((Object) null, function1);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("isoptLong", 125);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.2275294114572126
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 3, 3);
      String string0 = "B6<I(H,e*k4Z|";
      JSONTokener jSONTokener0 = new JSONTokener("Missing value");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Missing value
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.6837389058487535
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("`nit");
      jSONTokener0.syntaxError("`nit");
      jSONTokener0.nextTo('r');
      jSONTokener0.skipTo('[');
      jSONTokener0.back();
      jSONTokener0.nextValue();
      jSONTokener0.nextTo("t");
      jSONTokener0.skipTo('o');
      jSONTokener0.next();
      Boolean boolean0 = new Boolean("`nit");
      jSONTokener0.nextClean();
      Object object0 = new Object();
      JSONObject.doubleToString(1413.6351);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Double double0 = new Double(1596.0);
      Double.min((-1965.019900559), 1596.0);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean boolean1 = new Boolean(true);
      Boolean.valueOf(true);
      Boolean.compare(true, false);
      Function.identity();
      Long long0 = new Long(4L);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(boolean0);
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      jSONObject0.put("m 2`Q3gIdrE", (Map) hashMap0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.7439463313886603
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      int int0 = 0;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = "";
      jSONObject0.optLong("");
      Object object0 = JSONObject.NULL;
      linkedList0.add(object0);
      JSONObject jSONObject2 = jSONObject1.put("istoLowerCase", (Collection) linkedList0);
      String string1 = null;
      jSONObject1.optJSONArray((String) null);
      String string2 = ",\n";
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      jSONObject0.optLong(",\n", 0L);
      try { 
        jSONObject2.getDouble("K%VmS$iKrXB!@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K%VmS$iKrXB!@\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.4118191793225021
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "kno&S\\>*@`iBrF";
      boolean boolean0 = false;
      jSONObject0.put("kno&S>*@`iBrF", true);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      try { 
        jSONObject0.getInt("kno&S>*@`iBrF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"kno&S>*@`iBrF\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.4609855560478324
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Byte.toUnsignedInt((byte)5);
      Byte.toUnsignedInt((byte)5);
      Byte byte0 = new Byte((byte)5);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Byte.toUnsignedLong((byte)94);
      jSONObject0.put("Jonr=r9lke0:", 0.0);
      jSONObject0.get("Jonr=r9lke0:");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.1859671061042056
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      String string0 = "{}";
      Short short0 = new Short((short)1813);
      jSONObject0.putOpt("{}", short0);
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      function1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Byte byte0 = new Byte((byte)124);
      jSONObject0.put(": ", (int) (byte)124);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("`gM^|!6^|F*-#", ": ");
      StringWriter stringWriter0 = new StringWriter();
      Long long0 = new Long((short)1813);
      JSONObject jSONObject2 = new JSONObject(long0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>(linkedList0);
      jSONObject1.put("pus", (Collection) linkedList1);
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject1.append(": ", "~O7u.@/59\"hWQFX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[: ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.5476312462189814
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double double0 = new Double(1596.0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ig'77`sIPJZ6ZRW";
      stringArray0[1] = "*Af/xkLN?vr)VKk}^";
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>(linkedList0);
      JSONObject jSONObject0 = new JSONObject("*Af/xkLN?vr)VKk}^", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("xH91\"iQQ]gv8ucxq", (Collection) linkedList1);
      byte byte0 = (byte)110;
      Byte byte1 = new Byte((byte)110);
      linkedList0.add(byte1);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "*Af/xkLN?vr)VKk}^");
      StringWriter stringWriter2 = (StringWriter)jSONObject1.write(stringWriter1);
      stringWriter2.append((CharSequence) "*Af/xkLN?vr)VKk}^");
      jSONObject0.write(stringWriter2);
      Byte.toUnsignedInt((byte)104);
      stringWriter0.append('k');
      stringWriter0.getBuffer();
      StringWriter stringWriter3 = new StringWriter();
      Boolean.logicalXor(true, true);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1839637727244874
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(87);
      Integer.divideUnsigned((-1525), 87);
      Integer.max(44, 44);
      Boolean boolean0 = new Boolean(false);
      Boolean boolean1 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean1);
      jSONObject0.put("k05V)'v=M!c1_", 900.7035555);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.getInt("m&l6}`m%NCC3fF/2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"m&l6}`m%NCC3fF/2\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.2479714917220206
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = true;
      jSONObject0.put("^HhZ8#/BZ6Er81", true);
      Boolean.logicalAnd(false, true);
      Boolean.logicalOr(false, false);
      try { 
        jSONObject0.getJSONObject("`^K;/\")JBmG/*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`^K;/\\\")JBmG/*\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("getsplit", (Collection) linkedList0);
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject((Object) "kno&S>*@`iBrF");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      JSONObject.testValidity(byte0);
      Long long0 = new Long((byte) (-1));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.6890092384766586
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Byte.valueOf((byte) (-1));
      Boolean.valueOf("HfE`x=\"Y'Lyls");
      Boolean.compare(true, true);
      Function.identity();
      Long long0 = new Long(392L);
      Double.min(392L, 392L);
      Double.isFinite(392.0);
      Float float0 = new Float((float) (byte) (-1));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Double.isFinite(0.0);
      Double.min(0.0, 0.0);
      Double.max((-931.644), (-931.644));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("cSCyb{ARn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of cSCyb{ARn
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.4270610433807247
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "`n|4";
      JSONTokener jSONTokener0 = new JSONTokener("`n|4");
      UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("`n|4", 0.0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      StringWriter stringWriter2 = stringWriter1.append('.');
      Float float0 = new Float(274.001);
      JSONObject.valueToString((Object) null);
      int int0 = 59;
      // Undeclared exception!
      try { 
        stringWriter2.append((CharSequence) "null", 3159, 59);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.549477590256368
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double.min(3386.82, 0.0);
      Double.isFinite(3386.82);
      Double double0 = new Double(0.0);
      Double.sum(3386.82, (-647.945002797934));
      hashMap0.put(double0, double0);
      Double.max((-508.0), 0.0);
      Double.min((-508.0), Double.NaN);
      Double.isFinite(0.0);
      Long long0 = new Long(0L);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = new Double(1596.0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ig'77`sIPJZ6ZRW";
      JSONTokener jSONTokener0 = new JSONTokener("ig'77`sIPJZ6ZRW");
      jSONTokener0.skipTo('N');
      jSONTokener0.back();
      Byte.valueOf((byte)93);
      JSONObject.quote("A JSONObject text must begin with '{'");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "&!IR$O:zs9/K+a-uN\"A";
      stringArray0[1] = "&!IR$O:zs9/K+a-uN\"A";
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Short short0 = new Short((short)748);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "9$4y4cxK-d-3'&- ";
      stringArray0[1] = "<S8-!mS'IqR\"<GPm";
      stringArray0[2] = "is";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.put("?V%~i", 0L);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte byte0 = (byte) (-1);
      Byte byte1 = Byte.valueOf((byte) (-1));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "j+CkR<#";
      stringArray0[1] = "j+CkR<#";
      stringArray0[2] = "j+CkR<#";
      JSONObject jSONObject0 = new JSONObject(byte1, stringArray0);
      jSONObject0.isNull("j+CkR<#");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.8935128667510004
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(87, 1210);
      JSONObject jSONObject1 = new JSONObject((Object) "kno&S>*@`iBrF");
      // Undeclared exception!
      jSONObject1.toString(430, 430);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(32);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(137);
      jSONObject0.toString(32, (-1327));
      String string0 = jSONObject0.toString(3209, 1965);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float((-2601.2974F));
      hashMap0.put("true", float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("getoptLong", hashMap0);
      jSONObject1.put("true", (Object) "getoptLong");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.003336901443042
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      Short short0 = new Short((short) (-796));
      JSONObject jSONObject0 = new JSONObject();
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long((-2237L));
      Integer integer0 = new Integer(2);
      jSONObject0.putOpt("istoHexString", integer0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "istoHexString";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.valueToString(jSONObject1, (-1158), 2);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.0851886129676505
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Float float0 = new Float(560.09F);
      String string0 = JSONObject.valueToString(float0, 59, 59);
      assertNotNull(string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.7913563426828252
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(128);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.5571130980576455
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Float float0 = new Float((-904.2097248862));
      String[] stringArray0 = new String[8];
      String string0 = ",G><j/,u\\u";
      stringArray0[0] = string0;
      stringArray0[1] = "[]";
      stringArray0[2] = "5F-HU[^`Td6#?9";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = "g-[TrDqB!.@@OfB";
      stringArray0[5] = "getvalueOf";
      stringArray0[6] = "0";
      stringArray0[7] = "Cj";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.putOpt("getvalueOf", "] is not a number.");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.4598012994628564
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalAnd(true, true);
      boolean boolean1 = false;
      Boolean.logicalOr(false, false);
      JSONObject jSONObject1 = new JSONObject(boolean0);
      jSONObject0.accumulate("`^K;/\")JBmG/*", boolean0);
      jSONObject0.length();
      Integer integer0 = new Integer(1033);
      Boolean.getBoolean("Unclosed comment");
      int int0 = 1866;
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "`^K;/\")JBmG/*", 1033, (-189));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.6669743269244564
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "y^:*-pRDa{J\\$~9h";
      jSONObject0.optJSONArray("y^:*-pRDa{J$~9h");
      jSONObject0.optInt("y^:*-pRDa{J$~9h", (-1349));
      jSONObject0.optInt("z_{B2SNq*},jAj");
      jSONObject0.length();
      jSONObject0.optBoolean("z_{B2SNq*},jAj", true);
      String string1 = "t\\N__*\"`?f";
      jSONObject0.has("tN__*\"`?f");
      String string2 = "";
      try { 
        jSONObject0.getJSONArray("000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"000\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "] is not a Boolean.";
      String string0 = "\\u";
      stringArray0[5] = string0;
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.8000120331977751
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject.valueToString("Null key.", (-4895), (-4895));
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONTokener jSONTokener0 = new JSONTokener("gettoUpperCase");
      jSONTokener0.nextClean();
      Object object0 = new Object();
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      Short short0 = new Short((short) (-796));
      JSONObject jSONObject0 = new JSONObject();
      Object object1 = new Object();
      Object object2 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.2161022480912633
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      JSONObject.valueToString(jSONObject0);
      jSONObject0.opt("wheel.json.JSONObject@0000000001");
      jSONObject0.remove("");
      jSONObject0.optInt("");
      JSONObject.valueToString(jSONObject0);
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONObject@0000000001");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wheel.json.JSONObject@0000000001
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.0096327272051435
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "<Ks(S";
      JSONObject jSONObject0 = new JSONObject((Object) "<Ks(S");
      JSONObject jSONObject1 = jSONObject0.append("<Ks(S", "<Ks(S");
      jSONObject1.toString();
      try { 
        jSONObject0.getJSONObject("<Ks(S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<Ks(S\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.543082936399969
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Long> function0 = (Function<Object, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends Long>) function0);
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(121);
      Double double0 = new Double(121);
      Double.sum(0.0, 0.0);
      hashMap0.put(integer0, double0);
      Short short0 = new Short((short)1815);
      JSONObject jSONObject1 = jSONObject0.putOpt("{}", short0);
      Boolean boolean0 = new Boolean(": ");
      String[] stringArray0 = new String[6];
      stringArray0[0] = ": ";
      stringArray0[1] = "~O7u.@/59\"hWQFX";
      stringArray0[0] = "HqP(#";
      stringArray0[4] = "~O7u.@/59\"hWQFX";
      stringArray0[5] = ": ";
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      jSONObject1.opt((String) null);
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.valueToString((Object) null, (-360), 121);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = jSONObject0.remove("9^gm5H#Fq");
      assertNull(object0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Short short0 = new Short((short)1815);
      jSONObject0.putOpt("{}", short0);
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      function1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      jSONObject0.has(": ");
      Integer integer0 = new Integer((-360));
      String[] stringArray0 = new String[6];
      stringArray0[0] = ": ";
      stringArray0[1] = "~O7u.@/59\"hWQFX";
      stringArray0[2] = "HqP(I#";
      stringArray0[4] = "~O7u.@/59\"hWQFX";
      stringArray0[5] = ": ";
      jSONObject0.put("HqP(I#", (long) 3829);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject((-886));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-886] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.5171534199663776
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Double double0 = new Double(0.0);
      byte byte0 = (byte)27;
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.isFinite(0.0);
      jSONObject0.optBoolean("tDW_=P3\"", true);
      Boolean boolean0 = new Boolean(true);
      StringWriter stringWriter0 = new StringWriter((byte)27);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.getBuffer();
      int int0 = 123;
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "tDW_=P3\"", 123, 92);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Byte.valueOf((byte)110);
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      String string0 = JSONObject.quote("&!IRO:zsn/K+a-uN\"A");
      assertEquals("\"&!IRO:zsn/K+a-uN\\\"A\"", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.6488470716724797
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = jSONObject0.accumulate(">2bT:@lX.%hto)P", stringArray0[0]);
      byte byte0 = (byte)27;
      jSONObject1.optBoolean(">2bT:@lX.%hto)P", false);
      Boolean boolean0 = new Boolean(false);
      int int0 = (-756);
      try { 
        jSONObject0.getString("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text must start with '['\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unclosed comment\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.4004795248110482
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Byte.toUnsignedInt((byte)5);
      Byte.toUnsignedInt((byte)5);
      Byte byte0 = new Byte((byte)5);
      JSONObject jSONObject0 = new JSONObject(byte0);
      try { 
        jSONObject0.get("Jonr=r9lke0:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Jonr=r9lke0:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.4601860250149765
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double.min(3386.82, 0.0);
      Double.isFinite(3386.82);
      Double.max((-508.0), 0.0);
      Double.min((-508.0), Double.NaN);
      Double.isFinite(0.0);
      Long long0 = new Long(0L);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      
      String string1 = JSONObject.valueToString(hashMap0, (-665), (-30733247));
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      Integer.divideUnsigned((-1567), (-1567));
      Integer.max(621, 1584);
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      HashMap<Integer, Boolean> hashMap2 = new HashMap<Integer, Boolean>();
      HashMap<Integer, Boolean> hashMap3 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap1);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Double double0 = new Double((-2344.2456298464));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "] is not a Boolean.";
      stringArray0[1] = ".";
      stringArray0[2] = "issubstring";
      stringArray0[3] = "Jl4NO~_m@*uAB|";
      stringArray0[4] = "rOp[2";
      stringArray0[5] = "ZW+`xIp},B8~";
      stringArray0[6] = "rOp[2";
      stringArray0[7] = "getcopyValueOf";
      stringArray0[8] = "istoLowerCase";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      try { 
        jSONObject0.getDouble("|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Double double0 = new Double((-2344.2456298464));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "] is not a Boolean.";
      stringArray0[1] = ".";
      stringArray0[2] = "issubstring";
      stringArray0[3] = "Jl4NO~_m@*uAB|";
      stringArray0[4] = "rOp[2";
      stringArray0[5] = "ZW+`xIp},B8~";
      stringArray0[6] = "/`";
      stringArray0[7] = "getcopyValueOf";
      stringArray0[8] = "istoLowerCase";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      try { 
        jSONObject0.getDouble("|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(87);
      Integer.max((-1525), 96);
      Integer integer1 = new Integer(33);
      Integer.getInteger((String) null, integer1);
      Double.max(1.0, 96);
      Double.min(704.12756532, 87);
      Double.isFinite(0.0);
      Long long0 = new Long(96);
      String string0 = JSONObject.numberToString(integer1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.isFinite(0.0);
      Double.min(0.0, 0.0);
      Double.max((-931.644), (-931.644));
      Double.isFinite(0.0);
      Double.max(0.0, (-1.0));
      Double.isFinite((-931.644));
      Double.min(0.0, 4657.5);
      Double.isFinite((-1.0));
      Double.max((-3122.314079), 0.0);
      Double.max(0.0, 0.0);
      Double.min(0.0, (-1.0));
      Double.isFinite(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      String[] stringArray0 = new String[5];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.7439463313886603
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      int int0 = 0;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = "";
      jSONObject0.optLong("");
      Object object0 = JSONObject.NULL;
      linkedList0.add(object0);
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) linkedList0);
      String string1 = null;
      jSONObject1.optJSONArray((String) null);
      String string2 = ",\n";
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      jSONObject0.optLong(",\n", 0L);
      try { 
        jSONObject2.getDouble("K%VmS$iKrXB!@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K%VmS$iKrXB!@\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.isFinite(0.0);
      Double.min(0.0, 0.0);
      Double.max((-931.644), (-931.644));
      Double.isFinite(0.0);
      Double.max(0.0, (-2961.8169863168));
      Double.max(0.0, (-1.0));
      Double.isFinite((-931.644));
      Double.min((-931.644), 2330.0);
      Double.min(0.0, 4657.5);
      Double.isFinite((-1.0));
      Double.max((-3122.314079), 0.0);
      String string0 = JSONObject.quote("rem");
      assertEquals("\"rem\"", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("getnotifyAll", (-697L));
      assertEquals((-697L), long0);
      
      JSONObject jSONObject1 = new JSONObject((Object) "kno&S>*@`iBrF");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.6283356526043842
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "[";
      stringArray0[2] = "[";
      jSONObject0.optLong("[");
      jSONObject0.accumulate(">2bT:@lX.%hto)P", "[");
      byte byte0 = (byte)27;
      int int0 = (-756);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-756));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.8129632135754097
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "<Ks(S");
      JSONObject jSONObject1 = jSONObject0.append("<Ks(S", "<Ks(S");
      jSONObject1.optInt("Xt~ocC][&2S");
      try { 
        jSONObject0.getJSONObject("<Ks(S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<Ks(S\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.8891591637540217
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "quo";
      stringArray0[1] = "' and instead saw '";
      stringArray0[2] = "getquote";
      stringArray0[3] = "~";
      stringArray0[4] = "izh>/zgb5]X#1upj)";
      stringArray0[5] = ">";
      stringArray0[6] = "java.lang.Float@0000000001.";
      stringArray0[7] = "isoptJSONArray";
      stringArray0[8] = "ac";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      double double0 = jSONObject1.optDouble("!J?dR=.'WXK[>*r");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.4085788142038693
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      JSONObject jSONObject0 = new JSONObject(unaryOperator0);
      jSONObject0.names();
      Double.sum((-496.35687), 0.0);
      StringWriter stringWriter0 = new StringWriter(9);
      StringWriter stringWriter1 = new StringWriter(3);
      assertFalse(stringWriter1.equals((Object)stringWriter0));
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONObject("]e%}.zy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]e%}.zy\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("spl", 92);
      assertEquals(92, int0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Double double0 = new Double((-2344.2456298464));
      String[] stringArray0 = new String[9];
      stringArray0[1] = ".";
      stringArray0[2] = "issubstring";
      stringArray0[3] = "Jl4NO~_m@*uAB|";
      stringArray0[5] = "ZW+`xIp},B8~";
      stringArray0[6] = "/`";
      stringArray0[7] = "g`tczyV`leOf";
      stringArray0[8] = "ZW+`xIp},B8~";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      try { 
        jSONObject0.getDouble("|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("s8|%");
      jSONTokener0.skipPast("E|`:e?|W");
      jSONTokener0.nextClean();
      jSONTokener0.next();
      Object object0 = new Object();
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONArray");
      jSONTokener0.syntaxError("wheel.json.JSONArray");
      JSONObject.quote("wheel.json.JSONArray");
      jSONTokener0.skipTo('l');
      JSONTokener jSONTokener1 = new JSONTokener("x,");
      jSONTokener1.back();
      JSONObject.quote("q[o%V_V%f+F=Ux7*l6");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 5 of wheel.json.JSONArray
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("`n|4");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function.identity();
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      function2.compose((Function<? super Long, ?>) function1);
      function1.compose((Function<? super Integer, ?>) function2);
      Integer.max(57, (byte)124);
      Boolean.valueOf(false);
      Boolean boolean0 = new Boolean(false);
      Boolean.valueOf("m 2`Q3gIdrE");
      jSONTokener0.back();
      JSONObject.quote("");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("`n|4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of `n|4
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("`n|4");
      jSONTokener0.nextValue();
      jSONTokener0.skipPast(".");
      jSONTokener0.nextClean();
      jSONTokener0.next();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`n|4";
      stringArray0[1] = "true";
      stringArray0[2] = ".";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.2141368187614339
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("`nit");
      jSONTokener0.back();
      jSONTokener0.syntaxError("`nit");
      jSONTokener0.nextTo('r');
      jSONTokener0.skipTo('[');
      jSONTokener0.back();
      jSONTokener0.next();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "`nit";
      stringArray0[1] = "`nit";
      stringArray0[2] = "`nit";
      stringArray0[3] = "`nit";
      stringArray0[4] = "`nit";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getLong("`nit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`nit\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
