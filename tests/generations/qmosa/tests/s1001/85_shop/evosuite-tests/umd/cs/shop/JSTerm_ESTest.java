/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 05:29:05 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3719198209004677
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "pO>^W>-3gYwf9");
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer((-2426));
      jSTerm0.addElement(integer0);
      jSSubstitution0.iterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer0);
      jSSubstitution0.add((Object) jSSubstitution1);
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.addElements(jSSubstitution0);
      Consumer<JSTerm> consumer2 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer2);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2050261260717017
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G (o);#W>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ttype = 644;
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.quoteChar(2);
      streamTokenizer0.ordinaryChars(644, 13);
      streamTokenizer0.commentChar(13);
      streamTokenizer0.ordinaryChar(72);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.wordChars(714, 72);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution2);
      jSTerm2.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm1.isVariable());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 916;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isVariable();
      jSSubstitution0.clone();
      jSSubstitution0.add((Object) "z&");
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addElement(jSSubstitution0);
      JSJshopVars.apostrophe = 916;
      jSTerm0.isEval();
      System.setCurrentTimeMillis(3334L);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G (a);#W>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.whiteSpace = 32;
      streamTokenizer0.ordinaryChars(32, 40);
      streamTokenizer0.commentChar(40);
      streamTokenizer0.ordinaryChar((-2967));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.wordChars((-2967), (-2967));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.commentChar(60);
      streamTokenizer2.ordinaryChars(91, (-249));
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.ordinaryChars(324, 10);
      streamTokenizer2.ordinaryChar((-249));
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.sval = "!";
      streamTokenizer2.commentChar((-4));
      streamTokenizer1.commentChar(60);
      streamTokenizer1.whitespaceChars(135, (-4));
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.286306589149214
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.makeVariable();
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("ggM%[}l");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9014558645691375
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "pO>^W>-3gwf9");
      jSTerm0.print();
      Integer integer0 = new Integer((-2808));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.addElement(integer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSSubstitution0.add((Object) "pO>^W>-3gwf9");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) jSTerm1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) jSSubstitution2;
      objectArray0[5] = (Object) jSSubstitution1;
      objectArray0[6] = (Object) "pO>^W>-3gwf9";
      objectArray0[7] = (Object) integer0;
      jSSubstitution3.toArray(objectArray0);
      jSSubstitution3.sort((Comparator) null);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution6);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = jSTerm0.matches(jSTerm2, jSSubstitution5);
      jSTerm0.isGround();
      jSTerm0.applySubstitutionT(jSSubstitution8);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6240884370769257
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("N8t;:)~UpYh");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.pushBack();
      streamTokenizer0.commentChar((-4));
      StringReader stringReader1 = new StringReader("Jo{cting");
      streamTokenizer0.resetSyntax();
      char[] charArray0 = new char[1];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      stringReader1.reset();
      streamTokenizer2.resetSyntax();
      streamTokenizer1.resetSyntax();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.parseNumbers();
      streamTokenizer1.wordChars((-4), (-1));
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer3);
      streamTokenizer1.ttype = (-4);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer3.nextToken();
      streamTokenizer2.nval = 3618.47;
      jSTerm1.print();
      streamTokenizer1.nextToken();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.nextToken();
      streamTokenizer3.slashStarComments(true);
      streamTokenizer2.pushBack();
      streamTokenizer4.whitespaceChars((-4), (-1951));
      streamTokenizer2.quoteChar(126);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6694351084945749
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Tx}ec)ing ')' fr terE.");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("(");
      stringReader1.ready();
      streamTokenizer0.ordinaryChars((-365), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.eolIsSignificant(true);
      stringReader0.reset();
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer4.ordinaryChars((-3), (-365));
      streamTokenizer2.commentChar((-4));
      streamTokenizer1.nval = 1099.13198;
      streamTokenizer1.whitespaceChars((-4), (-3));
      streamTokenizer2.parseNumbers();
      streamTokenizer2.sval = null;
      streamTokenizer4.resetSyntax();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      streamTokenizer5.wordChars((-4254), (-4));
      streamTokenizer5.quoteChar((-4));
      stringReader1.ready();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer4.parseNumbers();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer5);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6602162707648
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Tx}ec)ing ')' fr terE.");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("(");
      stringReader1.ready();
      streamTokenizer0.ordinaryChars((-365), (-2389));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.eolIsSignificant(true);
      stringReader0.reset();
      streamTokenizer0.ordinaryChar((-2389));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer4.ordinaryChars((-3), (-3));
      streamTokenizer2.parseNumbers();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      streamTokenizer5.quoteChar((-4));
      stringReader1.ready();
      streamTokenizer5.ttype = 63;
      streamTokenizer5.pushBack();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer5);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8330572535406064
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.JE{aj");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<JSSubstitution> predicate1 = predicate0.negate();
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      Predicate<JSSubstitution> predicate3 = predicate2.negate();
      SystemInUtil.addInputLine("G_Zsy/Aq)XM{2?Q?!~");
      Predicate<JSSubstitution> predicate4 = predicate3.negate();
      jSTerm0.applySubstitutionT(jSSubstitution2);
      jSTerm0.cloneT();
      Integer integer0 = new Integer((-2582));
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSSubstitution0.add((Object) predicate4);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      Object[] objectArray0 = new Object[1];
      jSSubstitution6.toArray(objectArray0);
      jSSubstitution6.sort((Comparator) null);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      jSTerm1.applySubstitutionT(jSSubstitution3);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = jSTerm0.matches(jSTerm0, jSSubstitution9);
      jSTerm1.isGround();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution10);
      jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm2.cloneT();
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSSubstitution10.equals((Object)jSSubstitution8));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = null;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.add((Object) null);
      jSPredicateForm0.add((Object) null);
      jSTerm0.removeAll(jSPredicateForm0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.460685998915806
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.makeVariable();
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.isGround();
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7251366620129915
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("N8;:)~UpYh");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "N8;:)~UpYh";
      stringReader0.ready();
      streamTokenizer0.ordinaryChars((-2389), (-2389));
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm3.isGround();
      jSTerm1.standardizerTerm();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm3.isGround();
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = jSTerm4.cloneT();
      assertEquals(41, streamTokenizer0.ttype);
      assertTrue(jSTerm6.equals((Object)jSTerm4));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.557153136866439
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("N8toz)~UpYh");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(11L);
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      JSJshopVars.whiteSpace = 12;
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm1.standardizerTerm();
      jSTerm1.matches(jSTerm3, jSSubstitution3);
      jSTerm1.matches((JSPredicateForm) jSTerm5);
      jSTerm1.matches(jSTerm5, (JSSubstitution) null);
      jSTerm5.removeElement(jSTerm4);
      JSTerm jSTerm6 = new JSTerm();
      JSTerm jSTerm7 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm7.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      String string0 = "xpecting";
      jSSubstitution0.add((Object) "<");
      jSSubstitution0.add((Object) "xpecting");
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addElement(jSSubstitution0);
      JSJshopVars.apostrophe = 916;
      System.setCurrentTimeMillis(3334L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.iterator();
      jSSubstitution0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) consumer1);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.67886118978556
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6850822937113032
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("N8toz)~UpYh");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm3.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.095097351304972
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.JE{aj");
      stringReader0.skip(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSSubstitution0.standarizerSubs();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.makeFunction();
      jSSubstitution0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm4 = (JSTerm)jSTerm3.clone();
      jSTerm1.makeFunction();
      jSSubstitution1.removeElements(jSSubstitution0);
      jSTerm4.makeFunction();
      JSTerm jSTerm5 = jSTerm1.cloneT();
      JSTerm jSTerm6 = jSTerm3.standardizerTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSTerm2.matches(jSTerm3, jSSubstitution0);
      jSTerm5.clone();
      jSSubstitution1.sort((Comparator) null);
      jSTerm3.makeVariable();
      jSSubstitution1.add((Object) jSTerm3);
      jSTerm4.isGround();
      jSTerm3.setSize(1);
      jSTerm2.isGround();
      jSTerm5.equals(jSTerm6);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.matches(jSTerm3);
      jSTerm5.equals(jSTerm6);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.681479820072802
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("N8t;:)~UpYh");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 2128.338658;
      streamTokenizer0.sval = "N8t;:)~UpYh";
      StringReader stringReader1 = new StringReader("o");
      char[] charArray0 = new char[1];
      stringReader0.read(charArray0);
      stringReader1.read(charArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), 1);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer2);
      streamTokenizer1.nextToken();
      jSTerm1.print();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer1.whitespaceChars(69, 1);
      streamTokenizer3.quoteChar(58);
      jSTerm1.toStr();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6021059694638127
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("N8t;:)~UpYh");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "N8t;:)~UpYh";
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm1.equals(jSTerm2);
      JSJshopVars.flagLevel = 41;
      jSTerm1.isGround();
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(true);
      stringReader0.reset();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar((-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.wordChars(0, (-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.nextToken();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.ordinaryChars((-3), 33);
      streamTokenizer3.ordinaryChars((-3), (-4));
      streamTokenizer6.whitespaceChars(41, (-3));
      streamTokenizer2.parseNumbers();
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1293992054976025
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G (a);#W>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ttype = 644;
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.quoteChar(2);
      streamTokenizer0.ordinaryChars(644, 13);
      streamTokenizer0.commentChar(13);
      streamTokenizer0.ordinaryChar(63);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.wordChars(714, 63);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer2.ordinaryChar(1);
      stringReader0.close();
      streamTokenizer2.commentChar(859);
      streamTokenizer1.whitespaceChars(135, 714);
      streamTokenizer0.ordinaryChars(714, (-4));
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.parseNumbers();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.46689944883853
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("+.7fjIG&p");
      StringReader stringReader1 = new StringReader("';jV5Ok1");
      StringReader stringReader2 = new StringReader("PwI<)%c?GaGFt/pE+");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      StringReader stringReader3 = new StringReader(">=");
      stringReader3.skip((-4));
      stringReader1.ready();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      streamTokenizer1.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader2);
      streamTokenizer3.quoteChar((-4));
      streamTokenizer0.parseNumbers();
      StringReader stringReader4 = new StringReader(")nA :MzU%");
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader4);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6887355842202783
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("N8t;:)~UpYh");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "N8t;:)~UpYh";
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.removeAllElements();
      jSTerm1.equals(jSTerm2);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      jSTerm1.isGround();
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(true);
      stringReader0.reset();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar((-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.nextToken();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.ordinaryChars((-3), 33);
      streamTokenizer3.ordinaryChars((-3), (-4));
      streamTokenizer6.whitespaceChars(0, (-3));
      streamTokenizer2.parseNumbers();
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5883589676724763
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.iterator();
      jSSubstitution0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      assertTrue(jSTerm3.isFunction());
      
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution3 = jSTerm4.matches(jSTerm2, jSSubstitution2);
      assertTrue(jSTerm2.isFunction());
      assertTrue(jSTerm1.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
      assertTrue(jSSubstitution3.fail());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.makeVariable();
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) consumer1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.196374910759124
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G (a);#W>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ttype = 644;
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.quoteChar(41);
      streamTokenizer0.ordinaryChars(644, 13);
      streamTokenizer0.commentChar(13);
      streamTokenizer0.ordinaryChar(72);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.wordChars(714, 72);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer2.nextToken();
      streamTokenizer2.ordinaryChar(1);
      streamTokenizer1.pushBack();
      streamTokenizer2.commentChar(41);
      streamTokenizer1.whitespaceChars(135, 714);
      streamTokenizer0.ordinaryChars(714, 59);
      streamTokenizer1.nextToken();
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.parseNumbers();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8308950913784443
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.JE{aj");
      stringReader0.ready();
      stringReader0.skip(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<JSSubstitution> predicate1 = predicate0.negate();
      predicate0.or(predicate1);
      predicate0.negate();
      jSTerm1.applySubstitutionT(jSSubstitution2);
      jSTerm0.clone();
      jSTerm1.cloneT();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      Object[] objectArray0 = new Object[0];
      jSSubstitution6.toArray(objectArray0);
      jSSubstitution6.sort((Comparator) null);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      jSTerm2.applySubstitutionT(jSSubstitution3);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm3.print();
      assertTrue(jSTerm0.isVariable());
      assertNotSame(jSTerm0, jSTerm1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.8332139319581544
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.JE{aj");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<JSSubstitution> predicate1 = predicate0.negate();
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      Predicate<JSSubstitution> predicate3 = predicate2.negate();
      SystemInUtil.addInputLine("G_Zsy/Aq)XM{2?Q?!~");
      Predicate<JSSubstitution> predicate4 = predicate3.negate();
      jSTerm0.applySubstitutionT(jSSubstitution2);
      jSTerm0.cloneT();
      Integer integer0 = new Integer((-1));
      jSSubstitution0.addElement(integer0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSSubstitution0.add((Object) predicate4);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      Object[] objectArray0 = new Object[1];
      jSSubstitution6.toArray(objectArray0);
      jSSubstitution6.sort((Comparator) null);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution3);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = jSTerm0.matches(jSTerm0, jSSubstitution9);
      jSTerm1.isGround();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution10);
      jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm3.matches(jSTerm2, jSSubstitution6);
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6013078048061202
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("N8toz)~UpYh");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm3.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.2355868124807694
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SystemInUtil.addInputLine("_BQZAg[W0f^W6bhzya");
      StringReader stringReader0 = new StringReader("C.JE{aj");
      StringReader stringReader1 = new StringReader("C.JE{aj");
      SystemInUtil.addInputLine("C.JE{aj");
      stringReader1.skip((-500L));
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) stringReader1);
      JSTerm jSTerm1 = jSTerm0.call();
      System.setCurrentTimeMillis((-5014L));
      System.setCurrentTimeMillis(4);
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "~8t;:)~pY;h");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Integer integer0 = new Integer(0);
      jSSubstitution1.add((Object) jSSubstitution0);
      jSTerm0.add((Object) "~8t;:)~pY;h");
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6431305837478336
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G (a);#W>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ttype = 644;
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChars(644, 40);
      streamTokenizer0.commentChar(40);
      streamTokenizer0.ordinaryChar((-2967));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.slashSlashComments(true);
      JSJshopVars.leftBrac = (-852);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.wordChars(714, (-2967));
      stringReader0.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.commentChar(859);
      streamTokenizer1.whitespaceChars(135, 714);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.whitespaceChars((-1955), 58);
      streamTokenizer0.quoteChar(714);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8145438575887054
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.JE{aj");
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      predicate0.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      Object object1 = jSTerm0.clone();
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSSubstitution2.remove((Object) jSTerm0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution0.sort((Comparator) null);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm2.makeVariable();
      jSTerm2.clone();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution6.add(object1);
      jSSubstitution2.forEach(consumer0);
      jSTerm3.applySubstitutionT(jSSubstitution6);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2, jSSubstitution9);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.2346419437341627
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.iterator();
      jSSubstitution0.forEach(consumer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.iterator();
      Consumer<JSTerm> consumer1 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Consumer<String> consumer2 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer2);
      jSSubstitution2.add((Object) jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      jSTerm1.addElement((Object) null);
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8529664369462084
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.JE{aj");
      stringReader0.skip(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.makeFunction();
      jSTerm1.equals(jSTerm0);
      JSJshopVars.dot = (-2);
      jSTerm0.makeEval(true);
      jSTerm1.listIterator();
      jSTerm1.isFunction();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.isVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.7977208303621315
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.JE{aj");
      stringReader0.skip(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.makeFunction();
      jSSubstitution0.add((Object) jSTerm1);
      JSJshopVars.dot = (-2);
      jSTerm0.makeEval(true);
      jSTerm1.listIterator();
      jSTerm1.isFunction();
      assertFalse(jSTerm1.isConstant());
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.isVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm4 = jSTerm3.call();
      jSTerm2.equals(jSTerm4);
      jSTerm4.cloneT();
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm3.isEval());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.399017942467452
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      String string0 = null;
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.iterator();
      jSSubstitution0.forEach(consumer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.clear();
      jSTerm0.retainAll(jSTerm1);
      jSTerm2.isGround();
      JSJshopVars.equalT = 42;
      // Undeclared exception!
      try { 
        jSTerm2.equals(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.1506719848487332
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting ')' for term.");
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stringReader0.skip(0L);
      jSTerm0.forEach(consumer0);
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      jSTerm0.add((Object) stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      boolean boolean0 = jSTerm0.isEval();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "%";
      StringReader stringReader0 = new StringReader("%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      stringReader0.skip((-4));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.forEach(consumer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Consumer<JSTerm> consumer1 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("QRhEO^],e[R=.6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5242282701553505
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.JE{aj");
      stringReader0.skip(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<JSSubstitution> predicate1 = predicate0.negate();
      predicate0.or(predicate1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution4.forEach(consumer0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution3);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSTerm3.iterator();
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isFunction());
      
      jSTerm2.cloneT();
      JSSubstitution jSSubstitution9 = jSTerm2.matches(jSTerm0, jSSubstitution4);
      assertNotSame(jSSubstitution4, jSSubstitution9);
      assertNotSame(jSTerm1, jSTerm3);
      assertFalse(jSSubstitution9.fail());
      assertEquals("[%%%]", jSTerm1.toString());
      assertNotSame(jSTerm1, jSTerm2);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.JE{aj");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<JSSubstitution> predicate1 = predicate0.negate();
      predicate0.or(predicate1);
      jSTerm0.print();
      System.setCurrentTimeMillis(456L);
      SystemInUtil.addInputLine("0.0");
      SystemInUtil.addInputLine("0.0");
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.1531782505128936
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.makeVariable();
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.352335010810866
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G (a);#W>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.ttype = 644;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChars(644, 40);
      streamTokenizer0.commentChar(40);
      streamTokenizer0.ordinaryChar((-2967));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.wordChars(714, (-2967));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer2.commentChar(60);
      streamTokenizer2.ordinaryChar((-249));
      streamTokenizer2.commentChar(859);
      streamTokenizer1.whitespaceChars(135, 714);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.328811135389218
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.JE{aj");
      StringReader stringReader1 = new StringReader("C.JE{aj");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) stringReader1);
      JSTerm jSTerm1 = jSTerm0.call();
      System.setCurrentTimeMillis((-5014L));
      System.setCurrentTimeMillis(4);
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.makeVariable();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.add((Object) jSTerm1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Integer integer0 = new Integer((-1453));
      // Undeclared exception!
      try { 
        jSSubstitution1.setElementAt(integer0, (-336));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -336
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.804062769642725
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) null);
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.isGround();
      jSTerm2.standardizerTerm();
      jSTerm0.call();
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.makeVariable();
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("LQ)$>&;CE>s\"ScX");
      StringReader stringReader1 = new StringReader("LQ)$>&;CE>s\"ScX");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      stringReader1.skip((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChars(60, 2450);
      streamTokenizer0.commentChar(60);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.ordinaryChar(6);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar((-4));
      streamTokenizer2.eolIsSignificant(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.whitespaceChars(2281, 236);
      streamTokenizer1.quoteChar((-1955));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals("[nil]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.6739050679432226
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.JE{aj");
      stringReader0.skip(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<JSSubstitution> predicate1 = predicate0.negate();
      predicate0.or(predicate1);
      Predicate<JSSubstitution> predicate2 = predicate1.or(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate2.negate();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution2);
      jSTerm1.equals(jSTerm2);
      jSTerm1.cloneT();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm0.standardizerTerm();
      jSSubstitution0.add((Object) predicate3);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      Object[] objectArray0 = new Object[0];
      jSSubstitution6.sort((Comparator) null);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.toStr();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.9982695885852573
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z]IXg9ScdkH%n");
      StringReader stringReader1 = new StringReader("03-Yn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.pushBack();
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChars((-2), (-2));
      streamTokenizer0.commentChar((-2));
      streamTokenizer0.ordinaryChar((-2));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-2), (-599));
      streamTokenizer0.resetSyntax();
      streamTokenizer1.wordChars((-4), (-2));
      streamTokenizer1.pushBack();
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.ttype = (-2);
      streamTokenizer1.ordinaryChar((-2));
      jSTerm0.toStr();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.5878861544337055
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.JE{aj");
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer((-2611));
      jSTerm0.add((Object) integer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.iterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution5);
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm1.iterator();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm2, jSSubstitution5);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5878861544337055
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.iterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.forEach(consumer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm0.iterator();
      jSTerm1.cloneT();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm1, jSSubstitution6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.iterator();
      jSSubstitution0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer1);
      Consumer<Integer> consumer2 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer2);
      jSSubstitution0.addElements(jSSubstitution0);
      Consumer<Object> consumer3 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer3);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isVariable();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.621553942215545
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.JE{aj");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<JSSubstitution> predicate1 = predicate0.negate();
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      Predicate<JSSubstitution> predicate3 = predicate2.negate();
      SystemInUtil.addInputLine("LPK@ITBz(U.M^Thv");
      Predicate<JSSubstitution> predicate4 = predicate3.negate();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution4);
      jSTerm0.cloneT();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isConstant());
      
      jSSubstitution0.add((Object) predicate4);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      Object[] objectArray0 = new Object[1];
      jSSubstitution7.toArray(objectArray0);
      jSSubstitution7.sort((Comparator) null);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      SystemInUtil.addInputLine(": ");
      System.setCurrentTimeMillis(1L);
      JSSubstitution jSSubstitution9 = jSTerm1.matches(jSTerm0);
      assertFalse(jSSubstitution9.fail());
      assertEquals("[%%%]", jSTerm0.toString());
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6275758796393918
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.JE{aj");
      StringReader stringReader1 = new StringReader("03-Yn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.pushBack();
      stringReader0.skip(0L);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChars((-2), (-2));
      streamTokenizer0.commentChar((-2));
      streamTokenizer0.ordinaryChar((-2));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.wordChars((-1955), (-2));
      streamTokenizer1.commentChar((-1955));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), 96);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer3.quoteChar((-694));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StringReader stringReader2 = new StringReader("03-Yn");
      StringReader stringReader3 = new StringReader("03-Yn");
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      System.setCurrentTimeMillis(2748L);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer3);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      assertTrue(jSSubstitution0.fail());
      assertFalse(jSTerm1.isEval());
      assertNotNull(jSSubstitution0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.8380300472665179
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SystemInUtil.addInputLine("G (.);#W>");
      StringReader stringReader0 = new StringReader("G (.);#W>");
      SystemInUtil.addInputLine(".");
      SystemInUtil.addInputLine("G (.);#W>");
      SystemInUtil.addInputLine("%%%");
      SystemInUtil.addInputLine("Line : ");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine((String) null);
      streamTokenizer0.nextToken();
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.JE{aj");
      StringReader stringReader1 = new StringReader("C.JE{aj");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer1 = null;
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.981737104518931
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeConstant();
      jSTerm0.equals(jSTerm1);
      jSTerm0.equals(jSTerm1);
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertTrue(jSTerm1.isConstant());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.7414883487930295
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.iterator();
      jSSubstitution0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSSubstitution2.add((Object) null);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSSubstitution2;
      objectArray0[1] = (Object) jSSubstitution3;
      jSSubstitution3.removeElement(jSSubstitution4);
      objectArray0[2] = (Object) consumer0;
      objectArray0[3] = (Object) jSSubstitution4;
      objectArray0[4] = (Object) jSSubstitution0;
      objectArray0[5] = (Object) consumer1;
      objectArray0[6] = (Object) null;
      jSSubstitution4.toArray(objectArray0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.sort((Comparator) null);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm0.makeVariable();
      Integer integer0 = new Integer((-2));
      jSSubstitution2.add((Object) integer0);
      Consumer<String> consumer2 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer2);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSJshopVars.flagLevel = (-2);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6145591551764051
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G (o);#W>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine(",ovKkyx}");
      streamTokenizer0.parseNumbers();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeEval(true);
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-3), 41);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("+.7fjIG&p");
      StringReader stringReader1 = new StringReader("';jV5Ok1");
      StringReader stringReader2 = new StringReader("PwI<)%c?GaGFt/pE+");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      StringReader stringReader3 = new StringReader(">=");
      stringReader3.skip((-4));
      jSTerm0.isFunction();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      streamTokenizer1.ordinaryChars(2390, 40);
      StringReader stringReader4 = new StringReader("?");
      stringReader4.skip(0L);
      StringReader stringReader5 = new StringReader("?");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader5);
      streamTokenizer2.quoteChar(42);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.5118186263314217
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Nzt;:)~UYh");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      boolean boolean0 = jSTerm1.isFunction();
      assertTrue(boolean0);
      
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.minus = (-122);
      JSJshopVars.plus = (-122);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      assertTrue(jSTerm3.isFunction());
      
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm2, jSSubstitution2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm3);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSSubstitution3.fail());
      assertEquals(0, jSSubstitution3.size());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("~8t;:)~pYh");
      jSTerm0.add((Object) "~8t;:)~pYh");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) "~8t;:)~pYh");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer1);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.close();
      stringReader0.close();
      jSTerm0.isConstant();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeFunction();
      assertTrue(jSTerm1.isFunction());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.8967624021371803
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting ')' for term.");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSJshopVars.colon = (-2);
      jSTerm1.clear();
      JSJshopVars.rightPar = 32;
      JSJshopVars.leftPar = 32;
      jSTerm0.removeAllElements();
      jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SystemInUtil.addInputLine("G (.);#W>");
      StringReader stringReader0 = new StringReader("G (.);#W>");
      SystemInUtil.addInputLine("G (.);#W>");
      SystemInUtil.addInputLine("Line : ");
      SystemInUtil.addInputLine("wdqsvw");
      SystemInUtil.addInputLine("Line : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(71, 1267);
      SystemInUtil.addInputLine((String) null);
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.call();
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.8730291164911108
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SystemInUtil.addInputLine("nil");
      SystemInUtil.addInputLine("Mua");
      StringReader stringReader0 = new StringReader("?`'Ti7yB~xG<5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertTrue(jSTerm1.isVariable());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting ')' for term.");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("(");
      jSTerm0.isConstant();
      SystemInUtil.addInputLine((String) null);
      streamTokenizer0.ordinaryChars((-365), (-2389));
      streamTokenizer0.eolIsSignificant(true);
      stringReader0.reset();
      streamTokenizer0.ordinaryChar((-2389));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      StringReader stringReader2 = new StringReader("(");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer3.quoteChar((-2));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z]IXg9ScdkH%n");
      StringReader stringReader1 = new StringReader("03-Yn");
      StringReader stringReader2 = new StringReader("list");
      SystemInUtil.addInputLine("03-Yn");
      SystemInUtil.addInputLine("");
      stringReader1.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      SystemInUtil.addInputLine("list");
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z]IXg9ScdkH%n");
      StringReader stringReader1 = new StringReader("Z]IXg9ScdkH%n");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.pushBack();
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChars((-1), (-1));
      streamTokenizer0.commentChar((-1));
      streamTokenizer0.ordinaryChar((-1));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-1), (-599));
      streamTokenizer0.resetSyntax();
      streamTokenizer1.wordChars((-4), (-1));
      streamTokenizer1.pushBack();
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer1.ttype = (-1);
      streamTokenizer1.ordinaryChar((-1));
      streamTokenizer0.sval = "Z]IXg9ScdkH%n";
      streamTokenizer1.sval = "Z]IXg9ScdkH%n";
      streamTokenizer1.whitespaceChars(58, (-1));
      streamTokenizer1.quoteChar((-1));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.parseNumbers();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z]IXg9ScdkH%n");
      StringReader stringReader1 = new StringReader("03-Yn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.pushBack();
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-599));
      streamTokenizer0.resetSyntax();
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.pushBack();
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.ttype = (-599);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.sval = "03-Yn";
      streamTokenizer1.sval = "03-Yn";
      streamTokenizer1.whitespaceChars(58, (-4));
      streamTokenizer1.quoteChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.parseNumbers();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5296847785508279
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z]IXg9ScdkH%n");
      StringReader stringReader1 = new StringReader("03-Yn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.pushBack();
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChars((-2), (-2));
      streamTokenizer0.commentChar((-2));
      streamTokenizer0.ordinaryChar((-2));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-2), (-599));
      streamTokenizer0.resetSyntax();
      streamTokenizer1.wordChars((-4), (-2));
      streamTokenizer1.pushBack();
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.ttype = (-2);
      streamTokenizer1.ordinaryChar((-2));
      streamTokenizer0.sval = "03-Yn";
      streamTokenizer1.sval = "03-Yn";
      streamTokenizer1.whitespaceChars(58, (-2));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.parseNumbers();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5296847785508279
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.JE{aj");
      StringReader stringReader1 = new StringReader("03-Yn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.pushBack();
      stringReader0.skip(0L);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChars((-2), (-2));
      streamTokenizer0.commentChar((-2));
      streamTokenizer0.ordinaryChar((-2));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.wordChars(63, (-2));
      streamTokenizer1.commentChar((-1955));
      streamTokenizer1.whitespaceChars(2, (-2793));
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.ttype = (-2);
      streamTokenizer1.sval = "H3Wz  x:%Ya7\"t";
      streamTokenizer1.whitespaceChars(58, (-3020));
      System.setCurrentTimeMillis(0L);
      streamTokenizer1.quoteChar((-2));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SystemInUtil.addInputLine("G (.);#W>");
      StringReader stringReader0 = new StringReader("G (.);#W>");
      SystemInUtil.addInputLine("G (.);#W>");
      SystemInUtil.addInputLine("%%%");
      SystemInUtil.addInputLine("Line : ");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine((String) null);
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
