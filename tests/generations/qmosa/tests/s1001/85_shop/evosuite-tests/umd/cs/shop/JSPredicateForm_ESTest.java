/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 05:27:35 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SystemInUtil.addInputLine(".>^>VLGj");
      SystemInUtil.addInputLine(".>^>VLGj");
      SystemInUtil.addInputLine("");
      SystemInUtil.addInputLine("/C}oQEao\u0001Vz!\"ux");
      SystemInUtil.addInputLine(".>^>VLGj");
      SystemInUtil.addInputLine("/C}oQEao\u0001Vz!\"ux");
      SystemInUtil.addInputLine("Hx=?Us$J>;|t~");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("#CLeMO");
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(+eCKYgAU@W");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(cCYghA@W");
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(cCYghA@W");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9285988229508346
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer0.whitespaceChars((-1), (-1));
      jSTerm0.add((Object) jSTerm0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChars((-1), 2682);
      streamTokenizer2.ordinaryChars((-4), (-1));
      streamTokenizer2.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.nval = (double) (-4);
      jSTerm0.standarizerPredicateForm();
      streamTokenizer1.nextToken();
      streamTokenizer3.commentChar((-4));
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer2.parseNumbers();
      System.setCurrentTimeMillis((-4));
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      System.setCurrentTimeMillis((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer3.nval = (double) (-4);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-1), (-4));
      System.setCurrentTimeMillis((-4));
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      System.setCurrentTimeMillis((-389L));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3513324610541133
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KiT j]iXi=4;n5#o*Dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("KiT j]iXi=4;n5#o*Dl");
      streamTokenizer0.ordinaryChar(39);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer0.whitespaceChars(32, 32);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      jSSubstitution0.removeAllElements();
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      jSTerm0.addAll((Collection) jSSubstitution0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.isEmpty();
      jSTerm0.equals(jSPredicateForm0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      stringReader1.reset();
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution2);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.matches(jSPredicateForm2);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm0.matches(jSPredicateForm3);
      jSPredicateForm2.equals((JSPredicateForm) jSTerm0);
      jSPredicateForm0.matches(jSPredicateForm3, jSSubstitution0);
      jSTerm1.standarizerPredicateForm();
      jSPredicateForm3.matches(jSPredicateForm0);
      JSPredicateForm jSPredicateForm4 = new JSPredicateForm((String) null);
      jSPredicateForm4.matches(jSPredicateForm1);
      JSPredicateForm jSPredicateForm5 = null;
      try {
        jSPredicateForm5 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0293049377859265
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KiT j]iXi=4;n5#o*Dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.rightBrac = (-1432813312);
      stringReader0.close();
      jSSubstitution0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.ensureCapacity(91);
      jSSubstitution0.removeElements(jSSubstitution1);
      JSJshopVars.rightBrac = (-1432813312);
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSTerm0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.containsAll(jSSubstitution1);
      jSSubstitution6.assignFailure();
      jSSubstitution6.addAll((Collection) jSSubstitution3);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSSubstitution7.assignFailure();
      JSSubstitution jSSubstitution8 = jSTerm0.matches(jSPredicateForm0, jSSubstitution7);
      jSTerm0.applySubstitutionPF(jSSubstitution8);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KiT j]iXi=4;n5#o*Dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "KiT j]iXi=4;n5#o*Dl");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution1.ensureCapacity((-1432813312));
      jSTerm0.add((Object) null);
      jSSubstitution1.removeElements(jSSubstitution0);
      jSSubstitution0.add((Object) "KiT j]iXi=4;n5#o*Dl");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1564437628697393
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MiT j]iXi=4;n5#K*Dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChars((-1614856153), (-1614856153));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      JSJshopVars.rightBrac = (-1614856153);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm0.matches(jSPredicateForm1);
      jSPredicateForm1.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm2.setSize(2682);
      // Undeclared exception!
      try { 
        jSPredicateForm2.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      SystemInUtil.addInputLine("?J~y+#k:gV%a95");
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<String, Integer> function2 = unaryOperator1.andThen((Function<? super String, ? extends Integer>) function1);
      Function<Integer, Integer> function3 = Function.identity();
      Function<Integer, String> function4 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function5 = function1.andThen((Function<? super Integer, ? extends String>) function4);
      Function<String, Object> function6 = unaryOperator0.compose((Function<? super String, ?>) function1);
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function.identity();
      function3.andThen((Function<? super Integer, ?>) function1);
      function7.apply(function6);
      Function<Object, String> function8 = function1.andThen((Function<? super Integer, ? extends String>) function5);
      Function<Object, Object> function9 = Function.identity();
      function7.andThen((Function<? super Integer, ?>) function1);
      function8.compose((Function<? super JSTerm, ?>) function9);
      function9.compose((Function<? super Integer, ?>) function1);
      function1.apply(function3);
      function5.andThen((Function<? super String, ? extends String>) function8);
      Function.identity();
      unaryOperator1.andThen((Function<? super String, ? extends Integer>) function1);
      function1.apply((Object) null);
      function1.compose((Function<? super Integer, ?>) function1);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      Function.identity();
      Function.identity();
      function9.andThen((Function<? super Object, ? extends String>) function5);
      unaryOperator1.andThen((Function<? super String, ? extends String>) function5);
      Function.identity();
      function2.andThen((Function<? super Integer, ? extends Integer>) function7);
      function3.andThen((Function<? super Integer, ?>) function1);
      Integer integer0 = new Integer((-3));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SystemInUtil.addInputLine(".>^>VLGj");
      SystemInUtil.addInputLine("u*P3eJ3BJ:g");
      SystemInUtil.addInputLine("/C}o9Eao\u0007V|z!\"u|F");
      SystemInUtil.addInputLine(".>^>VLGj");
      SystemInUtil.addInputLine("Hx=?Us$J>;|t~");
      SystemInUtil.addInputLine((String) null);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(+eCKYgAU@W");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8341980932688027
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KiT j]iXi=4;n5#o*Dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSJshopVars.rightBrac = 32;
      Object object0 = new Object();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.equals(jSPredicateForm0);
      Function<Object, Integer> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super String, ? extends Integer>) function3);
      unaryOperator0.compose((Function<? super String, ?>) function2);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function5 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function4);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Integer> function6 = unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function2);
      function6.apply(unaryOperator1);
      Function.identity();
      Function<Object, Integer> function7 = function5.compose((Function<? super Object, ?>) function6);
      Function.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function<Object, Integer> function8 = unaryOperator4.andThen((Function<? super Object, ? extends Integer>) function7);
      Function<Object, Integer> function9 = unaryOperator4.andThen((Function<? super Object, ? extends Integer>) function8);
      Function<Object, Integer> function10 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function9);
      Function<Object, Integer> function11 = function10.compose((Function<? super Object, ?>) function4);
      Function.identity();
      Function<Object, Integer> function12 = unaryOperator4.andThen((Function<? super Object, ? extends Integer>) function5);
      function11.apply(function12);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm((String) null);
      assertTrue(jSPredicateForm1.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.8950056533107491
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KiT j]iXi=4;n5#o*Dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("KiT j]iXi=4;n5#o*Dl");
      streamTokenizer0.ordinaryChar(39);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addAll((Collection) jSSubstitution0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.isEmpty();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(39);
      System.setCurrentTimeMillis(39);
      System.setCurrentTimeMillis(888L);
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2267322871438466
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Qn");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.clonePF();
      jSPredicateForm2.retainAll(jSTerm0);
      JSJshopVars.interrogation = (-4061);
      char[] charArray0 = new char[9];
      charArray0[0] = '}';
      charArray0[1] = '2';
      charArray0[3] = ',';
      jSPredicateForm2.remove((Object) null);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      Object object0 = new Object();
      jSPredicateForm2.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm2.clonePF();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSPredicateForm2);
      JSPredicateForm jSPredicateForm5 = jSPredicateForm4.applySubstitutionPF(jSSubstitution1);
      JSSubstitution jSSubstitution3 = jSPredicateForm4.matches(jSPredicateForm2, jSSubstitution2);
      jSPredicateForm3.clonePF();
      jSPredicateForm5.applySubstitutionPF(jSSubstitution1);
      jSSubstitution2.addAll((Collection) jSPredicateForm0);
      jSTerm0.equals(jSPredicateForm4);
      JSPredicateForm jSPredicateForm6 = jSPredicateForm3.clonePF();
      jSPredicateForm6.removeAllElements();
      jSTerm0.matches(jSPredicateForm2, jSSubstitution3);
      jSPredicateForm0.clonePF();
      // Undeclared exception!
      try { 
        jSPredicateForm1.matches(jSPredicateForm3, jSSubstitution2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.035668838374787
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MiT j]iXi=4;n5#K*Dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.ordinaryChars((-1614856153), (-473));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      JSJshopVars.rightBrac = (-1614856153);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm0.matches(jSPredicateForm1);
      jSPredicateForm1.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm2.standarizerPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm2.setSize((-752));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -752
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KiT j]iXi=4;n5#o*Dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      int int0 = (-1432813312);
      jSSubstitution0.add((Object) "KiT j]iXi=4;n5#o*Dl");
      jSTerm0.add((Object) streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.ensureCapacity((-1432813312));
      jSSubstitution1.removeElements(jSSubstitution0);
      jSSubstitution0.add((Object) "KiT j]iXi=4;n5#o*Dl");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      Integer integer0 = new Integer((-316615619));
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Object object0 = new Object();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function.identity();
      Function<Object, Integer> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator1.andThen((Function<? super String, ? extends Integer>) function1);
      Function.identity();
      Function<Integer, String> function4 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function5 = function2.andThen((Function<? super Integer, ? extends String>) function4);
      Function<String, Object> function6 = unaryOperator0.compose((Function<? super String, ?>) function1);
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      function1.andThen((Function<? super Integer, ?>) function7);
      Function.identity();
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function.identity();
      function8.apply(function6);
      function2.andThen((Function<? super Integer, ? extends String>) function5);
      Function<Object, Object> function9 = Function.identity();
      function8.andThen((Function<? super Integer, ?>) function7);
      function9.compose((Function<? super Integer, ?>) function3);
      StringReader stringReader0 = new StringReader("JSTerm: Error reading control parameters: ");
      stringReader0.skip(0L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.equals((JSPredicateForm) null);
      System.setCurrentTimeMillis(32);
      System.setCurrentTimeMillis(5654L);
      System.setCurrentTimeMillis((-1383L));
      System.setCurrentTimeMillis(5654L);
      System.setCurrentTimeMillis(1870L);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Object object1 = new Object();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<String, Integer> function3 = unaryOperator1.andThen((Function<? super String, ? extends Integer>) function2);
      Function<Integer, Integer> function4 = Function.identity();
      Function<Integer, String> function5 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super Integer, ? extends String>) function5);
      unaryOperator0.compose((Function<? super String, ?>) function3);
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      Function.identity();
      function6.apply(function1);
      Function.identity();
      Function<Object, Object> function8 = function1.andThen((Function<? super Integer, ?>) function7);
      function2.apply(function3);
      unaryOperator0.compose((Function<? super Object, ?>) function7);
      Function<String, Integer> function9 = unaryOperator1.andThen((Function<? super String, ? extends Integer>) function3);
      function1.apply(function8);
      function2.compose((Function<? super Integer, ?>) function7);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      Function<Integer, Integer> function10 = unaryOperator3.andThen((Function<? super Integer, ? extends Integer>) function4);
      function3.andThen((Function<? super Integer, ? extends Integer>) function10);
      unaryOperator2.apply(unaryOperator1);
      Function.identity();
      unaryOperator2.compose((Function<? super String, ?>) function3);
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function2);
      function2.apply(function9);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MiT j]iX%4n5#K*Dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(43);
      Integer integer2 = new Integer(1134);
      Integer integer3 = new Integer(1134);
      Integer integer4 = new Integer(39);
      Integer integer5 = new Integer(2525);
      Integer integer6 = new Integer((-4));
      Integer integer7 = new Integer((-62409219));
      Integer integer8 = new Integer((-2619));
      Integer integer9 = new Integer((-14506066));
      Integer integer10 = new Integer((-1081998515));
      Integer integer11 = new Integer((-81));
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KiT j]iXi=4;n5#o*Dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.ordinaryChars(32, (-492));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.lowerCaseMode(true);
      StringReader stringReader1 = new StringReader("failed");
      Object object0 = new Object();
      jSTerm0.add(object0);
      SystemInUtil.addInputLine("B-eF*?*p*~}[h'@[");
      stringReader0.mark(32);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(true);
      stringReader1.ready();
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.whitespaceChars((-4), 1);
      streamTokenizer2.lowerCaseMode(false);
      streamTokenizer1.quoteChar(1);
      streamTokenizer0.ttype = (int) 'm';
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.014983339002437
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KiT j]iXi=4;n5#o*Dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer0.whitespaceChars(32, 32);
      jSTerm0.add((Object) jSTerm0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer2.ordinaryChars((-4), 32);
      streamTokenizer2.wordChars(3, (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), 2);
      streamTokenizer1.nval = (double) (-4);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      streamTokenizer1.nextToken();
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer2.ordinaryChar((-4));
      jSPredicateForm0.toStr();
      streamTokenizer2.parseNumbers();
      System.setCurrentTimeMillis((-4));
      jSTerm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      System.setCurrentTimeMillis((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer3.nval = (-1.0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.236774894905465
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MiT j]iXi=4;n5#K*Dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      CharBuffer.allocate(0);
      jSPredicateForm0.size();
      jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      jSPredicateForm1.equals((JSPredicateForm) jSTerm0);
      jSPredicateForm0.clone();
      jSPredicateForm1.print();
      jSPredicateForm1.print();
      JSPredicateForm jSPredicateForm3 = null;
      try {
        jSPredicateForm3 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.add((Object) "7Qn");
      jSTerm0.add((Object) "7Qn");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MiT j]iXi=4;n5#K*Dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(1582);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function<Object, Object> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.assignFailure();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) function0);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      Function.identity();
      unaryOperator3.andThen((Function<? super String, ?>) unaryOperator4);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) unaryOperator1);
      jSTerm0.firstElement();
      unaryOperator5.compose((Function<? super JSTerm, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      unaryOperator6.andThen((Function<? super Object, ?>) function0);
      unaryOperator6.apply(streamTokenizer0);
      UnaryOperator.identity();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XS");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) stringReader0);
      StringReader stringReader1 = new StringReader("XS");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      jSTerm0.add((Object) streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SystemInUtil.addInputLine(".>RqD>VLGj");
      SystemInUtil.addInputLine(".>RqD>VLGj");
      SystemInUtil.addInputLine("Hx=?Us$J>;|t");
      System.setCurrentTimeMillis(0L);
      long long0 = 3527L;
      System.setCurrentTimeMillis((-2764L));
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SystemInUtil.addInputLine(": ");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      predicate0.negate();
      Predicate.isEqual((Object) predicate0);
      predicate0.negate();
      int int0 = (-2014050495);
      Integer integer0 = new Integer((-2014050495));
      Integer integer1 = new Integer((-2014050495));
      Integer integer2 = new Integer((-3319));
      jSPredicateForm0.addElement((Object) null);
      Integer integer3 = new Integer((-3319));
      predicate0.test(integer3);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      int int0 = (-1790148257);
      int int1 = (-3319);
      Integer integer0 = new Integer(398);
      jSPredicateForm0.addElement(integer0);
      Integer integer1 = new Integer((-3319));
      Integer integer2 = new Integer((-3319));
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6868359830561608
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer((-3316));
      SystemInUtil.addInputLine("E9%'LY");
      Integer integer1 = new Integer((-14506066));
      Integer integer2 = new Integer((-3316));
      Integer integer3 = new Integer((-3316));
      Integer integer4 = new Integer((-3));
      SystemInUtil.addInputLine(":LKr,3-f.-A06/%TkCc");
      Integer integer5 = new Integer((-320713728));
      Integer integer6 = new Integer(41);
      Integer integer7 = new Integer(1777);
      Integer integer8 = new Integer(41);
      StringReader stringReader0 = new StringReader("(cCYM&@c");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("5h9QTcAxwZ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Integer integer0 = new Integer((-4));
      unaryOperator1.apply(integer0);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ?>) unaryOperator2);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      Function.identity();
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator2);
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator6.compose((Function<? super Integer, ?>) unaryOperator5);
      jSTerm1.firstElement();
      UnaryOperator.identity();
      unaryOperator4.apply(streamTokenizer1);
      function0.apply(unaryOperator2);
      UnaryOperator<Object> unaryOperator8 = UnaryOperator.identity();
      unaryOperator8.andThen((Function<? super Object, ?>) unaryOperator7);
      unaryOperator6.apply(unaryOperator8);
      UnaryOperator.identity();
      Function.identity();
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function.identity();
      Function<Integer, String> function2 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = function1.andThen((Function<? super Integer, ? extends String>) function2);
      Function<String, Object> function4 = unaryOperator0.compose((Function<? super String, ?>) function1);
      Function<Integer, Integer> function5 = Function.identity();
      function1.apply(function4);
      Function<Object, String> function6 = function1.andThen((Function<? super Integer, ? extends String>) function3);
      Function.identity();
      Function<Object, Object> function7 = Function.identity();
      function1.andThen((Function<? super Integer, ?>) function1);
      function6.compose((Function<? super JSTerm, ?>) function7);
      function1.andThen((Function<? super Integer, ?>) function7);
      function6.compose((Function<? super String, ?>) function4);
      function7.compose((Function<? super Integer, ?>) function1);
      function3.andThen((Function<? super String, ?>) function6);
      Function<Object, Object> function8 = function7.andThen((Function<? super Object, ?>) function6);
      function1.compose((Function<? super Object, ?>) function1);
      function4.apply("L;xj)$$W{1BjXUW|x!f");
      Function<Object, Object> function9 = Function.identity();
      Function.identity();
      function1.apply(function7);
      Function<Object, Object> function10 = unaryOperator0.compose((Function<? super Object, ?>) function7);
      Function.identity();
      function10.compose((Function<? super String, ?>) function4);
      Function<Object, String> function11 = function8.andThen((Function<? super Object, ? extends String>) function6);
      function1.apply(function5);
      function6.compose((Function<? super Object, ?>) function9);
      unaryOperator0.andThen((Function<? super Object, ?>) function11);
      Function.identity();
      function9.andThen((Function<? super Object, ? extends String>) function6);
      Function.identity();
      Function.identity();
      unaryOperator0.compose((Function<? super String, ?>) function4);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("", stringBuffer0.toString());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function.identity();
      Function<Integer, String> function2 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = function1.andThen((Function<? super Integer, ? extends String>) function2);
      Function<String, Object> function4 = unaryOperator0.compose((Function<? super String, ?>) function1);
      Function.identity();
      function1.apply(function4);
      Function<Object, String> function5 = function1.andThen((Function<? super Integer, ? extends String>) function3);
      Function.identity();
      Function<Object, Object> function6 = Function.identity();
      function1.andThen((Function<? super Integer, ?>) function1);
      function5.compose((Function<? super JSTerm, ?>) function6);
      Function<Object, Object> function7 = function1.andThen((Function<? super Integer, ?>) function6);
      function5.compose((Function<? super String, ?>) function4);
      function6.compose((Function<? super Integer, ?>) function1);
      function6.andThen((Function<? super Object, ?>) function5);
      Function<Object, Integer> function8 = function1.compose((Function<? super Object, ?>) function1);
      function4.apply("L;xj)$$W{1BjXUW|x!f");
      Function<Object, Object> function9 = Function.identity();
      Function.identity();
      function1.apply(function6);
      Function<Object, Object> function10 = unaryOperator0.compose((Function<? super Object, ?>) function6);
      Function.identity();
      function10.compose((Function<? super String, ?>) function7);
      function10.andThen((Function<? super Object, ? extends String>) function3);
      function8.apply(function1);
      unaryOperator0.andThen((Function<? super Object, ?>) function3);
      Function.identity();
      function9.andThen((Function<? super Object, ? extends String>) function3);
      Function.identity();
      Function.identity();
      unaryOperator0.compose((Function<? super String, ?>) function10);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("L;xj)$$W{1BjXUW|x!f");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(5, stringBuffer0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.014983339002437
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KiT j]iXi=4;n5#o*Dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer0.whitespaceChars(32, 32);
      jSTerm0.add((Object) jSTerm0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer2.ordinaryChars(1, 32);
      streamTokenizer2.wordChars(3, 1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), 2);
      streamTokenizer1.nval = (double) (-4);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer2.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.ordinaryChar(784);
      jSPredicateForm0.toStr();
      streamTokenizer2.parseNumbers();
      System.setCurrentTimeMillis((-4));
      jSTerm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      System.setCurrentTimeMillis((-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer3.nval = (-1.0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.3372805848750016
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MiT j]iXi=4;n5#K*Dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-861));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm1.size();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm3.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm4.spliterator();
      jSPredicateForm3.equals(jSPredicateForm4);
      jSPredicateForm2.print();
      jSPredicateForm3.print();
      jSTerm0.equals(jSPredicateForm2);
      StringBuffer stringBuffer0 = jSPredicateForm1.toStr();
      assertEquals("(MiT)", stringBuffer0.toString());
      
      JSPredicateForm jSPredicateForm6 = jSPredicateForm1.standarizerPredicateForm();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSPredicateForm6);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSPredicateForm2);
      Predicate<Integer> predicate2 = predicate0.or(predicate1);
      Predicate<Integer> predicate3 = predicate2.negate();
      predicate3.or(predicate1);
      predicate3.negate();
      predicate0.negate();
      jSPredicateForm1.removeIf(predicate2);
      jSPredicateForm0.clonePF();
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm7 = jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm5.equals(jSPredicateForm7);
      JSPredicateForm jSPredicateForm8 = jSPredicateForm3.standarizerPredicateForm();
      System.setCurrentTimeMillis((-212L));
      boolean boolean0 = jSPredicateForm8.equals(jSPredicateForm6);
      assertTrue(boolean0);
      assertNotSame(jSPredicateForm8, jSPredicateForm2);
      assertNotSame(jSPredicateForm2, jSPredicateForm0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.leftBrac = 2988;
      JSJshopVars.rightPar = (-1846);
      jSPredicateForm0.addElement((Object) null);
      jSPredicateForm0.removeElement(object0);
      JSJshopVars.verticalL = 2951;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 422;
      Integer integer0 = new Integer(422);
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.backquote = (-317986229);
      jSPredicateForm0.add(object0);
      jSPredicateForm0.removeElement(integer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<String, Integer> function2 = unaryOperator1.andThen((Function<? super String, ? extends Integer>) function1);
      Function.identity();
      Function<Integer, String> function3 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function3).apply(anyInt());
      Function<Object, String> function4 = function1.andThen((Function<? super Integer, ? extends String>) function3);
      Function<String, Object> function5 = unaryOperator0.compose((Function<? super String, ?>) function1);
      Function.identity();
      Function.identity();
      function1.apply(function5);
      Function<Object, String> function6 = function1.andThen((Function<? super Integer, ? extends String>) function4);
      Function.identity();
      Function<Object, Object> function7 = Function.identity();
      function1.andThen((Function<? super Integer, ?>) function1);
      function6.compose((Function<? super JSTerm, ?>) function7);
      Function<Object, Object> function8 = function1.andThen((Function<? super Integer, ?>) function7);
      function6.compose((Function<? super String, ?>) function5);
      function7.compose((Function<? super Integer, ?>) function1);
      function7.andThen((Function<? super Object, ?>) function6);
      function1.compose((Function<? super Object, ?>) function1);
      function1.apply(function7);
      Function<Object, Object> function9 = unaryOperator0.compose((Function<? super Object, ?>) function7);
      function9.compose((Function<? super String, ?>) function8);
      function9.compose((Function<? super String, ?>) unaryOperator1);
      function9.andThen((Function<? super Object, ? extends String>) function4);
      unaryOperator0.andThen((Function<? super Object, ?>) function9);
      Function.identity();
      Function<Object, String> function10 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      Function<String, String> function11 = unaryOperator1.andThen((Function<? super String, ? extends String>) function6);
      Function.identity();
      function11.apply("L;xj)$$W{1BjXUW|x!f");
      function2.andThen((Function<? super Integer, ? extends Integer>) function1);
      function4.apply(function11);
      Function.identity();
      unaryOperator0.compose((Function<? super String, ?>) function10);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("", stringBuffer0.toString());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = new Integer((-3319));
      SystemInUtil.addInputLine("E9LY");
      Integer integer1 = new Integer((-14506066));
      Integer integer2 = new Integer((-3319));
      Integer integer3 = new Integer((-3319));
      Integer integer4 = new Integer((-3));
      Integer integer5 = new Integer(0);
      Integer integer6 = new Integer((-14506066));
      Integer integer7 = new Integer(471);
      Integer integer8 = new Integer((-3319));
      Integer integer9 = new Integer(2117);
      Integer integer10 = new Integer((-405));
      Integer integer11 = new Integer((-3));
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("E9LY");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KiT j]iXi=4;n5#o*Dl");
      int int0 = (-18619835);
      Integer integer0 = new Integer((-3319));
      Integer integer1 = new Integer((-18619835));
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("5h9QTcAxwZ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Integer integer0 = new Integer((-2));
      unaryOperator1.apply(integer0);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ?>) unaryOperator2);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      Function.identity();
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator2);
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator6.compose((Function<? super Integer, ?>) unaryOperator5);
      jSTerm1.firstElement();
      UnaryOperator.identity();
      unaryOperator4.apply(streamTokenizer1);
      UnaryOperator<Object> unaryOperator8 = UnaryOperator.identity();
      unaryOperator8.andThen((Function<? super Object, ?>) unaryOperator7);
      unaryOperator6.apply(unaryOperator8);
      UnaryOperator.identity();
      Function.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Qn");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) stringReader0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.ensureCapacity((-3));
      jSSubstitution0.removeElements(jSSubstitution1);
      jSSubstitution3.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      jSSubstitution8.addAll((Collection) jSSubstitution5);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      System.setCurrentTimeMillis(91);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1177L);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("5h9QTcAxwZ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Integer integer0 = new Integer((-1));
      unaryOperator1.apply(integer0);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ?>) unaryOperator2);
      UnaryOperator.identity();
      Function.identity();
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator2);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) unaryOperator3);
      jSTerm1.firstElement();
      UnaryOperator.identity();
      unaryOperator4.apply("");
      unaryOperator2.apply("%%%");
      unaryOperator4.andThen((Function<? super Object, ?>) unaryOperator5);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis(1530L);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("5h9QTcAxwZ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Integer integer0 = new Integer((-2));
      unaryOperator1.apply(integer0);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ?>) unaryOperator2);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      Function.identity();
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator2);
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator6.compose((Function<? super Integer, ?>) unaryOperator5);
      jSTerm1.firstElement();
      UnaryOperator.identity();
      unaryOperator4.apply(streamTokenizer1);
      UnaryOperator<Object> unaryOperator8 = UnaryOperator.identity();
      unaryOperator8.andThen((Function<? super Object, ?>) unaryOperator7);
      unaryOperator6.apply(unaryOperator8);
      UnaryOperator.identity();
      Function.identity();
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function.identity();
      Function<Integer, String> function2 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = function1.andThen((Function<? super Integer, ? extends String>) function2);
      Function<String, Object> function4 = unaryOperator0.compose((Function<? super String, ?>) function1);
      Function.identity();
      function1.apply(function4);
      Function<Object, String> function5 = function1.andThen((Function<? super Integer, ? extends String>) function3);
      Function.identity();
      Function<Object, Object> function6 = Function.identity();
      function1.andThen((Function<? super Integer, ?>) function1);
      function5.compose((Function<? super JSTerm, ?>) function6);
      Function<Object, Object> function7 = function1.andThen((Function<? super Integer, ?>) function6);
      function5.compose((Function<? super String, ?>) function4);
      function6.compose((Function<? super Integer, ?>) function1);
      function6.andThen((Function<? super Object, ?>) function5);
      function1.compose((Function<? super Object, ?>) function1);
      function4.apply("L;xj)$$W{1BjXUW|x!f");
      Function.identity();
      Function.identity();
      function1.apply(function6);
      Function<Object, Object> function8 = unaryOperator0.compose((Function<? super Object, ?>) function6);
      Function.identity();
      function8.compose((Function<? super String, ?>) function7);
      function8.andThen((Function<? super Object, ? extends String>) function3);
      function1.apply(function4);
      unaryOperator0.andThen((Function<? super Object, ?>) function8);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      Function.identity();
      Function.identity();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = new Object();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Object object1 = new Object();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<String, Integer> function3 = unaryOperator1.andThen((Function<? super String, ? extends Integer>) function2);
      Function<Integer, Integer> function4 = Function.identity();
      Function<Integer, String> function5 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function6 = function2.andThen((Function<? super Integer, ? extends String>) function5);
      unaryOperator0.compose((Function<? super String, ?>) function3);
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function7);
      Function.identity();
      function7.apply(function1);
      Function.identity();
      Function<Object, Object> function9 = function1.andThen((Function<? super Integer, ?>) function8);
      function2.apply(function3);
      unaryOperator0.compose((Function<? super Object, ?>) function8);
      Function<String, Integer> function10 = unaryOperator1.andThen((Function<? super String, ? extends Integer>) function3);
      function1.apply(function9);
      function2.compose((Function<? super Integer, ?>) function8);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) unaryOperator2);
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      function10.andThen((Function<? super Integer, ? extends String>) function6);
      Function<Integer, Integer> function11 = unaryOperator3.andThen((Function<? super Integer, ? extends Integer>) function4);
      function11.andThen((Function<? super Integer, ? extends String>) function6);
      function3.andThen((Function<? super Integer, ? extends Integer>) function11);
      unaryOperator2.apply(unaryOperator1);
      Function.identity();
      unaryOperator2.compose((Function<? super String, ?>) function3);
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function2);
      function2.apply(function10);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MiT j]iXi=4;n5#K*Dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar(32);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Function<Object, Object> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.assignFailure();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) function0);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, Object> function1 = Function.identity();
      unaryOperator3.andThen((Function<? super String, ?>) unaryOperator2);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super Integer, ?>) function1);
      jSTerm0.firstElement();
      unaryOperator1.compose((Function<? super JSTerm, ?>) unaryOperator4);
      UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Object, ?>) unaryOperator2);
      unaryOperator0.apply(unaryOperator3);
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function.identity();
      Function<Integer, String> function2 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = function1.andThen((Function<? super Integer, ? extends String>) function2);
      Function<String, Object> function4 = unaryOperator0.compose((Function<? super String, ?>) function1);
      Function.identity();
      function1.apply(function4);
      Function<Object, String> function5 = function1.andThen((Function<? super Integer, ? extends String>) function3);
      Function.identity();
      Function<Object, Object> function6 = Function.identity();
      function1.andThen((Function<? super Integer, ?>) function1);
      function5.compose((Function<? super JSTerm, ?>) function6);
      Function<Object, Object> function7 = function1.andThen((Function<? super Integer, ?>) function6);
      function5.compose((Function<? super String, ?>) function4);
      function6.compose((Function<? super Integer, ?>) function1);
      function6.andThen((Function<? super Object, ?>) function5);
      function1.compose((Function<? super Object, ?>) function1);
      function4.apply("L;xj)$$W{1BjXUW|x!f");
      Function.identity();
      Function.identity();
      function1.apply(function6);
      Function<Object, Object> function8 = unaryOperator0.compose((Function<? super Object, ?>) function6);
      Function.identity();
      function8.compose((Function<? super String, ?>) function7);
      function8.andThen((Function<? super Object, ? extends String>) function3);
      function1.apply(function4);
      unaryOperator0.andThen((Function<? super Object, ?>) function8);
      Function.identity();
      Function<Object, String> function9 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      Function.identity();
      Function.identity();
      unaryOperator0.compose((Function<? super String, ?>) function9);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Integer> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = predicate1.negate();
      Predicate<Integer> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate1);
      Predicate<Integer> predicate5 = predicate3.negate();
      predicate1.negate();
      Predicate<Integer> predicate6 = Predicate.isEqual((Object) "planningdomain:");
      Predicate<Integer> predicate7 = predicate6.and(predicate3);
      Predicate<Integer> predicate8 = predicate7.or(predicate1);
      Predicate<Integer> predicate9 = Predicate.isEqual((Object) predicate2);
      Predicate<Integer> predicate10 = predicate5.negate();
      Integer integer0 = new Integer((-1316));
      predicate7.test(integer0);
      predicate9.negate();
      Predicate<Integer> predicate11 = predicate1.and(predicate2);
      Predicate<Integer> predicate12 = predicate11.negate();
      Predicate<Integer> predicate13 = predicate11.and(predicate10);
      Predicate<Integer> predicate14 = predicate10.negate();
      Integer integer1 = new Integer(1440);
      predicate2.test(integer1);
      predicate12.and(predicate13);
      Predicate<Integer> predicate15 = predicate3.negate();
      predicate15.negate();
      Predicate<String> predicate16 = Predicate.isEqual((Object) predicate7);
      predicate16.or(predicate4);
      predicate8.negate();
      predicate16.test("planningdomain:");
      predicate16.test(")");
      predicate16.negate();
      jSPredicateForm0.removeIf(predicate14);
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Integer integer0 = new Integer((-3319));
      Integer integer1 = new Integer((-3319));
      jSPredicateForm0.print();
      Integer integer2 = new Integer((-1790148257));
      Integer integer3 = new Integer((-934));
      Integer integer4 = new Integer((-3319));
      Integer integer5 = new Integer((-1357));
      Integer integer6 = new Integer(2682);
      Integer integer7 = new Integer(417);
      Integer integer8 = new Integer((-1677));
      Integer integer9 = new Integer((-92));
      Integer integer10 = new Integer((-934));
      Integer integer11 = new Integer(1850);
      Integer integer12 = new Integer(1395);
      Integer integer13 = new Integer(1768);
      assertFalse(integer13.equals((Object)integer12));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Integer> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate1);
      Predicate<Integer> predicate4 = predicate1.negate();
      Predicate<JSTerm> predicate5 = Predicate.isEqual((Object) predicate0);
      predicate2.or(predicate0);
      Predicate<Integer> predicate6 = Predicate.isEqual((Object) predicate5);
      Predicate<Integer> predicate7 = predicate0.negate();
      predicate4.negate();
      predicate1.and(predicate1);
      predicate4.negate();
      Predicate<Integer> predicate8 = Predicate.isEqual((Object) predicate7);
      predicate8.negate();
      Predicate<Integer> predicate9 = predicate7.and(predicate8);
      predicate9.negate();
      predicate1.and(predicate6);
      Predicate<String> predicate10 = Predicate.isEqual((Object) predicate6);
      Predicate<String> predicate11 = predicate10.or(predicate3);
      predicate1.negate();
      predicate11.test((String) null);
      predicate11.test("5@[|Ps2m(");
      predicate10.negate();
      jSPredicateForm0.removeIf(predicate8);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator1);
      jSTerm0.sort(comparator0);
      jSTerm0.setSize(0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SystemInUtil.addInputLine(".>^>VLGj");
      SystemInUtil.addInputLine(".>^>VLGj");
      SystemInUtil.addInputLine("");
      SystemInUtil.addInputLine("/C}oQEao\u0001Vz!\"ux");
      SystemInUtil.addInputLine(".>^>VLGj");
      SystemInUtil.addInputLine("/C}oQEao\u0001Vz!\"ux");
      SystemInUtil.addInputLine("Hx=?Us$J>;|t~");
      SystemInUtil.addInputLine("(+eCKYgAU@W");
      SystemInUtil.addInputLine(": unexpected EOF");
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("7.0");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SystemInUtil.addInputLine(".>^>VBL~j");
      SystemInUtil.addInputLine("/C}o9Eao\u0007V|z!\"u|F");
      SystemInUtil.addInputLine(".>^>VBL~j");
      SystemInUtil.addInputLine("Hx=?Us$J>;|t~");
      SystemInUtil.addInputLine((String) null);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(+eCKYgAU@W");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MiT j]iXi=4;n5#K*Dl");
      Integer integer0 = new Integer(440);
      int int0 = 381;
      Integer integer1 = new Integer(381);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
