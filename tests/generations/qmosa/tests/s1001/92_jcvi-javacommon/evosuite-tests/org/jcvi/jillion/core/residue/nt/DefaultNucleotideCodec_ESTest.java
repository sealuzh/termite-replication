/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 05:12:43 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor((byte[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.4956522855516075
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Range range0 = Range.ofLength(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 3331);
      assertEquals(0, int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.iterator(byteArray0, range0);
      long long0 = defaultNucleotideCodec1.getUngappedLength(byteArray0);
      assertEquals(3L, long0);
      
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec3.toString(byteArray0);
      assertEquals("AGT", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "AGT";
      linkedList0.toArray(stringArray0);
      Nucleotide nucleotide1 = Nucleotide.Weak;
      linkedList0.add(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec4.isGap(byteArray1, (-1183));
      assertFalse(boolean0);
      
      defaultNucleotideCodec2.getGapOffsets(byteArray0);
      defaultNucleotideCodec1.getUngappedLength(byteArray1);
      assertEquals(4, byteArray1.length);
      
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0, range0);
      byte[] byteArray2 = defaultNucleotideCodec0.encode((-1), iterator0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)18, (byte) (-32)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)0}, byteArray2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2436550879857164
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Amino;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      Range range0 = Range.ofLength(1301L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      int int0 = 3331;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 3331);
      defaultNucleotideCodec0.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 1300 ]/0B is out of range of sequence which is only [ 0 .. 1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3389235583173336
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Range range0 = Range.ofLength(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 3331);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide1 = Nucleotide.Thymine;
      Set<Nucleotide> set1 = nucleotide1.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.toString(byteArray0);
      Integer integer0 = new Integer((-4906));
      Integer integer1 = new Integer(2086);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer1;
      linkedList0.toArray(integerArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec1.decode(byteArray1, 0);
      byte[] byteArray2 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.getGapOffsets(byteArray2);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2842523161738857
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      linkedList0.offerLast(nucleotide0);
      linkedList0.removeLastOccurrence(defaultNucleotideCodec0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Nucleotide nucleotide1 = Nucleotide.Amino;
      defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 253);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 253);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.4819292408026694
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      long long0 = 0L;
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Range range0 = Range.of(0L, 0L);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 0);
      defaultNucleotideCodec0.iterator(byteArray0, range0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedLength(byteArray0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(338);
      Integer integer2 = new Integer(1431655765);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.isGap(byteArray0, 12);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.iterator(byteArray1, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 0 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode((byte[]) null, 4L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-89);
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte)10;
      byteArray1[5] = (byte)14;
      byteArray1[6] = (byte)10;
      byteArray1[7] = (byte) (-56);
      byteArray1[8] = (byte) (-104);
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap((byte[]) null, 1518);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9663881312694826
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-481));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer.getInteger("e/gth can not be lessthan 0");
      Integer integer1 = Integer.getInteger("e/gth can not be lessthan 0", integer0);
      Integer integer2 = new Integer((-481));
      Integer.min((-481), (-481));
      Integer[] integerArray0 = new Integer[10];
      Integer integer3 = Integer.getInteger("e/gth can not be lessthan 0", (-481));
      Integer integer4 = new Integer((-481));
      integerArray0[5] = integer3;
      integerArray0[1] = integer0;
      integerArray0[4] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = null;
      Integer.getInteger("3r?gLd1]eA&AbA", integerArray0[5]);
      Integer.getInteger("hl$5_WD(rYJs27%");
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      Integer.getInteger("");
      Integer integer5 = Integer.getInteger("e/gth can not be lessthan 0", (int) integerArray0[6]);
      Integer.divideUnsigned(7, (int) integerArray0[6]);
      Integer.remainderUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Integer.getInteger((String) null, integer5);
      integerArray0[7] = null;
      Integer[] integerArray1 = linkedList0.toArray(integerArray0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      linkedList0.toArray(integerArray1);
      defaultNucleotideCodec0.isGap(byteArray0, (-583));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.valueOf("INSTANCE");
      assertSame(defaultNucleotideCodec1, defaultNucleotideCodec0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9954171502194566
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)16;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3692800724691696
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
      
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getLength();
      Range range1 = Range.ofLength(0L);
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("-", string0);
      
      range1.toString(range_CoordinateSystem1);
      range0.intersects(range1);
      range0.intersection(range1);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 338);
      range0.toString(range_CoordinateSystem0);
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 337);
      assertEquals(0, int0);
      
      defaultNucleotideCodec0.isGap(byteArray0, 1431655765);
      Range.parseRange("[ 0 .. 0 ]/0B");
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, (long) 0, 795L);
      defaultNucleotideCodec0.iterator(byteArray0, range1);
      int int1 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 338);
      assertEquals(337, int1);
      
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 1431655765);
      assertFalse(boolean0);
      
      defaultNucleotideCodec0.iterator(byteArray0);
      List<Integer> list0 = defaultNucleotideCodec0.getGapOffsets(byteArray0);
      assertTrue(list0.contains(0));
      assertEquals(5, byteArray0.length);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.399665523913394
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-490L), 0L);
      defaultNucleotideCodec0.toString(byteArray0);
      range1.toString(range_CoordinateSystem1);
      range0.intersects(range1);
      range0.intersection(range1);
      range0.toString(range_CoordinateSystem0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-1183));
      defaultNucleotideCodec0.isGap(byteArray0, 1431655765);
      Range.parseRange("[ 0 .. 0 ]/0B");
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, (long) 1, 795L);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, (-1183));
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("o_+e[N|co1[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.o_+e[N|co1[
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3685636450538805
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getLength();
      Range range1 = Range.ofLength(0L);
      defaultNucleotideCodec0.toString(byteArray0);
      range1.toString(range_CoordinateSystem1);
      range0.intersects(range1);
      range0.intersection(range1);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 338);
      range0.toString(range_CoordinateSystem0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 337);
      int int0 = 1431655765;
      defaultNucleotideCodec0.isGap(byteArray0, 1431655765);
      Range.parseRange("[ 0 .. 0 ]/0B");
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, (long) 0, 795L);
      defaultNucleotideCodec0.iterator(byteArray0, range1);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 338);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, 338);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2635407536401413
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      Nucleotide nucleotide1 = Nucleotide.Gap;
      nucleotide1.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Byte byte0 = new Byte((byte)44);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 15);
      assertEquals(1, int0);
      assertEquals(5, byteArray0.length);
      
      defaultNucleotideCodec0.iterator(byteArray1);
      int int1 = defaultNucleotideCodec1.getNumberOfGaps(byteArray1);
      assertEquals(1, int1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.ofLength(0L);
      range0.toString();
      String string0 = "org.jcvi.jillion.core.Range";
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string1 = "end of file reached before entire block was skipped";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)10;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte) (-98);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(2999, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.876156142363588
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Amino;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      Set<Nucleotide> set0 = nucleotide1.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 2L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 2 corresponds to encodedIndex 5  encodedglyph length is 5
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-481));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer integer1 = Integer.getInteger("le/gth can not be less than 0");
      Integer.getInteger((String) null);
      Integer integer2 = new Integer((-481));
      Integer.min((-481), (-481));
      Integer[] integerArray0 = new Integer[10];
      integerArray0[5] = null;
      integerArray0[1] = integer0;
      integerArray0[4] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = null;
      Integer.getInteger("Unknown", integer1);
      integerArray0[5] = null;
      integerArray0[6] = integer0;
      Integer integer3 = new Integer((int) integerArray0[6]);
      Integer.remainderUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Integer.getInteger((String) null, integer3);
      integerArray0[7] = null;
      linkedList0.toArray(integerArray0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)78;
      linkedList0.toArray(integerArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2128679513998635
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 375);
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)4;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)71);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5097408532019405
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte) (-62);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.797208748908024
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.toString(byteArray0);
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.iterator(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)0);
      boolean boolean0 = defaultNucleotideCodec1.isGap(byteArray0, (byte)0);
      assertFalse(boolean0);
      
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec3.getUngappedOffsetFor(byteArray0, (byte)0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-481));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer.getInteger("l)/gth cSn not b ess than 0");
      String string0 = null;
      Integer.getInteger((String) null);
      Integer integer1 = new Integer((-481));
      Integer.min((-481), (-481));
      Integer[] integerArray0 = new Integer[10];
      int int0 = 5563;
      Integer.getInteger("hl$5_D(rYJs27%", 5563);
      integerArray0[5] = null;
      integerArray0[1] = integer0;
      integerArray0[4] = integer1;
      integerArray0[3] = integer0;
      Iterator<Nucleotide> iterator0 = linkedList0.iterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(9, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.241208850148748
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getLength();
      Range range1 = Range.of(range_CoordinateSystem1, (-490L), 0L);
      defaultNucleotideCodec0.toString(byteArray0);
      range1.toString(range_CoordinateSystem1);
      range0.intersects(range1);
      range0.intersection(range1);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 338);
      range0.toString(range_CoordinateSystem0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-1183));
      int int0 = 1431655765;
      defaultNucleotideCodec0.isGap(byteArray0, 1431655765);
      Range.parseRange("[ 0 .. 0 ]/0B");
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3755190043596937
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 338;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Range range0 = Range.of(0L, 0L);
      long long0 = (-490L);
      range0.toString();
      defaultNucleotideCodec0.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, 338);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.isGap(byteArray0, 0);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1026662596199324
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Gap;
      Set<Nucleotide> set1 = nucleotide1.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec0.encode(nucleotide0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)8;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-2144325581));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.049419009260591
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      long long0 = 0L;
      Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-490L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2L, (-490L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-87);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.ofLength(8L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.520805078028692
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = (-481);
      Integer integer0 = new Integer((-481));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer.getInteger("le/gth can not be less than 0");
      String string0 = null;
      Integer.getInteger((String) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-57);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor((byte[]) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.0497978423100225
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-481));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer.getInteger("e/gth can not be lessthan 0");
      Integer integer1 = Integer.getInteger("e/gth can not be lessthan 0", integer0);
      Integer integer2 = new Integer((-481));
      Integer.min((-481), (-481));
      Integer[] integerArray0 = new Integer[10];
      Integer integer3 = Integer.getInteger("e/gth can not be lessthan 0", (-481));
      Integer integer4 = new Integer((-481));
      integerArray0[5] = integer3;
      integerArray0[1] = integer0;
      integerArray0[4] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = null;
      Integer.getInteger("3r?gLd1]eA&AbA", integerArray0[5]);
      Integer.getInteger("hl$5_WD(rYJs27%");
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      Integer.getInteger("");
      Integer integer5 = Integer.getInteger("e/gth can not be lessthan 0", (int) integerArray0[6]);
      Integer.divideUnsigned((int) integerArray0[6], (int) integerArray0[6]);
      Integer.compareUnsigned((int) integerArray0[3], (int) integerArray0[6]);
      Integer.remainderUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Integer.getInteger((String) null, integer5);
      integerArray0[7] = null;
      Integer.compare(1, 26);
      Integer[] integerArray1 = linkedList0.toArray(integerArray0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      linkedList0.toArray(integerArray1);
      defaultNucleotideCodec0.isGap(byteArray0, (int) integerArray0[1]);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.4012711235146753
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Range range0 = Range.ofLength(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 3331);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.iterator(byteArray0, range0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-735));
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      // Undeclared exception!
      try { 
        linkedList0.listIterator((-1208));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1208, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.3786245420563206
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)8;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-2147483644));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)13;
      Range range0 = Range.of((long) (byte)1);
      defaultNucleotideCodec0.iterator(byteArray0, range0);
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.413359831983838
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-490L), 3L);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.isGap(byteArray0, (-1982292596));
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.isGap(byteArray1, 2146839145);
      DefaultNucleotideCodec.values();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray1, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 0 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-481));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer integer1 = Integer.getInteger("length can not be less than 0");
      Integer.getInteger((String) null);
      Integer integer2 = new Integer((-481));
      Integer.min(1338, (-481));
      Integer[] integerArray0 = new Integer[8];
      integerArray0[5] = null;
      integerArray0[1] = integer0;
      integerArray0[4] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = null;
      Integer.getInteger("Unknown", integer1);
      integerArray0[5] = null;
      integerArray0[6] = integer0;
      Integer integer3 = new Integer((int) integerArray0[6]);
      Integer.remainderUnsigned((int) integerArray0[1], (-1741));
      Integer.getInteger((String) null, integer3);
      integerArray0[7] = null;
      linkedList0.toArray(integerArray0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-83);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)78;
      byteArray1[1] = (byte)78;
      byteArray1[2] = (byte)78;
      byteArray1[3] = (byte) (-38);
      byteArray1[4] = (byte) (-83);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)78;
      byteArray1[7] = (byte) (-83);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray1, 1955L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 1955 corresponds to encodedIndex 981  encodedglyph length is 8
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)30}, byteArray0);
      
      Range.ofLength(28L);
      Nucleotide nucleotide1 = Nucleotide.NotAdenine;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-128)}, byteArray1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.ofLength(0L);
      range0.toString();
      String string0 = "org.jcvi.jillion.core.Range";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)36;
      byteArray0[8] = (byte) (-81);
      defaultNucleotideCodec0.decode(byteArray0, (byte)6);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Q!4wZ!UwGRi", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Q!4wZ!UwGRi into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.876156142363588
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-481));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer integer1 = Integer.getInteger("le/gth can not be less than 0");
      Integer.getInteger((String) null);
      Integer integer2 = new Integer((-481));
      Integer.min((-481), (-481));
      Integer[] integerArray0 = new Integer[10];
      Integer.getInteger("hl$5_D(rYJs27%", 5563);
      integerArray0[5] = null;
      integerArray0[1] = integer0;
      integerArray0[4] = integer2;
      integerArray0[3] = integer0;
      Integer.min((-478), (int) integerArray0[1]);
      integerArray0[4] = null;
      Integer.getInteger("Unknhwn", integer1);
      integerArray0[5] = null;
      integerArray0[6] = integer0;
      Integer integer3 = new Integer((int) integerArray0[6]);
      Integer.getInteger("BYTE_TO_GLYPH_MAP", (int) integerArray0[3]);
      Integer.remainderUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Integer.getInteger((String) null, integer3);
      integerArray0[7] = null;
      Integer[] integerArray1 = linkedList0.toArray(integerArray0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      byte[] byteArray0 = new byte[2];
      Integer.sum((-4167), (-481));
      byteArray0[0] = (byte)78;
      linkedList0.toArray(integerArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1417));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte) (-56);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals((-90389434L), long0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.9663881312694826
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-481));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer integer1 = Integer.getInteger("l)/gth cSn not b ess than 0");
      Integer.getInteger((String) null);
      Integer integer2 = new Integer((-481));
      Integer.min((-481), (-481));
      Integer[] integerArray0 = new Integer[10];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)72;
      defaultNucleotideCodec0.isGap(byteArray0, (byte) (-75));
      Integer.getInteger("hl$5_D(rYJs27%", 5563);
      integerArray0[5] = null;
      integerArray0[1] = integer0;
      Integer.compare(5563, (-481));
      integerArray0[4] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = null;
      Integer.sum(5563, 256);
      Integer.min((int) integerArray0[3], (-481));
      integerArray0[5] = null;
      integerArray0[6] = integer0;
      Integer.remainderUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Integer.getInteger((String) null, integer1);
      integerArray0[7] = null;
      Integer[] integerArray1 = linkedList0.toArray(integerArray0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      byte[] byteArray1 = new byte[2];
      Integer.compare(5819, (int) integerArray0[6]);
      Integer.sum((-4167), (-481));
      byteArray1[0] = (byte)78;
      Integer[] integerArray2 = linkedList0.toArray(integerArray1);
      assertSame(integerArray0, integerArray2);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.970620935502287
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-481));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer.getInteger("le/gth can not be less than 0");
      Integer integer1 = Integer.getInteger("le/gth can not be less than 0", integer0);
      Integer integer2 = new Integer((-481));
      int int0 = new Integer((-481));
      Integer[] integerArray0 = new Integer[10];
      Integer integer3 = Integer.getInteger("le/gth can not be less than 0", (-481));
      Integer.getInteger("hl$5_WD(rYJs27%", 5563);
      integerArray0[5] = integer3;
      integerArray0[1] = integer0;
      integerArray0[4] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = null;
      Integer.getInteger("[=hWOI;bd+:PKL@", integerArray0[5]);
      Integer.getInteger("hl$5_WD(rYJs27%");
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      Integer integer4 = Integer.getInteger("le/gth can not be less than 0", (int) integerArray0[6]);
      Integer.divideUnsigned(767, 13);
      Integer.remainderUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Integer.getInteger((String) null, integer4);
      integerArray0[7] = null;
      Integer[] integerArray1 = linkedList0.toArray(integerArray0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)78;
      linkedList0.toArray(integerArray1);
      defaultNucleotideCodec0.isGap(byteArray0, (int) integerArray0[3]);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.2731005721496764
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte) (-46), (byte) (-32)}, byteArray0);
      
      Nucleotide nucleotide1 = Nucleotide.Gap;
      Set<Nucleotide> set1 = nucleotide1.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      assertEquals(4, byteArray1.length);
      
      Byte byte0 = new Byte((byte)102);
      Nucleotide nucleotide2 = Nucleotide.NotAdenine;
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide2);
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray2, (byte)102);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-128)}, byteArray2);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.ofLength(0L);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-3);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 244);
      range0.toString();
      String string0 = "org.jcvi.jillion.core.Range";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Q!4wZ!UwGRi", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Q!4wZ!UwGRi into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.8328218701969083
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-481));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer integer1 = Integer.getInteger("le/gth can not be less than 0");
      Integer.getInteger((String) null);
      Integer integer2 = new Integer((-481));
      Integer.min((-481), (-481));
      Integer[] integerArray0 = new Integer[10];
      integerArray0[5] = null;
      integerArray0[1] = integer0;
      integerArray0[4] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = null;
      Integer.getInteger("Unknown", integer1);
      integerArray0[5] = null;
      integerArray0[6] = integer0;
      Integer integer3 = new Integer((int) integerArray0[6]);
      Integer.remainderUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.toString(byteArray0);
      Integer integer4 = new Integer(1073);
      Integer integer5 = new Integer((int) integerArray0[1]);
      Integer[] integerArray1 = linkedList0.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-497));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer integer1 = Integer.getInteger("e/gth canpnt be lessth7 0");
      String string0 = null;
      Integer integer2 = new Integer((-497));
      Integer.min((-497), (-497));
      Integer.remainderUnsigned((-47), (-47));
      Integer[] integerArray0 = new Integer[10];
      Integer.getInteger((String) null, (Integer) null);
      Integer integer3 = new Integer((-497));
      integerArray0[2] = null;
      integerArray0[1] = integer0;
      integerArray0[4] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = null;
      Integer.getInteger("3r?gLd1]edzAbA", integer1);
      Integer.getInteger("hl$5_WD(rYJs27%");
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      Integer integer4 = new Integer((int) integerArray0[3]);
      Integer.getInteger("e/gth canpnt be lessth7 0", (int) integerArray0[6]);
      Integer.divideUnsigned((int) integerArray0[6], (int) integerArray0[6]);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)9;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.445652591131689
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Range range0 = Range.ofLength(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(5504L, 5504L);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      range0.getLength();
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 3331);
      defaultNucleotideCodec0.iterator(byteArray0, range0);
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.isGap(byteArray0, 1191864289);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.isGap(byteArray1, 1191864289);
      DefaultNucleotideCodec.values();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.iterator(byteArray1, range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 5504 .. 5504 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.687420655767592
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)99;
      defaultNucleotideCodec0.iterator(byteArray0);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-117);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byteArray0[5] = (byte)11;
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      byteArray0[6] = (byte)0;
      defaultNucleotideCodec0.iterator(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-117);
      byteArray1[2] = (byte) (-117);
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte) (-91);
      byteArray1[5] = (byte)84;
      byteArray1[6] = (byte)99;
      byteArray1[7] = (byte)84;
      int int0 = 1359415596;
      Range range0 = Range.of((long) (byte) (-117), 1L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-65);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.ofLength(8L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-481));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer.getInteger("l)/gth cSn not b ess than 0");
      Integer.getInteger((String) null);
      Integer integer1 = new Integer((-481));
      Integer.min((-481), (-481));
      Integer.sum((-481), (-481));
      Integer[] integerArray0 = new Integer[10];
      Integer integer2 = Integer.getInteger("h|$5_D(rFR27%", 2064);
      Integer.min(4365, 178);
      integerArray0[5] = integer2;
      integerArray0[1] = integer0;
      Integer.compare(2064, (-481));
      integerArray0[4] = integerArray0[1];
      integerArray0[3] = integer0;
      integerArray0[4] = null;
      Integer integer3 = new Integer((-481));
      Integer integer4 = new Integer((int) integerArray0[5]);
      Integer.min((int) integerArray0[3], (-481));
      integerArray0[5] = null;
      integerArray0[6] = integer0;
      Integer integer5 = new Integer((int) integerArray0[6]);
      Integer.remainderUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Integer.getInteger((String) null, (Integer) null);
      integerArray0[7] = null;
      Integer[] integerArray1 = linkedList0.toArray(integerArray0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Integer.sum((-4167), (-481));
      linkedList0.toArray(integerArray1);
      defaultNucleotideCodec0.toString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = (-481);
      Integer integer0 = new Integer((-481));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)97;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.0059695736425467
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)109;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)0);
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(835, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.365349639944498
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-481));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer.getInteger("l)/gth cSn not b ess than 0");
      Integer.getInteger((String) null);
      Integer integer1 = new Integer((-481));
      Integer.min((-481), (-481));
      Integer[] integerArray0 = new Integer[10];
      Integer integer2 = Integer.getInteger("hl$5_D(rYJs27%", 2064);
      integerArray0[5] = integer2;
      integerArray0[1] = integer0;
      Integer.compare(2064, (-481));
      integerArray0[4] = integerArray0[1];
      Integer.remainderUnsigned((int) integerArray0[4], (-1274));
      integerArray0[3] = integer0;
      integerArray0[4] = null;
      Integer integer3 = new Integer((-481));
      Integer integer4 = new Integer((int) integerArray0[5]);
      Integer.min((int) integerArray0[3], (-481));
      integerArray0[5] = null;
      integerArray0[6] = integer0;
      Integer integer5 = new Integer((int) integerArray0[6]);
      Integer.remainderUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Integer.getInteger((String) null, (Integer) null);
      integerArray0[7] = null;
      Integer[] integerArray1 = linkedList0.toArray(integerArray0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Integer.compare((int) integer3, (int) integerArray0[6]);
      Integer.sum((-4167), (-481));
      linkedList0.toArray(integerArray1);
      Iterator<Nucleotide> iterator0 = linkedList0.iterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) integerArray0[3], iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.8612158573490882
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)11;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byte[] byteArray1 = new byte[6];
      Nucleotide nucleotide0 = Nucleotide.Amino;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte)87;
      byteArray1[2] = (byte)24;
      byteArray1[3] = (byte) (-101);
      byteArray1[4] = (byte) (-30);
      byteArray1[5] = (byte)14;
      defaultNucleotideCodec0.iterator(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-481));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer integer1 = Integer.getInteger("l)/gth cSn not b ess than 0");
      Integer.getInteger((String) null);
      Integer integer2 = new Integer((-481));
      Integer.min((-481), (-481));
      Integer[] integerArray0 = new Integer[10];
      Integer.getInteger("hl$5_D(rYJs27%", 5563);
      integerArray0[5] = null;
      integerArray0[1] = integer0;
      integerArray0[4] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = null;
      Integer.sum(5563, 256);
      Integer.getInteger("Unknhwn", integer1);
      Integer.min((int) integerArray0[3], (-481));
      integerArray0[5] = null;
      integerArray0[6] = integer0;
      Integer integer3 = new Integer((int) integerArray0[6]);
      Integer.remainderUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Integer.getInteger((String) null, integer3);
      integerArray0[7] = null;
      Integer[] integerArray1 = linkedList0.toArray(integerArray0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      byte[] byteArray1 = new byte[2];
      Integer.sum((-4167), (-481));
      byteArray1[0] = (byte)78;
      linkedList0.toArray(integerArray1);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)9;
      byte byte0 = (byte)44;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)8;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      Range range0 = Range.of(0L, 0L);
      range0.split((byte)7);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)81);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.805045374974761
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)0;
      defaultNucleotideCodec0.decode(byteArray0, 1L);
      byteArray0[2] = (byte)0;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-481));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer integer1 = Integer.getInteger("e/gth can not be lessthan 0");
      Integer integer2 = Integer.getInteger("e/gth can not be lessthan 0", integer0);
      Integer integer3 = new Integer((-481));
      Integer.min((-481), (-481));
      Integer[] integerArray0 = new Integer[10];
      Integer integer4 = Integer.getInteger("e/gth can not be lessthan 0", (-481));
      Integer integer5 = new Integer((-481));
      integerArray0[6] = integer4;
      integerArray0[1] = integer0;
      integerArray0[4] = integer3;
      integerArray0[3] = integer0;
      integerArray0[4] = null;
      Integer.getInteger("3r?gLd1]eA&AbA", integer1);
      Integer.getInteger("hl$5_WD(rYJs27%");
      integerArray0[5] = integer2;
      integerArray0[6] = integer0;
      Integer.getInteger("");
      Integer integer6 = Integer.getInteger("e/gth can not be lessthan 0", (int) integerArray0[6]);
      Integer.divideUnsigned(7, (int) integerArray0[6]);
      Integer.compareUnsigned((int) integerArray0[3], (int) integerArray0[6]);
      Integer.remainderUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Integer.getInteger((String) null, integer6);
      integerArray0[7] = null;
      Integer.compare(1, 26);
      Integer[] integerArray1 = linkedList0.toArray(integerArray0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      linkedList0.toArray(integerArray1);
      defaultNucleotideCodec0.iterator(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 68;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Amino;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-95);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.574464215715726
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      byteArray0[0] = (byte)8;
      byte byte0 = (byte)8;
      defaultNucleotideCodec0.toString(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte)8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 8 corresponds to encodedIndex 8  encodedglyph length is 3
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.9051439184682946
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)11;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1073741824);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-28);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(10, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)98;
      byteArray0[1] = (byte)0;
      Nucleotide nucleotide0 = Nucleotide.Keto;
      byteArray0[2] = (byte)0;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
      
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((int) (byte)0, iterator0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 83;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-48);
      Range range0 = Range.of((long) (byte)0, (long) (byte)107);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0, range0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.719795995122553
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)109;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)0);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)32;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 697);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-481));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer.getInteger("e/gth can not be lessthan 0");
      Integer integer1 = Integer.getInteger("e/gth can not be lessthan 0", integer0);
      Integer integer2 = new Integer((-481));
      Integer.min((-481), (-481));
      Integer[] integerArray0 = new Integer[10];
      Integer integer3 = Integer.getInteger("e/gth can not be lessthan 0", (-481));
      Integer integer4 = new Integer((-481));
      integerArray0[5] = integer3;
      integerArray0[1] = integer0;
      integerArray0[4] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = null;
      Integer.getInteger("3r?gLd1]eA&AbA", integerArray0[5]);
      Integer.getInteger("hl$5_WD(rYJs27%");
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      Integer.getInteger("");
      Integer integer5 = Integer.getInteger("e/gth can not be lessthan 0", (int) integerArray0[6]);
      Integer.divideUnsigned((int) integerArray0[6], (int) integerArray0[6]);
      Integer.compareUnsigned((int) integerArray0[3], (int) integerArray0[6]);
      Integer.remainderUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Integer.getInteger((String) null, integer5);
      integerArray0[7] = null;
      Integer.compare(1, 26);
      Integer[] integerArray1 = linkedList0.toArray(integerArray0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      linkedList0.toArray(integerArray1);
      DefaultNucleotideCodec[] defaultNucleotideCodecArray0 = DefaultNucleotideCodec.values();
      assertEquals(1, defaultNucleotideCodecArray0.length);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil((byte[]) null, (-3094));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.88842796507346
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = (-481);
      Integer integer0 = new Integer((-481));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer integer1 = Integer.getInteger("length can not be less than 0");
      Integer.getInteger((String) null);
      Integer integer2 = new Integer((-481));
      Integer.min(1338, (-481));
      Integer[] integerArray0 = new Integer[8];
      integerArray0[5] = null;
      integerArray0[1] = integer0;
      integerArray0[4] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = null;
      Integer.getInteger("Unknown", integer1);
      integerArray0[5] = null;
      integerArray0[6] = integer0;
      Integer integer3 = new Integer((int) integerArray0[6]);
      Integer.getInteger((String) null, integer3);
      Integer.getInteger("");
      integerArray0[7] = null;
      linkedList0.toArray(integerArray0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-83);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.2091605937799432
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Keto;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 2147097687);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-785));
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 236L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 236 corresponds to encodedIndex 122  encodedglyph length is 5
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.052128844641025
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-481));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer.getInteger("e/gth can not be lessthan 0");
      Integer integer1 = Integer.getInteger("e/gth can not be lessthan 0", integer0);
      Integer integer2 = new Integer((-481));
      Integer.min((-481), (-481));
      Integer[] integerArray0 = new Integer[10];
      Integer integer3 = Integer.getInteger("e/gth can not be lessthan 0", (-481));
      Integer integer4 = new Integer((-481));
      integerArray0[5] = integer3;
      integerArray0[1] = integer0;
      integerArray0[4] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = null;
      Integer.getInteger("3r?gLd1]eA&AbA", integerArray0[5]);
      Integer.getInteger("hl$5_WD(rYJs27%");
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      Integer.getInteger("");
      Integer integer5 = Integer.getInteger("e/gth can not be lessthan 0", (int) integerArray0[6]);
      Integer.divideUnsigned(7, (int) integerArray0[6]);
      Integer.remainderUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Integer.getInteger((String) null, integer5);
      integerArray0[7] = null;
      Integer[] integerArray1 = linkedList0.toArray(integerArray0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      linkedList0.toArray(integerArray1);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, (-583));
      assertFalse(boolean0);
      
      int int0 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.365349639944498
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-481));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer.getInteger("l)/gth cSn not b ess than 0");
      Integer.getInteger((String) null);
      Integer integer1 = new Integer((-481));
      Integer.min((-481), (-481));
      Integer[] integerArray0 = new Integer[10];
      Integer integer2 = Integer.getInteger("hl$5_D(rYJs27%", 2064);
      integerArray0[5] = integer2;
      integerArray0[1] = integer0;
      Integer.compare(2064, (-481));
      integerArray0[4] = integerArray0[1];
      integerArray0[3] = integer0;
      integerArray0[4] = null;
      Integer integer3 = new Integer((-481));
      Integer integer4 = new Integer((int) integerArray0[5]);
      Integer.min((int) integerArray0[3], (-481));
      integerArray0[5] = null;
      integerArray0[6] = integer0;
      Integer integer5 = new Integer((int) integerArray0[6]);
      Integer.remainderUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Integer.getInteger((String) null, (Integer) null);
      integerArray0[7] = null;
      Integer[] integerArray1 = linkedList0.toArray(integerArray0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Integer.compare((int) integer3, (int) integerArray0[6]);
      Integer.sum((-4167), (-481));
      linkedList0.toArray(integerArray1);
      Iterator<Nucleotide> iterator0 = linkedList0.iterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) integerArray0[3], iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.805045374974761
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)98;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      defaultNucleotideCodec0.decode(byteArray0, 1L);
      byteArray0[2] = (byte)0;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.4211346608125623
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)13;
      byteArray0[1] = (byte)13;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)13;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)13;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)13;
      byteArray1[6] = (byte)13;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-481));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer.getInteger("l)/gth cSn not b ess than 0");
      Integer.getInteger((String) null);
      Integer integer1 = new Integer((-481));
      Integer.min((-481), (-481));
      Integer[] integerArray0 = new Integer[10];
      Integer integer2 = Integer.getInteger("h|$5_D(rFR27%", 2064);
      Integer.min(4365, 178);
      integerArray0[5] = integer2;
      integerArray0[1] = integer0;
      Integer.compare(2064, (-481));
      integerArray0[4] = integerArray0[1];
      integerArray0[3] = integer0;
      integerArray0[4] = null;
      Integer integer3 = new Integer((-481));
      Integer integer4 = new Integer((int) integerArray0[5]);
      Integer.min((int) integerArray0[3], (-481));
      integerArray0[5] = null;
      integerArray0[6] = integer0;
      Integer integer5 = new Integer((int) integerArray0[6]);
      Integer.remainderUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Integer.getInteger((String) null, (Integer) null);
      integerArray0[7] = null;
      Integer[] integerArray1 = linkedList0.toArray(integerArray0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Integer.compare((int) integer3, (int) integerArray0[6]);
      Integer.sum((-4167), (-481));
      linkedList0.toArray(integerArray1);
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 3555);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-481));
      Integer integer1 = Integer.getInteger("le/gth can not be less than 0");
      Integer.getInteger((String) null);
      Integer integer2 = new Integer((-481));
      Integer.min((-481), (-481));
      Integer[] integerArray0 = new Integer[10];
      Integer.getInteger("le/gth can not be less than 0", (-481));
      Integer.getInteger("hl$5_D(rYJs27%", (-481));
      integerArray0[5] = null;
      Integer.sum(32, 1319);
      integerArray0[1] = integer0;
      integerArray0[4] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = null;
      Integer.getInteger("[=hWOI;bd+:PKL@", integer1);
      Integer.getInteger("hl$5_D(rYJs27%");
      integerArray0[5] = null;
      integerArray0[6] = integer0;
      Integer integer3 = Integer.getInteger("le/gth can not be less than 0", (int) integerArray0[6]);
      Integer.remainderUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Integer.getInteger((String) null, integer3);
      integerArray0[7] = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, 1006);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.ofLength(0L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      String string0 = "org.jcvi.jillion.core.Range";
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-120);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-481));
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer integer1 = Integer.getInteger("le/gth can not be less than 0");
      Integer.getInteger((String) null);
      Integer integer2 = new Integer((-481));
      Integer.min((-481), (-481));
      Integer[] integerArray0 = new Integer[10];
      Integer.getInteger("le/gth can not be less than 0", (-481));
      Integer.getInteger("hl$5_D(rYJs27%");
      Integer.getInteger("hl$5_D(rYJs27%", 5563);
      integerArray0[5] = null;
      integerArray0[1] = integer0;
      integerArray0[4] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = null;
      Integer.getInteger("Unknwn", integer1);
      Integer.getInteger("hl$5_D(rYJs27%");
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      Integer integer3 = Integer.getInteger("le/gth can not be less than 0", (int) integerArray0[6]);
      Integer.divideUnsigned(767, 13);
      Integer.remainderUnsigned((int) integerArray0[1], (int) integerArray0[1]);
      Integer.getInteger((String) null, integer3);
      integerArray0[7] = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-41);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (-481));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -481
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }
}
