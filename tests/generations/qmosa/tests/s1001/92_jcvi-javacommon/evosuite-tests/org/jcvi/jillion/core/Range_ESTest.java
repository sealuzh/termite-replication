/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 05:31:44 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.66235762689943
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = (-9223372036854775782L);
      Long long1 = new Long((-9223372036854775782L));
      Range range0 = Range.of((-9223372036854775782L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long2 = 1368L;
      Range range1 = Range.ofLength(1368L);
      range0.equals(range1);
      Long long3 = new Long(1368L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(32766L, (-3546L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.4342614305148973
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(9223372036854772252L);
      Long long0 = new Long(9223372036854772252L);
      Object object0 = new Object();
      Range range1 = Range.of(9223372036854772252L, 9223372036854773896L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.801781447911144
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2251L);
      range0.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 1197L;
      Range range1 = Range.of(range_CoordinateSystem1, (-2088L), 1197L);
      Range range2 = range0.intersection(range1);
      Range range3 = range2.intersection(range0);
      Object object0 = new Object();
      range3.equals(range1);
      Long.divideUnsigned((-747L), 1197L);
      Range range4 = Range.of(488L);
      range4.intersection(range0);
      range1.getBegin();
      range4.equals(range3);
      Range.of((-2088L), 0L);
      long long1 = (-3705L);
      // Undeclared exception!
      try { 
        Range.ofLength((-3705L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.988551839881154
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 0L, 92L);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range range2 = Range.of(range_CoordinateSystem0, 92L, 92L);
      Range range3 = Range.of(92L);
      range2.equals(range3);
      Long long0 = new Long(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-128L), 1067L);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.882153053941146
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of(6957L, 6957L);
      long long0 = (-2147483648L);
      Range range1 = Range.of((-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2147483648L), 6957L);
      range1.equals(range2);
      long long1 = 6954L;
      Range range3 = Range.of(6957L, 6957L);
      range3.spliterator();
      range1.equals((Object) null);
      Long long2 = new Long((-1130L));
      Range range4 = range0.intersection(range2);
      Range.Builder range_Builder1 = new Range.Builder(range4);
      // Undeclared exception!
      try { 
        Range.of(9223372036854773766L, 1112L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.896422755152645
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of(6953L, 6953L);
      Range range1 = Range.of((-2147483648L));
      Long long0 = new Long((-2147483648L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range range2 = Range.of((-2147483648L));
      range1.equals(range2);
      Long.divideUnsigned(9223372036854775800L, 488L);
      Range.of((-2147483648L));
      Range range3 = range1.intersection(range0);
      range3.getBegin();
      Object object2 = new Object();
      range2.equals(object2);
      Object object3 = new Object();
      Long long1 = new Long(488L);
      Object object4 = new Object();
      range1.equals(long1);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.7795811905333467
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(6934L);
      Range range1 = Range.of((-2147483646L));
      Range.Builder range_Builder0 = new Range.Builder(6934L);
      range1.split(285L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2147483646L), 6934L);
      range1.equals(range2);
      Range.of(285L);
      range2.intersection(range0);
      Range.of(285L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.480683237656008
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(1823L);
      boolean boolean0 = range0.equals(consumer0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      
      Long long0 = new Long(3556L);
      Object object0 = new Object();
      Long long1 = new Long(749L);
      Range range1 = Range.of(296L);
      Range range2 = Range.of(0L, 2147483647L);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(1192L);
      Object object1 = new Object();
      Range range4 = Range.of(1192L, 1823L);
      range1.equals(range4);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertFalse(range4.equals((Object)range3));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.909890466075692
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2251L);
      Range range1 = Range.of(2251L, 2251L);
      Range range2 = range0.intersection(range1);
      Range.of(9223372036854775524L);
      long long1 = 5395L;
      Long long2 = new Long(5395L);
      range2.equals((Object) null);
      Long long3 = new Long(1L);
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.7540968935136894
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.of(6953L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4639L), (-4639L));
      Long long0 = new Long((-4639L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      Range.of((-316L));
      // Undeclared exception!
      try { 
        Range.of((-316L), (-1022L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.717805420317949
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.of((-18L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 9223372036854775602L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      range0.equals(range_CoordinateSystem1);
      Long long0 = new Long((-18L));
      long long1 = 2147483647L;
      long long2 = 9223372036854775807L;
      Range range1 = Range.of(2147483647L, 9223372036854775807L);
      Object object0 = new Object();
      range1.equals(object0);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 2377L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.868922641469256
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      Long long0 = new Long(127L);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals((Object) null);
      Range range2 = Range.of((-658L));
      Range range3 = range0.intersection(range0);
      assertFalse(range3.isEmpty());
      assertSame(range3, range0);
      
      Range range4 = Range.of((-1100L));
      Object object2 = new Object();
      Range range5 = Range.ofLength(1381L);
      assertFalse(range5.isEmpty());
      
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean0 = range2.equals(range1);
      assertFalse(boolean0);
      
      range2.split(9223372036854775807L);
      assertNotSame(range2, range4);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.9556475182070976
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(6953L);
      Range range1 = Range.of(6953L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      Long long0 = new Long((-3994L));
      Object object1 = new Object();
      range1.equals((Object) null);
      Range.of(2831L);
      Range range2 = Range.of((-16L), 2831L);
      range2.intersection(range0);
      Range.of(2831L);
      Object object2 = new Object();
      Range range3 = Range.of((-3994L));
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean1 = range3.equals(object4);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.9753748717467485
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775782L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long((-3546L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range range1 = Range.of((-1100L));
      Range range2 = Range.of((-9223372036854775300L), (-3135L));
      range1.intersection(range0);
      Range range3 = Range.of(1381L);
      List<Range> list0 = range0.complement(range2);
      List<Range> list1 = range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        range3.complementFrom(list1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 1381, -9223372036854775782 are not valid Zero Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.788077525766349
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = 104L;
      Range range0 = Range.ofLength(104L);
      Range range1 = Range.of(104L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 104L, 104L);
      range0.toString();
      range2.complement(range1);
      range0.intersection(range2);
      Range range3 = Range.of(104L);
      range1.endsBefore(range0);
      range3.endsBefore(range2);
      range1.equals(range2);
      Range.of(104L, 104L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 0 .. 103 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 0 .. 103 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.7666362245210863
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(6920L);
      Range range0 = Range.of(9223372036854772252L);
      Range.of(6920L, 9223372036854772252L);
      Long long1 = new Long(9223372036854772252L);
      boolean boolean0 = range0.equals(consumer0);
      Long long2 = new Long(6920L);
      Object object0 = new Object();
      range0.endsBefore(range0);
      Range range1 = Range.of(6920L);
      Range range2 = Range.of(881L, 6920L);
      Range range3 = range1.intersection(range2);
      Range range4 = range3.intersection(range0);
      assertNotSame(range3, range2);
      assertFalse(range3.isEmpty());
      assertSame(range3, range1);
      assertTrue(range4.isEmpty());
      
      Range range5 = Range.of(9223372036854773896L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean1 = range5.equals(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.996859031561975
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(9223372036854772252L);
      Long long0 = new Long(9223372036854772252L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(9223372036854773896L);
      range1.startsBefore(range0);
      range1.equals(range0);
      range1.spliterator();
      range0.equals(range1);
      Range range2 = Range.of((-833L), 9223372036854772252L);
      range0.intersection(range2);
      range0.complement(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("number of entries must be <= Integer.MAX_VALUE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.number of entries must be <= Integer.MAX_VALUE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.763427276154536
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of((-18L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.isEmpty();
      Long long0 = new Long((-18L));
      boolean boolean0 = range0.equals(long0);
      Long long1 = new Long((-18L));
      range0.equals(range0);
      Range range1 = Range.of((-10L), (-10L));
      Range range2 = Range.of((-18L), (-18L));
      boolean boolean1 = range2.intersects(range0);
      boolean boolean2 = range1.isSubRangeOf(range2);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = range1.startsBefore(range0);
      assertTrue(boolean3 == boolean0);
      
      List<Range> list0 = new LinkedList<Range>();
      Range range3 = range0.intersection(range0);
      assertSame(range3, range2);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.883369865045554
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(6953L);
      Range range1 = Range.of(6953L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      Long long0 = new Long((-3994L));
      Object object1 = new Object();
      Object object2 = new Object();
      range1.equals(object2);
      Range range2 = Range.of(9223372036854775800L);
      Range range3 = range2.intersection(range1);
      long long1 = range3.getBegin();
      assertEquals(0L, long1);
      
      range0.equals(long0);
      Object object3 = new Object();
      Long long2 = new Long(9223372036854775800L);
      Object object4 = new Object();
      Range range4 = Range.ofLength(9223372036854775800L);
      boolean boolean1 = range4.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.888344333614052
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      range0.toString();
      Range range2 = Range.of(61L);
      List<Range> list0 = range1.complement(range2);
      Range range3 = range1.intersection(range2);
      range3.intersects(range1);
      Range range4 = Range.of(2147483777L);
      range3.complementFrom(list0);
      range0.equals(range4);
      Range.of(1228L, 2147483647L);
      // Undeclared exception!
      try { 
        Range.ofLength((-58L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.7396030472709176
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(9223372036854772252L);
      Range range1 = Range.of(9223372036854772252L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      
      Long long0 = new Long(9223372036854772252L);
      range0.endsBefore(range0);
      Object object0 = new Object();
      Range.ofLength(9223372036854773896L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854772252L);
      Range range2 = range_Builder0.build();
      assertSame(range2, range0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=4.086146090085188
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(6953L);
      Range range1 = Range.of((-4639L), (-4639L));
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 6953 .. 6953 ]/0B", string0);
      
      range0.complement(range0);
      Range range2 = range0.intersection(range0);
      range0.intersects(range2);
      Range range3 = Range.of(3581L);
      range2.equals(range3);
      //  // Unstable assertion: assertTrue(range3.isEmpty());
      
      Range range4 = Range.of(3581L, 2147483777L);
      boolean boolean0 = range2.intersects(range4);
      //  // Unstable assertion: assertTrue(boolean0);
      
      range1.isSubRangeOf(range2);
      Range range5 = Range.of((-4639L));
      range2.startsBefore(range5);
      Range.ofLength(2147483777L);
      Range range6 = Range.ofLength(1345L);
      //  // Unstable assertion: assertFalse(range6.isEmpty());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.805949252636938
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(1823L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3556L, 4294967295L);
      range0.equals(consumer0);
      Long long0 = new Long(3556L);
      Object object0 = new Object();
      Long long1 = new Long(749L);
      range1.equals(long1);
      Range range2 = Range.of(0L, 2147483647L);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(1192L);
      Range range4 = range3.intersection(range0);
      assertFalse(range0.isEmpty());
      assertTrue(range4.isEmpty());
      
      Range range5 = Range.of(2393L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean0 = range3.equals(range5);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.9294017037352185
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(9223372036854772252L, 9223372036854772252L);
      Long long0 = new Long(9223372036854772252L);
      boolean boolean0 = range0.equals(consumer0);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854772252L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = Range.ofLength(9223372036854772252L);
      range_Builder0.expandBegin(36724L);
      Long long1 = new Long(9223372036854772252L);
      Range.CoordinateSystem.values();
      Range.of((-1225L));
      Range range2 = range_Builder1.build();
      boolean boolean1 = range2.isSubRangeOf(range1);
      assertFalse(boolean1 == boolean0);
      
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.8616797114774095
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(9223372036854772252L);
      Long long0 = new Long(9223372036854772252L);
      range0.equals(consumer0);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854772252L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      range0.isSubRangeOf(range1);
      range0.startsBefore(range1);
      Range range2 = Range.of(9223372036854772252L);
      List<Range> list0 = range0.complement(range2);
      range1.complementFrom(list0);
      Range range3 = Range.of(2147483647L);
      range1.isSubRangeOf(range3);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.711279258643937
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of((-18L));
      Range range1 = Range.of((-18L), 9223372036854775681L);
      long long0 = 768L;
      Long long1 = new Long(768L);
      Object object0 = new Object();
      range1.equals(object0);
      Long long2 = new Long(9223372036854775681L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem0);
      range1.toString();
      range1.intersection(range0);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        range1.split(9223372036854775681L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -273 would make range [9223372036854775663 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.6751577646950304
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = range0.intersection(range0);
      range0.intersection(range1);
      Range.of((-4639L));
      // Undeclared exception!
      try { 
        Range.of(3805L, (-1360L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=4.053382170392652
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      String string0 = range0.toString();
      assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
      
      List<Range> list0 = range0.complement(range1);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(2147483647L);
      range3.equals((Object) null);
      Long long0 = new Long(2147483647L);
      Range range4 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      boolean boolean0 = range2.equals(range4);
      assertTrue(boolean0);
      
      Range range5 = Range.of(2147483647L, 2147483647L);
      boolean boolean1 = range3.equals("[ 2147483647 .. 2147483647 ]/0B");
      Range range6 = Range.of((-334L), 1587L);
      range6.intersects(range2);
      boolean boolean2 = range6.endsBefore(range1);
      assertFalse(boolean2 == boolean1);
      
      range1.startsBefore(range3);
      range4.complement(range0);
      range1.complementFrom(list0);
      assertTrue(range1.isEmpty());
      
      Range range7 = Range.of(1587L, 9223372036854775807L);
      Range range8 = range0.intersection(range7);
      assertFalse(range8.isEmpty());
      assertSame(range0, range5);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.6898043820095885
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Long long0 = new Long((-9223372036854775782L));
      Range range0 = Range.of((-9223372036854775782L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long((-3546L));
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals("9kr>;");
      Range.of(0L);
      Object object2 = new Object();
      Range range1 = Range.ofLength(9223372034707292031L);
      Object object3 = new Object();
      boolean boolean1 = range1.equals("m");
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=4.057700569647298
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(6953L);
      Range range0 = Range.of(127L);
      Range range1 = Range.of(61L, 6953L);
      range0.complement(range1);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 61L, 9223372036854772252L);
      range2.intersects(range0);
      long long1 = (-2414L);
      Range.of((-2414L));
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(6953L, 1320L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.693811492719508
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Long long0 = new Long(0L);
      Range.of((-32767L));
      Range range0 = Range.of(0L, 2147483647L);
      Long long1 = new Long((-32767L));
      range0.equals((Object) null);
      Long long2 = new Long(9223372036854772252L);
      Object object0 = new Object();
      Range.of(2147483647L);
      // Undeclared exception!
      try { 
        Range.of(1912L, 881L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=4.038070070310375
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.ofLength(2147483647L);
      range1.toString();
      range0.complement(range1);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Long long0 = new Long(127L);
      range3.equals((Object) null);
      Long long1 = new Long(127L);
      Range range4 = Range.ofLength(2147483647L);
      range2.equals(range4);
      Range.of(127L, 127L);
      range3.equals("[ 0 .. 2147483646 ]/0B");
      Range range5 = Range.of((-334L), 1587L);
      range5.intersects(range4);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-1L), (-2081L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.7710758801492728
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-16L), (-16L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.contractBegin(1L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range1 = Range.of((-16L));
      range0.intersection(range1);
      Range.of((-128L));
      Range.of(2850L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.904808266084
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.ofLength(6953L);
      Range range1 = Range.ofLength(6953L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 6953L, 6953L);
      Range range3 = Range.of(6953L, 6953L);
      range0.complement(range3);
      Range range4 = range3.intersection(range0);
      range2.complement(range3);
      Range range5 = range0.intersection(range1);
      range0.intersects(range4);
      Range range6 = Range.of(127L);
      range0.equals(range1);
      Range.of(127L, 6953L);
      range5.intersects(range0);
      range4.isSubRangeOf(range0);
      Range range7 = Range.of(9223372036854775807L);
      range7.startsBefore(range6);
      Range.of(6953L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 65535L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.9329983321609436
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(6953L);
      Range range0 = Range.of(9223372036854772252L);
      Range range1 = Range.of(6953L, 9223372036854772252L);
      range0.forEach(consumer0);
      Range range2 = range1.intersection(range0);
      Long long1 = new Long(9223372036854772252L);
      Object object0 = new Object();
      Long long2 = new Long((-200L));
      range1.equals(long2);
      boolean boolean0 = range2.intersects(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range range3 = Range.of(32767L, 9223372036854772252L);
      boolean boolean1 = range1.intersects(range3);
      //  // Unstable assertion: assertTrue(boolean1);
      
      Range.CoordinateSystem.values();
      Range.ofLength(6953L);
      List<Range> list0 = range3.complement(range1);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.825310916372028
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.ofLength(6953L);
      Range range1 = Range.of(6953L, 6953L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(6953L);
      long long0 = 654L;
      Long long1 = new Long(6953L);
      range1.complement(range2);
      range2.equals(range3);
      Long long2 = new Long(255L);
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      long long3 = 2857L;
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-542L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.5556558627312698
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = 9223372036854772252L;
      Range range0 = Range.of(9223372036854772252L);
      Long long1 = new Long(9223372036854772252L);
      Object object0 = new Object();
      long long2 = 9223372036854773896L;
      Range range1 = Range.of((-9223372036854775782L));
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        range1.complement(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775782 would make range [9223372036854772252 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.9091392960978864
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of((-18L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372032559808512L, 9223372032559808512L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      Long long0 = new Long((-18L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of((-1100L));
      Range range2 = Range.of((-4640L), 1L);
      Range range3 = range2.intersection(range0);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      
      Range.of(1381L);
      Object object2 = new Object();
      Range.ofLength(1381L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean0 = range2.equals((Object) null);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.8900199524706385
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2251L);
      range0.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2088L), 1197L);
      Range range2 = range0.intersection(range1);
      range2.intersection(range0);
      Object object0 = new Object();
      range2.intersection(range1);
      Range.of(range_CoordinateSystem1, (-181L), 9223372036854765300L);
      range2.equals(range0);
      //  // Unstable assertion: assertTrue(range2.equals((Object)range1));
      //  // Unstable assertion: assertNotSame(range2, range1);
      
      Object object1 = new Object();
      Long long0 = new Long(9223372036854775803L);
      Range.ofLength(9223372036854765300L);
      Range.of(range_CoordinateSystem0, (-2261L), (-2088L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 2258L, 3286L);
      Range range3 = Range.ofLength(9223372036854775803L);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=4.01102026327028
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      Range range1 = range_Builder0.build();
      List<Range> list0 = range1.complement(range0);
      assertEquals(0, list0.size());
      
      Long long0 = new Long(1L);
      Range range2 = Range.of((-4640L), 2147483647L);
      boolean boolean0 = range2.equals("");
      assertFalse(boolean0);
      
      Long long1 = new Long((-4640L));
      Range range3 = range2.intersection(range1);
      assertFalse(range3.isEmpty());
      
      Long long2 = new Long(0L);
      Range.CoordinateSystem.values();
      Range range4 = Range.of(2147483647L);
      assertSame(range4, range1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.9031917840565025
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.toString();
      range0.complement(range1);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(2147483647L);
      range2.equals(range3);
      long long0 = 9223372036854765300L;
      Range range4 = Range.of(2182L, 9223372036854765300L);
      // Undeclared exception!
      range4.split(3720L);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.696623871722574
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of((-18L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-18L), (-18L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.isEmpty();
      Long long0 = new Long((-18L));
      Range range2 = Range.of((-745L));
      range2.intersection(range0);
      long long1 = 2147483777L;
      range0.intersects(range1);
      Range.of((-567L));
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-794L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -795 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.721902443823454
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(6937L);
      Range range0 = Range.of(9223372036854772252L);
      Range range1 = Range.of(6937L, 9223372036854772252L);
      Long long1 = new Long(9223372036854772252L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.equals(consumer0);
      Long long2 = new Long(6937L);
      Object object0 = new Object();
      range1.equals(object0);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.of(6937L, (-579L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.588215372201166
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(9223372036854772252L);
      Long long0 = new Long(9223372036854772252L);
      Object object0 = new Object();
      Range range1 = Range.of(9223372036854773896L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range2 = Range.of(9223372036854773896L);
      List<Range> list0 = range2.complement(range1);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.9023935342361837
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range1 = Range.of(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder0.build();
      range_Builder0.expandBegin(9223372036854775807L);
      Range range3 = range2.intersection(range1);
      Long long0 = new Long((-671L));
      Long long1 = new Long(3581L);
      Range range4 = Range.ofLength(114L);
      range4.isSubRangeOf(range3);
      Object object0 = new Object();
      range0.equals(range2);
      range2.getEnd();
      range0.startsBefore(range1);
      Range range5 = Range.ofLength(2147483647L);
      List<Range> list0 = range3.complement(range0);
      range2.complementFrom(list0);
      range0.isSubRangeOf(range5);
      Range.ofLength(2147483647L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.930701636634563
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2251L);
      boolean boolean0 = range0.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2088L), 1197L);
      Range range2 = range0.intersection(range1);
      range2.intersection(range0);
      Object object0 = new Object();
      Range range3 = range2.intersection(range1);
      range0.spliterator();
      Range.of(range_CoordinateSystem1, (-181L), 9223372036854765300L);
      boolean boolean1 = range2.equals(range0);
      assertFalse(boolean1 == boolean0);
      assertSame(range2, range3);
      assertNotSame(range2, range1);
      assertFalse(range2.isEmpty());
      
      Object object1 = new Object();
      Long long0 = new Long(9223372036854775803L);
      Range.of(9223372036854775803L);
      Range.of(range_CoordinateSystem0, (-2288L), (-2088L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 2258L, 3286L);
      Range range4 = Range.ofLength(9223372036854775803L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.723579674629865
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-32768L), (-32768L));
      range0.equals("Bn5`n'0?nG]");
      Range range1 = Range.of((-32768L), (-1269L));
      range1.equals(range0);
      Long long0 = new Long((-84L));
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range.ofLength(1020L);
      Range.of(209L, 6954L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-3772L), 1L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.991768037513086
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      long long0 = 530L;
      Range.of(530L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      List<Range> list0 = range0.complement(range1);
      range0.complement(range1);
      range0.complementFrom(list0);
      Long long1 = new Long(9223372036854775807L);
      Long long2 = new Long(3152L);
      Range.of((-89L), 32767L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-708L), 94L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.998621378830875
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(4156L);
      Range range1 = Range.of(127L, 4156L);
      Object object0 = new Object();
      Long long0 = new Long((-1L));
      Object object1 = new Object();
      Object object2 = new Object();
      Long long1 = new Long(4294967295L);
      boolean boolean0 = range0.equals(long1);
      Range range2 = Range.of((-3994L));
      Range range3 = range2.intersection(range1);
      long long2 = range3.getBegin();
      assertEquals(0L, long2);
      
      range0.equals((Object) null);
      Object object3 = new Object();
      Long long3 = new Long(0L);
      Object object4 = new Object();
      boolean boolean1 = range3.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      
      Range.ofLength(4294967295L);
      Range range4 = Range.ofLength(4294967295L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.343633929407073
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(9223372036854772252L);
      Long long0 = new Long(9223372036854772252L);
      Range range0 = Range.of((-32768L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.8229975709607102
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.complement(range1);
      Range.of(383L, 4294967295L);
      Long long1 = new Long(2147483647L);
      range0.equals(long1);
      range1.equals("Bn5`n'0?nG]");
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 6954L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.9601529185372932
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-16L), (-16L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.of(81L);
      Range range1 = Range.of((-1851L), (-1851L));
      range1.intersection(range0);
      Range.of((-16L));
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.380801087141437
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Long long0 = new Long((-9223372036854775782L));
      Range range0 = Range.of((-9223372036854775782L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.800361719558751
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-32768L));
      Range range1 = Range.of((-4019L));
      range0.intersection(range1);
      Range.of(2147483648L);
      range0.equals((Object) null);
      range1.intersection(range0);
      Range.Builder range_Builder2 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin((-2854L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.854886658920895
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Long long0 = new Long((-9223372036854775782L));
      Range range0 = Range.of((-9223372036854775782L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = range0.intersection(range0);
      range0.complement(range1);
      long long1 = 9223372036854775807L;
      Range range2 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range2.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775782 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.5857536269220556
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = 6953L;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(6953L);
      long long2 = 9223372036854772252L;
      Range range0 = Range.of(9223372036854772252L);
      Range range1 = Range.of(6953L, 9223372036854772252L);
      Long long3 = new Long(9223372036854772252L);
      range0.equals(consumer0);
      Long long4 = new Long(6953L);
      Object object0 = new Object();
      range1.equals(object0);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.821573983952746
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-18L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 330L, 65507L);
      range0.intersects(range1);
      Range range2 = range1.intersection(range0);
      range2.intersection(range0);
      Long long0 = new Long(255L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-2854L));
      range1.complement(range0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=4.016613305956447
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-18L), 0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder(590L);
      range_Builder0.expandBegin((-18L));
      Range range1 = Range.of(1L, 1657L);
      Range range2 = range0.intersection(range1);
      range0.toString();
      Long long0 = new Long(590L);
      Long long1 = new Long((-312L));
      Object object0 = new Object();
      Range.ofLength(2147483647L);
      range0.equals(object0);
      range2.getEnd();
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.9046069086530664
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(6937L);
      Range range0 = Range.of(9223372036854772252L);
      Range range1 = Range.of(6937L, 9223372036854772252L);
      range0.split(9223372036854772252L);
      Long long1 = new Long(9223372036854772252L);
      range0.intersection(range1);
      range0.intersection(range1);
      Range.of((-4415L));
      Object object0 = new Object();
      range1.equals((Object) null);
      Range.ofLength(1L);
      Range.ofLength(9223372036854772252L);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 6937L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.7357493871929317
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(6953L);
      Range range0 = Range.of(9223372036854772252L);
      Range range1 = Range.of(6953L, 9223372036854772252L);
      Long long1 = new Long(9223372036854772252L);
      range0.equals(consumer0);
      Long long2 = new Long(6953L);
      Object object0 = new Object();
      range1.equals(object0);
      Range range2 = Range.of(6953L);
      range2.intersection(range2);
      Range.of(9223372036854773896L);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.1133442736467214
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.6613897678794936
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65507L, 65507L);
      assertTrue(range0.isEmpty());
      
      Long long0 = new Long(8L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(8L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(9223372036854772227L);
      Range range1 = range_Builder1.build();
      assertFalse(range1.isEmpty());
      
      Long long1 = new Long(303L);
      Range range2 = Range.of(65533L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.611882346487425
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147493627L);
      Range range0 = Range.ofLength(9223372036854775807L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(4294967295L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.6913355428560406
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Long long0 = new Long((-9223372036854775782L));
      Range.of((-9223372036854775782L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      long long1 = (-367L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-367L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.734223237433977
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.of(6953L, 6953L);
      long long0 = (-2147483648L);
      Range.of((-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.2380188789437025
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-32799L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.7509345869354638
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.of(2147483647L);
      long long0 = (-317L);
      Range.of((-317L), 9223372034707292161L);
      long long1 = (-2147483648L);
      Range.of((-317L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-317L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.3785343268728463
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder1.build();
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.868724055930494
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-78L), (-78L));
      Range.Builder range_Builder0 = new Range.Builder(777L);
      Range range1 = range_Builder0.build();
      range_Builder0.expandBegin((-32768L));
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(255L);
      boolean boolean0 = range1.equals(range3);
      Range range4 = range3.intersection(range2);
      Long long0 = new Long((-78L));
      Long long1 = new Long(1671L);
      Object object0 = new Object();
      boolean boolean1 = range4.equals(range2);
      assertFalse(boolean1 == boolean0);
      
      long long2 = range1.getEnd();
      assertEquals(776L, long2);
      
      Range range5 = Range.ofLength(255L);
      assertNotSame(range5, range1);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.392474707139005
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(9223372036854772252L);
      Long long0 = new Long(9223372036854772252L);
      Object object0 = new Object();
      long long1 = (-9223372036854775295L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854772252L, (-9223372036854775295L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775295 would make range [9223372036854772252 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.443955264649881
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = 9223372036854772252L;
      Range range0 = Range.of(9223372036854772252L);
      Long long1 = new Long(9223372036854772252L);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder0.expandEnd(9223372036854772252L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -7112 would make range [9223372036854772252 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.980155503605564
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = 3581L;
      Range range0 = Range.ofLength(3581L);
      range0.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.intersects(range0);
      range0.split(3581L);
      Range range1 = Range.of(0L, 3581L);
      range0.isSubRangeOf(range1);
      Range.of(range_CoordinateSystem0, 0L, 2251L);
      Range range2 = Range.of(0L);
      range2.complement(range0);
      // Undeclared exception!
      try { 
        Range.of(3581L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=4.002204306450635
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      long long0 = 2147483647L;
      Range.ofLength(2147483647L);
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range1.complement(range0);
      Range range2 = Range.ofLength(65535L);
      Range.of(65535L);
      range2.complement(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("ff]lA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ff]lA into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.843935387532599
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-78L), (-78L));
      Range.Builder range_Builder0 = new Range.Builder(777L);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-32768L));
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(255L);
      range1.equals(range3);
      range3.intersection(range2);
      Long long0 = new Long((-78L));
      Range.Builder range_Builder2 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin((-2854L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.9617171133686666
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(6953L);
      Range range1 = Range.of((-4639L), (-4639L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.intersection(range1);
      range1.intersection(range0);
      assertFalse(range0.isEmpty());
      
      Range range2 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range2.equals((Object) null);
      assertFalse(boolean0);
      
      Range range3 = Range.ofLength(1L);
      assertFalse(range3.isEmpty());
      
      Range range4 = Range.of(9223372036854775807L);
      assertFalse(range4.equals((Object)range3));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.2082798105925487
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Long long0 = new Long(9223372036854775362L);
      Range range0 = Range.of(9223372036854775362L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object2);
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.510345765335044
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      range_Builder0.expandBegin(9223372036854775807L);
      Range.Builder range_Builder2 = new Range.Builder(1648L);
      Range range1 = Range.of(3573L);
      Range.Builder range_Builder3 = new Range.Builder(range1);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.4381228045860563
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      assertFalse(range1.isEmpty());
      
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 65507L, 65507L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.506937706031966
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-16L), (-16L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.contractBegin(1L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.7883292812606375
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.ofLength(104L);
      Range range1 = Range.of(104L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 104L, 104L);
      Range range3 = Range.of(104L, 104L);
      range0.isSubRangeOf(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 2538L, 4294967295L);
      range1.intersects(range2);
      range0.intersection(range1);
      Long long0 = new Long(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem2, 2538L, 315L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.6852152236609945
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(6916L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      range_Builder1.expandBegin(4294967295L);
      Range range2 = range0.intersection(range1);
      Range range3 = range2.intersection(range0);
      range0.intersects(range3);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.6242639376795753
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-9223372036854775808L);
      Range.of(range_CoordinateSystem0, 2147483647L, (-9223372036854775808L));
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.917821170344064
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of((-18L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-18L), (-10L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.isEmpty();
      Long long0 = new Long((-18L));
      boolean boolean0 = range0.equals(long0);
      Long long1 = new Long((-18L));
      range0.equals(range1);
      Range range2 = Range.of((-10L), (-10L));
      Range range3 = Range.of((-18L), (-18L));
      range3.intersects(range1);
      boolean boolean1 = range2.isSubRangeOf(range3);
      //  // Unstable assertion: assertFalse(boolean1);
      
      boolean boolean2 = range2.startsBefore(range0);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      
      List<Range> list0 = range3.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Range range4 = range0.intersection(range1);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.647130261081858
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = (-18L);
      Range range0 = Range.of((-18L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-18L), (-18L));
      range1.isSubRangeOf(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.isEmpty();
      Long long1 = new Long((-18L));
      range0.equals(long1);
      Long long2 = new Long((-18L));
      range0.equals(range1);
      Range.of((-18L), (-18L));
      Range range2 = Range.of((-18L), (-18L));
      range1.intersects(range2);
      range0.isSubRangeOf(range1);
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-18L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.7540968935136894
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.of(6953L);
      long long0 = (-4639L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4639L), (-4639L));
      Long long1 = new Long((-4639L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.of((-1100L));
      // Undeclared exception!
      try { 
        Range.of(6953L, 1381L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=4.246556281016698
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(2251L, 2251L);
      range0.isEmpty();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 92L);
      Range.ofLength(0L);
      List<Range> list0 = range1.split(92L);
      range1.complementFrom(list0);
      Long long0 = new Long((-508L));
      Long long1 = new Long(1L);
      Range.of((-128L), 4294967295L);
      Range range2 = Range.of(range_CoordinateSystem1, (-1L), 124L);
      range2.intersects(range0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2252L, (-508L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.8186483184776816
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(6953L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-4639L), (-4639L));
      range0.equals(range0);
      long long0 = (-3546L);
      Long long1 = new Long((-3546L));
      Object object0 = new Object();
      range1.equals(long1);
      long long2 = (-508L);
      range1.intersection(range0);
      Long long3 = new Long((-1232L));
      Long long4 = new Long((-4639L));
      Range.of((-3546L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long5 = (-2452L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 124L, (-2452L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.6629215987819363
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(6953L);
      Range range1 = Range.of(6953L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      Long long0 = new Long((-3994L));
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean1 = range1.equals(object2);
      assertTrue(boolean1 == boolean0);
      
      Long long1 = new Long((-1594L));
      Object object3 = new Object();
      Range.ofLength(1121L);
      Object object4 = new Object();
      range0.equals(long1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.9668740670874074
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = 6953L;
      Range.of(6953L);
      Range range0 = Range.of((-4639L), (-4639L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-4639L), (-4639L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range1.isEmpty();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long1 = new Long((-4639L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd(range_CoordinateSystem1);
      Range range2 = Range.of((-4639L));
      range0.equals(range2);
      long long2 = 198L;
      Long long3 = new Long(198L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 6953L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.9599379929571366
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 0L, 92L);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list0.contains(range0));
      assertEquals(0, list1.size());
      
      Long long0 = new Long((-508L));
      Range range2 = Range.of((-508L));
      assertFalse(range2.isEmpty());
      
      range1.equals(range_CoordinateSystem0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.4875177350647872
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = range0.intersection(range0);
      assertFalse(range1.isEmpty());
      
      Long long1 = new Long(9223372036854775807L);
      Object object0 = new Object();
      Range range2 = Range.ofLength(2147483647L);
      assertFalse(range2.isEmpty());
      
      Object object1 = new Object();
      range0.endsBefore(range0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.8095447118239436
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.ofLength(24L);
      Range range1 = Range.of(2093L);
      range1.intersection(range0);
      range0.intersects(range1);
      range0.asRange();
      Range.of(24L, 24L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("unable to mkdirs for ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.unable to mkdirs for 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=4.169263301333272
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Long long0 = new Long((-9223372036854775782L));
      Range range0 = Range.of((-9223372036854775782L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Long long1 = new Long(2562L);
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      Range range1 = Range.of(9223372036854773919L);
      Range range2 = Range.of(296L, 3368L);
      Range range3 = Range.of(0L);
      assertFalse(range3.isEmpty());
      
      Range range4 = range1.intersection(range2);
      Range range5 = Range.of(1L);
      range5.forEach(consumer0);
      Object object2 = new Object();
      Range.ofLength(2147483647L);
      Object object3 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = range4.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long2);
      
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      boolean boolean1 = range4.equals(object6);
      assertTrue(boolean1 == boolean0);
      assertTrue(range4.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.921781102462034
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 0L);
      Long long0 = new Long(7L);
      Range range1 = Range.of((-694L), 7L);
      range1.intersects(range0);
      range1.getBegin();
      range0.getBegin();
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem2);
      range0.getEnd();
      range1.equals(range0);
      List<Range> list0 = range1.complement(range0);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=4.098156980864847
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(6953L);
      Range range1 = Range.of((-4639L), (-4639L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = range0.intersection(range1);
      Range range3 = range1.intersection(range0);
      Range range4 = Range.of(9223372036854775807L);
      range3.intersects(range4);
      range3.isSubRangeOf(range1);
      Range range5 = Range.of(3556L);
      range2.startsBefore(range1);
      Range range6 = Range.of((-1242L));
      range1.startsBefore(range3);
      List<Range> list0 = range6.complement(range5);
      assertTrue(list0.contains(range6));
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.145998322976767
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = 9223372036854772252L;
      Range range0 = Range.of(9223372036854772252L);
      Long long1 = new Long(9223372036854772252L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.7850028266483826
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      range0.toString();
      long long0 = 61L;
      Range range2 = Range.of(61L);
      range1.complement(range2);
      range1.intersection(range2);
      Long.max(2147483647L, 61L);
      Long long1 = new Long(2147483647L);
      range0.equals(long1);
      Long long2 = new Long(2147483647L);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.of(61L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=4.096379327016971
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(32767L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder0.build();
      range_Builder1.expandBegin((-2050L));
      Range range3 = range2.intersection(range0);
      Range range4 = Range.of((-2050L));
      Object object0 = new Object();
      Range range5 = Range.of((-2050L), (-128L));
      range5.spliterator();
      range3.complement(range0);
      range1.intersects(range4);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf(";");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.;
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.737081682274277
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-16L), (-16L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.contractBegin(1L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range1 = Range.of((-16L));
      Range range2 = range0.intersection(range1);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
      
      Range.of((-128L));
      Range.of((-1785L), (-16L));
      range1.asRange();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.8976108778991456
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.ofLength(6953L);
      Range range1 = range0.intersection(range0);
      Range range2 = Range.of(6953L);
      long long0 = 654L;
      Long long1 = new Long(6953L);
      range0.complement(range1);
      range1.equals(range2);
      Long long2 = new Long(255L);
      Range.Builder range_Builder0 = new Range.Builder(255L);
      range_Builder0.build();
      long long3 = 2857L;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-542L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.65123930407734
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(9223372036854772252L, 9223372036854772252L);
      Long long0 = new Long(9223372036854772252L);
      range0.equals(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals(object2);
      Range.of(309L);
      Object object3 = new Object();
      Range range1 = Range.ofLength(1492L);
      Object object4 = new Object();
      boolean boolean1 = range1.equals((Object) null);
      assertFalse(range1.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.4673452386149406
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(9223372036854772252L, 9223372036854772252L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(2767L);
      range_Builder0.copy();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      range_Builder1.build();
      Range.Builder range_Builder5 = new Range.Builder(9223372036854772253L);
      range_Builder2.build();
      Range.Builder range_Builder6 = new Range.Builder(range_CoordinateSystem0, 1013L, 2837L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.357284162522736
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.Comparators.values();
      Long long0 = new Long(7L);
      Range range0 = Range.of((-694L), 7L);
      long long1 = range0.getBegin();
      assertEquals((-694L), long1);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.3976556128519144
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(9223372036854772242L);
      Long long0 = new Long(9223372036854772242L);
      range0.endsBefore(range0);
      Object object0 = new Object();
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer1);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.5509193234565983
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.of(104L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 104L, 104L);
      Range.of(104L, 104L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 2538L, 4294967295L);
      Long long0 = new Long(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem2, 2538L, 315L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.482422869155949
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of((-334L), 1587L);
      Range range1 = Range.of(1587L, 9223372036854775807L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.3260366895130917
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.5675992130610297
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2251L);
      range0.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-2088L);
      Range range1 = Range.of(range_CoordinateSystem1, (-2088L), 1193L);
      Range range2 = range0.intersection(range1);
      Range range3 = range2.intersection(range0);
      Object object0 = new Object();
      range2.intersection(range1);
      Range.of(range_CoordinateSystem1, (-181L), 9223372036854765300L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, (-181L), 1339L);
      range3.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 2252L, (-771L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.789525537097101
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = (-9223372036854775782L);
      Long long1 = new Long((-9223372036854775782L));
      Range range0 = Range.of((-9223372036854775782L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = range0.intersection(range0);
      range0.complement(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.550398200151205
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-1527L));
      Range.CoordinateSystem range_CoordinateSystem1 = null;
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.84348798386603
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.ofLength(6953L);
      Range.ofLength(6953L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 6953L, 6953L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 255L, 9223372036854773235L);
      Range range2 = Range.of(1825L);
      List<Range> list0 = range2.complement(range1);
      range2.complementFrom(list0);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem2, (-2448L), 9223372036854773235L);
      Range.CoordinateSystem.values();
      Range.of(255L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("5KH7,Q7c??\\HK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.5KH7,Q7c??\\HK
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.7666824721311034
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.Comparators.values();
      Range.of((-18L), (-18L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd((-128L));
      Range range0 = range_Builder0.build();
      range_Builder1.expandBegin((-2314L));
      Long long0 = new Long((-10L));
      range0.getLength();
      Long long1 = new Long(1501L);
      Object object0 = new Object();
      Long long2 = new Long(1501L);
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.91758058289949
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.isEmpty();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(2147483647L);
      range1.endsBefore(range0);
      Long long1 = new Long((-343L));
      Long long2 = new Long(2147483647L);
      Range range2 = Range.of((-2747L), 2147483647L);
      range2.equals(range_Builder1);
      // Undeclared exception!
      try { 
        Range.of(2236L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.4959635110908143
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854772252L);
      Long long0 = new Long(9223372036854772252L);
      boolean boolean0 = range0.endsBefore(range0);
      Range range1 = Range.of(9223372036854772252L);
      Object object0 = new Object();
      Range range2 = Range.ofLength(9223372036854773896L);
      boolean boolean1 = range2.startsBefore(range0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = range0.isSubRangeOf(range1);
      range2.spliterator();
      boolean boolean3 = range0.equals(range2);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.151798682372979
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.ofLength(9223372036854772252L);
      Long long0 = new Long(9223372036854772252L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.360538514024816
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 127L, 2837L);
      Range range0 = Range.ofLength(6953L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=4.030950279547063
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin(530L);
      range_Builder0.expandEnd(4294967295L);
      Range range1 = range_Builder0.build();
      range1.split(4294967295L);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("?0j5^e;pPM9uvel;'%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.?0j5^e;pPM9uvel;'%
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.7779886599400467
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Long long0 = new Long(1L);
      Object object0 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long1 = new Long(32767L);
      List<Range> list0 = range0.split(1L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long2 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-2147483648L), long2);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.3954859611261705
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Long long0 = new Long((-9223372036854775782L));
      Range range0 = Range.of((-9223372036854775782L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long((-3546L));
      Object object0 = new Object();
      range0.getLength();
      Object object1 = new Object();
      Range.of((-9223372036854775782L));
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.1830425928733486
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of(2538L);
      range0.split(2538L);
      range0.getLength();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=4.049445242978674
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 92L);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
      
      Long long0 = new Long((-508L));
      Range.Builder range_Builder1 = range_Builder0.expandBegin(2410L);
      range_Builder1.expandBegin(2410L);
      Long long1 = new Long((-3124L));
      Range.CoordinateSystem.values();
      Range range2 = Range.of(2410L);
      assertFalse(range2.isEmpty());
      
      Range range3 = range_Builder1.build();
      Range range4 = range3.intersection(range0);
      List<Range> list2 = range1.complement(range3);
      assertFalse(list2.contains(range4));
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.845196669674997
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      long long0 = 61L;
      Range range1 = Range.of(61L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = range0.intersection(range1);
      long long1 = 2147483777L;
      range2.intersects(range0);
      Range.of(2147483777L);
      range2.complementFrom(list0);
      Range.of(1228L, 2147483647L);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 1304L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.6883084717014354
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range range1 = Range.of(1964L, 1964L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Long long0 = new Long(255L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(object4);
      Long.divideUnsigned((-3994L), (-1913L));
      Range range2 = Range.of(255L);
      Range range3 = range2.intersection(range0);
      range1.getBegin();
      Long.getLong("Null Range used in intersection operation.");
      range1.equals((Object) null);
      Object object5 = new Object();
      Long long1 = new Long((-2147483648L));
      Object object6 = new Object();
      range3.equals(object2);
      Range.ofLength(255L);
      // Undeclared exception!
      try { 
        Range.ofLength((-642L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.837303001452888
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of(6953L);
      long long0 = 4294967295L;
      Range range1 = Range.of(6953L, 4294967295L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Long long1 = new Long((-3994L));
      Object object1 = new Object();
      Object object2 = new Object();
      range1.equals(object2);
      long long2 = 488L;
      Long.divideUnsigned(4294967295L, 488L);
      Range range2 = Range.of(9223372036854775800L);
      Range range3 = range2.intersection(range1);
      range3.getBegin();
      range0.equals(long1);
      Object object3 = new Object();
      Long long3 = new Long(9223372036854775800L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("0B", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=4.16106205649877
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(530L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      List<Range> list0 = range0.complement(range2);
      Range range3 = Range.of(383L, 530L);
      Range range4 = Range.of((-84L), 6954L);
      List<Range> list1 = range3.complementFrom(list0);
      assertEquals(1, list1.size());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range4.getBegin(range_CoordinateSystem1);
      assertEquals((-84L), long0);
      
      Long long1 = new Long(2147483647L);
      range1.intersection(range0);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder1 = new Range.Builder(range2);
      assertFalse(range2.equals((Object)range0));
      
      Range.ofLength(530L);
      Range.of(530L, 2147483647L);
      Range range5 = range1.intersection(range3);
      assertSame(range1, range5);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.5289685932861974
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 6L;
      Range range0 = Range.of(6L, 6L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range_Builder0.expandBegin(1L);
      range_Builder0.contractBegin(1L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.9949375038359762
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of((-1850L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1850L), (-1850L));
      range0.complement(range1);
      Range range2 = Range.of(530L);
      range2.intersection(range0);
      Range.of(1L);
      // Undeclared exception!
      try { 
        Range.of(583L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=4.009159476822803
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder0.build();
      range1.complement(range0);
      Long long0 = new Long(1L);
      Range range2 = Range.of((-4640L), 2147483647L);
      Long long1 = new Long((-4640L));
      range2.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, (-4640L), (-2448L));
      Range.CoordinateSystem.values();
      Range range3 = Range.of((-1647L));
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.624044921185588
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 284L, 65507L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(284L, long0);
      
      Range range1 = Range.of((-747L));
      Range range2 = Range.of((-747L));
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.5988905087486747
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-129L), 2147483647L);
      assertFalse(range0.isEmpty());
      
      Range.of(2147483647L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("A7_D&0Y({");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.A7_D&0Y({
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=4.146188636560373
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.ofLength(104L);
      Range range1 = Range.of(104L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 104L, 104L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 103 ]/0B", string0);
      
      List<Range> list0 = range2.complement(range1);
      Range range3 = range0.intersection(range2);
      Range.of(104L);
      range1.equals(list0);
      Range range4 = Range.parseRange("[ 0 .. 103 ]/0B", range_CoordinateSystem0);
      range1.equals(range4);
      Range range5 = Range.parseRange("[ 0 .. 103 ]/0B");
      range1.complementFrom(list0);
      Range range6 = range0.asRange();
      range1.startsBefore(range3);
      String string1 = range4.toString();
      assertEquals("[ -1 .. 102 ]/0B", string1);
      
      boolean boolean0 = range1.intersects(range3);
      range2.startsBefore(range0);
      Range range7 = Range.of((-3988L), 2424L);
      boolean boolean1 = range3.intersects(range7);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = range6.isSubRangeOf(range1);
      assertFalse(boolean2);
      
      range3.startsBefore(range5);
      List<Range> list1 = range7.complement(range5);
      assertEquals(2, list1.size());
      assertSame(range5, range6);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.8207578263623625
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-21L), (-21L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.contractBegin(1L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range1 = Range.of((-21L));
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of((-128L));
      List<Range> list0 = range2.complement(range3);
      assertFalse(list0.contains(range3));
      assertSame(range1, range0);
      assertFalse(range3.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.8206946158686548
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(9223372036854772252L, 9223372036854772252L);
      Range range1 = Range.of(9223372036854772252L, 9223372036854772252L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = range_Builder1.expandBegin(9223372036854772252L);
      range_Builder3.contractBegin(9223372036854772252L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range range2 = Range.of(1L);
      Range range3 = range0.intersection(range2);
      assertTrue(range3.isEmpty());
      assertFalse(range2.isEmpty());
      
      Range range4 = Range.of(9223372036854772252L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.450233349710572
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      range0.getEnd(range_CoordinateSystem0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder2.shift(2811L);
      range_Builder2.build();
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-16L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.338351420837781
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(4294967295L);
      Long long0 = new Long(9223372036854772252L);
      Range range0 = Range.of((-2772L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.602611851347469
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = 2147483647L;
      Range.of(2147483647L);
      long long1 = 530L;
      Range.of(530L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-2147483648L), 9223372036854774273L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.6794744176531275
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = range0.intersection(range0);
      range0.complement(range0);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.982434581731737
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.ofLength(104L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.of(104L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder0.build();
      Range.Builder range_Builder4 = range_Builder3.expandBegin(104L);
      Range range3 = range1.intersection(range0);
      assertTrue(range3.isEmpty());
      
      Range range4 = Range.of((-4639L));
      Object object0 = new Object();
      Range range5 = Range.of((-4639L), 2147483647L);
      boolean boolean0 = range4.intersects(range5);
      assertTrue(boolean0);
      
      Range.CoordinateSystem.values();
      Range range6 = range_Builder4.build();
      assertFalse(range6.isEmpty());
      assertSame(range0, range2);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.9025964751992857
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(6953L);
      Range range0 = Range.of(9223372036854772252L);
      Range range1 = Range.of(6953L, 9223372036854772252L);
      range0.forEach(consumer0);
      Range range2 = range1.intersection(range0);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Long long1 = new Long(77L);
      Range range3 = Range.of(1L, 9223372036854772252L);
      Range range4 = range2.intersection(range0);
      Range range5 = range3.intersection(range1);
      range5.intersects(range4);
      Range.CoordinateSystem.values();
      Range range6 = Range.of(1L);
      assertFalse(range6.equals((Object)range1));
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.890607894128688
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-32768L), 98L);
      Range range1 = Range.of((-32768L), 2192L);
      range1.intersects(range0);
      range1.isSubRangeOf(range0);
      range0.startsBefore(range1);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=4.042144665734783
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-18L));
      Range range1 = Range.of((-32768L), (-32768L));
      List<Range> list0 = range1.complement(range0);
      Range range2 = Range.of(2147483647L, 2147483647L);
      range2.complement(range0);
      List<Range> list1 = range2.complementFrom(list0);
      List<Range> list2 = range1.complementFrom(list1);
      Range.of(187L);
      range0.complementFrom(list2);
      // Undeclared exception!
      try { 
        Range.of(2169L, 1192L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.747615120443563
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-18L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 315L, 65507L);
      range0.intersects(range1);
      range1.intersection(range0);
      Long long0 = new Long(8L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem1, 1658L, 448L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.5823226441765663
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 284L, 65507L);
      Range range0 = Range.of((-747L));
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.io.IOUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.io.IOUtil
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.2972360828566205
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(9223372036854772252L);
      Long long0 = new Long(9223372036854772252L);
      range0.equals(consumer0);
      Object object0 = new Object();
      Range range1 = Range.of(9223372036854773896L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long1 = range1.getEnd();
      assertEquals(9223372036854773896L, long1);
      
      range1.forEach(consumer1);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.26428401275716
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.spliterator();
      range0.forEach(consumer0);
      range0.isEmpty();
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.427544156813783
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long long0 = (-18L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-18L), (-18L));
      Long long1 = new Long(1567L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-18L));
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_Builder1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=4.035178840368199
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of((-18L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 65535L, 9223372036854775602L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem2);
      Range range2 = Range.ofLength(9223372036854775602L);
      range2.toString();
      Range range3 = range2.intersection(range1);
      range0.intersects(range2);
      range1.intersects(range0);
      range1.isSubRangeOf(range3);
      range0.startsBefore(range0);
      range1.complement(range0);
      range3.complement(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.4352238748044663
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      range0.getEnd(range_CoordinateSystem0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.build();
      Range.Builder range_Builder3 = new Range.Builder(0L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder3);
      range_Builder2.build();
      Range.Builder range_Builder6 = range_Builder4.expandBegin(0L);
      Range.Builder range_Builder7 = new Range.Builder(6953L);
      range_Builder6.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder8 = new Range.Builder(range_CoordinateSystem1, 127L, 2837L);
      assertFalse(range_Builder8.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 152
  /*Coverage entropy=4.0349986343871675
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(6953L);
      Range range0 = Range.of(9223372036854772252L);
      Range range1 = Range.of(6953L, 9223372036854772252L);
      range0.forEach(consumer0);
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Long long1 = new Long(77L);
      Long long2 = new Long(2781L);
      Range range2 = Range.of(1L, 9223372036854772252L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 255L, 4294967295L);
      range2.intersects(range3);
      Range.of(1L);
      // Undeclared exception!
      try { 
        Range.ofLength((-3502L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.3908709612697496
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(9223372036854772252L);
      Long long0 = new Long(9223372036854772252L);
      Object object0 = new Object();
      Range range0 = Range.of((-1525L));
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.3813657700786846
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.of((-18L));
      Long long0 = new Long(65535L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.of(9223372036854775705L);
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-1100L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange(";", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ; into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.9055544329527803
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 92L);
      Range range2 = Range.ofLength(0L);
      List<Range> list0 = range1.complement(range2);
      range1.complementFrom(list0);
      range0.intersection(range2);
      Long long0 = new Long((-508L));
      Long long1 = new Long(1L);
      Range.of((-128L));
      Range range3 = Range.of(range_CoordinateSystem0, (-1L), 124L);
      range3.iterator();
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854768882L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=4.165933354043202
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range range0 = Range.of(6953L);
      Range range1 = Range.of((-4639L), (-4639L));
      range0.toString();
      range0.complement(range0);
      Range range2 = range0.intersection(range0);
      Range range3 = Range.of(3581L);
      Range range4 = range0.asRange();
      range4.startsBefore(range0);
      range4.toString();
      range2.intersects(range3);
      range2.isSubRangeOf(range4);
      range1.startsBefore(range3);
      Range range5 = Range.of(0L, 2147483777L);
      range3.intersects(range5);
      range4.isSubRangeOf(range2);
      Range range6 = Range.parseRange("[ 6953 .. 6953 ]/0B");
      Range.of(3581L);
      range6.startsBefore(range0);
      Range range7 = Range.of(2147483777L);
      range7.complement(range1);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.842782170474537
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      long long0 = 3581L;
      Range range0 = Range.ofLength(3581L);
      range0.startsBefore(range0);
      range0.complement(range0);
      long long1 = (-2246L);
      range0.intersects(range0);
      // Undeclared exception!
      try { 
        range0.split((-2246L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=3.5254266763528364
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder1.shift(0L);
      range_Builder0.shift(0L);
      range_Builder2.copy();
      range_Builder0.build();
      range_Builder1.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1335L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=3.2397208470799024
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-14L), 0L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=3.272201316632902
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(9223372036854772252L);
      Long long0 = new Long(9223372036854772252L);
      Object object0 = new Object();
      Range.of(9223372036854773896L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.of((-1785L), (-1820L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=3.575321667820893
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder1.shift(0L);
      range_Builder0.shift(0L);
      range_Builder2.copy();
      range_Builder0.contractBegin(0L);
      range_Builder0.build();
      range_Builder1.contractEnd(0L);
      Range range0 = Range.ofLength(0L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=3.5820345247734067
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range.Comparators.values();
      Long long0 = new Long(276L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(276L, 276L);
      Range.Builder range_Builder2 = range_Builder1.expandEnd(276L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder5 = new Range.Builder(1967L);
      Range.Builder range_Builder6 = range_Builder2.contractEnd(276L);
      range_Builder6.build();
      Long long1 = new Long(65535L);
      Range range0 = Range.of(1967L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.246304923773509
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long long0 = (-1212L);
      Long long1 = new Long((-1212L));
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-1212L));
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_Builder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=3.6414355427504397
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(210L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      List<Range> list0 = range0.split(210L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
      
      range0.spliterator();
      Range range1 = Range.ofLength(210L);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=3.5564061952430075
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Range range0 = Range.of(6953L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      range_Builder0.build();
      range_Builder0.expandBegin(1L);
      Range.of(0L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-273L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=2.38615474653985
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      long long0 = (-1L);
      Range.Builder range_Builder0 = new Range.Builder((-1L), 2326L);
      Range.Builder range_Builder1 = new Range.Builder(2326L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-1828L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=3.5878046285914373
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-78L), (-78L));
      long long0 = (-32768L);
      long long1 = 255L;
      Range.of(255L);
      // Undeclared exception!
      try { 
        Range.of(255L, (-989L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=3.2181482884596084
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(9223372036854772252L);
      Long long0 = new Long(9223372036854772252L);
      range0.endsBefore(range0);
      Object object0 = new Object();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=4.011062168930164
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder0.build();
      Range range2 = range_Builder0.build();
      List<Range> list0 = range2.complement(range0);
      assertEquals(0, list0.size());
      
      Long long0 = new Long(1L);
      Range range3 = Range.of((-4640L), 2147483647L);
      boolean boolean0 = range1.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      Long long1 = new Long((-4640L));
      range3.intersection(range2);
      assertSame(range2, range0);
      
      Long long2 = new Long(0L);
      Range.CoordinateSystem.values();
      Range range4 = Range.of(2147483647L);
      assertSame(range4, range2);
  }

  /**
  //Test case number: 171
  /*Coverage entropy=3.08332035538405
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Long long0 = new Long((-1406L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range.ofLength(4294967000L);
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
  }

  /**
  //Test case number: 172
  /*Coverage entropy=3.573372300303075
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Long long0 = new Long((-9223372036854775777L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(9223372036854775807L);
      Range.of(2538L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-1L), 0L);
      assertFalse(range0.isEmpty());
  }
}
