/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 05:49:13 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.ClonePlugin;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.filter.condition.AttributeCompareCondition;
import freemind.main.FreeMindApplet;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.mindmapmode.MindMapController;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.color.ICC_Profile;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.image.ImageObserver;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.sql.Timestamp;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.Month;
import java.time.temporal.ChronoField;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalField;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Properties;
import java.util.Stack;
import java.util.TreeSet;
import java.util.concurrent.Callable;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputVerifier;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicListUI;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.plaf.multi.MultiListUI;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.GlyphView;
import javax.swing.text.LabelView;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.persist.HsqlProperties;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.MemoryTileCache;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3768655496696516
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(10145);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      MenuSelectionManager.defaultManager();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser_DecoratorButton0, 34, 1073741824L, 3, 49, '-', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.setKeyCode(3);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo1);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.updateUI();
      int int0 = SwingConstants.NORTH_WEST;
      jDayChooser0.setMaxDayCharacters(0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, (-1172), 41L, 3981, 0, '-');
      jDayChooser0.keyPressed(keyEvent0);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, 34, (String) null, 472);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.281345789391358
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener1);
      ContainerListener containerListener2 = AWTEventMulticaster.add(containerListener1, (ContainerListener) null);
      jDayChooser0.addContainerListener(containerListener2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.updateUI();
      int int0 = ImageObserver.PROPERTIES;
      jDayChooser0.setMaxDayCharacters(4);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4, (-2647L), 2375, 929, '-');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawWeeks();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2509790313494573
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getInputVerifier();
      jDayChooser_DecoratorButton0.removeNotify();
      jDayChooser_DecoratorButton0.isFocusable();
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      metalComboBoxEditor_UIResource0.addActionListener(jDayChooser0);
      jDayChooser0.getInputVerifier();
      jDayChooser0.setInputVerifier((InputVerifier) null);
      jDayChooser0.setMaxDayCharacters(2);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 749, 2375, 2, (-3038), '_');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2358838821854636
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 2779;
      jDayChooser0.setMonth(2779);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MenuSelectionManager.defaultManager();
      char char0 = '-';
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser();
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser3.setDayBordersVisible(true);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_NONE;
      jDayChooser3.setMaxDayCharacters(3);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser2.getMaxDayCharacters();
      jDayChooser3.setMaxDayCharacters(0);
      int int1 = 8920;
      char char1 = 'V';
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0587281784800973
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_ALL;
      Integer.sum((-1855), (-1855));
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Element element0 = defaultStyledDocument0.getDefaultRootElement();
      System.setCurrentTimeMillis((-3710));
      GlyphView glyphView0 = new GlyphView(element0);
      Color color0 = glyphView0.getForeground();
      jDayChooser0.setForeground(color0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getFont();
      jDayChooser0.setFont((Font) null);
      System.setCurrentTimeMillis((-3710));
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.343856937129137
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(486);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 1387, 1387, (-871), 383, 'K', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.paramString();
      menuKeyEvent0.setKeyCode(61445);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.load(0);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.updateUI();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMaxDayCharacters(0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser1.drawWeeks();
      jDayChooser1.initDecorations();
      jDayChooser1.setMonth(33);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.260576811065994
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(2779);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setDay(2779);
      MenuSelectionManager.defaultManager();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      JOptionPane jOptionPane0 = new JOptionPane("Metal");
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jOptionPane0, 3, (-2468L), 49, 3, '-', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.setKeyCode(42);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      jDayChooser0.isRequestFocusEnabled();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo1);
      KeyEvent keyEvent0 = new KeyEvent(jOptionPane0, 42, 0, 0, 49, '-');
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.drawWeeks();
      jDayChooser0.initDecorations();
      assertEquals(31, jDayChooser0.getDay());
      
      JDayChooser jDayChooser1 = new JDayChooser();
      BasicListUI basicListUI0 = new BasicListUI();
      Instant instant0 = MockInstant.ofEpochSecond((long) 42, (long) 0);
      MockInstant.with(instant0, (TemporalAdjuster) instant0);
      ChronoField chronoField0 = ChronoField.DAY_OF_MONTH;
      jDayChooser1.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2021264500326914
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_ALL;
      Color color0 = Color.BLUE;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.revalidate();
      jDayChooser0.setDecorationBackgroundColor(color0);
      Color color1 = jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals((-16776961), color1.getRGB());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.load(357);
      jpegImage0.getTransparentColor();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.minSelectableDate;
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, 90, (-1102), (-1102), 606, 14, 38, true, (-2081), 90, 713);
      MouseWheelEvent mouseWheelEvent1 = new MouseWheelEvent(jDayChooser0, 2779, 14, 606, 38, 713, 15, 713, 90, false, 400, 9, 15, (-610.972));
      mouseWheelEvent1.translatePoint(3, 9);
      jDayChooser0.getToolTipLocation(mouseWheelEvent0);
      Locale locale0 = Locale.CANADA;
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      assertSame(date1, date0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis((-299L));
      JDayChooser jDayChooser0 = new JDayChooser();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, 606, 90, 606, (-2081), 46, (-2081), true, 2042, 350, (-2081));
      MouseWheelEvent mouseWheelEvent1 = new MouseWheelEvent(jDayChooser0, 90, (-328L), (-2926), 90, 5, 46, (-1437625606), 8968, true, 15, 606, 1481, 2042);
      mouseWheelEvent0.translatePoint(46, 90);
      jDayChooser0.getToolTipLocation((MouseEvent) null);
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setMinSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.205497927762563
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      Properties properties0 = FreeMindApplet.defaultProps;
      HsqlProperties hsqlProperties0 = new HsqlProperties((Properties) null);
      jDayChooser0.setDayBordersVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      JMapViewer jMapViewer0 = new JMapViewer();
      ClonePlugin clonePlugin0 = new ClonePlugin();
      ClonePlugin clonePlugin1 = new ClonePlugin();
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      metalComboBoxEditor_UIResource0.getItem();
      metalComboBoxEditor_UIResource0.addActionListener(jDayChooser0);
      jDayChooser0.addFocusListener(jDayChooser0);
      jDayChooser0.getInputVerifier();
      jDayChooser0.setInputVerifier((InputVerifier) null);
      jDayChooser0.setFocus();
      jDayChooser0.setDay(13);
      jDayChooser0.getSelectedDay();
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.333600199353132
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getInputVerifier();
      jDayChooser_DecoratorButton0.removeNotify();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDayBordersVisible(true);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_NONE;
      jDayChooser0.setMaxDayCharacters((-1577));
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser1.setMaxDayCharacters(6);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 748, 3, (-1577), 228, 'V');
      jDayChooser1.setMaxDayCharacters(226);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser1, 592, (-1510L), 6, 226, 'V');
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser1.setDay(748);
      assertEquals(28, jDayChooser1.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3983674235577883
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      System.setCurrentTimeMillis(1666L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(1, jDayChooser0.getDay());
      
      jDayChooser0.setDay(8848);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MenuSelectionManager.defaultManager();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getTransparentColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.updateUI();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true, jDayChooser0);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_SPACING;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setEnabled(true);
      MockDate mockDate0 = new MockDate(6, (-3333), 3218, (-3333), (-3333));
      jDayChooser0.setSelectableDateRange(date0, mockDate0);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2001041616734947
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay((-1056));
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      jDayChooser0.getTreeLock();
      Element element0 = defaultStyledDocument0.getCharacterElement(3473);
      LabelView labelView0 = new LabelView(element0);
      defaultStyledDocument0.createPosition(3473);
      jDayChooser0.setDayBordersVisible(false);
      labelView0.getBackground();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 5, "14", (-1056));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u`_>\"fZ?UX(|W0");
      jDayChooser0.setDay((-580));
      jDayChooser0.getSelectedDay();
      jDayChooser0.setYear(47);
      jDayChooser0.drawDays();
      jDayChooser0.drawDays();
      jDayChooser0.initDecorations();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 47, (-1932L), (-1056), (-2591), 'u');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.isDayBordersVisible();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2327220878580185
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(2779);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MenuSelectionManager.defaultManager();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      JOptionPane jOptionPane0 = new JOptionPane("Metal");
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jOptionPane0, 3, (-2468L), 49, 3, '-', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.setKeyCode(42);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      jDayChooser0.isRequestFocusEnabled();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo1);
      KeyEvent keyEvent0 = new KeyEvent(jOptionPane0, 42, 0, 0, 49, '-');
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.drawWeeks();
      jDayChooser0.initDecorations();
      JDayChooser jDayChooser1 = new JDayChooser();
      BasicListUI basicListUI0 = new BasicListUI();
      Temporal[] temporalArray0 = new Temporal[3];
      Instant instant0 = MockInstant.ofEpochSecond((long) 42, (long) 0);
      Instant instant1 = MockInstant.with(instant0, (TemporalAdjuster) instant0);
      ChronoField chronoField0 = ChronoField.DAY_OF_MONTH;
      // Undeclared exception!
      try { 
        MockInstant.with(instant1, (TemporalField) chronoField0, 303L);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfMonth (valid values 1 - 28/31): 303
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.413282284903041
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-1056));
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 20, 0L, 3473, 3473, 'K', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.paramString();
      menuKeyEvent0.setKeyCode((-3924));
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      fopImage_ImageInfo0.dpiVertical = (double) (-3924);
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      fopImage_ImageInfo0.mimeType = "unknown type,keyCode=3473,keyText=Unknown keyCode: 0xd91,keyChar='K',modifiers=Shift+Button1,extModifiers=Meta+Ctrl+Button1+Button2,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0";
      fopImage_ImageInfo0.dpiHorizontal = (-3848.65898666394);
      jpegImage0.load((-3924));
      jpegImage0.getTransparentColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.updateUI();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_NONE;
      jDayChooser0.setMaxDayCharacters((-1261));
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.initDecorations();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setYear(0);
      jDayChooser1.setMonth((-1285));
      jDayChooser1.setDayBordersVisible(true);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2320164291133473
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-1056));
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      defaultStyledDocument0.getEndPosition();
      Object object0 = jDayChooser0.getTreeLock();
      defaultStyledDocument0.getProperty(object0);
      Element element0 = defaultStyledDocument0.getCharacterElement(3473);
      LabelView labelView0 = new LabelView(element0);
      defaultStyledDocument0.createPosition(3473);
      jDayChooser0.setDayBordersVisible(false);
      labelView0.getBackground();
      jDayChooser0.setSundayForeground((Color) null);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.drawDays();
      jDayChooser0.getSundayForeground();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getTopLevelAncestor();
      jDayChooser1.getMaxSelectableDate();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.389019410449218
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JComponent.getDefaultLocale();
      jDayChooser0.setAutoscrolls(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.getX();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setDay(0);
      jDayChooser0.getName();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.getSundayForeground();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDayBordersVisible(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setAlwaysFireDayProperty(true);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.setDay(4);
      assertEquals(4, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1337304777448702
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getComponentPopupMenu();
      jDayChooser0.setMonth(10156);
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = (-2213L);
      jDayChooser0.getDaysInMonth();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.424079966741347
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(486);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 486, 0L, 61445, (-3000), 'K', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.paramString();
      menuKeyEvent0.setKeyCode((-1390));
      jDayChooser0.keyTyped(menuKeyEvent0);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getTransparentColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.updateUI();
      jDayChooser0.getMaxDayCharacters();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true, jDayChooser0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.focusLost(focusEvent0);
      jDayChooser1.getDayPanel();
      jDayChooser1.getDaysInMonth();
      int int0 = jDayChooser1.getDaysInMonth();
      assertEquals(28, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1647413942639915
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      ContainerListener containerListener2 = AWTEventMulticaster.add(containerListener1, containerListener0);
      jPopupMenu0.addContainerListener(containerListener2);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_MEDIAL;
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      jDayChooser0.setDay(664);
      jDayChooser0.getSelectedDay();
      System.setCurrentTimeMillis(1320L);
      jDayChooser0.setDay(664);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2746585797387984
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(486);
      MenuSelectionManager.defaultManager();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      fopImage_ImageInfo0.height = 61445;
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jDayChooser0.setWeekOfYearVisible(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.updateUI();
      jDayChooser0.getMaxDayCharacters();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true, jDayChooser0);
      jDayChooser0.setMaxDayCharacters(13);
      jDayChooser0.isDecorationBordersVisible();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 90;
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.216379148516894
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(486);
      jDayChooser0.getHeight();
      MenuSelectionManager.defaultManager();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.updateUI();
      jDayChooser0.getMaxDayCharacters();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true, jDayChooser0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      focusEvent0.setSource(integer0);
      jDayChooser0.focusGained(focusEvent0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2344, (-1522L), 2949, 61445, '1');
      jDayChooser0.keyReleased(keyEvent0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.3642495328685817
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDay(486);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 486, 0L, 61445, (-3000), 'K', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.paramString();
      menuKeyEvent0.setKeyCode((-1390));
      jDayChooser0.keyTyped(menuKeyEvent0);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getTransparentColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.updateUI();
      jDayChooser0.getMaxDayCharacters();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true, jDayChooser0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      focusEvent0.setSource(integer0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.addListeners(0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1509516053141597
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      Locale locale0 = Locale.PRC;
      locale0.getUnicodeLocaleKeys();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      linkedHashSet0.add(locale0);
      locale0.getDisplayScript();
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      TreeSet<Locale> treeSet0 = new TreeSet<Locale>();
      Locale.lookup(stack0, treeSet0);
      Locale locale1 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1699680061509725
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer.sum((-1855), (-1855));
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      Timestamp timestamp0 = new Timestamp((-2258));
      timestamp0.toInstant();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.setDay(10);
      jDayChooser0.getSelectedDay();
      assertEquals(10, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3259997593303288
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.minSelectableDate;
      Properties properties0 = FreeMindApplet.defaultProps;
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      ContainerListener containerListener2 = AWTEventMulticaster.add((ContainerListener) null, containerListener1);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener2);
      AWTEventMulticaster.remove(containerListener1, (ContainerListener) null);
      AWTEventMulticaster.add(containerListener1, containerListener1);
      jDayChooser0.addContainerListener((ContainerListener) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.updateUI();
      int int0 = ImageObserver.PROPERTIES;
      jDayChooser0.setMaxDayCharacters(27);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 59, (-2342L), 929, 0, 't');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawWeeks();
      jDayChooser0.drawWeeks();
      jDayChooser0.setMaxSelectableDate(date0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.240529669844218
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      System.setCurrentTimeMillis((-299L));
      JDayChooser jDayChooser0 = new JDayChooser();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add((ContainerListener) null, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener1);
      jDayChooser0.addContainerListener(containerListener1);
      jDayChooser0.getClientProperty(containerListener1);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      jDayChooser0.isRequestFocusEnabled();
      FopImage.ImageInfo fopImage_ImageInfo2 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo2);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1918, (-2772L), 6, 23, 'J');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.updateUI();
      int int0 = SwingConstants.NORTH_WEST;
      jDayChooser0.setMaxDayCharacters(0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1962175022002226
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      Integer.sum((-1855), (-1262));
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.removeNotify();
      jDayChooser_DecoratorButton0.isFocusable();
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      metalComboBoxEditor_UIResource0.addActionListener(jDayChooser0);
      jDayChooser0.addFocusListener(metalComboBoxEditor_UIResource0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      jDayChooser0.calendar = (Calendar) mockGregorianCalendar0;
      jDayChooser0.getInputVerifier();
      jDayChooser0.setInputVerifier((InputVerifier) null);
      ActionEvent actionEvent0 = new ActionEvent(mockGregorianCalendar0, 2, "day", 2);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser_DecoratorButton0, 2);
      jDayChooser0.focusGained(focusEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.2592137415047224
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(486);
      MenuSelectionManager.defaultManager();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2601, 2601, 45);
      actionMap0.get(mockGregorianCalendar0);
      JButton jButton0 = new JButton((Action) null);
      JButton jButton1 = new JButton();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("14", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("14", vetoableChangeListenerProxy0);
      JYearChooser jYearChooser0 = new JYearChooser();
      Color color0 = jYearChooser0.darkGreen;
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.getDay();
      jDayChooser0.getMaxDayCharacters();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.05861803958271
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      jDayChooser0.init();
      JMapViewer jMapViewer0 = new JMapViewer(memoryTileCache0, 418);
      BrowseMode browseMode0 = new BrowseMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.231162368301742
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.day = 0;
      jDayChooser0.setMonth(8501);
      jDayChooser0.setEnabled(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.280071255272283
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 34, (-355L), (-1116), (-1116), 'K', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.setKeyCode(34);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      fopImage_ImageInfo1.height = 0;
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo1);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.updateUI();
      FopImage.ImageInfo fopImage_ImageInfo2 = new FopImage.ImageInfo();
      FopImage.ImageInfo fopImage_ImageInfo3 = new FopImage.ImageInfo();
      fopImage_ImageInfo3.width = 1423;
      fopImage_ImageInfo3.width = 379;
      fopImage_ImageInfo2.dpiVertical = 699.0;
      FopImage.ImageInfo fopImage_ImageInfo4 = new FopImage.ImageInfo();
      JpegImage jpegImage1 = new JpegImage(fopImage_ImageInfo3);
      jDayChooser0.setWeekOfYearVisible(true);
      MenuSelectionManager.defaultManager();
      jDayChooser0.updateUI();
      int int0 = ImageObserver.PROPERTIES;
      jDayChooser0.setMaxDayCharacters(0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 929, (-1116), 11, 2375, 'K');
      jDayChooser0.getDaysInMonth();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(menuKeyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", vetoableChangeListener0);
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.1326303323964093
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setEnabled(true);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.removeNotify();
      jDayChooser_DecoratorButton0.isFocusable();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 34, (-355L), (-1113), (-1113), 'K', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.setKeyCode(34);
      jDayChooser0.keyTyped(menuKeyEvent0);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo1);
      assertNull(jpegImage0.getMimeType());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Locale locale0 = Locale.CANADA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      locale0.getUnicodeLocaleKeys();
      hashSet0.add(locale0);
      Locale.lookup(linkedList0, hashSet0);
      Locale locale1 = Locale.ENGLISH;
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1971491788731248
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      System.setCurrentTimeMillis((-299L));
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      AWTEventMulticaster.add(containerListener1, (ContainerListener) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDayBordersVisible(true);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_NONE;
      jDayChooser1.setMaxDayCharacters((-1577));
      jDayChooser1.getMaxDayCharacters();
      jDayChooser0.setMaxDayCharacters(8920);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 592, (-3038), 592, 0, '<');
      jDayChooser1.setDay(754);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(31, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.170005734881401
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-934));
      jDayChooser0.getMaxDayCharacters();
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = (-589L);
      int int0 = (-2321);
      char char0 = '[';
      MenuElement[] menuElementArray0 = new MenuElement[4];
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      Locale locale0 = Locale.CANADA;
      MultiListUI multiListUI0 = new MultiListUI();
      JList<Month> jList0 = new JList<Month>();
      int int0 = 238;
      // Undeclared exception!
      try { 
        multiListUI0.getCellBounds(jList0, 238, 238);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MenuSelectionManager.defaultManager();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      fopImage_ImageInfo0.inputStream = (InputStream) dataInputStream0;
      fopImage_ImageInfo0.height = 486;
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getTransparentColor();
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1287401363544483
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay((-1056));
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Object object0 = jDayChooser0.getTreeLock();
      defaultStyledDocument0.getProperty(object0);
      Element element0 = defaultStyledDocument0.getCharacterElement(3473);
      LabelView labelView0 = new LabelView(element0);
      defaultStyledDocument0.createPosition(3473);
      jDayChooser0.setDayBordersVisible(false);
      labelView0.getBackground();
      jDayChooser0.setSundayForeground((Color) null);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 5, "14", (-1056));
      jDayChooser0.setDay((-580));
      jDayChooser0.getSelectedDay();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.196412172806106
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(2779);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      JOptionPane jOptionPane0 = new JOptionPane();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      jDayChooser0.isRequestFocusEnabled();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      fopImage_ImageInfo1.width = 3150;
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo1);
      KeyEvent keyEvent0 = new KeyEvent(jOptionPane0, 42, 0, 0, 49, '-');
      jDayChooser0.updateUI();
      int int0 = SwingConstants.NORTH_WEST;
      jDayChooser0.setMaxDayCharacters(31);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 3, '-', 2375, 0, '-');
      jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Object object0 = new Object();
      ActionEvent actionEvent0 = new ActionEvent(object0, 1466, "28", 620L, 437);
      Callable<Calendar> callable0 = (Callable<Calendar>) mock(Callable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.2054607286107037
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.minSelectableDate;
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, 14, 14, 14, 606, 90, 14, false, 90, 14, (-1102));
      jDayChooser0.getToolTipLocation(mouseWheelEvent0);
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setMinSelectableDate(date0);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(164, color0.getBlue());
      
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.203050177468047
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      System.setCurrentTimeMillis((-299L));
      JDayChooser jDayChooser0 = new JDayChooser();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener1);
      jDayChooser0.addContainerListener(containerListener1);
      jDayChooser0.getClientProperty(containerListener1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setEnabled(true);
      int int0 = (-449);
      jDayChooser0.drawWeeks();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMonth((-449));
      int int1 = (-728);
      AttributeCompareCondition attributeCompareCondition0 = new AttributeCompareCondition("day", "5", true, (-728), true);
      // Undeclared exception!
      try { 
        attributeCompareCondition0.getListCellRendererComponent();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.filter.condition.CompareConditionAdapter", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.169968006150972
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        jDayChooser0.add((Component) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getContainerListeners();
      jDayChooser0.isWeekOfYearVisible();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      int int0 = (-186);
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance((-186));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.417512563324285
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JComponent.getDefaultLocale();
      jDayChooser0.setAutoscrolls(false);
      jDayChooser0.setVerifyInputWhenFocusTarget(false);
      jDayChooser0.getX();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setDay(450);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMaxDayCharacters(450);
      jDayChooser0.getSundayForeground();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDayBordersVisible(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setAlwaysFireDayProperty(true);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.2958876240331767
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(2779);
      Boolean boolean0 = new Boolean(true);
      MenuSelectionManager.defaultManager();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      JOptionPane jOptionPane0 = new JOptionPane();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jOptionPane0, 3, (-2468L), 49, 3, '-', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.setKeyCode(42);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      jDayChooser0.isRequestFocusEnabled();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo1);
      KeyEvent keyEvent0 = new KeyEvent(jOptionPane0, 42, 0, 0, 49, '-');
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.updateUI();
      int int0 = SwingConstants.NORTH_WEST;
      jDayChooser0.setMaxDayCharacters(31);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 3, 0L, 2375, 0, '-');
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setDayBordersVisible((boolean) boolean0);
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }
}
