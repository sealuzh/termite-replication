/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 06:52:45 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.File;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "4@x3GF6WrWgS%Fl)";
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, InputStream> function0 = (Function<Object, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ?>) function0);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "4@x3GF6WrWgS%Fl)";
      stringArray1[2] = "4@x3GF6WrWgS%Fl)";
      stringArray1[4] = "basedi@ does not exist";
      stringArray1[2] = "4@x3GF6WrWgS%Fl)";
      archiveScanner0.excludes = stringArray1;
      Function.identity();
      stringArray0[1] = "4@x3GF6WrWgS%Fl)";
      stringArray0[2] = "4@x3GF6WrWgS%Fl)";
      archiveScanner0.setIncludes(stringArray0);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Vector<Integer> vector2 = new Vector<Integer>();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, Integer> function2 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      Vector<String> vector3 = new Vector<String>();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      Integer integer0 = new Integer(373);
      unaryOperator1.apply(integer0);
      Function<Object, Integer> function3 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      function3.apply(pushbackInputStream0);
      unaryOperator2.compose((Function<? super InputStream, ? extends Integer>) function2);
      unaryOperator2.compose((Function<? super Integer, ? extends Integer>) function3);
      vector2.replaceAll(unaryOperator2);
      Vector<Integer> vector4 = new Vector<Integer>();
      Integer integer1 = new Integer((-1612669710));
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "4@x3GF6WrWgS%Fl)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.setExcludes(archiveScanner0.includes);
      String string0 = "4@x3GF6WrgS%Fl)";
      String string1 = "\"pj5#K";
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.dirsExcluded = vector1;
      DirectoryScanner.matchPath(string0, string1);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      String string2 = "j:";
      archiveScanner0.setBasedir(string2);
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      stringArray0[1] = string2;
      stringArray0[2] = string2;
      String string3 = "user.dir";
      archiveScanner0.isExcluded(string3);
      stringArray0[3] = string0;
      String string4 = "X%]Rt6pZbUT";
      Vector<String> vector2 = new Vector<String>();
      archiveScanner0.dirsIncluded = vector2;
      archiveScanner0.couldHoldIncluded(string4);
      vector1.removeAllElements();
      stringArray0[4] = string2;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string2;
      stringArray0[8] = string0;
      archiveScanner0.setIncludes(stringArray0);
      long long0 = 269L;
      String string5 = ".war";
      archiveScanner0.isIncluded(string5);
      String string6 = "^YoifAWqI_Lz;y";
      vector2.add(string6);
      System.setCurrentTimeMillis(long0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(stringArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.setExcludes(archiveScanner0.includes);
      String string0 = ".JAR";
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.dirsExcluded = vector1;
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      archiveScanner0.setBasedir((File) improvedFile0);
      stringArray0[1] = string0;
      String string1 = "!";
      stringArray0[2] = string1;
      archiveScanner0.setIncludes(stringArray0);
      Vector<Integer> vector2 = new Vector<Integer>();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Vector<Integer> vector3 = new Vector<Integer>();
      Integer integer0 = new Integer(archiveScanner0.FILE);
      vector3.add(integer0);
      Vector<String> vector4 = new Vector<String>();
      Function.identity();
      archiveScanner0.filesIncluded = vector4;
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ? extends Integer>) unaryOperator0);
      vector3.replaceAll(unaryOperator1);
      Vector<Integer> vector5 = new Vector<Integer>();
      Integer integer1 = new Integer(archiveScanner0.DIRECTORY);
      System.setCurrentTimeMillis(archiveScanner0.FILE);
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      boolean boolean0 = false;
      archiveScanner0.processFile(stringArray0[2]);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, stringArray0[2], boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.setExcludes(archiveScanner0.includes);
      String string0 = "4@x3GF6WrgS%Fl)";
      String string1 = "\"pj5#K";
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.dirsExcluded = vector1;
      DirectoryScanner.matchPath(string0, string1);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Vector<Integer> vector2 = new Vector<Integer>();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      vector2.trimToSize();
      vector2.replaceAll(unaryOperator0);
      Vector<String> vector3 = new Vector<String>();
      archiveScanner0.filesExcluded = vector3;
      Vector<Integer> vector4 = new Vector<Integer>();
      Integer integer0 = new Integer(archiveScanner0.DIRECTORY);
      boolean boolean0 = vector4.add((Integer) archiveScanner0.FILE);
      String[] stringArray0 = new String[6];
      String string2 = "";
      stringArray0[0] = string2;
      stringArray0[1] = string1;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string1;
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, stringArray0[5], boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.setExcludes(archiveScanner0.includes);
      String string0 = "4@x3GF6WrgS%Fl)";
      String string1 = "\"pj5#K";
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.dirsExcluded = vector1;
      boolean boolean0 = DirectoryScanner.matchPath(string0, string1);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Vector<Integer> vector2 = new Vector<Integer>();
      UnaryOperator.identity();
      Vector<Integer> vector3 = new Vector<Integer>();
      archiveScanner0.dirsNotIncluded = vector3;
      vector2.add((Integer) archiveScanner0.DIRECTORY);
      String string2 = ".JAR";
      DirectoryScanner.matchPath(string0, string2);
      vector1.removeAll(vector3);
      String[] stringArray0 = new String[2];
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, string1, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.setExcludes(archiveScanner0.includes);
      String string0 = "4@x3GF6WrgS%Fl)";
      String string1 = "\"pj5#K";
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.dirsExcluded = vector1;
      DirectoryScanner.matchPath(string0, string1);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Vector<Integer> vector2 = new Vector<Integer>();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      vector2.replaceAll(unaryOperator0);
      Vector<Integer> vector3 = new Vector<Integer>();
      archiveScanner0.dirsNotIncluded = vector3;
      vector2.add((Integer) archiveScanner0.DIRECTORY);
      String[] stringArray0 = new String[2];
      stringArray0[0] = string1;
      stringArray0[1] = string1;
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.couldHoldIncluded(string1);
      boolean boolean0 = false;
      String string2 = "E(Z1TJ2\\.jar";
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0, string2);
      String string3 = "Wps3";
      MockFile.createTempFile(stringArray0[0], string3);
      try { 
        archiveScanner0.processDirectory(improvedFile1, string0, boolean0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/E(Z1TJ2\\.jar
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "R=$S<\"5Qb`C/?(u:&Y";
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      Function<Integer, String> function1 = unaryOperator0.andThen((Function<? super Integer, ? extends String>) function0);
      Function<Object, InputStream> function2 = (Function<Object, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Object> function3 = unaryOperator0.andThen((Function<? super Integer, ?>) function2);
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.compose((Function<? super String, ? extends Integer>) function4);
      stringArray0[1] = "R=$S<\"5Qb`C/?(u:&Y";
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Integer> function6 = unaryOperator0.andThen((Function<? super Integer, ? extends Integer>) function5);
      unaryOperator0.compose((Function<? super Integer, ? extends Integer>) function6);
      stringArray0[2] = "R=$S<\"5Qb`C/?(u:&Y";
      Function<String, Integer> function7 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.compose((Function<? super String, ? extends Integer>) function7);
      archiveScanner0.setIncludes(stringArray0);
      Object object0 = new Object();
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function8).apply(any());
      Function<Object, Integer> function9 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function8);
      function9.andThen((Function<? super Integer, ? extends String>) function1);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesIncluded = vector0;
      Object object1 = new Object();
      function9.apply(object1);
      Function<Object, Integer> function10 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      Function<Object, Integer> function11 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function9);
      Object object2 = new Object();
      function11.apply(object2);
      function9.compose((Function<? super Integer, ?>) function10);
      Function.identity();
      unaryOperator0.compose((Function<? super Integer, ? extends Integer>) function11);
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "R=$S<\"5Qb`C/?(u:&Y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "VglxKqcHej_zs";
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector0;
      stringArray0[1] = "k*>#gzz5P.jar";
      stringArray0[2] = "=";
      DirectoryScanner.matchPatternStart("k*>#gzz5P.jar", "=.ja$(r");
      stringArray0[3] = "[<U";
      stringArray0[4] = "Uhb&o9;-";
      stringArray0[5] = "/OmW";
      stringArray0[6] = "[<U";
      stringArray0[7] = "z";
      archiveScanner0.setExcludes(stringArray0);
      DirectoryScanner.matchPath("", "junk");
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.addDefaultExcludes();
      DirectoryScanner.matchPatternStart("\"nN8,^(}}\")", "Vhs}}!Ye%TY-QK");
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processFile("Uhb&o9;-");
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.setExcludes(archiveScanner0.includes);
      String string0 = "4@x3GF6WrgS%Fl)";
      String string1 = "\"pj5#K";
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.dirsExcluded = vector1;
      DirectoryScanner.matchPath(string0, string1);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      UnaryOperator.identity();
      Vector<Integer> vector2 = new Vector<Integer>();
      vector0.add((Integer) archiveScanner0.DIRECTORY);
      archiveScanner0.dirsNotIncluded = vector2;
      boolean boolean0 = archiveScanner0.isExcluded(string1);
      vector1.add((Integer) archiveScanner0.ARCHIVE);
      DirectoryScanner.matchPath(string0, string1);
      vector2.removeAll(vector0);
      archiveScanner0.setIncludes(archiveScanner0.includes);
      String string2 = "VF!ba#)Yy";
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, string2, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.setExcludes(archiveScanner0.includes);
      String string0 = "4@x3GF6WrgS%Fl)";
      String string1 = "\"pj5#K";
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.dirsExcluded = vector1;
      DirectoryScanner.matchPath(string0, string1);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      UnaryOperator.identity();
      Vector<Integer> vector2 = new Vector<Integer>();
      boolean boolean0 = archiveScanner0.haveSlowResults;
      archiveScanner0.dirsNotIncluded = vector2;
      archiveScanner0.isIncluded(string1);
      vector1.add((Integer) archiveScanner0.ARCHIVE);
      DirectoryScanner.matchPath(string0, string1);
      archiveScanner0.isExcluded(string0);
      archiveScanner0.setIncludes(archiveScanner0.includes);
      String string2 = "VF!ba#)Yy";
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesNotIncluded = vector0;
      DirectoryScanner.matchPath("(FW(eO+nTBPq.jar", "");
      vector0.ensureCapacity(8192);
      String[] stringArray0 = new String[2];
      vector0.add("");
      archiveScanner0.addDefaultExcludes();
      stringArray0[0] = "";
      stringArray0[1] = "";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.couldHoldIncluded("e ~6|Um7TX");
      archiveScanner0.processArchive((File) null, "9nw");
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "R=$S<\"5Qb`C/?(u:&Y";
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      Function.identity();
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function0);
      Function<Object, InputStream> function2 = (Function<Object, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super String, ?>) function1);
      Function<Integer, Object> function3 = unaryOperator0.andThen((Function<? super Integer, ?>) function2);
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.compose((Function<? super String, ? extends Integer>) function4);
      stringArray0[1] = "R=$S<\"5Qb`C/?(u:&Y";
      stringArray0[2] = "R=$S<\"5Qb`C/?(u:&Y";
      Function<String, Integer> function5 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.compose((Function<? super String, ? extends Integer>) function5);
      archiveScanner0.setIncludes(stringArray0);
      Object object0 = new Object();
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function6).apply(any());
      Function<Object, Integer> function7 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function6);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesIncluded = vector0;
      Object object1 = new Object();
      function7.apply(object1);
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function7.compose((Function<? super InputStream, ?>) unaryOperator1);
      Function.identity();
      Function<Object, Integer> function9 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function7);
      function7.compose((Function<? super Integer, ?>) function3);
      Function.identity();
      unaryOperator2.compose((Function<? super Integer, ? extends Integer>) function9);
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "eR&K}j@zE3.jar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "r@x3Fnb6rWg6%F0l)";
      UnaryOperator.identity();
      String[] stringArray1 = new String[7];
      stringArray1[0] = "r@x3Fnb6rWg6%F0l)";
      stringArray1[2] = "r@x3Fnb6rWg6%F0l)";
      stringArray1[4] = "basedi@ does nt exist";
      stringArray1[5] = "r@x3Fnb6rWg6%F0l)";
      archiveScanner0.excludes = stringArray1;
      Function.identity();
      stringArray0[1] = "r@x3Fnb6rWg6%F0l)";
      stringArray0[2] = "r@x3Fnb6rWg6%F0l)";
      archiveScanner0.setIncludes(stringArray0);
      UnaryOperator.identity();
      Vector<Integer> vector2 = new Vector<Integer>();
      Vector<String> vector3 = new Vector<String>();
      Function.identity();
      Integer integer0 = new Integer(373);
      Vector<Object> vector4 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector4;
      Integer integer1 = new Integer(373);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      Integer integer2 = new Integer(373);
      Vector<Integer> vector5 = new Vector<Integer>();
      Integer integer3 = new Integer((-1612669755));
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "zip");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "r@x3Fnb6rWg6%F0l)";
      UnaryOperator.identity();
      String[] stringArray1 = new String[7];
      stringArray1[0] = "r@x3Fnb6rWg6%F0l)";
      stringArray1[2] = "r@x3Fnb6rWg6%F0l)";
      stringArray1[4] = "basedi@ does nt exist";
      stringArray1[5] = "r@x3Fnb6rWg6%F0l)";
      archiveScanner0.excludes = stringArray1;
      Function.identity();
      stringArray0[1] = "r@x3Fnb6rWg6%F0l)";
      stringArray0[2] = "r@x3Fnb6rWg6%F0l)";
      archiveScanner0.setIncludes(stringArray0);
      UnaryOperator.identity();
      Vector<Integer> vector2 = new Vector<Integer>();
      Vector<String> vector3 = new Vector<String>();
      Function.identity();
      Integer integer0 = new Integer(373);
      Vector<Object> vector4 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector4;
      Integer integer1 = new Integer(373);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      Integer integer2 = new Integer(373);
      Vector<Integer> vector5 = new Vector<Integer>();
      Integer integer3 = new Integer((-1612669755));
      archiveScanner0.processArchive((File) null, "r@x3Fnb6rWg6%F0l)");
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.setExcludes(archiveScanner0.includes);
      String string0 = "4@x3GF6WrgS%Fl)";
      String string1 = "\"pj5#K";
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.dirsExcluded = vector1;
      DirectoryScanner.matchPath(string0, string1);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Vector<Integer> vector2 = new Vector<Integer>();
      UnaryOperator.identity();
      Integer integer0 = new Integer(archiveScanner0.ARCHIVE);
      vector1.add(integer0);
      String[] stringArray0 = new String[1];
      String string2 = ".JAR";
      stringArray0[0] = string2;
      archiveScanner0.setIncludes(stringArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, string2, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8634839209171903
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("E(ZgT,2");
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0);
      ImprovedFile improvedFile2 = new ImprovedFile(improvedFile0, "");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      improvedFile1.getCanonicalPath();
      String[] stringArray0 = new String[8];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/home/ubuntu/termite/projects/78_caloriecount/E(ZgT,2");
      stringArray0[0] = "Error trying to create temp directory, ";
      stringArray0[1] = "Error trying to initialize zipfile for ";
      stringArray0[2] = "]_";
      stringArray0[3] = "Error trying to create temp directory, ";
      improvedFile1.deleteOnExit();
      MockFile.createTempFile("%Fe+^N(@p.'FNqkHL>", "Error trying to delete file ", (File) improvedFile0);
      ImprovedFile improvedFile3 = new ImprovedFile("u~s!");
      improvedFile2.setWritable(false);
      ImprovedFile improvedFile4 = improvedFile3.createTempDir();
      archiveScanner0.toFileType(improvedFile4);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "`]P", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "vij";
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.filesNotIncluded = vector0;
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Integer> function2 = unaryOperator0.compose((Function<? super Integer, ? extends Integer>) function1);
      Function<Object, String> function3 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      function3.compose((Function<? super Integer, ?>) unaryOperator1);
      function3.compose((Function<? super Integer, ?>) function2);
      Function.identity();
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function0);
      Function<Object, InputStream> function4 = (Function<Object, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super String, ?>) function3);
      unaryOperator0.andThen((Function<? super Integer, ?>) function4);
      Function.identity();
      stringArray0[1] = "vij";
      stringArray0[2] = "vij";
      archiveScanner0.setIncludes(stringArray0);
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function5).apply(any());
      Function<Object, Integer> function6 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function5);
      Vector<String> vector1 = new Vector<String>();
      Object object0 = new Object();
      function6.apply(object0);
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function7);
      function6.compose((Function<? super InputStream, ?>) unaryOperator1);
      Function.identity();
      Function<Object, Integer> function8 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function6);
      unaryOperator0.compose((Function<? super Integer, ? extends Integer>) function8);
      Vector<Integer> vector2 = new Vector<Integer>();
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "vij", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.setExcludes(archiveScanner0.includes);
      String string0 = "4@x3GF6WrgS%Fl)";
      String string1 = "\"pj5#K";
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.dirsExcluded = vector1;
      DirectoryScanner.matchPath(string0, string1);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Vector<Integer> vector2 = new Vector<Integer>();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      vector2.replaceAll(unaryOperator0);
      Vector<Integer> vector3 = new Vector<Integer>();
      archiveScanner0.dirsNotIncluded = vector3;
      boolean boolean0 = vector2.add((Integer) archiveScanner0.DIRECTORY);
      Integer integer0 = new Integer(archiveScanner0.DIRECTORY);
      unaryOperator0.apply(integer0);
      Function<Integer, Integer> function0 = Function.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ? extends Integer>) function0);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Integer, ? extends Integer>) function0);
      Vector<Integer> vector4 = new Vector<Integer>();
      vector0.replaceAll(unaryOperator0);
      Vector<Integer> vector5 = new Vector<Integer>();
      long long0 = 1000000L;
      System.setCurrentTimeMillis(long0);
      String string2 = "=NJp;k]a,,j%b7h";
      archiveScanner0.processDirectory(improvedFile0, string2, boolean0);
      long long1 = 0L;
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesNotIncluded = vector0;
      Object object0 = vector0.clone();
      archiveScanner0.setExcludes((String[]) null);
      DirectoryScanner.matchPath("", "_7.jar");
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_7.jar";
      DirectoryScanner.matchPatternStart("2&5@P??D", "");
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Nu#~4}|}*qf";
      DirectoryScanner.matchPath("ROJZDNrRXR+}", "Nu#~4}|}*qf");
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.dirsExcluded = (Vector) object0;
      archiveScanner0.addDefaultExcludes();
      String[] stringArray1 = new String[2];
      stringArray1[0] = "";
      stringArray1[1] = "_7.jar";
      archiveScanner0.setIncludes(stringArray1);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      archiveScanner0.setExcludes(archiveScanner0.includes);
      String string0 = "4@x3GF6WrgS%Fl)";
      String string1 = "\"pj5#K";
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.isExcluded(string1);
      String string2 = "com.lts.io.archive.DefaultNestedArchive";
      archiveScanner0.isIncluded(string2);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      UnaryOperator.identity();
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.dirsNotIncluded = vector1;
      boolean boolean0 = vector0.add((Integer) archiveScanner0.DIRECTORY);
      DirectoryScanner.matchPath(string0, string1);
      archiveScanner0.setIncludes(archiveScanner0.includes);
      String string3 = "VF!ba#)Yy";
      archiveScanner0.processDirectory(improvedFile0, string3, boolean0);
      assertEquals("[1]", vector0.toString());
      assertEquals(1, vector0.size());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.setExcludes(archiveScanner0.includes);
      String string0 = "4@x3GF6WrgS%Fl)";
      String string1 = "\"pj5#K";
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.dirsExcluded = vector1;
      DirectoryScanner.matchPath(string0, string1);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      UnaryOperator.identity();
      Vector<Integer> vector2 = new Vector<Integer>();
      boolean boolean0 = archiveScanner0.haveSlowResults;
      archiveScanner0.dirsNotIncluded = vector2;
      archiveScanner0.isIncluded(string1);
      vector1.add((Integer) archiveScanner0.ARCHIVE);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(archiveScanner0.DIRECTORY);
      System.setCurrentTimeMillis(archiveScanner0.DIRECTORY);
      long long0 = (-1L);
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(archiveScanner0.DIRECTORY);
      long long1 = 407L;
      System.setCurrentTimeMillis(long1);
      MockFile mockFile0 = new MockFile(string0);
      int int0 = archiveScanner0.toFileType(mockFile0);
      //  // Unstable assertion: assertEquals(2, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("E(ZgT,27iP(");
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0);
      ImprovedFile improvedFile2 = new ImprovedFile(improvedFile0, "");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      improvedFile2.tempRename();
      improvedFile1.getCanonicalPath();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "emqFXMt]2Uayf";
      stringArray0[1] = "Error trying to initialize zipfi for ";
      stringArray0[2] = "Error trying to initialize zipfi for ";
      stringArray0[3] = "emqFXMt]2Uayf";
      stringArray0[4] = "/home/ubuntu/termite/projects/78_caloriecount/E(ZgT,27iP(";
      stringArray0[1] = "z.jar";
      improvedFile0.setExecutable(false, true);
      stringArray0[6] = "F<+^N(@p'FNqkHL>";
      stringArray0[7] = "qb{z";
      MockFile.createTempFile("qb{z", "qb{z");
      improvedFile0.deleteOnExit();
      MockFile.createTempFile("F<+^N(@p'FNqkHL>", "RuU\"egr0RuU\"egr.jar", (File) improvedFile2);
      ImprovedFile improvedFile3 = new ImprovedFile("RuU\"egr0RuU\"egr.jar", "qb{z");
      ImprovedFile.createTempDirectory("E(ZgT,27iP(", "(L!M", (File) improvedFile0);
      improvedFile3.setWritable(false);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile1, "emqFXMt]2Uayf", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "4@x3GF6WrWgS%Fl)";
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, InputStream> function0 = (Function<Object, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Object> function1 = unaryOperator0.andThen((Function<? super Integer, ?>) function0);
      Function.identity();
      stringArray0[1] = "4@x3GF6WrWgS%Fl)";
      stringArray0[2] = "4@x3GF6WrWgS%Fl)";
      Vector<Integer> vector2 = new Vector<Integer>();
      Vector<Integer> vector3 = new Vector<Integer>();
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function2).apply(any());
      Function<String, Integer> function3 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.compose((Function<? super String, ? extends Integer>) function4);
      unaryOperator0.compose((Function<? super String, ? extends Integer>) function3);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super InputStream, ? extends Integer>) function5);
      unaryOperator0.andThen((Function<? super Integer, ?>) function1);
      Function<Object, Integer> function6 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function8 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function6);
      UnaryOperator<InputStream> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function10 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function9);
      unaryOperator1.andThen((Function<? super InputStream, ? extends String>) function10);
      Function<Integer, InputStream> function11 = (Function<Integer, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, InputStream> function12 = unaryOperator1.compose((Function<? super Integer, ? extends InputStream>) function11);
      function8.andThen((Function<? super Integer, ? extends InputStream>) function12);
      function8.apply("4@x3GF6WrWgS%Fl)");
      unaryOperator0.compose((Function<? super Integer, ? extends Integer>) function8);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, "4@x3GF6WrWgS%Fl)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("cb%g8$G8m");
      String[] stringArray0 = new String[17];
      stringArray0[0] = "cb%g8$G8m";
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(19L);
      System.setCurrentTimeMillis(19L);
      System.setCurrentTimeMillis(19L);
      System.setCurrentTimeMillis((-4610L));
      System.setCurrentTimeMillis(19L);
      System.setCurrentTimeMillis(1000000L);
      System.setCurrentTimeMillis(19L);
      System.setCurrentTimeMillis(19L);
      System.setCurrentTimeMillis(588L);
      ImprovedFile improvedFile0 = new ImprovedFile("cb%g8$G8m");
      improvedFile0.toPath();
      DirectoryScanner.matchPatternStart("cb%g8$G8m", "cb%g8$G8m");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      DirectoryScanner.matchPath("cb%g8$G8m", "cb%g8$G8m");
      int int0 = archiveScanner0.toFileType(improvedFile0);
      //  // Unstable assertion: assertEquals(2, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-113);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      ImprovedFile improvedFile0 = new ImprovedFile("W=g'K)^B1^`");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      EvoSuiteFile evoSuiteFile3 = new EvoSuiteFile("W=g'K)^B1^`/nne4oL0nne4oL");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder(evoSuiteFile3);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      EvoSuiteFile evoSuiteFile4 = new EvoSuiteFile("W=g'K)^B1^`");
      EvoSuiteFile evoSuiteFile5 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.createFolder(evoSuiteFile5);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile4);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile2);
      EvoSuiteFile evoSuiteFile6 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile6);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      ImprovedFile improvedFile0 = new ImprovedFile("W=g'K)^B1^`");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      EvoSuiteFile evoSuiteFile3 = new EvoSuiteFile("W=g'K)^B1^`/nne4oL0nne4oL");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder(evoSuiteFile3);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      EvoSuiteFile evoSuiteFile4 = new EvoSuiteFile("W=g'K)^B1^`");
      EvoSuiteFile evoSuiteFile5 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.createFolder(evoSuiteFile5);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile4);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile2);
      EvoSuiteFile evoSuiteFile6 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile6);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.addDefaultExcludes();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Integer, Integer> function1 = unaryOperator0.compose((Function<? super Integer, ? extends Integer>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function2).apply(any());
      Function<Object, String> function3 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      Function<Integer, String> function5 = function4.compose((Function<? super Integer, ?>) unaryOperator0);
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function6).apply(any());
      Function<Object, Integer> function7 = function3.andThen((Function<? super String, ? extends Integer>) function6);
      function3.compose((Function<? super Integer, ?>) function1);
      Function.identity();
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function5);
      unaryOperator1.compose((Function<? super String, ?>) function3);
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Integer, Object> function8 = unaryOperator2.andThen((Function<? super Integer, ?>) unaryOperator1);
      Function<Object, Integer> function9 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function8.compose((Function<? super String, ? extends Integer>) function9);
      Function.identity();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "vij";
      archiveScanner0.setIncludes(stringArray0);
      UnaryOperator.identity();
      Function<Object, Integer> function10 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function7);
      Vector<String> vector0 = new Vector<String>();
      Object object0 = new Object();
      Function<Object, PushbackInputStream> function11 = (Function<Object, PushbackInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ? extends PushbackInputStream>) function11);
      function7.apply(function4);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function10);
      function7.compose((Function<? super InputStream, ?>) function3);
      Function.identity();
      unaryOperator2.compose((Function<? super Object, ? extends Integer>) function10);
      unaryOperator2.compose((Function<? super Integer, ? extends Integer>) function10);
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "vij");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "VglxKqcHej_zs";
      DirectoryScanner.matchPatternStart("vu#Q%/WATIA[", "VglxKqcHej_zs");
      stringArray0[1] = "k*>#gzz5P.jar";
      stringArray0[2] = "";
      DirectoryScanner.matchPatternStart("k*>#gzz5P.jar", "-avr");
      stringArray0[3] = "[<U";
      stringArray0[4] = "Uhb&o9;-";
      stringArray0[5] = "/OmW";
      stringArray0[6] = "[<U";
      stringArray0[7] = "-5A@QO/";
      archiveScanner0.setExcludes(stringArray0);
      DirectoryScanner.matchPath("", "junk");
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.addDefaultExcludes();
      DirectoryScanner.matchPatternStart("Error trying to initialize zipfile for ", "Vhs}}!Ye%TY-QK");
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("Uhb&o9;-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesNotIncluded = vector0;
      DirectoryScanner.matchPath("", "");
      vector0.clone();
      archiveScanner0.setExcludes((String[]) null);
      DirectoryScanner.matchPath("", "_7.jar");
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_7.jar";
      DirectoryScanner.matchPatternStart("2&5@P??D", "");
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Nu#~4}|}*qf";
      DirectoryScanner.matchPath("ROJZDNrRXR+}", "Nu#~4}|}*qf");
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.addDefaultExcludes();
      String[] stringArray1 = new String[2];
      stringArray1[0] = "";
      stringArray1[1] = "_7.jar";
      archiveScanner0.setIncludes(stringArray1);
      archiveScanner0.processFile("!");
      System.setCurrentTimeMillis(1000000L);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("~'a]Hr{/AB0N~I^\"%T");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "~'a]Hr{/AB0N~I^\"%T");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "aTab#@B5#$2j^.jar");
      File file0 = MockFile.createTempFile("~'a]Hr{/AB0N~I^\"%T", "~'a]Hr{/AB0N~I^\"%T");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, false, false);
      FileSystemHandling.createFolder(evoSuiteFile0);
      improvedFile0.setWritable(true, true);
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "~'a]Hr{/AB0N~I^\"%T");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "-tE:");
      improvedFile0.deleteOnExit();
      FileSystemHandling.createFolder(evoSuiteFile0);
      file0.getCanonicalFile();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "-tE:");
      MockFile mockFile0 = new MockFile(improvedFile0, ".WAR");
      mockFile0.toURI();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      file0.setReadOnly();
      mockFile0.getAbsoluteFile();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(mockFile0);
      assertTrue(boolean0);
      
      String string0 = "!";
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      File file0 = MockFile.createTempFile(":s%g8h$Gtm", ":s%g8h$Gtm");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/:s%g8h$Gtm0:s%g8h$Gtm");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ":s%g8h$Gtm");
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":s%g8h$Gtm";
      file0.toURL();
      file0.mkdir();
      ImprovedFile improvedFile0 = new ImprovedFile(":s%g8h$Gtm");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      improvedFile0.setExecutable(false);
      file0.setWritable(true);
      improvedFile0.deleteOnExit();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-1526L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-696L));
      System.setCurrentTimeMillis(0L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-4592L));
      System.setCurrentTimeMillis((-6L));
      System.setCurrentTimeMillis(1000000L);
      System.setCurrentTimeMillis((-2411L));
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      ImprovedFile improvedFile0 = new ImprovedFile("W=g'K)^B1^`");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("W=g'K)^B1^`");
      EvoSuiteFile evoSuiteFile3 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DirectoryScanner.matchPatternStart("W=g'K)^B1^`", "W=g'K)^B1^`");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      EvoSuiteFile evoSuiteFile4 = new EvoSuiteFile("W=g'K)^B1^`");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile4);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      FileSystemHandling.createFolder(evoSuiteFile3);
      EvoSuiteFile evoSuiteFile5 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile5);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile3);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.haveSlowResults = true;
      archiveScanner0.isArchive(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      File file0 = MockFile.createTempFile(":s%g8h$Gtm", ":s%g8h$Gtm");
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":s%g8h$Gtm";
      ImprovedFile improvedFile0 = new ImprovedFile((String) null, "uAg,");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("(FW(eO+nTBPq");
      improvedFile0.deleteOnExit();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.toFileType(file0);
      long long0 = (-1526L);
      System.setCurrentTimeMillis(long0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      Function<Integer, Object> function2 = unaryOperator0.andThen((Function<? super Integer, ?>) function1);
      Function.identity();
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>();
      Function<String, Integer> function3 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.compose((Function<? super String, ? extends Integer>) function3);
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends Integer>) function4);
      Function<InputStream, Integer> function5 = (Function<InputStream, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super InputStream, ? extends Integer>) function5);
      unaryOperator0.andThen((Function<? super Integer, ?>) function1);
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function6).apply(any());
      Function<Object, Integer> function7 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function8 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function7);
      UnaryOperator<InputStream> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, PushbackInputStream> function9 = (Function<Object, PushbackInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, InputStream> function10 = unaryOperator2.compose((Function<? super Integer, ? extends InputStream>) function9);
      function7.andThen((Function<? super Integer, ? extends InputStream>) function10);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function11 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, PushbackInputStream> function12 = (Function<Object, PushbackInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, InputStream> function13 = unaryOperator2.compose((Function<? super Object, ? extends InputStream>) function12);
      unaryOperator2.andThen((Function<? super InputStream, ? extends String>) function11);
      Function<Integer, InputStream> function14 = unaryOperator2.compose((Function<? super Integer, ? extends InputStream>) function13);
      function7.andThen((Function<? super Integer, ? extends InputStream>) function14);
      Object object0 = new Object();
      function8.apply(object0);
      unaryOperator0.compose((Function<? super Integer, ? extends Integer>) function7);
      System.setCurrentTimeMillis(0L);
      ImprovedFile improvedFile0 = new ImprovedFile("%|~vVl@.g", "%|~vVl@.g");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scanArchive(improvedFile0, "%|~vVl@.g");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /home/ubuntu/termite/projects/78_caloriecount/%|~vVl@.g/%|~vVl@.g
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "R=$S<\"5Qb`C/?(u:&Y";
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      Function<Integer, String> function1 = unaryOperator0.andThen((Function<? super Integer, ? extends String>) function0);
      Function<Object, InputStream> function2 = (Function<Object, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Object> function3 = unaryOperator0.andThen((Function<? super Integer, ?>) function2);
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.compose((Function<? super String, ? extends Integer>) function4);
      stringArray0[1] = "R=$S<\"5Qb`C/?(u:&Y";
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Integer> function6 = unaryOperator0.andThen((Function<? super Integer, ? extends Integer>) function5);
      unaryOperator0.compose((Function<? super Integer, ? extends Integer>) function6);
      stringArray0[2] = "R=$S<\"5Qb`C/?(u:&Y";
      Function<String, Integer> function7 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.compose((Function<? super String, ? extends Integer>) function7);
      archiveScanner0.setIncludes(stringArray0);
      Object object0 = new Object();
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function8).apply(any());
      Function<Object, Integer> function9 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function8);
      function9.andThen((Function<? super Integer, ? extends String>) function1);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesIncluded = vector0;
      Object object1 = new Object();
      function9.apply(object1);
      UnaryOperator.identity();
      Function<Object, Integer> function10 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function9);
      function9.compose((Function<? super Integer, ?>) function10);
      Function.identity();
      MockFile mockFile0 = new MockFile("R=$S<\"5Qb`C/?(u:&Y");
      try { 
        archiveScanner0.scandir(mockFile0, "R=$S<\"5Qb`C/?(u:&Y", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/R=$S<\"5Qb`C/?(u:&Y
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      ImprovedFile improvedFile0 = new ImprovedFile("W=g'K)^B1^`");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("W=g'K)^B1^`");
      EvoSuiteFile evoSuiteFile3 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.createFolder(evoSuiteFile2);
      EvoSuiteFile evoSuiteFile4 = new EvoSuiteFile("W=g'K)^B1^`/nne4oL0nne4oL");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile5 = new EvoSuiteFile("W=g'K)^B1^`");
      FileSystemHandling.createFolder(evoSuiteFile5);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder(evoSuiteFile5);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile4);
      EvoSuiteFile evoSuiteFile6 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.createFolder(evoSuiteFile6);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile3);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.scandir(improvedFile0, "Rmyh<J%?\"2)_: jaLw~", false);
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("~'a]Hr{/AB0N~I^\"%T");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~'a]Hr{/AB0N~I^\"%T");
      ImprovedFile improvedFile1 = improvedFile0.createTempDir("~'a]Hr{/AB0N~I^\"%T", "~'a]Hr{/AB0N~I^\"%T");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      File file0 = MockFile.createTempFile("~'a]Hr{/AB0N~I^\"%T", "~'a]Hr{/AB0N~I^\"%T");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile0);
      file0.deleteOnExit();
      improvedFile1.setWritable(true, true);
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "~'a]Hr{/AB0N~I^\"%T");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      file0.mkdir();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      file0.getAbsolutePath();
      improvedFile0.getAbsolutePath();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "com.lts.application.ApplicationException", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }
}
