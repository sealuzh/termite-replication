/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 06:57:55 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.functions.SGDText;
import weka.classifiers.lazy.IBk;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.estimators.DiscreteEstimator;
import weka.estimators.Estimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.649669942596342
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("z<B6xc]F", "S", 335);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(335);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      jRip_NumericAntd0.copy();
      jRip_NumericAntd0.accu = (double) 1;
      Instances instances0 = new Instances("@end", arrayList0, 0);
      jRip_NumericAntd0.maxInfoGain = (double) 3;
      instances0.add((Instance) binarySparseInstance0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd1.att = attribute0;
      JRip.NumericAntd jRip_NumericAntd2 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd2.value = (double) 0;
      arrayList0.add(attribute0);
      JRip.NumericAntd jRip_NumericAntd3 = jRip0.new NumericAntd(jRip_NumericAntd1.att);
      jRip_NumericAntd3.toString();
      System.setCurrentTimeMillis(2846L);
      Attribute.typeToString(0);
      jRip_NumericAntd1.att.copy();
      jRip_NumericAntd1.att.indexOfValue("yJqoW@'?-3_)");
      jRip_NumericAntd1.att.copy();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      assertTrue(jRip0.getUsePruning());
      
      Utils.log2 = 2843.396365895151;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      jRip0.setUsePruning(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile0);
      boolean boolean0 = jRip0.getUsePruning();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      System.setCurrentTimeMillis(0L);
      JRip jRip0 = new JRip();
      jRip0.setMinNo((-1599.26468175721));
      jRip0.getCapabilities();
      jRip0.listOptions();
      jRip0.getRevision();
      double double0 = jRip0.getMinNo();
      assertEquals((-1599.26468175721), double0, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4196189862824298
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      jRip0.globalInfo();
      jRip0.setDebug(true);
      jRip0.getSeed();
      jRip0.getCapabilities();
      jRip0.getOptions();
      jRip0.getDebug();
      String string0 = "Y>?X]OQDoH&VfuU^t";
      int[] intArray0 = new int[8];
      intArray0[0] = 99;
      intArray0[1] = 67;
      intArray0[2] = 1900646447;
      intArray0[3] = 6;
      intArray0[4] = (-5184);
      intArray0[5] = (-99);
      intArray0[6] = 2293;
      intArray0[7] = 691;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-836.3), intArray0, 85);
      binarySparseInstance0.dataset();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RuleStats.stratify((Instances) null, 67, mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1411461439556105
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = new Locale("", "");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("", list1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("string", arrayList1, 8);
      jRip_NominalAntd0.splitData(instances0, 1.0E-75, (-1.0));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BayesNet bayesNet0 = new BayesNet();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      StringReader stringReader0 = new StringReader("\nGrowing and pruning a new rule ...");
      arrayList1.add(attribute0);
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip1 = new JRip();
      Locale locale1 = Locale.PRC;
      locale1.getUnicodeLocaleAttributes();
      JRip jRip2 = new JRip();
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances1 = decisionTable1.m_dtInstances;
      JRip jRip3 = new JRip();
      try { 
        jRip2.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.rules.JRip: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6152804042395514
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("'*", "S", 296);
      attribute0.setStringValue("'*");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      binarySparseInstance0.stringValue(attribute0);
      binarySparseInstance0.setValue(attribute0, 98.45141);
      AbstractInstance.s_numericAfterDecimalPoint = 3;
      Attribute.typeToString(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@end", arrayList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ",)8");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate0.or(predicate1);
      predicate0.negate();
      Predicate.isEqual((Object) "'*");
      predicate2.and(predicate1);
      Object object0 = new Object();
      predicate0.test(object0);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.test((Object) null);
      predicate3.and(predicate0);
      Predicate.isEqual((Object) "'*");
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Predicate<Object> predicate5 = predicate1.and(predicate4);
      predicate5.negate();
      instances0.add((Instance) binarySparseInstance0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd1.splitData(instances0, 3, 5.649547217403905);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1100843864598464
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("'*", "S", 296);
      attribute0.setStringValue("'*");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (-3075.5);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(296);
      binarySparseInstance0.setValue(attribute0, 98.45141);
      AbstractInstance.s_numericAfterDecimalPoint = 3;
      jRip_NumericAntd0.covers(binarySparseInstance0);
      Attribute.typeToString(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@end", arrayList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "S");
      predicate0.negate();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-S";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -S option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3726109998626446
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, (List<String>) null, protectedProperties0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip0.setUsePruning(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("@end", "string", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "relational");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@end");
      jRip_NominalAntd0.maxInfoGain = (-1.0);
      Instances instances0 = new Instances("date", arrayList0, 4);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      arrayList0.add(attribute0);
      jRip_NominalAntd0.splitData(instances0, 4, 2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip0.getCheckErrorRate();
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "relational";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "string";
      stringArray0[4] = "@data";
      stringArray0[5] = "string";
      stringArray0[6] = "@relation";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4868969999555075
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      Utils.log2 = 2843.396365895151;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, (List<String>) null, protectedProperties0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("date");
      jRip0.setUsePruning(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "relational");
      Instances instances0 = new Instances("date", arrayList0, 4);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      attribute0.addStringValue(".arff");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "relational");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 4, (-629.38));
      try { 
        jRip0.rulesetForOneClass((-629.38), instances0, 0, 3642.50343689);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.031298644335524
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("C(#rcYF,ge$+?_Z");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(1106);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd1 = jRip1.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      jRip_NominalAntd1.accuRate = (double) 0;
      binarySparseInstance0.setMissing(attribute0);
      jRip_NominalAntd1.covers(binarySparseInstance0);
      jRip1.getCheckErrorRate();
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[9];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "5=");
      stringArray0[2] = "5=";
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("5=", (List<String>) null, protectedProperties1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      attribute0.enumerateValues();
      Instances instances0 = new Instances("", arrayList1, 4);
      arrayList1.add(attribute0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p");
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      Instances instances1 = decisionTable1.m_dtInstances;
      decisionTable1.getEvaluationMeasure();
      JRip jRip1 = new JRip();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: Cannot handle string attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2848957549012434
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      jRip0.setSeed(2648L);
      jRip0.setUsePruning(false);
      jRip0.getOptions();
      jRip0.listOptions();
      jRip0.getDebug();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      IBk iBk0 = new IBk();
      CostMatrix costMatrix0 = new CostMatrix(4);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.ROOT;
      locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute((String) null, 1106);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.value = (double) 88;
      SparseInstance sparseInstance0 = new SparseInstance(88);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(denseInstance0);
      jRip_NominalAntd0.covers(sparseInstance0);
      jRip0.getCheckErrorRate();
      System.setCurrentTimeMillis(3);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2483298646280048
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, (List<String>) null, protectedProperties0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("date");
      jRip0.setUsePruning(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("@end", "string", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "relational");
      Instances instances0 = new Instances("date", arrayList0, 4);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertFalse(jRip0.getUsePruning());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JRip jRip1 = new JRip();
      Attribute attribute1 = attribute0.copy(".bsi");
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute1);
      jRip_NominalAntd0.splitData(instances0, 2, (-229.993));
      assertTrue(jRip1.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      decisionTable1.m_majority = (double) 3;
      decisionTable0.m_useIBk = true;
      decisionTable1.m_useIBk = true;
      DecisionTable decisionTable3 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      SGDText sGDText0 = new SGDText();
      AbstractClassifier.runClassifier(sGDText0, (String[]) null);
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopies(sGDText0, 5);
      try { 
        jRip0.rulesetForOneClass(2, (Instances) null, 4, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9511242024841526
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "7Z[C";
      stringArray0[1] = "";
      stringArray0[2] = "auc";
      stringArray0[3] = "-P";
      stringArray0[4] = "";
      jRip0.setOptions(stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = new Locale("", "");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("", list1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("string", arrayList1, 2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      jRip_NominalAntd0.splitData(instances0, 0, (-1.0));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      locale0.getDisplayVariant();
      BayesNet bayesNet0 = new BayesNet();
      arrayList1.trimToSize();
      Instances instances1 = bayesNet0.m_Instances;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 3;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertFalse(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.448437455613918
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("date");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, (String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("date");
      jRip0.setUsePruning(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("@end", "string", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "relational");
      Instances instances0 = new Instances("date", arrayList0, 4);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertFalse(jRip0.getUsePruning());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JRip jRip1 = new JRip();
      Attribute attribute1 = attribute0.copy(".bsi");
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute1);
      jRip_NominalAntd0.splitData(instances0, 4, (-229.993));
      assertTrue(jRip1.getUsePruning());
      assertEquals(2, jRip1.getOptimizations());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.setConsequent((-1050.246853234635));
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.757637858307174
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "Q-M[>bmizmy:>CqFW>";
      stringArray0[2] = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      jRip0.setCheckErrorRate(false);
      jRip0.getOptions();
      System.setCurrentTimeMillis((-2525L));
      jRip0.getTechnicalInformation();
      assertTrue(jRip0.getDebug());
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers((Instance) null);
      Properties properties0 = new Properties();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("N", arrayList0, 80);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JRip jRip0 = new JRip();
      Utils.SMALL = (-966.0);
      Attribute attribute0 = new Attribute("C(#rcYF,ge$+?_Z", 1106);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(1106);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(denseInstance0);
      jRip_NominalAntd0.covers(sparseInstance1);
      jRip0.getCheckErrorRate();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "'*";
      Attribute attribute0 = new Attribute("'*", "S", 326);
      attribute0.setStringValue("'*");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance(1);
      AbstractInstance.s_numericAfterDecimalPoint = 3;
      jRip_NumericAntd0.covers(sparseInstance0);
      jRip_NumericAntd0.toString();
      Instances instances0 = null;
      try {
        instances0 = new Instances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = 326;
      Attribute attribute0 = new Attribute("'*", "S", 326);
      attribute0.setStringValue("'*");
      jRip0.getCapabilities();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(326);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-984));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$Revision:1i118 $";
      stringArray0[1] = "Q-M[>bmizmy:>CqFW>";
      stringArray0[2] = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      jRip0.getOptions();
      System.setCurrentTimeMillis((-2525L));
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1100843864598464
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("z<B6xc]F", "S", 326);
      attribute0.setStringValue("z<B6xc]F");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(326);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@end", arrayList0, 0);
      jRip_NumericAntd0.maxInfoGain = (double) 3;
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      instances0.add((Instance) binarySparseInstance0);
      System.setCurrentTimeMillis(2838L);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 2, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(0.5);
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = 9.223372036854776E18;
      doubleArray0[1] = 9.223372036854776E18;
      doubleArray0[2] = 9.223372036854776E18;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.5, doubleArray0);
      binarySparseInstance0.dataset();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2584261358947217
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      Utils.log2 = 2843.396365895151;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder(evoSuiteFile0);
      Attribute attribute0 = new Attribute((String) null, (List<String>) null, protectedProperties0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("date");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "relational");
      Instances instances0 = new Instances("date", arrayList0, 4);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      attribute0.addStringValue(".arff");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "relational");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 4, (-629.38));
      try { 
        jRip0.rulesetForOneClass((-629.38), instances0, 0, 3642.50343689);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      Locale locale1 = new Locale("Whether check for error rate >= 1/2 is included in stopping criterion.", "Whether check for error rate >= 1/2 is included in stopping criterion.");
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Locale locale2 = Locale.UK;
      locale2.getDisplayScript();
      Instances instances0 = new Instances("", arrayList0, (byte)40);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) set1);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.forLanguageTag(" O$,iK6s/?s\"A");
      locale2.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) list0);
      Properties properties0 = new Properties();
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip0.setDebug(true);
      jRip0.getUsePruning();
      try { 
        jRip0.rulesetForOneClass(2502.5598271293493, (Instances) null, 64.0, (-2031.989));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.384415616105067
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("'*", "S", 326);
      attribute0.setStringValue("'*");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (-3075.5);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(18);
      binarySparseInstance0.setWeight(2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("S", arrayList0, 2660);
      instances0.add((Instance) binarySparseInstance0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd2 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      System.setCurrentTimeMillis(1);
      int int0 = 14;
      Attribute.typeToString(14);
      attribute0.indexOfValue(" has ");
      attribute0.copy();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "'*";
      Attribute attribute0 = new Attribute("'*", "", 340);
      attribute0.setStringValue("'*");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      sparseInstance0.setMissing(attribute0);
      jRip_NumericAntd0.covers(sparseInstance0);
      Properties properties0 = null;
      ProtectedProperties protectedProperties0 = null;
      try {
        protectedProperties0 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.395516448667509
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("'*", "S", 326);
      attribute0.setStringValue("'*");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute1 = new Attribute("@end", (List<String>) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("integer");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      byteArrayOutputStream0.reset();
      jRip_NominalAntd1.copy();
      jRip_NominalAntd0.copy();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) properties0;
      objectArray0[1] = (Object) protectedProperties0;
      JRip.NominalAntd jRip_NominalAntd2 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jRip_NominalAntd0.getRevision();
      objectArray0[2] = (Object) jRip_NominalAntd2;
      objectArray0[3] = (Object) "'*";
      objectArray0[4] = (Object) "@attribute";
      jRip_NominalAntd0.value = (double) 3;
      objectArray0[5] = (Object) protectedProperties0;
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.printf("once", objectArray0);
      protectedProperties0.list((PrintWriter) mockPrintWriter1);
      JRip.NominalAntd jRip_NominalAntd3 = jRip0.new NominalAntd(attribute1);
      // Undeclared exception!
      try { 
        jRip_NominalAntd3.splitData((Instances) null, 0.0, 1.2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("]!*:=>a$;8kMEzo^%|", "S", 107);
      attribute0.setStringValue("]!*:=>a$;8kMEzo^%|");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      attribute0.copy("ssd+IsS");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      System.setCurrentTimeMillis(2838L);
      attribute0.setStringValue(" | best: ");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      jRip_NumericAntd0.toString();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale1 = new Locale("U`KTC-0", ";%5_o)@)tFY");
      Locale locale2 = locale0.stripExtensions();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      locale2.getUnicodeLocaleAttributes();
      Locale locale3 = Locale.ENGLISH;
      Locale locale4 = locale3.stripExtensions();
      locale3.getDisplayVariant(locale0);
      locale2.getDisplayScript();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      locale2.getDisplayCountry(locale4);
      Locale locale5 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale locale6 = Locale.forLanguageTag("U`KTC-0");
      locale4.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      locale0.getUnicodeLocaleKeys();
      Locale.forLanguageTag("aZTV`0D");
      locale2.getDisplayLanguage();
      locale6.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale locale7 = Locale.CANADA_FRENCH;
      locale0.getUnicodeLocaleAttributes();
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      Attribute attribute0 = new Attribute("", "", 2252);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(2458);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(boolean0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      bayesNet2.setUseADTree(false);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("i", 62);
      Attribute attribute1 = attribute0.copy("Fjma_q4Y|!N[{e");
      attribute1.equals(jRip_RipperRule0);
      jRip_RipperRule0.toString(attribute1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 6.283185307179586, (-1094.326));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers((Instance) null);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = null;
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.820775162203468
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Determines how/if the data will be transformed.");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.covers((Instance) null);
      DecisionTable decisionTable0 = new DecisionTable();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-O";
      stringArray0[1] = "{Pvt2[!|vIzHD2&";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{Pvt2[!|vIzHD2&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3469992135645263
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7a(je\"H");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      Utils.SMALL = 2931.73516101;
      String[] stringArray0 = jRip0.getOptions();
      System.setCurrentTimeMillis((-2576L));
      jRip0.setOptions(stringArray0);
      assertFalse(jRip0.getDebug());
      assertEquals(11, stringArray0.length);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      BayesNet bayesNet0 = new BayesNet();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      Estimator[] estimatorArray0 = new Estimator[5];
      DiscreteEstimator discreteEstimator0 = new DiscreteEstimator(75, false);
      estimatorArray0[0] = (Estimator) discreteEstimator0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, intArray0, 4);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = 326;
      Attribute attribute0 = new Attribute("'*", "S", 326);
      attribute0.setStringValue("'*");
      jRip0.getCapabilities();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (-3075.5);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(326);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-984));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("'*", "S", 296);
      attribute0.setStringValue("'*");
      AbstractInstance.s_numericAfterDecimalPoint = 3;
      Attribute.typeToString(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@end", arrayList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BayesNet bayesNet0 = new BayesNet();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "S");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate2.negate();
      Predicate.isEqual((Object) "'*");
      predicate2.and(predicate1);
      Predicate.isEqual((Object) "date");
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.and(predicate0);
      Predicate.isEqual((Object) "'*");
      Predicate<Object> predicate4 = predicate0.negate();
      predicate4.and(predicate2);
      Predicate<Object> predicate5 = predicate1.and(predicate4);
      predicate5.negate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      JRip jRip1 = new JRip();
      String string0 = jRip_NominalAntd0.toString();
      assertEquals("'* = ", string0);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.214734015212756
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aD5l5W");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("'*", "S", 326);
      AbstractClassifier.makeCopies(jRip0, 1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.getAccuRate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "date");
      jRip_NumericAntd0.getAttr();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      try { 
        jRip0.rulesetForOneClass(3, (Instances) null, (-1457.9316782756), 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.062711125700289
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[0] = "MXk9*(4u?(Dubk.4@";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "MXk9*(4u?(Dubk.4@";
      stringArray1[1] = "MXk9*(4u?(Dubk.4@";
      stringArray1[2] = "";
      stringArray1[3] = "MXk9*(4u?(Dubk.4@";
      stringArray1[4] = "";
      stringArray1[5] = "";
      jRip0.setOptions(stringArray1);
      Environment environment0 = Environment.getSystemWide();
      Set<String> set0 = environment0.getVariableNames();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("ities", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals("8118", string0);
      
      jRip0.listOptions();
      double double0 = jRip_NumericAntd1.getMaxInfoGain();
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.9687776175299367
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.getRevision();
      jRip0.enumerateMeasures();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("    values = new double[obj.length];\n", "8118", protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getCover();
      jRip0.getUsePruning();
      jRip0.setFolds((-3075));
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Environment environment0 = Environment.getSystemWide();
      Set<String> set0 = environment0.getVariableNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute1 = new Attribute("$Revision: 8118 $", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd1.getRevision();
      jRip0.listOptions();
      assertEquals((-3075), jRip0.getFolds());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      Estimator[] estimatorArray0 = new Estimator[5];
      DiscreteEstimator discreteEstimator0 = new DiscreteEstimator(75, false);
      estimatorArray0[0] = (Estimator) discreteEstimator0;
      JRip jRip0 = new JRip();
      BayesNet bayesNet3 = new BayesNet();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.debugTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int[] intArray0 = new int[6];
      jRip_RipperRule0.getConsequent();
      DecisionTable decisionTable0 = new DecisionTable();
      // Undeclared exception!
      try { 
        ByteBuffer.wrap((byte[]) null, 59, 2374);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$Revision: 8118 $";
      stringArray0[1] = "Q-M[>bmizmy:>CqFW>";
      stringArray0[2] = "";
      stringArray0[3] = "Kenji Kira and Larry A. Rendell";
      stringArray0[4] = "";
      stringArray0[5] = "_2TE";
      stringArray0[6] = " o|$5^7OF|SHmLA";
      stringArray0[7] = "E]z:hDSWv*.";
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("Kenji Kira and Larry A. Rendell", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAccu();
      double double1 = jRip_NominalAntd0.getAttrValue();
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      DecisionTable decisionTable0 = new DecisionTable();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{Pvt2[!|vIzHD2&";
      stringArray0[1] = "|<q4I4F0umuz*!l!5Ys";
      Attribute attribute0 = new Attribute("0(\"<");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jRip0.setOptimizations((-5344));
      jRip0.getOptimizations();
      jRip0.setSeed((-5344));
      assertEquals((-5344), jRip0.getOptimizations());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = 'F';
      charArray0[1] = 'F';
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      Estimator[] estimatorArray0 = new Estimator[5];
      DiscreteEstimator discreteEstimator0 = new DiscreteEstimator(75, false);
      estimatorArray0[0] = (Estimator) discreteEstimator0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'YUt+";
      stringArray0[1] = "";
      stringArray0[2] = "'YUt+";
      JRip jRip0 = new JRip();
      BayesNet bayesNet3 = new BayesNet();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // N not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(false);
      String string0 = jRip0.foldsTipText();
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      
      String string1 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string1);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(177.8648, intArray0, 2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance2);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(boolean0);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      Utils.SMALL = (-11.0);
      jRip0.getTechnicalInformation();
      jRip_RipperRule0.setConsequent(0.5);
      BayesNet bayesNet0 = new BayesNet();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      // Undeclared exception!
      try { 
        bayesNet2.getNodeValue(210, (-9));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale locale1 = new Locale(")", ")");
      Locale.getISOLanguages();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      locale1.getUnicodeLocaleAttributes();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Locale locale2 = Locale.ITALY;
      Locale locale3 = Locale.CHINA;
      Locale.getISOLanguages();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList1);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2, locale_FilteringMode2);
      locale2.getDisplayVariant(locale0);
      locale2.getDisplayScript();
      Instances instances0 = new Instances((String) null, arrayList0, (byte)40);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale4 = Locale.forLanguageTag("");
      locale4.getDisplayScript();
      locale4.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      locale4.getUnicodeLocaleAttributes();
      Locale locale5 = Locale.forLanguageTag("Dq&r@Q}j~bazR1C]bHIc");
      locale0.getDisplayLanguage();
      locale5.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale locale6 = Locale.ENGLISH;
      locale6.getUnicodeLocaleAttributes();
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, false);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~Q");
      StringReader stringReader1 = new StringReader("~Q");
      stringReader1.reset();
      StringReader stringReader2 = new StringReader("~Q");
      stringReader2.mark(35);
      stringReader2.reset();
      stringReader1.reset();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      JRip jRip0 = new JRip();
      String string0 = jRip0.usePruningTipText();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals("Whether pruning is performed.", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.covers((Instance) null);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = null;
      ProtectedProperties protectedProperties1 = null;
      try {
        protectedProperties1 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(628);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      BayesNet bayesNet0 = new BayesNet();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "S");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      predicate2.and(predicate1);
      Object object0 = new Object();
      predicate0.test(object0);
      predicate2.negate();
      predicate3.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      predicate4.and(predicate0);
      predicate4.and(predicate0);
      predicate1.negate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = jRip0.getFolds();
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = 'F';
      charArray0[1] = 'F';
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      Estimator[] estimatorArray0 = new Estimator[5];
      DiscreteEstimator discreteEstimator0 = new DiscreteEstimator(3425, false);
      estimatorArray0[0] = (Estimator) discreteEstimator0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      JRip jRip0 = new JRip();
      BayesNet bayesNet3 = new BayesNet();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~Q");
      StringReader stringReader1 = new StringReader("~Q");
      stringReader1.read();
      StringReader stringReader2 = new StringReader("~Q");
      stringReader0.mark(126);
      stringReader2.read();
      stringReader1.markSupported();
      stringReader2.ready();
      stringReader0.reset();
      StringReader stringReader3 = new StringReader("~Q");
      stringReader0.reset();
      StringReader stringReader4 = new StringReader("(P%J0/,#WQk");
      StringReader stringReader5 = new StringReader("~Q");
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = 'F';
      charArray0[2] = 's';
      charArray0[3] = '4';
      charArray0[4] = '0';
      charArray0[5] = '*';
      charArray0[6] = '\\';
      charArray0[7] = 't';
      stringReader5.read(charArray0);
      stringReader5.reset();
      StringReader stringReader6 = new StringReader("1");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader6, 126);
      BufferedReader bufferedReader1 = new BufferedReader(stringReader5);
      StringReader stringReader7 = new StringReader("/cnsr4pJEzg");
      BufferedReader bufferedReader2 = new BufferedReader(bufferedReader1);
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations(2592);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.setConsequent((-1094.326));
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double[] doubleArray0 = new double[13];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "S");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate2.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.and(predicate0);
      Predicate<Object> predicate4 = predicate0.and(predicate2);
      Predicate<Object> predicate5 = predicate3.and(predicate4);
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      predicate6.negate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(830.0, doubleArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = jRip0.seedTipText();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("The seed used for randomizing the data.", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("{q]", "S", 315);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (-3076.432753564467);
      jRip0.setFolds(315);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(315);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      double[] doubleArray0 = new double[17];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0, doubleArray0);
      // Undeclared exception!
      try { 
        binarySparseInstance1.equalHeaders(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute((String) null, (String) null, 4403);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.maxInfoGain = (double) 0;
      binarySparseInstance0.toString();
      jRip_NumericAntd0.covers(binarySparseInstance0);
      binarySparseInstance0.setWeight(4403);
      double[] doubleArray0 = null;
      BinarySparseInstance binarySparseInstance1 = null;
      try {
        binarySparseInstance1 = new BinarySparseInstance(2, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers((Instance) null);
      Properties properties0 = new Properties();
      jRip0.setCheckErrorRate(true);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      jRip_RipperRule0.hasAntds();
      Properties properties1 = null;
      ProtectedProperties protectedProperties1 = null;
      try {
        protectedProperties1 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(1096);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.optimizationsTipText();
      String[] stringArray1 = new String[2];
      stringArray1[0] = "-F <number of folds>";
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      Instances instances0 = bayesNet2.m_Instances;
      assertNull(instances0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$Revision: 8118 $";
      stringArray0[1] = "Q-M[>bmizmy:>CqFW>";
      stringArray0[2] = "";
      stringArray0[3] = "Kenji Kira and Larry A. Rendell";
      stringArray0[4] = "";
      stringArray0[5] = "_2TE";
      stringArray0[6] = " o|$5^7OF|SHmLA";
      stringArray0[7] = "E]z:hDSWv*.";
      stringArray0[8] = "";
      JRip.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.reset();
      stringReader0.mark(39);
      stringReader0.reset();
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      JRip jRip0 = new JRip();
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      jRip_RipperRule0.covers((Instance) null);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = null;
      try {
        protectedProperties0 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~Q");
      StringReader stringReader1 = new StringReader("~Q");
      stringReader1.read();
      stringReader0.mark(126);
      stringReader0.read();
      stringReader1.markSupported();
      stringReader1.ready();
      stringReader0.reset();
      StringReader stringReader2 = new StringReader("J.H. Friedman");
      char[] charArray0 = new char[3];
      stringReader2.read();
      charArray0[0] = 'Q';
      charArray0[1] = 'x';
      charArray0[2] = 'n';
      stringReader2.reset();
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 126);
      BufferedReader bufferedReader1 = new BufferedReader(stringReader1);
      StringReader stringReader3 = new StringReader("]KSu !@EF|");
      BufferedReader bufferedReader2 = new BufferedReader(stringReader0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect('n');
      CharBuffer charBuffer0 = byteBuffer0.asCharBuffer();
      bufferedReader2.read(charBuffer0);
      bufferedReader2.mark(126);
      bufferedReader2.read(charArray0);
      bufferedReader2.ready();
      BufferedReader bufferedReader3 = new BufferedReader(bufferedReader2);
      JRip jRip0 = new JRip();
      int int0 = jRip0.getOptimizations();
      assertEquals(2, int0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed(540L);
      int int0 = 326;
      Attribute attribute0 = new Attribute("'*", "S", 326);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(326);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1028));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.9417429777213613
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("'*", "S", 296);
      attribute0.setStringValue("'*");
      AbstractInstance.s_numericAfterDecimalPoint = 3;
      Attribute.typeToString(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@end", arrayList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "S");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate2.negate();
      Predicate.isEqual((Object) "'*");
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate.isEqual((Object) "date");
      Predicate<Object> predicate4 = predicate2.negate();
      predicate4.and(predicate0);
      Predicate.isEqual((Object) "'*");
      Predicate<Object> predicate5 = predicate0.negate();
      predicate5.and(predicate2);
      predicate1.and(predicate5);
      Predicate.isEqual((Object) predicate3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd1.splitData(instances0, 3, 5.649547217403905);
      Random.setNextRandom(3);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals("8118", string0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.304704691639832
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("S", "S", 2146852212);
      Attribute attribute1 = new Attribute((String) null);
      attribute1.setStringValue("date");
      Attribute.typeToString(attribute1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      arrayList0.listIterator();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate5 = predicate4.or(predicate2);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate3.and(predicate2);
      Predicate.isEqual((Object) predicate3);
      Object object0 = new Object();
      predicate7.test(object0);
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate.isEqual((Object) predicate7);
      predicate0.and(predicate8);
      Predicate<Object> predicate9 = predicate6.and(predicate4);
      Predicate.isEqual((Object) predicate1);
      predicate9.negate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.splitData(instances0, 1, 0.0);
      Random.setNextRandom(4);
      jRip0.listOptions();
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = 326;
      Attribute attribute0 = new Attribute("'*", "S", 326);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(326);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1028));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.304704691639832
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = 322;
      Attribute attribute0 = new Attribute("'*", 322);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(322);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      jRip0.checkErrorRateTipText();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1028));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale locale1 = new Locale("U`KTC-0", ";%5_o)@)tFY");
      Locale locale2 = locale0.stripExtensions();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      locale2.getUnicodeLocaleAttributes();
      Locale locale3 = Locale.PRC;
      Locale locale4 = locale3.stripExtensions();
      locale3.getDisplayVariant(locale0);
      locale2.getDisplayScript();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      locale2.getDisplayCountry(locale4);
      Locale locale5 = Locale.TRADITIONAL_CHINESE;
      locale0.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale locale6 = Locale.forLanguageTag("U`KTC-0");
      locale4.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      locale1.getUnicodeLocaleAttributes();
      Locale.forLanguageTag("aZTV`0D");
      locale2.getDisplayLanguage();
      locale6.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale locale7 = Locale.CANADA_FRENCH;
      locale0.getUnicodeLocaleAttributes();
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      Attribute attribute0 = new Attribute("D", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, 124.67951842496, 124.67951842496);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }
}
