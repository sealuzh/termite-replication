/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 05:48:40 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Random;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_NumBins = (-1244);
      discretize0.findNumBinsTipText();
      discretize0.getCutPoints((-2028178998));
      discretize0.getAttributeIndices();
      discretize0.getBins();
      int[] intArray0 = new int[5];
      intArray0[0] = (-1244);
      intArray0[1] = (-1244);
      intArray0[2] = (-2028178998);
      intArray0[3] = (-1244);
      intArray0[4] = (-1244);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1244), (double[]) null, intArray0, 338);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0393078226465247
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("9WF", (-1431655763));
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function1 = Function.identity();
      function1.apply(arrayList0);
      Function<Object, Object> function2 = unaryOperator0.andThen((Function<? super Object, ?>) function0);
      attribute0.enumerateValues();
      function2.compose((Function<? super Integer, ?>) function1);
      Function.identity();
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      function2.andThen((Function<? super Object, ? extends String>) function3);
      function2.compose((Function<? super Discretize, ?>) function1);
      unaryOperator0.andThen((Function<? super Object, ?>) function2);
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("relational", arrayList0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.add((Instance) binarySparseInstance0);
      Discretize discretize0 = new Discretize();
      instances0.add((Instance) binarySparseInstance0);
      discretize0.setInputFormat(instances0);
      instances0.parallelStream();
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      assertEquals(2, instances1.size());
      assertEquals("relational-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last", instances1.relationName());
      
      AllFilter allFilter0 = new AllFilter();
      discretize0.convertInstance(binarySparseInstance0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9182249993396017
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Attribute attribute0 = new Attribute((String) null, (-1431655788));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, 2);
      Instances instances1 = new Instances("string", arrayList1, 1);
      Discretize discretize0 = new Discretize();
      instances0.setClass(attribute0);
      arrayList1.spliterator();
      discretize0.setInputFormat(instances0);
      arrayList1.retainAll(instances0);
      discretize0.m_MakeBinary = true;
      instances0.retainAll(instances1);
      Instances instances2 = Instances.mergeInstances(instances0, instances1);
      AllFilter allFilter0 = new AllFilter();
      Instances instances3 = Filter.useFilter(instances2, discretize0);
      UnaryOperator.identity();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.add(attribute0);
      instances3.equalHeadersMsg(instances2);
      Instances instances4 = null;
      try {
        instances4 = new Instances("=M%&`_w`~/D:SDP", arrayList1, (-1610612734));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1610612734
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.613628922152431
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setMakeBinary(true);
      discretize0.getOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("xxcZnat");
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties();
      protectedProperties0.propertyNames();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties2 = null;
      try {
        protectedProperties2 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "$Revision: 8964 $";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      discretize0.m_DiscretizeCols = null;
      stringArray0[1] = "   * @param instance the instance to convert\n";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[2] = "";
      stringArray0[3] = "-";
      stringArray0[4] = "V";
      stringArray0[5] = "*r";
      stringArray0[6] = "n)";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      arrayList1.iterator();
      Attribute attribute0 = new Attribute((String) null, (String) null, (-1431655774));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, 2);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("string", arrayList1, 1);
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      discretize0.setIgnoreClass(true);
      discretize0.m_FindNumBins = true;
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.102519660552018
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("9WF", (-1431655763));
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function1 = Function.identity();
      function1.apply(arrayList0);
      Function<Object, Object> function2 = unaryOperator0.andThen((Function<? super Object, ?>) function0);
      function2.compose((Function<? super Integer, ?>) function1);
      Function.identity();
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      function2.andThen((Function<? super Object, ? extends String>) function3);
      function2.compose((Function<? super Discretize, ?>) function1);
      unaryOperator0.andThen((Function<? super Object, ?>) function2);
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("relational", arrayList0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.add((Instance) binarySparseInstance0);
      Discretize discretize0 = new Discretize();
      instances0.add((Instance) binarySparseInstance0);
      discretize0.setInputFormat(instances0);
      instances0.parallelStream();
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      assertEquals("relational-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last", instances1.relationName());
      assertEquals(2.0, instances1.sumOfWeights(), 0.01);
      
      AllFilter allFilter0 = new AllFilter();
      discretize0.findNumBins(0);
      assertTrue(discretize0.isNewBatch());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.062398546371725
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      arrayList0.iterator();
      arrayList1.iterator();
      Attribute attribute0 = new Attribute((String) null, (-1431655763));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, 2);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("string", arrayList1, 1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      int[] intArray0 = new int[8];
      attribute0.enumerateValues();
      Instances instances2 = new Instances("string", arrayList0, 1);
      AllFilter allFilter0 = new AllFilter();
      instances2.containsAll(arrayList0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      boolean[] booleanArray0 = new boolean[1];
      instances0.resampleWithWeights((Random) mockRandom0, booleanArray0);
      Instances instances3 = Filter.useFilter(instances2, discretize0);
      instances2.indexOf(instances3);
      discretize0.getBinRangesString(0);
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-2122));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2122
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.006525836465305
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute((String) null, (-1431655788));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, 2);
      Instances instances1 = new Instances("string", arrayList1, 1);
      Discretize discretize0 = new Discretize();
      arrayList1.spliterator();
      discretize0.setInputFormat(instances0);
      discretize0.m_MakeBinary = true;
      Instances instances2 = Instances.mergeInstances(instances0, instances1);
      AllFilter allFilter0 = new AllFilter();
      Instances instances3 = Filter.useFilter(instances2, discretize0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Locale> function0 = (Function<Object, Locale>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function1 = unaryOperator0.andThen((Function<? super Object, ?>) function0);
      unaryOperator0.andThen((Function<? super Object, ?>) function1);
      UnaryOperator.identity();
      UnaryOperator<Attribute> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      unaryOperator1.andThen((Function<? super Attribute, ?>) function1);
      Function.identity();
      MockFile mockFile0 = new MockFile("@relation", ".arff");
      ArrayList<Object> arrayList2 = new ArrayList<Object>();
      arrayList2.add((Object) unaryOperator0);
      arrayList1.containsAll(arrayList2);
      Locale locale0 = new Locale(".bsi", ".bsi", "r;'+)T|LAfHam2Z.w5");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) instances3;
      objectArray0[1] = (Object) attribute0;
      discretize0.batchFinished();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6151104036339126
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getOptions();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties2);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.933116506170126
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      arrayList1.iterator();
      Attribute attribute0 = new Attribute((String) null, (-1431655763));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, 2);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      attribute0.enumerateValues();
      Instances instances1 = new Instances("string", arrayList0, 1);
      instances1.containsAll(arrayList0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      mockRandom0.nextBoolean();
      boolean[] booleanArray0 = new boolean[1];
      instances0.resampleWithWeights((Random) mockRandom0, booleanArray0);
      Instances instances2 = Filter.useFilter(instances1, discretize0);
      Integer integer0 = new Integer(0);
      instances0.parallelStream();
      Filter.useFilter(instances2, discretize0);
      AllFilter allFilter0 = new AllFilter();
      assertFalse(allFilter0.isOutputFormatDefined());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Bin number optimization in conjunction with equal-frequency binning not implemented.");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Bin number optimization in conjunction with equal-frequency binning not implemented.");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)94;
      byteArray1[1] = (byte)88;
      byteArray1[2] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")FY xVy=;y\"mb");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kxyDvP I>jopLDVX&X");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/Latest.html");
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 197.85115833;
      doubleArray1[1] = (double) (byte)88;
      doubleArray1[2] = (double) (byte)94;
      doubleArray1[3] = (double) (byte)94;
      doubleArray1[4] = (double) (byte)88;
      doubleArray1[5] = (double) (byte)94;
      doubleArray1[6] = (double) (byte)94;
      doubleArray1[7] = (double) (byte)94;
      doubleArray1[8] = (double) (byte)94;
      doubleArray0[0] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((byte)94);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 94
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.091939703917201
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Attribute attribute0 = new Attribute("A", (-1431655763));
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      Function<Object, Object> function1 = unaryOperator2.andThen((Function<? super Object, ?>) function0);
      unaryOperator1.andThen((Function<? super Object, ?>) function1);
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Attribute, ?>) unaryOperator1);
      arrayList0.replaceAll(unaryOperator0);
      arrayList1.add(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("relational", arrayList1, 1);
      instances0.renameAttribute(attribute0, "The following installed packages depend on ");
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("date", arrayList1, 87);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(87, (int[]) null, 0);
      instances1.add((Instance) binarySparseInstance0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances1);
      instances1.parallelStream();
      attribute0.value((-1952257859));
      Filter.useFilter(instances0, discretize0);
      AllFilter allFilter0 = new AllFilter();
      Filter.wekaStaticWrapper(allFilter0, "relational", instances0, instances1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-3494.7686), (int[]) null, 82);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.518742300593211
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Attribute attribute0 = new Attribute((String) null, (-1431655763));
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("relational", arrayList0, 1);
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("string", arrayList1, 1);
      MockRandom mockRandom0 = new MockRandom();
      Instances instances2 = instances0.resample(mockRandom0);
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      instances2.sort(4026);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      attribute0.addRelation(instances2);
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[5] = (-1431655763);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 47);
      Discretize discretize2 = new Discretize("Normalized array (doubles):");
      // Undeclared exception!
      try { 
        discretize1.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'null' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.358359005494015
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Attribute attribute0 = new Attribute((String) null, (-1431655763));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, 2);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances1 = new Instances(instances0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Discretize> function0 = (Function<Object, Discretize>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function1 = unaryOperator0.compose((Function<? super Object, ?>) function0);
      unaryOperator0.andThen((Function<? super Object, ?>) function1);
      UnaryOperator.identity();
      UnaryOperator<Attribute> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Locale> function2 = (Function<Object, Locale>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Attribute, ?>) function2);
      arrayList2.replaceAll(unaryOperator1);
      arrayList0.add(attribute0);
      Instances instances2 = new Instances(instances0);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Discretize discretize1 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(10000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10000
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.iterator();
      arrayList0.iterator();
      Attribute attribute0 = new Attribute((String) null, (-1431655763));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, 2);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Discretize> function0 = (Function<Object, Discretize>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ?>) function0);
      Function<Object, Object> function1 = Function.identity();
      Function.identity();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      function1.compose((Function<? super Discretize, ?>) unaryOperator0);
      unaryOperator0.andThen((Function<? super Object, ?>) function1);
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("weka.core.Utils", arrayList2, 1480);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      instances1.add((Instance) binarySparseInstance0);
      Discretize discretize0 = new Discretize();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances1.add((Instance) binarySparseInstance0);
      discretize0.setInputFormat(instances0);
      instances0.parallelStream();
      try { 
        Filter.useFilter(instances1, discretize0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Src and Dest differ in # of attributes: 0 != 2
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.899389688611303
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\tUse equal-frequency instead of equal-width discretization.");
      Discretize discretize0 = new Discretize();
      discretize0.m_UseEqualFrequency = false;
      SystemInUtil.addInputLine("INwk'P");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jdmfXk(b?O>2Sd|,V");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.m_IgnoreClass = true;
      discretize0.setUseBinNumbers(true);
      discretize0.binsTipText();
      discretize0.invertSelectionTipText();
      discretize0.getFindNumBins();
      discretize0.getOptions();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.39195579291868
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = 77;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Attribute attribute0 = new Attribute("n)", (-1431655737));
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("n)", arrayList1, 0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("d7n?NuiO28EYVw~d$", arrayList1, 2);
      instances1.sort((-2122219132));
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), intArray0, 2);
      discretize0.input((Instance) null);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      discretize0.m_UseEqualFrequency = true;
      discretize0.getUseEqualFrequency();
      discretize0.binsTipText();
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.974095423871792
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Attribute attribute0 = new Attribute((String) null, (-1431655763));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, 2);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("string", arrayList1, 1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      attribute0.enumerateValues();
      Instances instances2 = new Instances("string", arrayList0, 1);
      AllFilter allFilter0 = new AllFilter();
      instances2.containsAll(arrayList0);
      Filter.useFilter(instances2, discretize0);
      Filter.wekaStaticWrapper(allFilter0, ".bsi", instances1, instances1);
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      arrayList1.replaceAll(unaryOperator0);
      Attribute attribute1 = new Attribute(".arff", (List<String>) null, 2147483645);
      arrayList1.add((Attribute) null);
      Instances instances3 = new Instances("@attribute", arrayList0, 2);
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)94;
      byteArray1[1] = (byte)88;
      byteArray1[2] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")FY xVy=;y\"mb");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kxyDvP I>jopLDVX&X");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/Latest.html");
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.setMakeBinary(true);
      discretize0.getCapabilities();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.970451735535837
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute((String) null, (-1431655788));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, 2);
      Instances instances1 = new Instances("string", arrayList1, 1);
      Discretize discretize0 = new Discretize();
      arrayList1.spliterator();
      discretize0.setInputFormat(instances0);
      discretize0.m_MakeBinary = true;
      Instances instances2 = Instances.mergeInstances(instances0, instances1);
      AllFilter allFilter0 = new AllFilter();
      Filter.useFilter(instances2, discretize0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Locale> function0 = (Function<Object, Locale>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function1 = unaryOperator0.andThen((Function<? super Object, ?>) function0);
      unaryOperator0.andThen((Function<? super Object, ?>) function1);
      UnaryOperator.identity();
      UnaryOperator<Attribute> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      unaryOperator1.andThen((Function<? super Attribute, ?>) function1);
      Function.identity();
      MockFile mockFile0 = new MockFile("@relation", ".arff");
      ArrayList<Object> arrayList2 = new ArrayList<Object>();
      arrayList1.containsAll(arrayList2);
      Locale locale0 = new Locale(".bsi", ".bsi", "r;'+)T|LAfHam2Z.w5");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) instances2;
      objectArray0[1] = (Object) attribute0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(0L);
      try { 
        discretize0.setInputFormat(instances2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.3652195655290313
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "m !]%3iV==S3W&";
      discretize0.setInvertSelection(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 10.0;
      doubleArray1[2] = 1639.91;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 827.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1639.91;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = 827.0;
      doubleArray2[6] = 1639.91;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1639.91;
      doubleArray3[1] = 827.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      stringArray0[1] = "Bin number optimization in conjunction with equal-frequency binning not implemented.";
      discretize0.getOptions();
      stringArray0[2] = "FINE";
      stringArray0[3] = "' already present at position #";
      discretize0.setUseBinNumbers(true);
      stringArray0[4] = "'qH*n>lbQl~fV_E#ZZ@";
      Discretize.main(stringArray0);
      discretize0.globalInfo();
      int int0 = 41;
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9949128249974164
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Attribute attribute0 = new Attribute((String) null, 10);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 2);
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      discretize0.setInputFormat(instances0);
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[1] = 1;
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      Integer integer0 = new Integer((-2010));
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties2);
      properties2.elements();
      arrayList0.parallelStream();
      StringReader stringReader0 = new StringReader("\";\n");
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties3);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.195742067015279
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setUseEqualFrequency(true);
      String[] stringArray0 = discretize0.getOptions();
      Object object0 = new Object();
      discretize0.setOptions(stringArray0);
      discretize0.getRevision();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.319997285684371
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Attribute attribute0 = new Attribute((String) null, (-1431655763));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, 2);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("string", arrayList1, 1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      Instances instances2 = new Instances("string", arrayList0, 1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      AllFilter allFilter0 = new AllFilter();
      String[] stringArray0 = new String[2];
      discretize0.setUseEqualFrequency(true);
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@attribute";
      Instances instances3 = Filter.useFilter(instances1, discretize0);
      Filter.wekaStaticWrapper(allFilter0, "'B2of2'", instances1, instances3);
      assertTrue(discretize0.getUseEqualFrequency());
      
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Attribute attribute0 = new Attribute((String) null, (-1431655763));
      arrayList0.add(attribute0);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(10);
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 0;
      Integer integer1 = new Integer(3);
      integerArray0[2] = integer1;
      integerArray0[3] = (Integer) 4;
      integerArray0[4] = (Integer) 2;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) 3;
      integerArray0[7] = (Integer) 2;
      integerArray0[8] = (Integer) 0;
      arrayList1.toArray(integerArray0);
      Instances instances0 = new Instances("relational", arrayList0, 1);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      int[] intArray0 = new int[13];
      intArray0[0] = 4;
      intArray0[1] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5.70001, intArray0, (-779));
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2031582514842634
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Attribute attribute0 = new Attribute((String) null, (-1431655763));
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("relational", arrayList0, 1);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("string", arrayList1, 1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 3;
      MultiFilter multiFilter0 = new MultiFilter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@attribute";
      stringArray0[1] = "@attribute";
      Filter.runFilter(discretize0, stringArray0);
      Discretize discretize1 = new Discretize();
      Discretize discretize2 = new Discretize("s");
      // Undeclared exception!
      try { 
        discretize1.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0407729802787036
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("9WF", (-1431655763));
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function1 = Function.identity();
      function1.apply(arrayList0);
      Function<Object, Object> function2 = unaryOperator0.andThen((Function<? super Object, ?>) function0);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super Object, ? extends String>) function3);
      function2.compose((Function<? super Discretize, ?>) function1);
      unaryOperator0.andThen((Function<? super Object, ?>) function2);
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("relational", arrayList0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      instances0.add((Instance) binarySparseInstance0);
      Discretize discretize0 = new Discretize();
      instances0.add((Instance) binarySparseInstance0);
      discretize0.setInputFormat(instances0);
      instances0.parallelStream();
      Filter.useFilter(instances0, discretize0);
      AllFilter allFilter0 = new AllFilter();
      discretize0.input(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.0430592162457075
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("K9GF", (-1431655763));
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function1 = Function.identity();
      Function<Object, Object> function2 = unaryOperator2.andThen((Function<? super Object, ?>) function0);
      arrayList0.add(attribute0);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super Object, ? extends String>) function3);
      unaryOperator2.compose((Function<? super Attribute, ?>) function1);
      function2.compose((Function<? super Discretize, ?>) function1);
      function2.compose((Function<? super Object, ?>) unaryOperator2);
      unaryOperator1.andThen((Function<? super Object, ?>) function2);
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Attribute, ?>) unaryOperator1);
      arrayList0.replaceAll(unaryOperator0);
      arrayList1.add(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("relational", arrayList1, 1);
      Instances instances1 = new Instances("date", arrayList1, 87);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      instances1.add((Instance) binarySparseInstance0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances1);
      instances1.parallelStream();
      Filter.useFilter(instances1, discretize0);
      AllFilter allFilter0 = new AllFilter();
      Instances instances2 = null;
      try {
        instances2 = new Instances(instances0, 3, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameters first and/or toCopy out of range
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.384415616105067
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("9WF", (-1431655763));
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function1 = Function.identity();
      function1.apply(arrayList0);
      Function<Object, Object> function2 = unaryOperator0.andThen((Function<? super Object, ?>) function0);
      function2.compose((Function<? super Integer, ?>) function1);
      Function.identity();
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      function2.andThen((Function<? super Object, ? extends String>) function3);
      function2.compose((Function<? super Discretize, ?>) function1);
      unaryOperator0.andThen((Function<? super Object, ?>) function2);
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("relational", arrayList0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.add((Instance) binarySparseInstance0);
      Discretize discretize0 = new Discretize();
      instances0.add((Instance) binarySparseInstance0);
      discretize0.setInputFormat(instances0);
      Discretize discretize1 = new Discretize("\tUse bin numbers rather than ranges for discretized attributes.");
      try { 
        discretize1.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at Use bin numbers rather than ranges for discretized attributes.
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6488041417305412
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize("Normalized array (doubles): ");
      discretize0.m_DesiredWeightOfInstancesPerInterval = 4.5;
      discretize0.setIgnoreClass(true);
      discretize0.getOptions();
      discretize0.getCapabilities();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      int int0 = discretize0.getBins();
      assertEquals(4.5, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      Function.identity();
      unaryOperator2.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      unaryOperator2.andThen((Function<? super Object, ?>) unaryOperator0);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator2);
      UnaryOperator.identity();
      UnaryOperator<Attribute> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Locale> function1 = (Function<Object, Locale>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator3.andThen((Function<? super Attribute, ?>) function1);
      Function.identity();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.replaceAll(unaryOperator3);
      Instances instances0 = new Instances("DQ+j5-P5pu 8", arrayList0, 3802);
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      discretize0.m_IgnoreClass = false;
      discretize0.m_ClassIndex = 1025;
      discretize0.getDesiredWeightOfInstancesPerInterval();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DiscretizeCols = null;
      discretize0.setMakeBinary(true);
      int int0 = 82;
      discretize0.getBinRangesString(82);
      double double0 = (-1.7976931348623157E308);
      int[] intArray0 = new int[9];
      intArray0[0] = 82;
      discretize0.m_UseBinNumbers = true;
      intArray0[1] = 82;
      intArray0[2] = 82;
      intArray0[3] = 82;
      intArray0[4] = 82;
      intArray0[5] = 82;
      intArray0[6] = 82;
      // Undeclared exception!
      try { 
        discretize0.getInvertSelection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DoNotLoadIfClassNotPresent");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DoNotLoadIfClassNotPresent");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")FY xVy=;y\"mb");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kxyDvP I>jopLDVX&X");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DoNotLoadIfClassNotPresent");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")FY xVy=;y\"mb");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")FY xVy=;y\"mb");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "kxyDvP I>jopLDVX&X");
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[3];
      stringArray0[1] = "/Latest.html";
      stringArray0[1] = ")FY xVy=;y\"mb";
      stringArray0[2] = "/Latest.html";
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.3649222119756566
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins(67);
      discretize0.setFindNumBins(true);
      discretize0.listOptions();
      discretize0.attributeIndicesTipText();
      String[] stringArray0 = discretize0.getOptions();
      discretize0.globalInfo();
      discretize0.useEqualFrequencyTipText();
      discretize0.setInvertSelection(false);
      discretize0.setOptions(stringArray0);
      assertEquals(67, discretize0.getBins());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.930165364012981
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Attribute attribute0 = new Attribute((String) null, 10);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 2);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      discretize0.setInputFormat(instances0);
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[1] = 1;
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      Integer[] integerArray0 = new Integer[0];
      arrayList1.toArray(integerArray0);
      Instances instances1 = new Instances("g1xU\"l", arrayList0, 1);
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      Filter.useFilter(instances1, discretize0);
      Properties properties2 = new Properties();
      Properties properties3 = new Properties(properties2);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties3);
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      StringReader stringReader0 = new StringReader("real");
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      stringReader0.skip(209L);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties3);
      protectedProperties0.load((Reader) stringReader0);
      assertTrue(protectedProperties0.equals((Object)protectedProperties3));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(boolean0);
      
      String string0 = discretize0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DoNotLoadIfClassNotPresent");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)94;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DoNotLoadIfClassNotPresent");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")FY xVy=;y\"mb");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#yYtaVuUNgyONS})F");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#yYtaVuUNgyONS})F");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")FY xVy=;y\"mb");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DoNotLoadIfClassNotPresent");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#yYtaVuUNgyONS})F");
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[3];
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Locale.getISOCountries();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Object object0 = new Object();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      StringReader stringReader0 = new StringReader("");
      stringReader0.markSupported();
      protectedProperties0.load((Reader) stringReader0);
      int int0 = discretize0.getBins();
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, int0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1360570143460755
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Object object0 = new Object();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      protectedProperties1.computeIfPresent(object0, biFunction0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(6, stringArray0.length);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1952692537765084
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = discretize0.getOptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v(HANs{");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v(HANs{");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">hhIz6dqW6f7i/+l");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$Revision: 8964 $");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">hhIz6dqW6f7i/+l");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$Revision: 8964 $");
      Discretize discretize1 = new Discretize();
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals(10, discretize1.getBins());
      
      discretize0.setOptions(stringArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[10];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)45;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      intArray0[0] = 77;
      intArray0[1] = 77;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)82;
      byteArray1[1] = (byte)82;
      byteArray1[2] = (byte)82;
      byteArray1[3] = (byte)82;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "   result = new Object[data.numInstances()][];\n");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mOM7b[_");
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval((byte)45);
      discretize0.setOutputFormat();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals(45.0, double0, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize("-O");
      discretize0.setDesiredWeightOfInstancesPerInterval(170.70308370354215);
      discretize0.setOutputFormat();
      discretize0.setAttributeIndices("+/.5`6..ZF");
      discretize0.setDesiredWeightOfInstancesPerInterval(2.0);
      discretize0.getFindNumBins();
      discretize0.setInvertSelection(false);
      discretize0.m_UseBinNumbers = true;
      discretize0.binsTipText();
      discretize0.getUseBinNumbers();
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.724454707919629
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DoNotLoadIfClassNotPresent");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DoNotLoadIfClassNotPresent");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")FY xVy=;y\"mb");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kxyDvP I>jopLDVX&X");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DoNotLoadIfClassNotPresent");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")FY xVy=;y\"mb");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")FY xVy=;y\"mb");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "kxyDvP I>jopLDVX&X");
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[3];
      discretize0.setUseEqualFrequency(false);
      stringArray0[0] = "/Latest.html";
      stringArray0[1] = ")FY xVy=;y\"mb";
      stringArray0[2] = "/Latest.html";
      discretize0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      Discretize discretize0 = new Discretize("Bin number optimization in conjunction with equal-frequency binning not implemented.");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Bin number optimization in conjunction with equal-frequency binning not implemented.";
      stringArray0[1] = "Bin number optimization in conjunction with equal-frequency binning not implemented.";
      stringArray0[2] = "Bin number optimization in conjunction with equal-frequency binning not implemented.";
      stringArray0[3] = "Bin number optimization in conjunction with equal-frequency binning not implemented.";
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(870);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DoNotLoadIfClassNotPresent");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)94;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DoNotLoadIfClassNotPresent");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")FY xVy=;y\"mb");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DoNotLoadIfClassNotPresent");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")FY xVy=;y\"mb");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")FY xVy=;y\"mb");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DoNotLoadIfClassNotPresent");
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-60);
      intArray0[1] = (int) (byte)94;
      intArray0[2] = (int) (byte)94;
      discretize0.setAttributeIndicesArray(intArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "DoNotLoadIfClassNotPresent";
      stringArray0[1] = ")FY xVy=;y\"mb";
      stringArray0[2] = "DoNotLoadIfClassNotPresent";
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)94;
      byteArray1[1] = (byte)88;
      byteArray1[2] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")FY xVy=;y\"mb");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kxyDvP I>jopLDVX&X");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/Latest.html");
      Discretize discretize0 = new Discretize();
      discretize0.getCapabilities();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.2635295873055097
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_DefaultCols = "";
      String[] stringArray0 = discretize0.getOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("xxcZnat");
      mockPrintWriter0.append('{');
      mockPrintWriter0.println((-1902.0));
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "gZ$^GQ";
      objectArray0[4] = (Object) mockPrintWriter0;
      Filter.runFilter(discretize0, stringArray0);
      objectArray0[5] = (Object) "xxcZnat";
      mockPrintWriter0.append((CharSequence) "xxcZnat");
      objectArray0[7] = (Object) "xxcZnat";
      String[] stringArray1 = discretize0.getOptions();
      assertEquals(4, stringArray1.length);
      
      objectArray0[8] = (Object) null;
      mockPrintWriter0.printf((Locale) null, "gZ$^GQ", objectArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(0L);
      discretize0.getAttributeIndices();
      discretize0.getCapabilities();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mW#PaQ8'U@VXW0#lP.");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",V)e.H!5");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("O:z$?S`rnrD");
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), double0, 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("K9GF", (-1431655763));
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function1 = Function.identity();
      Function<Object, Object> function2 = unaryOperator2.andThen((Function<? super Object, ?>) function0);
      function2.compose((Function<? super Discretize, ?>) function1);
      function2.compose((Function<? super Object, ?>) unaryOperator2);
      unaryOperator1.andThen((Function<? super Object, ?>) function2);
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Attribute, ?>) unaryOperator1);
      arrayList0.replaceAll(unaryOperator0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties2);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.makeBinaryTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Make resulting attributes binary.", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Discretize discretize0 = new Discretize();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Discretize discretize0 = new Discretize("?RU0R?A^kYptQ^/7");
      discretize0.getOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("weka.core.converters.AbstractFileLoader");
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties();
      properties0.propertyNames();
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties1);
      StringReader stringReader0 = new StringReader("xxcZnat");
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties4);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties3);
      // Undeclared exception!
      try { 
        protectedProperties5.load((Reader) stringReader0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ProtectedProperties cannot be modified!
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DoNotLoadIfClassNotPresent");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DoNotLoadIfClassNotPresent");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")FY xVy=;y\"mb");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")FY xVy=;y\"mb");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DoNotLoadIfClassNotPresent");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")FY xVy=;y\"mb");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")FY xVy=;y\"mb");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")FY xVy=;y\"mb");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "/Latest.html";
      stringArray0[1] = ")FY xVy=;y\"mb";
      stringArray0[2] = "/Latest.html";
      Discretize discretize0 = new Discretize("Y");
      discretize0.toString();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mW#PaQ8'U@VXW0#lP.");
      byte[] byteArray0 = new byte[0];
      Discretize discretize0 = new Discretize("O:z$?S`rnrD");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.setUseBinNumbers(false);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      
      double double0 = discretize0.m_DesiredWeightOfInstancesPerInterval;
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 86;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(86, intArray0, 1872);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2.0, intArray0, 66);
      binarySparseInstance1.setWeight(2764.489190128348);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0.0, intArray0, (-1717986957));
      binarySparseInstance0.toString(44);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(44);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(2, intArray0, (-2525));
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(2, intArray0, 2147483645);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Discretize discretize0 = new Discretize("Bin number optimization in conjunction with equal-frequency binning not implemented.");
      Locale.getISOCountries();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Bin number optimization in conjunction with equal-frequency binning not implemented.");
      discretize0.getUseEqualFrequency();
      int int0 = 0;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int1 = 67;
      Instances instances0 = new Instances((String) null, arrayList0, 67);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j4j:/,x~)\"~+lN6");
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Bin number optimization in conjunction with equal-frequency binning not implemented.");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties2);
      StringReader stringReader0 = new StringReader("-B <num>");
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6183972463477247
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Bin number optimization in conjunction with equal-frequency binning not implemented.");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)94;
      byteArray1[1] = (byte)88;
      byteArray1[2] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("kk3B");
      discretize0.setAttributeIndices("kk3B");
      String[] stringArray0 = new String[0];
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = 77;
      intArray0[1] = 77;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)82;
      MultiFilter multiFilter0 = new MultiFilter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "?RU0R?A^kYptQ^/7";
      Filter.runFilter(multiFilter0, stringArray0);
      Discretize discretize0 = new Discretize("?RU0R?A^kYptQ^/7");
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[2];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)94;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = (double) 77;
      doubleArray0[3] = (double) (byte)94;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(9.223372036854776E18, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(2185);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(1.7976931348623157E308, intArray0, (byte)15);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(1.7976931348623157E308, doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(2, (int[]) null, (byte)94);
      Discretize discretize0 = new Discretize();
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(2954);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(sparseInstance2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 77;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(77, intArray0, 1872);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2.0, intArray0, 66);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance2.setWeight(2764.9);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 77;
      doubleArray0[1] = (double) 66;
      doubleArray0[2] = (double) (-2525);
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (-1377.310021);
      doubleArray0[5] = (double) 1872;
      doubleArray0[6] = 1357.645155423637;
      SparseInstance sparseInstance0 = new SparseInstance(1357.645155423637, doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(1872.0, intArray0, 77);
      Discretize discretize0 = new Discretize("O>VI\"? ");
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Discretize discretize0 = new Discretize("\"\"@eVlO8['q_x");
      String string0 = discretize0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      arrayList0.containsAll(arrayList1);
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ?>) unaryOperator2);
      Function<Object, Object> function0 = Function.identity();
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) function0);
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Object, ?>) function1);
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Attribute, ?>) function0);
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Attribute attribute0 = new Attribute((String) null, (-1431655763));
      arrayList0.add(attribute0);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(10);
      integerArray0[1] = (Integer) 0;
      Integer integer1 = new Integer(3);
      integerArray0[2] = integer1;
      integerArray0[3] = (Integer) 4;
      integerArray0[4] = (Integer) 2;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) 3;
      integerArray0[7] = (Integer) 2;
      integerArray0[8] = (Integer) 0;
      arrayList1.toArray(integerArray0);
      Instances instances0 = new Instances("zNS\"-pV4O*b{+ Jf:z", arrayList0, 20);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      discretize0.getUseBinNumbers();
      try { 
        Filter.useFilter(instances0, discretize0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.9901384757669027
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int[] intArray0 = new int[2];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1874, intArray0, (-1617));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1874, intArray0, (-2525));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2);
      double[] doubleArray0 = new double[4];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Fq\"8|<Od)q)F!vfm";
      stringArray0[1] = "iL&^w ";
      stringArray0[2] = "b'-<14g<`|Ql2OIC";
      stringArray0[3] = "";
      stringArray0[4] = "-A4A'|Sm6qML1G> %b";
      BinarySparseInstance.main(stringArray0);
      doubleArray0[2] = 0.0;
      doubleArray0[1] = (double) (-2525);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) (-1617);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      Discretize discretize0 = new Discretize("");
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = "d{0' EXMz`!gP/Q]n";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "first-last";
      Discretize.main(stringArray1);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
