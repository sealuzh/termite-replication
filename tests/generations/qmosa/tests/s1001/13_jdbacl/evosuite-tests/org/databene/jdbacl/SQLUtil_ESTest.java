/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 06:40:33 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.nio.CharBuffer;
import java.sql.Date;
import java.sql.SQLException;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.format.FormatStyle;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.management.remote.JMXPrincipal;
import javax.resource.spi.ConnectionManager;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
import org.apache.derby.iapi.sql.execute.CursorResultSet;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.compile.InsertNode;
import org.apache.derby.impl.sql.compile.Predicate;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.store.access.btree.BTreeController;
import org.apache.derby.impl.store.access.btree.index.B2I;
import org.apache.derby.impl.store.access.heap.HeapController;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.ContainerComponent;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.engine.ConnectionInfo;
import org.h2.engine.Database;
import org.h2.expression.Parameter;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.tools.Recover;
import org.h2.value.Value;
import org.h2.value.ValueDecimal;
import org.h2.value.ValueLong;
import org.h2.value.ValueShort;
import org.hsqldb.jdbc.jdbcClob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "getNClob(int)";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("getNClob(int)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(220);
      StringBuffer stringBuffer0 = new StringBuffer(220);
      FromVTI fromVTI0 = new FromVTI();
      fromVTI0.getContextManager();
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory1 = new GenericLanguageConnectionFactory();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      xSQLVAR0.deepCopy();
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      xSQLVAR1.deepCopy();
      XSQLVAR xSQLVAR2 = xSQLVAR0.deepCopy();
      XSQLVAR xSQLVAR3 = new XSQLVAR();
      xSQLVAR2.deepCopy();
      Date date0 = null;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_INSTANT;
      Vector<DBColumn> vector0 = new Vector<DBColumn>(220);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.462321065646792
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(220);
      StringBuffer stringBuffer0 = new StringBuffer(220);
      stringBuffer0.codePoints();
      stringBuilder0.append(stringBuffer0);
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("G+\"Ab,N l@Fkz6@au|", compositeDBObject0);
      tableContainer0.getComponents();
      ArrayList<ContainerComponent> arrayList0 = new ArrayList<ContainerComponent>();
      tableContainer0.getTables();
      tableContainer0.getSequences(true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      TableContainer tableContainer1 = new TableContainer("c013800d-00d7-c025-480b-000a0a411200", tableContainer0);
      tableContainer1.setDoc("G+\"Ab,N l@Fkz6@au|");
      ArrayList<ContainerComponent> arrayList1 = new ArrayList<ContainerComponent>();
      tableContainer0.getSequences(false);
      TableContainer tableContainer2 = new TableContainer("c013800d-00d7-c025-480b-000a0a411200", tableContainer1);
      tableContainer2.setOwner(tableContainer0);
      LinkedList<ContainerComponent> linkedList0 = new LinkedList<ContainerComponent>();
      SQLUtil.isQuery("c013800d-00d7-c025-480b-000a0a411200");
      SQLUtil.mutatesDataOrStructure("vv(");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(422, 1289, 0, 124, 124);
      Random.setNextRandom(220);
      DBDataType dBDataType0 = DBDataType.getInstance((-2489), " ADD ");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Y`l$5E,5@xZ1o", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals(" ADD (1,1)", stringBuilder0.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "alter maerialized iew");
      Boolean.valueOf("alter maerialized iew");
      TableContainer tableContainer0 = new TableContainer("[Tbkh1!oKI3");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("+w*$a}ta<|xT^5v", (DBSchema) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "alter maerialized iew";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      String string0 = SQLUtil.substituteMarkers("", "+w*$a}ta<|xT^5v", (Object) null);
      assertEquals("", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "1XRFi;7Dq(sr";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("1XRFi;7Dq(sr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: 1XRFi;7Dq(sr
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0445620068926271
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@9,a66KJHh5+V:I");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", (DBTable) null, dBDataType0, integer0, integer0);
      defaultDBColumn0.setType(dBDataType0);
      SQLUtil.isQuery("select into");
      SQLUtil.normalize("select into", false);
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      assertNull(fBManagedConnectionFactory0.getTpbMapping());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob(" REFERENCES ");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.ttype = (-120904185);
      streamTokenizer0.pushBack();
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = '$';
      reader0.read(charArray0);
      reader0.reset();
      Reader reader1 = jdbcClob0.getCharacterStream();
      streamTokenizer0.ordinaryChar(361);
      reader1.markSupported();
      streamTokenizer0.commentChar((-1135459369));
      SQLUtil.renderNumber(streamTokenizer0);
      Random.setNextRandom((-1999));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delete");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "- 0";
      stringArray0[1] = "- 0";
      stringArray0[2] = null;
      stringArray0[3] = "delete";
      stringArray0[4] = "I)I$";
      stringArray0[5] = null;
      stringArray0[6] = "delete";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("j<2he0c>.");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec0);
      StringBuilder stringBuilder3 = stringBuilder2.append((double) 361);
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder4 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder3, nameSpec1);
      assertSame(stringBuilder4, stringBuilder2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.357285019952196
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getIndexConglomerateNumber();
      constantActionActivation0.getResultSet();
      constantActionActivation0.getCursorResultSet();
      constantActionActivation0.setForUpdateIndexScan((CursorResultSet) null);
      constantActionActivation0.getIndexConglomerateNumber();
      constantActionActivation0.clearCurrentRow(891);
      ConstantActionActivation constantActionActivation1 = new ConstantActionActivation();
      constantActionActivation1.clearIndexScanInfo();
      constantActionActivation1.startExecution();
      constantActionActivation1.getContextManager();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      StringBuilder stringBuilder0 = new StringBuilder("AUE=81;3]8-NIL");
      stringBuilder0.reverse();
      DBSchema dBSchema0 = new DBSchema("(Pum$:w+");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(Pum$:w+", dBSchema0);
      dBSchema0.getTables(true);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "AUE=81;3]8-NIL", true, (String[]) null);
      dBUniqueConstraint0.isIdentical(dBSchema0);
      dBUniqueConstraint0.isIdentical(dBSchema0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("LIN-8]3;18=EUACONSTRAINT AUE=81;3]8-NIL ", stringBuilder0.toString());
      
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      SlaveDatabase slaveDatabase1 = new SlaveDatabase();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT AUE=81;3]8-NIL UNIQUE ()", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.208476155762387
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("'}Yz!ou=m$");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = 8;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop table", defaultDBTable0, 8, "drop table");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      tableContainer0.getComponents();
      tableContainer0.getTables();
      tableContainer0.getSequences(true);
      tableContainer0.setDoc("callweight");
      tableContainer0.getSequences(true);
      tableContainer0.setOwner(defaultDBTable1);
      LinkedList<ContainerComponent> linkedList0 = new LinkedList<ContainerComponent>();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("t$Ba", defaultDBTable1, (-703), "callweight");
      SQLUtil.removeComments("N");
      SQLUtil.isQuery("vv(");
      SQLUtil.mutatesDataOrStructure("5E`\"/\"Pk)6n~7X");
      SQLUtil.normalize("--", false);
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      pipedReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (double) (byte)39;
      streamTokenizer0.commentChar((-1135459369));
      SQLUtil.renderNumber(streamTokenizer0);
      String string0 = "%$Omq#SB'XU*,";
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "%$Omq#SB'XU*,", pipedReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9253539308675658
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("'}Yz!ou=m$");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      tableContainer0.toString();
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("weightedLiteralList", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setDoc("j+ycN4#aHs=p_{JV:");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "iJl,Bb";
      stringArray0[1] = "iJl,Bb";
      defaultDBColumn0.getNotNullConstraint();
      defaultDBColumn0.setNotNullConstraint((DBNotNullConstraint) null);
      defaultDBColumn0.setNullable(false);
      stringArray0[2] = "kJsPW;o3pssp_";
      stringArray0[3] = "iJl,Bb";
      defaultDBTable0.addColumn(defaultDBColumn0);
      SQLUtil.renderColumnListWithTableName("E33e?t=", stringArray0);
      defaultDBColumn0.isEquivalent((DBObject) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      defaultDBColumn0.equals("'}Yz!ou=m$");
      SQLUtil.renderColumnNames(stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Parameter parameter0 = new Parameter((-240));
      genericDescriptorList0.add((Object) parameter0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.h2.expression.Parameter cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.683910610051334
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("'}Yz!ou=m$");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      tableContainer0.setName("'}Yz!ou=m$");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'}Yz!ou=m$", defaultDBTable0, 51, "'}Yz!ou=m$");
      tableContainer0.toString();
      SQLUtil.isQuery("weightedLiteralList");
      Object object0 = new Object();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(51);
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter1, 51);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("'}Yz!ou=m$");
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("weightedLiteralList");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("+D86+XKlSz", objectArray0);
      mockPrintWriter0.println((float) 51);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      mockPrintWriter0.print((Object) "'}Yz!ou=m$");
      PrintWriter printWriter0 = mockPrintWriter0.printf("i2er", (Object[]) null);
      printWriter0.close();
      printWriter0.println("U8|");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      SQLUtil.isDML("+D86+XKlSz");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("+D86+XKlSz");
      assertNull(boolean0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("%5t");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7612118325115627
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "6E81Ufb@";
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "org.apache.derby.ixpl.sql.Zompile.DMLModSt9tementNode";
      objectArray0[3] = (Object) "alter maerialized iew";
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6E81Ufb@");
      Object object2 = new Object();
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "alter maerialized iew";
      stringArray0[1] = "catalog null";
      stringArray0[2] = "catalog null";
      stringArray0[3] = "drop materialized viewcallweightdliteralist";
      stringArray0[4] = "6E81Ufb@";
      stringArray0[5] = "org.apache.derby.ixpl.sql.Zompile.DMLModSt9tementNode";
      stringArray0[6] = null;
      stringArray0[7] = "drop materialized viewcallweightdliteralist";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Clob";
      stringArray0[1] = "call!`qh:1|p'y-bj/";
      stringArray0[2] = "callreferences";
      stringArray0[3] = "drop indexreferences";
      SQLUtil.renderColumnNames(stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("call!`qh:1|p'y-bj/");
      stringBuilder0.append((-1.0F));
      StringBuilder stringBuilder1 = stringBuilder0.insert(1, (Object) "call!`qh:1|p'y-bj/");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("Cannot convert type ");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("create unique index", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Cannot convert type ");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("alter sessionalter maerialized iew");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.433352004894392
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("~BdCZy,WUVz;J!a");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("~BdCZy,WUVz;J!a", defaultDBTable0, 10240, "select into");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("ALTER TABLE ", 122);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("execute", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Table.addColumn");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("bind exception");
      assertNull(boolean0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = RawTransaction.ABORT;
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean1);
      assertNotNull(boolean1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin(",", (String[]) null, ",", "alter index", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.derby.iapi.sql.dictionary.SchemaDescriptor";
      stringArray0[1] = "org.apache.derby.iapi.sql.dictionary.SchemaDescriptor";
      stringArray0[2] = "org.apache.derby.iapi.sql.dictionary.SchemaDescriptor";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "org.apache.derby.iapi.sql.dictionary.SchemaDescriptor";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.apache.derby.iapi.sql.dictionary.SchemaDescriptor", false, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5450770191018965
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.h2.index.ViewIndex", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      StringWriter stringWriter0 = new StringWriter(32664);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Character character0 = new Character(')');
      String string0 = SQLUtil.renderValue(stringWriter0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "z/`RQqTZ4QaEo:";
      stringArray0[1] = ",$s)O-Cfw+^&;{-ftn";
      stringArray0[2] = "";
      String string1 = SQLUtil.join("alter indexupdatexhh6km<.u>yu", "z/`RQqTZ4QaEo:", stringArray0, "z/`RQqTZ4QaEo:", ",$s)O-Cfw+^&;{-ftn", stringArray0);
      assertEquals("alter indexupdatexhh6km<.u>yu join z/`RQqTZ4QaEo: as ,$s)O-Cfw+^&;{-ftn on z/`RQqTZ4QaEo:.z/`RQqTZ4QaEo: = ,$s)O-Cfw+^&;{-ftn.z/`RQqTZ4QaEo: and z/`RQqTZ4QaEo:.,$s)O-Cfw+^&;{-ftn = ,$s)O-Cfw+^&;{-ftn.,$s)O-Cfw+^&;{-ftn and z/`RQqTZ4QaEo:. = ,$s)O-Cfw+^&;{-ftn.", string1);
      
      boolean boolean0 = SQLUtil.isDML("delete,$s)o-cfw+^&;{-ftn");
      assertTrue(boolean0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) "z/`RQqTZ4QaEo:");
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      SQLUtil.isQuery("z/`RQqTZ4QaEo:");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure(",$s)O-Cfw+^&;{-ftn");
      assertNull(boolean1);
      
      boolean boolean2 = SQLUtil.isDDL("Hr^//aTE{");
      assertFalse(boolean2);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "refere";
      stringArray0[1] = "exec";
      stringArray0[2] = "refere";
      stringArray0[3] = "refere";
      NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "refere");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "fa<");
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3168084546157512
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      mockPrintWriter0.println((long) 759);
      char[] charArray0 = new char[0];
      stringWriter1.write(charArray0);
      char[] charArray1 = new char[5];
      stringWriter0.append((CharSequence) "locktype");
      charArray1[0] = 'l';
      charArray1[1] = 'V';
      stringWriter0.flush();
      charArray1[4] = '*';
      stringWriter1.write(charArray1);
      Object[] objectArray0 = new Object[3];
      stringWriter0.append('l');
      stringWriter0.write((int) 'l');
      objectArray0[0] = (Object) stringWriter1;
      stringWriter1.write(3014);
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      mockPrintWriter0.print((long) 759);
      PrintWriter printWriter0 = mockPrintWriter0.printf("locktype", objectArray0);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) printWriter0;
      printWriter0.flush();
      Object object1 = new Object();
      objectArray1[1] = object1;
      objectArray1[2] = (Object) mockPrintWriter0;
      SQLUtil.typeAndName(defaultDBTable0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "locktype";
      stringArray0[1] = "locktype";
      stringArray0[2] = "locktype";
      stringArray0[3] = "locktype";
      stringArray0[4] = "locktype";
      stringArray0[5] = "locktype";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("table null", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals("759\nlV\u0000\u0000*\u0BC6759locktypeALTER TABLE null ADD \n\tCONSTRAINT \"table null\" FOREIGN KEY (locktype, locktype, locktype, locktype, locktype, locktype) REFERENCES null(locktype, locktype, locktype, locktype, locktype, locktype)", stringWriter1.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9549478780836425
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "alter materialized view:gqfu";
      stringArray0[1] = "XGPY";
      stringArray0[2] = "exec(pum$:w+";
      stringArray0[3] = "c013800d-00fb-2641-07ec-000000134f30";
      stringArray0[4] = "1C^98";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "c013800d-00fb-2641-07ec-000000134f30";
      objectArray0[1] = (Object) "XGPY";
      objectArray0[2] = (Object) "alter materialized view:gqfu";
      objectArray0[3] = (Object) "alter materialized view:gqfu";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = 1442;
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("mg", defaultDBTable0, 1442, "(m$Hm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (m$Hm
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1950865325403197
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1287);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "alter maerialized iew");
      stringWriter0.flush();
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = '*';
      stringWriter1.write(charArray0);
      StringWriter stringWriter2 = stringWriter0.append('*');
      stringWriter1.write(charArray0);
      stringWriter2.write(1287);
      stringWriter1.write(1287);
      Object object0 = new Object();
      StringWriter stringWriter3 = new StringWriter(1689);
      stringWriter0.write(charArray0);
      stringWriter0.write(236);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("ALTER TABLE ", 122);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "alter maerialized iew");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("'}Yz!ou=m$");
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("insertunique", stringArray0);
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      ZonedDateTime zonedDateTime0 = mockGregorianCalendar0.toZonedDateTime();
      MockGregorianCalendar.from(zonedDateTime0);
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      ValueLong valueLong0 = ValueLong.get((-1354L));
      // Undeclared exception!
      try { 
        valueLong0.getTime();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse time constant \"-1354\", cause: \"format hh:mm:ss\" [90010-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1986189969240293
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder(">S");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("select into`'partitions'", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DBDataType dBDataType0 = DBDataType.getInstance(339, "exec");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execWde", defaultDBTable0, dBDataType0, integer0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "exec";
      stringArray0[1] = "execWde";
      stringArray0[2] = "exec";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" AND ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" AND \" FOREIGN KEY (exec, execWde, exec) REFERENCES null(exec, execWde, exec)", string0);
      
      String string1 = SQLUtil.join(">S", "getLong", stringArray0, " NOT NULL", "!!!!!!!!! memo size is ", stringArray0);
      assertEquals(">S join  NOT NULL as !!!!!!!!! memo size is  on getLong.exec = !!!!!!!!! memo size is .exec and getLong.execWde = !!!!!!!!! memo size is .execWde and getLong.exec = !!!!!!!!! memo size is .exec", string1);
      
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(exec, execWde, exec)", string2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "inner";
      String string1 = "h+.69(+/{PlMR?";
      // Undeclared exception!
      try { 
        SQLUtil.join("inner", "inner", (String[]) null, "h+.69(+/{PlMR?", "inner", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.51379068756023
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = SQLUtil.normalize("LS/%Ed", false);
      assertEquals("LS / % Ed", string0);
      
      boolean boolean0 = SQLUtil.isDDL("LS / % Ed");
      boolean boolean1 = SQLUtil.isDML("LS/%Ed");
      Character character0 = new Character('x');
      Character.compare('t', 'C');
      Character.lowSurrogate((-120964416));
      String string1 = SQLUtil.renderValue(character0);
      assertEquals("'x'", string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "alter indexupdatexhh6km<.u>yu";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "DATE";
      String string2 = SQLUtil.join(",$s)O-Cfw+^&;{-ftn", "alter indexupdatexhh6km<.u>yu", stringArray0, "", "alter indexupdatexhh6km<.u>yu", stringArray0);
      assertEquals(",$s)O-Cfw+^&;{-ftn join  as alter indexupdatexhh6km<.u>yu on alter indexupdatexhh6km<.u>yu. = alter indexupdatexhh6km<.u>yu. and alter indexupdatexhh6km<.u>yu.alter indexupdatexhh6km<.u>yu = alter indexupdatexhh6km<.u>yu.alter indexupdatexhh6km<.u>yu and alter indexupdatexhh6km<.u>yu. = alter indexupdatexhh6km<.u>yu. and alter indexupdatexhh6km<.u>yu. = alter indexupdatexhh6km<.u>yu. and alter indexupdatexhh6km<.u>yu. = alter indexupdatexhh6km<.u>yu. and alter indexupdatexhh6km<.u>yu. = alter indexupdatexhh6km<.u>yu. and alter indexupdatexhh6km<.u>yu.DATE = alter indexupdatexhh6km<.u>yu.DATE", string2);
      
      SQLUtil.isDML("create unique index");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) "create unique index");
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      boolean boolean2 = SQLUtil.isQuery("hqdate");
      assertTrue(boolean2 == boolean0);
      
      Boolean boolean3 = SQLUtil.mutatesDataOrStructure("alter indexupdatexhh6km<.u>yu");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "z}&\\]?AM*2", false, stringArray1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string3 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT z}&\\]?AM*2 PRIMARY KEY ()", string3);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.563023629494366
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      mockPrintWriter0.println((long) 759);
      char[] charArray0 = new char[0];
      stringWriter1.write(charArray0);
      char[] charArray1 = new char[5];
      charArray1[0] = 'l';
      charArray1[1] = 'V';
      stringWriter0.flush();
      charArray1[4] = '*';
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = ValueLong.MAX;
      bigInteger0.or(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ZERO;
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.clearCurrentRow(711);
      constantActionActivation0.getContextManager();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      SQLUtil.normalize(",O 1th*/Xd@}K;lE!_", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(", O 1th */ Xd @ } K ; lE ! _", defaultDBTable0, (-186), "left");
      assertEquals(", O 1th */ Xd @ } K ; lE ! _", defaultDBColumn0.getName());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.4448727354732513
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(",", 4);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil.mutatesStructure(" REERENCES ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LyF3@d");
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.mutatesStructure("LyF3@d");
      SQLUtil.mutatesDataOrStructure(" REERENCES ");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Random.setNextRandom((-1845394347));
      System.setCurrentTimeMillis((-1011L));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique index");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "insertreferences", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.646084939249829
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("'}Yz!ou=m$");
      tableContainer0.getTable("drop table");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("?VGomV", (DBTable) null, 10240, "drop table");
      boolean boolean0 = false;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("drop table", false, "weightedLiteralList", "execute");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      defaultDBColumn0.setDefaultValue("c013800d-00e3-ffbe-37c6-009e3a3b5e00");
      tableContainer0.toString();
      defaultDBColumn0.setDoc((String) null);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append(1.0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "?VGomV";
      stringArray0[1] = "iJlh,Bb";
      stringArray0[2] = "execute";
      stringArray0[3] = "weightedLiteralList";
      SQLUtil.renderColumnListWithTableName("iJlh,Bb", stringArray0);
      stringBuilder1.append("Error querying table ");
      SQLUtil.constraintName(dBCheckConstraint0);
      SQLUtil.addRequiredCondition("truncate~jtm~vkb_)flwnidxj/", stringBuilder1);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.renderColumnNames(stringArray0);
      Predicate predicate0 = new Predicate();
      // Undeclared exception!
      try { 
        predicate0.getDataDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7179202616196032
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[6] = "YL\"x4qWAF9($h4SG}.Q";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Recover recover0 = new Recover();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      MathContext mathContext1 = MathContext.UNLIMITED;
      bigDecimal0.pow(241, mathContext1);
      ValueDecimal.get(bigDecimal0);
      ValueShort valueShort0 = ValueShort.get((short)61);
      valueShort0.negate();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "r\"P";
      stringArray1[1] = "YL\"x4qWAF9($h4SG}.Q";
      stringArray1[2] = "r\"P";
      stringArray1[3] = " NOT NULL";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("v$#.jW$z&/7", stringArray0, "v$#.jW$z&/7", "r\"P", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.631590118274021
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("", "", "");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ZERO;
      dBSequence0.setMinValue(bigInteger0);
      SQLUtil.typeAndName(dBSequence0);
      Locale locale0 = Locale.KOREAN;
      locale0.hasExtensions();
      locale0.getDisplayName();
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      assertEquals(53, jdbcDataSource0.getTraceId());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "cYV k";
      stringArray0[1] = "cYV k";
      stringArray0[2] = "cYV k";
      stringArray0[3] = "W[";
      stringArray0[4] = "cYV k";
      stringArray0[5] = "";
      stringArray0[6] = "Korean";
      SQLUtil.join("LOCKNAME", "W[", stringArray0, "create materialized view", "7E39*", stringArray0);
      SQLUtil.isDML("LOCKNAME");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.parallelStream();
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      SQLUtil.isQuery("`~");
      SQLUtil.mutatesDataOrStructure("2:!wPW)NaWpU`}s2h");
      String[] stringArray1 = new String[9];
      stringArray1[0] = " on ";
      stringArray1[1] = "2:!wPW)NaWpU`}s2h";
      stringArray1[2] = "Korean";
      stringArray1[3] = "Korean";
      stringArray1[4] = "";
      stringArray1[5] = "'";
      stringArray1[6] = "m~vEu5~ZLP!)j:m(";
      stringArray1[7] = "cYV k";
      stringArray1[8] = "`~";
      String string0 = SQLUtil.leftJoin("", stringArray0, (String) null, "insert", stringArray1);
      assertEquals("left join null as insert on .cYV k = insert. on  and .cYV k = insert.2:!wPW)NaWpU`}s2h and .cYV k = insert.Korean and .W[ = insert.Korean and .cYV k = insert. and . = insert.' and .Korean = insert.m~vEu5~ZLP!)j:m(", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Parameter parameter0 = new Parameter((-240));
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, (DBDataType) null, integer0, integer0);
      int int0 = (-243407528);
      Integer integer1 = new Integer((-243407528));
      defaultDBColumn0.setSize(integer1);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.ownerDotComponent(defaultDBColumn0);
      // Undeclared exception!
      try { 
        defaultDBColumn0.getForeignKeyConstraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBColumn", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = " AND ";
      stringArray0[2] = " AND ";
      stringArray0[4] = " AND ";
      stringArray0[5] = " AND ";
      stringArray0[4] = " AND ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "create unique indexreferences");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, " AND ");
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(157);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal(",");
      stringBuilder0.append((Object) jMXPrincipal0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      char[] charArray0 = new char[20];
      stringBuilder0.append(charArray0);
      StringBuilder stringBuilder2 = new StringBuilder(2225);
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder(">S");
      VersionNumber versionNumber0 = VersionNumber.valueOf("execWde");
      VersionNumber versionNumber1 = VersionNumber.valueOf("\"F@xQ~~");
      versionNumber1.toString();
      versionNumber0.toString();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("execWde", "\"F@xQ~~", versionNumber0);
      defaultDatabase0.getComponents();
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("", (String[]) null, "", ">S", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String string0 = "BLOB";
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", (DBTable) null, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      // Undeclared exception!
      try { 
        ContextService.getFactory();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7437009261328056
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("ALTER TABLE ", 122);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "alter materialized view");
      Integer integer0 = RawTransaction.ABORT;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = SQLUtil.isDDL("alter materialized view");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("'}YzVR;m$");
      tableContainer0.getSequences(false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "||###yf%[{");
      byte[] byteArray0 = new byte[0];
      Integer integer0 = RawTransaction.ABORT;
      boolean boolean0 = SQLUtil.isQuery("BLOB");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean1 = SQLUtil.isProcedureCall("callweightd");
      assertFalse(boolean1 == boolean0);
      
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2.equals((Object)boolean1));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLUtil.mutatesStructure("exec");
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)26;
      xSQLVAR0.decodeDate(byteArray0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1516271281), (String) null, 0, (-1763), 0, 3, 588, 335544658, 0, 3, (-56699555), (-253794968), (-253794968));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "*(^ZW+3U9!", false, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "*/";
      stringArray0[6] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.renderValue(dBPrimaryKeyConstraint1);
      assertEquals("PRIMARY KEY (, , , , , */, )", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      Object object2 = new Object();
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("org.apache.drby.iapi.services.io.FormatableIntHolder");
      SQLUtil.typeAndName(dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter('*');
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("ALTER TABLE ", 122);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "alter maerialized iew");
      SQLUtil.mutatesDataOrStructure("alter maerialized iew");
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.9448468679826323
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DBDataType.getInstance((-3602), "weightedLiteralLis6t");
      SQLUtil.isQuery("SELECT * FROM ");
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageFactory genericLanguageFactory1 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory1 = new GenericLanguageConnectionFactory();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      XSQLVAR xSQLVAR2 = xSQLVAR1.deepCopy();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-9);
      byteArray0[8] = (byte)66;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      XSQLVAR xSQLVAR3 = xSQLVAR0.deepCopy();
      xSQLVAR3.deepCopy();
      XSQLVAR xSQLVAR4 = new XSQLVAR();
      xSQLVAR0.deepCopy();
      XSQLVAR xSQLVAR5 = xSQLVAR1.deepCopy();
      xSQLVAR5.deepCopy();
      XSQLVAR xSQLVAR6 = new XSQLVAR();
      XSQLVAR xSQLVAR7 = xSQLVAR6.deepCopy();
      XSQLVAR xSQLVAR8 = xSQLVAR2.deepCopy();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[8];
      xSQLVARArray0[0] = xSQLVAR4;
      xSQLVARArray0[1] = xSQLVAR0;
      xSQLVARArray0[2] = xSQLVAR3;
      xSQLVARArray0[3] = xSQLVAR6;
      xSQLVARArray0[4] = xSQLVAR8;
      xSQLVARArray0[5] = xSQLVAR2;
      xSQLVARArray0[6] = xSQLVAR7;
      xSQLVARArray0[7] = xSQLVAR7;
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "6E81Ufb@";
      String string1 = "org.apache.derby.ixpl.sql.Zompile.DMLModSt9tementNode";
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "org.apache.derby.ixpl.sql.Zompile.DMLModSt9tementNode";
      Locale locale0 = Locale.KOREAN;
      locale0.hasExtensions();
      locale0.getDisplayName();
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      String[] stringArray0 = Locale.getISOLanguages();
      String[] stringArray1 = new String[5];
      stringArray1[0] = "W[";
      stringArray1[1] = "Korean";
      stringArray1[2] = "insertcreate unique index";
      stringArray1[3] = "drop index";
      stringArray1[4] = "org.apache.derby.ixpl.sql.Zompile.DMLModSt9tementNode";
      // Undeclared exception!
      try { 
        SQLUtil.join("org.apache.derby.ixpl.sql.Zompile.DMLModSt9tementNode", "", stringArray0, "drop index", "cYV k", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Character.compare('7', '7');
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedWriter pipedWriter1 = new PipedWriter();
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Recover recover0 = new Recover();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      MathContext mathContext0 = MathContext.UNLIMITED;
      bigDecimal0.round(mathContext0);
      MathContext mathContext1 = MathContext.UNLIMITED;
      MathContext mathContext2 = MathContext.UNLIMITED;
      BigDecimal bigDecimal1 = bigDecimal0.pow(398, mathContext2);
      ValueDecimal valueDecimal0 = ValueDecimal.get(bigDecimal1);
      ValueShort.get((short)61);
      Value value0 = valueDecimal0.negate();
      assertEquals(8, Value.FLOAT);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.9482543405540194
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "";
      Integer integer0 = RawTransaction.ABORT;
      TableContainer tableContainer0 = new TableContainer("", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.setDoc("");
      tableContainer0.getComponents();
      tableContainer0.getSequences(true);
      tableContainer0.setOwner((CompositeDBObject<?>) null);
      LinkedList<ContainerComponent> linkedList0 = new LinkedList<ContainerComponent>();
      SQLUtil.isQuery("CMS)_&P");
      SQLUtil.mutatesDataOrStructure("CMS)_&P");
      String string1 = "9Ae/&Mz";
      SQLUtil.normalize("([F_%DY:\"v", true);
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join(" REFEhENCESZ", " REFEhENCESZ", (String[]) null, " REFEhENCESZ", " REFEhENCESZ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.0204142811723194
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" REFER'ENCES ", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      defaultDBTable0.isIdentical(dBForeignKeyConstraint0);
      Integer integer0 = new Integer(384);
      String string0 = "data node ";
      Integer integer1 = RawTransaction.COMMIT;
      Integer.getInteger("}>LyKT%~0sH.", integer1);
      dBForeignKeyConstraint0.toString();
      dBForeignKeyConstraint0.equals(integer0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5653948371180277
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Character.compare('z', '\\');
      Character.lowSurrogate(1599);
      Character.highSurrogate(2570);
      Character character0 = new Character('\uD7C2');
      SQLUtil.renderValue("LS/%Ed");
      String[] stringArray0 = new String[5];
      stringArray0[0] = " DEFAULT ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "DATE";
      stringArray0[4] = "alter indexupdatexhh6km<.u>yu";
      SQLUtil.join("Trailing junk on timestamp: '", ")[`$", stringArray0, "", "alter indexupdatexhh6km<.u>yu", stringArray0);
      String string0 = "create unique index";
      SQLUtil.isDML("alter indexupdatexhh6km<.u>yu");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      VersionNumber versionNumber0 = null;
      try {
        versionNumber0 = new VersionNumber(arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.databene.commons.version.VersionNumber", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("cyv k");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("IsI7N57UR6|9)W}Lh!E");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("IsI7N57UR6|9)W}Lh!E", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      dBForeignKeyConstraint0.setDoc("IsI7N57UR6|9)W}Lh!E");
      defaultDBTable0.isIdentical(dBForeignKeyConstraint0);
      Integer integer0 = new Integer((-2089));
      Integer.getInteger("");
      Integer integer1 = new Integer(39);
      Integer.getInteger("data node ", integer1);
      Integer.toUnsignedString(39);
      Object object0 = new Object();
      dBForeignKeyConstraint0.equals(object0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("data node ", defaultDBTable0, 1452, "IsI7N57UR6|9)W}Lh!E");
      assertEquals("data node ", defaultDBColumn0.getName());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.COMMIT;
      DBCatalog dBCatalog0 = new DBCatalog("ls / %");
      String string0 = null;
      DBSchema dBSchema0 = new DBSchema((String) null, (DBCatalog) null);
      dBSchema0.getTable("F$|:6uk=zeM m");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, (DBDataType) null, (Integer) null);
      Integer integer2 = new Integer((-1806829669));
      Integer integer3 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("F$|:6uk=zeM m", (DBTable) null, (DBDataType) null, integer2, integer3);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("bind", (DBTable) null, (DBDataType) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("nHkL6.4h[7e$CP5<<");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "nHkL6.4h[7e$CP5<<";
      stringArray0[1] = "select into'partitions'";
      defaultDBTable0.getCheckConstraints();
      stringArray0[2] = "nHkL6.4h[7e$CP5<<";
      stringArray0[3] = "nHkL6.4h[7e$CP5<<";
      stringArray0[4] = "nHkL6.4h[7e$CP5<<";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "nHkL6.4h[7e$CP5<<", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("nHkL6.4h[7e$CP5<<", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("nHkL6.4h[7e$CP5<<", false, dBTable0, stringArray0, dBTable0, stringArray0);
      String string0 = SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      assertEquals("nHkL6.4h[7e$CP5<<.nHkL6.4h[7e$CP5<<", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "7evS9,~lmeKv-:R";
          FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<yeeS.0$*eE:FP ,48H");
          SQLUtil.normalize("7evS9,~lmeKv-:R", false);
          DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
          Value[] valueArray0 = new Value[3];
          ValueLong valueLong0 = ValueLong.get(0L);
          valueArray0[1] = (Value) valueLong0;
          int int0 = (-1138295771);
          ConnectionInfo connectionInfo0 = new ConnectionInfo("<yeeS.0$*eE:FP ,48H");
          Database database0 = null;
          try {
            database0 = new Database(connectionInfo0, "7evS9,~lmeKv-:R");
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // General error: \"java.lang.NullPointerException\" [50000-136]
             //
             verifyException("org.h2.message.DbException", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3437537046719372
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delete");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "delete";
      stringArray0[1] = "delete";
      stringArray0[2] = "delete";
      stringArray0[3] = "delete";
      stringArray0[4] = "delete";
      stringArray0[5] = "delete";
      stringArray0[6] = "delete";
      stringArray0[7] = "TABLENAME";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM delete WHERE delete = 'delete' AND delete = 'delete' AND delete = 'delete' AND delete = 'delete' AND delete = 'delete' AND delete = 'delete' AND delete = 'delete' AND TABLENAME = 'TABLENAME'", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder(">S");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">S");
      VersionNumber versionNumber0 = VersionNumber.valueOf("execWde");
      VersionNumber versionNumber1 = VersionNumber.valueOf("\"F@xQ~~");
      versionNumber1.toString();
      versionNumber0.toString();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("referen", "\"F@xQ~~", versionNumber0);
      defaultDatabase0.getComponents();
      defaultDatabase0.getTable((String) null, false);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("drop materialized viewreferences", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.4066026722723
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("'}Yz!ou=m$");
      tableContainer0.getTable("drop table");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("drop table", false, "weightedLiteralList", "execute");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      tableContainer0.toString();
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append(1.0);
      String[] stringArray0 = new String[4];
      stringArray0[1] = "iJlh,Bb";
      stringArray0[2] = "execute";
      stringArray0[3] = "weightedLiteralList";
      SQLUtil.renderColumnListWithTableName("iJlh,Bb", stringArray0);
      stringBuilder1.append("Error querying table ");
      SQLUtil.constraintName(dBCheckConstraint0);
      SQLUtil.addRequiredCondition("truncate~jtm~vkb_)flwnidxj/", stringBuilder1);
      SQLUtil.renderColumnNames(stringArray0);
      StringBuilder stringBuilder2 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      stringBuilder2.append('B');
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder2);
      DBUniqueConstraint dBUniqueConstraint0 = null;
      try {
        dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) null, "create u", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueConstraint", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "truncatemixed";
      stringArray0[1] = "alter table'partitions'";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getTable("drop table");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("?VGomV", (DBTable) null, 10240, "drop table");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("drop table", false, "weightedLiteralList", "execute");
      tableContainer0.toString();
      defaultDBColumn0.setDoc((String) null);
      StringBuilder stringBuilder0 = new StringBuilder("?VGomV");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory0.canonicalize();
      ConnectionManager connectionManager0 = mock(ConnectionManager.class, new ViolatedAssumptionAnswer());
      fBManagedConnectionFactory0.createConnectionFactory(connectionManager0);
      FBManagedConnectionFactory fBManagedConnectionFactory1 = fBManagedConnectionFactory0.canonicalize();
      fBManagedConnectionFactory1.canonicalize();
      fBManagedConnectionFactory0.getTransactionIsolation();
      Integer integer0 = new Integer((-149));
      assertEquals((-149), (int)integer0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder(">S");
      DBDataType dBDataType0 = DBDataType.getInstance(339, "d,Dx~[{lJZ;SjKj@|");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(">S", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory0.canonicalize();
      BTreeController bTreeController0 = new BTreeController();
      GDSType.getType("g*n,n/O-o]<%B1_)");
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      FBManagedConnectionFactory fBManagedConnectionFactory1 = null;
      try {
        fBManagedConnectionFactory1 = new FBManagedConnectionFactory((GDSType) null, fBConnectionProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jca.FBManagedConnectionFactory", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLUtil.normalize("<*>YT^F.VJ*e", true);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      int int0 = 5;
      IndexRowGenerator indexRowGenerator0 = new IndexRowGenerator("execute", true, (int[]) null, booleanArray0, 5);
      ColumnDescriptorList columnDescriptorList0 = null;
      // Undeclared exception!
      try { 
        constantActionActivation0.getRowLocationTemplate((-326727843));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      mockPrintWriter0.println((long) 759);
      char[] charArray0 = new char[0];
      stringWriter1.write(charArray0);
      char[] charArray1 = new char[5];
      stringWriter0.append((CharSequence) "locktype");
      charArray1[0] = 'l';
      charArray1[1] = 'V';
      mockPrintWriter0.println(true);
      stringWriter0.flush();
      charArray1[4] = '*';
      stringWriter1.write(charArray1);
      Object[] objectArray0 = new Object[3];
      StringWriter stringWriter2 = stringWriter0.append('l');
      stringWriter0.write((int) 'l');
      objectArray0[0] = (Object) stringWriter1;
      stringWriter2.write(3014);
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      mockPrintWriter0.print((long) 759);
      PrintWriter printWriter0 = mockPrintWriter0.printf("locktype", objectArray0);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) printWriter0;
      printWriter0.flush();
      Object object1 = new Object();
      objectArray1[1] = object1;
      objectArray1[2] = (Object) mockPrintWriter0;
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("deletesignum");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute", defaultDBTable0, (DBDataType) null, (Integer) null, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.8976492786748422
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringWriter stringWriter0 = new StringWriter(759);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = 'V';
      charArray0[2] = 'g';
      charArray0[3] = 'V';
      charArray0[4] = 'g';
      stringWriter1.write(charArray0);
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[e4N:s";
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "[e4N:s", true, stringArray0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT [e4N:s ", stringBuilder0.toString());
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("RDB$SECURITY_CLASSES", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec1);
      assertEquals("FOREIGN KEY ([e4N:s) REFERENCES null([e4N:s)", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.612726894621007
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.h2.index.ViewIndex", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'PARTITIONS'");
      DBSchema dBSchema0 = new DBSchema("Md{vY3+gF", (DBCatalog) null);
      dBSchema0.getTable("Md{vY3+gF");
      String string0 = "#";
      DBDataType dBDataType0 = DBDataType.getInstance(157, "#");
      Integer integer0 = new Integer(157);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.getNotNullConstraint();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("#", false, defaultDBTable0, "'PARTITIONS'");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.080026147728218
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("ALTER TABLE ", 122);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("from");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("from", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      defaultDBTable0.isIdentical(dBForeignKeyConstraint0);
      Integer integer0 = new Integer((-1257));
      dBForeignKeyConstraint0.toString();
      Integer.getInteger("data node ", integer0);
      Integer.toUnsignedString((-3711));
      Integer.divideUnsigned((-184380589), 1206);
      dBForeignKeyConstraint0.equals(evoSuiteRemoteAddress0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = new DBForeignKeyConstraint("from", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      dBForeignKeyConstraint1.setTable(defaultDBTable0);
      TableContainer tableContainer0 = new TableContainer("selectreferences", defaultDBTable0);
      DBSchema dBSchema0 = new DBSchema("from");
      dBSchema0.getTable("4294963585");
      dBForeignKeyConstraint1.setTable((DBTable) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint1, (StringBuilder) null, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (-181163409), "selectreferences");
      assertNull(defaultDBColumn0.getSize());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.635013938135735
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jM$S.v/@";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("jM$S.v/@", (DBSchema) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("jM$S.v/@", defaultDBTable0, 355, "bind exception");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("jM$S.v/@", defaultDBTable0, (DBDataType) null, integer0, integer1);
      Integer.toUnsignedString(355);
      defaultDBColumn1.setNullable(false);
      DBNotNullConstraint dBNotNullConstraint0 = defaultDBColumn1.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      SQLUtil.parseColumnTypeAndSize("k>TdDZ3/!Qw\"y");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("U", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBColumn1.getForeignKeyConstraint();
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec1);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((-17.92792974430002));
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("bind exception", stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.append((-5277));
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint1, stringBuilder3);
      assertEquals("-17.92792974430002 or bind exception-5277CONSTRAINT U ", stringBuilder3.toString());
      assertEquals("-17.92792974430002 or bind exception-5277CONSTRAINT U ", stringBuilder0.toString());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.323582362394876
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("`M^(o%VQ7|", compositeDBObject0);
      tableContainer0.getTable("`M^(o%VQ7|");
      tableContainer0.equals("`M^(o%VQ7|");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "`M^(o%VQ7|");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("~JTm~VKB_)FLWNiDxj/", (DBTable) null, dBDataType0);
      defaultDBColumn0.isIdentical((DBObject) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.isDDL("");
      dBDataType0.isAlpha();
      Character character0 = new Character('x');
      Character.lowSurrogate(0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.removeComments("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[2] = "";
      stringArray0[3] = ",$s)O-Cfw+^&;{-ftn";
      stringArray0[4] = "~JTm~VKB_)FLWNiDxj/ `M^(O%VQ7| NULL";
      SQLUtil.join("DATE", "", stringArray0, "", "", stringArray0);
      SQLUtil.isDML("g<IiM");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber versionNumber0 = VersionNumber.valueOf("~JTm~VKB_)FLWNiDxj/ `M^(O%VQ7| NULL");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase(",$s)O-Cfw+^&;{-ftn", "", versionNumber0);
      VersionNumber.valueOf(",$s)O-Cfw+^&;{-ftn");
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema("mlhIa)/[%'+3J(l'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table ',$s)O-Cfw+^&;{-ftn'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("create unique index");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)45;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "LS/%Ed";
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("org.apache.drby.iapi.services.io.FormatableIntHolder");
      String string0 = SQLUtil.substituteMarkers("org.apache.drby.iapi.services.io.FormatableIntHolder", "org.apache.drby.iapi.services.io.FormatableIntHolder", object2);
      assertNotNull(string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = 759;
      StringWriter stringWriter0 = new StringWriter(759);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getContextManager();
      String string0 = "delete";
      SQLUtil.mutatesDataOrStructure("delete");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        constantActionActivation0.getTransactionController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "drop indexreferences");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory0.setNonStandardProperty("(bQuJ$S)VhU?>tw41");
      fBManagedConnectionFactory0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("(0D+g<m^");
      StringReader stringReader0 = new StringReader("V?CA&");
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[1] = '^';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      stringReader0.reset();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      xSQLVAR0.deepCopy();
      xSQLVAR0.deepCopy();
      xSQLVAR0.deepCopy();
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "E}I&Y)e>a/u{l+&-VP7";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      String[] stringArray1 = new String[5];
      stringArray1[0] = null;
      stringArray1[1] = null;
      stringArray1[2] = "(0D+g<m^";
      stringArray1[3] = null;
      stringArray1[4] = null;
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin((String) null, stringArray0, "pQ", "referen", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[2] = "renamealter materialized viewcyv k";
      stringArray0[3] = "renamealter materialized viewcyv k";
      stringArray0[4] = "renamealter materialized viewcyv k";
      stringArray0[5] = "renamealter materialized viewcyv k";
      stringArray0[6] = "renamealter materialized viewcyv k";
      String string0 = SQLUtil.innerJoin("renamealter materialized viewcyv k", stringArray0, stringArray0[1], "f%J]' @kiA#GxS/|E", stringArray0);
      assertEquals("null as f%J]' @kiA#GxS/|E on renamealter materialized viewcyv k.null = f%J]' @kiA#GxS/|E.null and renamealter materialized viewcyv k.null = f%J]' @kiA#GxS/|E.null and renamealter materialized viewcyv k.renamealter materialized viewcyv k = f%J]' @kiA#GxS/|E.renamealter materialized viewcyv k and renamealter materialized viewcyv k.renamealter materialized viewcyv k = f%J]' @kiA#GxS/|E.renamealter materialized viewcyv k and renamealter materialized viewcyv k.renamealter materialized viewcyv k = f%J]' @kiA#GxS/|E.renamealter materialized viewcyv k and renamealter materialized viewcyv k.renamealter materialized viewcyv k = f%J]' @kiA#GxS/|E.renamealter materialized viewcyv k and renamealter materialized viewcyv k.renamealter materialized viewcyv k = f%J]' @kiA#GxS/|E.renamealter materialized viewcyv k and renamealter materialized viewcyv k.null = f%J]' @kiA#GxS/|E.null and renamealter materialized viewcyv k.null = f%J]' @kiA#GxS/|E.null", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "\\";
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = 'm';
      charArray0[2] = '7';
      charArray0[3] = 'D';
      charArray0[4] = ' ';
      charArray0[5] = 'm';
      charArray0[6] = 'q';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(157);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      BasicDatabase basicDatabase0 = new BasicDatabase();
      Predicate predicate0 = new Predicate();
      basicDatabase0.getDataDictionary();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("", "select intokorean", stringArray0, "#J z8ng6kYa", (String) null, stringArray0);
      assertEquals("#J z8ng6kYa as null on ", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<yeeS.0$*eE:FP ,48H");
          SQLUtil.normalize("aI)7W@+uS>uuM9J5", false);
          DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
          Value[] valueArray0 = new Value[3];
          ValueLong valueLong0 = ValueLong.get(0L);
          valueArray0[1] = (Value) valueLong0;
          ConnectionInfo connectionInfo0 = new ConnectionInfo("<yeeS.0$*eE:FP ,48H");
          Database database0 = null;
          try {
            database0 = new Database(connectionInfo0, "aI)7W@+uS>uuM9J5");
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // General error: \"java.lang.NullPointerException\" [50000-136]
             //
             verifyException("org.h2.message.DbException", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "0M46ON[6:sJuUi/^Fi";
      stringArray0[1] = "0M46ON[6:sJuUi/^Fi";
      stringArray0[2] = "update";
      stringArray0[3] = "0M46ON[6:sJuUi/^Fi";
      stringArray0[4] = "0M46ON[6:sJuUi/^Fi";
      stringArray0[5] = "0M46ON[6:sJuUi/^Fi";
      stringArray0[6] = "0M46ON[6:sJuUi/^Fi";
      stringArray0[7] = "0M46ON[6:sJuUi/^Fi";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "0M46ON[6:sJuUi/^Fi", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (0M46ON[6:sJuUi/^Fi, 0M46ON[6:sJuUi/^Fi, update, 0M46ON[6:sJuUi/^Fi, 0M46ON[6:sJuUi/^Fi, 0M46ON[6:sJuUi/^Fi, 0M46ON[6:sJuUi/^Fi, 0M46ON[6:sJuUi/^Fi)", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLUtil.normalize("'PARTITIONS'", false);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      assertFalse(slaveDatabase0.isInSlaveMode());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DBDataType.getInstance(0, "");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.remainderUnsigned(0, 48);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("1io\":TVwVOMaDKGc#KC", (DBTable) null, 0, "");
      defaultDBColumn0.setName((String) null);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.9982695885852573
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "s)-f}*BT+IlXC0W]";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s)-f}*BT+IlXC0W]");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("s)-f}*BT+IlXC0W]", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "create unique index";
      stringArray0[1] = "create unique index";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create unique index", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (create unique index, create unique index)", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)91;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[5] = (byte)4;
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'PARTITIONS'");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("'PARTITIONS'", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      dBForeignKeyConstraint0.setDoc(",");
      FKChangeRule fKChangeRule0 = FKChangeRule.CASCADE;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      dBForeignKeyConstraint0.setDoc("alter tabl+");
      defaultDBTable0.isIdentical(dBForeignKeyConstraint0);
      FKChangeRule fKChangeRule1 = FKChangeRule.CASCADE;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule1);
      Integer.getInteger("'PARTITIONS'");
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("0~/SY");
      jMXPrincipal0.toString();
      dBForeignKeyConstraint0.equals(jMXPrincipal0);
      Integer.toUnsignedString(149);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("'PARTITIONS'", defaultDBTable0, 1452, "R^WcSNN_QZY3(Vn)yrK");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Vn\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(0, "~JTm~VKB_)FLWNiDxj/");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.remainderUnsigned((-1173), 39);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0, integer2, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("~JTM~VKB_)FLWNIDXJ/(2,2)", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("c013800d-00f8-5b53-28a9-00000019ed88");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("?[u~lq?2", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      dBForeignKeyConstraint0.setDoc("L;\"(\"x5 syaJ");
      defaultDBTable0.isIdentical(dBForeignKeyConstraint0);
      Integer integer0 = new Integer((byte) (-100));
      String string0 = "data node ";
      Integer.getInteger("c013800d-00f8-5b53-28a9-00000019ed88");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.getInteger("data node ", integer1);
      Integer.remainderUnsigned((byte) (-100), (byte) (-100));
      Integer.toUnsignedString(1);
      dBForeignKeyConstraint0.equals((Object) null);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getTable("drop table");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("?VGomV", (DBTable) null, 10240, "drop table");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("drop table", false, "weightedLiteralList", "execute");
      tableContainer0.toString();
      defaultDBColumn0.setDoc((String) null);
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = new StringBuilder("call'partitions'");
      StringBuilder stringBuilder2 = stringBuilder1.append('Y');
      DBSchema dBSchema0 = new DBSchema("'0{v7DkFq$M=c;zj~R?");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "weightedLiteralList", false, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder2);
      DBUniqueConstraint dBUniqueConstraint1 = null;
      try {
        dBUniqueConstraint1 = new DBUniqueConstraint((DBTable) null, (String) null, false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueConstraint", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("F$|:6uk=zeM m");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("F$|:6uk=zeM m", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'";
      stringArray0[1] = "4;yNB{3cjAd";
      stringArray0[2] = "'";
      stringArray0[4] = "'";
      stringArray0[5] = "'";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "'", false, stringArray0);
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("CONSTRAINT ' PRIMARY KEY (', 4;yNB{3cjAd, ', , ', ')", string0);
      
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.4993646124305886
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getIndexConglomerateNumber();
      constantActionActivation0.getResultSet();
      constantActionActivation0.getCursorResultSet();
      constantActionActivation0.setForUpdateIndexScan((CursorResultSet) null);
      constantActionActivation0.clearCurrentRow(911);
      ConstantActionActivation constantActionActivation1 = new ConstantActionActivation();
      constantActionActivation1.startExecution();
      constantActionActivation1.getContextManager();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      StringBuilder stringBuilder0 = new StringBuilder("AUE=81;3]8-NIL");
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      DBSchema dBSchema0 = new DBSchema("(Pum$:w+");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(Pum$:w+", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "AUE=81;3]8-NIL", true, (String[]) null);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      SlaveDatabase slaveDatabase1 = new SlaveDatabase();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec0);
      assertEquals("LIN-8]3;18=EUACONSTRAINT AUE=81;3]8-NIL CONSTRAINT AUE=81;3]8-NIL ", stringBuilder1.toString());
      assertEquals("LIN-8]3;18=EUACONSTRAINT AUE=81;3]8-NIL CONSTRAINT AUE=81;3]8-NIL ", stringBuilder2.toString());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(8001);
      stringBuilder0.append((CharSequence) "|");
      SQLUtil.addOptionalCondition("|", stringBuilder0);
      char[] charArray0 = new char[0];
      stringBuilder0.append(charArray0);
      ErrorMessages errorMessages0 = new ErrorMessages();
      int int0 = (-1887);
      try { 
        errorMessages0.getBigDecimal("z-NRW\"Es", (-1887));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // findColumn
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "w\"D^3@LKEQ<MW|)(";
      stringArray0[1] = "call";
      stringArray0[2] = "wtaWY";
      stringArray0[3] = " ADD ";
      stringArray0[4] = "getBlob(";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((long) 90109);
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      FromVTI fromVTI0 = new FromVTI();
      FromVTI fromVTI1 = new FromVTI();
      fromVTI1.disablePrivilegeCollection();
      FromVTI fromVTI2 = new FromVTI();
      fromVTI1.getContextManager();
      HeapController heapController0 = new HeapController();
      InsertNode insertNode0 = new InsertNode();
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "refere";
      stringArray0[1] = "exec";
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      BigDecimal bigDecimal2 = BigDecimal.TEN;
      bigDecimal2.max(bigDecimal0);
      BigDecimal bigDecimal3 = BigDecimal.TEN;
      B2I b2I0 = new B2I();
      java.util.function.Predicate<String> predicate0 = java.util.function.Predicate.isEqual((Object) "refere");
      java.util.function.Predicate<String> predicate1 = predicate0.negate();
      java.util.function.Predicate<String> predicate2 = predicate0.or(predicate1);
      predicate2.test("org.postgresql.jdbc2.AbstractJdbc2Clob");
      java.util.function.Predicate<String> predicate3 = predicate1.and(predicate0);
      predicate3.and(predicate2);
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      xSQLVAR1.deepCopy();
      xSQLVAR0.deepCopy();
      xSQLVAR1.deepCopy();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("AVG ", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(34);
      SQLUtil.addOptionalCondition("insertreferences", stringBuilder0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      BigDecimal bigDecimal1 = new BigDecimal(charArray0);
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      bigDecimal1.max(bigDecimal2);
      BigDecimal bigDecimal3 = BigDecimal.TEN;
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      Character character0 = new Character('1');
      BigInteger bigInteger2 = ValueLong.MAX;
      bigInteger1.divideAndRemainder(bigInteger2);
      BigDecimal bigDecimal4 = BigDecimal.TEN;
      BigDecimal bigDecimal5 = BigDecimal.TEN;
      bigInteger1.setBit(34);
      BigInteger bigInteger3 = BigInteger.TEN;
      BigInteger bigInteger4 = BigInteger.ONE;
      mathContext0.getRoundingMode();
      bigInteger1.divideAndRemainder(bigInteger4);
      bigDecimal0.round(mathContext0);
      bigDecimal5.add(bigDecimal1);
      BigDecimal bigDecimal6 = null;
      try {
        bigDecimal6 = new BigDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getIndexConglomerateNumber();
      constantActionActivation0.getResultSet();
      constantActionActivation0.getCursorResultSet();
      constantActionActivation0.setForUpdateIndexScan((CursorResultSet) null);
      constantActionActivation0.getIndexConglomerateNumber();
      constantActionActivation0.getSQLSessionContextForChildren();
      constantActionActivation0.clearCurrentRow(891);
      ConstantActionActivation constantActionActivation1 = new ConstantActionActivation();
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(220);
      String string0 = "";
      SQLUtil.normalize("", false);
      FromVTI fromVTI0 = new FromVTI();
      fromVTI0.getContextManager();
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-64379068), "alter sessiondeclare", 515, (-2953), (-400), 2, (-1494), 541, 628, (-2737), 515, 1, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 515
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLUtil.isDDL("CanUot convert y0e ");
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      int int0 = 16777216;
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = null;
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.459593384289201
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Character character0 = new Character('s');
      Character.compare('t', 'C');
      Character.lowSurrogate('s');
      Character.highSurrogate('C');
      Character character1 = new Character('s');
      SQLUtil.renderValue(character0);
      SQLUtil.mutatesStructure("z/`RQqTZ4QaEo:");
      String string0 = "LyF3@d";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",$s)O-Cfw+^&;{-ftn");
      SQLUtil.removeComments("I(6UK");
      SQLUtil.isDML("");
      Integer integer0 = RawTransaction.ABORT;
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob(";/JA]&qTONs.~gP.");
      jdbcClob jdbcClob1 = new jdbcClob("K(AAY=");
      Reader reader0 = jdbcClob1.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.pushBack();
      StringReader stringReader0 = new StringReader("create materialized viewcallweightdliteralist");
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      stringReader0.reset();
      jdbcClob0.getCharacterStream();
      streamTokenizer0.ordinaryChar(0);
      stringReader0.skip(20L);
      stringReader0.markSupported();
      streamTokenizer0.commentChar((-120904185));
      SQLUtil.normalize("K(AAY=", true);
      Random.setNextRandom((-120904185));
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.459593384289201
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Character.isAlphabetic((-2519));
      Character.lowSurrogate((-3059));
      SQLUtil.renderValue((Object) null);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.mutatesStructure("null");
      SQLUtil.isDML("null");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLUtil.mutatesStructure(" REFERENCES ");
      ValueLong valueLong0 = ValueLong.get(1988);
      valueLong0.getFloat();
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofLocalizedDateTime(formatStyle0);
      // Undeclared exception!
      try { 
        MockLocalDate.parse((CharSequence) " REFERENCES ", dateTimeFormatter0);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text ' REFERENCES ' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringWriter stringWriter0 = new StringWriter(759);
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      mockPrintWriter0.println((long) 759);
      char[] charArray0 = new char[0];
      stringWriter1.write(charArray0);
      char[] charArray1 = new char[5];
      charArray1[0] = 'l';
      charArray1[1] = 'V';
      stringWriter0.flush();
      charArray1[2] = 'g';
      charArray1[4] = '*';
      stringWriter1.write(charArray1);
      Object[] objectArray0 = new Object[3];
      stringWriter0.append('l');
      stringWriter0.write((-708));
      objectArray0[0] = (Object) stringWriter1;
      stringWriter1.write((-1438048537));
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      PrintWriter printWriter0 = mockPrintWriter0.printf("locktype", objectArray0);
      printWriter0.printf("AN*Yt)tuu?H3Yl*", objectArray0);
      printWriter0.println((float) 759);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals("759\nlVg\u0000*\u1EE7locktypeAN*Yt)tuu?H3Yl*759.0\ncreate table null (\n)", stringWriter1.toString());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      Object object2 = new Object();
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("org.apache.drby.iapi.services.io.FormatableIntHolder");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }
}
