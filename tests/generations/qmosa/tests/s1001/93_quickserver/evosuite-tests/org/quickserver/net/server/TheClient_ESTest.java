/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 04:35:12 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.SocketAddress;
import java.net.SocketOption;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;
import org.quickserver.util.xmlreader.DBObjectPoolConfig;
import org.quickserver.util.xmlreader.QuickServerConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("Y'^B,k*zK@}T6]j");
      quickServer0.setRawCommunicationLogging(true);
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.052754235510318
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      TheClient theClient0 = new TheClient();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.quickserver.net.server.TheClient", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      mockSocket0.bind((SocketAddress) null);
      mockSocket0.getReuseAddress();
      mockSocket0.setSendBufferSize(2);
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      
      theClient0.setSocket(mockSocket0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      theClient0.toString();
      theClient0.toString();
      theClient0.getSocketChannel();
      theClient0.getClientExtendedEventHandler();
      theClient0.getMaxAuthTryMsg();
      theClient0.getSocket();
      theClient0.getClientWriteHandler();
      theClient0.toString();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocketChannel();
      theClient0.getClientWriteHandler();
      String string0 = theClient0.toString();
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.setClientEvent((ClientEvent) null);
      theClient1.getClientEvent();
      assertFalse(theClient1.getTrusted());
      assertTrue(theClient1.getCommunicationLogging());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.124771615329544
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      QuickServer quickServer0 = new QuickServer("H/n%X$(Q");
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      quickServer0.initServer(quickServerConfig0);
      theClient0.setServer(quickServer0);
      theClient0.getAuthenticator();
      MockSocket mockSocket0 = new MockSocket();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)58;
      theClient0.getClientCommandHandler();
      byteArray0[2] = (byte)22;
      byteArray0[2] = (byte)58;
      byteArray0[5] = (byte) (-101);
      theClient0.getServer();
      theClient0.getClientBinaryHandler();
      theClient0.getClientEvent();
      QuickServer quickServer1 = new QuickServer();
      theClient0.getClientWriteHandler();
      QuickServer quickServer2 = new QuickServer();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getClientExtendedEventHandler();
      theClient0.getAuthenticator();
      System.setCurrentTimeMillis((byte)58);
      theClient0.getClientObjectHandler();
      theClient0.getClientWriteHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      DBObjectPoolConfig dBObjectPoolConfig0 = new DBObjectPoolConfig();
      quickServer0.setDBObjectPoolConfig(dBObjectPoolConfig0);
      quickServer0.setRawCommunicationLogging(false);
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9649066497880012
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientAuthenticationHandler();
      theClient0.setTimeoutMsg("#,##0.00");
      theClient0.getClientWriteHandler();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getTimeoutMsg();
      theClient0.getClientBinaryHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setCommunicationLogging(false);
      theClient0.getCommunicationLogging();
      CommandHandler commandHandler0 = new CommandHandler();
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setMaxConnectionMsg("1EJzz2!N'%MV3<");
      theClient0.getMaxConnectionMsg();
      theClient0.getClientEventHandler();
      ClientEvent clientEvent0 = ClientEvent.WRITE;
      theClient0.setMaxConnectionMsg("1EJzz2!N'%MV3<");
      QuickServer quickServer0 = new QuickServer("1EJzz2!N'%MV3<");
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      System.setCurrentTimeMillis(1L);
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setMaxConnectionMsg("");
      theClient0.getMaxConnectionMsg();
      theClient0.getClientEventHandler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte) (-52);
      byteArray0[7] = (byte)0;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      theClient0.toString();
      theClient0.setMaxConnectionMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient0.getClientData();
      theClient0.getServer();
      CommandHandler commandHandler0 = new CommandHandler();
      CommandHandler commandHandler1 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler((byte)50);
      // Undeclared exception!
      try { 
        commandHandler1.handleCommand(nonBlockingClientHandler0, "@<'(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.qsadmin.CommandHandler", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1239058144637433
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientEventHandler();
      theClient0.getClientObjectHandler();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setMaxAuthTryMsg("");
      theClient0.getMaxAuthTryMsg();
      TheClient theClient1 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient1.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      TheClient theClient2 = new TheClient();
      theClient0.getClientCommandHandler();
      theClient2.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientBinaryHandler();
      theClient2.getClientWriteHandler();
      assertFalse(theClient2.getTrusted());
      assertTrue(theClient2.getCommunicationLogging());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      TheClient theClient1 = new TheClient();
      theClient0.setTimeout(1);
      Data data0 = new Data();
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getTimeout();
      theClient1.getClientWriteHandler();
      theClient0.getAuthenticator();
      assertEquals(1, theClient0.getTimeout());
      
      theClient1.getAuthenticator();
      theClient1.getClientWriteHandler();
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SocketOption<String> socketOption0 = (SocketOption<String>) mock(SocketOption.class, new ViolatedAssumptionAnswer());
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(5255);
      theClient0.getMaxAuthTry();
      theClient0.getSocketChannel();
      assertEquals(5255, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("#=hr[<O<5I>=");
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("{TheClient ", 9876);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      theClient0.setSocket(mockSocket0);
      theClient0.getSocket();
      System.setCurrentTimeMillis(9876);
      MockSocket mockSocket1 = new MockSocket(proxy0);
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getSocket();
      theClient0.getSocketChannel();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.052128844641025
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.setTimeoutMsg("");
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getTimeoutMsg();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.toString();
      theClient0.getTimeoutMsg();
      theClient0.toString();
      theClient0.setMaxAuthTryMsg("+OK Server Restarted");
      theClient0.setMaxAuthTryMsg("");
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setMaxAuthTryMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      System.setCurrentTimeMillis(2L);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientEventHandler();
      theClient0.getClientObjectHandler();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("org.quickserver.net.server.TheClient", 2270);
      assertEquals("org.quickserver.net.server.TheClient", inetSocketAddress0.getHostString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.879376754279852
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientEventHandler();
      theClient0.getClientObjectHandler();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      ClientCommandHandler clientCommandHandler0 = theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler(clientCommandHandler0);
      theClient0.getClientWriteHandler();
      theClient0.getClientObjectHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.434635057597813
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientBinaryHandler();
      theClient0.getServer();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientEventHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setMaxAuthTry((-711));
      theClient0.setTrusted(true);
      theClient0.getClientCommandHandler();
      theClient0.setTimeoutMsg("EJ}Dr5+C'?:_S(.");
      Data data0 = new Data();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientWriteHandler();
      TheClient theClient1 = new TheClient();
      theClient1.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getServer();
      theClient0.getTrusted();
      theClient1.getClientWriteHandler();
      theClient1.getClientExtendedEventHandler();
      theClient1.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      assertEquals((-711), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.196939089991099
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.setTimeout((-2166));
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.getTimeout();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.getClientAuthenticationHandler();
      org.quickserver.net.qsadmin.Authenticator authenticator1 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator1);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.getTimeoutMsg();
      theClient0.toString();
      TheClient theClient1 = new TheClient();
      theClient1.getClientCommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      TheClient theClient2 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient1.setClientObjectHandler((ClientObjectHandler) null);
      theClient2.getClientWriteHandler();
      theClient0.getTimeoutMsg();
      theClient1.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      assertEquals((-2166), theClient0.getTimeout());
      
      theClient2.getClientWriteHandler();
      assertTrue(theClient2.getCommunicationLogging());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1262368167947456
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getSocket();
      theClient0.getClientData();
      theClient0.setTimeout(32);
      theClient0.setTimeout((-1128));
      theClient0.getClientWriteHandler();
      theClient0.getAuthenticator();
      theClient0.getClientWriteHandler();
      theClient0.getClientCommandHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      assertEquals((-1128), theClient0.getTimeout());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.260960815263037
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientAuthenticationHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient1.setClientEventHandler(commandHandler0);
      ClientEvent clientEvent0 = theClient0.getClientEvent();
      theClient0.setClientEvent(clientEvent0);
      org.quickserver.net.qsadmin.Authenticator authenticator1 = new org.quickserver.net.qsadmin.Authenticator();
      theClient1.getMaxConnectionMsg();
      TheClient theClient2 = new TheClient();
      theClient2.getMaxConnectionMsg();
      theClient2.getClientObjectHandler();
      System.setCurrentTimeMillis((-1L));
      theClient2.getAuthenticator();
      theClient2.getSocketChannel();
      theClient1.getClientWriteHandler();
      theClient1.getClientExtendedEventHandler();
      assertFalse(theClient1.getTrusted());
      assertTrue(theClient1.getCommunicationLogging());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setSocketChannel((SocketChannel) null);
      MockInetSocketAddress.createUnresolved("^hVS+}f", 2309);
      SocketChannel.open();
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[1];
      int int0 = 1820;
      // Undeclared exception!
      try { 
        ByteBuffer.wrap((byte[]) null, 1820, 2309);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.048820325203473
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      ClientEvent clientEvent0 = ClientEvent.READ;
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientAuthenticationHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getClientEventHandler();
      TheClient theClient1 = new TheClient();
      theClient1.setMaxAuthTryMsg("9)%e+y@q1v3r%'\"ELp");
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient1.getMaxAuthTryMsg();
      System.setCurrentTimeMillis(547L);
      theClient1.getClientExtendedEventHandler();
      assertFalse(theClient1.getTrusted());
      assertTrue(theClient1.getCommunicationLogging());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = theClient0.getTimeout();
      assertEquals(0, int0);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClientEvent clientEvent0 = ClientEvent.MAX_CON;
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-4768));
      int int0 = theClient0.getMaxAuthTry();
      assertEquals((-4768), int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-61);
      byteArray1[1] = (byte) (-61);
      byteArray1[2] = (byte) (-61);
      byteArray1[3] = (byte) (-61);
      byteArray1[5] = (byte) (-61);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      TheClient theClient0 = new TheClient();
      int int0 = theClient0.getMaxAuthTry();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getCommunicationLogging();
      CommandHandler commandHandler0 = new CommandHandler();
  }
}
