/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 04:31:49 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.SyncFailedException;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player(2209);
      player0.reset(true);
      player0.setMoney((-32.88865F));
      float float0 = player0.getMoney();
      assertEquals((-32.88865F), float0, 0.01F);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.5334809174528377
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player();
      player0.remove((Party) null);
      Player player1 = new Player((byte)1);
      player1.setJoinOK(player0, true);
      player1.setDead();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)1;
      player1.unpack(byteArray0);
      player1.setY(1323.4F);
      player0.getZ();
      player0.getZ();
      int int0 = Packable.GAME_EVENT;
      player0.setMoney(4419.0938F);
      player0.pack();
      Player player2 = new Player((-529), (String) null, (String) null, 6961, (byte)0);
      player2.setJoinOK(player1, true);
      player2.setDead();
      Player player3 = new Player();
      player3.getX();
      player0.reset(true);
      player1.getX();
      player3.getIP();
      Player player4 = new Player((short)4919);
      player1.isJoinOK(player3, true);
      assertEquals(1323.4F, player1.getY(), 0.01F);
      
      int int1 = player2.getStrength();
      assertEquals(0, int1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.6153823448119353
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead((long) (short)4919, true);
      player0.remove((Party) null);
      Player player1 = new Player((byte)1);
      player1.setJoinOK(player0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)1;
      player1.unpack(byteArray0);
      player1.setX((short)4919);
      player1.setY(1323.4F);
      player0.getZ();
      player0.getZ();
      player1.gangStrength();
      player0.pack();
      player1.setZ(0.0F);
      Player player2 = new Player((-529), (String) null, (String) null, 6961, (byte)0);
      player2.setDead();
      Player player3 = new Player();
      player3.getX();
      player0.reset(true);
      Player player4 = new Player((byte)1, "", 29440);
      player1.isJoinOK(player0, false);
      player4.getX();
      player4.setConnected(false);
      player4.getZ();
      player4.isConnected();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      player2.unpack(dataInputStream0);
      assertEquals(1392409281320L, player2.getTimeOfDeath());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.614961911765898
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead(2536L, true);
      player0.remove((Party) null);
      Player player1 = new Player((byte)1);
      player1.setJoinOK(player0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)1;
      player1.unpack(byteArray0);
      player1.setX((short)4919);
      player1.setY(1323.4F);
      player0.getZ();
      player0.getZ();
      player1.gangStrength();
      player0.pack();
      player1.setZ(0.0F);
      Player player2 = new Player((-529), (String) null, (String) null, 6961, (byte)0);
      player2.setDead();
      Player player3 = new Player();
      player3.getX();
      player0.reset(true);
      Player player4 = new Player((byte)1, "", 29440);
      player1.isJoinOK(player0, false);
      assertEquals(1323.4F, player1.getY(), 0.01F);
      
      player0.type();
      player2.gangStrength();
      float float0 = player4.getMoney();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.369127397579941
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead(44L, true);
      player0.remove((Party) null);
      player0.setZ(44L);
      Player player1 = new Player((byte)1);
      player1.setJoinOK(player0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)1;
      player1.setMoney(0.0F);
      player1.setX((short)4919);
      player1.setY(1323.4F);
      player0.getZ();
      float float0 = Player.TOLERANCE;
      player1.gangStrength();
      player0.setMoney(4419.0938F);
      player0.pack();
      player0.setDead(288L);
      player0.setDead(2893L);
      player1.setDead();
      player0.getX();
      player1.isJoinOK(player0, true);
      player1.type();
      player0.gangStrength();
      float float1 = player1.getMoney();
      assertEquals(1323.4F, player1.getY(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      System.setCurrentTimeMillis((-1L));
      Player player0 = new Player(1, "module.ModuleBrowserDialog$ModuleFilter", (String) null, 777);
      player0.getName();
      int int0 = player0.gangStrength();
      int int1 = player0.getStrength();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(777, player0.getPictureId());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gui.ModuleBrowserDialog$ModuleFilter");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Player player0 = new Player((byte)61);
      player0.gangBoss();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.370021585359375
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead(2536L, true);
      player0.remove(player0);
      Player player1 = new Player((byte) (-82));
      player1.setJoinOK(player0, true);
      player1.setX((short)4919);
      player1.setY(1323.4F);
      player0.getZ();
      player0.getZ();
      player1.gangStrength();
      player0.pack();
      Player player2 = new Player((-529), (String) null, (String) null, 6961, (byte) (-82));
      player2.setY(1145.5333F);
      player2.setDead();
      Player player3 = new Player();
      player3.setX((-1.0F));
      player3.getX();
      player0.reset(true);
      Player player4 = new Player((byte) (-82), "", 29440);
      player4.getSubparty();
      player1.isJoinOK(player0, false);
      assertEquals(0L, player0.getTimeOfDeath());
      
      float float0 = player4.getX();
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(572L);
      Player player0 = new Player(10, (String) null, (String) null, 1, 1);
      player0.getIP();
      assertEquals(1, player0.getStrength());
      
      Player player1 = new Player((-3507));
      assertEquals("Player-3507", player1.getName());
      
      Player player2 = new Player(1);
      assertEquals("0.0.0.0", player2.getIP());
      assertEquals(0, player2.getPictureId());
      
      Player player3 = new Player(10, "&i", (String) null, Integer.MAX_VALUE);
      int int0 = player3.type();
      assertEquals(0L, player3.getTimeOfDeath());
      assertEquals(1, player3.getStrength());
      assertEquals(5, int0);
      assertTrue(player3.isConnected());
      assertEquals(0.0F, player3.getY(), 0.01F);
      assertEquals(10.0F, player3.getX(), 0.01F);
      assertEquals(Integer.MAX_VALUE, player3.getPictureId());
      assertFalse(player3.isDead());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(0, "ZQ`~|}[", (String) null, 1, (byte) (-98));
      int int0 = player0.gangStrength();
      assertTrue(player0.isConnected());
      assertEquals((-98), int0);
      assertEquals(1, player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis(316L);
      Player player0 = new Player(0, "", (String) null, 0);
      Player player1 = (Player)player0.gangBoss();
      Player player2 = new Player((short)4919, "", 55);
      player0.setMoney(0.0F);
      player2.setY((-569.8F));
      player2.getStrength();
      player2.getY();
      player2.type();
      player2.type();
      player1.getMoney();
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis(572L);
      Player player0 = new Player(1765, "|5uDkjT%wm&f6i", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 5889, (-760));
      player0.getStrength();
      System.setCurrentTimeMillis((-760));
      int int0 = player0.getStrength();
      assertEquals((-760), int0);
      assertEquals("|5uDkjT%wm&f6i", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(5889, player0.getPictureId());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player();
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player0 = new Player((byte)77, "", "", 19789);
      Player player1 = new Player(19789);
      player0.setJoinOK(player1, false);
      player0.isJoinOK(player1, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor0);
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 5);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, pushbackInputStream1);
      sequenceInputStream1.markSupported();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, pushbackInputStream1);
      sequenceInputStream2.available();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      pipedInputStream0.close();
      sequenceInputStream0.skip(599L);
      PipedInputStream pipedInputStream1 = null;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      DataInputStream dataInputStream1 = new DataInputStream(pushbackInputStream1);
      DataInputStream dataInputStream2 = new DataInputStream(sequenceInputStream2);
      sequenceInputStream1.markSupported();
      Player player0 = new Player((-44), "", (String) null, 10, (-1));
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.4239867850741974
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player();
      player0.remove((Party) null);
      Player player1 = new Player();
      player1.setJoinOK(player0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      player1.unpack(byteArray0);
      player1.setMoney(0.0F);
      player1.setX((short)4919);
      player1.setY(1323.4F);
      player0.getZ();
      player0.getZ();
      player1.gangStrength();
      player0.setMoney(4419.0938F);
      player0.pack();
      Player player2 = new Player();
      player2.setDead((long) 1, true);
      player1.setDead();
      player2.getX();
      player1.isJoinOK(player0, true);
      player2.setDead((long) (byte)1);
      player1.type();
      player2.pack();
      float float0 = player0.getMoney();
      assertEquals(4419.0938F, float0, 0.01F);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player0 = new Player(1472, "E>d@>4F-O-z1", "E>d@>4F-O-z1", 1472);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte) (-70);
      byteArray0[8] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1142), 1281);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.4762983625511032
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player();
      player0.remove((Party) null);
      Player player1 = new Player((byte)1);
      player1.setJoinOK(player0, true);
      player1.setDead();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)1;
      player1.unpack(byteArray0);
      player1.setX((short)4919);
      player1.setY(1323.4F);
      player0.getZ();
      player0.getZ();
      int int0 = Packable.GAME_EVENT;
      player0.setMoney(4419.0938F);
      byte[] byteArray1 = player0.pack();
      Player player2 = new Player((-529), (String) null, (String) null, 6961, (byte)0);
      player2.setDead();
      Player player3 = new Player();
      player3.getX();
      player1.getX();
      player3.getIP();
      Player player4 = new Player((short)4919, "0.0.0.0", (String) null, (byte)1, (short)4919);
      player1.isJoinOK(player3, true);
      System.setCurrentTimeMillis(1L);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player1.unpack(dataInputStream0);
      assertEquals(4419.0938F, player0.getMoney(), 0.01F);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3042644954097065
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player((byte) (-98));
      player0.setX(0.0F);
      player0.setY((byte)3);
      player0.getZ();
      player0.getZ();
      player0.gangStrength();
      player0.setMoney(0.0F);
      assertEquals(3.0F, player0.getY(), 0.01F);
      
      Player player1 = new Player(2376, "V`x#q=(%(", "V`x#q=(%(", (-633));
      player1.pack();
      Player player2 = new Player((-1185), "", (String) null, (byte)3, 1);
      Player player3 = new Player();
      player2.getX();
      player1.reset(true);
      player3.getX();
      player2.getIP();
      Player player4 = new Player(6961);
      player1.isJoinOK(player3, true);
      Player player5 = new Player(997);
      player5.type();
      int int0 = player1.gangStrength();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.363279396743392
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead(2536L, true);
      player0.remove(player0);
      Player player1 = new Player((byte) (-82));
      player1.setX((short)4919);
      player1.setY(1323.4F);
      player0.getZ();
      player0.getZ();
      player1.gangStrength();
      Player player2 = new Player((-529), (String) null, (String) null, 6961, (byte) (-82));
      player2.setDead();
      Player player3 = new Player((short)4919, (String) null, (String) null, (short)4919);
      player3.getX();
      player0.reset(false);
      Player player4 = new Player((byte) (-82), "", 29440);
      player4.setX(0.0F);
      player1.isJoinOK(player0, false);
      player4.getX();
      player2.type();
      player0.pack();
      player0.type();
      System.setCurrentTimeMillis(6L);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player(2105, "sJ\"+u", "sJ\"+u", 2105);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-23);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3317425563431042
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead(2536L, true);
      Player player1 = new Player((byte) (-74));
      player1.setJoinOK(player0, true);
      player1.setX((short)4919);
      Player player2 = new Player((short)4919, "", "_# +@rY_JhjpCXve", (byte) (-74), (byte) (-74));
      player1.head = (Party) player2;
      player1.setY((short)4919);
      player0.getZ();
      byte[] byteArray0 = player0.pack();
      Player player3 = new Player((-529), (String) null, (String) null, 6961, (byte) (-74));
      player3.unpack(byteArray0);
      player1.setDead();
      Player player4 = new Player();
      player4.remove(player0);
      player4.getX();
      Player player5 = new Player((byte) (-74), "", 29440);
      player1.isJoinOK(player0, false);
      player5.getX();
      player5.isJoinOK(player3, true);
      assertEquals((-1), player3.getId());
      assertEquals("Player-1", player3.getName());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.3039214422364647
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player((-2221), ".*[.]class$", (-2221));
      player0.gangStrength();
      player0.type();
      player0.setDead((long) (-2221));
      player0.setMoney(5);
      player0.remove(player0);
      player0.type();
      player0.getPictureId();
      Player player1 = new Player(5);
      player1.setDead();
      Player player2 = new Player(4919);
      player1.isJoinOK(player2, false);
      Player player3 = new Player((-4130), ".*[.]class$", "module.ModuleBrowserDialog$ModuleFilter", (-5888), (-5888));
      player3.gangStrength();
      player2.getStrength();
      player0.getZ();
      assertEquals((-2221L), player0.getTimeOfDeath());
      
      player2.getY();
      player3.getX();
      player3.getStrength();
      float float0 = player2.getMoney();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.4700338442560503
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead(2536L, true);
      player0.remove((Party) null);
      Player player1 = new Player((byte)1);
      player1.setJoinOK(player0, true);
      player1.setX((short)4919);
      player1.setY(1323.4F);
      player0.getZ();
      player0.getZ();
      player1.gangStrength();
      player0.setMoney(4419.0938F);
      player0.pack();
      Player player2 = new Player((byte)1, (String) null, (String) null, 6961, (byte)6);
      player2.setDead();
      Player player3 = new Player();
      player3.getX();
      player0.reset(true);
      Player player4 = new Player((byte)6, "", 29440);
      player2.isDead();
      assertEquals(1392409281320L, player2.getTimeOfDeath());
      
      float float0 = Player.MOVE_DISTANCE;
      int int0 = player3.gangStrength();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player(447);
      Party party0 = new Party((-1280));
      player0.add(party0);
      player0.setX((-172.6906F));
      Player player1 = new Player((-1280));
      boolean boolean0 = false;
      player0.setJoinOK(player1, false);
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.3694463768462892
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead(2536L, true);
      player0.remove(player0);
      Player player1 = new Player((byte) (-82));
      player1.setJoinOK(player0, true);
      player1.setX((short)4919);
      player1.setY(1323.4F);
      player0.getZ();
      player1.add(player0);
      player0.getZ();
      player1.gangStrength();
      player0.pack();
      Player player2 = new Player((-529), (String) null, (String) null, 6961, (byte) (-82));
      player2.setDead();
      Player player3 = new Player();
      player3.getX();
      player0.reset(true);
      Player player4 = new Player((byte) (-82), "", 29440);
      player1.isJoinOK(player0, false);
      assertEquals(1323.4F, player1.getY(), 0.01F);
      
      float float0 = player4.getX();
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 14);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, pushbackInputStream1);
      sequenceInputStream1.markSupported();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, pushbackInputStream1);
      sequenceInputStream2.available();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      pipedInputStream0.close();
      sequenceInputStream0.skip(599L);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      DataInputStream dataInputStream1 = new DataInputStream((InputStream) null);
      DataInputStream dataInputStream2 = new DataInputStream(sequenceInputStream2);
      Player player0 = new Player(1104, "`auxlCU(;y[f#'%K4", "%D,>oj-U^ K5Td57", 14);
      boolean boolean0 = player0.unpack(dataInputStream2);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("`auxlCU(;y[f#'%K4", player0.getIP());
      assertEquals(14, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player((-3328));
      player0.setZ((-1041.37F));
      player0.setY((-3328));
      player0.setDead((long) (-3328));
      player0.getTimeOfDeath();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, (short)4919);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.198959292011301
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player(4919, "C|g", "", 4919, 4919);
      LinkedList<Party> linkedList0 = new LinkedList<Party>();
      player0.setZ(4919);
      player0.getX();
      player0.getName();
      player0.setDead(0L, true);
      Player player1 = new Player(1);
      player0.remove(player1);
      player0.setY(767.9F);
      Player player2 = new Player(600, "", "", 600);
      Player player3 = new Player(1, "C|g", "", 1);
      player3.add(player0);
      player2.setDead((long) (short)4919);
      player3.setY(0.1F);
      player0.type();
      player2.toString();
      player1.isDead();
      Player player4 = new Player();
      player4.setDead(0L, false);
      player3.toString();
      assertEquals(0.1F, player3.getY(), 0.01F);
      
      float float0 = player4.getMoney();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.051435843948024
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player(4919, "C|g", "", 4919, 4919);
      player0.getSubparty();
      player0.setZ(4919);
      player0.getX();
      player0.getName();
      player0.setDead(0L, true);
      Player player1 = new Player(1);
      player0.remove(player1);
      player0.setY(767.9F);
      Player player2 = new Player(600, "", "", 600);
      player2.setConnected(false);
      player0.isJoinOK(player2, false);
      player2.setDead((-2998L));
      // Undeclared exception!
      try { 
        player1.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "module.ModuleBrowserDialog$ModuleFilter");
      Player player0 = new Player(1472, "E>d@>4F-O-z1", "E>d@>4F-O-z1", 1472);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte) (-70);
      byteArray0[8] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 1281);
      byteArrayInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gui.ModuleBrowserDialog$ModuleFilter");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Player player0 = new Player();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.75012938226178
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      System.setCurrentTimeMillis(316L);
      Player player0 = new Player(0, "", (String) null, 0);
      player0.gangBoss();
      int int0 = player0.type();
      assertEquals(5, int0);
      
      int int1 = player0.getPictureId();
      assertEquals(0, int1);
      
      Player player1 = new Player((-1658));
      int int2 = player1.gangStrength();
      assertEquals(1, int2);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#&Gn}}>hr>hLx");
      float float0 = player0.getZ();
      assertEquals(0.0F, float0, 0.01F);
      
      player0.setY(0);
      player1.getY();
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(0, player1.getPictureId());
      assertEquals("Player-1658", player1.getName());
      
      float float1 = player0.getX();
      assertEquals(10.0F, float1, 0.01F);
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player(2105, "sJ\"+u", "sJ\"+u", 2105);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)103;
      byteArray0[5] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      int int0 = player0.getPictureId();
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(2105, int0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.579350042535718
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead(2536L, true);
      player0.remove((Party) null);
      Player player1 = new Player((byte)1);
      player1.setJoinOK(player0, true);
      player1.setDead();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)1;
      player1.unpack(byteArray0);
      player1.setX((short)4919);
      player1.setY(1323.4F);
      player1.getY();
      player0.getZ();
      int int0 = Packable.GAME_STATE;
      player0.setMoney(4419.0938F);
      player0.pack();
      Player player2 = new Player((-529), (String) null, (String) null, 6961, (byte)6);
      Player player3 = new Player();
      player3.getX();
      player0.reset(true);
      player1.getX();
      player3.getIP();
      Player player4 = new Player((short)4919);
      player1.isJoinOK(player3, true);
      assertTrue(player1.isDead());
      
      int int1 = Packable.UNDEFINED;
      player3.pack();
      assertEquals(0.0F, player3.getY(), 0.01F);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.363279396743392
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      System.setCurrentTimeMillis(572L);
      Player player0 = new Player(6913, (String) null, (String) null, 6913, 6913);
      player0.setMoney(10.0F);
      player0.setX(10.0F);
      Player player1 = new Player();
      player1.setY(0.0F);
      player0.getZ();
      player1.getZ();
      player1.gangStrength();
      player1.setMoney(0.0F);
      player1.pack();
      Player player2 = new Player((-2), "", "zv$rZ3n1T+Yu<V", 2971, 2971);
      player2.setDead((long) (-2), false);
      player0.setDead();
      player0.getX();
      player0.isJoinOK(player2, true);
      Player player3 = new Player();
      player2.pack();
      player1.getName();
      System.setCurrentTimeMillis((short)4919);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player();
      float float0 = player0.getY();
      assertEquals(0.0F, float0, 0.01F);
      
      player0.isBoss();
      float float1 = player0.getX();
      assertEquals(10.0F, float1, 0.01F);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = player0.getIP();
      assertEquals("0.0.0.0", string0);
      assertFalse(player0.isDead());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("Player-1", player0.toString());
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.51675904592174
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player();
      player0.remove(player0);
      Player player1 = new Player((byte)1);
      player1.setJoinOK(player0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)1;
      player1.unpack(byteArray0);
      player1.setMoney(0.0F);
      player1.setX((short)4919);
      player0.getZ();
      player0.getZ();
      player1.gangStrength();
      player0.setMoney(4419.0938F);
      byte[] byteArray1 = player0.pack();
      Player player2 = new Player((short)4919, "", (String) null, 17, 5);
      player1.setDead();
      player2.id = 12453;
      player2.getX();
      player1.isJoinOK(player0, true);
      player2.unpack(byteArray1);
      player1.type();
      player1.gangStrength();
      player2.toString();
      assertEquals(1, player2.getStrength());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.655227329111928
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead(2536L, true);
      player0.setZ(5554.17F);
      player0.remove(player0);
      Player player1 = new Player((byte)1);
      player1.setJoinOK(player0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)1;
      player1.unpack(byteArray0);
      player1.setX((short)4919);
      player1.setY(1323.4F);
      player0.getZ();
      player0.getZ();
      player0.gangStrength();
      player0.setMoney(4419.0938F);
      player1.setMoney((byte)1);
      player0.pack();
      Player player2 = new Player(1, (String) null, (String) null, 5, 5);
      player0.setDead();
      player2.getX();
      player0.isJoinOK(player2, true);
      player1.type();
      assertEquals(1323.4F, player1.getY(), 0.01F);
      
      player2.gangStrength();
      player2.toString();
      assertEquals(5, player2.getStrength());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player(829, "gui.ModuleBrowserDialog$ModuleFilter", "gui.ModuleBrowserDialog$ModuleFilter", 0);
      player0.getTimeOfDeath();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)5;
      player0.getPictureId();
      player0.setDead();
      player0.getTimeOfDeath();
      player0.getTimeOfDeath();
      player0.reset(false);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      System.setCurrentTimeMillis(572L);
      Player player0 = new Player(0, "G457?=AOa!*$>.K:", 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("G457?=AOa!*$>.K:");
      Locale locale0 = Locale.TAIWAN;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "G457?=AOa!*$>.K:", (Object[]) null);
      printStream0.append((CharSequence) "G457?=AOa!*$>.K:");
      mockPrintStream0.println();
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      player0.pack(dataOutputStream0);
      player0.pack();
      player0.pack();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player(2105, "sJ\"+u", "sJ\"+u", 2105);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-23);
      byteArray1[0] = (byte)0;
      byteArray1[2] = (byte) (-105);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bMd$.W");
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.readBoolean();
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 1);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(pushbackInputStream0);
      Player player0 = new Player(836, "sJ\"+u", "sJ\"+u", 836, 2105);
      player0.pack();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream2 = new DataInputStream(pushbackInputStream0);
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      System.setCurrentTimeMillis(583L);
      Player player0 = new Player((-1), "G457?=AOa!*$>.K:", "G457?=AOa!*$>.K:", 0, (-2584));
      boolean boolean0 = player0.isConnected();
      assertFalse(player0.isDead());
      assertEquals((-2584), player0.getStrength());
      assertEquals(0, player0.getPictureId());
      assertTrue(boolean0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 10);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, pushbackInputStream1);
      sequenceInputStream1.markSupported();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, pushbackInputStream1);
      sequenceInputStream1.skip(0L);
      sequenceInputStream0.skip(599L);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream1);
      DataInputStream dataInputStream1 = new DataInputStream(sequenceInputStream2);
      Player player0 = new Player(10, "", (String) null, (-1));
      player0.reset(false);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(dataInputStream0, sequenceInputStream0);
      sequenceInputStream3.read();
      DataInputStream dataInputStream2 = new DataInputStream(pushbackInputStream0);
      try { 
        dataInputStream1.readLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }
}
