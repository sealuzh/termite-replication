/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 05:12:09 GMT 2019
 */

package org.exolab.jms.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.exolab.castor.xml.Marshaller;
import org.exolab.jms.config.ConnectionFactories;
import org.exolab.jms.config.ConnectionFactory;
import org.exolab.jms.config.QueueConnectionFactory;
import org.exolab.jms.config.TopicConnectionFactory;
import org.exolab.jms.config.XAConnectionFactory;
import org.exolab.jms.config.XAQueueConnectionFactory;
import org.exolab.jms.config.XATopicConnectionFactory;
import org.junit.runner.RunWith;
import org.xml.sax.ContentHandler;
import org.xml.sax.DTDHandler;
import org.xml.sax.SAXParseException;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConnectionFactories_ESTest extends ConnectionFactories_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      TopicConnectionFactory[] topicConnectionFactoryArray0 = new TopicConnectionFactory[5];
      connectionFactories0.setTopicConnectionFactory(topicConnectionFactoryArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TopicConnectionFactory topicConnectionFactory0 = new TopicConnectionFactory();
      connectionFactories0.setTopicConnectionFactory(0, topicConnectionFactory0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.exolab.jms.config.ConnectionFactories");
      unaryOperator0.apply(unaryOperator1);
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      XAConnectionFactory xAConnectionFactory0 = new XAConnectionFactory();
      connectionFactories0.addXAConnectionFactory(xAConnectionFactory0);
      Marshaller.enableDebug = false;
      connectionFactories0.getXAConnectionFactory(0);
      try { 
        connectionFactories0.getTopicConnectionFactory(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      XAQueueConnectionFactory xAQueueConnectionFactory0 = new XAQueueConnectionFactory();
      connectionFactories0.addXAQueueConnectionFactory(xAQueueConnectionFactory0);
      connectionFactories0.enumerateXATopicConnectionFactory();
      XAQueueConnectionFactory xAQueueConnectionFactory1 = new XAQueueConnectionFactory();
      connectionFactories0.setXAQueueConnectionFactory((int) (byte)0, xAQueueConnectionFactory1);
      assertEquals(0, connectionFactories0.getConnectionFactoryCount());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.196664918501384
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      ConnectionFactory[] connectionFactoryArray0 = new ConnectionFactory[1];
      ConnectionFactory connectionFactory0 = new ConnectionFactory();
      connectionFactoryArray0[0] = connectionFactory0;
      connectionFactories0.setConnectionFactory(connectionFactoryArray0);
      TopicConnectionFactory[] topicConnectionFactoryArray0 = new TopicConnectionFactory[1];
      TopicConnectionFactory topicConnectionFactory0 = new TopicConnectionFactory();
      topicConnectionFactoryArray0[0] = topicConnectionFactory0;
      connectionFactories0.setTopicConnectionFactory(topicConnectionFactoryArray0);
      connectionFactories0.isValid();
      int int0 = 1942;
      StringReader stringReader0 = new StringReader("OK:2Z]w8OU@Q!");
      try { 
        QueueConnectionFactory.unmarshal(stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Error : Content is not allowed in prolog.
         // Line : 1
         // Column : 1
         //
         verifyException("org.exolab.castor.xml.Unmarshaller", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.append((CharSequence) charBuffer0);
      XAConnectionFactory[] xAConnectionFactoryArray0 = new XAConnectionFactory[1];
      connectionFactories0.setXAConnectionFactory(xAConnectionFactoryArray0);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.close();
      connectionFactories0.getXAConnectionFactory();
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "", 1057, 35);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        connectionFactories0.marshal((Writer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'out' is null.
         //
         verifyException("org.exolab.castor.xml.Marshaller", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7842068034002128
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Object object0 = new Object();
      Predicate<Locale.LanguageRange> predicate0 = Predicate.isEqual(object0);
      ConnectionFactories connectionFactories1 = new ConnectionFactories();
      Locale.lookup(linkedList0, (Collection<Locale>) null);
      Predicate<Locale.LanguageRange> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Locale.LanguageRange> predicate2 = predicate1.and(predicate0);
      Predicate<Locale.LanguageRange> predicate3 = predicate2.negate();
      Predicate<Locale.LanguageRange> predicate4 = predicate0.or(predicate3);
      predicate2.negate();
      Predicate<Locale.LanguageRange> predicate5 = predicate2.and(predicate4);
      predicate5.or(predicate1);
      XAConnectionFactory xAConnectionFactory0 = new XAConnectionFactory();
      XAConnectionFactory[] xAConnectionFactoryArray0 = new XAConnectionFactory[4];
      XAConnectionFactory xAConnectionFactory1 = new XAConnectionFactory();
      xAConnectionFactoryArray0[0] = xAConnectionFactory1;
      xAConnectionFactoryArray0[1] = xAConnectionFactory0;
      xAConnectionFactoryArray0[2] = xAConnectionFactory0;
      xAConnectionFactoryArray0[3] = xAConnectionFactory0;
      connectionFactories1.setXAConnectionFactory(xAConnectionFactoryArray0);
      connectionFactories1.setXAConnectionFactory(3, xAConnectionFactory0);
      int int0 = 1206;
      try { 
        connectionFactories0.getXATopicConnectionFactory((-2218));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      FileSystemHandling.shouldAllThrowIOExceptions();
      XAConnectionFactory xAConnectionFactory0 = new XAConnectionFactory();
      XAQueueConnectionFactory xAQueueConnectionFactory0 = new XAQueueConnectionFactory();
      XAQueueConnectionFactory[] xAQueueConnectionFactoryArray0 = new XAQueueConnectionFactory[3];
      xAQueueConnectionFactoryArray0[0] = xAQueueConnectionFactory0;
      xAQueueConnectionFactoryArray0[2] = xAQueueConnectionFactory0;
      connectionFactories0.setXAQueueConnectionFactory(xAQueueConnectionFactoryArray0);
      connectionFactories0.getQueueConnectionFactory();
      boolean boolean0 = connectionFactories0.removeXAQueueConnectionFactory(xAQueueConnectionFactory0);
      assertEquals(2, connectionFactories0.getXAQueueConnectionFactoryCount());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 0;
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      QueueConnectionFactory queueConnectionFactory0 = new QueueConnectionFactory();
      connectionFactories0.addQueueConnectionFactory(queueConnectionFactory0);
      connectionFactories0.getQueueConnectionFactory(0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      StringWriter stringWriter0 = new StringWriter();
      char char0 = 'q';
      StringWriter stringWriter1 = stringWriter0.append('q');
      char[] charArray0 = new char[9];
      charArray0[0] = 'P';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = 'q';
      charArray0[4] = 'q';
      charArray0[5] = 'q';
      char char1 = 'e';
      // Undeclared exception!
      try { 
        stringWriter1.write((String) null, 3165, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl();
      locatorImpl1.getColumnNumber();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl1.setDocumentLocator(locatorImpl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl3.getContentHandler();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      QueueConnectionFactory[] queueConnectionFactoryArray0 = new QueueConnectionFactory[1];
      connectionFactories0.setQueueConnectionFactory(queueConnectionFactoryArray0);
      QueueConnectionFactory queueConnectionFactory0 = connectionFactories0.getQueueConnectionFactory(0);
      assertNull(queueConnectionFactory0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      XATopicConnectionFactory xATopicConnectionFactory0 = new XATopicConnectionFactory();
      XATopicConnectionFactory xATopicConnectionFactory1 = new XATopicConnectionFactory();
      XAConnectionFactory xAConnectionFactory0 = new XAConnectionFactory();
      XAConnectionFactory xAConnectionFactory1 = new XAConnectionFactory();
      XAConnectionFactory[] xAConnectionFactoryArray0 = new XAConnectionFactory[8];
      XAConnectionFactory xAConnectionFactory2 = new XAConnectionFactory();
      xAConnectionFactoryArray0[0] = xAConnectionFactory2;
      xAConnectionFactoryArray0[1] = xAConnectionFactory0;
      xAConnectionFactoryArray0[2] = xAConnectionFactory0;
      xAConnectionFactoryArray0[3] = xAConnectionFactory0;
      xAConnectionFactoryArray0[4] = xAConnectionFactory0;
      xAConnectionFactoryArray0[5] = xAConnectionFactory0;
      xAConnectionFactoryArray0[6] = xAConnectionFactory1;
      xAConnectionFactoryArray0[7] = xAConnectionFactory0;
      connectionFactories0.setXAConnectionFactory(xAConnectionFactoryArray0);
      boolean boolean0 = connectionFactories0.removeXAConnectionFactory(xAConnectionFactory2);
      assertEquals(7, connectionFactories0.getXAConnectionFactoryCount());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      XAConnectionFactory xAConnectionFactory0 = new XAConnectionFactory();
      XAConnectionFactory xAConnectionFactory1 = new XAConnectionFactory();
      XAConnectionFactory[] xAConnectionFactoryArray0 = new XAConnectionFactory[7];
      xAConnectionFactoryArray0[0] = xAConnectionFactory1;
      xAConnectionFactoryArray0[1] = xAConnectionFactory1;
      xAConnectionFactoryArray0[2] = xAConnectionFactory1;
      xAConnectionFactoryArray0[6] = xAConnectionFactory0;
      xAConnectionFactoryArray0[4] = xAConnectionFactory0;
      xAConnectionFactoryArray0[5] = xAConnectionFactory0;
      QueueConnectionFactory queueConnectionFactory0 = new QueueConnectionFactory();
      connectionFactories0.addQueueConnectionFactory((int) (byte)0, queueConnectionFactory0);
      int int0 = connectionFactories0.getQueueConnectionFactoryCount();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Predicate<Locale.LanguageRange> predicate0 = Predicate.isEqual((Object) xMLFilterImpl0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Locale.LanguageRange> predicate4 = predicate0.or(predicate3);
      Predicate<Locale.LanguageRange> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate1.negate();
      predicate0.and(predicate4);
      Predicate<Locale.LanguageRange> predicate7 = predicate5.or(predicate3);
      Predicate<Locale.LanguageRange> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate6.negate();
      Predicate<Locale.LanguageRange> predicate10 = predicate8.negate();
      Predicate<Locale.LanguageRange> predicate11 = predicate10.and(predicate0);
      Predicate<Locale.LanguageRange> predicate12 = predicate11.or(predicate5);
      Predicate<Object> predicate13 = predicate9.and(predicate1);
      Predicate<Object> predicate14 = predicate2.or(predicate2);
      Predicate<Locale.LanguageRange> predicate15 = predicate12.or(predicate13);
      Predicate<Object> predicate16 = predicate9.or(predicate14);
      Predicate<Object> predicate17 = predicate16.and(predicate6);
      predicate15.and(predicate17);
      Predicate<Locale.LanguageRange> predicate18 = predicate8.or(predicate15);
      predicate8.or(predicate5);
      Predicate<Object> predicate19 = predicate6.negate();
      predicate8.and(predicate1);
      predicate4.negate();
      predicate6.negate();
      Predicate<Object> predicate20 = Predicate.isEqual((Object) predicate13);
      predicate14.negate();
      predicate19.and(predicate20);
      predicate8.negate();
      predicate13.negate();
      predicate18.negate();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      XAQueueConnectionFactory[] xAQueueConnectionFactoryArray0 = new XAQueueConnectionFactory[2];
      connectionFactories0.setXAQueueConnectionFactory(xAQueueConnectionFactoryArray0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      int int0 = connectionFactories0.getXAQueueConnectionFactoryCount();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4993646124305886
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      TopicConnectionFactory[] topicConnectionFactoryArray0 = new TopicConnectionFactory[1];
      connectionFactories0.setTopicConnectionFactory(topicConnectionFactoryArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.lookup(linkedList0, (Collection<Locale>) null);
      ConnectionFactories connectionFactories1 = new ConnectionFactories();
      connectionFactories0.getTopicConnectionFactory();
      assertEquals(1, connectionFactories0.getTopicConnectionFactoryCount());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      XATopicConnectionFactory xATopicConnectionFactory0 = new XATopicConnectionFactory();
      XATopicConnectionFactory[] xATopicConnectionFactoryArray0 = new XATopicConnectionFactory[13];
      xATopicConnectionFactoryArray0[0] = xATopicConnectionFactory0;
      XATopicConnectionFactory xATopicConnectionFactory1 = new XATopicConnectionFactory();
      xATopicConnectionFactoryArray0[1] = xATopicConnectionFactory1;
      xATopicConnectionFactoryArray0[3] = xATopicConnectionFactory0;
      xATopicConnectionFactoryArray0[1] = xATopicConnectionFactory0;
      xATopicConnectionFactoryArray0[6] = xATopicConnectionFactory0;
      connectionFactories0.setXATopicConnectionFactory(xATopicConnectionFactoryArray0);
      connectionFactories0.getXATopicConnectionFactory();
      assertEquals(13, connectionFactories0.getXATopicConnectionFactoryCount());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3558258304206885
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      XAQueueConnectionFactory xAQueueConnectionFactory0 = new XAQueueConnectionFactory();
      XATopicConnectionFactory xATopicConnectionFactory0 = new XATopicConnectionFactory();
      XATopicConnectionFactory[] xATopicConnectionFactoryArray0 = new XATopicConnectionFactory[13];
      xATopicConnectionFactoryArray0[0] = xATopicConnectionFactory0;
      XATopicConnectionFactory xATopicConnectionFactory1 = new XATopicConnectionFactory();
      xATopicConnectionFactoryArray0[1] = xATopicConnectionFactory1;
      xATopicConnectionFactoryArray0[2] = xATopicConnectionFactory0;
      xATopicConnectionFactoryArray0[3] = xATopicConnectionFactory0;
      xATopicConnectionFactoryArray0[5] = xATopicConnectionFactory0;
      connectionFactories0.clearTopicConnectionFactory();
      xATopicConnectionFactoryArray0[6] = xATopicConnectionFactory0;
      xATopicConnectionFactoryArray0[7] = xATopicConnectionFactory0;
      connectionFactories0.setXATopicConnectionFactory(xATopicConnectionFactoryArray0);
      connectionFactories0.getQueueConnectionFactoryCount();
      connectionFactories0.removeXATopicConnectionFactory(xATopicConnectionFactory0);
      XAQueueConnectionFactory[] xAQueueConnectionFactoryArray0 = new XAQueueConnectionFactory[9];
      XAQueueConnectionFactory xAQueueConnectionFactory1 = new XAQueueConnectionFactory();
      xAQueueConnectionFactoryArray0[0] = xAQueueConnectionFactory1;
      xAQueueConnectionFactoryArray0[1] = xAQueueConnectionFactory0;
      xAQueueConnectionFactoryArray0[2] = xAQueueConnectionFactory0;
      xAQueueConnectionFactoryArray0[3] = xAQueueConnectionFactory0;
      xAQueueConnectionFactoryArray0[4] = xAQueueConnectionFactory0;
      xAQueueConnectionFactoryArray0[5] = xAQueueConnectionFactory0;
      xAQueueConnectionFactoryArray0[6] = xAQueueConnectionFactory0;
      xAQueueConnectionFactoryArray0[7] = xAQueueConnectionFactory0;
      xAQueueConnectionFactoryArray0[8] = xAQueueConnectionFactory0;
      connectionFactories0.setXAQueueConnectionFactory(xAQueueConnectionFactoryArray0);
      connectionFactories0.getQueueConnectionFactory();
      assertEquals(9, connectionFactories0.getXAQueueConnectionFactoryCount());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      XATopicConnectionFactory xATopicConnectionFactory0 = new XATopicConnectionFactory();
      XATopicConnectionFactory[] xATopicConnectionFactoryArray0 = new XATopicConnectionFactory[8];
      XATopicConnectionFactory xATopicConnectionFactory1 = new XATopicConnectionFactory();
      xATopicConnectionFactoryArray0[1] = xATopicConnectionFactory1;
      xATopicConnectionFactoryArray0[2] = xATopicConnectionFactory0;
      xATopicConnectionFactoryArray0[4] = xATopicConnectionFactory0;
      xATopicConnectionFactoryArray0[2] = xATopicConnectionFactory0;
      xATopicConnectionFactoryArray0[6] = xATopicConnectionFactory0;
      xATopicConnectionFactoryArray0[7] = xATopicConnectionFactory0;
      connectionFactories0.setXATopicConnectionFactory(xATopicConnectionFactoryArray0);
      int int0 = connectionFactories0.getXATopicConnectionFactoryCount();
      assertEquals(8, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      QueueConnectionFactory queueConnectionFactory0 = new QueueConnectionFactory();
      connectionFactories0.removeQueueConnectionFactory(queueConnectionFactory0);
      int int0 = 0;
      try { 
        connectionFactories0.getXAQueueConnectionFactory(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      QueueConnectionFactory queueConnectionFactory0 = new QueueConnectionFactory();
      ConnectionFactory connectionFactory0 = new ConnectionFactory();
      ConnectionFactory connectionFactory1 = new ConnectionFactory();
      ConnectionFactory[] connectionFactoryArray0 = new ConnectionFactory[4];
      connectionFactoryArray0[0] = connectionFactory1;
      connectionFactoryArray0[1] = connectionFactory0;
      connectionFactoryArray0[2] = connectionFactory0;
      XAConnectionFactory xAConnectionFactory0 = new XAConnectionFactory();
      XAConnectionFactory xAConnectionFactory1 = new XAConnectionFactory();
      XAQueueConnectionFactory xAQueueConnectionFactory0 = new XAQueueConnectionFactory();
      XAQueueConnectionFactory[] xAQueueConnectionFactoryArray0 = new XAQueueConnectionFactory[7];
      xAQueueConnectionFactoryArray0[0] = xAQueueConnectionFactory0;
      xAQueueConnectionFactoryArray0[1] = xAQueueConnectionFactory0;
      xAQueueConnectionFactoryArray0[2] = xAQueueConnectionFactory0;
      xAQueueConnectionFactoryArray0[3] = xAQueueConnectionFactory0;
      QueueConnectionFactory[] queueConnectionFactoryArray0 = new QueueConnectionFactory[7];
      queueConnectionFactoryArray0[0] = queueConnectionFactory0;
      QueueConnectionFactory queueConnectionFactory1 = new QueueConnectionFactory();
      queueConnectionFactoryArray0[1] = queueConnectionFactory1;
      QueueConnectionFactory queueConnectionFactory2 = new QueueConnectionFactory();
      queueConnectionFactoryArray0[2] = queueConnectionFactory2;
      queueConnectionFactoryArray0[3] = queueConnectionFactory0;
      queueConnectionFactoryArray0[4] = queueConnectionFactory0;
      queueConnectionFactoryArray0[5] = queueConnectionFactory0;
      queueConnectionFactoryArray0[6] = queueConnectionFactory0;
      connectionFactories0.setQueueConnectionFactory(queueConnectionFactoryArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      connectionFactories0.removeQueueConnectionFactory(queueConnectionFactory0);
      int int0 = connectionFactories0.getQueueConnectionFactoryCount();
      assertEquals(6, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      MockFile mockFile0 = new MockFile("F3ke1oZ", "F3ke1oZ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Marshaller.enableDebug = true;
      Object[] objectArray0 = new Object[26];
      objectArray0[0] = (Object) "J}tOj3+ftP.8Q^^";
      objectArray0[1] = (Object) "F3ke1oZ";
      boolean boolean0 = mockFile0.mkdir();
      objectArray0[8] = (Object) "F3ke1oZ";
      objectArray0[3] = (Object) mockPrintWriter0;
      mockFile0.setReadOnly();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockPrintWriter0.println();
      ConnectionFactories connectionFactories1 = new ConnectionFactories();
      ConnectionFactory connectionFactory0 = new ConnectionFactory();
      connectionFactories1.addConnectionFactory(0, connectionFactory0);
      MockFile mockFile1 = new MockFile("rt7}{*]");
      mockFile1.getCanonicalFile();
      MockFile mockFile2 = new MockFile("rt7}{*]");
      mockFile0.setWritable(false, false);
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XATopicConnectionFactory xATopicConnectionFactory0 = new XATopicConnectionFactory();
      XATopicConnectionFactory[] xATopicConnectionFactoryArray0 = new XATopicConnectionFactory[10];
      xATopicConnectionFactoryArray0[0] = xATopicConnectionFactory0;
      XATopicConnectionFactory xATopicConnectionFactory1 = new XATopicConnectionFactory();
      xATopicConnectionFactoryArray0[1] = xATopicConnectionFactory1;
      xATopicConnectionFactoryArray0[3] = xATopicConnectionFactory1;
      xATopicConnectionFactoryArray0[4] = xATopicConnectionFactory0;
      xATopicConnectionFactoryArray0[5] = xATopicConnectionFactory0;
      xATopicConnectionFactoryArray0[6] = xATopicConnectionFactory0;
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      boolean boolean0 = connectionFactories0.removeXATopicConnectionFactory(xATopicConnectionFactory0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("F3e1PZ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      MockFile mockFile0 = new MockFile("F3ke1oZ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.getCanonicalFile();
      mockFile0.setReadable(true, true);
      MockFile mockFile1 = new MockFile("J}tOj3+ftP.8Q^^");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockFile1.setWritable(true, false);
      mockPrintWriter0.println(50);
      Object[] objectArray0 = new Object[7];
      mockFile0.getAbsoluteFile();
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) evoSuiteFile0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "!&{0aH=y_\u0007\"ZVzB";
      objectArray0[5] = (Object) evoSuiteFile0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      mockPrintWriter0.printf("!&{0aH=y_\u0007\"ZVzB", objectArray0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "!&{0aH=y_\u0007\"ZVzB");
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      XATopicConnectionFactory xATopicConnectionFactory0 = new XATopicConnectionFactory();
      connectionFactories0.addXATopicConnectionFactory(xATopicConnectionFactory0);
      connectionFactories0.getTopicConnectionFactory();
      XATopicConnectionFactory xATopicConnectionFactory1 = connectionFactories0.getXATopicConnectionFactory(0);
      assertSame(xATopicConnectionFactory1, xATopicConnectionFactory0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TopicConnectionFactory[] topicConnectionFactoryArray0 = new TopicConnectionFactory[0];
      MockFile mockFile0 = new MockFile("='");
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      connectionFactories0.addTopicConnectionFactory((TopicConnectionFactory) null);
      connectionFactories0.removeTopicConnectionFactory((TopicConnectionFactory) null);
      int int0 = connectionFactories0.getXATopicConnectionFactoryCount();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      Marshaller.enableDebug = true;
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[1];
      ConnectionFactory connectionFactory0 = new ConnectionFactory();
      try { 
        connectionFactories0.setConnectionFactory(189, connectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      Marshaller.enableDebug = true;
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[0];
      ConnectionFactory connectionFactory0 = new ConnectionFactory();
      try { 
        connectionFactories0.setConnectionFactory((-406), connectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      Marshaller.enableDebug = true;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      ConnectionFactory connectionFactory0 = new ConnectionFactory();
      try { 
        connectionFactories0.setConnectionFactory(0, connectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList2, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode1);
      Locale locale1 = Locale.KOREAN;
      Locale locale2 = Locale.FRENCH;
      locale2.getDisplayCountry();
      locale1.getDisplayName(locale2);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("");
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList3, locale_FilteringMode2);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      linkedList1.add(locale1);
      Locale.filter((List<Locale.LanguageRange>) linkedList4, (Collection<Locale>) list0, locale_FilteringMode0);
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      Locale locale3 = Locale.CANADA;
      locale3.getScript();
      locale3.getDisplayCountry();
      LinkedList<Locale> linkedList6 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList7 = new LinkedList<Locale>();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      ParserAdapter parserAdapter2 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter2.getContentHandler();
      try { 
        connectionFactories0.marshal((ContentHandler) defaultHandler2_0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.exolab.castor.xml.Marshaller", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale locale0 = Locale.JAPAN;
      linkedList2.offerFirst(locale0);
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList5.add((Locale.LanguageRange) null);
      LinkedList<Locale> linkedList6 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList7 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList8 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList9 = new LinkedList<Locale>();
      linkedList7.poll();
      LinkedList<Locale> linkedList10 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList11 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList12 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList14 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList15 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList16 = new LinkedList<Locale>();
      Locale.lookup(linkedList13, linkedList1);
      LinkedList<Locale.LanguageRange> linkedList17 = new LinkedList<Locale.LanguageRange>();
      linkedList13.retainAll(linkedList4);
      LinkedList<Locale> linkedList18 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList19 = new LinkedList<Locale.LanguageRange>();
      linkedList7.add(locale0);
      LinkedList<Locale> linkedList20 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList21 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList22 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList23 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList24 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList25 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList26 = new LinkedList<Locale>();
      UnaryOperator.identity();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      // Undeclared exception!
      try { 
        connectionFactories0.setXATopicConnectionFactory((XATopicConnectionFactory[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 0;
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      StringWriter stringWriter0 = new StringWriter();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      connectionFactories0.enumerateTopicConnectionFactory();
      stringWriter0.append('?');
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      connectionFactories0.clearConnectionFactory();
      MockFile mockFile0 = new MockFile("F3ke1oZ", "F3ke1oZ");
      mockFile0.setReadable(false, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Marshaller.enableDebug = true;
      Object[] objectArray0 = new Object[26];
      objectArray0[0] = (Object) "J}tOj3+ftP.8Q^^";
      objectArray0[1] = (Object) "F3ke1oZ";
      objectArray0[8] = (Object) "F3ke1oZ";
      objectArray0[3] = (Object) mockPrintWriter0;
      mockFile0.setReadOnly();
      mockPrintWriter0.println(0);
      objectArray0[4] = (Object) mockPrintWriter0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F3ke1oZ");
      objectArray0[6] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("J}tOj3+ftP.8Q^^", objectArray0);
      ConnectionFactories connectionFactories1 = new ConnectionFactories();
      connectionFactories1.getConnectionFactory();
      connectionFactories0.addXAQueueConnectionFactory(0, (XAQueueConnectionFactory) null);
      QueueConnectionFactory[] queueConnectionFactoryArray0 = new QueueConnectionFactory[5];
      ConnectionFactories connectionFactories2 = new ConnectionFactories();
      try { 
        connectionFactories2.getQueueConnectionFactory((-2151));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl2.getDTDHandler();
      locatorImpl0.setColumnNumber((-69));
      locatorImpl0.setSystemId("VUgD");
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      xMLFilterImpl4.setDocumentLocator(locatorImpl0);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl4);
      xMLFilterImpl3.setDTDHandler((DTDHandler) null);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(parserAdapter0);
      xMLFilterImpl6.getContentHandler();
      xMLFilterImpl0.getEntityResolver();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      XMLReaderAdapter xMLReaderAdapter1 = new XMLReaderAdapter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = '{';
      charArray0[2] = 'V';
      charArray0[3] = 'o';
      SAXParseException sAXParseException0 = new SAXParseException("VUgD", "", "VUgD", (-69), (-69));
      xMLFilterImpl0.warning(sAXParseException0);
      xMLFilterImpl5.getContentHandler();
      ConnectionFactories connectionFactories1 = new ConnectionFactories();
      // Undeclared exception!
      try { 
        connectionFactories1.setQueueConnectionFactory((QueueConnectionFactory[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      byte byte0 = (byte)0;
      XAQueueConnectionFactory xAQueueConnectionFactory0 = new XAQueueConnectionFactory();
      try { 
        connectionFactories0.addXAQueueConnectionFactory((-786), xAQueueConnectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -786, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      ConnectionFactory connectionFactory0 = new ConnectionFactory();
      ConnectionFactories connectionFactories1 = new ConnectionFactories();
      XAConnectionFactory xAConnectionFactory0 = new XAConnectionFactory();
      XAQueueConnectionFactory xAQueueConnectionFactory0 = new XAQueueConnectionFactory();
      XAQueueConnectionFactory[] xAQueueConnectionFactoryArray0 = new XAQueueConnectionFactory[8];
      xAQueueConnectionFactoryArray0[0] = xAQueueConnectionFactory0;
      xAQueueConnectionFactoryArray0[1] = xAQueueConnectionFactory0;
      connectionFactories0.addXAQueueConnectionFactory(xAQueueConnectionFactory0);
      xAQueueConnectionFactoryArray0[2] = xAQueueConnectionFactory0;
      xAQueueConnectionFactoryArray0[3] = xAQueueConnectionFactory0;
      xAQueueConnectionFactoryArray0[4] = xAQueueConnectionFactory0;
      xAQueueConnectionFactoryArray0[5] = xAQueueConnectionFactory0;
      xAQueueConnectionFactoryArray0[6] = xAQueueConnectionFactory0;
      xAQueueConnectionFactoryArray0[7] = xAQueueConnectionFactory0;
      connectionFactories0.setXAQueueConnectionFactory(xAQueueConnectionFactoryArray0);
      QueueConnectionFactory queueConnectionFactory0 = new QueueConnectionFactory();
      assertNull(queueConnectionFactory0.getName());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Predicate<Locale.LanguageRange> predicate0 = Predicate.isEqual((Object) xMLFilterImpl0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Locale.LanguageRange> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = predicate1.negate();
      predicate0.negate();
      predicate4.negate();
      predicate4.or(predicate3);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Locale.LanguageRange> predicate7 = predicate0.negate();
      Predicate<Locale.LanguageRange> predicate8 = predicate0.negate();
      Predicate<Object> predicate9 = predicate6.and(predicate1);
      predicate5.and(predicate3);
      Predicate<Object> predicate10 = predicate2.or(predicate2);
      Predicate<Object> predicate11 = predicate6.or(predicate10);
      Predicate<Object> predicate12 = predicate11.and(predicate5);
      predicate8.and(predicate12);
      Predicate<Object> predicate13 = predicate12.negate();
      predicate0.negate();
      Predicate<Object> predicate14 = predicate5.negate();
      predicate14.test(predicate7);
      predicate0.and(predicate1);
      predicate8.or(predicate3);
      predicate4.negate();
      Predicate<Object> predicate15 = predicate10.negate();
      Predicate<Object> predicate16 = Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate17 = predicate15.negate();
      predicate1.or(predicate17);
      Predicate<Object> predicate18 = predicate14.and(predicate16);
      predicate0.negate();
      Predicate<Object> predicate19 = predicate1.negate();
      predicate14.and(predicate19);
      Predicate<Object> predicate20 = predicate18.negate();
      predicate20.or(predicate13);
      predicate20.and(predicate2);
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      QueueConnectionFactory[] queueConnectionFactoryArray0 = connectionFactories0.getQueueConnectionFactory();
      connectionFactories0.setQueueConnectionFactory(queueConnectionFactoryArray0);
      assertEquals(0, connectionFactories0.getXATopicConnectionFactoryCount());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList2, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode2);
      Locale locale0 = Locale.TAIWAN;
      linkedList2.add(locale0);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode4);
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      linkedList0.iterator();
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0, locale_FilteringMode0);
      linkedList1.add((Locale) null);
      LinkedList<Locale> linkedList6 = new LinkedList<Locale>();
      linkedList4.add((Locale) null);
      LinkedList<Locale> linkedList7 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList4, locale_FilteringMode3);
      Locale locale1 = Locale.FRANCE;
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList10 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2, locale_FilteringMode5);
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList8, (Collection<Locale>) linkedList1, locale_FilteringMode6);
      LinkedList<Locale> linkedList11 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      XATopicConnectionFactory xATopicConnectionFactory0 = new XATopicConnectionFactory();
      try { 
        connectionFactories0.setXATopicConnectionFactory(0, xATopicConnectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList2, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode3);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.clear();
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode5);
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList4, locale_FilteringMode2);
      linkedList0.iterator();
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0, locale_FilteringMode0);
      linkedList1.add((Locale) null);
      List<Locale> list3 = new LinkedList<Locale>();
      linkedList4.add((Locale) null);
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList4, locale_FilteringMode4);
      Locale locale0 = Locale.ROOT;
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList9 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2, locale_FilteringMode6);
      Locale.FilteringMode locale_FilteringMode7 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList7, (Collection<Locale>) linkedList1, locale_FilteringMode7);
      LinkedList<Locale> linkedList10 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      TopicConnectionFactory topicConnectionFactory0 = new TopicConnectionFactory();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.setTopicConnectionFactory(0, topicConnectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      ConnectionFactory connectionFactory0 = new ConnectionFactory();
      connectionFactories0.addConnectionFactory(connectionFactory0);
      Marshaller.enableDebug = true;
      Object object0 = new Object();
      ConnectionFactory connectionFactory1 = connectionFactories0.getConnectionFactory(0);
      connectionFactories0.setConnectionFactory(0, connectionFactory1);
      assertSame(connectionFactory1, connectionFactory0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale locale0 = Locale.JAPAN;
      linkedList2.offerFirst(locale0);
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList5.add((Locale.LanguageRange) null);
      LinkedList<Locale> linkedList6 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList7 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList8 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList9 = new LinkedList<Locale>();
      linkedList4.poll();
      LinkedList<Locale> linkedList10 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList11 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList12 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList14 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList15 = new LinkedList<Locale.LanguageRange>();
      linkedList14.clear();
      LinkedList<Locale> linkedList16 = new LinkedList<Locale>();
      Locale.lookup(linkedList5, linkedList4);
      LinkedList<Locale.LanguageRange> linkedList17 = new LinkedList<Locale.LanguageRange>();
      linkedList0.retainAll(linkedList6);
      LinkedList<Locale> linkedList18 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList19 = new LinkedList<Locale.LanguageRange>();
      linkedList10.add((Locale) null);
      LinkedList<Locale> linkedList20 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList21 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList22 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList23 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList24 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList25 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList26 = new LinkedList<Locale>();
      TopicConnectionFactory topicConnectionFactory0 = new TopicConnectionFactory();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.setTopicConnectionFactory((-593), topicConnectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      xMLFilterImpl1.setParent(xMLFilterImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.getColumnNumber();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl1.setDocumentLocator(locator2Impl0);
      locatorImpl0.getColumnNumber();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl3.setDocumentLocator(locator2Impl0);
      xMLFilterImpl3.getContentHandler();
      XAConnectionFactory xAConnectionFactory0 = new XAConnectionFactory();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.setXAConnectionFactory(0, xAConnectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      locatorImpl0.setColumnNumber((-69));
      locatorImpl0.setSystemId("VUgD");
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl4);
      xMLFilterImpl3.setDTDHandler(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(parserAdapter0);
      xMLFilterImpl6.getContentHandler();
      xMLFilterImpl0.getEntityResolver();
      XMLReaderAdapter xMLReaderAdapter1 = new XMLReaderAdapter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = '{';
      charArray0[2] = 'V';
      XAConnectionFactory xAConnectionFactory0 = new XAConnectionFactory();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.setXAConnectionFactory((-69), xAConnectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList2, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode2);
      Locale locale0 = Locale.TAIWAN;
      linkedList2.add(locale0);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode4);
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      linkedList0.iterator();
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0, locale_FilteringMode0);
      linkedList1.add((Locale) null);
      LinkedList<Locale> linkedList6 = new LinkedList<Locale>();
      linkedList4.add((Locale) null);
      LinkedList<Locale> linkedList7 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList4, locale_FilteringMode3);
      Locale locale1 = Locale.FRANCE;
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList11 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2, locale_FilteringMode5);
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList9, (Collection<Locale>) linkedList1, locale_FilteringMode6);
      LinkedList<Locale> linkedList12 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      XATopicConnectionFactory xATopicConnectionFactory0 = new XATopicConnectionFactory();
      try { 
        connectionFactories0.setXATopicConnectionFactory((-21), xATopicConnectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      XATopicConnectionFactory xATopicConnectionFactory0 = new XATopicConnectionFactory();
      try { 
        connectionFactories0.addXATopicConnectionFactory((-362), xATopicConnectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -362, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      MockFile mockFile0 = new MockFile("F3ke1oZ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Marshaller.enableDebug = true;
      Object[] objectArray0 = new Object[28];
      objectArray0[0] = (Object) "J}tOj3+ftP.8Q^^";
      objectArray0[3] = (Object) "J}tOj3+ftP.8Q^^";
      mockFile0.toPath();
      objectArray0[8] = (Object) "F3ke1oZ";
      objectArray0[3] = (Object) mockPrintWriter0;
      mockFile0.setReadOnly();
      mockPrintWriter0.println(0);
      XATopicConnectionFactory xATopicConnectionFactory0 = new XATopicConnectionFactory();
      connectionFactories0.addXATopicConnectionFactory(0, xATopicConnectionFactory0);
      XATopicConnectionFactory xATopicConnectionFactory1 = new XATopicConnectionFactory();
      assertFalse(xATopicConnectionFactory1.equals((Object)xATopicConnectionFactory0));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("F3e1PZ");
      MockFile mockFile0 = new MockFile("F3ke1oZ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.getCanonicalFile();
      String string0 = "J}tOj3+ftP.8Q^^";
      mockFile0.setReadable(true, true);
      MockFile mockFile1 = new MockFile("J}tOj3+ftP.8Q^^");
      mockFile1.setWritable(true, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockPrintWriter0.println(50);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile0.getAbsoluteFile();
      FileSystemHandling.createFolder(evoSuiteFile0);
      mockPrintWriter0.println();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      ConnectionFactory connectionFactory0 = new ConnectionFactory();
      try { 
        connectionFactories0.addConnectionFactory(50, connectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 50, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      connectionFactories0.addXAConnectionFactory(0, (XAConnectionFactory) null);
      // Undeclared exception!
      try { 
        connectionFactories0.setXAQueueConnectionFactory((XAQueueConnectionFactory[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList2, (Locale.FilteringMode) null);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode2);
      Locale locale0 = Locale.PRC;
      linkedList2.add(locale0);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode4);
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      linkedList0.iterator();
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0, locale_FilteringMode0);
      linkedList1.add((Locale) null);
      LinkedList<Locale> linkedList6 = new LinkedList<Locale>();
      linkedList4.add((Locale) null);
      LinkedList<Locale> linkedList7 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList4, locale_FilteringMode3);
      Locale locale1 = Locale.US;
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList11 = new LinkedList<Locale>();
      List<Locale> list2 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList9, (Collection<Locale>) linkedList1, locale_FilteringMode5);
      LinkedList<Locale> linkedList12 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      XATopicConnectionFactory xATopicConnectionFactory0 = new XATopicConnectionFactory();
      try { 
        connectionFactories0.setXATopicConnectionFactory(14, xATopicConnectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale locale0 = Locale.JAPAN;
      linkedList2.offerFirst(locale0);
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList5.add((Locale.LanguageRange) null);
      LinkedList<Locale> linkedList6 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList7 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList8 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList9 = new LinkedList<Locale>();
      linkedList7.poll();
      LinkedList<Locale> linkedList10 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList11 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList12 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList14 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList15 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList16 = new LinkedList<Locale>();
      Locale.lookup(linkedList13, linkedList1);
      LinkedList<Locale.LanguageRange> linkedList17 = new LinkedList<Locale.LanguageRange>();
      linkedList13.retainAll(linkedList4);
      LinkedList<Locale> linkedList18 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList19 = new LinkedList<Locale.LanguageRange>();
      linkedList7.add(locale0);
      LinkedList<Locale> linkedList20 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList21 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList22 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList23 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList24 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList25 = new LinkedList<Locale>();
      XATopicConnectionFactory xATopicConnectionFactory0 = new XATopicConnectionFactory();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.setXATopicConnectionFactory(0, xATopicConnectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList2, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode2);
      Locale locale0 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.retainAll(list0);
      linkedList1.add(locale0);
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode4);
      Locale locale1 = Locale.CANADA;
      locale1.getDisplayCountry();
      linkedList2.add(locale1);
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0, locale_FilteringMode0);
      linkedList4.add((Locale) null);
      LinkedList<Locale> linkedList6 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList8 = new LinkedList<Locale>();
      linkedList1.add(locale1);
      linkedList1.removeLastOccurrence(locale_FilteringMode3);
      Locale locale2 = Locale.FRANCE;
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList10 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2, locale_FilteringMode5);
      Locale.filter((List<Locale.LanguageRange>) linkedList7, (Collection<Locale>) linkedList1, locale_FilteringMode1);
      LinkedList<Locale> linkedList11 = new LinkedList<Locale>();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      // Undeclared exception!
      try { 
        connectionFactories0.setTopicConnectionFactory((TopicConnectionFactory[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "F3e1o";
      MockFile mockFile0 = new MockFile("F3e1o", "F3e1o");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("F3e1o");
      XAQueueConnectionFactory xAQueueConnectionFactory0 = new XAQueueConnectionFactory();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      int int0 = 663;
      try { 
        connectionFactories0.setXAQueueConnectionFactory(663, xAQueueConnectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      XAQueueConnectionFactory xAQueueConnectionFactory0 = new XAQueueConnectionFactory();
      int int0 = (-1253);
      try { 
        connectionFactories0.setXAQueueConnectionFactory((-1253), xAQueueConnectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      byte byte0 = (byte)0;
      XAQueueConnectionFactory xAQueueConnectionFactory0 = new XAQueueConnectionFactory();
      try { 
        connectionFactories0.setXAQueueConnectionFactory((int) (byte)0, xAQueueConnectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator1.apply(unaryOperator0);
      Function<Object, TopicConnectionFactory> function0 = (Function<Object, TopicConnectionFactory>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super Integer, ?>) function0);
      Function<Object, Locale.LanguageRange> function1 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function1).apply(any());
      Function<Object, Locale.LanguageRange> function2 = unaryOperator3.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function1);
      UnaryOperator.identity();
      Function<Object, Locale.LanguageRange> function3 = unaryOperator3.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function2);
      Function.identity();
      UnaryOperator.identity();
      function3.compose((Function<? super XAQueueConnectionFactory, ?>) unaryOperator1);
      function2.apply(function3);
      Function.identity();
      function2.apply(linkedList0);
      UnaryOperator.identity();
      Function.identity();
      unaryOperator2.compose((Function<? super Object, ? extends Locale.LanguageRange>) function3);
      UnaryOperator.identity();
      unaryOperator2.apply((Locale.LanguageRange) null);
      QueueConnectionFactory queueConnectionFactory0 = new QueueConnectionFactory();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.addQueueConnectionFactory(2011, queueConnectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2011, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      Predicate<Locale.LanguageRange> predicate0 = Predicate.isEqual((Object) xMLFilterImpl0);
      Predicate<Locale.LanguageRange> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      Predicate<Locale.LanguageRange> predicate5 = predicate0.or(predicate4);
      Predicate<Locale.LanguageRange> predicate6 = predicate5.negate();
      predicate0.and(predicate5);
      Predicate<Locale.LanguageRange> predicate7 = predicate6.or(predicate4);
      Predicate<Locale.LanguageRange> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate4.and(predicate2);
      Predicate<Locale.LanguageRange> predicate10 = predicate7.negate();
      Predicate<Locale.LanguageRange> predicate11 = predicate10.and(predicate0);
      Predicate<Locale.LanguageRange> predicate12 = predicate11.or(predicate6);
      Predicate<Object> predicate13 = predicate9.and(predicate2);
      predicate4.or(predicate13);
      Predicate<Locale.LanguageRange> predicate14 = predicate12.or(predicate13);
      predicate8.or(predicate14);
      predicate12.or(predicate5);
      Predicate<Object> predicate15 = Predicate.isEqual((Object) xMLFilterImpl1);
      predicate8.and(predicate2);
      Predicate<Object> predicate16 = Predicate.isEqual((Object) predicate13);
      predicate10.negate();
      Predicate<Object> predicate17 = predicate15.and(predicate13);
      predicate17.negate();
      predicate17.negate();
      predicate14.negate();
      predicate2.and(predicate17);
      predicate14.negate();
      predicate7.or(predicate8);
      Predicate<Object> predicate18 = predicate13.negate();
      predicate18.negate();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.removeIf(predicate16);
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.setXAConnectionFactory(6, (XAConnectionFactory) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale locale0 = Locale.JAPAN;
      linkedList2.offerFirst(locale0);
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList5.add((Locale.LanguageRange) null);
      LinkedList<Locale> linkedList6 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList7 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList8 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList9 = new LinkedList<Locale>();
      linkedList7.poll();
      LinkedList<Locale> linkedList10 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList11 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList12 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList14 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList15 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList16 = new LinkedList<Locale>();
      Locale.lookup(linkedList13, linkedList1);
      LinkedList<Locale.LanguageRange> linkedList17 = new LinkedList<Locale.LanguageRange>();
      linkedList13.retainAll(linkedList4);
      LinkedList<Locale> linkedList18 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList19 = new LinkedList<Locale.LanguageRange>();
      linkedList7.add(locale0);
      LinkedList<Locale> linkedList20 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList21 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList22 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList23 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList24 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList25 = new LinkedList<Locale.LanguageRange>();
      TopicConnectionFactory topicConnectionFactory0 = new TopicConnectionFactory();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.setTopicConnectionFactory(1, topicConnectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList2, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode3);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.clear();
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode5);
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList4, locale_FilteringMode2);
      linkedList0.iterator();
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0, locale_FilteringMode0);
      linkedList1.add((Locale) null);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      linkedList4.add((Locale) null);
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList4, locale_FilteringMode4);
      Locale locale0 = Locale.ROOT;
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList9 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2, locale_FilteringMode6);
      Locale.FilteringMode locale_FilteringMode7 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList7, (Collection<Locale>) linkedList1, locale_FilteringMode7);
      LinkedList<Locale> linkedList10 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      TopicConnectionFactory topicConnectionFactory0 = new TopicConnectionFactory();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.setTopicConnectionFactory(0, topicConnectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      connectionFactories0.validate();
      assertEquals(0, connectionFactories0.getXAConnectionFactoryCount());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.725035274126178
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      FileSystemHandling.shouldAllThrowIOExceptions();
      XAConnectionFactory xAConnectionFactory0 = new XAConnectionFactory();
      XAQueueConnectionFactory xAQueueConnectionFactory0 = new XAQueueConnectionFactory();
      XAQueueConnectionFactory[] xAQueueConnectionFactoryArray0 = new XAQueueConnectionFactory[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      xAQueueConnectionFactoryArray0[0] = xAQueueConnectionFactory0;
      xAQueueConnectionFactoryArray0[2] = xAQueueConnectionFactory0;
      connectionFactories0.setXAQueueConnectionFactory(xAQueueConnectionFactoryArray0);
      connectionFactories0.getQueueConnectionFactory();
      connectionFactories0.isValid();
      XAConnectionFactory[] xAConnectionFactoryArray0 = new XAConnectionFactory[1];
      xAConnectionFactoryArray0[0] = xAConnectionFactory0;
      connectionFactories0.setXAConnectionFactory(xAConnectionFactoryArray0);
      connectionFactories0.getConnectionFactory();
      assertEquals(3, connectionFactories0.getXAQueueConnectionFactoryCount());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Predicate<Locale.LanguageRange> predicate0 = Predicate.isEqual((Object) xMLFilterImpl0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Locale.LanguageRange> predicate4 = predicate0.or(predicate3);
      Predicate<Locale.LanguageRange> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate1.negate();
      predicate0.and(predicate4);
      predicate5.or(predicate3);
      Predicate<Locale.LanguageRange> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Locale.LanguageRange> predicate9 = predicate7.negate();
      Predicate<Locale.LanguageRange> predicate10 = predicate9.and(predicate0);
      Predicate<Locale.LanguageRange> predicate11 = predicate10.or(predicate5);
      Predicate<Object> predicate12 = predicate8.and(predicate1);
      Predicate<Object> predicate13 = predicate2.or(predicate2);
      predicate11.negate();
      Predicate<Locale.LanguageRange> predicate14 = predicate11.or(predicate12);
      Predicate<Object> predicate15 = predicate8.or(predicate13);
      Predicate<Object> predicate16 = predicate15.and(predicate6);
      predicate14.and(predicate16);
      Predicate<Locale.LanguageRange> predicate17 = predicate7.or(predicate14);
      predicate7.or(predicate5);
      Predicate<Object> predicate18 = predicate6.negate();
      predicate7.and(predicate1);
      predicate8.or(predicate13);
      predicate11.or(predicate3);
      predicate4.negate();
      predicate6.negate();
      Predicate<Object> predicate19 = Predicate.isEqual((Object) predicate12);
      Predicate<Object> predicate20 = predicate19.negate();
      predicate18.and(predicate19);
      predicate7.negate();
      predicate20.negate();
      predicate17.negate();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      XAQueueConnectionFactory[] xAQueueConnectionFactoryArray0 = new XAQueueConnectionFactory[2];
      connectionFactories0.setXAQueueConnectionFactory(xAQueueConnectionFactoryArray0);
      connectionFactories0.getXAQueueConnectionFactory();
      assertEquals(2, connectionFactories0.getXAQueueConnectionFactoryCount());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      int int0 = 0;
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      connectionFactories0.enumerateQueueConnectionFactory();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('?');
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale locale0 = Locale.JAPAN;
      linkedList2.offerFirst(locale0);
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList5.add((Locale.LanguageRange) null);
      LinkedList<Locale> linkedList6 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList7 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList8 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList9 = new LinkedList<Locale>();
      linkedList7.poll();
      LinkedList<Locale> linkedList10 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList11 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList12 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList14 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList15 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList16 = new LinkedList<Locale>();
      Locale.lookup(linkedList13, linkedList1);
      LinkedList<Locale.LanguageRange> linkedList17 = new LinkedList<Locale.LanguageRange>();
      linkedList13.retainAll(linkedList4);
      LinkedList<Locale> linkedList18 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList19 = new LinkedList<Locale.LanguageRange>();
      linkedList7.add(locale0);
      LinkedList<Locale> linkedList20 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList21 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList22 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList23 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList24 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList25 = new LinkedList<Locale>();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      Enumeration enumeration0 = connectionFactories0.enumerateXAQueueConnectionFactory();
      assertNotNull(enumeration0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      XAConnectionFactory xAConnectionFactory0 = new XAConnectionFactory();
      connectionFactories0.addXAConnectionFactory(xAConnectionFactory0);
      ConnectionFactories connectionFactories1 = new ConnectionFactories();
      ConnectionFactories connectionFactories2 = new ConnectionFactories();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)78;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[3] = (byte) (-81);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConnectionFactories connectionFactories3 = new ConnectionFactories();
      XAConnectionFactory xAConnectionFactory1 = new XAConnectionFactory();
      XAConnectionFactory xAConnectionFactory2 = new XAConnectionFactory();
      XAConnectionFactory xAConnectionFactory3 = new XAConnectionFactory();
      // Undeclared exception!
      try { 
        connectionFactories2.setXAConnectionFactory((XAConnectionFactory[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList2, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList6 = new LinkedList<Locale>();
      linkedList4.removeFirstOccurrence(locale_FilteringMode0);
      LinkedList<Locale> linkedList7 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList7, locale_FilteringMode2);
      LinkedList<Locale> linkedList8 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList9 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList10 = new LinkedList<Locale>();
      Locale locale0 = Locale.GERMAN;
      linkedList7.add(locale0);
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList13 = new LinkedList<Locale>();
      Locale.lookup(linkedList12, linkedList7);
      LinkedList<Locale.LanguageRange> linkedList14 = new LinkedList<Locale.LanguageRange>();
      linkedList12.retainAll(linkedList8);
      LinkedList<Locale> linkedList15 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList16 = new LinkedList<Locale.LanguageRange>();
      linkedList1.add((Locale) null);
      LinkedList<Locale> linkedList17 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList18 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList19 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList20 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList21 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList22 = new LinkedList<Locale>();
      XATopicConnectionFactory xATopicConnectionFactory0 = new XATopicConnectionFactory();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.getTopicConnectionFactory(490);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.addXAConnectionFactory(41, (XAConnectionFactory) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 41, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl();
      locatorImpl1.getLineNumber();
      locatorImpl0.getPublicId();
      locatorImpl0.getColumnNumber();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.setDocumentLocator(locatorImpl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl5.getDTDHandler();
      xMLFilterImpl4.setDTDHandler((DTDHandler) null);
      SAXParseException sAXParseException0 = new SAXParseException("mapping.createMethodNotFound", (String) null, "9rD)'pE/.VH&qJ#", 3236, 4070);
      SAXParseException sAXParseException1 = new SAXParseException((String) null, "", "", 4070, 0, sAXParseException0);
      xMLFilterImpl5.error(sAXParseException1);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.resolveEntity((String) null, (String) null);
      xMLFilterImpl2.setEntityResolver(defaultHandler2_0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      xMLFilterImpl5.resolveEntity((String) null, "/");
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl1);
      xMLFilterImpl5.getContentHandler();
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl();
      xMLFilterImpl0.getEntityResolver();
      xMLFilterImpl3.setEntityResolver(xMLFilterImpl4);
      xMLReaderAdapter0.characters((char[]) null, 0, (-3529));
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.getTopicConnectionFactory((-3529));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      connectionFactories0.removeTopicConnectionFactory((TopicConnectionFactory) null);
      connectionFactories0.getXAQueueConnectionFactory();
      ConnectionFactory connectionFactory0 = new ConnectionFactory();
      ConnectionFactory connectionFactory1 = new ConnectionFactory();
      ConnectionFactory[] connectionFactoryArray0 = new ConnectionFactory[4];
      connectionFactoryArray0[0] = connectionFactory0;
      connectionFactoryArray0[1] = connectionFactory1;
      connectionFactoryArray0[2] = connectionFactory1;
      connectionFactoryArray0[3] = connectionFactory1;
      connectionFactories0.setConnectionFactory(connectionFactoryArray0);
      connectionFactories0.getXAQueueConnectionFactoryCount();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      connectionFactories0.getConnectionFactoryCount();
      QueueConnectionFactory queueConnectionFactory0 = new QueueConnectionFactory();
      // Undeclared exception!
      try { 
        queueConnectionFactory0.marshal((ContentHandler) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'handler' is null.
         //
         verifyException("org.exolab.castor.xml.Marshaller", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      ConnectionFactory[] connectionFactoryArray0 = new ConnectionFactory[0];
      // Undeclared exception!
      try { 
        connectionFactories0.setConnectionFactory((ConnectionFactory[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      connectionFactories0.clearXAConnectionFactory();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CharBuffer.wrap((CharSequence) "{BFo;V/SM(35[QYhcD", 1, 1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      Enumeration enumeration0 = connectionFactories0.enumerateXAConnectionFactory();
      assertNotNull(enumeration0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      XAQueueConnectionFactory xAQueueConnectionFactory0 = new XAQueueConnectionFactory();
      boolean boolean0 = connectionFactories0.removeXAQueueConnectionFactory(xAQueueConnectionFactory0);
      boolean boolean1 = connectionFactories0.removeXAQueueConnectionFactory(xAQueueConnectionFactory0);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Predicate<Locale.LanguageRange> predicate0 = Predicate.isEqual((Object) xMLFilterImpl0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Locale.LanguageRange> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate5.and(predicate2);
      predicate0.and(predicate4);
      Predicate<Object> predicate7 = predicate1.negate();
      Predicate<Locale.LanguageRange> predicate8 = predicate4.negate();
      Predicate<Locale.LanguageRange> predicate9 = predicate4.or(predicate0);
      Predicate<Object> predicate10 = predicate7.and(predicate1);
      Predicate<Object> predicate11 = predicate6.negate();
      Predicate<Object> predicate12 = predicate11.negate();
      predicate12.test(predicate8);
      predicate4.or(predicate0);
      Predicate<Object> predicate13 = predicate1.and(predicate2);
      Predicate<Object> predicate14 = predicate3.or(predicate13);
      predicate1.and(predicate7);
      predicate9.or(predicate12);
      predicate4.or(predicate10);
      predicate13.negate();
      Predicate<Object> predicate15 = predicate2.and(predicate11);
      Predicate<Object> predicate16 = predicate6.or(predicate15);
      predicate2.or(predicate5);
      boolean boolean0 = predicate14.test(predicate2);
      predicate16.negate();
      predicate9.negate();
      predicate5.negate();
      Predicate.isEqual((Object) predicate2);
      Function.identity();
      UnaryOperator.identity();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      boolean boolean1 = connectionFactories0.removeConnectionFactory((ConnectionFactory) null);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      connectionFactories0.clearXATopicConnectionFactory();
      connectionFactories0.enumerateXATopicConnectionFactory();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-1);
      TopicConnectionFactory topicConnectionFactory0 = new TopicConnectionFactory();
      connectionFactories0.addTopicConnectionFactory(0, topicConnectionFactory0);
      StringReader stringReader0 = new StringReader("");
      try { 
        XATopicConnectionFactory.unmarshal(stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Error : Premature end of file.
         // Line : 1
         // Column : 1
         //
         verifyException("org.exolab.castor.xml.Unmarshaller", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "0-";
      objectArray0[6] = (Object) connectionFactories0;
      objectArray0[3] = (Object) connectionFactories0;
      objectArray0[4] = (Object) "0-";
      Object object0 = new Object();
      objectArray0[6] = (Object) "0-";
      objectArray0[7] = (Object) connectionFactories0;
      Object object1 = new Object();
      objectArray0[8] = object1;
      objectArray0[4] = (Object) true;
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      int int0 = connectionFactories0.getTopicConnectionFactoryCount();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "q]F3ke1oZ";
      Object object0 = new Object();
      locale0.getScript();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[3] = (Object) "q]F3ke1oZ";
      objectArray0[6] = object1;
      Object object2 = new Object();
      objectArray0[7] = object2;
      Object[] objectArray1 = new Object[7];
      objectArray1[4] = (Object) "!&{0aH=y)\u0007\"ZVzB";
      Object[] objectArray2 = new Object[23];
      objectArray2[0] = (Object) "!&{0aH=y)\u0007\"ZVzB";
      objectArray2[1] = (Object) "!&{0aH=y)\u0007\"ZVzB";
      objectArray2[2] = (Object) "q]F3ke1oZ";
      locale0.getDisplayName();
      objectArray2[3] = (Object) locale0;
      objectArray2[4] = (Object) locale0;
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      TopicConnectionFactory topicConnectionFactory0 = new TopicConnectionFactory();
      connectionFactories0.addTopicConnectionFactory(topicConnectionFactory0);
      TopicConnectionFactory topicConnectionFactory1 = connectionFactories0.getTopicConnectionFactory(0);
      assertNull(topicConnectionFactory1.getName());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator1.apply(unaryOperator0);
      UnaryOperator.identity();
      Function<Object, Locale.LanguageRange> function1 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function.identity();
      UnaryOperator.identity();
      Function<Object, Locale.LanguageRange> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function1);
      UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function2);
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      function2.apply((Object) null);
      function2.andThen((Function<? super Locale.LanguageRange, ?>) unaryOperator2);
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.getConnectionFactory((-696));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl();
      locatorImpl1.getLineNumber();
      locatorImpl0.getPublicId();
      locatorImpl0.getColumnNumber();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.setDocumentLocator(locatorImpl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl5.getDTDHandler();
      xMLFilterImpl4.setDTDHandler((DTDHandler) null);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.resolveEntity((String) null, "");
      xMLFilterImpl4.setEntityResolver(xMLFilterImpl3);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl();
      xMLFilterImpl3.setDTDHandler(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter1 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter1);
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl3);
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl9 = new XMLFilterImpl(xMLFilterImpl8);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      xMLFilterImpl3.setDocumentLocator(locator2Impl0);
      XMLFilterImpl xMLFilterImpl10 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl6.setDTDHandler(xMLFilterImpl1);
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.getQueueConnectionFactory(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      connectionFactories0.clearTopicConnectionFactory();
      connectionFactories0.clearConnectionFactory();
      XAQueueConnectionFactory xAQueueConnectionFactory0 = new XAQueueConnectionFactory();
      assertNull(xAQueueConnectionFactory0.getName());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.apply(unaryOperator1);
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.getXAConnectionFactory(5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      unaryOperator1.compose((Function<? super Object, ?>) function1);
      Function.identity();
      UnaryOperator.identity();
      unaryOperator1.apply(unaryOperator0);
      UnaryOperator.identity();
      Function<Object, Locale.LanguageRange> function2 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function2).apply(any());
      Function.identity();
      UnaryOperator.identity();
      Function<Object, Locale.LanguageRange> function3 = unaryOperator3.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function2);
      unaryOperator3.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function3);
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      function3.apply((Object) null);
      function3.andThen((Function<? super Locale.LanguageRange, ?>) unaryOperator2);
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      QueueConnectionFactory queueConnectionFactory0 = new QueueConnectionFactory();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.setQueueConnectionFactory(2186, queueConnectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator1.apply(unaryOperator0);
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      QueueConnectionFactory queueConnectionFactory0 = new QueueConnectionFactory();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.setQueueConnectionFactory((-25), queueConnectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList2, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode2);
      Locale locale0 = Locale.FRENCH;
      linkedList2.add(locale0);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode4);
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      linkedList0.iterator();
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0, locale_FilteringMode0);
      linkedList1.add((Locale) null);
      LinkedList<Locale> linkedList6 = new LinkedList<Locale>();
      linkedList4.add((Locale) null);
      LinkedList<Locale> linkedList7 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList4, locale_FilteringMode3);
      Locale locale1 = Locale.FRANCE;
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList11 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2, locale_FilteringMode5);
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList9, (Collection<Locale>) linkedList1, locale_FilteringMode6);
      LinkedList<Locale> linkedList12 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      int int0 = 0;
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.getXATopicConnectionFactory(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList2, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode3);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.clear();
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode5);
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList4, locale_FilteringMode2);
      linkedList0.iterator();
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0, locale_FilteringMode0);
      linkedList1.add((Locale) null);
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      linkedList4.add((Locale) null);
      LinkedList<Locale> linkedList6 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList4, locale_FilteringMode4);
      Locale locale0 = Locale.ROOT;
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList10 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2, locale_FilteringMode6);
      Locale.FilteringMode locale_FilteringMode7 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList8, (Collection<Locale>) linkedList1, locale_FilteringMode7);
      LinkedList<Locale> linkedList11 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      TopicConnectionFactory topicConnectionFactory0 = new TopicConnectionFactory();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      XAConnectionFactory[] xAConnectionFactoryArray0 = connectionFactories0.getXAConnectionFactory();
      assertEquals(0, xAConnectionFactoryArray0.length);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      int int0 = connectionFactories0.getXAConnectionFactoryCount();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator1.apply(unaryOperator0);
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      QueueConnectionFactory queueConnectionFactory0 = new QueueConnectionFactory();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.setQueueConnectionFactory(0, queueConnectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl();
      locatorImpl1.getLineNumber();
      locatorImpl0.getPublicId();
      locatorImpl0.getColumnNumber();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      locatorImpl1.getColumnNumber();
      xMLFilterImpl0.setDocumentLocator(locatorImpl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl5.getDTDHandler();
      xMLFilterImpl4.setDTDHandler((DTDHandler) null);
      xMLFilterImpl4.unparsedEntityDecl((String) null, (String) null, (String) null, (String) null);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.resolveEntity((String) null, "");
      xMLFilterImpl4.setEntityResolver(xMLFilterImpl3);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl2);
      XMLReaderAdapter xMLReaderAdapter1 = new XMLReaderAdapter();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl0);
      xMLFilterImpl6.startElement("hzo@m9E(N{~I(^>#", (String) null, "", attributes2Impl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter1);
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl3);
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl9 = new XMLFilterImpl(xMLFilterImpl8);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      xMLFilterImpl3.setDocumentLocator(locator2Impl0);
      XMLFilterImpl xMLFilterImpl10 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl6.setDTDHandler(xMLFilterImpl1);
      xMLFilterImpl6.setDocumentLocator(locatorImpl1);
      XMLFilterImpl xMLFilterImpl11 = new XMLFilterImpl();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.getXATopicConnectionFactory(93);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      TopicConnectionFactory topicConnectionFactory0 = new TopicConnectionFactory();
      try { 
        connectionFactories0.addTopicConnectionFactory(5, topicConnectionFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      SAXParseException sAXParseException0 = new SAXParseException("", "", "", 1, 1);
      xMLFilterImpl0.error(sAXParseException0);
      locator2Impl0.getLineNumber();
      locator2Impl0.getPublicId();
      locator2Impl0.getColumnNumber();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.setDocumentLocator(locator2Impl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl0);
      xMLFilterImpl5.startElement((String) null, "", (String) null, attributesImpl0);
      xMLFilterImpl5.getDTDHandler();
      xMLFilterImpl4.unparsedEntityDecl((String) null, (String) null, (String) null, (String) null);
      xMLFilterImpl0.resolveEntity((String) null, "");
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl2);
      xMLFilterImpl3.setDTDHandler(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      xMLReaderAdapter0.setErrorHandler(xMLFilterImpl2);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl3);
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      locator2Impl0.setPublicId("");
      XMLFilterImpl xMLFilterImpl9 = new XMLFilterImpl(xMLFilterImpl8);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      xMLFilterImpl3.setDocumentLocator(locator2Impl1);
      XMLFilterImpl xMLFilterImpl10 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl6.setDTDHandler(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl11 = new XMLFilterImpl();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.getQueueConnectionFactory(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      SAXParseException sAXParseException0 = new SAXParseException("", "", "", (-669), (-669));
      xMLFilterImpl0.error(sAXParseException0);
      locator2Impl0.getLineNumber();
      locator2Impl0.getPublicId();
      locator2Impl0.getColumnNumber();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.setDocumentLocator(locator2Impl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl0);
      xMLFilterImpl5.startElement((String) null, "", (String) null, attributesImpl0);
      xMLFilterImpl5.getDTDHandler();
      xMLFilterImpl4.unparsedEntityDecl((String) null, (String) null, (String) null, (String) null);
      xMLFilterImpl0.resolveEntity((String) null, "");
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl2);
      xMLFilterImpl3.setDTDHandler(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      xMLReaderAdapter0.setErrorHandler(xMLFilterImpl2);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl3);
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      locator2Impl0.setPublicId("");
      XMLFilterImpl xMLFilterImpl9 = new XMLFilterImpl(xMLFilterImpl8);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      xMLFilterImpl3.setDocumentLocator(locator2Impl1);
      XMLFilterImpl xMLFilterImpl10 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl6.setDTDHandler(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl11 = new XMLFilterImpl();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.getQueueConnectionFactory((-669));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Predicate<Locale.LanguageRange> predicate0 = Predicate.isEqual((Object) xMLFilterImpl0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate1.and(predicate2);
      Predicate<Locale.LanguageRange> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate1.negate();
      predicate5.or(predicate6);
      predicate0.negate();
      predicate0.and(predicate5);
      predicate5.or(predicate4);
      Predicate<Object> predicate7 = predicate4.negate();
      Predicate<Locale.LanguageRange> predicate8 = predicate0.negate();
      Predicate<Locale.LanguageRange> predicate9 = predicate0.negate();
      Predicate<Object> predicate10 = predicate7.and(predicate1);
      predicate6.and(predicate4);
      Predicate<Object> predicate11 = predicate2.or(predicate2);
      Predicate<Object> predicate12 = predicate7.or(predicate11);
      Predicate<Object> predicate13 = predicate12.and(predicate6);
      predicate9.and(predicate13);
      predicate13.negate();
      predicate0.negate();
      Predicate<Object> predicate14 = predicate7.or(predicate2);
      Predicate<Object> predicate15 = predicate6.negate();
      Predicate.isEqual((Object) predicate11);
      predicate1.and(predicate14);
      predicate2.test(xMLFilterImpl0);
      predicate15.test(predicate8);
      predicate0.and(predicate1);
      predicate6.and(predicate3);
      predicate9.or(predicate4);
      predicate11.negate();
      Predicate.isEqual((Object) predicate10);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getContentHandler();
      XATopicConnectionFactory[] xATopicConnectionFactoryArray0 = connectionFactories0.getXATopicConnectionFactory();
      assertEquals(0, xATopicConnectionFactoryArray0.length);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      StringWriter stringWriter0 = new StringWriter();
      connectionFactories0.getConnectionFactoryCount();
      stringWriter0.append('?');
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      unaryOperator0.apply(unaryOperator1);
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.getXAConnectionFactory((-2122));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.apply(unaryOperator1);
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.getXAConnectionFactory(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl();
      locatorImpl1.getLineNumber();
      locatorImpl0.getPublicId();
      locatorImpl0.getColumnNumber();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      locatorImpl1.getColumnNumber();
      xMLFilterImpl0.setDocumentLocator(locatorImpl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      xMLFilterImpl4.setDTDHandler(defaultHandler2_0);
      xMLFilterImpl4.unparsedEntityDecl((String) null, (String) null, (String) null, (String) null);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_1.resolveEntity((String) null, "");
      xMLFilterImpl4.setEntityResolver(xMLFilterImpl3);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl2);
      XMLReaderAdapter xMLReaderAdapter1 = new XMLReaderAdapter();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl0);
      xMLFilterImpl6.startElement("hzo@m9E(N{~I(^>#", (String) null, "", attributes2Impl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter1);
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl3);
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl9 = new XMLFilterImpl(xMLFilterImpl8);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      locator2Impl0.getLineNumber();
      xMLFilterImpl3.setDocumentLocator(locator2Impl0);
      XMLFilterImpl xMLFilterImpl10 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl6.setDTDHandler(xMLFilterImpl1);
      xMLFilterImpl6.setDocumentLocator(locatorImpl1);
      XMLFilterImpl xMLFilterImpl11 = new XMLFilterImpl(xMLFilterImpl4);
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      boolean boolean0 = connectionFactories0.isValid();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.562200162369491
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      File file0 = MockFile.createTempFile("JQ/hWX;*9xRZ:+qA8", "po+9@]@sU -wGC/.G");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "JQ/hWX;*9xRZ:+qA8");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append(')');
      connectionFactories0.marshal((Writer) printWriter0);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('?');
      String string0 = "";
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator1.apply(unaryOperator0);
      UnaryOperator.identity();
      Function<Object, Locale.LanguageRange> function1 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function.identity();
      UnaryOperator.identity();
      Function<Object, Locale.LanguageRange> function2 = unaryOperator3.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function1);
      UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function2);
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      function2.apply((Object) null);
      function2.andThen((Function<? super Locale.LanguageRange, ?>) unaryOperator2);
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      boolean boolean0 = connectionFactories0.isValid();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      unaryOperator1.apply(unaryOperator0);
      UnaryOperator.identity();
      Function<Object, Locale.LanguageRange> function1 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function.identity();
      UnaryOperator.identity();
      Function<Object, Locale.LanguageRange> function2 = unaryOperator3.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function1);
      UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function2);
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      function2.apply((Object) null);
      function2.andThen((Function<? super Locale.LanguageRange, ?>) unaryOperator2);
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      Enumeration enumeration0 = connectionFactories0.enumerateConnectionFactory();
      assertNotNull(enumeration0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      connectionFactories0.clearXAQueueConnectionFactory();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('?');
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      connectionFactories0.clearQueueConnectionFactory();
      assertEquals(0, connectionFactories0.getXATopicConnectionFactoryCount());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList2, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList4, (Collection<Locale>) list0, locale_FilteringMode0);
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      linkedList4.removeFirstOccurrence(locale_FilteringMode0);
      LinkedList<Locale> linkedList6 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList6, locale_FilteringMode2);
      LinkedList<Locale> linkedList7 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList8 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList9 = new LinkedList<Locale>();
      Locale locale0 = Locale.GERMAN;
      linkedList6.add(locale0);
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList12 = new LinkedList<Locale>();
      Locale.lookup(linkedList11, linkedList6);
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      linkedList11.retainAll(linkedList7);
      LinkedList<Locale> linkedList14 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList15 = new LinkedList<Locale.LanguageRange>();
      linkedList1.add((Locale) null);
      LinkedList<Locale> linkedList16 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList17 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList18 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList19 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList20 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode3);
      XATopicConnectionFactory xATopicConnectionFactory0 = new XATopicConnectionFactory();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.getXAQueueConnectionFactory(1492);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      SAXParseException sAXParseException0 = new SAXParseException("", "", "", (-669), (-669));
      locator2Impl1.getLineNumber();
      locator2Impl1.getPublicId();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl0);
      xMLFilterImpl1.unparsedEntityDecl((String) null, (String) null, (String) null, (String) null);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      locator2Impl0.setPublicId("rxxxxJY -o.Aei<Fiq");
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl2);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl1);
      xMLFilterImpl1.setDocumentLocator(locator2Impl3);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.getXAQueueConnectionFactory((-669));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      XAConnectionFactory xAConnectionFactory0 = new XAConnectionFactory();
      boolean boolean0 = connectionFactories0.removeXAConnectionFactory(xAConnectionFactory0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList2, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode2);
      Locale locale0 = Locale.JAPANESE;
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.retainAll(list0);
      linkedList1.add(locale0);
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode4);
      Locale locale1 = Locale.CANADA;
      locale1.getDisplayCountry();
      linkedList2.add(locale1);
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0, locale_FilteringMode0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Locale> linkedList6 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList8 = new LinkedList<Locale>();
      linkedList1.add(locale1);
      linkedList1.removeLastOccurrence(locale_FilteringMode3);
      Locale locale2 = Locale.FRANCE;
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList10 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2, locale_FilteringMode5);
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList7, (Collection<Locale>) linkedList1, locale_FilteringMode6);
      LinkedList<Locale> linkedList11 = new LinkedList<Locale>();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.getConnectionFactory(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Predicate<Locale.LanguageRange> predicate0 = Predicate.isEqual((Object) xMLFilterImpl0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate0.negate();
      predicate0.and(predicate0);
      Predicate<Locale.LanguageRange> predicate5 = predicate0.or(predicate3);
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Locale.LanguageRange> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate6.and(predicate1);
      Predicate<Object> predicate9 = predicate2.or(predicate2);
      predicate5.negate();
      Predicate<Object> predicate10 = predicate6.or(predicate9);
      predicate4.or(predicate2);
      Predicate<Object> predicate11 = predicate10.and(predicate4);
      predicate7.and(predicate11);
      predicate11.negate();
      predicate0.negate();
      Predicate<Object> predicate12 = predicate4.negate();
      predicate12.test(predicate0);
      predicate0.and(predicate1);
      predicate7.or(predicate3);
      Predicate<Object> predicate13 = predicate12.negate();
      Predicate<Object> predicate14 = Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate15 = predicate13.negate();
      predicate1.or(predicate15);
      Predicate<Object> predicate16 = predicate12.and(predicate14);
      predicate0.negate();
      Predicate<Object> predicate17 = predicate16.negate();
      Predicate<Object> predicate18 = predicate17.negate();
      predicate15.and(predicate11);
      predicate14.and(predicate11);
      predicate18.negate();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.getConnectionFactory(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale locale0 = Locale.JAPAN;
      linkedList2.offerFirst(locale0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList6 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList7 = new LinkedList<Locale>();
      linkedList5.removeFirstOccurrence(locale_FilteringMode0);
      LinkedList<Locale> linkedList8 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList9 = new LinkedList<Locale>();
      linkedList7.poll();
      LinkedList<Locale> linkedList10 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList11 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList12 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList14 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList15 = new LinkedList<Locale>();
      Locale.lookup(linkedList14, linkedList6);
      LinkedList<Locale> linkedList16 = new LinkedList<Locale>();
      Locale locale1 = Locale.GERMAN;
      linkedList12.add(locale1);
      LinkedList<Locale> linkedList17 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList18 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList19 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList20 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList21 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList22 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList23 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList24 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList25 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList26 = new LinkedList<Locale.LanguageRange>();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      QueueConnectionFactory queueConnectionFactory0 = new QueueConnectionFactory();
      connectionFactories0.addQueueConnectionFactory(queueConnectionFactory0);
      QueueConnectionFactory[] queueConnectionFactoryArray0 = connectionFactories0.getQueueConnectionFactory();
      connectionFactories0.setQueueConnectionFactory(queueConnectionFactoryArray0);
      assertEquals(1, connectionFactories0.getQueueConnectionFactoryCount());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$(E/j9hRW=");
      try { 
        ConnectionFactories.unmarshal(stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Error : Content is not allowed in prolog.
         // Line : 1
         // Column : 1
         //
         verifyException("org.exolab.castor.xml.Unmarshaller", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl();
      locatorImpl1.getLineNumber();
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = '\'';
      charArray0[2] = 'F';
      charArray0[3] = '/';
      charArray0[4] = 'X';
      xMLFilterImpl1.characters(charArray0, (-2174), (-2174));
      locatorImpl0.getPublicId();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      locatorImpl1.getColumnNumber();
      xMLFilterImpl0.setDocumentLocator(locatorImpl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl5.getDTDHandler();
      xMLFilterImpl4.setDTDHandler((DTDHandler) null);
      xMLFilterImpl4.unparsedEntityDecl((String) null, (String) null, (String) null, (String) null);
      xMLFilterImpl4.setEntityResolver(xMLFilterImpl3);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl2);
      xMLFilterImpl1.getErrorHandler();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributesImpl0);
      attributesImpl0.getIndex("hzo@m9E(N{~I(^>#", "hzo@m9E(N{~I(^>#");
      attributes2Impl1.getType("text");
      xMLFilterImpl6.startElement("hzo@m9E(N{~I(^>#", (String) null, "`_H|G^<lyEm;hS", attributes2Impl1);
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl(xMLFilterImpl3);
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl9 = new XMLFilterImpl(xMLFilterImpl8);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      xMLFilterImpl3.setDocumentLocator(locator2Impl0);
      XMLFilterImpl xMLFilterImpl10 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl6.setDTDHandler(xMLFilterImpl1);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      try { 
        connectionFactories0.getXATopicConnectionFactory((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.config.ConnectionFactories", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ConnectionFactories connectionFactories0 = new ConnectionFactories();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getContentHandler();
      // Undeclared exception!
      try { 
        connectionFactories0.marshal((ContentHandler) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'handler' is null.
         //
         verifyException("org.exolab.castor.xml.Marshaller", e);
      }
  }
}
