/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 05:38:50 GMT 2020
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URL;
import java.nio.charset.Charset;
import java.security.CodeSource;
import java.security.PermissionCollection;
import java.security.Principal;
import java.security.ProtectionDomain;
import java.security.UnresolvedPermission;
import java.security.cert.Certificate;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.function.Predicate;
import javax.management.remote.JMXPrincipal;
import javax.security.auth.Subject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.DatabaseParameterBuffer;
import org.firebirdsql.gds.IscDbHandle;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.gds.impl.jni.EmbeddedGDSImpl;
import org.firebirdsql.gds.impl.jni.isc_tr_handle_impl;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.gds.impl.wire.isc_db_handle_impl;
import org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl;
import org.firebirdsql.gds.impl.wire.isc_svc_handle_impl;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.field.FBCachedBlobField;
import org.firebirdsql.jdbc.field.FBLongVarCharField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0805571600284205
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%d\"vVD<l;9VSh>ZFN");
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.setFetchSize(255);
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.last();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.absolute(255);
      byte[][] byteArray0 = new byte[2][3];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)69;
      byteArray1[1] = (byte) (-54);
      byteArray1[2] = (byte)0;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray0[1] = byteArray2;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1192809219098505
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      isc_tr_handle_impl isc_tr_handle_impl1 = new isc_tr_handle_impl();
      IscDbHandle iscDbHandle0 = javaGDSImpl0.createIscDbHandle();
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      org.firebirdsql.gds.impl.wire.isc_tr_handle_impl isc_tr_handle_impl2 = new org.firebirdsql.gds.impl.wire.isc_tr_handle_impl();
      isc_tr_handle_impl2.getDbHandle();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl1, databaseParameterBufferImp0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      JavaGDSImpl javaGDSImpl2 = new JavaGDSImpl();
      javaGDSImpl1.createDatabaseParameterBuffer();
      org.firebirdsql.gds.impl.wire.isc_tr_handle_impl isc_tr_handle_impl3 = new org.firebirdsql.gds.impl.wire.isc_tr_handle_impl();
      isc_tr_handle_impl3.getDbHandle();
      GDSHelper gDSHelper1 = new GDSHelper(javaGDSImpl2, databaseParameterBufferImp0, (IscDbHandle) null, (GDSHelper.GDSHelperErrorListener) null);
      GDSHelper gDSHelper2 = new GDSHelper(javaGDSImpl1, databaseParameterBufferImp0, iscDbHandle0, (GDSHelper.GDSHelperErrorListener) null);
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.isEmpty();
      fBCachedFetcher0.next();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.isFirst();
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1715460305537655
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      Integer integer0 = new Integer(2297);
      Integer integer1 = new Integer(2297);
      Integer integer2 = new Integer(2297);
      Integer.min(335544570, 335544570);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer2;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.next();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.absolute((-1));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9085352816435597
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      linkedList0.add((byte[][]) null);
      jMXPrincipal0.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{0>}RN^,");
      jMXPrincipal0.toString();
      linkedList0.add((byte[][]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.clear();
      linkedList0.add((byte[][]) null);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      linkedList0.retainAll(set0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList2.add((byte[][]) null);
      linkedList2.add((byte[][]) null);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.isLast();
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.4142790651247086
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      Integer integer0 = new Integer(2297);
      Integer integer1 = new Integer(4325);
      Integer integer2 = new Integer(4325);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer2;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate2.and(predicate1);
      Predicate.isEqual((Object) integer0);
      Object object0 = new Object();
      Object object1 = new Object();
      predicate1.test(object1);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate0.or(predicate3);
      Integer integer3 = new Integer((-720));
      Predicate.isEqual((Object) integer3);
      predicate1.negate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.absolute((-720));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.809514255849282
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      Subject subject0 = new Subject();
      Class<Delayed> class0 = Delayed.class;
      subject0.getPublicCredentials(class0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(843);
      Thread thread0 = MockThread.currentThread();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule((Runnable) thread0, (long) 843, timeUnit0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      scheduledThreadPoolExecutor0.schedule((Runnable) thread0, (long) 843, timeUnit0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      delayQueue0.offer((Delayed) scheduledFuture0, (-1002L), timeUnit1);
      delayQueue0.toArray();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      linkedList0.add((byte[][]) null);
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.getRowNum();
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8413903748459728
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      Subject subject0 = new Subject();
      Class<Delayed> class0 = Delayed.class;
      subject0.getPublicCredentials(class0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(843, threadPoolExecutor_CallerRunsPolicy0);
      Thread thread0 = MockThread.currentThread();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule((Runnable) thread0, (long) 843, timeUnit0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      scheduledThreadPoolExecutor0.schedule((Runnable) thread0, (long) 843, timeUnit0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      delayQueue0.offer((Delayed) scheduledFuture0, (-1002L), timeUnit1);
      delayQueue0.toArray();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("hX]$yc");
      jMXPrincipal0.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hX]$yc");
      JMXPrincipal jMXPrincipal1 = new JMXPrincipal("JMXPrincipal:  hX]$yc");
      jMXPrincipal1.toString();
      linkedList0.add((byte[][]) null);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      linkedList1.retainAll(linkedList0);
      linkedList1.add((byte[][]) null);
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.insertRow((byte[][]) null);
      byte[][] byteArray0 = new byte[3][9];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-103);
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte) (-120);
      byteArray1[3] = (byte) (-17);
      byteArray1[4] = (byte) (-93);
      byteArray1[5] = (byte)60;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-103);
      byteArray2[1] = (byte)91;
      byteArray2[2] = (byte)12;
      byteArray2[3] = (byte) (-4);
      byteArray2[4] = (byte)12;
      byteArray2[5] = (byte)12;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte) (-93);
      byteArray3[1] = (byte)12;
      byteArray3[2] = (byte) (-17);
      byteArray3[3] = (byte) (-17);
      byteArray0[2] = byteArray3;
      fBCachedFetcher0.updateRow(byteArray0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.913303656753166
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      DelayQueue<Delayed> delayQueue1 = new DelayQueue<Delayed>();
      delayQueue1.toArray();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("Result set is TYPE_FORWARD_ONLY");
      linkedList0.add((byte[][]) null);
      jMXPrincipal0.toString();
      jMXPrincipal0.toString();
      linkedList0.removeLastOccurrence("JMXPrincipal:  Result set is TYPE_FORWARD_ONLY");
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList2.add((byte[][]) null);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList1.add((byte[][]) null);
      linkedList2.retainAll(linkedList0);
      linkedList2.add((byte[][]) null);
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList2);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList3, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.first();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.isAfterLast();
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0069548922107656
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(843, threadPoolExecutor_CallerRunsPolicy0);
      scheduledThreadPoolExecutor0.getCorePoolSize();
      Thread thread0 = MockThread.currentThread();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      scheduledThreadPoolExecutor0.schedule((Runnable) thread0, (long) 843, timeUnit0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("Result set is TYPE_FORWARD_ONLY");
      linkedList0.add((byte[][]) null);
      jMXPrincipal0.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JMXPrincipal:  Result set is TYPE_FORWARD_ONLY");
      jMXPrincipal0.toString();
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.next();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.deleteRow();
      assertEquals(1, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8848713335781606
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      DelayQueue<Delayed> delayQueue1 = new DelayQueue<Delayed>();
      delayQueue1.toArray();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      linkedList0.add((byte[][]) null);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList2.add((byte[][]) null);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList1.add((byte[][]) null);
      linkedList2.retainAll(linkedList0);
      linkedList2.add((byte[][]) null);
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList2);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList3, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8734517375545654
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      Integer integer0 = new Integer(2297);
      Integer integer1 = new Integer(2297);
      Integer integer2 = new Integer(4325);
      Integer integer3 = new Integer(2297);
      Integer.min(335544570, 335544570);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer3;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.next();
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1715460305537655
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      DelayQueue<Delayed> delayQueue1 = new DelayQueue<Delayed>();
      delayQueue1.toArray();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("Result set is TYPE_FORWARD_ONLY");
      linkedList0.add((byte[][]) null);
      jMXPrincipal0.toString();
      jMXPrincipal0.toString();
      linkedList0.removeLastOccurrence("Result set is TYPE_FORWARD_ONLY");
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.add((byte[][]) null);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      linkedList1.retainAll(linkedList0);
      linkedList0.add((byte[][]) null);
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.next();
      fBCachedFetcher0.previous();
      boolean boolean0 = fBCachedFetcher0.relative(0);
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      Integer integer0 = new Integer(2297);
      Integer integer1 = new Integer(2297);
      Integer integer2 = new Integer(4325);
      Integer integer3 = new Integer(4325);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer4 = new Integer((-3501));
      Integer.getInteger((String) null, integer4);
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      linkedList0.toArray(integerArray0);
      XSQLVAR[] xSQLVARArray1 = new XSQLVAR[0];
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray1, linkedList0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.last();
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.711845135233912
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(843, threadPoolExecutor_CallerRunsPolicy0);
      scheduledThreadPoolExecutor0.getCorePoolSize();
      Thread thread0 = MockThread.currentThread();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      scheduledThreadPoolExecutor0.schedule((Runnable) thread0, (long) 843, timeUnit0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("Result set is TYPE_FORWARD_ONLY");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Result set is TYPE_FORWARD_ONLY");
      jMXPrincipal0.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JMXPrincipal:  Result set is TYPE_FORWARD_ONLY");
      jMXPrincipal0.toString();
      linkedList0.add((byte[][]) null);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      linkedList0.retainAll(linkedList0);
      linkedList0.add((byte[][]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JMXPrincipal:  Result set is TYPE_FORWARD_ONLY");
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Object object0 = new Object();
      SynchronousQueue<FBCachedBlobField> synchronousQueue0 = new SynchronousQueue<FBCachedBlobField>();
      synchronousQueue0.spliterator();
      DelayQueue<Delayed> delayQueue1 = new DelayQueue<Delayed>();
      delayQueue1.removeAll(linkedList0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      linkedList0.add((byte[][]) null);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList3, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.isAfterLast();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      linkedList2.add((byte[][]) null);
      linkedList2.add((byte[][]) null);
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList3);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList1, fBResultSet1);
      byte[][] byteArray1 = new byte[0][4];
      fBCachedFetcher1.insertRow(byteArray1);
      boolean boolean1 = fBCachedFetcher1.isBeforeFirst();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][1];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)34;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)34;
      byteArray2[1] = (byte)34;
      byteArray2[2] = (byte)34;
      byteArray2[3] = (byte)34;
      byteArray2[4] = (byte)34;
      byteArray2[5] = (byte)34;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte) (-40);
      byteArray3[1] = (byte) (-113);
      byteArray3[2] = (byte)34;
      byteArray3[3] = (byte)34;
      byteArray3[4] = (byte)34;
      byteArray3[5] = (byte)34;
      byteArray0[2] = byteArray3;
      linkedList0.add(byteArray0);
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte) (-67);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      Integer integer0 = new Integer(2297);
      Integer integer1 = new Integer(2297);
      Integer integer2 = new Integer(4325);
      Object object0 = new Object();
      Predicate<FBLongVarCharField> predicate0 = Predicate.isEqual(object0);
      Object object1 = new Object();
      Predicate<Object> predicate1 = Predicate.isEqual(object1);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      Object object2 = new Object();
      predicate3.test(object2);
      predicate4.and(predicate2);
      predicate1.negate();
      predicate0.negate();
      Predicate<Object> predicate5 = predicate2.and(predicate1);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate4.and(predicate6);
      predicate2.and(predicate4);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate3);
      Object object3 = new Object();
      predicate7.test(integer0);
      predicate1.negate();
      Predicate.isEqual(object1);
      predicate8.negate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.absolute(2297);
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((List<byte[][]>) null, (FBObjectListener.FetcherListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][9];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-67);
      byteArray0[1] = byteArray1;
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      linkedList0.removeLastOccurrence(byteArray1);
      SynchronousQueue<FBCachedBlobField> synchronousQueue0 = new SynchronousQueue<FBCachedBlobField>();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.removeAll(synchronousQueue0);
      delayQueue0.poll();
      Integer integer0 = new Integer((byte) (-67));
      linkedList0.removeLastOccurrence(integer0);
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.deepCopy();
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp2 = new DatabaseParameterBufferImp();
      isc_tr_handle_impl isc_tr_handle_impl1 = new isc_tr_handle_impl();
      isc_tr_handle_impl0.getDbHandle();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp1, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl0.createDatabaseParameterBuffer();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener1 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper1 = new GDSHelper(javaGDSImpl0, databaseParameterBuffer0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener1);
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3579778549873243
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][4];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)43;
      byteArray1[1] = (byte)38;
      byteArray1[2] = (byte) (-95);
      byteArray1[3] = (byte)9;
      byteArray1[4] = (byte) (-35);
      byteArray1[5] = (byte)46;
      byteArray1[6] = (byte)39;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)38;
      byteArray2[1] = (byte)9;
      byteArray2[2] = (byte)46;
      byteArray2[3] = (byte)46;
      byteArray2[4] = (byte)43;
      byteArray2[5] = (byte) (-95);
      byteArray2[6] = (byte)43;
      byteArray2[7] = (byte)39;
      byteArray0[1] = byteArray2;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.711845135233912
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(843, threadPoolExecutor_CallerRunsPolicy0);
      scheduledThreadPoolExecutor0.getCorePoolSize();
      Thread thread0 = MockThread.currentThread();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      scheduledThreadPoolExecutor0.schedule((Runnable) thread0, (long) 843, timeUnit0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("Result set is TYPE_FORWARD_ONLY");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Result set is TYPE_FORWARD_ONLY");
      jMXPrincipal0.toString();
      jMXPrincipal0.toString();
      linkedList0.add((byte[][]) null);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      linkedList0.retainAll(linkedList0);
      linkedList0.add((byte[][]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JMXPrincipal:  Result set is TYPE_FORWARD_ONLY");
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      assertFalse(fBCachedFetcher0.isLast());
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][3];
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate5.and(predicate3);
      Predicate<Object> predicate7 = predicate5.and(predicate0);
      Integer integer0 = new Integer((-75));
      predicate2.test(predicate0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      predicate6.test((Object) null);
      Predicate.isEqual((Object) predicate7);
      predicate3.and(predicate0);
      Predicate.isEqual((Object) predicate7);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Predicate<Object> predicate8 = predicate6.negate();
      linkedList0.removeIf(predicate8);
      DelayQueue<Delayed> delayQueue1 = new DelayQueue<Delayed>();
      Object object1 = new Object();
      linkedList0.offerLast(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute(511);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4142790651247086
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][3];
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate2.negate();
      predicate0.and(predicate1);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate.isEqual((Object) predicate6);
      Predicate<Object> predicate7 = predicate4.negate();
      Predicate<Object> predicate8 = predicate6.and(predicate3);
      Predicate<Object> predicate9 = predicate6.and(predicate0);
      Integer integer0 = new Integer((-108));
      predicate4.and(predicate3);
      predicate2.test(predicate7);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Object object0 = new Object();
      Predicate<Object> predicate10 = predicate3.negate();
      predicate4.test(object0);
      Object object1 = new Object();
      predicate9.test(object1);
      delayQueue0.peek();
      predicate8.test((Object) null);
      predicate9.test("");
      predicate10.negate();
      Predicate<Object> predicate11 = predicate1.or(predicate0);
      predicate4.and(predicate2);
      linkedList0.removeIf(predicate11);
      DelayQueue<Delayed> delayQueue1 = new DelayQueue<Delayed>();
      Object object2 = new Object();
      linkedList0.offerLast(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute((-108));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[][] byteArray0 = new byte[6][7];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.559581156259877
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][3];
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate1.or(predicate3);
      Predicate<Object> predicate7 = predicate5.and(predicate4);
      Predicate<Object> predicate8 = predicate7.and(predicate0);
      Object object0 = new Object();
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate10 = predicate9.negate();
      predicate7.or(predicate10);
      predicate0.test(object0);
      Predicate<Object> predicate11 = predicate5.and(predicate3);
      Predicate<FBLongVarCharField> predicate12 = Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate13 = predicate1.or(predicate6);
      Predicate<Object> predicate14 = predicate13.and(predicate11);
      Predicate<Object> predicate15 = predicate8.and(predicate11);
      predicate14.and(predicate15);
      predicate14.and(predicate4);
      Predicate.isEqual((Object) predicate12);
      Integer integer0 = new Integer(161);
      Object object1 = new Object();
      predicate4.test(object1);
      Predicate<Object> predicate16 = predicate13.negate();
      predicate1.negate();
      predicate7.and(predicate2);
      linkedList0.removeIf(predicate16);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Object object2 = new Object();
      linkedList0.offerLast(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      
      fBCachedFetcher0.updateRow(byteArray0);
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      isc_tr_handle_impl isc_tr_handle_impl1 = new isc_tr_handle_impl();
      isc_tr_handle_impl0.getDbHandle();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp1, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl0.createDatabaseParameterBuffer();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener1 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper1 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener1);
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener2 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper2 = new GDSHelper(javaGDSImpl0, databaseParameterBuffer0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener2);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher(gDSHelper2, (-349), 1, isc_stmt_handle_impl0, (FBObjectListener.FetcherListener) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][1];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-80);
      Object object0 = new Object();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("JgFH=~}_`EF]ykC)");
      jMXPrincipal0.toString();
      linkedList0.removeLastOccurrence(jMXPrincipal0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList3.add(byteArray0);
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      linkedList3.add(byteArray0);
      linkedList3.add(byteArray0);
      linkedList3.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList2);
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList3, fBResultSet1);
      boolean boolean0 = fBCachedFetcher0.last();
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6731183626432506
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      byte[][] byteArray0 = new byte[6][7];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray1 = new byte[0][7];
      linkedList0.add(byteArray1);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.beforeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      byte[][] byteArray0 = new byte[4][5];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)53;
      byteArray1[1] = (byte)81;
      byteArray1[2] = (byte) (-31);
      byteArray1[3] = (byte) (-35);
      byteArray1[4] = (byte) (-31);
      byteArray1[5] = (byte) (-81);
      byteArray1[6] = (byte)42;
      byteArray1[7] = (byte)39;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[0];
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)81;
      byteArray4[1] = (byte)53;
      byteArray4[2] = (byte) (-31);
      byteArray4[3] = (byte)81;
      byteArray4[4] = (byte) (-35);
      byteArray4[5] = (byte) (-35);
      byteArray4[6] = (byte) (-35);
      byteArray0[3] = byteArray4;
      linkedList0.add(byteArray0);
      Predicate<Object> predicate5 = predicate1.or(predicate3);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate6.and(predicate0);
      Object object0 = new Object();
      predicate1.or(predicate5);
      predicate4.test(object0);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate9 = predicate8.negate();
      predicate6.or(predicate9);
      Predicate<Object> predicate10 = predicate2.and(predicate3);
      Predicate<FBLongVarCharField> predicate11 = Predicate.isEqual((Object) predicate7);
      Predicate<Object> predicate12 = predicate1.or(predicate5);
      predicate0.test(predicate1);
      Predicate<Object> predicate13 = predicate12.and(predicate10);
      Predicate<Object> predicate14 = predicate13.negate();
      predicate11.negate();
      Predicate<Object> predicate15 = predicate7.and(predicate10);
      Predicate<Object> predicate16 = predicate13.and(predicate15);
      predicate13.and(predicate4);
      predicate15.test(predicate5);
      predicate13.and(predicate14);
      Predicate.isEqual((Object) predicate15);
      predicate16.negate();
      predicate2.negate();
      predicate16.negate();
      predicate4.negate();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][3];
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate5.and(predicate3);
      predicate5.and(predicate0);
      Integer integer0 = new Integer((-118));
      predicate2.test(predicate0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      predicate6.test((Object) null);
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.toArray();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      linkedList0.add((byte[][]) null);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("Result set is TYPE_FORWARD_ONLY");
      ProtectionDomain[] protectionDomainArray0 = new ProtectionDomain[5];
      URL uRL0 = MockURL.getHttpExample();
      Certificate[] certificateArray0 = new Certificate[6];
      Certificate certificate0 = mock(Certificate.class, new ViolatedAssumptionAnswer());
      certificateArray0[0] = certificate0;
      certificateArray0[1] = certificate0;
      certificateArray0[2] = certificate0;
      certificateArray0[3] = certificate0;
      certificateArray0[4] = certificate0;
      certificateArray0[5] = certificate0;
      CodeSource codeSource0 = new CodeSource(uRL0, certificateArray0);
      UnresolvedPermission unresolvedPermission0 = new UnresolvedPermission("Result set is TYPE_FORWARD_ONLY", " could not be found.", " could not be found.", certificateArray0);
      PermissionCollection permissionCollection0 = unresolvedPermission0.newPermissionCollection();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0);
      MockThread mockThread1 = new MockThread(mockThread0, "");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      Principal[] principalArray0 = new Principal[2];
      principalArray0[0] = (Principal) jMXPrincipal0;
      principalArray0[1] = (Principal) jMXPrincipal0;
      ProtectionDomain protectionDomain0 = new ProtectionDomain(codeSource0, permissionCollection0, classLoader0, principalArray0);
      protectionDomainArray0[1] = protectionDomain0;
      ProtectionDomain protectionDomain1 = new ProtectionDomain(codeSource0, permissionCollection0, classLoader0, principalArray0);
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet1);
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      javaGDSImpl1.createIscDbHandle();
      JavaGDSImpl javaGDSImpl2 = new JavaGDSImpl();
      org.firebirdsql.gds.impl.wire.isc_tr_handle_impl isc_tr_handle_impl1 = new org.firebirdsql.gds.impl.wire.isc_tr_handle_impl();
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      JavaGDSImpl javaGDSImpl3 = new JavaGDSImpl();
      org.firebirdsql.gds.impl.wire.isc_tr_handle_impl isc_tr_handle_impl2 = new org.firebirdsql.gds.impl.wire.isc_tr_handle_impl();
      isc_tr_handle_impl1.getDbHandle();
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      JavaGDSImpl javaGDSImpl4 = new JavaGDSImpl();
      javaGDSImpl3.receiveResponse(isc_svc_handle_impl0, (-1257));
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][5];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      byteArray0[1] = byteArray2;
      linkedList0.push(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.and(predicate0);
      predicate1.and(predicate0);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate2);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate6.and(predicate0);
      Object object0 = new Object();
      predicate1.or(predicate5);
      predicate3.test(object0);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<Object> predicate10 = predicate6.or(predicate9);
      Predicate<Object> predicate11 = predicate4.and(predicate2);
      Predicate<FBLongVarCharField> predicate12 = Predicate.isEqual((Object) predicate7);
      Predicate<Object> predicate13 = predicate1.or(predicate5);
      predicate0.test(predicate1);
      Predicate<Object> predicate14 = predicate13.and(predicate11);
      Predicate<Object> predicate15 = predicate14.negate();
      predicate12.negate();
      Predicate<Object> predicate16 = predicate7.and(predicate11);
      Predicate<Object> predicate17 = predicate14.and(predicate16);
      predicate14.and(predicate3);
      predicate16.test(predicate5);
      predicate14.and(predicate15);
      Predicate.isEqual((Object) predicate16);
      predicate17.negate();
      predicate3.negate();
      linkedList0.removeIf(predicate10);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.relative((-2820));
      assertFalse(boolean0);
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.544824428855209
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate.isEqual((Object) predicate1);
      predicate0.or(predicate1);
      predicate1.test((Object) null);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate0.and(predicate1);
      predicate1.or(predicate2);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      predicate3.and(predicate0);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate4 = predicate3.negate();
      linkedList0.removeIf(predicate4);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.next();
      fBCachedFetcher0.setFetchSize(73);
      fBCachedFetcher0.isFirst();
      fBCachedFetcher0.relative(73);
      fBCachedFetcher0.absolute(1899);
      fBCachedFetcher0.beforeFirst();
      fBCachedFetcher0.isLast();
      byte[][] byteArray0 = new byte[7][4];
      fBCachedFetcher0.previous();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.and(predicate0);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate2);
      Predicate<Object> predicate6 = predicate4.and(predicate3);
      Predicate<Object> predicate7 = predicate6.and(predicate0);
      Object object0 = new Object();
      predicate7.test(predicate3);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate9 = predicate8.negate();
      predicate6.or(predicate9);
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate11 = predicate1.or(predicate5);
      Predicate<Object> predicate12 = predicate11.and(predicate10);
      Predicate<Object> predicate13 = predicate7.and(predicate10);
      predicate12.and(predicate13);
      Predicate<Object> predicate14 = predicate12.and(predicate3);
      Object object1 = new Object();
      predicate8.and(predicate12);
      Predicate.isEqual((Object) predicate0);
      predicate14.negate();
      linkedList0.removeIf(predicate1);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      try { 
        fBCachedFetcher0.absolute(0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate1.and(predicate0);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate1.or(predicate3);
      Predicate<Object> predicate7 = predicate0.or(predicate1);
      predicate6.or(predicate7);
      Predicate<Object> predicate8 = predicate4.and(predicate0);
      Object object1 = new Object();
      predicate8.test(predicate4);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate10 = predicate9.negate();
      predicate2.or(predicate10);
      Predicate<Object> predicate11 = predicate6.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate12 = predicate1.or(predicate6);
      predicate3.negate();
      predicate12.and(predicate11);
      predicate8.and(predicate11);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("0i");
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[0][6];
      linkedList1.add(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isEmpty();
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0549201679861442
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][3];
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate5.and(predicate3);
      Predicate<Object> predicate7 = predicate5.and(predicate0);
      Integer integer0 = new Integer((-108));
      predicate2.test(predicate0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      Object object0 = new Object();
      predicate3.negate();
      predicate4.test(object0);
      Object object1 = new Object();
      predicate7.test(object1);
      delayQueue0.peek();
      predicate6.test((Object) null);
      Predicate.isEqual((Object) predicate7);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate7);
      predicate8.negate();
      linkedList0.removeIf(predicate1);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      DelayQueue<Delayed> delayQueue1 = new DelayQueue<Delayed>();
      delayQueue0.toArray();
      Object object2 = new Object();
      linkedList1.offerLast(byteArray0);
      linkedList1.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isBeforeFirst();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[7][3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isBeforeFirst();
      assertFalse(boolean0);
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[6][7];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.clear();
      fBCachedFetcher0.close();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList2.add(byteArray0);
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSType gDSType0 = GDSType.getType("PURE_JAVA");
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      FBManagedConnectionFactory fBManagedConnectionFactory1 = new FBManagedConnectionFactory(gDSType0, fBConnectionProperties0);
      FBManagedConnectionFactory fBManagedConnectionFactory2 = new FBManagedConnectionFactory(gDSType0, fBConnectionProperties0);
      // Undeclared exception!
      try { 
        fBManagedConnectionFactory2.getDefaultConnectionRequestInfo();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified GDS type PURE_JAVA is unknown.
         //
         verifyException("org.firebirdsql.gds.impl.GDSFactory", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7479662368880953
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Predicate.isEqual((Object) linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.afterLast();
      Integer integer0 = new Integer(100);
      fBCachedFetcher0.absolute(100);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher1.next();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.afterLast();
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6731183626432506
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[7][3];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-67);
      byteArray1[1] = (byte) (-1);
      byteArray0[0] = byteArray1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-1);
      linkedList0.add(byteArray0);
      linkedList0.clear();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.afterLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      isc_tr_handle_impl0.getDbHandle();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp1, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      javaGDSImpl0.createDatabaseParameterBuffer();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener1 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper1 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp1, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener1);
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener2 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper2 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener2);
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      isc_svc_handle_impl0.setResp_blob_id(262L);
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      javaGDSImpl1.receiveResponse(isc_svc_handle_impl0, (-402));
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.first();
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate1.or(predicate4);
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate8.and(predicate0);
      Object object0 = new Object();
      predicate1.or(predicate7);
      predicate5.test(object0);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate6);
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = predicate8.or(predicate11);
      Predicate<Object> predicate13 = predicate6.and(predicate4);
      Predicate<FBLongVarCharField> predicate14 = Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate15 = predicate1.or(predicate7);
      predicate0.test(predicate1);
      Predicate<Object> predicate16 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate17 = predicate16.and(predicate3);
      predicate13.and(predicate17);
      Predicate<Object> predicate18 = predicate15.and(predicate13);
      predicate18.negate();
      predicate14.negate();
      Predicate<Object> predicate19 = predicate9.and(predicate13);
      predicate18.and(predicate19);
      predicate18.and(predicate5);
      Predicate.isEqual((Object) predicate14);
      Object object1 = new Object();
      predicate5.test(object1);
      predicate12.negate();
      Predicate.isEqual((Object) predicate2);
      predicate19.negate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.first();
      assertFalse(boolean0);
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate1.or(predicate4);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate7.and(predicate0);
      Object object0 = new Object();
      predicate1.or(predicate6);
      predicate5.test(object0);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate7.or(predicate10);
      Predicate<Object> predicate12 = predicate3.and(predicate4);
      Predicate<FBLongVarCharField> predicate13 = Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate14 = predicate1.or(predicate6);
      predicate0.test(predicate1);
      Predicate<Object> predicate15 = predicate14.and(predicate12);
      Predicate<Object> predicate16 = predicate15.negate();
      predicate13.negate();
      Predicate<Object> predicate17 = predicate8.and(predicate12);
      Predicate<Object> predicate18 = predicate15.and(predicate17);
      predicate15.and(predicate5);
      predicate17.test(predicate6);
      predicate15.and(predicate16);
      Predicate.isEqual((Object) predicate17);
      predicate18.negate();
      predicate2.negate();
      predicate18.negate();
      predicate5.negate();
      linkedList0.removeIf(predicate11);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.relative((-2820));
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate1.or(predicate4);
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate8.and(predicate0);
      Object object0 = new Object();
      predicate1.or(predicate7);
      predicate5.test(object0);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate6);
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = predicate8.or(predicate11);
      Predicate<Object> predicate13 = predicate6.and(predicate4);
      Predicate<FBLongVarCharField> predicate14 = Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate15 = predicate1.or(predicate7);
      predicate0.test(predicate1);
      Predicate<Object> predicate16 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate17 = predicate16.and(predicate3);
      predicate13.and(predicate17);
      Predicate<Object> predicate18 = predicate15.and(predicate13);
      predicate18.negate();
      predicate14.negate();
      Predicate<Object> predicate19 = predicate9.and(predicate13);
      predicate18.and(predicate19);
      predicate18.and(predicate5);
      predicate6.negate();
      Object object1 = new Object();
      predicate5.test(object1);
      predicate12.negate();
      Predicate.isEqual((Object) predicate2);
      predicate19.negate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertTrue(fBCachedFetcher0.isEmpty());
      
      boolean boolean0 = fBCachedFetcher0.first();
      assertFalse(boolean0);
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      linkedList0.add((byte[][]) null);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("Result set is TYPE_FORWARD_ONLY");
      ProtectionDomain[] protectionDomainArray0 = new ProtectionDomain[5];
      URL uRL0 = MockURL.getHttpExample();
      Certificate[] certificateArray0 = new Certificate[6];
      Certificate certificate0 = mock(Certificate.class, new ViolatedAssumptionAnswer());
      certificateArray0[0] = certificate0;
      certificateArray0[1] = certificate0;
      certificateArray0[2] = certificate0;
      certificateArray0[3] = certificate0;
      certificateArray0[4] = certificate0;
      certificateArray0[5] = certificate0;
      CodeSource codeSource0 = new CodeSource(uRL0, certificateArray0);
      UnresolvedPermission unresolvedPermission0 = new UnresolvedPermission("Result set is TYPE_FORWARD_ONLY", " could not be found.", " could not be found.", certificateArray0);
      PermissionCollection permissionCollection0 = unresolvedPermission0.newPermissionCollection();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0);
      MockThread mockThread1 = new MockThread(mockThread0, "");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      Principal[] principalArray0 = new Principal[2];
      principalArray0[0] = (Principal) jMXPrincipal0;
      principalArray0[1] = (Principal) jMXPrincipal0;
      ProtectionDomain protectionDomain0 = new ProtectionDomain(codeSource0, permissionCollection0, classLoader0, principalArray0);
      protectionDomainArray0[1] = protectionDomain0;
      ProtectionDomain protectionDomain1 = new ProtectionDomain(codeSource0, permissionCollection0, classLoader0, principalArray0);
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.previous();
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate1.and(predicate0);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate1.or(predicate3);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate7.and(predicate0);
      Object object0 = new Object();
      predicate1.or(predicate6);
      predicate4.test(object0);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate7.or(predicate10);
      Predicate<Object> predicate12 = predicate5.and(predicate3);
      Predicate<FBLongVarCharField> predicate13 = Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate14 = predicate1.or(predicate6);
      predicate0.test(predicate1);
      Predicate<Object> predicate15 = predicate14.and(predicate12);
      Predicate<Object> predicate16 = predicate15.negate();
      predicate13.negate();
      Predicate<Object> predicate17 = predicate8.and(predicate12);
      Predicate<Object> predicate18 = predicate15.and(predicate17);
      predicate15.and(predicate4);
      predicate17.test(predicate6);
      predicate15.and(predicate16);
      Predicate.isEqual((Object) predicate17);
      predicate18.negate();
      predicate4.negate();
      linkedList0.removeIf(predicate11);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }
}
