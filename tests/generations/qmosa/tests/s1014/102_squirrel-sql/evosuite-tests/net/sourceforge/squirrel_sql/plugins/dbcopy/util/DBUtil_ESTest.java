/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 04:01:51 GMT 2020
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.gargoylesoftware.base.resource.jdbc.CallableStatementWrapper;
import com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.beans.PropertyChangeEvent;
import java.io.File;
import java.net.URI;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverPropertyInfo;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JSpinner;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.plaf.basic.BasicCheckBoxUI;
import javax.swing.plaf.basic.BasicLabelUI;
import javax.swing.plaf.metal.MetalLabelUI;
import javax.swing.text.DefaultEditorKit;
import javax.swing.tree.DefaultTreeCellRenderer;
import net.sourceforge.squirrel_sql.client.IApplication;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAlias;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfo;
import net.sourceforge.squirrel_sql.client.util.ApplicationFileWrappersImpl;
import net.sourceforge.squirrel_sql.client.util.ApplicationFiles;
import net.sourceforge.squirrel_sql.fw.id.IntegerIdentifier;
import net.sourceforge.squirrel_sql.fw.id.UidIdentifier;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectType;
import net.sourceforge.squirrel_sql.fw.sql.ForeignKeyInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.SQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriver;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriverProperty;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriverPropertyCollection;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableInfo;
import net.sourceforge.squirrel_sql.fw.util.FileWrapper;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperFactoryImpl;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl;
import net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin;
import net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider;
import net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.DBCopyPreferenceBean;
import net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(2165);
      SQLDriver sQLDriver0 = new SQLDriver(uidIdentifier0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("SELECT last_value, max_value, min_value, cache_value, increment_by, is_cycled FROM ", "SELECT last_value, max_value, min_value, cache_value, increment_by, is_cycled FROM ", "zjT4jS3", "SELECT last_value, max_value, min_value, cache_value, increment_by, is_cycled FROM ", 93, "SELECT last_value, max_value, min_value, cache_value, increment_by, is_cycled FROM ", 31, 1854, 16, 2310, "l", "*%?~GMdKt-pk", (-125), (-1708), "eJn)R=");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.DATATYPE;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SEQUENCE;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.UDF_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      DatabaseObjectType.createNewDatabaseObjectType("SELECT last_value, max_value, min_value, cache_value, increment_by, is_cycled FROM ");
      DatabaseObjectType.createNewDatabaseObjectType("Us(;&kZB$'Y*X");
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPluginAppSettingsFolder();
      Vector<IDatabaseObjectInfo> vector0 = new Vector<IDatabaseObjectInfo>();
      dBCopyPlugin0.setSourceDatabaseObjects(vector0);
      // Undeclared exception!
      try { 
        DBUtil.getCreateTableSql(dBCopyPlugin0, (ITableInfo) null, "6)aNeB5iZdOR ", "eJn)R=", "Us(;&kZB$'Y*X");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      applicationFiles1.getPluginsDirectory();
      applicationFiles1.getDatabaseAliasesFile_before_version_2_3();
      applicationFiles1.getPluginsDirectory();
      applicationFiles1.getUserSettingsDirectory();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultOpenIcon();
      DatabaseObjectType.createNewDatabaseObjectType("Unexpected exception while attempting to determine if a table (", icon0);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getDefaultIcon();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.createNewDatabaseObjectType("j7Ww{KqWtCK:", icon0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SEQUENCE;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("7U9Cabf", "GCo]<=1*/LY*]ZV9-", "GCo]<=1*/LY*]ZV9-", "7U9Cabf", 2004, (String) null, 2004, 2004, 2004, 2004, (String) null, "j7Ww{KqWtCK:", 2004, 2004, "j7Ww{KqWtCK:");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      Icon icon1 = databaseObjectType1.getIcon();
      DatabaseObjectType.createNewDatabaseObjectType("GCo]<=1*/LY*]ZV9-", icon1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.createNewDatabaseObjectType((String) null);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.SESSION;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|)y.IOBKZ&z");
      // Undeclared exception!
      try { 
        DBUtil.bindVariable((PreparedStatement) null, 1857, 1857, 1857, (ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9164648855394713
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<IDatabaseObjectInfo> linkedList0 = new LinkedList<IDatabaseObjectInfo>();
      UnaryOperator<IDatabaseObjectInfo> unaryOperator0 = UnaryOperator.identity();
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("ws=a)F')QV\"", "ws=a)F')QV\"", "ws=a)F')QV\"");
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      delayQueue0.poll(1048576L, timeUnit0);
      linkedList0.removeFirstOccurrence((Object) null);
      Function<Object, ForeignKeyInfo> function0 = (Function<Object, ForeignKeyInfo>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super DatabaseObjectInfo, ? extends IDatabaseObjectInfo>) function0);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDF;
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.poll();
      linkedList0.clear();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "1VsP!?fe3", "DTEs+B2{+w,[d_@]|gG", "DTEs+B2{+w,[d_@]|gG", (-1611), "DTEs+B2{+w,[d_@]|gG", 6, 1781, 1781, 8, "$I&XjC>re##1Zs-*5i", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (-4713), 8, "H0)D4!uLNpXDHW+z");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDF_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBUtil.isBinaryType(tableColumnInfo0);
      DBUtil.typesAreEquivalent(16, 1231);
      DBUtil.typesAreEquivalent(16, (-1611));
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      DBUtil.isBinaryType(tableColumnInfo0);
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.executeQuery((ISession) null, "DBUtil.info.bindcloblength");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9368883075390159
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicLabelUI basicLabelUI0 = new BasicLabelUI();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "Encountered unexpected exception while attempting to determine if schemas are used in table definitions", "select  'CREATE OR REPLACE VIEW ' || VIEW_NAME ||' AS ', TEXT ");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
      String string0 = "v7HbB/X|1W";
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, (String) null, "Encountered unexpected exception while attempting to determine if schemas are used in table definitions", (byte) (-4), "v7HbB/X|1W", (-186), 1003, (byte)118, 2003, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", " and catalog ", (-2466), (-186), ">e`&XWVngUDSv_");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDF_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DBUtil.isBinaryType(tableColumnInfo0);
      DBUtil.typesAreEquivalent((-1698), 12);
      DBUtil.typesAreEquivalent((byte)118, (-186));
      // Undeclared exception!
      try { 
        dBCopyPlugin0.initialize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("AV7tDR\":hV*Q=^/N", "*q8", "AV7tDR\":hV*Q=^/N", "AV7tDR\":hV*Q=^/N", 1111, "HASHED", 92, (-56), 1111, (-1010), "*q8", "\"|^m,:\"oD{", 92, 1529, "\"|^m,:\"oD{");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.setDestDatabaseObject(tableColumnInfo0);
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("object", "-h9~jH65MOMmPyX4");
      fileWrapperFactoryImpl0.create(fileWrapperImpl0);
      fileWrapperFactoryImpl0.createTempFile("Skipping FK (", "M/>D,<_H ");
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      fileWrapperFactoryImpl1.createTempFile("HASHED", "HASHED");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin0.setFileWrapperFactory(fileWrapperFactoryImpl1);
      ITableInfo iTableInfo0 = null;
      // Undeclared exception!
      try { 
        DBUtil.getInsertSQL(dBCopyPlugin0, "}#", (ITableInfo) null, 1111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPluginAppSettingsFolder();
      dBCopyPlugin0.getWebSite();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin0.getPluginUserSettingsFolder();
      dBCopyPlugin1.getWebSite();
      dBCopyPlugin1.getPluginUserSettingsFolder();
      dBCopyPlugin1.getPluginAppSettingsFolder();
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      dBCopyPlugin1.getPluginUserSettingsFolder();
      dBCopyPlugin0.getPluginAppSettingsFolder();
      DBCopyPlugin dBCopyPlugin3 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      DBCopyPlugin dBCopyPlugin4 = new DBCopyPlugin();
      dBCopyPlugin4.getPasteToTableInfo((ISQLConnection) null, (String) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      int int0 = DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, "yY3 Bbd=AJnI4-h.~g");
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "Q>Dk6C~[vDJ7^^U6[~", " add constraint ");
      DBUtil.validateColumnNames((ITableInfo) null, (SessionInfoProvider) null);
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getDTPropertiesFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q>Dk6C~[vDJ7^^U6[~");
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      applicationFileWrappersImpl1.setApplicationFiles(applicationFiles0);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      System.setCurrentTimeMillis(2522L);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      File file0 = applicationFiles0.getQuickStartGuideFile();
      URI uRI0 = file0.toURI();
      File file1 = file0.getAbsoluteFile();
      file0.getCanonicalPath();
      File file2 = MockFile.createTempFile("G:7kFK6x4#]", "G:7kFK6x4#]", file0);
      file2.toURL();
      MockFile mockFile0 = new MockFile(uRI0);
      File file3 = file2.getAbsoluteFile();
      file2.mkdirs();
      file2.getCanonicalPath();
      file0.setExecutable(false, true);
      MockFile mockFile1 = new MockFile("/home/ubuntu/replication/scripts/projects/102_squirrel-sql/doc/quick_start.html");
      file2.getCanonicalPath();
      MockFile mockFile2 = new MockFile("G:7kFK6x4#]");
      file3.setExecutable(true, true);
      MockFile mockFile3 = new MockFile(file1, "b/'+/9");
      mockFile3.mkdirs();
      file1.getCanonicalPath();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/home/ubuntu/replication/scripts/projects/102_squirrel-sql/doc/quick_start.html");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      UnaryOperator<ITableInfo> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function<TableColumnInfo, TableInfo> function0 = (Function<TableColumnInfo, TableInfo>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super TableColumnInfo, ? extends ITableInfo>) function0);
      arrayList0.add((ITableInfo) null);
      UnaryOperator.identity();
      arrayList0.add((ITableInfo) null);
      arrayList0.add((ITableInfo) null);
      arrayList0.add((ITableInfo) null);
      Function.identity();
      ArrayList<ITableInfo> arrayList1 = new ArrayList<ITableInfo>();
      arrayList1.replaceAll(unaryOperator0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getCreateTableSql(dBCopyPlugin0, (ITableInfo) null, "kqs+r790KQS]U{Uz", "kqs+r790KQS]U{Uz", "Domain");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<IDatabaseObjectInfo> linkedList0 = new LinkedList<IDatabaseObjectInfo>();
      DBUtil.typesAreEquivalent(16, 16);
      DriverPropertyInfo driverPropertyInfo0 = new DriverPropertyInfo("p.`#mA", "p.`#mA");
      SQLDriverProperty sQLDriverProperty0 = new SQLDriverProperty(driverPropertyInfo0);
      sQLDriverProperty0.clone();
      sQLDriverProperty0.setIsSpecified(false);
      SQLAlias sQLAlias0 = new SQLAlias();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = sQLAlias0.getDriverPropertiesClone();
      sQLDriverPropertyCollection0.clear();
      sQLDriverPropertyCollection0.addDriverProperty(sQLDriverProperty0);
      sQLDriverProperty0.clone();
      SQLDriverProperty sQLDriverProperty1 = new SQLDriverProperty();
      sQLDriverProperty0.clone();
      sQLDriverPropertyCollection0.clear();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties(properties1);
      sQLDriverProperty0.setIsSpecified(true);
      sQLAlias0.getDriverPropertiesClone();
      JSpinner jSpinner0 = new JSpinner();
      JSpinner jSpinner1 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner1, "p.`#mA");
      // Undeclared exception!
      try { 
        sQLDriverPropertyCollection0.addDriverProperty(sQLDriverProperty1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(connection0).getAutoCommit();
      doReturn((DatabaseMetaData) null).when(connection0).getMetaData();
      doReturn((SQLWarning) null).when(connection0).getWarnings();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier((-2938));
      SQLDriver sQLDriver0 = new SQLDriver(uidIdentifier0);
      SQLAlias sQLAlias0 = new SQLAlias();
      SQLDriverPropertyCollection sQLDriverPropertyCollection1 = sQLAlias0.getDriverPropertiesClone();
      sQLAlias0.setIdentifier(integerIdentifier0);
      SQLConnection sQLConnection0 = new SQLConnection(connection0, sQLDriverPropertyCollection1, sQLDriver0);
      BasicLabelUI basicLabelUI0 = new BasicLabelUI();
      sQLConnection0.setAutoCommit(false);
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      JLabel jLabel0 = new JLabel(" tableName=");
      sQLConnection0.getWarnings();
      jLabel0.getHeight();
      metalLabelUI0.getAccessibleChildrenCount(jLabel0);
      UidIdentifier uidIdentifier1 = new UidIdentifier();
      sQLAlias0.setDriverIdentifier(uidIdentifier1);
      metalLabelUI0.contains(jLabel0, 2186, 2186);
      metalLabelUI0.getPreferredSize(jLabel0);
      sQLDriver0.addPropertyChangeListener(basicLabelUI0);
      metalLabelUI0.getBaselineResizeBehavior(jLabel0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      sQLConnection0.removePropertyChangeListener(basicLabelUI0);
      sQLConnection0.removePropertyChangeListener(basicLabelUI0);
      dBCopyPlugin0.getPasteToTableInfo(sQLConnection0, " tableName=", " tableName=");
      // Undeclared exception!
      try { 
        DBUtil.getPKColumnString(sQLConnection0, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("DN", "L\"kXL~7", "PreferencesPanel.commitRecordCountLabel", "L\"kXL~7", (-2), (String) null, (-1301), 8, 128, 8, "DN", ")d,IV?^s[s6X", (-2), (-2), "PreferencesPanel.commitRecordCountLabel");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.USER;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDF_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.UDT_TYPE_DBO;
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.PROC_TYPE_DBO;
      DBUtil.isBinaryType(tableColumnInfo0);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      sQLDriverPropertyCollection0.getDriverProperties();
      String[] stringArray0 = new String[10];
      stringArray0[0] = " does not support resultsets via stored procedures";
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFileWrappersImpl0.setApplicationFiles(applicationFiles0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z]Yx2");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z]Yx2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".=w|t ^6)rm<1z~&U;0");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z]Yx2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".=w|t ^6)rm<1z~&U;0");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("o={gYc'.*..", (String) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.PRIMARY_KEY;
      DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getDTPropertiesFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl3.getLicenceFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl5 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.setApplicationFiles(applicationFiles1);
      ApplicationFileWrappersImpl applicationFileWrappersImpl6 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl7 = new ApplicationFileWrappersImpl();
      assertFalse(applicationFileWrappersImpl7.equals((Object)applicationFileWrappersImpl3));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(connection0).getAutoCommit();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier((-2938));
      SQLDriver sQLDriver0 = new SQLDriver(uidIdentifier0);
      SQLAlias sQLAlias0 = new SQLAlias();
      SQLDriverPropertyCollection sQLDriverPropertyCollection1 = sQLAlias0.getDriverPropertiesClone();
      sQLAlias0.setIdentifier(integerIdentifier0);
      SQLConnection sQLConnection0 = new SQLConnection(connection0, sQLDriverPropertyCollection1, sQLDriver0);
      BasicLabelUI basicLabelUI0 = new BasicLabelUI();
      sQLConnection0.setAutoCommit(false);
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      JLabel jLabel0 = new JLabel(" tableName=");
      UidIdentifier uidIdentifier1 = new UidIdentifier();
      sQLAlias0.setDriverIdentifier(uidIdentifier1);
      metalLabelUI0.contains(jLabel0, 2186, (-753));
      sQLDriver0.addPropertyChangeListener(metalLabelUI0);
      basicLabelUI0.getBaselineResizeBehavior(jLabel0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      sQLConnection0.removePropertyChangeListener(basicLabelUI0);
      sQLConnection0.removePropertyChangeListener(basicLabelUI0);
      dBCopyPlugin0.getPasteToTableInfo(sQLConnection0, "uLGVDmUIWRSyeO", " tableName=");
      // Undeclared exception!
      try { 
        DBUtil.getColumnNames(sQLConnection0, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.SQLDatabaseMetaData", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      UnaryOperator<ITableInfo> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function<TableColumnInfo, TableInfo> function0 = (Function<TableColumnInfo, TableInfo>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super TableColumnInfo, ? extends ITableInfo>) function0);
      arrayList0.add((ITableInfo) null);
      UnaryOperator.identity();
      arrayList0.add((ITableInfo) null);
      Function.identity();
      ArrayList<ITableInfo> arrayList1 = new ArrayList<ITableInfo>();
      arrayList1.replaceAll(unaryOperator0);
      arrayList1.add((ITableInfo) null);
      arrayList0.iterator();
      arrayList1.iterator();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      arrayList1.add((ITableInfo) null);
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        DBUtil.getForeignKeySQL(dBCopyPlugin0, (ITableInfo) null, arrayList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("G:7kFK6x4#]", "A/SP~A4", "QZ}~(:!MIB4I,1om", "e$mH)03,5eSSB8QH)|", (-3), " ADD FOREIGN KEY (", 3614, 2006, (-1301), 2006, ")) from ", "tfX)f#/{qd(}(V", (-1470), (-1470), " ADD FOREIGN KEY (");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType("e$mH)03,5eSSB8QH)|");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicLabelUI basicLabelUI0 = new BasicLabelUI();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "select  'CREATE OR REPLACE VIEW ' || VIEW_NAME ||' AS ', TEXT ", "select  'CREATE OR REPLACE VIEW ' || VIEW_NAME ||' AS ', TEXT ");
      DBUtil.validateColumnNames((ITableInfo) null, dBCopyPlugin0);
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getDTPropertiesFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getLicenceFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl4.setApplicationFiles(applicationFiles0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl5 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl6 = new ApplicationFileWrappersImpl();
      assertFalse(applicationFileWrappersImpl6.equals((Object)applicationFileWrappersImpl5));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl0);
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("&N", "&N", "&N");
      DBUtil.getLastStatement();
      String string0 = ";1F?MD-A|^3%<e>q";
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.TABLE;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, "&N", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "&N", 2, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 0, 1, 0, 1, (String) null, (String) null, 1, 2, ";1F?MD-A|^3%<e>q");
      DBUtil.getLastStatementValues();
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.COLUMN;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.setPasteToTableName(";1F?MD-A|^3%<e>q");
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, (String) null, (String) null, (String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      doReturn(false).when(connection0).getAutoCommit();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier((-2938));
      SQLDriver sQLDriver0 = new SQLDriver(uidIdentifier0);
      SQLAlias sQLAlias0 = new SQLAlias();
      SQLDriverPropertyCollection sQLDriverPropertyCollection1 = sQLAlias0.getDriverPropertiesClone();
      sQLAlias0.setIdentifier(integerIdentifier0);
      SQLConnection sQLConnection0 = new SQLConnection(connection0, sQLDriverPropertyCollection1, sQLDriver0);
      BasicLabelUI basicLabelUI0 = new BasicLabelUI();
      sQLConnection0.setAutoCommit(false);
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      JLabel jLabel0 = new JLabel(" tableName=");
      UidIdentifier uidIdentifier1 = new UidIdentifier();
      sQLConnection0.commit();
      sQLConnection0.setCommitOnClose(true);
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate(sQLConnection0, " tableName=", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((DatabaseMetaData) null).when(connection0).getMetaData();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(1185);
      SQLDriver sQLDriver0 = new SQLDriver(integerIdentifier0);
      SQLConnection sQLConnection0 = new SQLConnection(connection0, sQLDriverPropertyCollection0, sQLDriver0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo(sQLConnection0, "qN7ay", "&:#0mefeFvD)ha1tg");
      // Undeclared exception!
      try { 
        DBUtil.tableHasPrimaryKey(sQLConnection0, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "fMm=n'[n";
      int int0 = 2147483632;
      String string1 = "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy";
      String string2 = "eyq";
      // Undeclared exception!
      try { 
        DBUtil.isBinaryType((TableColumnInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList((IDatabaseObjectInfo[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[0];
      DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      SQLAlias sQLAlias0 = new SQLAlias();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = sQLAlias0.getDriverPropertiesClone();
      SQLDriverProperty sQLDriverProperty0 = new SQLDriverProperty();
      String string0 = "rLeAZ8R";
      int int0 = (-888);
      // Undeclared exception!
      try { 
        sQLDriverPropertyCollection0.getDriverProperty((-888));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl0);
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("&N", "&N", "&N");
      DBUtil.getLastStatement();
      String string0 = ";1F?MD-A|^3%<e>q";
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SEQUENCE;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.TABLE;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, "&N", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "&N", 2, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 0, 1, 0, 1, (String) null, (String) null, 1, 2, ";1F?MD-A|^3%<e>q");
      DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      dBCopyPlugin0.getDestSession();
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.UDT_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.setPasteToTableName(";1F?MD-A|^3%<e>q");
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getDestSession();
      DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, (String) null, "&N", ";1F?MD-A|^3%<e>q", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPluginAppSettingsFolder();
      dBCopyPlugin0.getWebSite();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getPluginUserSettingsFolder();
      dBCopyPlugin1.getPluginUserSettingsFolder();
      dBCopyPlugin0.getPluginAppSettingsFolder();
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      dBCopyPlugin2.unload();
      dBCopyPlugin0.getPluginUserSettingsFolder();
      DBCopyPlugin dBCopyPlugin3 = new DBCopyPlugin();
      dBCopyPlugin1.getPluginAppSettingsFolder();
      DBCopyPlugin dBCopyPlugin4 = new DBCopyPlugin();
      dBCopyPlugin2.getPasteToTableInfo((ISQLConnection) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "char(2000)");
      dBCopyPlugin2.getPasteToTableInfo((ISQLConnection) null, "gxhM=Jp~#-V", (String) null);
      // Undeclared exception!
      try { 
        DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      // Undeclared exception!
      try { 
        DBUtil.replaceOtherDataType((TableColumnInfo) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "fMm=n'[n";
      String string1 = "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy";
      String string2 = "eyq";
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("fMm=n'[n", "fMm=n'[n", "fMm=n'[n", "fMm=n'[n", (-1602), "fMm=n'[n", (-1602), (-1602), (-1602), Integer.MIN_VALUE, "fMm=n'[n", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", Integer.MIN_VALUE, Integer.MIN_VALUE, "eyq");
      DBUtil.isBinaryType(tableColumnInfo0);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      SQLDriverProperty[] sQLDriverPropertyArray0 = new SQLDriverProperty[8];
      // Undeclared exception!
      try { 
        sQLDriverPropertyCollection0.getDriverProperty((-3192));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      DBUtil.typesAreEquivalent(2, 1);
      ConnectionWrapper connectionWrapper0 = null;
      try {
        connectionWrapper0 = new ConnectionWrapper((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      DBUtil.typesAreEquivalent(2, 4);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareCall(anyString());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      // Undeclared exception!
      try { 
        connectionWrapper0.prepareCall("m.uDcdr#]HQ94O@/lg2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "2s m\"7A2+W-", 1294);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "R3iWKTHGR/.}tmsl", (String) null, "07vlzG4ds|PY", 2001, "7^6BR&4(QJbu", (-1149), 0, (-33), 1357, "KX8*)zJ{EB", (String) null, 1357, (-2040109463), " CHAR(10) )");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin0.setDestDatabaseObject(tableColumnInfo0);
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      dBCopyPlugin2.getDestSession();
      dBCopyPlugin0.setSourceSession((ISession) null);
      dBCopyPlugin1.setPasteToTableName("07vlzG4ds|PY");
      dBCopyPlugin2.unload();
      dBCopyPlugin2.getSourceSession();
      dBCopyPlugin0.setDestDatabaseObject(tableColumnInfo0);
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(2001, int0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("alr}R[g_kRDF", "E:{Xn%jz", " se[ms to aAready haqe it defined.", "axion", 6, "PreferencesPanel.delayLabel", (-8), 599, 93, Integer.MIN_VALUE, "O-cnTgFquE", ">4,", 2002, 2147000000, "Opening final nested jar: ");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[0];
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "\"SR^";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"SR^");
      // Undeclared exception!
      try { 
        DBUtil.convertTableToObjectList((List<ITableInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getPluginAppSettingsFolder();
      dBCopyPlugin1.getSourceSession();
      dBCopyPlugin0.setDestSession((ISession) null);
      // Undeclared exception!
      try { 
        DBUtil.getSelectQuery(dBCopyPlugin0, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("p3DMT]Mm(", "", "p3DMT]Mm(");
      DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.getQuickStartGuideFile();
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.getChangeLogFile();
      applicationFileWrappersImpl2.getSquirrelHomeDir();
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl5 = new ApplicationFileWrappersImpl();
      assertFalse(applicationFileWrappersImpl5.equals((Object)applicationFileWrappersImpl1));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPluginAppSettingsFolder();
      BasicLabelUI basicLabelUI0 = new BasicLabelUI();
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      JLabel jLabel0 = new JLabel(" tableNz`er");
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(integer0, " tableNz`er", " tableNz`er", jLabel0);
      metalLabelUI0.propertyChange(propertyChangeEvent0);
      metalLabelUI0.propertyChange(propertyChangeEvent0);
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      metalLabelUI0.uninstallUI(jLabel0);
      MetalLabelUI metalLabelUI1 = new MetalLabelUI();
      metalLabelUI1.propertyChange(propertyChangeEvent0);
      metalLabelUI1.contains(jLabel0, 2186, 2186);
      metalLabelUI1.getBaselineResizeBehavior(jLabel0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("\"0:T!F", "bp/Q 5yP#5$Xdp:6P", ".g3 #]FYOqw", "nQS_]kKO5ZpLn~UC", 2165, "=O:", 93, 2165, 2186, 2165, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "mJy9)p|9>=+4jB9as%F", (-753), 23503, ".g3 #]FYOqw");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        DBUtil.getColumnSql(dBCopyPlugin0, tableColumnInfo0, " H^", ".g3 #]FYOqw");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("{w>*T[`~Sq&ht7", "WIKI_CONFIGURATION", "WIKI_CONFIGURATION", "eA<o.a_K", 2003, "QT|'EBCaP@", 2003, 2003, 64000, (-1933), "{w>*T[`~Sq&ht7", "htyvv1DVop;", (-6), 2003, "QT|'EBCaP@");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      int int0 = DBUtil.replaceDistinctDataType(2003, tableColumnInfo0, (ISession) null);
      assertEquals(2003, int0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        DBUtil.getSchemaNameFromDbObject((IDatabaseObjectInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      DBUtil.setLastStatementValues((String) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-9);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPluginJarFilePath();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, ".ty", ".ty");
      TableInfo tableInfo0 = dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "orgJapache.log4j.helpers.AbsolutSTbmeDateFormat", (String) null);
      assertNull(tableInfo0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "|w0H?k/DzG", "|w0H?k/DzG");
      // Undeclared exception!
      try { 
        DBUtil.getColumnName((ISQLConnection) null, (ITableInfo) null, (-3266));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[1];
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("h]ejaAhf(7^", "&N", "&N");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SESSION;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getClosedIcon();
      DatabaseObjectType.createNewDatabaseObjectType("&N", icon0);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      iDatabaseObjectInfoArray0[0] = (IDatabaseObjectInfo) databaseObjectInfo0;
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLDriver sQLDriver0 = new SQLDriver();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, ">sH3", ">sH3");
      // Undeclared exception!
      try { 
        DBUtil.getColumnCount((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      String string0 = DBUtil.fixCase((ISession) null, "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = DBUtil.fixCase((ISession) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.fixCase((ISession) null, "select  'CREA%E OR REPLACE VIEW ' || VIEW_NAME ||' AS ', TEXT ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getTables((ISession) null, (String) null, "com.jidesoft.plaf.vsnet.VsnetMenuItemUI$MenuKeyHandler", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[6];
      // Undeclared exception!
      try { 
        DBUtil.getColumnList(tableColumnInfoArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0549201679861442
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLDriver sQLDriver0 = new SQLDriver();
      DBUtil.getLastStatementValues();
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[3];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      DBUtil.convertTableToObjectList(list0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      CallableStatement callableStatement0 = null;
      CallableStatementWrapper callableStatementWrapper0 = null;
      try {
        callableStatementWrapper0 = new CallableStatementWrapper((CallableStatement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(121, 121);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPluginAppSettingsFolder();
      dBCopyPlugin0.getWebSite();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin0.getPluginUserSettingsFolder();
      dBCopyPlugin1.getWebSite();
      dBCopyPlugin1.getPluginUserSettingsFolder();
      dBCopyPlugin1.getPluginAppSettingsFolder();
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin3 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.tableHasForeignKey("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "1L@0GN'zOx.h!R^", "double integer", (ForeignKeyInfo) null, dBCopyPlugin1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getPluginsDirectory();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      applicationFiles2.getUpdateDirectory();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      applicationFiles3.getPluginsDirectory();
      applicationFiles1.getUserSettingsDirectory();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      // Undeclared exception!
      try { 
        DBUtil.deleteDataInExistingTable((ISession) null, "PZgHW_", "d", "qV2^F9fR+ck7YTOq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DBUtil.typesAreEquivalent(2344, 2344);
      DataFlavor dataFlavor0 = DataFlavor.allHtmlFlavor;
      Clipboard clipboard0 = new Clipboard("mi]KY#SEsE3`51");
      StringSelection stringSelection0 = new StringSelection("pcuBl.c_G|^2A");
      Clipboard clipboard1 = new Clipboard("pcuBl.c_G|^2A");
      clipboard1.setContents(stringSelection0, stringSelection0);
      DBUtil dBUtil0 = new DBUtil();
      clipboard0.getContents(dBUtil0);
      try { 
        dataFlavor0.getReaderForText(stringSelection0);
        fail("Expecting exception: UnsupportedFlavorException");
      
      } catch(UnsupportedFlavorException e) {
         //
         // text/html
         //
         verifyException("java.awt.datatransfer.StringSelection", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "O-cnTgFquE");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.jfree.data.time.TimePeriodValue");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<d!h\"|3jO#UyR=5[e");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      DBUtil.replaceDistinctDataType((-477), (TableColumnInfo) null, (ISession) null);
      ISession iSession0 = dBCopyPlugin0.getDestSession();
      assertNull(iSession0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setRecordDelayMillis(0L);
      dBCopyPreferenceBean0.setDelayBetweenObjects(false);
      DBUtil.setPreferences(dBCopyPreferenceBean0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getTableInfo((ISession) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      doReturn(false, false).when(connection0).getAutoCommit();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier((-2938));
      SQLDriver sQLDriver0 = new SQLDriver(uidIdentifier0);
      SQLAlias sQLAlias0 = new SQLAlias();
      SQLDriverPropertyCollection sQLDriverPropertyCollection1 = sQLAlias0.getDriverPropertiesClone();
      sQLAlias0.setIdentifier(integerIdentifier0);
      SQLConnection sQLConnection0 = new SQLConnection(connection0, sQLDriverPropertyCollection1, sQLDriver0);
      BasicLabelUI basicLabelUI0 = new BasicLabelUI();
      sQLConnection0.setAutoCommit(false);
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      JLabel jLabel0 = new JLabel(" tableName=");
      sQLConnection0.setAutoCommit(true);
      MetalLabelUI metalLabelUI1 = new MetalLabelUI();
      JLabel jLabel1 = new JLabel("ObjectTreeApi can only be provided for SessionInternalFrame or ObjectTreeInternalFrame");
      UidIdentifier uidIdentifier1 = new UidIdentifier();
      sQLConnection0.commit();
      sQLConnection0.setCommitOnClose(false);
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate(sQLConnection0, "ObjectTreeApi can only be provided for SessionInternalFrame or ObjectTreeInternalFrame", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.ScriptWriter", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = null;
      DBUtil.setLastStatement((String) null);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareCall(anyString() , anyInt() , anyInt() , anyInt());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      // Undeclared exception!
      try { 
        connectionWrapper0.prepareCall(")", 0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("0<2l qO/,&d>M,>", (String) null, "hibernate.jdbc.use_streams_for_binary", "(", 14, "0<2l qO/,&d>M,>", 0, 2942, (-2662), (-2662), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "", 2540, 563, "hibernate.jdbc.use_streams_for_binary");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[4];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      tableColumnInfoArray0[1] = tableColumnInfo0;
      tableColumnInfoArray0[2] = tableColumnInfo0;
      tableColumnInfoArray0[3] = tableColumnInfo0;
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("(, (, (, (", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList((List<IDatabaseObjectInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.isKeyword((ISession) null, "QZM~(:!MIB4I,1om");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(" seems to already have it defined.", "org.jfree.data.time.TimePeriodValue", "|Yx\"hMg", " seems to already have it defined.", 44, "org.jfree.data.time.TimePeriodValue", 44, 44, 44, 44, "C*", "H0)D4~uLNpXDHW+z", 16, 44, "H0)D4~uLNpXDHW+z");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDF_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      DatabaseObjectType.createNewDatabaseObjectType("|Yx\"hMg");
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      byte[] byteArray0 = new byte[4];
      MenuElement[] menuElementArray0 = new MenuElement[6];
      ImageIcon imageIcon0 = new ImageIcon(" seems to already have it defined.");
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem(imageIcon0);
      menuElementArray0[0] = (MenuElement) jCheckBoxMenuItem0;
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("H0)D4~uLNpXDHW+z", false);
      menuElementArray0[1] = (MenuElement) jRadioButtonMenuItem0;
      JMenu jMenu0 = new JMenu();
      menuElementArray0[2] = (MenuElement) jMenu0;
      JMenu jMenu1 = new JMenu();
      menuElementArray0[3] = (MenuElement) jMenu1;
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getDefaultIcon();
      JRadioButtonMenuItem jRadioButtonMenuItem1 = new JRadioButtonMenuItem((Icon) null);
      menuElementArray0[4] = (MenuElement) jRadioButtonMenuItem1;
      DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction0 = new DefaultEditorKit.InsertTabAction();
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem(defaultEditorKit_InsertTabAction0);
      menuElementArray0[5] = (MenuElement) jCheckBoxMenuItem1;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(defaultListCellRenderer_UIResource0, (-5), (byte) (-10), (-692), (-5), (-5654), (-5), 44, (-8), false, menuElementArray0, menuSelectionManager0);
      defaultListCellRenderer_UIResource0.getPopupLocation(menuDragMouseEvent0);
      byteArray0[0] = (byte) (-10);
      byteArray0[3] = (byte)114;
      ImageIcon imageIcon1 = new ImageIcon(byteArray0, "H0)D4~uLNpXDHW+z");
      imageIcon1.setDescription("Bvti>gJ,");
      DatabaseObjectType.createNewDatabaseObjectType("select ", (Icon) imageIcon1);
      defaultListCellRenderer_UIResource0.setDoubleBuffered(false);
      defaultListCellRenderer_UIResource0.getIcon();
      DatabaseObjectType.createNewDatabaseObjectType("executeQuery: TimesTen allows a maximum fetch size of 128.  Altering preferred fetch size from ");
      // Undeclared exception!
      try { 
        DBUtil.getMaxColumnLengthSQL((ISession) null, tableColumnInfo0, " seems to already have it defined.", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.sanityCheckPreferences((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DBUtil.typesAreEquivalent((-35), (-3243));
      DataFlavor dataFlavor0 = DataFlavor.allHtmlFlavor;
      Clipboard clipboard0 = new Clipboard("`jO|$y]c5+^");
      StringSelection stringSelection0 = new StringSelection("`jO|$y]c5+^");
      stringSelection0.isDataFlavorSupported(dataFlavor0);
      clipboard0.setContents(stringSelection0, stringSelection0);
      assertEquals("`jO|$y]c5+^", clipboard0.getName());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("#Lu*])&tZ&!nHl", "*q8", "AppIcon", "AppIcon", 3984, "org.jfree.data.tie.TimPeriodVa0ue", 2500, 3984, 1577, 2500, "*q8", "org.jfree.data.tie.TimPeriodVa0ue", 256, 14, "AppIcon");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDT;
      DatabaseObjectType.createNewDatabaseObjectType("#Lu*])&tZ&!nHl");
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getDefaultIcon();
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType("z%!,pbJ*/E-,i", (Icon) null);
      DatabaseObjectType.createNewDatabaseObjectType("org.jfree.data.tie.TimPeriodVa0ue");
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.TRIGGER;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      databaseObjectType1.getIcon();
      DatabaseObjectType.createNewDatabaseObjectType("*q8", (Icon) null);
      DatabaseObjectType.createNewDatabaseObjectType("2s m\"7A2+W-");
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.SESSION;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("{/MJD&", "{/MJD&", "{/MJD&", " ADD FOREIGN KEY (", 2002, "}Enk", 7, 2500, 3984, 3984, "}Enk", "{/MJD&", (-1924), (-1924), "#Lu*])&tZ&!nHl");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDT;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType("{/MJD&");
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getDefaultIcon();
      DatabaseObjectType.createNewDatabaseObjectType("#Lu*])&tZ&!nHl", (Icon) null);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SEQUENCE;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      Icon icon0 = databaseObjectType0.getIcon();
      DatabaseObjectType.createNewDatabaseObjectType("{/MJD&", icon0);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.createNewDatabaseObjectType(" ADD FOREIGN KEY (");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.SESSION;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.jfree.data.time.TimePeriodValue");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<d!h\"|3jO#UyR=5[e");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "length");
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject((IDatabaseObjectInfo) null, schemaInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("lib/squirrel-sql.jar");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, true);
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "replaceOtherDataType: unexpected exception - ");
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileWrapper fileWrapper0 = applicationFileWrappersImpl0.getSQuirrelJarFile();
      fileWrapperFactoryImpl0.create(fileWrapper0, "net.sourceforge.squirrel_sql.fw.util.StringManagerFactory");
      fileWrapperFactoryImpl0.create("5n@J'JQya+r1_f");
      FileWrapper fileWrapper1 = applicationFileWrappersImpl0.getDatabaseAliasesTreeStructureFile();
      FileWrapper fileWrapper2 = fileWrapperFactoryImpl0.create(fileWrapper0, "wm1tCh2.dL'8U<.e6==");
      applicationFileWrappersImpl0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      fileWrapper1.mkdirs();
      fileWrapper2.mkdirs();
      fileWrapperFactoryImpl0.create(fileWrapper2, "p!5.~3CVN");
      fileWrapperFactoryImpl0.create(fileWrapper1, "/4:QHuRc");
      fileWrapperFactoryImpl0.create("5n@J'JQya+r1_f", "NOMAXVALUE");
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("p!5.~3CVN", "6z6d", "|)y.IOBKZ&z");
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(databaseObjectInfo0, schemaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.dropTable("h;~Ywh4OT0bSIX|c", "QZ}~(:!MA4I1om", "Md'?=-#r,rISQ@J", (ISession) null, false, 1007);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      applicationFiles1.getPluginsDirectory();
      applicationFiles1.getDatabaseAliasesFile_before_version_2_3();
      applicationFiles1.getPluginsDirectory();
      applicationFiles1.getUserSettingsDirectory();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, "ky[K", (String) null, (-5818), "from_unixtime", (-1731), 2596, 2596, (-5818), "5[y(Z9L", "{Y0p2V", 2003, (-2083), "Aq.2 H");
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals((-5818), int0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, "org.hibernate.dialect.function.CastFunction", "", "org.hibernate.dialect.function.CastFunction", 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      File file0 = applicationFiles0.getQuickStartGuideFile();
      file0.toURI();
      file0.getAbsoluteFile();
      file0.getCanonicalPath();
      File file1 = MockFile.createTempFile("G:7kFK6x4#]", "fMm=n'[n", file0);
      file1.toURL();
      applicationFiles0.getUserSpecificWikiConfigurationsFile();
      applicationFiles0.getFAQFile();
      file1.setExecutable(false, true);
      file1.mkdirs();
      file1.getCanonicalPath();
      file0.setExecutable(false, true);
      MockFile mockFile0 = new MockFile("/home/ubuntu/replication/scripts/projects/102_squirrel-sql/doc/quick_start.html");
      file1.getCanonicalPath();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("doc/quick_start.html");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("b/'+/9", "b/'+/9", "b/'+/9", "G:7kFK6x4#]", 2849, "c}`?N}CQTk1VK", (-15), (-193), 760, 0, "46_dfW247>~hyo", ":+0d Y<O&9>!c!3e,$", (-515), (-15), (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Stack<ITableInfo> stack0 = new Stack<ITableInfo>();
      DBUtil.convertTableToObjectList(stack0);
      System.setCurrentTimeMillis((-41L));
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getPluginsDirectory();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      applicationFiles2.getUpdateDirectory();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      applicationFiles3.getPluginsDirectory();
      applicationFiles1.getUserSettingsDirectory();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      URI uRI0 = MockURI.aFTPURI;
      // Undeclared exception!
      try { 
        DBUtil.sameDatabaseType((ISession) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "_qd7x=9X", "_qd7x=9X", "", 0, "", 2003, 0, 2003, 0, "", "yn]1- dCpB4V0\u0002C ", 0, 0, "");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      int int0 = DBUtil.replaceDistinctDataType(0, tableColumnInfo0, (ISession) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileWrapper fileWrapper0 = applicationFileWrappersImpl0.getSQuirrelJarFile();
      fileWrapperFactoryImpl0.create(fileWrapper0, "net.sourceforge.squirrel_sql.fw.util.StringManagerFactory");
      fileWrapperFactoryImpl0.create("5n@J'JQya+r1_f");
      FileWrapper fileWrapper1 = applicationFileWrappersImpl0.getDatabaseAliasesTreeStructureFile();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)fileWrapperFactoryImpl0.create(fileWrapper0, "wm1tCh2.dL'8U<.e6==");
      applicationFileWrappersImpl0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      MockFile mockFile0 = (MockFile)applicationFiles0.getLicenceFile();
      fileWrapperFactoryImpl0.create((File) mockFile0);
      fileWrapper1.mkdirs();
      fileWrapperImpl0.mkdirs();
      FileWrapperImpl fileWrapperImpl1 = new FileWrapperImpl(fileWrapperImpl0);
      fileWrapper1.deleteOnExit();
      fileWrapperFactoryImpl0.create(fileWrapper1, "/4:QHuRc");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("wm1tCh2.dL'8U<.e6==", "net.sourceforge.squirrel_sql.fw.util.StringManagerFactory", "NOMAXVALUE", "Encountered unexpected exception when attempting to call schemaInfo.getTables with catalog = ", 30, "big", 30, (-812), (-812), 1399, "null Window or Rectangle passed", "null Window or Rectangle passed", (-5), (-2), "<d!h\"|3jO#UyR=5[e");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getDestSession();
      int int0 = DBUtil.replaceDistinctDataType(30, tableColumnInfo0, (ISession) null);
      assertEquals(30, int0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getCatSep((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getPluginsDirectory();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      applicationFiles2.getUpdateDirectory();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      URI uRI0 = MockURI.aFTPURI;
      // Undeclared exception!
      try { 
        DBUtil.checkKeyword((ISession) null, " ", "M");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LinkedList<IDatabaseObjectInfo> linkedList0 = new LinkedList<IDatabaseObjectInfo>();
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("*Q", "*Q", "executeQuery: TimesTen allows a maximum fetch size of 128.  Altering preferred fetch size from ");
      linkedList0.offer(databaseObjectInfo0);
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList(linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LinkedList<IDatabaseObjectInfo> linkedList0 = new LinkedList<IDatabaseObjectInfo>();
      UnaryOperator<IDatabaseObjectInfo> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.poll();
      linkedList0.clear();
      List<ITableInfo> list0 = DBUtil.convertObjectToTableList(linkedList0);
      assertEquals(0, list0.size());
  }
}
