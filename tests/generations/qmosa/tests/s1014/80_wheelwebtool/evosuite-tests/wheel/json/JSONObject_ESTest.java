/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 05:14:07 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5599511647956277
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer integer0 = new Integer((short)75);
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalOr(false, true);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optLong(",\n", (long) (short)75);
      String string0 = "s:/bE BgaUHKdWg";
      JSONObject.quote(",\n");
      Long long0 = new Long(75L);
      JSONObject jSONObject1 = jSONObject0.accumulate("s:/bE BgaUHKdWg", ",\n");
      try { 
        jSONObject1.getJSONArray(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7004209113281625
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Short short0 = new Short((short) (-2478));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ismax";
      stringArray0[1] = "kIPe";
      stringArray0[2] = "QmA?g+{";
      stringArray0[3] = "$EDhqTA[=O}UR";
      Short.toUnsignedInt((short) (-2478));
      stringArray0[4] = "-d!i2PD!";
      stringArray0[5] = "mi";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      Float float0 = new Float(0.0F);
      Float.max((-4138.219F), (-4138.219F));
      Float.isFinite(591.69F);
      JSONObject jSONObject1 = jSONObject0.put("-d!i2PD!", (Object) float0);
      JSONObject.quote("kIPe");
      Byte byte0 = new Byte((byte)31);
      Byte.toUnsignedLong((byte) (-127));
      jSONObject0.putOpt("-d!i2PD!", byte0);
      jSONObject1.has("-d!i2PD!");
      try { 
        jSONObject1.getLong("mi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mi\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4940103125408095
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Byte byte0 = new Byte((byte)25);
      Byte.toUnsignedLong((byte)59);
      Byte.compare((byte)59, (byte) (-92));
      Byte.compare((byte)25, (byte)32);
      JSONObject.valueToString(byte0, (byte)25, (-3687));
      JSONObject jSONObject0 = new JSONObject();
      Byte.toUnsignedLong((byte)25);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Byte@0000000001", (int) (byte)32);
      JSONObject jSONObject2 = jSONObject1.put("NO{8Sc~>\"|", (double) 25L);
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      jSONObject2.put("java.lang.Byte@0000000001", (Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      jSONObject2.accumulate("InK^+.LSV'+HK4", jSONObject1);
      JSONObject.getNames(jSONObject1);
      jSONObject2.putOpt("java.lang.Byte@0000000001", jSONObject0);
      try { 
        jSONObject2.getBoolean("NO{8Sc~>\"|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"NO{8Sc~>\\\"|\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5292482930376912
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String string0 = "true";
      jSONObject0.put("true", (Collection) linkedList0);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 13, 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.087599049427241
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("M*f4JluMe", "M*f4JluMe");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("M*f4JluMe", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      jSONObject1.putOpt((String) null, jSONObject0);
      jSONObject0.optInt("W,G", 12);
      HashMap<JSONObject, Long> hashMap0 = new HashMap<JSONObject, Long>(12);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject1.getLong("M*f4JluMe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"M*f4JluMe\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7939676233569797
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Short short0 = new Short((short)108);
      String string0 = "bh";
      JSONObject jSONObject0 = new JSONObject(short0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("bh", (Collection) linkedList0);
      Object object0 = new Object();
      Double double0 = new Double((short)108);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double1 = new Double(2602.0);
      linkedList1.add(double1);
      Short.toUnsignedLong((short)82);
      Double double2 = new Double((short)108);
      linkedList1.add(double2);
      jSONObject1.optLong("getparseDouble", 858L);
      String string1 = "s:/bE BgaUHKdWg";
      JSONObject.quote("s:/bE BgaUHKdWg");
      Long long0 = new Long(0L);
      String string2 = null;
      try { 
        jSONObject1.accumulate((String) null, linkedList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.499657554112717
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("M*f4Jlue", "M*f4Jlue");
      jSONObject0.optDouble("");
      jSONObject0.putOpt("x[/Xz'l&Ty`*s$3ue", "");
      int int0 = 124;
      JSONObject jSONObject2 = jSONObject0.put("", 124);
      jSONObject1.toString(0);
      jSONObject2.toString();
      jSONObject0.opt("@88G//DMGde<~zFJ");
      jSONObject1.optBoolean("@88G//DMGde<~zFJ");
      String string0 = "s/:Tq";
      jSONObject2.append("FG|Okr5\nqA\"wFR", (Object) null);
      jSONObject1.append("s/:Tq", "{\n\"java.lang.String@0000000005\": java.lang.Integer@0000000006,\n\"java.lang.String@0000000003\": [\"java.lang.String@0000000003\"],\n\"java.lang.String@0000000004\": \"java.lang.String@0000000005\"\n}");
      jSONObject0.put("s/:Tq", true);
      // Undeclared exception!
      jSONObject2.toString(800, 1569);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8733036683238533
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      Boolean boolean0 = Boolean.valueOf("");
      jSONObject1.putOpt("", boolean0);
      Writer writer0 = jSONObject1.write(stringWriter0);
      jSONObject1.write(writer0);
      JSONObject jSONObject2 = jSONObject1.put("4", (Object) null);
      assertNotSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8985979991315434
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte byte0 = (byte)5;
      Byte byte1 = new Byte((byte)5);
      Byte.compare((byte)5, (byte)5);
      byte byte2 = (byte)59;
      Byte.toUnsignedInt((byte)59);
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", (Object) byte1);
      jSONObject1.getInt("] is not a number.");
      JSONObject.valueToString(byte1);
      jSONObject1.putOpt("] is not a number.", "] is not a number.");
      try { 
        jSONObject1.getJSONObject("ba}y) 6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ba}y) 6\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.33791602300799
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("M*f4Jlue", "M*f4Jlue");
      jSONObject0.optDouble("");
      jSONObject1.toString(0);
      jSONObject0.toString();
      jSONObject1.optBoolean("@88G//DMGde<~zFJ");
      jSONObject1.append("M*f4Jlue", "{\"java.lang.String@0000000003\": [\"java.lang.String@0000000003\"]}");
      jSONObject0.put("{\"java.lang.String@0000000003\": [\"java.lang.String@0000000003\"]}", true);
      String string0 = jSONObject0.toString(809, 1569);
      // Undeclared exception!
      jSONObject0.getBoolean(string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1499026456168053
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "n-mM<(z}buB/X/s9p/";
      jSONObject0.optLong("n-mM<(z}buB/X/s9p/");
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject1 = jSONObject0.put("isoptfLong", (Map) hashMap0);
      int int0 = 44;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject1.put("] is not a JSONObject.", (Collection) linkedList0);
      JSONObject.valueToString(hashMap0, 10, 48);
      Object object1 = JSONObject.NULL;
      String string1 = "getput";
      jSONObject1.accumulate("getput", "{}");
      Double double0 = new Double((-1100));
      linkedList0.add(double0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5171063970610277
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Boolean.logicalXor(true, true);
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)1000);
      Short short1 = new Short((short)13);
      linkedList0.offerLast(short1);
      Short short2 = new Short((short) (-1));
      linkedList0.add(short1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject(short2, stringArray0);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((short) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("'*O}]", jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("'*O}]", (-384L));
      JSONObject jSONObject2 = jSONObject1.put("'*O}]", (-384L));
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8866967846580784
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      hashMap0.put(boolean1, "tk!<P&dW8");
      JSONObject jSONObject1 = jSONObject0.accumulate("tk!<P&dW8", (Object) null);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONObject1.toJSONArray(jSONArray0);
      int int0 = (-1815);
      try { 
        jSONArray0.getDouble((-1815));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1815] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ">.(L,`pSc6'Xdin8X*l";
      JSONObject jSONObject1 = null;
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9769727092468719
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "\\u";
      JSONArray jSONArray0 = new JSONArray();
      hashMap0.put(string0, jSONArray0);
      jSONArray0.optBoolean(35);
      jSONArray0.put(3682L);
      hashMap0.remove((Object) "wheel.json.JSONArray", (Object) jSONArray0);
      jSONObject0.isNull("wheel.json.JSONArray");
      boolean boolean0 = jSONObject0.isNull("Unterminated string");
      assertTrue(boolean0);
      
      int int0 = jSONObject0.optInt("wheel.json.JSONArray");
      assertEquals(0, int0);
      
      Double double0 = new Double((-4882.7255364));
      Double.min(35, 0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONArray", double0);
      double double1 = jSONObject1.optDouble("wheel.json.JSONArray");
      assertEquals((-4882.7255364), double1, 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.99916381358184
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap0.put(boolean0, "tk!<P&dW8");
      JSONObject jSONObject1 = jSONObject0.accumulate("tk!<P&dW8", "tk!<P&dW8");
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Short short0 = new Short((short)8);
      Float float0 = new Float((float) (short)8);
      Long long0 = new Long((short)8);
      Byte byte0 = new Byte((byte)61);
      Boolean boolean1 = new Boolean("t$");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "tk!<P&dW8";
      stringArray0[2] = "t$";
      stringArray0[4] = null;
      stringArray0[5] = "tk!<P&dW8";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      Integer integer0 = new Integer((short)8);
      JSONObject jSONObject3 = jSONObject1.putOpt("is", boolean0);
      jSONObject3.put("is", (double) (byte)61);
      jSONObject0.getString("is");
      try { 
        jSONObject1.get("t$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"t$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.2790708897952654
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "M*f4Jlue";
      JSONObject jSONObject1 = jSONObject0.append("M*f4Jlue", "M*f4Jlue");
      jSONObject0.optDouble("");
      jSONObject0.put("", 124);
      jSONObject1.toString((-31));
      JSONObject.doubleToString(Double.NaN);
      Boolean boolean0 = new Boolean("{\n\"java.lang.String@0000000004\": java.lang.Integer@0000000005,\n\"java.lang.String@0000000003\": [\"java.lang.String@0000000003\"]\n}");
      JSONObject jSONObject2 = new JSONObject();
      boolean boolean1 = true;
      JSONObject jSONObject3 = new JSONObject();
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2039073215674874
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject1 = jSONObject0.put("X_p", (Map) hashMap0);
      JSONObject.valueToString(jSONObject1, 52, (-1100));
      jSONObject1.put("`0-|<GN \"t%6'sRU?m", true);
      JSONObject.quote("`0-|<GN \"t%6'sRU?m");
      StringWriter stringWriter0 = new StringWriter(52);
      StringWriter stringWriter1 = stringWriter0.append('V');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "`0-|<GN \"t%6'sRU?m");
      jSONObject1.optBoolean("`0-|<GN \"t%6'sRU?m");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.append("X_p", stringWriter2);
      JSONObject jSONObject3 = jSONObject2.put(" MNeQ&!t(Hrzsj&YE", true);
      jSONObject0.toString((-1100), 52);
      try { 
        jSONObject3.getBoolean("1)}\"ZX0f<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1)}\\\"ZX0f<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5520011472203343
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "M*f4Jlue";
      JSONObject jSONObject1 = jSONObject0.append("M*f4Jlue", "M*f4Jlue");
      jSONObject0.optDouble("");
      JSONObject jSONObject2 = jSONObject0.put("", 124);
      jSONObject1.toString((-31));
      jSONObject2.toString();
      Boolean boolean0 = new Boolean("{\n\"java.lang.String@0000000004\": java.lang.Integer@0000000005,\n\"java.lang.String@0000000003\": [\"java.lang.String@0000000003\"]\n}");
      JSONObject jSONObject3 = new JSONObject();
      boolean boolean1 = true;
      jSONObject0.put("s/:Tq", true);
      JSONObject jSONObject4 = new JSONObject("{\"java.lang.String@0000000004\":java.lang.Integer@0000000005,\"java.lang.String@0000000003\":wheel.json.JSONArray@0000000002}");
      jSONObject4.accumulate("{\"java.lang.String@0000000004\":java.lang.Integer@0000000005,\"java.lang.String@0000000003\":wheel.json.JSONArray@0000000002}", jSONObject2);
      jSONObject4.put("&OvBwa,^q([", true);
      String string1 = "g\";;rn";
      try { 
        jSONObject0.getDouble("g\";;rn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g\\\";;rn\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9522407596821714
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Long long0 = new Long(0L);
      jSONObject0.put("pu", (Object) long0);
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short) (-7621));
      Float float0 = new Float((float) (short) (-7621));
      JSONObject jSONObject1 = jSONObject0.accumulate("false", float0);
      Object object1 = new Object();
      JSONObject.testValidity(jSONObject0);
      Object object2 = JSONObject.NULL;
      JSONObject.getNames((Object) "false");
      jSONObject1.optJSONObject("");
      jSONObject0.getInt("pu");
      String string0 = "L_';%lT#ya/*@%]P";
      try { 
        jSONObject0.getJSONArray("L_';%lT#ya/*@%]P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"L_';%lT#ya/*@%]P\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.38245664438599
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject1 = jSONObject0.put("X_p", (Map) hashMap0);
      jSONObject1.keys();
      JSONObject jSONObject2 = jSONObject0.put("X_p", (Map) hashMap0);
      JSONObject.valueToString(jSONObject2, 44, (-1100));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "X_p";
      stringArray0[1] = "X_p";
      JSONObject jSONObject3 = new JSONObject(jSONObject0);
      String string0 = JSONObject.quote("X_p");
      assertEquals("\"X_p\"", string0);
      
      StringWriter stringWriter0 = new StringWriter(44);
      jSONObject2.put("X_p", (-1243.72));
      Boolean boolean0 = new Boolean(":");
      Byte byte0 = new Byte((byte)112);
      JSONObject.testValidity(byte0);
      Object object0 = JSONObject.NULL;
      String[] stringArray1 = JSONObject.getNames((Object) boolean0);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      jSONObject3.optJSONObject("X_p");
      jSONObject2.getInt("X_p");
      JSONObject jSONObject4 = new JSONObject((Object) "X_p");
      double double0 = jSONObject4.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3, jSONObject4.length());
      
      String string1 = JSONObject.valueToString((Object) null, 644, 61);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6352992220581912
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      linkedList0.pollFirst();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList0.retainAll(linkedList1);
      linkedList0.add((String) null);
      JSONObject.valueToString(linkedList0);
      String string0 = "Unterminated string";
      JSONObject.quote("Unterminated string");
      linkedList0.add("[null]");
      jSONObject0.opt("}8Twf;SCvXL@K");
      int int0 = 1170;
      LinkedList<Boolean> linkedList2 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5998039290898585
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "Substring bounds error";
      jSONObject0.optDouble("Substring bounds error");
      int int0 = (-1178);
      jSONObject0.toString((-1178));
      jSONObject0.optDouble("`A-cN5T!|k6%_R]+$");
      int int1 = 0;
      JSONObject jSONObject1 = jSONObject0.put("vXt5:HE`eL+n>LXT", 0);
      jSONObject1.toString(47);
      jSONObject0.toString();
      jSONObject1.opt("}8Twf;SCvXL@K");
      jSONObject0.optBoolean("}8Twf;SCvXL@K");
      JSONObject jSONObject2 = jSONObject1.append("`A-cN5T!|k6%_R]+$", "}8Twf;SCvXL@K");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('H');
      stringWriter1.append(')');
      StringWriter stringWriter2 = stringWriter1.append('l');
      stringWriter2.append((CharSequence) "{\"java.lang.String@0000000004\":java.lang.Integer@0000000005,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      jSONObject2.write(stringWriter2);
      stringWriter0.write("Bad value from toJSONString: ");
      try { 
        jSONObject0.getDouble("{\"java.lang.String@0000000004\":java.lang.Integer@0000000005,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000004\\\":java.lang.Integer@0000000005,\\\"java.lang.String@0000000002\\\":\\\"java.lang.Class@0000000003\\\"}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8886318494864496
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Byte byte0 = new Byte((byte)25);
      Byte.toUnsignedLong((byte)59);
      Byte.compare((byte)59, (byte) (-92));
      Byte.compare((byte)25, (byte)32);
      JSONObject.valueToString(byte0, (byte)25, (-3687));
      JSONObject jSONObject0 = new JSONObject();
      Byte.toUnsignedLong((byte)25);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Byte@0000000001", (int) (byte)32);
      String string0 = "NO{8Sc~>\"|";
      JSONObject jSONObject2 = jSONObject1.put("NO{8Sc~>\"|", (double) 25L);
      jSONObject2.put("0", (-7));
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1787000933322442
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "M*f4Jlue";
      jSONObject0.append("M*f4Jlue", "M*f4Jlue");
      jSONObject0.optDouble("");
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.valueToString("M*f4Jlue", 124, 124);
      jSONObject1.toString();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject2 = new JSONObject();
      boolean boolean1 = true;
      jSONObject0.put("s/:Tq", true);
      JSONObject jSONObject3 = new JSONObject("{}");
      jSONObject3.accumulate("{}", jSONObject1);
      jSONObject3.put("&OvBwa,^q([", true);
      String string1 = "g\";;rn";
      try { 
        jSONObject0.getDouble("g\";;rn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g\\\";;rn\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.203750922511834
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Boolean.valueOf(false);
      Byte byte0 = new Byte((byte)39);
      Byte byte1 = new Byte((byte)13);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "z|5'l[*U:FYF;&aWq";
      stringArray0[1] = "to";
      stringArray0[2] = "z|5'l[*U:FYF;&aWq";
      stringArray0[3] = "islongBitsToDouble";
      JSONObject jSONObject0 = new JSONObject(byte1, stringArray0);
      jSONObject0.optLong("z|5'l[*U:FYF;&aWq", (long) (byte)39);
      jSONObject0.optDouble("ismin", (-2469.656164944037));
      jSONObject0.optLong("ismin", (long) (byte)58);
      Boolean boolean0 = new Boolean("wheel.json.JSONObject$Null");
      Integer integer0 = new Integer((byte)13);
      JSONTokener jSONTokener0 = new JSONTokener("z|5'l[*U:FYF;&aWq");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of z|5'l[*U:FYF;&aWq
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1705222942350613
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.put("pu", (Object) long0);
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short) (-7611));
      Float float0 = new Float((float) (short) (-7611));
      JSONObject jSONObject2 = jSONObject0.accumulate("false", float0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "false";
      stringArray0[1] = "MGJ}&q!-)%sBt#";
      stringArray0[2] = "pu";
      stringArray0[3] = "pu";
      stringArray0[4] = "kt+LN?e";
      stringArray0[5] = "MGJ}&q!-)%sBt#";
      stringArray0[6] = "false";
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject2, stringArray0);
      jSONObject0.optLong("false", (long) (short) (-7611));
      jSONObject1.optLong("kt+LN?e", 305L);
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject4 = new JSONObject((Object) "pu");
      jSONObject2.getDouble("pu");
      int int0 = jSONObject0.optInt("false", (int) (short) (-7611));
      assertEquals((-7611), int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9142073530547528
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      short short0 = (short)108;
      Short short1 = new Short((short)108);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "bh";
      stringArray0[1] = "bh";
      JSONObject jSONObject0 = new JSONObject((Object) "bh");
      JSONObject jSONObject1 = jSONObject0.put("bh", 1);
      String string0 = "wri";
      JSONObject jSONObject2 = jSONObject0.put(";W", (int) (short)108);
      jSONObject1.optInt(";W");
      Byte.toUnsignedLong((byte)10);
      Integer integer0 = new Integer(26);
      JSONObject jSONObject3 = new JSONObject(integer0, stringArray0);
      try { 
        jSONObject2.getLong("wri");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wri\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.769852172224697
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Boolean.valueOf(false);
      Boolean.logicalXor(false, false);
      String string0 = "M*f4Jlue";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("M*f4Jlue", (Object) null);
      jSONObject0.remove((String) null);
      JSONObject.valueToString("M*f4Jlue");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.remove("M*f4Jlue");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      linkedList0.add("no");
      jSONObject2.opt("no");
      Short short0 = new Short((short)1517);
      jSONObject1.append("M*f4Jlue", short0);
      JSONObject jSONObject3 = jSONObject0.put("put", false);
      JSONObject.valueToString(jSONObject2);
      try { 
        jSONObject3.getBoolean("\"java.lang.String@0000000003\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"java.lang.String@0000000003\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6283356526043842
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Long long0 = new Long((-5L));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "X_p";
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      jSONObject0.put("X_p", (Map) hashMap0);
      Double.sum(1.0, 0.0);
      Float float0 = new Float((double) (-5L));
      int int0 = (-4024);
      Integer integer0 = new Integer((-4024));
      jSONObject0.putOpt("getdoubleToRawLongBits", "getdoubleToRawLongBits");
      Double.isFinite((-5L));
      try { 
        jSONObject0.getJSONObject("getdoubleToRawLongBits");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getdoubleToRawLongBits\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Boolean.valueOf(false);
      Byte byte0 = new Byte((byte)58);
      String string0 = "4";
      JSONTokener jSONTokener0 = new JSONTokener("4");
      jSONObject0.opt((String) null);
      jSONTokener0.nextValue();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Boolean boolean0 = new Boolean((String) null);
      String string1 = "h^@^esQ!";
      try { 
        jSONArray0.getBoolean((byte)58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[58] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9881953629807079
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "tk!<P&dW8";
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap0.put(boolean0, "tk!<P&dW8");
      JSONObject jSONObject1 = jSONObject0.accumulate("tk!<P&dW8", "tk!<P&dW8");
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Short short0 = new Short((short)8);
      Float float0 = new Float((float) (short)8);
      Long long0 = new Long((short)8);
      JSONObject jSONObject2 = jSONObject1.accumulate("tk!<P&dW8", long0);
      String string1 = "kt+LN?e";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "kt+LN?e";
      JSONObject jSONObject3 = new JSONObject(float0, stringArray0);
      jSONObject3.optLong("kt+LN?e", (long) (short)8);
      Float float1 = new Float((double) 8L);
      jSONObject2.append("kt+LN?e", float1);
      hashMap0.put((Boolean) null, "kt+LN?e");
      String string2 = "getput";
      try { 
        jSONObject3.put((String) null, 8L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Object object0 = new Object();
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject();
      JSONArray jSONArray0 = jSONObject2.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6291821433649187
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Short short0 = new Short((short)108);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "bh";
      stringArray0[1] = "bh";
      stringArray0[2] = "Gq{s!G5vTE}";
      JSONObject jSONObject0 = new JSONObject((Object) "`.Lz'|aI,V@ e-7Oj@");
      jSONObject0.optDouble("Gq{s!G5vTE}", 0.0);
      jSONObject0.optLong("Gq{s!G5vTE}", 880L);
      Boolean boolean0 = new Boolean((String) null);
      Integer integer0 = new Integer((-1018));
      JSONTokener jSONTokener0 = new JSONTokener("iskeys");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of iskeys
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.3382182467778962
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject.valueToString(jSONArray0);
      String string0 = "M*f4Jlue";
      jSONObject0.toString(45, 45);
      String string1 = "@c}DE0";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("@c}DE0", object0);
      JSONObject.quote("*>");
      int int0 = 12;
      jSONObject1.optInt((String) null, 55);
      jSONObject0.opt("*>");
      jSONObject0.optInt("_", (-2640));
      Byte byte0 = new Byte((byte)69);
      JSONObject.numberToString(byte0);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject2 = new JSONObject(jSONArray0);
      try { 
        jSONObject2.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.7196120613317416
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "M*f4Jlue";
      JSONObject jSONObject1 = jSONObject0.append("M*f4Jlue", "M*f4Jlue");
      jSONObject0.optDouble("");
      JSONObject jSONObject2 = jSONObject0.put("", 124);
      jSONObject1.toString(0);
      jSONObject2.toString();
      Boolean boolean0 = new Boolean("{\n\"java.lang.String@0000000004\": java.lang.Integer@0000000005,\n\"java.lang.String@0000000003\": [\"java.lang.String@0000000003\"]\n}");
      JSONObject jSONObject3 = new JSONObject();
      boolean boolean1 = true;
      jSONObject0.put("s/:Tq", true);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject4 = new JSONObject("{\"java.lang.String@0000000004\":java.lang.Integer@0000000005,\"java.lang.String@0000000003\":wheel.json.JSONArray@0000000002}");
      JSONObject jSONObject5 = jSONObject4.accumulate("{\"java.lang.String@0000000004\":java.lang.Integer@0000000005,\"java.lang.String@0000000003\":wheel.json.JSONArray@0000000002}", (Object) null);
      jSONObject5.optInt("M*f4Jlue");
      jSONObject4.put("&OvBwa,^q([", true);
      String string1 = "g\";;rnt";
      // Undeclared exception!
      try { 
        jSONObject4.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.583515963657604
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.logicalXor(false, false);
      Boolean.logicalAnd(true, false);
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wM?L", (Object) boolean0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      JSONObject jSONObject2 = new JSONObject("wheel.json.JSONArray", stringArray0);
      Object object0 = JSONObject.NULL;
      long long0 = jSONObject1.optLong("wheel.json.JSONArray", (-696L));
      assertEquals((-696L), long0);
      
      StringWriter stringWriter0 = new StringWriter(48);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append('H');
      stringWriter1.append('z');
      stringWriter0.append((CharSequence) "K/kp(RcA=");
      Writer writer0 = jSONObject1.write(stringWriter1);
      writer0.write(48);
      jSONObject0.write(writer0);
      jSONObject1.toString(2203, 48);
      boolean boolean1 = jSONObject0.getBoolean("wM?L");
      assertFalse(boolean1);
      
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      JSONObject jSONObject3 = jSONObject0.put("B", (Collection) linkedList0);
      jSONObject3.get("wM?L");
      Integer integer0 = new Integer(1);
      jSONObject2.putOpt("{\"java.lang.String@0000000002\": java.lang.Boolean@0000000003}", integer0);
      assertTrue(boolean0.equals((Object)boolean1));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.1597316160754936
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray1 = new JSONArray();
      Short short0 = new Short((short) (-7611));
      Float float0 = new Float((float) (short) (-7611));
      JSONObject jSONObject1 = jSONObject0.accumulate("false", float0);
      JSONObject jSONObject2 = jSONObject1.put("MGJ}&q!-)%sBt#", (int) (short) (-7611));
      double double0 = jSONObject0.optDouble("wri", (double) 44);
      assertEquals(44.0, double0, 0.01);
      
      jSONObject1.put("\t", (int) (short) (-7611));
      double double1 = jSONObject2.getDouble("\t");
      assertEquals((-7611.0), double1, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.9846668025409493
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "X_p";
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject.valueToString(jSONObject0, 44, (-1100));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "X_p";
      stringArray0[1] = "X_p";
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject jSONObject2 = jSONObject0.put("`0-|<GN \"t%6'dsRU?m", true);
      jSONObject2.toString(8, (-1100));
      String string1 = "isnotify";
      try { 
        jSONObject0.getBoolean("isnotify");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isnotify\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "[]";
      jSONObject0.put("[]", false);
      Short short0 = new Short((short)74);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray("[]");
      int int0 = (-14482067);
      try { 
        jSONArray0.getJSONObject((short)47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[47] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.9788482582892102
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Byte byte0 = new Byte((byte)25);
      Byte.toUnsignedLong((byte)59);
      Byte.compare((byte)59, (byte) (-92));
      Byte.compare((byte)25, (byte)32);
      JSONObject.valueToString(byte0, (byte)25, (-3687));
      JSONObject jSONObject0 = new JSONObject();
      Byte.toUnsignedLong((byte)25);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Byte@0000000001", (int) (byte)32);
      Byte.compare((byte) (-92), (byte)59);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 2448, 8192);
      JSONObject jSONObject2 = new JSONObject();
      Byte.toUnsignedLong((byte)32);
      jSONObject0.put("0", (-3687));
      jSONObject1.optDouble("java.lang.Byte@0000000001");
      String string0 = "mi";
      try { 
        jSONObject1.getJSONObject("mi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mi\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.4597084333707615
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "M*f4Jlue";
      JSONObject jSONObject1 = jSONObject0.append("M*f4Jlue", "M*f4Jlue");
      jSONObject0.optDouble("");
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      jSONObject1.toString(0);
      jSONObject2.toString();
      Boolean boolean0 = new Boolean("{\"java.lang.String@0000000003\": [\"java.lang.String@0000000003\"]}");
      JSONObject jSONObject3 = new JSONObject();
      boolean boolean1 = true;
      jSONObject0.put("s/:Tq", true);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject4 = new JSONObject("{\"java.lang.String@0000000005\":\"java.lang.Class@0000000006\"}");
      JSONObject jSONObject5 = jSONObject4.accumulate("{\"java.lang.String@0000000005\":\"java.lang.Class@0000000006\"}", jSONObject2);
      try { 
        jSONObject5.get("\"YvU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"YvU\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Short short0 = new Short((short)108);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "bh";
      stringArray0[1] = "bh";
      stringArray0[2] = "Gq{s!G5vTE}";
      String string0 = "`.Lz'|aI,V@ e-7Oj@";
      Integer integer0 = new Integer((short)108);
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.990149023187219
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap0.put(boolean0, "tk!<P&dW8");
      jSONObject0.accumulate("tk!<P&dW8", "tk!<P&dW8");
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Short short0 = new Short((short)8);
      Float float0 = new Float(0.0F);
      Long long0 = new Long((short)8);
      JSONObject jSONObject1 = jSONObject0.accumulate("toS", (Object) null);
      Double double0 = new Double(0.0F);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "tk!<P&dW8";
      stringArray0[1] = "tk!<P&dW8";
      stringArray0[2] = "toS";
      stringArray0[3] = "kt+LN?e";
      stringArray0[4] = null;
      JSONObject jSONObject2 = new JSONObject(double0, stringArray0);
      String string0 = "'@+{*[6,'?)tWOB)$h";
      jSONObject1.optLong("'@+{*[6,'?)tWOB)$h", (long) (short)8);
      Float float1 = new Float((-1.0));
      try { 
        jSONObject1.append("tk!<P&dW8", "kt+LN?e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[tk!<P&dW8] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.160690500606041
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = (-1L);
      Long long1 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject1 = jSONObject0.put("X_p", (Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("] is not a JSONObject.", (Collection) linkedList0);
      JSONObject.valueToString(jSONObject1, 44, (-1100));
      Object object0 = JSONObject.NULL;
      jSONObject1.accumulate("] is not a JSONObject.", object0);
      String[] stringArray0 = new String[2];
      Double double0 = new Double(0.0);
      linkedList0.add(double0);
      stringArray0[0] = "X_p";
      stringArray0[1] = "X_p";
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      try { 
        jSONObject0.put("r?]0[+d/V0tlNC", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "]kwL5C6h8&j";
      JSONObject jSONObject1 = jSONObject0.put("]kwL5C6h8&j", 0L);
      jSONObject0.isNull("]kwL5C6h8&j");
      jSONObject1.opt("]kwL5C6h8&j");
      Byte byte0 = new Byte((byte)12);
      Boolean boolean0 = new Boolean(",\n");
      Boolean boolean1 = new Boolean("]kwL5C6h8&j");
      Integer integer0 = new Integer((byte)12);
      String string1 = "<F4AJA%ANS>";
      JSONTokener jSONTokener0 = new JSONTokener("<F4AJA%ANS>");
      JSONTokener jSONTokener1 = new JSONTokener(",\n");
      jSONTokener1.next();
      try { 
        jSONTokener1.next('R');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected 'R' and instead saw '
         // ' at character 2 of ,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.43432276723034
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optDouble("Substring bounds error");
      jSONObject0.toString((-1178));
      jSONObject0.optDouble("`A-cN5T!|k6%_R]+$");
      JSONObject jSONObject1 = new JSONObject((Object) "`A-cN5T!|k6%_R]+$");
      jSONObject1.toString(47);
      jSONObject0.toString();
      jSONObject1.opt("}8Twf;SCvXL@K");
      jSONObject0.optBoolean("}8Twf;SCvXL@K");
      String string0 = "v^rzhG'EQ/:4";
      JSONObject jSONObject2 = jSONObject1.put("v^rzhG'EQ/:4", true);
      jSONObject2.toString(0, 9);
      try { 
        jSONObject1.getBoolean("vXt5:HE`eL+n>LXT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"vXt5:HE`eL+n>LXT\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.8599926997020182
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject1 = jSONObject0.put("X_p", (Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject(long0);
      jSONObject1.put("W?\"oa", 1);
      Double double0 = new Double((-1201.08060164));
      jSONObject2.put("W?\"oa", (Object) "X_p");
      jSONObject1.optDouble("W?\"oa", 1.0);
      String string0 = "JSONArray[";
      Long long1 = new Long(576L);
      Object object0 = new Object();
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      hashMap0.putAll(hashMap1);
      jSONObject1.append("wri", object0);
      try { 
        jSONObject2.getJSONArray("JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.8238733159854372
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Byte byte0 = new Byte((byte)25);
      Byte.toUnsignedLong((byte)59);
      Byte.compare((byte)59, (byte) (-92));
      Byte.compare((byte)25, (byte)32);
      JSONObject.valueToString(byte0, (byte)25, (-3687));
      JSONObject jSONObject0 = new JSONObject();
      Byte.toUnsignedLong((byte)25);
      jSONObject0.put("java.lang.Byte@0000000001", (int) (byte)32);
      String string0 = "NO{8Sc~>\"|";
      jSONObject0.getDouble("java.lang.Byte@0000000001");
      try { 
        jSONObject0.getJSONArray("java.lang.Byte@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Byte@0000000001\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Short short0 = new Short((short)108);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "bh";
      stringArray0[1] = "bh";
      stringArray0[2] = "Gq{s!G5vTE}";
      stringArray0[3] = "`.Lz'|aI,V@ e-7Oj@";
      stringArray0[4] = "$22C!A|ci1I3}";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.optJSONObject(".");
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.5637925988661925
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optDouble("Substring bounds error");
      jSONObject0.toString((-1155));
      jSONObject0.optDouble("`A-cN5T!|k6%_R]+$");
      JSONObject jSONObject1 = jSONObject0.put("vXt5:HE`eL+n>LXT", 0);
      jSONObject0.toString();
      jSONObject1.opt("}8Twf;SCvXL@K");
      jSONObject0.optBoolean("}8Twf;SCvXL@K");
      JSONObject jSONObject2 = jSONObject1.put("vXt5:HE`eL+n>LXT", true);
      jSONObject2.toString(0, 9);
      jSONObject1.getBoolean("vXt5:HE`eL+n>LXT");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.valueOf(true);
      jSONObject1.put("{\"java.lang.String@0000000004\":java.lang.Integer@0000000005,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}", (Collection) linkedList0);
      linkedList0.add(boolean0);
      jSONObject1.put("Substring bounds error", (Collection) linkedList0);
      try { 
        jSONObject2.get("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000002\\\": \\\"java.lang.Class@0000000003\\\"}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.3171077688239023
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject1 = jSONObject0.put("X_p", (Map) hashMap0);
      JSONObject.valueToString(jSONObject1, 44, (-1100));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "X_p";
      stringArray0[1] = "X_p";
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      JSONObject jSONObject3 = jSONObject1.put("`0-|<GN \"t%6'sRU?m", true);
      jSONObject3.toString(8, (-1100));
      String string0 = "isnotify";
      StringWriter stringWriter0 = new StringWriter(8);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "{\n\"java.lang.String@0000000007\": java.lang.Boolean@0000000008,\n\"java.lang.String@0000000003\": {}\n}", 8, 8);
      StringWriter stringWriter2 = stringWriter1.append('H');
      stringWriter2.append('H');
      stringWriter2.append('\"');
      stringWriter0.append((CharSequence) "X_p");
      jSONObject1.write(stringWriter0);
      stringWriter2.write("{\"java.lang.String@0000000003\": {}}");
      try { 
        jSONObject0.getDouble("isnotify");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isnotify\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1006789212792607
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.put(boolean0, "Zopjm#");
      Boolean boolean1 = Boolean.valueOf(false);
      JSONObject jSONObject1 = jSONObject0.accumulate("Zopjm#", boolean1);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Short short0 = new Short((short) (-1520));
      Float float0 = new Float((float) (short)8);
      Long long0 = new Long((short) (-1520));
      Byte byte0 = new Byte((byte)61);
      Boolean boolean2 = Boolean.valueOf(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Zopjm#";
      stringArray0[1] = "ishashCode";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      Integer integer0 = new Integer(124);
      JSONObject jSONObject3 = jSONObject2.putOpt("is", boolean1);
      Object object0 = jSONObject3.get("Zopjm#");
      assertFalse(object0.equals((Object)boolean2));
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6702992181413672
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Collection) linkedList0);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[2];
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      Integer integer0 = new Integer((-1100));
      JSONObject jSONObject3 = new JSONObject(linkedList0);
      jSONObject3.optDouble((String) null, (-4067.5445));
      linkedList0.toArray();
      try { 
        jSONObject1.getDouble("isdoubleToString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isdoubleToString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5666734343741948
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      Double double0 = new Double((-463.85426587362));
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = null;
      Double.sum((-463.85426587362), 1.6825157522459437);
      Float float0 = new Float((-463.85426587362));
      try { 
        jSONObject0.put((String) null, (-1534));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.9674617035841129
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Byte byte0 = new Byte((byte)25);
      byte byte1 = (byte)59;
      Byte.toUnsignedLong((byte)59);
      Byte.compare((byte)59, (byte) (-92));
      byte byte2 = (byte)32;
      Byte.compare((byte)25, (byte)32);
      JSONObject.valueToString(byte0, (byte)25, (-3687));
      JSONObject jSONObject0 = new JSONObject();
      Byte.toUnsignedLong((byte)25);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Byte@0000000001", (int) (byte)32);
      String string0 = "NO{8Sc~>\"|";
      JSONObject jSONObject2 = jSONObject1.put("NO{8Sc~>\"|", (double) 25L);
      jSONObject2.putOpt("java.lang.Byte@0000000001", jSONObject0);
      try { 
        jSONObject2.getBoolean("NO{8Sc~>\"|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"NO{8Sc~>\\\"|\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7855452526613733
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "M*f4Jlue";
      JSONObject jSONObject1 = jSONObject0.append("M*f4Jlue", "M*f4Jlue");
      int int0 = 44;
      int int1 = (-1100);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject2 = jSONObject0.put("] i not  JSONObject.", (Collection) linkedList0);
      JSONObject.valueToString(linkedList0, (-1100), 44);
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject2.accumulate((String) null, jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1428074196753928
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Byte byte0 = new Byte((byte)25);
      byte byte1 = (byte)59;
      Byte.toUnsignedLong((byte)59);
      JSONObject jSONObject0 = new JSONObject((Object) "bh");
      String string0 = "Unclosed comment";
      JSONObject jSONObject1 = jSONObject0.put("Unclosed comment", (int) (byte)59);
      double double0 = (-3068.91085283);
      Double double1 = new Double(0.0);
      String string1 = null;
      try { 
        jSONObject1.put((String) null, (Object) "Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.991837735961188
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "wa";
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.toString(91, 91);
      Double double0 = new Double(91);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("getsplit", 91);
      jSONObject0.remove("wa");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      jSONObject1.keys();
      Float float0 = new Float((-1689.1925758889));
      Integer integer0 = new Integer((-1676));
      JSONObject jSONObject2 = jSONObject0.put("wa", (Object) integer0);
      JSONObject.valueToString(jSONArray1, 0, 91);
      jSONObject1.optLong("wa", 1L);
      jSONObject2.optLong("getsplit");
      JSONObject.quote("wa");
      try { 
        jSONArray0.getJSONObject((-38489319));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-38489319] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.122204936133384
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = new JSONObject();
      String string1 = "W,G";
      String string2 = "M*f4JluMe";
      JSONObject jSONObject1 = jSONObject0.append("] not found.", "] not found.");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string3 = "[]";
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      jSONObject0.put("[]", (Collection) linkedList1);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(linkedList0);
      String string4 = null;
      Float float0 = new Float(1703.2786F);
      JSONObject jSONObject2 = jSONObject0.putOpt("[]", float0);
      jSONObject2.optInt("3qQ4nY8%g&f", (-50364773));
      HashMap<JSONObject, Long> hashMap0 = new HashMap<JSONObject, Long>(18);
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      jSONObject1.getLong("[]");
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject("3qQ4nY8%g&f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 3qQ4nY8%g&f
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.9001313256366266
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap0.put(boolean0, "tk!<P&dW8");
      JSONObject jSONObject1 = jSONObject0.accumulate("tk!<P&dW8", "tk!<P&dW8");
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Short short0 = new Short((short)8);
      Float float0 = new Float((float) (short)8);
      Long long0 = new Long((short)8);
      JSONObject jSONObject2 = jSONObject1.accumulate("tk!<P&dW8", long0);
      Byte byte0 = new Byte((byte)61);
      Boolean boolean1 = new Boolean("t$");
      JSONObject jSONObject3 = new JSONObject(boolean1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "tk!<P&dW8";
      stringArray0[1] = "tk!<P&dW8";
      jSONObject1.optLong("tk!<P&dW8", (long) (short)8);
      JSONObject jSONObject4 = new JSONObject();
      jSONObject4.optLong("t$", (long) (short)8);
      Boolean boolean2 = new Boolean(false);
      JSONObject jSONObject5 = new JSONObject(long0);
      try { 
        jSONObject2.getDouble("tk!<P&dW8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"tk!<P&dW8\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.4280648236309732
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String string0 = ",\n";
      Integer integer0 = new Integer((-3721));
      Integer.remainderUnsigned((-3721), (-3721));
      hashMap0.put(",\n", integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("m&1.Q(:G)", hashMap0);
      try { 
        jSONObject0.getJSONArray("m&1.Q(:G)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"m&1.Q(:G)\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.83611631639612
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap0.put(boolean0, "tk!<P&dW8");
      JSONObject jSONObject1 = jSONObject0.accumulate("tk!<P&dW8", "tk!<P&dW8");
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Short short0 = new Short((short)8);
      Float float0 = new Float((float) (short)8);
      Long long0 = new Long((short)8);
      JSONObject jSONObject2 = jSONObject1.accumulate("tk!<P&dW8", long0);
      Byte byte0 = new Byte((byte)61);
      Boolean boolean1 = new Boolean("t$");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "tk!<P&dW8";
      stringArray0[2] = "t$";
      stringArray0[4] = null;
      stringArray0[5] = "tk!<P&dW8";
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      Integer integer0 = new Integer((short)8);
      jSONObject2.putOpt("is", boolean0);
      try { 
        jSONObject1.get("t$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"t$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.3018009490440123
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "M*f4Jlue";
      JSONObject jSONObject1 = jSONObject0.append("M*f4Jlue", "M*f4Jlue");
      jSONObject0.optDouble("");
      jSONObject1.toString(0);
      jSONObject0.toString();
      String string1 = "@88G//DMGde<~zFJ";
      jSONObject1.optBoolean("@88G//DMGde<~zFJ");
      String string2 = "s/:Tq";
      jSONObject1.append("s/:Tq", "{\"java.lang.String@0000000003\": [\"java.lang.String@0000000003\"]}");
      jSONObject0.put("s/:Tq", true);
      String string3 = jSONObject0.toString(809, 1569);
      try { 
        jSONObject0.getBoolean(string3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\njava.lang.String@0000000006\\\": java.lang.Boolean@0000000007,\\njava.lang.String@0000000003\\\": [\\\"java.lang.String@0000000003\\\"]\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Short short0 = new Short((short)108);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "bh";
      stringArray0[1] = "bh";
      stringArray0[2] = "Gq{s!G5vTE}";
      Short short1 = new Short((short)353);
      JSONObject jSONObject0 = new JSONObject(short1);
      jSONObject0.put("Gq{s!G5vTE}", true);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("", (Collection) linkedList0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.533314988295382
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optBoolean("m0+", true);
      jSONObject0.optBoolean("v>j6Aa/7v(QlV");
      int int0 = 3940;
      jSONArray0.put(4013, 3940);
      jSONObject0.toJSONArray(jSONArray0);
      String string0 = "Q]sr_D<Or#!c6CT^H";
      try { 
        jSONObject0.getJSONArray("Q]sr_D<Or#!c6CT^H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Q]sr_D<Or#!c6CT^H\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.2635298731432094
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      long long0 = 0L;
      Long long1 = new Long(0L);
      JSONArray jSONArray0 = new JSONArray();
      byte byte0 = (byte)14;
      Float float0 = new Float((float) (short) (-7611));
      JSONObject jSONObject1 = jSONObject0.accumulate("false", float0);
      JSONObject jSONObject2 = jSONObject1.put("MGJ}&q!-)%sBt#", (int) (short) (-7611));
      String string0 = "wri";
      Double double0 = new Double((-3068.91085283));
      JSONObject.getNames(jSONObject2);
      jSONObject0.getString("MGJ}&q!-)%sBt#");
      int int0 = 1081;
      try { 
        jSONArray0.getJSONObject(1081);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1081] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1537419427010902
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject.getNames(jSONObject0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean.logicalOr(true, false);
      Boolean.logicalXor(false, true);
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      // Undeclared exception!
      try { 
        linkedList2.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.189470694285385
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Long long0 = new Long(0L);
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float((float) (short) (-7611));
      JSONObject jSONObject1 = jSONObject0.accumulate("false", float0);
      String string0 = "MGJ}&q!-)%sBt#";
      JSONObject jSONObject2 = jSONObject1.put("MGJ}&q!-)%sBt#", (int) (short) (-7611));
      JSONObject.valueToString(long0, (short) (-7611), 3006);
      StringWriter stringWriter0 = new StringWriter(72);
      StringWriter stringWriter1 = stringWriter0.append('z');
      JSONObject.valueToString(jSONObject2);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "wheel.json.JSONObject@0000000001");
      jSONObject0.write(stringWriter1);
      int int0 = 97;
      // Undeclared exception!
      try { 
        stringWriter2.append((CharSequence) "MGJ}&q!-)%sBt#", 3006, 97);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.9965658669579789
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Long long0 = new Long(2002L);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "wheel.json.JSONObject$Null";
      stringArray0[2] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[3] = "] is not a Boolean.";
      stringArray0[4] = "] is not a Boolean.";
      stringArray0[5] = "!]x;B4B";
      stringArray0[6] = "K/kp(RcA=";
      stringArray0[7] = "";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 4, 39);
      StringWriter stringWriter0 = new StringWriter(4);
      jSONObject0.accumulate("jkI~^ZIF,GF}bN", "JSONArray initial value should be a string or collection or array.");
      StringWriter stringWriter1 = stringWriter0.append('z');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "!]x;B4B");
      jSONObject0.write(stringWriter2);
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "K/kp(RcA=", 83, 97);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.8239592165010823
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(4013, 4013);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 4013, 23);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = null;
      JSONObject.quote((String) null);
      JSONTokener jSONTokener0 = new JSONTokener("\"\"");
      try { 
        jSONTokener0.nextString(' ');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 2 of \"\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.830910896829526
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Boolean.valueOf(false);
      Boolean.logicalXor(false, false);
      String string0 = "M*f4Jlue";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("M*f4Jlue", (Object) null);
      jSONObject0.remove("SiR_FAOyL10");
      String string1 = "\\u";
      JSONObject.valueToString("M*f4Jlue");
      jSONObject1.optInt("M*f4Jlue", 45);
      jSONObject1.remove("M*f4Jlue");
      JSONTokener jSONTokener0 = new JSONTokener("M*f4Jlue");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of M*f4Jlue
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "yRuXE;3:8=Y+!'0f";
      double double0 = (-370.0);
      Double double1 = new Double((-370.0));
      hashMap0.put("yRuXE;3:8=Y+!'0f", double1);
      String string1 = null;
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.9814963582333824
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Long long0 = new Long(0L);
      JSONArray jSONArray0 = new JSONArray();
      short short0 = (short) (-7611);
      Float float0 = new Float((float) (short) (-7611));
      JSONObject jSONObject1 = jSONObject0.accumulate("false", float0);
      JSONObject jSONObject2 = jSONObject1.put("MGJ}&q!-)%sBt#", (int) (short) (-7611));
      Double double0 = new Double((-3068.91085283));
      jSONObject2.put("MGJ}&q!-)%sBt#", (Object) double0);
      jSONObject0.optDouble("wri", (double) 44);
      String string0 = "\\u";
      jSONObject0.append(string0, "MGJ}&q!-)%sBt#");
      JSONObject.valueToString((Object) null);
      String string1 = "\\t";
      try { 
        jSONObject1.getJSONArray("MGJ}&q!-)%sBt#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"MGJ}&q!-)%sBt#\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double((-3148.0439950287));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "cEDz";
      Double.sum((-3148.0439950287), (-1818.02341));
      stringArray0[1] = "`.Lz'|aI,V@ e-7Oj@";
      stringArray0[2] = "tk!<P&dW8";
      JSONObject jSONObject1 = new JSONObject(double0, stringArray0);
      jSONObject0.optJSONObject("#N0M\t__6'Z*cG*bY");
      boolean boolean0 = jSONObject0.has("`4qYj@L:/vn=m~)");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.4708084763221112
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Long long0 = new Long(2002L);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "tF^?@YwDUQS";
      stringArray0[1] = "wheel.json.JSONObject$Null";
      stringArray0[2] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[3] = "] is not a Boolean.";
      stringArray0[4] = "";
      stringArray0[5] = "!]x;B4B";
      stringArray0[7] = "wheel.json.JSONObject$Null";
      Long.remainderUnsigned(1548L, 2002L);
      stringArray0[8] = "wheel.json.JSONArray";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.put("wheel.json.JSONArray", 3056.497058791367);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = new Integer(17);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "toH";
      stringArray0[1] = "[*$8";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      jSONObject0.put("[*$8", (Map) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-3721));
      Integer.getInteger(",\n");
      hashMap0.put(",\n", integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("gt(L;_&", integer0);
      Short short0 = new Short((short)1);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short1 = new Short((short)70);
      linkedList0.add(short1);
      jSONObject0.optString("wheel.json.JSONTokener", ",\n");
      jSONObject0.put("*+>ho+nw\"{MH", 0L);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)12);
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      Short short1 = new Short((short)12);
      linkedList0.offerLast(short1);
      String string0 = JSONObject.doubleToString(1.631017636549874);
      assertEquals("1.631017636549874", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.159713904370655
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "tk!<P&dW8";
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap0.put(boolean0, "tk!<P&dW8");
      JSONObject jSONObject1 = jSONObject0.accumulate("tk!<P&dW8", "tk!<P&dW8");
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Short short0 = new Short((short)8);
      Float float0 = new Float((float) (short)8);
      Long long0 = new Long((short)8);
      JSONObject jSONObject2 = jSONObject1.accumulate("tk!<P&dW8", long0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "kt+LN?e";
      JSONObject jSONObject3 = new JSONObject(float0, stringArray0);
      jSONObject3.optLong("kt+LN?e", (long) (short)8);
      Float float1 = new Float((double) 8L);
      jSONObject2.append("kt+LN?e", float1);
      Boolean boolean1 = new Boolean(false);
      JSONObject.valueToString(boolean1);
      String string1 = "getput";
      jSONObject2.keys();
      try { 
        jSONObject0.getJSONArray("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.567161505887292
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("M*f4Jlue", "M*f4Jlue");
      jSONObject0.optDouble("");
      JSONObject jSONObject2 = new JSONObject((Object) "M*f4Jlue");
      jSONObject1.toString((-31));
      jSONObject2.toString();
      Boolean boolean0 = new Boolean("{\"java.lang.String@0000000003\": [\"java.lang.String@0000000003\"]}");
      String string0 = "s/:Tq";
      JSONObject jSONObject3 = new JSONObject();
      boolean boolean1 = true;
      jSONObject0.put("s/:Tq", true);
      JSONObject jSONObject4 = new JSONObject("{\"java.lang.String@0000000007\":[java.lang.Byte@0000000029,java.lang.Byte@0000000030,java.lang.Byte@0000000031,java.lang.Byte@0000000032,java.lang.Byte@0000000033,java.lang.Byte@0000000034,java.lang.Byte@0000000035,java.lang.Byte@0000000036],\"java.lang.String@0000000026\":\"java.lang.Class@0000000027\",\"java.lang.String@0000000005\":java.lang.Boolean@0000000006}");
      JSONObject jSONObject5 = jSONObject4.accumulate("{\"java.lang.String@0000000007\":[java.lang.Byte@0000000029,java.lang.Byte@0000000030,java.lang.Byte@0000000031,java.lang.Byte@0000000032,java.lang.Byte@0000000033,java.lang.Byte@0000000034,java.lang.Byte@0000000035,java.lang.Byte@0000000036],\"java.lang.String@0000000026\":\"java.lang.Class@0000000027\",\"java.lang.String@0000000005\":java.lang.Boolean@0000000006}", jSONObject2);
      jSONObject5.optDouble("*'GKai@go */-Y3UT");
      JSONObject jSONObject6 = jSONObject4.put("&OvBwa,^q([", true);
      jSONObject6.put("true", (long) (-31));
      try { 
        jSONObject0.getDouble("g\";;rn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g\\\";;rn\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.0981473891350673
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Long long0 = new Long((-5L));
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject1 = jSONObject0.put("X_p", (Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject2 = jSONObject0.put("] is not a JSONObject.", (Collection) linkedList0);
      JSONObject.valueToString((Object) null, 127, 127);
      Object object0 = new Object();
      jSONObject1.accumulate("null", jSONObject2);
      Short short0 = new Short((short) (-4181));
      linkedList0.clear();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      linkedList1.offerLast(short0);
      Short short1 = new Short((short) (-3083));
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      Short short2 = new Short((short)1058);
      linkedList2.add(short2);
      Short short3 = new Short((short)4096);
      Short short4 = new Short((short) (-3083));
      LinkedList<Short> linkedList3 = new LinkedList<Short>();
      linkedList3.add(short0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      StringWriter stringWriter0 = new StringWriter(44);
      stringWriter0.close();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "#P";
      String string0 = ",:]}/\\\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      Boolean.logicalOr(false, false);
      Boolean.logicalXor(false, false);
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      // Undeclared exception!
      try { 
        linkedList0.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Long long0 = new Long((-5L));
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Object object0 = new Object();
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      HashMap<Integer, Long> hashMap2 = new HashMap<Integer, Long>();
      hashMap2.putAll(hashMap1);
      StringWriter stringWriter0 = new StringWriter(44);
      Byte.toUnsignedInt((byte)42);
      Double double0 = new Double(0.0);
      double double1 = Double.max(969, (-1100));
      Double.min(743.1657093091, 0.0);
      JSONObject.testValidity(double0);
      assertNotEquals((double)double0, (double)double1, 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.4845152605020275
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Long long0 = new Long(2002L);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "wheel.json.JSONObject$Null";
      stringArray0[2] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[3] = "] is not a Boolean.";
      stringArray0[4] = "";
      stringArray0[5] = "!]x;B4B";
      stringArray0[6] = "K/kp(RcA=";
      stringArray0[7] = "";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.putOpt("tG'Ia{81", "wheel.json.JSONObject$Null");
      Double.isFinite((-2728.74));
      try { 
        jSONObject0.getJSONObject("K/kp(RcA=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K/kp(RcA=\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.3356031336424652
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "wheel.json.JSONObject$Null";
      stringArray0[2] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[3] = "] is not a Boolean.";
      stringArray0[4] = "";
      stringArray0[5] = "!]x;B4B";
      stringArray0[6] = "K/kp(RcA=";
      stringArray0[7] = "!]x;B4B";
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 4, 39);
      StringWriter stringWriter0 = new StringWriter(4);
      Integer integer0 = new Integer(98);
      JSONObject jSONObject0 = new JSONObject(integer0);
      Integer integer1 = new Integer(4);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short) (-2547));
      Short short1 = new Short((short)8);
      linkedList0.add(short1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-1953));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.500315532981063
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "wa";
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((-1689.1925758889));
      String[] stringArray1 = new String[9];
      stringArray1[0] = "wa";
      stringArray1[1] = "48;$";
      stringArray1[2] = "wa";
      stringArray1[3] = "wa";
      stringArray1[4] = "istoString";
      stringArray1[5] = "wa";
      stringArray1[6] = "wa";
      stringArray1[7] = "wa";
      stringArray1[8] = "wa";
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray1);
      jSONObject0.optLong("WSx", (-1L));
      jSONObject0.optLong("istoString", 1935L);
      try { 
        jSONObject0.getDouble("wa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wa\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.388967268189945
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      Long.toUnsignedString((-1L));
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optString(".Z}X", (String) null);
      String string0 = jSONObject0.optString("IzC-M}fq?aK0M");
      assertEquals("", string0);
      
      int int0 = jSONObject0.optInt("LmQ+^u+M=Q~]@", 27);
      assertEquals(27, int0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Boolean boolean0 = new Boolean((String) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      String string0 = jSONObject0.optString("isnames");
      assertEquals("", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Byte.toUnsignedLong((byte)59);
      Byte.compare((byte)59, (byte) (-92));
      Byte.compare((byte)25, (byte)32);
      JSONObject jSONObject0 = new JSONObject();
      Byte.toUnsignedLong((byte)25);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[2] = "NO{8Sc~>\"|";
      stringArray0[3] = "NO{8Sc~>\"|";
      stringArray0[4] = "NO{8Sc~>\"|";
      Byte.toUnsignedLong((byte)32);
      jSONObject0.isNull("+:tJ");
      Byte byte0 = new Byte((byte)59);
      assertEquals((byte)59, (byte)byte0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.03640165581678
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject1 = jSONObject0.put("X_p", (Map) hashMap0);
      JSONObject.valueToString(jSONObject1, 52, 52);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "X_p";
      String string0 = "`0-|<GN \"t%6'sRU?m";
      JSONObject.quote("`0-|<GN \"t%6'sRU?m");
      StringWriter stringWriter0 = new StringWriter(52);
      StringWriter stringWriter1 = new StringWriter(52);
      stringWriter1.close();
      stringWriter1.close();
      stringWriter1.flush();
      stringWriter1.append((CharSequence) "`0-|<GN \"t%6'sRU?m");
      JSONObject.valueToString(jSONObject1, 52, (-1));
      JSONObject.valueToString(stringWriter0);
      HashMap<Float, Integer> hashMap1 = new HashMap<Float, Integer>();
      Float float0 = new Float((double) (-1));
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.computeIfPresent(float0, biFunction0);
      BiFunction<Float, Object, Integer> biFunction1 = (BiFunction<Float, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction1);
      Float float1 = new Float((double) (-1));
      Integer integer0 = new Integer(3636);
      HashMap<Float, Integer> hashMap2 = new HashMap<Float, Integer>();
      Integer integer1 = new Integer((-1));
      Double double0 = new Double(0.0);
      hashMap0.put(integer1, double0);
      Float float2 = new Float((-808.542583705));
      try { 
        jSONObject1.getJSONArray("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.6250574794453296
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optDouble("Substring bounds error");
      jSONObject0.toString((-1178));
      jSONObject0.optDouble("`A-cN5T!|k6%_R]+$");
      JSONObject jSONObject1 = jSONObject0.put("vXt5:HE`eL+n>LXT", 0);
      jSONObject1.toString(47);
      jSONObject0.toString();
      jSONObject1.opt("}8Twf;SCvXL@K");
      jSONObject0.optBoolean("}8Twf;SCvXL@K");
      jSONObject1.append("`A-cN5T!|k6%_R]+$", "}8Twf;SCvXL@K");
      jSONObject0.optLong("}8Twf;SCvXL@K", (long) (-1178));
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append('=');
      JSONObject.quote("`A-cN5T!|k6%_R]+$");
      stringWriter0.append((CharSequence) "\"`A-cN5T!|\\k6%_R]+$\"");
      JSONObject.valueToString((Object) null, 0, 75);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("}8Twf;SCvXL@K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }8Twf;SCvXL@K
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Object object0 = new Object();
      Short short0 = new Short((short) (-308));
      Float float0 = new Float((-2959.9084F));
      Byte byte0 = new Byte((byte)12);
      jSONObject0.putOpt(",\n", (Object) null);
      Boolean boolean0 = Boolean.TRUE;
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short1 = new Short((short)3);
      Short short2 = new Short((short)8);
      linkedList0.offerLast(short2);
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      Short short3 = linkedList0.removeFirst();
      Short short4 = new Short((short)353);
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      Short short5 = new Short((short) (-308));
      LinkedList<Short> linkedList3 = new LinkedList<Short>();
      linkedList3.offerLast(short4);
      Short short6 = new Short((short)34);
      Short short7 = new Short((short)598);
      linkedList1.add(short3);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('c');
      StringWriter stringWriter1 = new StringWriter((short)34);
      stringWriter1.append((CharSequence) ",\n");
      stringWriter0.close();
      assertNotSame(stringWriter0, stringWriter1);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.2016820191049764
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Short short0 = new Short((short)108);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "bh";
      stringArray0[1] = "bh";
      stringArray0[2] = "Gq{s!G5vTE}";
      stringArray0[3] = "`.Lz'|aI,V@ e-7Oj@";
      JSONObject.quote("`.Lz'|aI,V@ e-7Oj@");
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.4794090592280063
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = (-5L);
      Long long1 = new Long((-5L));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "X_p";
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer((-857));
      Double double0 = new Double((-857));
      hashMap0.put(integer0, double0);
      jSONObject0.put("X_p", (Map) hashMap0);
      Double.sum(1.0, 0.0);
      Float float0 = new Float((double) (-5L));
      int int0 = (-4024);
      Integer integer1 = new Integer((-4024));
      String string1 = "getdoubleToRawLongBits";
      try { 
        jSONObject0.getDouble("I5C_Th.g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"I5C_Th.g\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONObject("Bad value from toJSONString: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Bad value from toJSONString: \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Long long0 = new Long(2002L);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "tF^?@YwDUQS";
      stringArray0[1] = "wheel.json.JSONObject$Null";
      stringArray0[2] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[3] = "] is not a Boolean.";
      stringArray0[4] = "";
      stringArray0[5] = "!]x;B4B";
      stringArray0[6] = "K/kp(RcA=";
      stringArray0[7] = "";
      Long.remainderUnsigned(1548L, 2002L);
      stringArray0[8] = "wheel.json.JSONArray";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Short short0 = new Short((short) (-1671));
      JSONArray jSONArray0 = jSONObject0.optJSONArray("eq");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0851886129676505
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Float float0 = new Float(224.39F);
      Float.min(4223.0F, 4223.0F);
      Float.max(4223.0F, (-2978.0F));
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.932447574164752
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "X_p";
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject1 = jSONObject0.put("X_p", (Map) hashMap0);
      int int0 = (-1100);
      JSONObject.valueToString(jSONObject1, 52, (-1100));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "X_p";
      String string1 = "`0-|<GN \"t%6'sRU?m";
      jSONObject1.put("`0-|<GN \"t%6'sRU?m", true);
      StringWriter stringWriter0 = new StringWriter(52);
      StringWriter stringWriter1 = stringWriter0.append('V');
      stringWriter1.append((CharSequence) "`0-|<GN \"t%6'sRU?m");
      JSONObject.valueToString(jSONObject1, 52, 'V');
      HashMap<Integer, Byte> hashMap1 = new HashMap<Integer, Byte>();
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("X_p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of X_p
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.6983575845696186
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Short short0 = new Short((short) (-1538));
      Short.toUnsignedLong((short)18);
      Short.compare((short)10, (short)10);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "O8_VOvc%Q#h";
      stringArray0[1] = "Fqz]=<k[b5tP";
      Short.toUnsignedLong((short) (-1538));
      stringArray0[2] = "Dj!~luEBKI";
      stringArray0[3] = "m^T5Y)3v|.5b=7}.";
      stringArray0[4] = "#lF";
      stringArray0[5] = "wheel.json.JSONException";
      Short.toUnsignedInt((short)4);
      stringArray0[6] = "JSONObject[";
      stringArray0[7] = "7H~A>o";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      boolean boolean0 = jSONObject0.isNull("Fqz]=<k[b5tP");
      jSONObject0.remove("is");
      Short.toUnsignedInt((short) (-825));
      Short.compare((short)10, (short)10);
      double double0 = jSONObject0.optDouble("JSONObject[", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean1 = jSONObject0.optBoolean("Fqz]=<k[b5tP");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Short short0 = new Short((short)108);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "bh";
      stringArray0[1] = "bh";
      stringArray0[2] = "Gq{s!G5vTE}";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0530721162798569
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Boolean.valueOf(true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "z|5'l[*U:FYF;&aWq";
      stringArray0[1] = "z|5'l[*U:FYF;&aWq";
      stringArray0[2] = "z|5'l[*U:FYF;&aWq";
      stringArray0[3] = "z|5'l[*U:FYF;&aWq";
      stringArray0[4] = "z|5'l[*U:FYF;&aWq";
      JSONObject jSONObject0 = new JSONObject("z|5'l[*U:FYF;&aWq", stringArray0);
      jSONObject0.optLong("z|5'l[*U:FYF;&aWq", (-1L));
      JSONObject.quote("");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      linkedList0.toArray();
      short short0 = (short)88;
      Short short1 = new Short((short)88);
      linkedList0.add(short1);
      JSONTokener jSONTokener0 = new JSONTokener("z|5'l[*U:FYF;&aWq");
      jSONTokener0.next();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 2 of z|5'l[*U:FYF;&aWq
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.994300419085813
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Long long0 = new Long((-5L));
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject1 = jSONObject0.put("X_p", (Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("] is not a JSONObject.", (Collection) linkedList0);
      JSONObject.valueToString(jSONObject1, 44, (-1100));
      Object object0 = new Object();
      jSONObject1.accumulate("] is not a JSONObject.", object0);
      short short0 = (short)8;
      short short1 = (short) (-3022);
      Short short2 = new Short((short) (-3022));
      linkedList0.clear();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      linkedList1.offerLast(short2);
      Short short3 = new Short((short)4096);
      linkedList1.offerLast(short3);
      Short short4 = new Short((short)92);
      linkedList1.removeAll(linkedList0);
      try { 
        Short.valueOf("Unclosed comment");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Unclosed comment\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.7090023095908928
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      linkedList0.pollFirst();
      Float float0 = new Float(1.0);
      JSONObject.valueToString(jSONObject0, 25, 44);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      assertEquals(0, linkedList1.size());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Byte byte0 = new Byte((byte)25);
      Byte.toUnsignedLong((byte)59);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.7004209113281625
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.put("pu", (Object) long0);
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short) (-7611));
      String string0 = "false";
      Float float0 = new Float((float) (short) (-7611));
      JSONObject jSONObject2 = jSONObject0.accumulate("false", float0);
      String[] stringArray0 = new String[7];
      stringArray0[1] = "MGJ}&q!-)%sBt#";
      stringArray0[2] = "pu";
      stringArray0[4] = "kt+LN?e";
      stringArray0[5] = "MGJ}&q!-)%sBt#";
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject2, stringArray0);
      long long1 = new Long((short) (-7611));
      jSONObject3.append("op", long0);
      try { 
        jSONObject1.getJSONArray("getput");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getput\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.2846818328436946
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      String string1 = "pu";
      jSONObject0.optBoolean(" !\"t", false);
      jSONObject0.optDouble("pu");
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Short short0 = new Short((short)108);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short1 = new Short((short)108);
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      Short short2 = new Short((short)35);
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      linkedList2.offerLast(short1);
      String string0 = JSONObject.doubleToString(511.0);
      assertEquals("511", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.8660598702493093
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Short short0 = new Short((short)88);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "bh";
      Short short1 = new Short((short)8);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short2 = new Short((short)8);
      Short short3 = new Short((short)88);
      linkedList0.offerLast(short3);
      Short short4 = new Short((short)8);
      Short short5 = new Short((short)88);
      Short short6 = new Short((short)1292);
      linkedList0.add(short6);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Boolean.valueOf("K/kp(RcA=");
      JSONObject jSONObject0 = new JSONObject("bh", stringArray0);
      Object object0 = JSONObject.NULL;
      StringWriter stringWriter0 = new StringWriter(69);
      stringWriter0.close();
      try { 
        jSONObject0.get("bh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"bh\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONTokener jSONTokener0 = new JSONTokener("zQ}|g6vZuuI858");
      jSONTokener0.syntaxError("Unclosed commd8ent");
      jSONTokener0.nextValue();
      int int0 = 7;
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)13);
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      linkedList1.offerLast(short0);
      Short short1 = new Short((short)166);
      Short short2 = new Short((short)13);
      linkedList1.add(short2);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "zQ}|g6vZuuI858";
      stringArray0[1] = "Unclosed commd8ent";
      stringArray0[2] = "Unclosed commd8ent";
      stringArray0[3] = "{";
      stringArray0[4] = "Unclosed commd8ent";
      stringArray0[5] = "K/kp(RcA=";
      stringArray0[6] = "zQ}|g6vZuuI858";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.5067598342584891
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Boolean.valueOf(false);
      Byte byte0 = new Byte((byte)58);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "z|5'l[*U:FYF;&aWq";
      JSONObject jSONObject1 = new JSONObject(byte0, stringArray0);
      jSONObject1.remove("z|5'l[*U:FYF;&aWq");
      jSONObject1.optLong((String) null, 1159L);
      jSONObject1.optDouble("s:/bE BgaUHKdWg", (double) 1159L);
      jSONObject0.optLong("s:/bE BgaUHKdWg", 0L);
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ] is not a JSONObject.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.850687754202587
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.put("pu", (Object) long0);
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short) (-7611));
      Float float0 = new Float((float) (short) (-7611));
      JSONObject jSONObject2 = jSONObject0.accumulate("false", (Object) null);
      String[] stringArray0 = new String[7];
      stringArray0[1] = "GJ}&q!-)%sT]Bt#";
      stringArray0[2] = "pu";
      stringArray0[4] = "kt+LN?e";
      stringArray0[5] = "GJ}&q!-)%sT]Bt#";
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject2, stringArray0);
      Long long1 = new Long((short) (-7611));
      JSONObject jSONObject4 = new JSONObject(jSONObject0);
      jSONObject1.put("false", (-1380));
      try { 
        jSONObject3.getDouble("@A]8c=h\"k?WDv3?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@A]8c=h\\\"k?WDv3?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.4735023850806486
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Byte.toUnsignedLong((byte)4);
      Byte.compare((byte)4, (byte)92);
      int int0 = new Byte((byte) (-51));
      JSONObject jSONObject0 = new JSONObject();
      Byte.toUnsignedLong((byte) (-89));
      JSONObject jSONObject1 = jSONObject0.put("k:vu7", (int) (byte)4);
      jSONObject0.put("NO{8Sc~>\"|", (double) (-3687));
      jSONObject1.put("isnumberToString", (long) (byte)92);
      double double0 = new Integer((byte)92);
      assertEquals(92, double0, 0.01);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.388967268189945
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Short short0 = new Short((short)1628);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".Y_@|6{lZ}v7hLRr";
      stringArray0[1] = "do";
      stringArray0[2] = "false";
      stringArray0[3] = "D-ss5$Fdzs[c";
      stringArray0[4] = "KT}12,";
      stringArray0[5] = "l'0bTEJ!DYxi|U2n";
      stringArray0[6] = "P\"5+S3R3v3/Kj";
      Short.toUnsignedInt((short)1628);
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      double double0 = jSONObject0.optDouble("do");
      assertEquals(Double.NaN, double0, 0.01);
      
      int int0 = jSONObject0.optInt("{}", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.8768448811808434
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.valueOf(false);
      hashMap0.put(boolean0, "tk!<P&dW8");
      JSONObject jSONObject1 = jSONObject0.accumulate("tk!<P&dW8", "tk!<P&dW8");
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Short short0 = new Short((short)8);
      Float float0 = new Float((float) (short)8);
      Long long0 = new Long((short)8);
      Byte byte0 = new Byte((byte)61);
      Boolean boolean1 = new Boolean("t$");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "tk!<P&dW8";
      stringArray0[2] = "t$";
      stringArray0[4] = null;
      stringArray0[5] = "tk!<P&dW8";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      try { 
        jSONObject2.getString("`B% L}W?.`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`B% L}W?.`\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.6890092384766586
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Float float0 = new Float((float) (short)160);
      JSONObject.numberToString(float0);
      JSONTokener jSONTokener0 = new JSONTokener("java.lang.Float@0000000001");
      JSONTokener jSONTokener1 = new JSONTokener("2G%8u$3NwU=~%y_v[]");
      JSONTokener jSONTokener2 = new JSONTokener("2SgR1:2D");
      JSONTokener jSONTokener3 = new JSONTokener("2G%8u$3NwU=~%y_v[]");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("2SgR1:2D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 2SgR1:2D
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.5358551955461082
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.length();
      String string0 = "";
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short) (-23));
      Float float0 = new Float((float) (short) (-23));
      Long long0 = new Long((short) (-23));
      Byte byte0 = new Byte((byte)61);
      Boolean boolean1 = new Boolean("t$");
      String[] stringArray0 = new String[6];
      stringArray0[2] = "t$";
      Integer integer0 = new Integer((short) (-23));
      String string0 = jSONObject0.toString((int) (byte)61, (int) (short) (-23));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.5327291449409433
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 4013;
      jSONArray0.put(4013, 3940);
      jSONObject0.toJSONArray(jSONArray0);
      String string0 = "Q]sr_D<Or#!c6CT^H";
      jSONObject0.optJSONObject("IgN?qx=/n/_");
      try { 
        jSONObject0.getJSONArray("Q]sr_D<Or#!c6CT^H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Q]sr_D<Or#!c6CT^H\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.8717814824679821
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)98);
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float(3241.6496368592675);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(float0, biFunction0);
      BiFunction<Object, Object, Integer> biFunction1 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction1);
      Float float1 = new Float((double) 1548L);
      Integer integer0 = new Integer((short)98);
      HashMap<Float, Integer> hashMap1 = new HashMap<Float, Integer>();
      Float float2 = new Float((double) (short)98);
      String string0 = "\"\"";
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject0.getJSONArray("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.numberToString(double0);
      JSONTokener jSONTokener0 = new JSONTokener("zQ}|g6vZuuI858");
      JSONTokener jSONTokener1 = new JSONTokener("java.lang.Double@0000000001");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of java.lang.Double@0000000001
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.get("'*#}]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'*#}]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.9758204357711924
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Short short0 = new Short((short)108);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "bh";
      stringArray0[1] = "bh";
      JSONObject jSONObject0 = new JSONObject((Object) "bh");
      JSONObject jSONObject1 = jSONObject0.put("bh", (int) (short)108);
      Double double0 = new Double((-3068.91085283));
      JSONObject jSONObject2 = jSONObject0.put("bh", (Object) "bh");
      jSONObject2.optDouble("bh", (double) (short)108);
      Long long0 = new Long((short)108);
      Long.compareUnsigned((short)108, (-784L));
      jSONObject2.append("JSONArray[", long0);
      Long.compare((-1), 2481L);
      String string0 = "N(ISay]";
      jSONObject1.optLong("N(ISay]");
      jSONObject0.isNull("istrim");
      Byte byte0 = new Byte((byte)98);
      try { 
        Integer.decode("bh");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"bh\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.4449026033934622
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Integer integer0 = new Integer((short)108);
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalOr(false, true);
      Boolean.logicalXor(false, true);
      Boolean.logicalOr(false, false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.getJSONArray(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.5140531895559188
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Long long0 = new Long(2002L);
      String string0 = "bh";
      JSONObject jSONObject0 = new JSONObject((Object) "bh");
      jSONObject0.put("bh", 972);
      String string1 = "";
      Double double0 = new Double((-1.0));
      String string2 = "] is not a number.";
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", (Object) "] is not a number.");
      jSONObject1.optDouble((String) null, (-3068.91085283));
      Long long1 = new Long(0L);
      Long.compareUnsigned(2002L, 0L);
      Integer integer0 = new Integer(8192);
      try { 
        jSONObject1.append((String) null, integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.6674619334292946
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.6761389064361045
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "N5";
      Long long0 = new Long(1170L);
      jSONObject0.append("getaddLast", long0);
      jSONObject0.optDouble("] is not a JSONArray.");
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      Float float0 = new Float((-728.0));
      Float float1 = new Float(0.0);
      Integer integer0 = new Integer(0);
      hashMap0.put(float1, integer0);
      Integer integer1 = new Integer(88);
      hashMap0.put(float0, integer1);
      try { 
        jSONObject0.getInt("getaddLast");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getaddLast\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.704111275729657
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "d1kTy^|| Xi;?@=pnB";
      stringArray0[1] = "Unclosed comment";
      stringArray0[2] = "zQ}|g6vZuuI858";
      stringArray0[3] = "{";
      stringArray0[4] = "H*KNvBQZLh";
      stringArray0[5] = "Unclosed comment";
      stringArray0[6] = "kt+LN?e";
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject((Object) "Unclosed comment");
      jSONObject0.optInt("H*KNvBQZLh", 7);
      jSONObject0.optDouble("d1kTy^|| Xi;?@=pnB");
      try { 
        jSONObject0.getInt("zQ}|g6vZuuI858");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"zQ}|g6vZuuI858\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Short short0 = new Short((short)108);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "bh";
      stringArray0[1] = "bh";
      stringArray0[2] = "Gq{s!G5vTE}";
      stringArray0[3] = "`.Lz'|aI,V@ e-7Oj@";
      String string0 = JSONObject.quote("Gq{s!G5vTE}");
      assertEquals("\"Gq{s!G5vTE}\"", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("zQ}|g6vZuuI858");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of zQ}|g6vZuuI858
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
