/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 03:50:41 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9945203270400977
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      Float.max((-4654.6465F), 822.5F);
      Float.max(0.0F, 822.5F);
      Float.min(0.0F, 822.5F);
      Boolean.compare(true, true);
      Boolean.logicalXor(true, false);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      Double double0 = new Double(822.5F);
      Double.isFinite(0.0F);
      HashMap<String, Double> hashMap2 = new HashMap<String, Double>(hashMap1);
      Double double1 = new Double((-1.0));
      HashMap<String, Double> hashMap3 = new HashMap<String, Double>();
      HashMap<String, Double> hashMap4 = new HashMap<String, Double>();
      hashMap4.put("getforEach", double0);
      Double double2 = new Double((-2664.3232));
      hashMap4.replace("9", double2);
      HashMap<JSONArray, Boolean> hashMap5 = new HashMap<JSONArray, Boolean>();
      HashMap<Integer, Boolean> hashMap6 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap6);
      JSONObject.valueToString(hashMap0);
      Long long0 = new Long(1L);
      jSONObject0.names();
      try { 
        jSONObject0.getJSONObject("isonClose");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isonClose\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.201252831140258
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Float float0 = new Float(878.146F);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.clone();
      Float.isFinite(2385);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      Double double0 = new Double(0.0);
      Double double1 = new Double((-2011.436374567));
      hashMap0.put("ha", double1);
      Double double2 = new Double(3313.46967);
      HashMap<JSONArray, Boolean> hashMap1 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Long long0 = new Long(165L);
      jSONObject0.names();
      JSONObject.valueToString(hashMap0, (-664), (-287));
      Long long1 = new Long((-664));
      assertFalse(long1.equals((Object)long0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.878624851622429
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray1);
      JSONObject jSONObject1 = jSONObject0.put("par", (-1774));
      Short short0 = new Short((short)23);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.accumulate("par", jSONArray0);
      jSONObject2.append("A JSONArray text must start with '['", object0);
      String string0 = jSONObject1.toString(595, 46);
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      JSONObject jSONObject3 = new JSONObject(jSONTokener0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(46);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Double double1 = hashMap0.merge((String) null, double0, biFunction0);
      Double.isFinite(46);
      Double double2 = new Double(452.056061954);
      hashMap0.replace("pTLY+K`whLP+:`\"{R", double1);
      JSONObject jSONObject4 = new JSONObject((Map) hashMap0);
      jSONObject4.put("$_QmH6refzvLCQy|=&i", (Collection) linkedList0);
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Short short1 = new Short((short)48);
      Long long0 = new Long((short)48);
      Long long1 = new Long((short)23);
      String string1 = JSONObject.valueToString(long1, 1072, 1072);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8396705795438666
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer integer0 = new Integer(338);
      Long long0 = new Long(338);
      Short short0 = new Short((short)120);
      Integer integer1 = new Integer(3363);
      Boolean boolean0 = new Boolean((String) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("=HEJRyp`@");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.offerFirst("=HEJRyp`@");
      linkedList1.add("uno");
      linkedList0.add("getgetClass");
      linkedList1.toArray();
      linkedList0.add((String) null);
      linkedList1.parallelStream();
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Integer integer2 = new Integer(1262);
      JSONObject jSONObject0 = new JSONObject(integer2);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1171019303194956
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer.toUnsignedString(97);
      Integer.min(466, 97);
      Integer integer0 = new Integer(57);
      Integer integer1 = new Integer((-1509));
      Object object0 = JSONObject.NULL;
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(466);
      Double double1 = new Double(452.056061954);
      hashMap0.replace("-15.3887713305147110", double1);
      Double double2 = new Double((-1.0));
      hashMap0.put("va", double2);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\b", (Object) null);
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long(0L);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("(1m");
      jSONObject1.put("XqZAq", (Collection) linkedList0);
      jSONObject0.put("isvalueOf", 0L);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9263548464292746
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Integer.toUnsignedString(97);
      Integer.min(466, 97);
      Integer integer0 = new Integer(57);
      Integer integer1 = new Integer((-1509));
      Object object0 = JSONObject.NULL;
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(466);
      Double double1 = new Double(452.056061954);
      hashMap0.replace("-15.3887713305147110", double1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\b", (Object) null);
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long(0L);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("(1m");
      jSONObject1.put("XqZAq", (Collection) linkedList0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.867602033198091
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      hashMap0.keySet();
      JSONObject jSONObject1 = jSONObject0.put("par", 34);
      Short short0 = new Short((short)23);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.accumulate("x", object0);
      jSONObject0.put("par", (Map) hashMap0);
      jSONObject2.toString((-1595), 46);
      jSONObject1.isNull("x");
      long long0 = jSONObject2.optLong("par");
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      linkedList1.add("rq");
      linkedList1.toArray();
      linkedList0.parallelStream();
      linkedList1.add("x");
      Double double0 = new Double(Double.NaN);
      JSONObject.quote("' and instead saw '");
      Long long1 = new Long((-4157L));
      assertFalse(long1.equals((Object)long0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.067244912918865
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray1);
      JSONObject jSONObject1 = jSONObject0.put("par", (-1774));
      Short short0 = new Short((short)23);
      Object object0 = JSONObject.NULL;
      Short short1 = new Short((short) (-984));
      JSONObject jSONObject2 = jSONObject1.putOpt("par", short1);
      JSONObject jSONObject3 = jSONObject0.accumulate("par", jSONArray0);
      JSONObject jSONObject4 = jSONObject3.append("A JSONArray text must start with '['", object0);
      jSONObject2.optString("A JSONArray text must start with '['");
      jSONObject0.put("A JSONArray text must start with '['", (-1.0));
      jSONObject0.toString();
      jSONObject4.put("getparseShort", 92);
      String string0 = jSONObject1.toString(595, 46);
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      JSONObject jSONObject5 = new JSONObject(jSONTokener0);
      try { 
        jSONTokener0.nextString('U');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 5974 of {
java.lang.String@0000000006\": [
java.lang.Short@0000000008,


java.lang.String@0000000013\": java.lang.Integer@0000000014,
java.lang.String@0000000011\": java.lang.Double@0000000012,
java.lang.String@0000000004\": \"java.lang.Class@0000000005\"
         //                                               }
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.100270068589397
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.min(702.6292F, (-805.0F));
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      hashMap0.keySet();
      JSONObject jSONObject1 = jSONObject0.put("par", 34);
      Short short0 = new Short((short)23);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.accumulate("x", object0);
      JSONObject jSONObject3 = jSONObject0.put("par", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter((short)23);
      jSONObject3.write(stringWriter0);
      jSONObject2.toString((-1595), 46);
      jSONObject2.optInt("rq", 34);
      jSONObject1.isNull("par");
      jSONObject2.optLong("par");
      jSONObject1.optInt("par");
      try { 
        jSONObject0.getInt("{\n\"java.lang.String@0000000003\": {},\n\"java.lang.String@0000000005\": null\n                                              }");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"java.lang.String@0000000003\\\": {},\\n\\\"java.lang.String@0000000005\\\": null\\n                                              }\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.597366718479414
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray1);
      JSONObject jSONObject1 = jSONObject0.put("par", (-1774));
      jSONObject0.getLong("par");
      Short short0 = new Short((short)23);
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("par", jSONArray0);
      Float.max(1817.47F, 0.0F);
      Float.min(1.0F, 1045.3F);
      JSONObject.numberToString(short0);
      Long long0 = new Long((-3726L));
      char[] charArray0 = new char[0];
      CharBuffer.wrap(charArray0);
      CharBuffer.wrap(charArray0);
      Long long1 = new Long(3616L);
      jSONObject1.optLong("java.lang.Short@0000000009");
      double double0 = jSONObject0.optDouble("par");
      assertEquals(2, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.948066574711604
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.min(702.6292F, (-805.0F));
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("par", 34);
      Short short0 = new Short((short)23);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.accumulate("x", object0);
      jSONObject2.toString((-1595), 46);
      jSONObject2.optInt("rq", 34);
      jSONObject1.isNull("par");
      jSONObject2.optLong("par");
      jSONObject1.optInt("par");
      try { 
        jSONObject0.getInt("{\n\"java.lang.String@0000000003\": java.lang.Integer@0000000004,\n\"java.lang.String@0000000005\": null\n                                              }");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"java.lang.String@0000000003\\\": java.lang.Integer@0000000004,\\n\\\"java.lang.String@0000000005\\\": null\\n                                              }\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0667326497321326
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = ">*TN/;`,k+F";
      jSONObject0.optDouble(">*TN/;`,k+F");
      String string1 = "}:;y!8TH";
      JSONObject jSONObject1 = jSONObject0.accumulate("}:;y!8TH", object0);
      jSONObject1.optDouble("}:;y!8TH", (-521.160606));
      jSONObject1.optLong("I.1]R`!Y FY: @[[");
      jSONObject1.optDouble((String) null);
      jSONObject0.toString();
      jSONObject1.optInt("}:;y!8TH");
      JSONObject.getNames((Object) null);
      jSONObject0.names();
      JSONObject jSONObject2 = jSONObject1.put("}:;y!8TH", (Object) ">*TN/;`,k+F");
      JSONObject.valueToString(">*TN/;`,k+F", 0, 4);
      jSONObject1.optDouble("false");
      jSONObject0.optInt("{\"java.lang.String@0000000004\":null,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}", 0);
      try { 
        jSONObject2.getLong(">*TN/;`,k+F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">*TN/;`,k+F\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7582853608372853
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Boolean.valueOf(false);
      Boolean.logicalXor(false, false);
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("heel.json.JSONObject$Null", 36);
      String string0 = jSONObject0.toString(2592, 36);
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}");
      jSONObject1.optLong("`iuac{^0W<.g u+x");
      Short short0 = new Short((short)58);
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3674206735580836
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalXor(true, false);
      Float float0 = new Float((float) 97);
      Boolean.logicalXor(true, false);
      Boolean.logicalOr(false, true);
      Double double0 = new Double(0.0);
      Float.sum((-1.0F), 1842.02F);
      Boolean.logicalAnd(false, true);
      Double double1 = new Double(47.25440068566);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", 97);
      Short short0 = new Short((short) (-26636));
      JSONObject.valueToString(short0, 97, (short) (-26636));
      try { 
        jSONObject1.getJSONObject(" ZG,wgHtaC}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" ZG,wgHtaC}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.097286733761135
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optDouble(">*TN/(`+");
      JSONObject jSONObject1 = jSONObject0.accumulate("}J;y!8TH", object0);
      String string0 = "rH\\4Q^nOjf";
      jSONObject1.toString();
      jSONObject1.optLong("rH\u0004Q^nOjf");
      jSONObject1.optDouble("}J;y!8TH", (-511.79052011643245));
      String string1 = null;
      jSONObject1.optLong("I.1]R`!Y FY: @P[");
      jSONObject1.optDouble((String) null);
      jSONObject0.toString();
      jSONObject1.optInt("}J;y!8TH");
      JSONObject jSONObject2 = jSONObject1.putOpt("{\"java.lang.String@0000000004\":null,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}", (Object) null);
      jSONObject2.optLong(">*TN/(`+", (long) 0);
      jSONObject0.names();
      JSONObject jSONObject3 = jSONObject1.put("}J;y!8TH", (Object) ">*TN/(`+");
      try { 
        jSONObject3.getBoolean("}J;y!8TH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}J;y!8TH\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9694645097454093
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.valueToString(boolean0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\t";
      stringArray0[1] = "java.lang.Boolean@0000000001";
      stringArray0[2] = "java.lang.Boolean@0000000001";
      stringArray0[3] = "\t";
      stringArray0[4] = "java.lang.Boolean@0000000001";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      int int0 = 61;
      jSONObject0.toString(61);
      jSONObject0.optBoolean("is", false);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Boolean@0000000001", (Object) "\t");
      Double double0 = new Double(61);
      Double.max(61, 61);
      Boolean.compare(false, false);
      jSONObject0.toString(61, 61);
      jSONObject1.optBoolean("java.lang.Boolean@0000000001");
      JSONObject jSONObject2 = jSONObject1.accumulate(",\n", "java.lang.Boolean@0000000001");
      String string0 = "E'*u2nmB\\6D8Pgc";
      jSONObject2.put("E'*u2nmB\u0006D8Pgc", (long) 61);
      try { 
        jSONObject2.append("java.lang.Boolean@0000000001", boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.lang.Boolean@0000000001] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.41019248359628
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Integer integer0 = new Integer(70);
      String[] stringArray0 = new String[1];
      Integer.sum(16, (-3036));
      Integer.toUnsignedString(1245);
      Integer integer1 = new Integer(1245);
      Integer.max(16, 114);
      Integer.min(466, 114);
      Integer.max(114, 114);
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONObject0.put("A JSONObject text must begin with '{'", (Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      Integer.max(16, 70);
      jSONObject0.optDouble("3Zs{", (double) 16);
      Integer.sum(98, 114);
      jSONObject0.optString("A JSONObject text must begin with '{'", "va");
      Integer integer2 = new Integer(114);
      try { 
        jSONObject0.getInt(">(QD0:Z#cLQ4umTa@1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">(QD0:Z#cLQ4umTa@1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "{A@sAy{x;C!^cX|k";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{A@sAy{x;C!^cX|k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {A@sAy{x;C!^cX|k
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.873336291128307
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalXor(false, false);
      Boolean boolean1 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("heel.json.JSONObject$Null", 36);
      jSONObject1.names();
      jSONObject1.toString();
      jSONObject0.toString(2592, 36);
      jSONObject1.has("heel.json.JSONObject$Null");
      try { 
        jSONObject1.getJSONObject("heel.json.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"heel.json.JSONObject$Null\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8743555868395938
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Float.sum((-1.0693889F), 2385);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("'0=");
      linkedList0.add("'0=");
      Boolean boolean0 = new Boolean((String) null);
      linkedList0.add("ha");
      linkedList0.offerFirst("=Zt#(*~c$)");
      linkedList0.add("'zvp");
      linkedList0.add("@M9v?");
      linkedList0.toArray();
      Stream<String> stream0 = linkedList0.parallelStream();
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      linkedList0.add("b$_");
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(stream0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(7, jSONArray1.length());
      assertEquals(1, jSONObject0.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3956161215415097
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject.getNames(jSONObject0);
      String string0 = "put";
      Boolean boolean0 = new Boolean("put");
      jSONObject0.append("put", boolean0);
      jSONObject0.append("put", boolean0);
      jSONObject0.putOpt("put", boolean0);
      String string1 = ",;z0?\\_ iYRBm\\4oeZ";
      jSONObject0.getBoolean("put");
      try { 
        jSONObject0.getLong("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7412431202580887
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      jSONObject0.toString(2702, 2702);
      JSONObject jSONObject1 = jSONObject0.put("i:triy", 1.0);
      JSONObject jSONObject2 = new JSONObject("{}");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optBoolean("{}", true);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONArray0.put((Collection) linkedList0);
      jSONArray0.optInt(90, 90);
      jSONObject1.has("d6S~{X#p7;E.L.P");
      jSONObject1.toJSONArray(jSONArray0);
      try { 
        jSONObject1.get("max");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"max\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5257720382761544
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      CharBuffer.wrap(charArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Long long0 = new Long('W');
      JSONObject.valueToString(charBuffer0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ] is not a Boolean.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.3853199732680936
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject.valueToString(linkedList0);
      jSONArray0.toString();
      int int0 = (-1676);
      jSONArray0.optLong((-1676));
      jSONObject0.put("Unmt{rminated string", 1630);
      String string0 = "@cL";
      String string1 = null;
      jSONObject0.optString("getgetJSONArray");
      JSONArray jSONArray1 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      String string2 = "w.DYi";
      try { 
        jSONObject0.get("w.DYi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"w.DYi\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.4057282530365063
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      jSONObject0.toString(2702, 2702);
      JSONObject jSONObject1 = jSONObject0.put("i:triy", 1.0);
      Float float0 = new Float(0.0);
      jSONObject0.append("max", float0);
      JSONObject jSONObject2 = jSONObject0.put("{}", 1L);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "max");
      StringWriter stringWriter2 = stringWriter1.append('}');
      jSONObject2.write(stringWriter2);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optBoolean("{}", true);
      jSONObject1.has("d6S~{X#p7;E.L.P");
      jSONObject1.toJSONArray(jSONArray0);
      Object object0 = jSONObject1.get("max");
      jSONObject0.put("mHR", object0);
      jSONObject0.toString(16);
      jSONObject1.optJSONArray("C{DX");
      jSONObject1.put("", 2702);
      JSONObject jSONObject3 = jSONObject1.accumulate("mHR", jSONObject0);
      jSONObject0.optInt("i:triy", 2592);
      jSONObject0.optLong("9?m{D35p%r.9-*");
      try { 
        jSONObject3.getDouble("getvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getvalueOf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5013104845582816
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "put";
      String string1 = null;
      Boolean boolean0 = new Boolean((String) null);
      JSONObject jSONObject1 = jSONObject0.append("put", boolean0);
      jSONObject1.accumulate("put", "put");
      JSONObject.valueToString((Object) null);
      jSONObject1.optInt("put", 75);
      JSONObject jSONObject2 = jSONObject0.append("put", boolean0);
      jSONObject2.accumulate("null", "null");
      String string2 = ",;z0a?\\_ iYeBm\\4oeZ";
      Boolean boolean1 = new Boolean(",;z0a?_ iYeBm\u0004oeZ");
      try { 
        jSONObject0.getLong("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.702640542877963
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "0";
      jSONObject0.optInt("0");
      JSONObject.quote("0");
      jSONObject0.optString("ElVL^1wR)|8LWHPz&l");
      JSONObject jSONObject1 = jSONObject0.put("F%_", (Collection) null);
      Integer integer0 = Integer.getInteger("", 0);
      Integer.max((-75), 4098);
      JSONObject jSONObject2 = jSONObject1.accumulate("0", integer0);
      jSONObject2.getInt("0");
      jSONObject0.optBoolean("ElVL^1wR)|8LWHPz&l", true);
      String string1 = ",";
      jSONObject0.optDouble(",", (-1.0));
      try { 
        jSONObject1.getLong("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6147275188715735
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "W?";
      JSONObject jSONObject1 = jSONObject0.put("W?", (-2682));
      jSONObject1.getInt("W?");
      JSONObject.valueToString(jSONObject0, (-863), (-1577));
      try { 
        jSONObject1.getBoolean("W?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"W?\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.62972293284473
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Boolean.compare(true, true);
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wheel.json.JSONObject";
      JSONObject jSONObject0 = new JSONObject(",<g4e&>OeQaK8/", stringArray0);
      StringWriter stringWriter1 = stringWriter0.append('v');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "wheel.json.JSONObject");
      StringWriter stringWriter3 = stringWriter0.append('v');
      StringWriter stringWriter4 = new StringWriter();
      stringWriter3.append('v');
      StringWriter stringWriter5 = new StringWriter(114);
      StringWriter stringWriter6 = new StringWriter();
      stringWriter2.append('\"');
      stringWriter3.getBuffer();
      stringWriter2.append((CharSequence) ",<g4e&>OeQaK8/");
      stringWriter1.append((CharSequence) ",<g4e&>OeQaK8/");
      Long long0 = new Long((-3420L));
      JSONObject jSONObject1 = jSONObject0.put("ishashCode", (-1818.3822757466203));
      long long1 = jSONObject1.optLong("ishashCode");
      assertEquals((-1818L), long1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Float float0 = new Float(2689.1543F);
      Float.isFinite(717.0346F);
      Float.max(0.0F, 2689.1543F);
      Float.max(0.0F, 0.0F);
      Float.min(717.0346F, (-1.0F));
      Float.min(0.0F, 0.0F);
      Float.min(1.0F, 2689.1543F);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5812155340141354
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject.getNames(jSONObject0);
      String string0 = "put";
      String string1 = "\\t";
      Boolean boolean0 = new Boolean("\t");
      jSONObject0.append("put", boolean0);
      JSONObject jSONObject1 = jSONObject0.append("\t", boolean0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      String string2 = "'4>[U33=jl";
      jSONObject1.getJSONArray("\t");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-806));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.816563727599905
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float float0 = new Float(1534.0F);
      Float.isFinite(0.0F);
      Float.min(702.6292F, (-805.0F));
      JSONObject.numberToString(float0);
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      hashMap0.keySet();
      JSONObject jSONObject1 = jSONObject0.put("par", 34);
      Short short0 = new Short((short)23);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.accumulate("x", object0);
      jSONObject2.toString((-1595), 46);
      jSONObject2.optInt("rq", 34);
      jSONObject1.isNull("par");
      String string0 = null;
      jSONObject2.optInt("+iv?|YQC6</x*,in'IS");
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.527634148213642
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray1);
      Integer integer0 = new Integer((-1612));
      Object object0 = JSONObject.NULL;
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      jSONObject0.optLong(" of ");
      JSONObject jSONObject1 = new JSONObject((Map) null);
      JSONArray jSONArray2 = new JSONArray();
      String string0 = "dec";
      Double double0 = new Double(0L);
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      hashMap1.put("isjoin", double0);
      hashMap0.keySet();
      int int0 = (-1927);
      jSONObject0.put("dec", (-1927));
      Short short0 = new Short((short)23);
      jSONObject1.accumulate(",\n", (Object) null);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0745549839695947
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      Long long0 = new Long(1L);
      Long long1 = Long.decode("0");
      JSONObject jSONObject0 = new JSONObject(long1);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
      
      String string1 = jSONObject0.optString("0", "");
      assertEquals("", string1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.doubleToString(Double.NaN);
      Long long0 = new Long((-2079L));
      char[] charArray0 = new char[1];
      charArray0[0] = 'W';
      CharBuffer.wrap(charArray0);
      CharBuffer.wrap(charArray0);
      Long long1 = new Long((-2079L));
      Long long2 = new Long((-2079L));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "VAN)pZc";
      stringArray0[1] = "null";
      stringArray0[2] = "null";
      stringArray0[3] = "null";
      stringArray0[4] = "Expected a ',' or ']'";
      stringArray0[5] = "null";
      JSONObject jSONObject0 = new JSONObject(long2, stringArray0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.2314182162808964
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray1);
      jSONObject0.put("par", (-1774));
      Short short0 = new Short((short)23);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("par", jSONArray0);
      jSONObject1.append("A JSONArray text must start with '['", object0);
      try { 
        jSONObject1.getDouble("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text must start with '['\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.079331746307056
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Boolean.valueOf(false);
      Boolean.logicalXor(false, false);
      Float float0 = new Float((-1.0F));
      Boolean.logicalXor(false, false);
      Boolean.logicalOr(false, false);
      Double double0 = new Double((-516.12362021029));
      Float.sum((-1430.0F), 0.0F);
      Boolean.logicalAnd(false, false);
      Double double1 = new Double((-6033.5057807060075));
      Double.sum((-1.0F), (-1430.0F));
      JSONObject jSONObject0 = new JSONObject(double1);
      jSONObject0.put("] is not a number.", (-583));
      jSONObject0.getDouble("] is not a number.");
      jSONObject0.put("", (-1L));
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = new Integer(97);
      Integer.toUnsignedString(1245);
      Integer.remainderUnsigned(97, 1245);
      Integer integer1 = new Integer(57);
      Integer integer2 = new Integer((-1539));
      Object object0 = JSONObject.NULL;
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(466);
      BiFunction<Object, Double, Double> biFunction0 = (BiFunction<Object, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("1245", double0, biFunction0);
      Double double1 = new Double(452.056061954);
      hashMap0.replace("1245", double1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONArray("1245");
      Short short0 = new Short((short)1);
      Long long0 = new Long((-2832L));
      double double2 = jSONObject0.getDouble("1245");
      assertEquals(452.056061954, double2, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.05378831331184
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float((-1.0F));
      Boolean.logicalXor(false, false);
      Boolean.logicalOr(false, false);
      Double double0 = new Double((-516.8064214560868));
      Float.sum((-1430.0F), 0.0F);
      Double double1 = new Double((-6033.5057807060075));
      JSONObject jSONObject0 = new JSONObject(double1);
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", (-583));
      JSONObject jSONObject2 = jSONObject1.accumulate("getsum", "getsum");
      Short short0 = new Short((short)1053);
      Long long0 = new Long(0L);
      jSONObject2.put("5*z^pAT3Vp)`BNE", (Object) "5*z^pAT3Vp)`BNE");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject2.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.9610339117514677
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = ">*TN/(`+";
      jSONObject0.optDouble(">*TN/(`+");
      String string1 = "}:;y!8TH";
      JSONObject jSONObject1 = jSONObject0.accumulate("}:;y!8TH", object0);
      jSONObject1.optLong("rH\u0004Q^nOjf");
      jSONObject1.optDouble("}:;y!8TH", (-495.0175785434331));
      String string2 = null;
      long long0 = new Long(0L);
      jSONObject1.optDouble((String) null);
      jSONObject0.toString();
      jSONObject1.optInt("}:;y!8TH");
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.075098942074252
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "in";
      jSONObject0.put("in", 2592);
      JSONObject jSONObject1 = jSONObject0.put("`xSxmIMg.)c?O0,", false);
      jSONObject1.opt((String) null);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("sK+d%A0UwScnkDPj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of sK+d%A0UwScnkDPj
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.4497927527284427
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0..";
      stringArray0[1] = "JSONArray[";
      stringArray0[2] = "0..";
      stringArray0[3] = "0..";
      JSONObject jSONObject0 = new JSONObject("0..", stringArray0);
      jSONObject0.put("0..", true);
      jSONObject0.opt("0..");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("0..");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 0..
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "getdoubleToLongBits";
      stringArray0[1] = "getdoubleToLongBits";
      stringArray0[2] = "[]";
      JSONObject jSONObject0 = new JSONObject("getdoubleToLongBits", stringArray0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.1735851881355024
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Double double0 = new Double(1649.287826905459);
      byte byte0 = (byte) (-97);
      JSONObject.quote(",\n");
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "get";
      jSONObject0.put("\",\n\"", (long) (byte) (-97));
      jSONObject0.optInt("\",\n\"");
      String string1 = "km;J(k&p9n@t6";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.057763583604622
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Integer integer0 = new Integer(97);
      Float float0 = new Float((-1705.4843F));
      Double double0 = new Double((-1705.4843F));
      Float.sum(0.0F, (-1430.0F));
      Boolean.logicalAnd(false, true);
      String string0 = "mHR";
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONArray("Null key.");
      int int0 = 35;
      JSONObject jSONObject1 = jSONObject0.put("Null key.", 35);
      Short short0 = new Short((short)2128);
      String string1 = "6RQe[\\|3r$Gj*v((k";
      try { 
        jSONObject1.getBoolean("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null key.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.2262455420076996
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject.getNames(jSONObject0);
      String string0 = "put";
      String string1 = "\\t";
      Boolean boolean0 = new Boolean("\t");
      jSONObject0.append("put", boolean0);
      jSONObject0.append("\t", boolean0);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Boolean boolean1 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.putOpt("put", boolean1);
      try { 
        jSONObject1.getInt("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.967862604632899
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray1);
      int int0 = (-1774);
      jSONObject0.put("par", (-1774));
      Short short0 = new Short((short)23);
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.2903476186557437
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      jSONObject0.toString(2702, 2702);
      JSONObject jSONObject1 = jSONObject0.put("i:triy", 1.0);
      Float float0 = new Float(0.0);
      jSONObject0.append("max", float0);
      jSONObject0.put("{}", 1L);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "max");
      stringWriter1.append('}');
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optBoolean("{}", true);
      jSONObject1.has("d6S~{X#p7;E.L.P");
      jSONObject1.toJSONArray(jSONArray0);
      Object object0 = jSONObject1.get("max");
      jSONObject0.put("mHR", object0);
      jSONObject0.toString(16);
      jSONObject1.optJSONArray("C{DX");
      jSONObject1.put("{\n                \"java.lang.String@0000000006\": java.lang.Long@0000000007,\n                \"java.lang.String@0000000005\": [java.lang.Float@000000001],\n                \"java.lang.String@0000000011\": [java.lang.Float@000000001],\n                \"java.lang.String@0000000002\": java.lang.Double@0000000003\n}", 2702);
      JSONObject jSONObject2 = jSONObject1.accumulate("mHR", jSONObject0);
      jSONObject0.optInt("i:triy", 2592);
      jSONObject0.optLong("9?m{D35p%r.9-*");
      try { 
        jSONObject2.getDouble("getvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getvalueOf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "{.;a~>WW~";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{.;a~>WW~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {.;a~>WW~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "|?KkwH3'f ";
      JSONTokener jSONTokener0 = new JSONTokener("|?KkwH3'f ");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |?KkwH3'f 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.322877762085903
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long long0 = 1L;
      Long long1 = new Long(1L);
      Short short0 = new Short((short)91);
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.toUnsignedInt((short)91);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "getmax";
      stringArray0[1] = "=}{b^yHpFi<gLPd4";
      stringArray0[2] = "|dD";
      jSONObject0.put("@!tRcGNbp&", 1784);
      jSONObject0.optJSONArray("] not found.");
      jSONObject0.put("|dD", 15);
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("getparseBoolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getparseBoolean
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.3106832902031007
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Integer integer0 = new Integer(97);
      String[] stringArray0 = new String[1];
      Integer.toUnsignedString(1245);
      Integer.remainderUnsigned(97, 55);
      Integer.min(466, (-1));
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Integer.max((-30710023), (-1));
      JSONObject jSONObject1 = jSONObject0.putOpt("is", "A JSONObject text must begin with '{'");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject1.put("put", (Collection) linkedList0);
      jSONObject1.getJSONArray("put");
      jSONObject1.names();
      Long long0 = new Long((byte)76);
      jSONObject2.put("A JSONObject text must begin with '{'", 0L);
      jSONObject0.isNull("1245");
      jSONObject0.accumulate("Unclosed comment", (Object) null);
      jSONObject2.optInt("", (-1539));
      jSONObject1.keys();
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(false, false);
      Boolean.logicalAnd(true, true);
      Boolean.logicalXor(true, false);
      Float float0 = new Float((-1.0F));
      Boolean.logicalXor(false, false);
      Boolean.logicalAnd(false, false);
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = 'i';
      charArray0[5] = 'g';
      charArray0[6] = '8';
      charArray0[7] = 'A';
      CharBuffer.wrap(charArray0);
      CharBuffer.wrap(charArray0);
      Long long0 = new Long((-1985L));
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "getgeft";
      Long long1 = new Long((-1985L));
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.9482770419263704
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Long long0 = new Long((-1L));
      Short short0 = new Short((short)1378);
      Integer integer0 = new Integer(1);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Short.toUnsignedInt((short)1378);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      HashMap<JSONArray, String> hashMap1 = new HashMap<JSONArray, String>();
      HashMap<Integer, Double> hashMap2 = new HashMap<Integer, Double>();
      try { 
        jSONObject1.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.537379298325083
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.names();
      String string0 = "put";
      Boolean boolean0 = new Boolean("Mt");
      JSONObject jSONObject1 = jSONObject0.append("put", boolean0);
      jSONObject0.append("Mt", boolean0);
      String string1 = ",;z0?\\_ iYRBm\\4oeZ";
      jSONObject1.put("n", (-599.449));
      jSONObject1.remove("Mt");
      Object object0 = new Object();
      Boolean boolean1 = new Boolean("put");
      jSONObject0.optJSONArray("qr]Y([<MQFl1");
      try { 
        jSONObject0.getLong("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.3275983317877706
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      linkedList0.pollFirst();
      jSONArray0.toString();
      JSONObject.quote("[]");
      linkedList0.add("[]");
      Double double0 = new Double(1630);
      Long long0 = new Long((-1676));
      JSONObject.quote("I9`H");
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "\"I9`H\"";
      JSONObject jSONObject0 = new JSONObject("] is not a JSONObject.", stringArray0);
      String string0 = jSONObject0.optString("A JSONObject text must end with '}'", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.2383550694208547
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray1);
      JSONObject jSONObject1 = jSONObject0.put("par", (-1774));
      Short short0 = new Short((short)23);
      JSONObject jSONObject2 = jSONObject0.accumulate("par", jSONArray0);
      jSONObject1.isNull("x");
      Double double0 = new Double('U');
      try { 
        jSONObject2.accumulate((String) null, jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.073761012616111
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("oM[`*/q6b1krXDF", (Object) jSONArray0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      String string0 = "opt";
      jSONObject0.optJSONObject("opt");
      Boolean boolean0 = new Boolean("opt");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.offerLast("wheel.json.JSONArray@0000000001");
      linkedList2.sort((Comparator<? super String>) null);
      String string1 = "'4>[U33=jl";
      String string2 = "] not found.";
      try { 
        jSONObject0.getJSONArray("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.0359432497154195
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      int int0 = jSONObject0.optInt("V5o", (-343));
      assertEquals((-343), int0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.829687888259787
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer integer0 = new Integer(97);
      String[] stringArray0 = new String[10];
      Integer.toUnsignedString(1270);
      Integer.min(466, 97);
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Integer.max((-30710023), 1270);
      jSONObject0.optString("A JSONObject text must begin with '{'", "al");
      Integer integer1 = new Integer((int) integer0);
      jSONObject0.putOpt("A JSONObject text must begin with '{'", (Object) null);
      Object object0 = JSONObject.NULL;
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      jSONObject0.optLong("al");
      JSONObject jSONObject1 = new JSONObject((Map) null);
      JSONArray jSONArray0 = new JSONArray();
      hashMap0.keySet();
      JSONObject jSONObject2 = jSONObject0.put(",\n", (int) integer0);
      Short short0 = new Short((short)23);
      JSONObject jSONObject3 = jSONObject2.accumulate(",\n", short0);
      jSONObject3.optInt((String) null, 1270);
      jSONObject0.optLong("al");
      jSONObject0.isNull("al");
      try { 
        jSONObject0.getDouble("A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONObject text must begin with '{'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.8454903338185393
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = new Integer(97);
      String[] stringArray0 = new String[1];
      Integer.toUnsignedString(1245);
      Integer.remainderUnsigned(97, 1245);
      String string0 = "A JSONObject text must begin with '{'";
      Integer.min(466, (-1));
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Integer.max((-30710023), (-1));
      jSONObject0.optString("A JSONObject text must begin with '{'", "val");
      Integer integer1 = new Integer((-1));
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      String string1 = "{}";
      double double0 = 1126.6439550860193;
      String string2 = ">(QD0:Z#cLQ4umTa@1";
      try { 
        jSONObject0.getInt(">(QD0:Z#cLQ4umTa@1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">(QD0:Z#cLQ4umTa@1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.1631317484958577
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 8;
      JSONObject jSONObject1 = jSONObject0.put("dZZ", 8);
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject.valueToString(boolean0);
      JSONObject jSONObject2 = jSONObject0.put("uykC5d:dZ&)hby-Al#", (Object) "i:triy");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject2.optJSONObject("java.lang.Boolean@0000000004");
      Boolean boolean1 = new Boolean("i:triy");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.offerLast("gtL5|o{isX3;Z$Vr7B/");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      try { 
        jSONObject1.getJSONArray("uykC5d:dZ&)hby-Al#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"uykC5d:dZ&)hby-Al#\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.947605190070573
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float float0 = new Float(1534.0F);
      Float.min(702.6292F, (-805.0F));
      JSONObject.numberToString(float0);
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      hashMap0.keySet();
      JSONObject jSONObject1 = jSONObject0.put("par", 34);
      Short short0 = new Short((short)23);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.accumulate("x", object0);
      JSONObject jSONObject3 = jSONObject1.put("6", 34);
      JSONObject jSONObject4 = jSONObject1.accumulate("isput", jSONObject2);
      jSONObject3.optInt("par", 34);
      jSONObject3.optLong("9?m{D35p%r.9-*");
      jSONObject0.getDouble("par");
      jSONObject4.optDouble("isput");
      jSONObject1.optString("getvalueOf");
      Long long1 = new Long(34);
      jSONObject4.putOpt("ha", long1);
      jSONObject2.optInt("z|");
      try { 
        jSONObject3.getLong("isput");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isput\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.1221383700941407
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Long long0 = new Long(2385);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      Boolean.logicalAnd(false, false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.stream();
      Boolean.logicalAnd(true, true);
      Boolean.logicalXor(false, false);
      Object object0 = new Object();
      Object object1 = JSONObject.NULL;
      JSONObject.getNames(object1);
      Short short0 = new Short((short) (-1548));
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.6152804042395517
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      Boolean.logicalAnd(false, false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.stream();
      Boolean.logicalXor(false, true);
      Double double0 = new Double((-520.5895116327097));
      Boolean.logicalAnd(false, true);
      Boolean.compare(false, false);
      Boolean.logicalXor(false, true);
      Boolean.logicalAnd(false, false);
      Boolean.logicalXor(false, false);
      JSONObject.getNames((Object) jSONObject0);
      Long long0 = new Long(888L);
      assertEquals(888L, (long)long0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6068571632274358
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Double double0 = new Double(1649.287826905459);
      Byte byte0 = new Byte((byte) (-97));
      linkedList0.add("Sr#2HYQ&&'?QjGK");
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Double double1 = new Double(1669.06007);
      String string0 = "\\u";
      linkedList0.add(string0);
      jSONObject0.has("Gg,' F7dT");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.199694278706137
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float((-1.0F));
      Boolean.logicalXor(false, false);
      Boolean.logicalOr(false, false);
      Double double0 = new Double((-516.8064214560868));
      Float.sum((-1430.0F), 0.0F);
      Double double1 = new Double((-6033.5057807060075));
      JSONObject jSONObject0 = new JSONObject(double1);
      String string0 = "] is not a number.";
      jSONObject0.put("DP_?L", (Object) double0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", (-583));
      String string1 = "getsum";
      jSONObject1.accumulate("getsum", "getsum");
      try { 
        jSONObject0.getJSONObject("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.486476853275102
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Long long0 = new Long(1L);
      Short short0 = new Short((short)91);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|dD";
      stringArray0[1] = "] not found.";
      stringArray0[2] = "getmax";
      StringWriter stringWriter0 = new StringWriter((short)91);
      StringWriter stringWriter1 = stringWriter0.append('q');
      JSONObject.valueToString(long0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "java.lang.Long@0000000001");
      stringWriter2.append((CharSequence) "|dD");
      Long long1 = new Long(1L);
      assertEquals(1L, (long)long1);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.317262485460858
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(false, false);
      Boolean.logicalAnd(true, true);
      Boolean.logicalXor(false, false);
      Boolean.compare(false, false);
      Boolean.logicalXor(true, false);
      Float float0 = new Float((-1.0F));
      Boolean.logicalXor(false, false);
      JSONObject jSONObject0 = new JSONObject((Object) "getformat");
      Short.toUnsignedInt((short) (-3403));
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Integer.compareUnsigned((-24632774), 0);
      StringWriter stringWriter0 = new StringWriter(62133);
      jSONObject0.write(stringWriter0);
      Long long0 = new Long(1);
      assertEquals(1L, (long)long0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.695917355993095
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = new Integer(97);
      Long long0 = new Long((-1L));
      Short.toUnsignedInt((short) (-3976));
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "] not found.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      HashMap<Float, Integer> hashMap1 = new HashMap<Float, Integer>();
      jSONObject0.put("|dD", (Map) hashMap1);
      HashMap<Object, Float> hashMap2 = new HashMap<Object, Float>();
      HashMap<JSONArray, String> hashMap3 = new HashMap<JSONArray, String>();
      JSONObject jSONObject2 = jSONObject0.put("BW7nFwRL:ir|wiUs?'", (Map) hashMap2);
      String string0 = jSONObject2.getString("|dD");
      assertNotNull(string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(false, false);
      Boolean.logicalAnd(true, true);
      Boolean.logicalXor(false, false);
      Boolean.compare(false, false);
      Boolean.logicalXor(true, false);
      Float float0 = new Float((float) 0);
      Boolean.logicalXor(false, false);
      Boolean.logicalAnd(false, false);
      Boolean.logicalAnd(true, false);
      Boolean.logicalOr(true, true);
      Boolean.logicalAnd(false, false);
      Boolean.logicalXor(false, false);
      Object object0 = new Object();
      JSONObject.getNames(object0);
      Short short0 = new Short((short)1053);
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.4497927527284427
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0..";
      stringArray0[1] = "JSONArray[";
      stringArray0[2] = "0..";
      stringArray0[3] = "0..";
      JSONObject jSONObject0 = new JSONObject("0..", stringArray0);
      jSONObject0.put("isjoin", true);
      jSONObject0.opt("0..");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("0..");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 0..
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter(34);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      String string0 = jSONObject0.optString("{");
      assertEquals("", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.0813266996208206
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Double.min(4539.9443, 1649.287826905459);
      Double.min(0.0, 3988.24);
      int int0 = 2370;
      Float float0 = new Float((float) 2370);
      Float.max(2370, (-1705.4843F));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      String string0 = "Y*b?:Z>T0u";
      JSONObject.quote("A JSONObject text must begin with '{'");
      JSONObject.quote("\"A JSONObject text must begin with '{'\"");
      Double double0 = new Double((-1895.6));
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      int int1 = 10;
      String string1 = "\\u";
      try { 
        jSONObject0.getJSONObject(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.0102281721445787
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Float.sum(2385, 2385);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.clone();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Collection) null);
      Short short0 = new Short((short)1688);
      Integer integer0 = new Integer(187);
      JSONObject jSONObject0 = new JSONObject(integer0);
      Short.toUnsignedInt((short)1688);
      Integer.compareUnsigned(993, (-2528));
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      HashMap<JSONArray, String> hashMap1 = new HashMap<JSONArray, String>();
      HashMap<Integer, Double> hashMap2 = new HashMap<Integer, Double>();
      jSONObject0.toJSONArray(jSONArray0);
      String string0 = "=?9f00lp!tPKV)>2c";
      try { 
        jSONObject0.put("=?9f00lp!tPKV)>2c", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.5029130799554347
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer integer0 = new Integer(97);
      Float float0 = new Float((-1705.4843F));
      Double double0 = new Double((-1705.4843F));
      Boolean.logicalAnd(false, true);
      Boolean.logicalAnd(false, true);
      Boolean.logicalXor(true, false);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      Short short0 = new Short((short)4313);
      Float float1 = new Float((double) (short)4313);
      JSONObject jSONObject0 = new JSONObject(float1, stringArray0);
      jSONObject0.optInt("getlogicalAnd");
      jSONObject0.optBoolean("");
      try { 
        jSONObject0.getDouble("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.7812747906620805
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      Double.min(2033.5343533, (-795.42008));
      Float.sum(2370, 0.0F);
      Float.max(2370.0F, 0.0F);
      byte byte0 = (byte)13;
      Byte byte1 = new Byte((byte)13);
      Long long0 = new Long((-838L));
      JSONObject jSONObject1 = new JSONObject(long0);
      Double double0 = new Double(924.42816F);
      Byte byte2 = new Byte((byte)13);
      JSONObject jSONObject2 = jSONObject1.putOpt((String) null, byte2);
      try { 
        jSONObject2.put((String) null, (long) 2370);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Boolean.valueOf(false);
      Float.sum(2370, 2370);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("I<-D[${ex9;Ii");
      linkedList1.clone();
      linkedList1.addLast("getwait");
      linkedList1.offerFirst("has");
      linkedList1.clone();
      linkedList1.add("KE/6B*j2bWT");
      Double double0 = new Double(0.0);
      JSONObject.quote("KE/6B*j2bWT");
      Long long0 = new Long(2370);
      assertEquals(2370L, (long)long0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      JSONObject.quote(",<g4e&>OeQaKZ8/");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.pollFirst();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      linkedList1.toArray();
      linkedList0.parallelStream();
      linkedList1.add("\",<g4e&>OeQaKZ8/\"");
      Long long0 = new Long((-476L));
      assertEquals((-476L), (long)long0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.6803973312557554
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Float.sum(2386, 878.146F);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList linkedList1 = (LinkedList)linkedList0.clone();
      String string0 = "=Zt#\\(*~c$)";
      Boolean boolean1 = new Boolean("has");
      linkedList0.add("' and instad saw '");
      linkedList0.removeAll(linkedList1);
      linkedList0.offerFirst("has");
      linkedList0.add("' and instad saw '");
      linkedList0.add("has");
      JSONObject jSONObject0 = new JSONObject((Object) "has");
      jSONObject0.optJSONArray("wheel.json.JSONException");
      JSONObject jSONObject1 = jSONObject0.put("' and instad saw '", 344);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      Short short0 = new Short((short) (-1287));
      jSONObject1.accumulate("=Zt#(*~c$)", short0);
      jSONObject1.optInt("", 344);
      jSONObject0.optLong("null");
      String string1 = "getvalueOf";
      try { 
        jSONObject0.getDouble("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"has\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.7322201838634412
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(false, false);
      Boolean.logicalXor(false, false);
      Boolean.compare(false, false);
      Boolean.logicalXor(false, true);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      HashMap<String, Double> hashMap2 = new HashMap<String, Double>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap2.forEach(biConsumer0);
      Double double0 = new Double(1.0);
      hashMap1.replace("0", double0);
      HashMap<JSONArray, Boolean> hashMap3 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap3);
      Long long0 = new Long((-1298L));
      Boolean boolean1 = new Boolean(true);
      JSONObject jSONObject1 = new JSONObject(boolean1);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0890092384766588
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(false, false);
      Boolean.logicalAnd(true, true);
      Boolean.logicalXor(false, false);
      Boolean.compare(false, false);
      Boolean.logicalXor(true, false);
      Float float0 = new Float((float) 0);
      Boolean.logicalXor(false, false);
      Float.max(1515.1F, 0.0F);
      Boolean.logicalAnd(true, true);
      Boolean.logicalAnd(true, false);
      Boolean.logicalOr(true, true);
      Float.min(123.09196F, 143.64404F);
      Float.max(123.09196F, 0);
      Float.isFinite((-1561.8335F));
      Float.max(123.09196F, 1817.47F);
      Float.min(123.09196F, (-1561.8335F));
      JSONObject.numberToString(float0);
      Byte byte0 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.1761689797087618
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Boolean.valueOf(false);
      Float.sum(2370, 878.146F);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.clone();
      linkedList0.offerFirst("has");
      linkedList0.add("has");
      linkedList0.add(" of ");
      Double double0 = new Double(2370);
      Double.sum(0.0, 0.0);
      Float float0 = new Float((float) 2370);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString();
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.8239934471921346
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray1);
      JSONObject jSONObject1 = jSONObject0.put("par", (-1774));
      Short short0 = new Short((short)23);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.accumulate("par", jSONArray0);
      Short short1 = new Short((short)23);
      jSONObject2.putOpt("par", short1);
      jSONObject2.append("A JSONArray text must start with '['", object0);
      String string0 = jSONObject1.toString(595, 46);
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      JSONObject jSONObject3 = new JSONObject(jSONTokener0);
      try { 
        jSONTokener0.nextString('U');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 2130 of {
         //                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \"java.lang.String@0000000006\": java.lang.Short@0000000009,
java.lang.String@0000000011\": [null],
java.lang.String@0000000004\": \"java.lang.Class@0000000005\"
         //                                               }
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.189635123783693
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      StringWriter stringWriter0 = new StringWriter();
      linkedList0.add("(q.`");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>(linkedList1);
      linkedList1.add("$+");
      Double double0 = new Double(1.57753079545249);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("9", (-1L));
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject1 = jSONObject0.put("false", (Map) hashMap0);
      Short short0 = new Short((short)12);
      Object object0 = new Object();
      jSONObject0.accumulate(",\n", object0);
      try { 
        jSONObject1.getJSONArray(";eV&w?5G4{p/8DwtcO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";eV&w?5G4{p/8DwtcO\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.7774035244144605
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float float0 = new Float((-9.309849F));
      Float.min((-435.0F), (-378.17526F));
      Float.isFinite(2917.5F);
      Float.min((-9.309849F), (-9.309849F));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("%;RwT?(AaobR");
      linkedList0.add("%;RwT?(AaobR");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>(linkedList0);
      Object object0 = JSONObject.NULL;
      linkedList2.removeLastOccurrence(object0);
      linkedList2.add("(q.`");
      JSONObject.quote("isreverseBytes");
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "RzeB_1p";
      jSONObject0.isNull("RzeB_1p");
      Boolean boolean0 = Boolean.TRUE;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.160752151753147
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Float.sum(924.42816F, 2370);
      Byte byte0 = new Byte((byte) (-97));
      JSONObject jSONObject0 = new JSONObject(byte0);
      Double double0 = new Double(924.42816F);
      Double.max((-197.15511), 924.42816F);
      JSONObject jSONObject1 = jSONObject0.put("put", false);
      jSONObject1.put("put", (long) 969);
      Short short0 = new Short((short)0);
      double double1 = jSONObject1.optDouble("put");
      assertEquals(2, jSONObject0.length());
      assertEquals(969.0, double1, 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.076104579100767
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Integer integer0 = new Integer(97);
      Integer.toUnsignedString(1245);
      Integer.remainderUnsigned(97, 1245);
      Integer.min(466, 97);
      Integer integer1 = new Integer(57);
      Integer integer2 = new Integer((-1539));
      Object object0 = JSONObject.NULL;
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(466);
      BiFunction<Object, Double, Double> biFunction0 = (BiFunction<Object, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("1245", double0, biFunction0);
      Double double1 = new Double(452.056061954);
      hashMap0.replace("-15.3887713305147110", double1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONArray("1245");
      Short short0 = new Short((short)1);
      Long long0 = new Long((-2821L));
      jSONObject0.optDouble("1245", (-1.0));
      Double double2 = new Double(57);
      jSONObject0.put("@R4c+fO|08EtZ3%c", (Object) double2);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.079331746307056
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalXor(false, false);
      Float float0 = new Float((-1.0F));
      Boolean.logicalXor(false, false);
      Boolean.logicalOr(false, false);
      Double double0 = new Double((-516.12362021029));
      Float.sum((-1430.0F), 0.0F);
      Boolean.logicalAnd(false, false);
      Double double1 = new Double((-6033.5057807060075));
      JSONObject jSONObject0 = new JSONObject(double1);
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", (-583));
      jSONObject0.optJSONObject("islogicalOr");
      JSONObject.valueToString((Object) null, (-583), (-583));
      jSONObject1.put("] is not a number.", false);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.9731936202008726
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Double.min(4556.256074759981, 1649.287826905459);
      Float.sum(924.42816F, 2370);
      Float.max(2370, (-1705.4843F));
      Byte byte0 = new Byte((byte) (-97));
      JSONObject jSONObject0 = new JSONObject(byte0);
      Double double0 = new Double(2370.0F);
      jSONObject0.put("put", false);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-1771), 969);
      Short short0 = new Short((short)1807);
      assertEquals((short)1807, (short)short0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.35580918529373
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Long long0 = new Long(1L);
      Short short0 = new Short((short)91);
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.toUnsignedInt((short)91);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "getmax";
      stringArray0[1] = "=}{b^yHpFi<gLPd4";
      stringArray0[2] = "|dD";
      stringArray0[3] = "|dD";
      stringArray0[4] = "|dD";
      stringArray0[5] = "] not found.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      jSONObject1.put("getlength", false);
      HashMap<JSONArray, String> hashMap1 = new HashMap<JSONArray, String>();
      jSONObject1.put("getmax", (Map) hashMap1);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.6100777751436999
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.toArray();
      LinkedList linkedList1 = (LinkedList)linkedList0.clone();
      linkedList0.add("=Zt#(*~c$)");
      linkedList0.add("=Zt#(*~c$)");
      Boolean boolean1 = new Boolean("ha");
      linkedList0.add("' _and ins/a saw '");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("=Zt#(*~c$)");
      linkedList0.offerFirst("HM]9i");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("Weuw2Lm(");
      linkedList0.add("~68V>F{&$}y9`");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.offer((String) null);
      linkedList4.toArray();
      linkedList4.parallelStream();
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONObject jSONObject0 = new JSONObject(linkedList2);
      Long long0 = new Long((-1476L));
      jSONObject0.put("nkEDTwBP|L`h", true);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Float float0 = new Float(2689.1543F);
      Float.isFinite(717.0346F);
      Float.max(0.0F, 2689.1543F);
      Float.max(0.0F, 0.0F);
      Float.min(717.0346F, (-1.0F));
      Boolean.compare(true, false);
      Boolean.logicalXor(true, true);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      Double double0 = new Double(1);
      Double.isFinite(717.0346F);
      HashMap<String, Double> hashMap2 = new HashMap<String, Double>(hashMap1);
      Double double1 = new Double(1);
      HashMap<String, Double> hashMap3 = new HashMap<String, Double>();
      hashMap3.replace("0", double0);
      HashMap<JSONArray, Boolean> hashMap4 = new HashMap<JSONArray, Boolean>();
      HashMap<Integer, Boolean> hashMap5 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap5);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.3599696008783155
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Long long0 = new Long(1L);
      Short short0 = new Short((short)91);
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.toUnsignedInt((short)91);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "getmax";
      stringArray0[1] = "=}{b^yHpFi<gLPd4";
      stringArray0[2] = "|dD";
      stringArray0[3] = "|dD";
      stringArray0[5] = "|dD";
      stringArray0[5] = "] not found.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("=}{b^yHpFi<gLPd4", (Map) null);
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      HashMap<JSONArray, String> hashMap1 = new HashMap<JSONArray, String>();
      jSONObject1.put("getmax", (Map) hashMap1);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.7653327875937666
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(38);
      BiFunction<Integer, Float, Float> biFunction0 = (BiFunction<Integer, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyInt() , anyFloat());
      hashMap0.compute(integer0, biFunction0);
      jSONObject0.putOpt("A JSONObject text must begin with '{'", "A JSONObject text must begin with '{'");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.toArray();
      linkedList0.clone();
      linkedList0.add("bc@jFlJs");
      linkedList0.add("bc@jFlJs");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      Boolean boolean1 = new Boolean("ha");
      linkedList0.stream();
      linkedList0.add("' _and ins/a saw '");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("istoLowerCase");
      linkedList1.add("bc@jFlJs");
      linkedList1.add("0)EEiaH|c4A");
      linkedList0.offerFirst("HM]9i");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      String string0 = "Weuw2Lm(";
      linkedList2.add("Weuw2Lm(");
      linkedList0.add("~68V>F{&$}y9`");
      Long long0 = new Long(1L);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.7322902315604396
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "put";
      Boolean boolean0 = new Boolean("put");
      JSONObject jSONObject1 = jSONObject0.append("put", boolean0);
      jSONObject1.accumulate("put", "put");
      jSONObject1.toString((-3967));
      jSONObject1.optInt("put", 75);
      jSONObject0.append("put", boolean0);
      String string1 = ",;z0a?\\_ iYeBm\\4oeZ";
      Boolean boolean1 = new Boolean(",;z0a?_ iYeBm\u0004oeZ");
      try { 
        jSONObject0.getLong("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float float0 = new Float((-1.0F));
      Boolean boolean0 = new Boolean(false);
      Double double0 = new Double((-236.101));
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      Double double1 = new Double((-2598.51052217));
      hashMap0.replace((String) null, double1);
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(false, false);
      Boolean.logicalAnd(true, true);
      Boolean.logicalXor(true, false);
      Float float0 = new Float((-1.0F));
      Boolean.logicalXor(false, false);
      Boolean.logicalAnd(false, false);
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      CharBuffer.wrap(charArray0);
      char[] charArray1 = new char[7];
      charArray1[0] = 'A';
      charArray1[1] = 'A';
      charArray1[2] = '8';
      charArray1[3] = 'g';
      charArray1[4] = 'i';
      charArray1[5] = 'y';
      charArray1[6] = 'i';
      CharBuffer.wrap(charArray1);
      Long long0 = new Long(1L);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("gettoUnsignedString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoUnsignedString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject.doubleToString((-15.388771330514711));
      Long long0 = new Long(1L);
      char[] charArray0 = new char[2];
      CharBuffer.wrap(charArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer0.isDirect());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.9105042840850266
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("-9/M");
      StringWriter stringWriter0 = new StringWriter();
      linkedList0.add("");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.containsAll(linkedList0);
      LinkedList<String> linkedList2 = new LinkedList<String>(linkedList1);
      linkedList0.add("");
      Double double0 = new Double((-1.0));
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.poll();
      linkedList3.add("$+");
      JSONObject jSONObject0 = new JSONObject(linkedList3);
      Long long0 = new Long((-58L));
      try { 
        jSONObject0.getDouble("-9/M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-9/M\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer integer0 = new Integer(97);
      Integer.toUnsignedString(1245);
      Integer integer1 = new Integer(1245);
      Integer.min(466, 97);
      Integer.max(57, 380);
      Integer integer2 = new Integer(1893);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(97);
      Double double1 = new Double(0.0);
      Double.sum(0.0, 606.0489775765694);
      hashMap0.replace("TG}h.y", double1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONArray("1245");
      Short short0 = new Short((short)13);
      Double double2 = new Double(0.0);
      try { 
        jSONObject0.put((String) null, 8192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.474860082302393
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.names();
      String string0 = "put";
      Boolean boolean0 = new Boolean("Mt");
      JSONObject jSONObject1 = jSONObject0.append("put", boolean0);
      JSONObject jSONObject2 = jSONObject0.append("Mt", boolean0);
      Integer integer0 = new Integer(0);
      String string1 = ",;z0?\\_ iYRBm\\4oeZ";
      jSONObject1.put("Mt", (-599.449));
      Object object0 = new Object();
      Boolean boolean1 = new Boolean("put");
      jSONObject2.optLong(",;z0?_ iYRBm\u0004oeZ", (long) 0);
      jSONObject0.optJSONArray("qr]Y([<MQFl1");
      try { 
        jSONObject0.getLong("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.613129842728147
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Double double0 = new Double(1649.287826905459);
      byte byte0 = (byte) (-97);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "7Mh.";
      stringArray0[1] = "java.lang.Long@0000000007.";
      stringArray0[2] = "7Mh.";
      stringArray0[3] = "7Mh.";
      JSONObject jSONObject0 = new JSONObject("7Mh.", stringArray0);
      String string0 = "HmYzhFE21O7";
      jSONObject0.optBoolean("HmYzhFE21O7", true);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "java.lang.Long@0000000007.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.8870923714662067
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short1, stringArray0);
      jSONObject0.optBoolean("va", false);
      String string0 = "";
      jSONObject0.optInt("");
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONTokener jSONTokener0 = new JSONTokener("vQzpTz{F<&TMfF");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of vQzpTz{F<&TMfF
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.6363119192557498
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Double double0 = new Double((-66.922002684312));
      Byte byte0 = new Byte((byte)35);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("mQzZbZ\u0001Ip8T&(W;.", (double) (-740.8F));
      Double double1 = new Double((-740.8F));
      assertEquals((-740.7999877929688), (double)double1, 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.331604122279952
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Double.min(776.773097, 776.773097);
      Float.sum(924.42816F, 2370);
      Float.max(0.0F, (-2645.4F));
      Byte byte0 = new Byte((byte) (-97));
      JSONObject jSONObject0 = new JSONObject(byte0);
      Double double0 = new Double((byte) (-97));
      JSONObject jSONObject1 = jSONObject0.put("put", false);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(jSONObject1, (-132), 2370);
      Short short0 = new Short((short)915);
      assertEquals((short)915, (short)short0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.3799953913508123
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Long long0 = new Long(1L);
      Short short0 = new Short((short)91);
      JSONObject jSONObject0 = new JSONObject(short0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|dD";
      stringArray0[1] = "] not found.";
      stringArray0[2] = "getmax";
      JSONObject jSONObject1 = new JSONObject((Object) "getmax");
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      // Undeclared exception!
      jSONObject1.toString(693, 755);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.3288274798399655
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(false, false);
      Boolean.logicalXor(false, false);
      char[] charArray0 = new char[7];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      charArray0[3] = 'W';
      charArray0[4] = 'W';
      charArray0[5] = 'W';
      charArray0[6] = 'W';
      CharBuffer.wrap(charArray0);
      CharBuffer.wrap(charArray0);
      Long long0 = new Long(3170L);
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((float) 3170L);
      jSONObject0.put("s =j%\"HY", (Object) float0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.9175503412075572
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Float.min(0.0F, 0.0F);
      Long long0 = new Long((-1L));
      Double double0 = new Double((-3369.92319646));
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.sum(0.0F, (-1L));
      Double.min((-2861.2140437271), (-1.0));
      try { 
        jSONObject0.getBoolean("\"9w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"9w\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.117638517694053
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Integer integer0 = new Integer(97);
      Long long0 = new Long((-1L));
      Short short0 = new Short((short)35);
      Integer integer1 = new Integer((short)35);
      JSONObject jSONObject0 = new JSONObject(integer1);
      Short.toUnsignedInt((short)35);
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Short.toUnsignedLong((short)1370);
      HashMap<JSONArray, String> hashMap1 = new HashMap<JSONArray, String>();
      HashMap<Integer, Double> hashMap2 = new HashMap<Integer, Double>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      boolean boolean0 = jSONObject0.optBoolean("rT;1NCg");
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Boolean.valueOf(true);
      Integer integer0 = new Integer(2370);
      linkedList0.add("]lAi+'[Z|XL*~v'Q}g");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.clone();
      linkedList1.offerFirst("has");
      linkedList1.containsAll(linkedList0);
      linkedList1.add("+");
      linkedList1.add("_)#T+*CrZv|");
      Double double0 = new Double(0.0);
      Long long0 = new Long(2370);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("]lAi+'[Z|XL*~v'Q}g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]lAi+'[Z|XL*~v'Q}g\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.sum(3513.19F, (-1.0F));
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Long long0 = new Long(0L);
      Short short0 = new Short((short)1);
      Integer integer0 = new Integer((short)1);
      String string0 = "=}{b^yHpFi<gLPd4";
      String[] stringArray0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(integer0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.258426135894722
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.compare(false, false);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      BiConsumer<Object, Double> biConsumer0 = (BiConsumer<Object, Double>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double((-2840.0));
      hashMap0.replace("0", double0);
      HashMap<JSONArray, Boolean> hashMap2 = new HashMap<JSONArray, Boolean>();
      Double double1 = new Double(3047.2296177082);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.remove("0");
      jSONObject0.optJSONObject("wheel.json.JSONObject");
      jSONObject0.putOpt("wheel.json.JSONObject", double0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.0752440338628615
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      Double double0 = new Double(1649.287826905459);
      Double double1 = new Double(1649.287826905459);
      Byte byte0 = new Byte((byte) (-90));
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Double double2 = new Double(1.0);
      try { 
        jSONObject0.getDouble("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.876714376668926
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("-9/M");
      StringWriter stringWriter0 = new StringWriter();
      linkedList0.add("");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.containsAll(linkedList0);
      LinkedList<String> linkedList2 = new LinkedList<String>(linkedList1);
      linkedList0.add("");
      Double double0 = new Double((-1.0));
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.poll();
      linkedList3.add("$+");
      JSONObject jSONObject0 = new JSONObject(linkedList3);
      try { 
        jSONObject0.getString(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.0890092384766588
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float((-1.0F));
      Boolean boolean1 = new Boolean(false);
      Double double0 = new Double((-517.0));
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      BiFunction<String, Double, Double> biFunction0 = (BiFunction<String, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      BiConsumer<String, Double> biConsumer0 = (BiConsumer<String, Double>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      Double double1 = new Double((-1430.0F));
      Float.min((-1.0F), 0.0F);
      Float.isFinite((-1.0F));
      Float.max((-1.0F), 0.0F);
      Float.isFinite(0.0F);
      Float.max((-1665.0668F), (-1430.0F));
      Float.min((-819.6619F), (-1.0F));
      JSONObject.numberToString(float0);
      Byte byte0 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("qQ_~lCFl,VF[z");
      linkedList0.add((String) null);
      linkedList0.add("=Ztr(*~c$)");
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      linkedList0.removeAll(linkedList1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("=Ztr(*~c$)");
      linkedList2.offerFirst("to");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.poll();
      linkedList3.add((String) null);
      Float.isFinite((-2895.6626F));
      Float.isFinite((-1.0F));
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.6735439389176303
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.sum(3513.19F, (-1.0F));
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.clone();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("=Ztr(*~c$)");
      linkedList2.add("':zYdwY[O6`CCR(m,");
      linkedList2.add("':zYdwY[O6`CCR(m,");
      linkedList0.removeAll(linkedList2);
      linkedList1.offerFirst("' and instad saw '");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("' and instad saw '");
      linkedList2.add("':zYdwY[O6`CCR(m,");
      linkedList0.toArray();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList1.parallelStream();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList5.add("=Ztr(*~c$)");
      Double double0 = new Double((-1.0));
      String string0 = JSONObject.quote("] is not a Boolean.");
      assertEquals("\"] is not a Boolean.\"", string0);
      
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(linkedList4);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("ha");
      linkedList0.add("ha");
      linkedList0.add("|@8T$f'e-g");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("2fk,Ej|l?cAX%@7Z");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList1.removeAll(linkedList3);
      linkedList0.offerFirst("getoptJSONArray");
      linkedList2.add("'0=");
      linkedList2.add("3BM6|2#N]");
      linkedList2.add("P#W6cE");
      linkedList3.toArray();
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = '8';
      charArray0[2] = 's';
      charArray0[3] = '(';
      charArray0[4] = 's';
      charArray0[5] = 's';
      charArray0[6] = 'I';
      charArray0[7] = 's';
      CharBuffer.wrap(charArray0);
      Long long0 = new Long(0L);
      JSONTokener jSONTokener0 = new JSONTokener("3BM6|2#N]");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 3BM6|2#N]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.6068571632274358
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Double double0 = new Double(1649.287826905459);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      boolean boolean0 = linkedList0.removeAll(linkedList1);
      linkedList0.add("Sr#2HYQ&&'?QjGK");
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.keys();
      linkedList0.addFirst("");
      Double double1 = new Double(1669.06007);
      boolean boolean1 = linkedList0.add("p\"ld5f/d");
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.2968341813173447
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      double double0 = jSONObject1.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, jSONObject1.length());
      
      Double double1 = new Double(0.0);
      long long0 = jSONObject0.optLong("&xPR|UJ9.#+mZdgb", 1656L);
      assertEquals(1656L, long0);
      
      double double2 = jSONObject0.optDouble("dec");
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.sum(3513.19F, (-1.0F));
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.clone();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("=Ztr(*~c$)");
      linkedList1.clone();
      linkedList2.add((String) null);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.add("=Ztr(*~c$)");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.removeAll(linkedList0);
      linkedList4.offerFirst("isdecode");
      LinkedList<String> linkedList5 = new LinkedList<String>();
      linkedList5.add("*gt^lDbNJ#");
      linkedList0.add("@`|/?M>gv&quX_/kV");
      LinkedList<String> linkedList6 = new LinkedList<String>();
      linkedList6.offerFirst("int");
      linkedList4.add("@`|/?M>gv&quX_/kV");
      linkedList0.toArray();
      linkedList1.parallelStream();
      Double double0 = new Double(348.665847648537);
      JSONObject.quote("w.}F[W:G{Ote\"c-D|_");
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalAnd(true, true);
      Boolean.logicalXor(true, false);
      Float float0 = new Float((-1.0F));
      Boolean.logicalAnd(false, false);
      Float.max((-1.0F), 1840.5802F);
      Float.min(1356.0F, 1840.5802F);
      Float.min((-1.0F), (-1.0F));
      Float.isFinite((-1.0F));
      Long long0 = new Long(187L);
      Float float1 = new Float(0.0F);
      String string0 = JSONObject.valueToString(float1, 2567, 1404);
      assertNotNull(string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject.valueToString(linkedList0, 2, 2);
      linkedList0.clone();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add((String) null);
      linkedList1.add("{.;a~>WW~");
      linkedList1.add("=Ztr(*~c$)");
      linkedList0.add((String) null);
      linkedList1.add("=Ztr(*~c$)");
      linkedList1.removeAll(linkedList0);
      linkedList1.offerFirst("ite");
      linkedList0.add("^O{R;&v7gC0sB!V");
      linkedList1.add((String) null);
      linkedList1.toArray();
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = '(';
      charArray0[2] = 's';
      CharBuffer.wrap(charArray0);
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Float.isFinite(964.9F);
      Float.min(268.19162F, 268.19162F);
      Float.isFinite(268.19162F);
      boolean boolean0 = new Boolean(true);
      Float.min((-1327.152F), 0.0F);
      Float.min((-378.17526F), (-1618.28F));
      Float.isFinite((-1618.28F));
      Float.isFinite(0.0F);
      Float.max(1817.47F, (-1618.28F));
      Double double0 = new Double(0.0F);
      JSONObject.numberToString(double0);
      Byte byte0 = new Byte((byte)8);
      Long long0 = new Long((byte)8);
      assertEquals(8L, (long)long0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Float.valueOf(2689.1543F);
      Float.isFinite(2689.1543F);
      Float.min(2689.1543F, (-1.0F));
      Float.isFinite(717.0346F);
      Float.isFinite(717.0346F);
      JSONObject.quote("v.JsamBfC6$wuZIbW");
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(false, false);
      Boolean.logicalAnd(true, true);
      Boolean.logicalXor(false, false);
      Float float0 = new Float((-1.0F));
      Boolean.logicalXor(false, true);
      Boolean.logicalAnd(false, false);
      Float.max(0.0F, (-3760.74F));
      Float.min(2917.825F, (-3760.74F));
      Float.min((-3760.74F), 0.0F);
      Float.isFinite(1666.0F);
      Float.isFinite(1.0F);
      JSONObject.quote((String) null);
      Long long0 = new Long((-1991L));
      assertEquals((-1991L), (long)long0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.2736025032707765
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float((-1.0F));
      Boolean.logicalXor(false, false);
      Boolean.logicalOr(false, false);
      Double double0 = new Double((-516.8064214560868));
      Float.sum((-1430.0F), 0.0F);
      Double double1 = new Double((-6033.5057807060075));
      JSONObject jSONObject0 = new JSONObject(double1);
      int int0 = jSONObject0.optInt("k)tk\"Di8");
      assertEquals(0, int0);
      
      long long0 = jSONObject0.optLong("isoptJSONArray");
      assertEquals(3, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.172467200040117
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Long long0 = new Long(1L);
      Integer.toUnsignedString(1);
      Integer.remainderUnsigned(1, 1245);
      Integer.min(1, 12);
      Integer integer0 = new Integer(57);
      Integer integer1 = new Integer(3420);
      Object object0 = JSONObject.NULL;
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(466);
      Double double1 = new Double(12);
      BiFunction<Double, Object, Double> biFunction0 = (BiFunction<Double, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("1", double1, biFunction0);
      Double double2 = new Double(452.056061954);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONArray("\f");
      Long long1 = new Long(12);
      jSONObject0.getLong("1");
      Float float0 = new Float((double) 1);
      try { 
        jSONObject0.append("1", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[1] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.5909081360786343
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Integer integer0 = new Integer(70);
      String[] stringArray0 = new String[1];
      Integer.sum(16, (-3036));
      Integer.toUnsignedString(1245);
      Integer integer1 = new Integer(1245);
      Integer.max(16, 114);
      Integer.min(466, (-1));
      Integer.max(114, 114);
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Integer.max(16, (-1));
      double double0 = jSONObject0.optDouble("_P!cb&,");
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = jSONObject0.optDouble("", (double) 16);
      assertEquals(16.0, double1, 0.01);
      
      Integer integer2 = new Integer(16);
      String string0 = jSONObject0.optString("A JSONObject text must begin with '{'", "va");
      assertEquals("va", string0);
      
      long long0 = jSONObject0.optLong("] is not a Boolean.");
      assertEquals(0L, long0);
      
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
      
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.814103974008709
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Long long0 = new Long(1L);
      Short short0 = new Short((short)91);
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.toUnsignedInt((short)91);
      Float float0 = new Float((double) (short)91);
      jSONObject0.append("getgetInteger", float0);
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      HashMap<JSONArray, String> hashMap1 = new HashMap<JSONArray, String>();
      assertEquals(0, hashMap1.size());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1361557235984077
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.toArray();
      linkedList0.clone();
      linkedList0.add("=Zt#(*~c$)");
      linkedList0.add("=Zt#(*~c$)");
      Boolean boolean1 = new Boolean("ha");
      linkedList0.add("' _and ins/a saw '");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.spliterator();
      linkedList1.add("=Zt#(*~c$)");
      linkedList0.offerFirst("HM]9i");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("Weuw2Lm(");
      linkedList0.add("~68V>F{&$}y9`");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getInt("F}P/QM{KVZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"F}P/QM{KVZ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.934551794074474
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Float float0 = new Float(2689.1543F);
      Float.isFinite(717.0346F);
      Float.max(0.0F, 2689.1543F);
      Float.max(0.0F, 0.0F);
      Float.min(717.0346F, (-1.0F));
      Boolean.compare(true, true);
      boolean boolean0 = new Boolean(true);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      Double double0 = new Double(0);
      Double.isFinite(717.0346F);
      HashMap<String, Double> hashMap2 = new HashMap<String, Double>(hashMap1);
      Double double1 = new Double(0);
      hashMap1.replace("0", double0);
      HashMap<JSONArray, Boolean> hashMap3 = new HashMap<JSONArray, Boolean>();
      HashMap<Integer, Boolean> hashMap4 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Long long0 = new Long(0);
      JSONObject jSONObject1 = new JSONObject((Object) "is");
      JSONArray jSONArray0 = jSONObject1.names();
      assertNotNull(jSONArray0);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Integer integer0 = new Integer(67);
      Integer.toUnsignedString(1245);
      Integer.remainderUnsigned(67, 1245);
      Integer.min(160, 67);
      Integer.getInteger("1245");
      Integer integer1 = new Integer(57);
      Float.min(2238.257F, 57);
      Float.isFinite(2238.257F);
      Integer integer2 = new Integer(67);
      Integer.getInteger("1245", integer2);
      Float.isFinite(57.0F);
      Float.max(160, (-2467.1157F));
      Float.min(0.0F, 0.0F);
      JSONObject.numberToString(integer0);
      Byte byte0 = new Byte((byte)0);
      Long long0 = new Long(1245);
      assertEquals(1245L, (long)long0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Float float0 = new Float(2689.1543F);
      Float.sum(717.0346F, 2689.1543F);
      Float.isFinite(717.0346F);
      Float.max(0.0F, 2689.1543F);
      Float.sum(0.0F, (-1.0F));
      Float.max(0.0F, (-38.27898F));
      Float.isFinite(0.0F);
      Float.min(717.0346F, (-1.0F));
      Float.isFinite(717.0346F);
      Float.isFinite(717.0346F);
      Float.min((-1327.152F), (-1.0F));
      Float.sum(0.0F, 0.0F);
      Float.min(0.0F, (-1.0F));
      Float.min((-435.0F), 123.09196F);
      Float.isFinite((-1327.152F));
      Float.max((-1.0F), (-435.0F));
      Float.isFinite((-435.0F));
      Float.max((-819.6619F), 1817.47F);
      JSONObject.quote("MEPX@}uv*kr%l'N");
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalXor(false, false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      linkedList0.add("qQ_~lCFl,VF[z");
      linkedList0.add((String) null);
      linkedList0.add("=Ztr(*~c$)");
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      linkedList0.removeAll(linkedList1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.offerFirst("to");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.poll();
      linkedList3.add((String) null);
      boolean boolean1 = new Boolean(false);
      Float.isFinite((-1.0F));
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("9B0b,3", 179);
      assertEquals(179, int0);
      
      int int1 = new Integer(179);
      assertTrue(int1 == int0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.sum((-1434.0F), (-1434.0F));
      linkedList0.add("add");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.clone();
      linkedList0.listIterator();
      linkedList1.add("add");
      linkedList0.add("' and instad saw '");
      linkedList1.add("' and instad saw '");
      linkedList0.removeAll(linkedList1);
      linkedList0.offerFirst("] not found.");
      linkedList1.add("add");
      linkedList0.add("");
      linkedList1.offerFirst("] not found.");
      linkedList1.add("Ap|.^");
      linkedList1.add("4kG<");
      linkedList1.add("");
      linkedList1.toArray();
      linkedList1.parallelStream();
      Double double0 = new Double(3047.2296177082);
      JSONObject.quote("");
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
