/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 05:56:41 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.ASSearch;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.Filter;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7576378583071737
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      SparseInstance sparseInstance0 = new SparseInstance(139);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      arrayList0.ensureCapacity(79);
      Instances instances0 = new Instances("", arrayList0, 139);
      instances0.add((Instance) sparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("@data");
      Attribute attribute0 = new Attribute("m+i'kba<", linkedList0, 139);
      attribute0.enumerateValues();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 0, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-121);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("oLld", linkedList1, 6);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      jRip_NumericAntd0.value = (double) (byte) (-4);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      jRip0.getRevision();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      try { 
        coverTree0.kNearestNeighbours(binarySparseInstance0, (byte)107);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      jRip0.setUsePruning(false);
      jRip0.getOptions();
      int int0 = jRip0.getOptimizations();
      assertFalse(jRip0.getUsePruning());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)15;
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("Whether debug informtion is output to the console.", linkedList1, (-10));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      jRip_NumericAntd0.value = (double) 3;
      jRip_NumericAntd0.covers(binarySparseInstance0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("string");
      protectedProperties0.getOrDefault(linkedList0, locale_LanguageRange0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties(protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties14);
      assertTrue(protectedProperties15.equals((Object)protectedProperties12));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Locale.LanguageRange> function0 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.apply((Locale.LanguageRange) null);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      arrayList0.iterator();
      arrayList0.add((Locale.LanguageRange) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      linkedList0.replaceAll(unaryOperator0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList1, (Locale.FilteringMode) null);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set0, (Locale.FilteringMode) null);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.getUnicodeLocaleKeys();
      arrayList1.iterator();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) null);
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("measureNumRules");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.203246955493325
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(108);
      binarySparseInstance0.setValue(1520, (double) 108);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("Y");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 0);
      instances0.add((Instance) sparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Random.setNextRandom(2120640102);
      JRip jRip1 = new JRip();
      attribute0.addRelation(instances0);
      jRip1.setUsePruning(false);
      try { 
        jRip1.rulesetForOneClass(1, instances0, 2211.2, 1520);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.093380419625629
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nNo pruig: growing a rule ...", arrayList0, (byte)97);
      arrayList0.iterator();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      JRip.RipperRule[] jRip_RipperRuleArray0 = new JRip.RipperRule[9];
      jRip_RipperRuleArray0[7] = jRip_RipperRule0;
      jRip_RipperRuleArray0[1] = jRip_RipperRule0;
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_RipperRuleArray0[1] = jRip_RipperRule1;
      jRip_RipperRuleArray0[4] = jRip_RipperRule1;
      jRip_RipperRuleArray0[5] = jRip_RipperRule0;
      jRip_RipperRuleArray0[6] = jRip_RipperRule1;
      jRip_RipperRuleArray0[7] = jRip_RipperRule1;
      jRip_RipperRuleArray0[8] = jRip_RipperRule0;
      Random.setNextRandom((byte)97);
      JRip jRip1 = new JRip();
      jRip0.setUsePruning(false);
      try { 
        jRip0.rulesetForOneClass((byte)97, instances0, Double.NaN, (byte)97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "amongst";
      stringArray0[1] = "ml%aMSiCY{nAYauP4";
      stringArray0[2] = "jks%";
      stringArray0[3] = "^MyeaPh4U^F4i,wBT[}";
      stringArray0[4] = "";
      stringArray0[5] = "-N";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -N option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.203456186693981
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, (byte)124);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.toString(attribute0);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.hasAntds();
      jRip_RipperRule1.setConsequent((byte) (-110));
      JRip.RipperRule[] jRip_RipperRuleArray0 = new JRip.RipperRule[2];
      jRip_RipperRuleArray0[0] = jRip_RipperRule1;
      jRip_RipperRuleArray0[1] = jRip_RipperRule1;
      instances0.toArray(jRip_RipperRuleArray0);
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      jRip_RipperRule1.grow(instances0);
      assertEquals((-110.0), jRip_RipperRule1.getConsequent(), 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.206552161926179
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attribute attribute0 = new Attribute("0r(}p");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nNo pruning: growing a rule ...", arrayList0, (byte)96);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.toString(attribute0);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.hasAntds();
      jRip_RipperRule0.setConsequent((byte)96);
      JRip.RipperRule[] jRip_RipperRuleArray0 = new JRip.RipperRule[9];
      jRip_RipperRuleArray0[0] = jRip_RipperRule0;
      jRip_RipperRuleArray0[1] = jRip_RipperRule1;
      jRip_RipperRuleArray0[2] = jRip_RipperRule0;
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      jRip_RipperRuleArray0[3] = jRip_RipperRule2;
      jRip_RipperRuleArray0[4] = jRip_RipperRule1;
      jRip_RipperRuleArray0[5] = jRip_RipperRule0;
      jRip_RipperRuleArray0[6] = jRip_RipperRule1;
      jRip_RipperRuleArray0[7] = jRip_RipperRule1;
      jRip_RipperRuleArray0[8] = jRip_RipperRule0;
      instances0.toArray(jRip_RipperRuleArray0);
      JRip.RipperRule jRip_RipperRule3 = jRip0.new RipperRule();
      jRip_RipperRule0.grow(instances0);
      assertEquals(96.0, jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7576378583071737
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      JRip jRip0 = new JRip();
      SparseInstance sparseInstance0 = new SparseInstance(139);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.ensureCapacity(79);
      Instances instances0 = new Instances("", arrayList0, 139);
      instances0.add((Instance) sparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("m+i'kb<", linkedList0, 1520);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0647549344121345
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = 515.18074;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 515.18074;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      doubleArray0[0] = 515.18074;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(121);
      binarySparseInstance0.setValue(1520, 0.0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(sparseInstance0);
      binarySparseInstance1.setWeight((-1.0));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@end", arrayList0, 1520);
      instances0.add((Instance) binarySparseInstance0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList1, locale_FilteringMode0);
      Attribute attribute1 = new Attribute("@data", list0, 0);
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      double double1 = 99.0;
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 1520, 2419.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 515.18074;
      int[] intArray0 = new int[5];
      SparseInstance sparseInstance0 = new SparseInstance(121, doubleArray0, intArray0, 368);
      sparseInstance0.setValue((-1031), 0.0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Attribute attribute0 = new Attribute((String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1520, intArray0, 0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance1);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance3 = new SparseInstance((Instance) binarySparseInstance1);
      SparseInstance sparseInstance4 = new SparseInstance((Instance) sparseInstance3);
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      jRip_NominalAntd0.value = (-1.0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      String string0 = jRip1.usePruningTipText();
      assertEquals("Whether pruning is performed.", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.setUseIBk(true);
      Instances instances0 = decisionTable0.m_dtInstances;
      decisionTable0.setSearch((ASSearch) null);
      try { 
        jRip0.rulesetForOneClass(1, (Instances) null, 1378.944165256, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      int[] intArray0 = new int[5];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(121);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "relational");
      binarySparseInstance2.setWeight(0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      SparseInstance sparseInstance2 = new SparseInstance((-53.8623779), doubleArray0, intArray0, 2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(sparseInstance2);
      SparseInstance sparseInstance3 = new SparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance4 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance5 = new SparseInstance(2722);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(sparseInstance4);
      SparseInstance sparseInstance6 = new SparseInstance((Instance) binarySparseInstance4);
      sparseInstance6.isMissing(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(sparseInstance6);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9410699503727393
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      jRip0.setSeed((-1396L));
      jRip0.toString();
      jRip0.getSeed();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 782.4;
      Object object0 = jRip_NominalAntd0.copy();
      doubleArray0[1] = (double) (-1396L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      doubleArray0[2] = (double) (-1396L);
      doubleArray0[3] = (-510.1494);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = 918.0;
      SparseInstance sparseInstance0 = new SparseInstance((-510.1494), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance1);
      jRip_NominalAntd0.covers(binarySparseInstance1);
      jRip_NominalAntd0.getRevision();
      jRip0.getTechnicalInformation();
      String string0 = object0.toString();
      assertEquals((-1396L), jRip0.getSeed());
      assertEquals(" = ", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 515.18074;
      doubleArray0[1] = 515.18074;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (-1.0);
      jRip_NumericAntd0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("@attribute");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@attribute");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 117);
      StringReader stringReader1 = new StringReader("Linear regression on ");
      // Undeclared exception!
      try { 
        jRip0.getMeasure("string");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[5];
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("2+F&`yB", arrayList0, 368);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      Attribute attribute0 = new Attribute("usZsUM1WhXxj~", "", protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getAccu();
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.seedTipText();
      Attribute attribute0 = new Attribute("The seed used for randomizing the data.", "", 269);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getMaxInfoGain();
      jRip0.toString();
      StringReader stringReader0 = new StringReader("5tgq4=ZZ34>");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[5tgq4=ZZ34>], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attribute attribute0 = new Attribute("0r(}p");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Whethr debug information is output to the consolf.", arrayList0, (byte)119);
      JRip jRip0 = new JRip();
      jRip0.getDebug();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("integer");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) "$F@wn+wE";
      objectArray0[1] = (Object) arrayList0;
      PrintWriter printWriter0 = mockPrintWriter0.format("$F@wn+wE", objectArray0);
      protectedProperties1.store((Writer) printWriter0, ":z7xW##hy^ejP");
      mockPrintStream0.format("0r(}p", objectArray0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      Properties properties1 = new Properties(protectedProperties4);
      mockPrintStream0.print((long) 1);
      mockPrintWriter0.print(0.0F);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties0);
      protectedProperties3.list((PrintWriter) mockPrintWriter0);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, (byte)119, 0);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.remove((Object) "2");
      linkedList0.remove((Object) arrayList0);
      arrayList0.add((Object) linkedList0);
      linkedList0.retainAll(arrayList0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(linkedList0);
      Instances instances0 = new Instances("ejt486gS\"nq!`rbrS33", arrayList1, 69);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.spliterator();
      linkedList1.add("ejt486gS\"nq!`rbrS33");
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList2.add((Locale.LanguageRange) null);
      linkedList1.containsAll(linkedList0);
      linkedList1.add("");
      Attribute attribute0 = new Attribute("", linkedList1, 69);
      JRip jRip0 = new JRip();
      linkedList1.removeLast();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals("8118", string0);
      
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 1, 69);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, instancesArray0.length);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.370640645235503
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nNo pruning: growing a rule ...", arrayList0, (byte)96);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      jRip_RipperRule2.hasAntds();
      jRip_RipperRule0.setConsequent((byte)96);
      JRip.RipperRule[] jRip_RipperRuleArray0 = new JRip.RipperRule[9];
      jRip_RipperRuleArray0[7] = jRip_RipperRule2;
      jRip_RipperRule0.covers((Instance) null);
      jRip_RipperRuleArray0[1] = jRip_RipperRule2;
      jRip_RipperRuleArray0[1] = jRip_RipperRule0;
      JRip.RipperRule jRip_RipperRule3 = jRip0.new RipperRule();
      jRip_RipperRuleArray0[3] = jRip_RipperRule3;
      jRip_RipperRuleArray0[4] = jRip_RipperRule2;
      jRip_RipperRuleArray0[5] = jRip_RipperRule0;
      jRip_RipperRuleArray0[6] = jRip_RipperRule2;
      jRip_RipperRuleArray0[7] = jRip_RipperRule2;
      jRip_RipperRuleArray0[8] = jRip_RipperRule0;
      jRip_RipperRule3.prune(instances0, false);
      instances0.toArray(jRip_RipperRuleArray0);
      JRip.RipperRule jRip_RipperRule4 = jRip0.new RipperRule();
      jRip_RipperRule0.grow(instances0);
      jRip_RipperRule0.hasAntds();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 515.18074;
      doubleArray0[1] = 515.18074;
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      JRip jRip0 = new JRip();
      String string0 = jRip0.checkErrorRateTipText();
      assertEquals(1L, jRip0.getSeed());
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2627533249678033
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      jRip0.toString();
      DecisionTable decisionTable0 = new DecisionTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      jRip0.setOptions(stringArray0);
      assertEquals(11, stringArray0.length);
      
      Attribute attribute0 = new Attribute("@data", 699);
      Attribute attribute1 = attribute0.copy(".arff");
      jRip0.setFolds(3);
      jRip0.setDebug(false);
      jRip0.enumerateMeasures();
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      
      String[] stringArray1 = new String[8];
      stringArray1[0] = "relational";
      stringArray1[1] = "\tThe range of attributes to print in addition to the classification.\n\t(default: none)";
      stringArray1[2] = "string";
      decisionTable0.listOptions();
      stringArray1[3] = "@relation";
      stringArray1[4] = "integer";
      stringArray1[5] = "numeric";
      stringArray1[6] = "JRIP: No model built yet.";
      stringArray1[7] = "integer";
      jRip0.setOptions(stringArray1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      double double0 = jRip_NumericAntd0.getAttrValue();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.954770847815427
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      jRip0.toString();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      jRip0.setOptions(stringArray0);
      Attribute attribute0 = new Attribute("@data", 5);
      Attribute attribute1 = attribute0.copy(".arff");
      jRip0.setFolds(3);
      jRip0.setDebug(false);
      jRip0.enumerateMeasures();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.copy();
      jRip_NumericAntd0.getAttr();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      
      jRip0.setMinNo((-0.19040113657460223));
      jRip0.getUsePruning();
      DecisionTable decisionTable2 = new DecisionTable();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute2 = new Attribute("@attribute", arrayList0, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      double double0 = jRip_NominalAntd0.getCover();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)96;
      doubleArray0[1] = (double) (byte)96;
      doubleArray0[2] = (double) (byte)96;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)96, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1520);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute(".KR0XCh/BNZXE#%8H");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 1520);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 96.0, 96.0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance1.toStringNoWeight(99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 515.18074;
      doubleArray0[0] = 515.18074;
      int[] intArray0 = new int[5];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(121);
      binarySparseInstance0.setValue(1520, 0.0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(sparseInstance0);
      binarySparseInstance1.setWeight((-1.0));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@end", arrayList0, 1520);
      instances0.add((Instance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 825.0, 1520);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list0);
      linkedList0.remove((Object) arrayList0);
      arrayList0.add((Object) linkedList0);
      linkedList0.retainAll(arrayList0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ejt486gS\"nq!`rbrS33", arrayList1, 69);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.spliterator();
      linkedList2.add("ejt486gS\"nq!`rbrS33");
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.add((Locale.LanguageRange) null);
      linkedList3.add((Locale.LanguageRange) null);
      linkedList3.add((Locale.LanguageRange) null);
      linkedList2.spliterator();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList2.forEach(consumer0);
      linkedList2.containsAll(linkedList0);
      linkedList2.add("");
      Attribute attribute0 = new Attribute("", linkedList2, 69);
      JRip jRip0 = new JRip();
      linkedList2.removeLast();
      linkedList2.removeLast();
      try { 
        jRip0.rulesetForOneClass(3, instances0, 237.87146, (-2361.61066441));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-110);
      jRip0.setDebug(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.setSearch((ASSearch) null);
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      try { 
        jRip0.rulesetForOneClass((byte)29, (Instances) null, 2, (byte)29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Locale.LanguageRange> function0 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Integer, Locale.LanguageRange> function1 = unaryOperator0.compose((Function<? super Integer, ? extends Locale.LanguageRange>) function0);
      ClassOrder classOrder0 = new ClassOrder();
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<InputStream, Locale.LanguageRange> function3 = (Function<InputStream, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super InputStream, ? extends Locale.LanguageRange>) function3);
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      stringArray0[0] = "): the dl = ";
      stringArray0[1] = "): the dl = ";
      Filter.runFilter(classOrder0, stringArray0);
      function1.apply((Integer) 0);
      Function<Object, Locale.LanguageRange> function5 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function5).apply(any());
      Function<Object, Locale.LanguageRange> function6 = unaryOperator1.compose((Function<? super Object, ? extends Locale.LanguageRange>) function5);
      Function<Object, RuleStats> function7 = (Function<Object, RuleStats>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Locale.LanguageRange, ? extends RuleStats>) function7);
      function6.apply(function1);
      unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) function6);
      unaryOperator1.compose((Function<? super Object, ? extends Locale.LanguageRange>) function6);
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(1, false, false);
      jRip0.setOptions((String[]) null);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers((Instance) null);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(139);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ":gkSCI^^iN");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      arrayList0.removeIf(predicate2);
      JRip jRip0 = new JRip();
      String string0 = jRip0.minNoTipText();
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      jRip0.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      Properties properties0 = new Properties();
      String[] stringArray0 = decisionTable0.getOptions();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5, intArray0, 48);
      jRip_RipperRule0.covers(binarySparseInstance0);
      StringReader stringReader0 = new StringReader("-p rannge\n");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties4);
      protectedProperties4.clone();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      Properties properties6 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      Properties properties7 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties0);
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"weka.attributeSelection.BestFirst -D 1 -N 5\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      Enumeration enumeration0 = new WordTokenizer();
      jRip0.toString();
      jRip0.setSeed((-700L));
      jRip0.setUsePruning(false);
      Enumeration enumeration1 = new WordTokenizer();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getConsequent();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 68;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = 92;
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-700L), intArray0, 0);
      jRip0.getUsePruning();
      // Undeclared exception!
      try { 
        binarySparseInstance0.classAttribute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.optimizationsTipText();
      String string0 = "Extract from:PhD hesis";
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      FileSystemHandling.shouldAllThrowIOExceptions();
      decisionTable1.getSearchSpec();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "weka.attributeSelection.BestFirst -D 1 -N 5";
      stringArray0[1] = "@data";
      stringArray0[2] = "weka.attributeSelection.BestFirst -D 1 -N 5";
      stringArray0[3] = "@relation";
      stringArray0[4] = ".bsi";
      stringArray0[5] = "\tNumber of non-improving nodes to\n\tconsider before terminating search.";
      stringArray0[6] = "@data";
      AbstractClassifier.runClassifier(decisionTable1, stringArray0);
      DecisionTable decisionTable2 = new DecisionTable();
      decisionTable2.setSearch((ASSearch) null);
      Random.setNextRandom(5);
      JRip jRip0 = new JRip();
      boolean boolean0 = jRip0.getCheckErrorRate();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertTrue(boolean0);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Locale.LanguageRange> function0 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ? extends Locale.LanguageRange>) function0);
      ClassOrder classOrder0 = new ClassOrder();
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, RuleStats> function2 = (Function<Object, RuleStats>) mock(Function.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Filter.runFilter(classOrder0, stringArray0);
      Function<Object, Locale.LanguageRange> function3 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Locale.LanguageRange> function4 = unaryOperator1.compose((Function<? super Object, ? extends Locale.LanguageRange>) function3);
      UnaryOperator<Locale.LanguageRange> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Locale.LanguageRange, ? extends RuleStats>) function2);
      Function<Locale.LanguageRange, Locale.LanguageRange> function5 = unaryOperator2.compose((Function<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) unaryOperator0);
      function5.compose((Function<? super Object, ? extends Locale.LanguageRange>) function4);
      JRip jRip0 = new JRip();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(0, true, false);
      simpleLogistic0.setUseCrossValidation(true);
      JRip jRip1 = new JRip();
      try { 
        jRip1.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5053262207700673
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nNo pruning: growing a rule ...", arrayList0, (byte)96);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.setConsequent((byte)96);
      JRip.RipperRule[] jRip_RipperRuleArray0 = new JRip.RipperRule[9];
      jRip_RipperRuleArray0[7] = jRip_RipperRule0;
      jRip_RipperRuleArray0[1] = jRip_RipperRule0;
      jRip_RipperRuleArray0[1] = jRip_RipperRule0;
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      jRip_RipperRuleArray0[3] = jRip_RipperRule2;
      jRip_RipperRuleArray0[4] = jRip_RipperRule1;
      jRip_RipperRuleArray0[5] = jRip_RipperRule0;
      jRip_RipperRuleArray0[6] = jRip_RipperRule1;
      jRip_RipperRuleArray0[7] = jRip_RipperRule1;
      jRip_RipperRuleArray0[8] = jRip_RipperRule0;
      jRip_RipperRule2.prune(instances0, false);
      instances0.toArray(jRip_RipperRuleArray0);
      JRip.RipperRule jRip_RipperRule3 = jRip0.new RipperRule();
      jRip_RipperRule0.grow(instances0);
      jRip_RipperRule0.hasAntds();
      assertEquals(96.0, jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.globalInfo();
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      linkedList0.toArray();
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      linkedList0.clear();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0, locale_FilteringMode0);
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList1.replaceAll(unaryOperator0);
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) list0, (Locale.FilteringMode) null);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList5, (Collection<String>) set0);
      JRip jRip0 = new JRip();
      double double0 = jRip0.getMinNo();
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, double0, 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8813008844369805
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Stacked generalization";
      stringArray0[1] = "Stacked generalization";
      stringArray0[2] = "Stacked generalization";
      stringArray0[3] = "Stacked generalization";
      stringArray0[4] = "Stacked generalization";
      stringArray0[5] = "Stacked generalization";
      stringArray0[6] = "Stacked generalization";
      stringArray0[7] = "Stacked generalization";
      stringArray0[8] = "Stacked generalization";
      jRip0.setOptions(stringArray0);
      Attribute attribute0 = new Attribute("Stacked generalization", (-1366));
      attribute0.copy("Stacked generalization");
      attribute0.toString();
      jRip0.setFolds(1);
      jRip0.setDebug(true);
      jRip0.enumerateMeasures();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.copy();
      jRip_NumericAntd0.getAttr();
      jRip0.setMinNo(1);
      jRip0.getUsePruning();
      jRip0.getOptions();
      jRip_NumericAntd0.getAccuRate();
      int int0 = jRip0.getFolds();
      assertEquals(1.0, jRip0.getMinNo(), 0.01);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.457961265137727
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nNo pruig: grwing a rule ...", arrayList0, (byte)96);
      arrayList0.iterator();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      arrayList0.listIterator();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      jRip_RipperRule2.hasAntds();
      JRip.RipperRule jRip_RipperRule3 = jRip0.new RipperRule();
      jRip_RipperRule3.setConsequent((byte)96);
      jRip_RipperRule3.prune(instances0, false);
      JRip.RipperRule[] jRip_RipperRuleArray0 = new JRip.RipperRule[7];
      JRip.RipperRule jRip_RipperRule4 = jRip0.new RipperRule();
      jRip_RipperRule2.size();
      jRip_RipperRuleArray0[0] = jRip_RipperRule4;
      jRip_RipperRuleArray0[1] = jRip_RipperRule1;
      jRip_RipperRuleArray0[2] = jRip_RipperRule0;
      jRip_RipperRuleArray0[3] = jRip_RipperRule2;
      JRip.RipperRule jRip_RipperRule5 = jRip0.new RipperRule();
      jRip_RipperRuleArray0[4] = jRip_RipperRule5;
      jRip_RipperRuleArray0[5] = jRip_RipperRule1;
      jRip_RipperRuleArray0[0] = jRip_RipperRule1;
      instances0.toArray(jRip_RipperRuleArray0);
      JRip.RipperRule jRip_RipperRule6 = jRip0.new RipperRule();
      jRip_RipperRule3.grow(instances0);
      jRip_RipperRule6.hasAntds();
      jRip0.getDebug();
      try { 
        jRip_RipperRule2.grow(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      int[] intArray0 = new int[0];
      decisionTable0.m_decisionFeatures = intArray0;
      decisionTable0.setSearch((ASSearch) null);
      JRip jRip0 = new JRip();
      String string0 = jRip0.debugTipText();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("Whether debug information is output to the console.", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      JRip jRip0 = new JRip();
      SparseInstance sparseInstance0 = new SparseInstance(139);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(":gkbnI^^iN", arrayList0, 139);
      jRip0.setOptimizations(139);
      instances0.add((Instance) sparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8136605216916037
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.iterator();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.listIterator();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      jRip_RipperRule1.hasAntds();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule3 = jRip1.new RipperRule();
      JRip.RipperRule jRip_RipperRule4 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule5 = jRip1.new RipperRule();
      JRip.RipperRule[] jRip_RipperRuleArray0 = new JRip.RipperRule[2];
      jRip_RipperRuleArray0[0] = jRip_RipperRule1;
      jRip_RipperRuleArray0[1] = jRip_RipperRule4;
      JRip.RipperRule jRip_RipperRule6 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule1.hasAntds();
      assertFalse(boolean0);
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      jRip0.listOptions();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      SparseInstance sparseInstance0 = new SparseInstance(139);
      String[] stringArray0 = new String[0];
      JRip.main(stringArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(":gkbnI^^iN", arrayList0, 139);
      instances0.add((Instance) sparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "H075{UeX=";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "DW|J&jI~PPf2";
      stringArray0[4] = "";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      String[] stringArray1 = new String[1];
      jRip0.getOptions();
      Reader reader0 = null;
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-839.793470945);
      doubleArray0[1] = (-839.793470945);
      int[] intArray0 = new int[3];
      intArray0[0] = 1470;
      intArray0[1] = 733;
      intArray0[2] = 40;
      SparseInstance sparseInstance0 = new SparseInstance((-839.793470945), doubleArray0, intArray0, 99);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int[] intArray0 = new int[5];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(121);
      binarySparseInstance0.setValue(1520, (double) 121);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      binarySparseInstance0.isMissing(1004);
      jRip_NumericAntd0.covers(sparseInstance0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      // Undeclared exception!
      try { 
        sparseInstance1.toStringNoWeight((-4));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getRevision();
      jRip0.getFolds();
      Attribute attribute0 = null;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.value = Double.NaN;
      jRip_NumericAntd0.accu = 994.976;
      jRip_NumericAntd0.getSplitPoint();
      jRip_NumericAntd0.copy();
      double double0 = 0.0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "no/li1";
      stringArray0[1] = "8118";
      stringArray0[2] = "}#";
      stringArray0[3] = "B?q.V6pAOSjI";
      stringArray0[4] = "8118";
      stringArray0[5] = "8118";
      try { 
        AbstractClassifier.forName("no/li1", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: no/li1
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      SparseInstance sparseInstance0 = new SparseInstance(139);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(":gkSCI^^iN", arrayList0, 139);
      instances0.add((Instance) sparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(121);
      binarySparseInstance0.setValue(1520, (double) 121);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)83;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("Y");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      jRip0.getCapabilities();
      Instances instances0 = new Instances("@attribute", arrayList0, 0);
      instances0.add((Instance) sparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 1520, (-1262.72));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[7];
      intArray0[0] = 4;
      intArray0[1] = 8;
      intArray0[2] = 5;
      intArray0[3] = 4;
      intArray0[4] = 68;
      intArray0[5] = (-1);
      intArray0[6] = 4;
      decisionTable0.m_decisionFeatures = intArray0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utils.log2 = (-1872.67);
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-49);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nNo pruig: growing a rule ...", arrayList0, (byte)96);
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply((Locale.LanguageRange) null);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      arrayList1.iterator();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      arrayList2.add((Locale.LanguageRange) null);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) arrayList3, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      linkedList0.replaceAll(unaryOperator0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.toArray();
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      environment0.getVariableNames();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) linkedList3, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ArrayList<Locale.LanguageRange> arrayList5 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList5, (Collection<String>) arrayList3, locale_FilteringMode2);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.getUnicodeLocaleKeys();
      ArrayList<String> arrayList6 = new ArrayList<String>();
      arrayList6.iterator();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList5, (Collection<String>) arrayList6);
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("@relation");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // @relation not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[1] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip jRip0 = new JRip();
      long long0 = jRip0.getSeed();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, long0);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.toArray();
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      unaryOperator0.apply((Locale.LanguageRange) null);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      arrayList0.iterator();
      arrayList0.add((Locale.LanguageRange) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList1, locale_FilteringMode0);
      linkedList3.add((Locale.LanguageRange) null);
      linkedList3.replaceAll(unaryOperator0);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList1.toArray();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set0, (Locale.FilteringMode) null);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode1);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.getUnicodeLocaleKeys();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      arrayList3.iterator();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) arrayList3);
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("nor");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nor not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.setUseIBk(true);
      Instances instances0 = decisionTable0.m_dtInstances;
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "@relation";
      stringArray0[4] = "$94#?D48KH";
      stringArray0[5] = ".bsi";
      decisionTable0.m_search = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[6] = ".bsi";
      Attribute attribute0 = new Attribute((String) null, 5);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.toString();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute((String) null);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals(" => null=", string0);
      
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties2 = (ProtectedProperties)protectedProperties0.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties11);
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      Properties properties6 = new Properties();
      ProtectedProperties protectedProperties15 = new ProtectedProperties(properties6);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties1);
      Properties properties7 = new Properties(protectedProperties2);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties19);
      ProtectedProperties protectedProperties21 = new ProtectedProperties(properties6);
      ProtectedProperties protectedProperties22 = new ProtectedProperties(protectedProperties15);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string1 = jRip_NominalAntd0.toString();
      assertFalse(jRip0.getDebug());
      assertEquals("null = ", string1);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[1];
      jRip0.getOptions();
      stringArray0[0] = "Gd";
      Properties properties0 = new Properties();
      StringReader stringReader0 = new StringReader("Gd");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0, 5);
      StringReader stringReader1 = new StringReader("");
      properties0.entrySet();
      BufferedReader bufferedReader2 = new BufferedReader(bufferedReader1, 70);
      BufferedReader bufferedReader3 = new BufferedReader(bufferedReader2, 70);
      BufferedReader bufferedReader4 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader5 = new BufferedReader(bufferedReader0);
      BufferedReader bufferedReader6 = new BufferedReader(stringReader1, 70);
      BufferedReader bufferedReader7 = new BufferedReader(stringReader0, 5);
      StringReader stringReader2 = new StringReader("Gd");
      stringReader2.read();
      StringReader stringReader3 = new StringReader("");
      BufferedReader bufferedReader8 = new BufferedReader(bufferedReader2);
      BufferedReader bufferedReader9 = new BufferedReader(bufferedReader2);
      StringReader stringReader4 = new StringReader("Gd");
      BufferedReader bufferedReader10 = new BufferedReader(bufferedReader9, 4);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", (-2315));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.copy();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("\tThe seed of randomization\n\t(Default: 1)");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JRip jRip0 = new JRip();
      SparseInstance sparseInstance0 = new SparseInstance(139);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertNotSame(jRip_RipperRule1, jRip_RipperRule0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties3);
      Properties properties6 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties4);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties0);
      protectedProperties3.getOrDefault(properties4, protectedProperties7);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties6);
      Properties properties7 = new Properties();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties7);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties12);
      Properties properties8 = new Properties(properties3);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties11);
      String string0 = jRip0.foldsTipText();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.0421918905228877
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.iterator();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      arrayList0.listIterator();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      jRip_RipperRule2.hasAntds();
      JRip.RipperRule jRip_RipperRule3 = jRip0.new RipperRule();
      jRip_RipperRule3.setConsequent((byte)96);
      assertEquals(96.0, jRip_RipperRule3.getConsequent(), 0.01);
      
      JRip.RipperRule[] jRip_RipperRuleArray0 = new JRip.RipperRule[7];
      JRip.RipperRule jRip_RipperRule4 = jRip0.new RipperRule();
      jRip_RipperRuleArray0[0] = jRip_RipperRule4;
      jRip_RipperRuleArray0[1] = jRip_RipperRule1;
      jRip_RipperRuleArray0[2] = jRip_RipperRule0;
      jRip_RipperRuleArray0[3] = jRip_RipperRule2;
      JRip.RipperRule jRip_RipperRule5 = jRip0.new RipperRule();
      jRip_RipperRuleArray0[5] = jRip_RipperRule1;
      jRip_RipperRuleArray0[6] = jRip_RipperRule1;
      JRip.RipperRule jRip_RipperRule6 = jRip0.new RipperRule();
      jRip_RipperRule6.hasAntds();
      boolean boolean0 = jRip0.getUsePruning();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute((String) null);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.toString(attribute0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties2 = (ProtectedProperties)protectedProperties0.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      RuleStats ruleStats0 = new RuleStats();
      protectedProperties5.getOrDefault(jRip_RipperRule1, ruleStats0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(properties0);
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties17 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties14);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties17);
      Properties properties5 = new Properties(protectedProperties2);
      ProtectedProperties protectedProperties21 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties22 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties23 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties24 = new ProtectedProperties(protectedProperties22);
      ProtectedProperties protectedProperties25 = new ProtectedProperties(protectedProperties9);
      assertTrue(protectedProperties25.equals((Object)protectedProperties18));
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getConsequent();
      jRip_RipperRule0.hasAntds();
      Properties properties0 = new Properties();
      properties0.setProperty("weka/core/Capabilities.props", "/2ITJMQ{}E9WfH}.Q");
      int int0 = 125;
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = null;
      try {
        protectedProperties1 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      linkedList0.toArray();
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      linkedList0.removeLastOccurrence(unaryOperator0);
      linkedList0.clear();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0, locale_FilteringMode0);
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList1.replaceAll(unaryOperator0);
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list0, locale_FilteringMode1);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = locale0.stripExtensions();
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList5, (Collection<String>) set0);
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(112);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }
}
