/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 04:32:46 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.Stopwords;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.stemmers.IteratedLovinsStemmer;
import weka.core.stemmers.LovinsStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.WordTokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3552731859488665
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, false);
      byteArray0[0] = (byte)97;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Attribute attribute0 = new Attribute("Q:f~ok&Do7TMS,#w", "*", 1079);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q3ZR1=<(-f3I^j}");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_stemmer = null;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.230265232675139
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = new Capabilities(naiveBayesMultinomialText0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      capabilities0.getAttributeCapabilities();
      Capabilities.forInstances(instances0);
      capabilities0.getAttributeCapabilities();
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", "", (-2));
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      linkedList0.add(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      linkedList0.add(attribute0);
      testInstances0.setMultiInstance(true);
      Instances.test(testInstances0.DEFAULT_WORDS);
      IBk iBk0 = new IBk();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      Capabilities.forInstances(instances0);
      DenseInstance denseInstance0 = new DenseInstance(0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      DenseInstance denseInstance1 = new DenseInstance(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(697);
      SparseInstance sparseInstance1 = new SparseInstance(denseInstance1);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) binarySparseInstance1);
      binarySparseInstance0.stringValue(attribute0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      double double0 = naiveBayesMultinomialText0.m_minWordP;
      assertEquals(3.0, double0, 0.01);
      
      double[] doubleArray0 = naiveBayesMultinomialText0.distributionForInstance(sparseInstance1);
      assertArrayEquals(new double[] {0.5454545454545454, 0.4545454545454546}, doubleArray0, 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.738840717855686
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)97;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SgHV]@2UpXC");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.getOptions();
      System.setCurrentTimeMillis((-503L));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.152417081463079
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = new Capabilities(naiveBayesMultinomialText0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities.forInstances(instances0);
      Capabilities.forInstances(instances0);
      capabilities0.getAttributeCapabilities();
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", "", (-2));
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      linkedList0.add(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      naiveBayesMultinomialText0.m_normalize = true;
      linkedList0.add(attribute0);
      testInstances0.setMultiInstance(true);
      Instances.test(testInstances0.DEFAULT_WORDS);
      IBk iBk0 = new IBk();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      DenseInstance denseInstance0 = new DenseInstance(0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "binary-atts");
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      DenseInstance denseInstance1 = new DenseInstance(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(697);
      SparseInstance sparseInstance1 = new SparseInstance(denseInstance1);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) binarySparseInstance1);
      binarySparseInstance0.stringValue(attribute0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      try { 
        naiveBayesMultinomialText0.classifyInstance(sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7646308653001805
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_wordFrequencies = false;
      naiveBayesMultinomialText0.globalInfo();
      System.setCurrentTimeMillis((-2910L));
      naiveBayesMultinomialText0.getRevision();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(5215.09, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BallNode ballNode0 = new BallNode((-55), 1114, 1, sparseInstance1, (-55));
      Instances instances0 = naiveBayesMultinomialText0.m_data;
      Instance instance0 = BallNode.calcPivot(ballNode0, ballNode0, (Instances) null);
      naiveBayesMultinomialText0.tokenizeInstance(instance0, false);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3142487148788504
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1950745878335933
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis(2784L);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.setUseStopList(false);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("");
      snowballStemmer0.getStemmer();
      snowballStemmer0.listOptions();
      snowballStemmer0.toString();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.m_wordFrequencies = false;
      Random.setNextRandom(2570);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.LNormTipText();
      System.setCurrentTimeMillis(2784L);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.stemmerTipText();
      MockFile mockFile0 = new MockFile("");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.getTokenizer();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.485215761775983
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getPeriodicPruning();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = "";
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      stringArray0[2] = "RRNI Tb5^:>},zuH";
      stringArray0[3] = "";
      stringArray0[4] = "&quot;";
      stringArray0[5] = "";
      stringArray0[6] = "-stopwords <file>";
      stringArray0[7] = "_Ix#PF>SrVjeilwsV@a";
      stringArray0[8] = "-stemmer";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -stemmer option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.LNormTipText();
      Random.setNextRandom((-523));
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.17057327463808
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Random.setNextRandom((-210));
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm((-210));
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.toString();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = new Capabilities(inputMappedClassifier0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("If true then document length is normalized according to the settings for norm and lnorm");
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 200003;
      intArray0[2] = 116;
      intArray0[3] = (-1);
      intArray0[4] = (-210);
      intArray0[5] = (-1);
      intArray0[6] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2250.0), intArray0, (-210));
      instances0.add((Instance) binarySparseInstance0);
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      naiveBayesMultinomialText0.buildClassifier(instances1);
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.getOptions();
      assertEquals((-210.0), naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0907566298325277
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      capabilities1.getAttributeCapabilities();
      instances0.indexOf(capabilities1);
      Attribute attribute0 = new Attribute("\n\nOdds Ratios...\n", " ", (-2));
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      predicate3.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      predicate4.or(predicate3);
      predicate0.or(predicate4);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.removeIf(predicate1);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("string", arrayList1, 3);
      IBk iBk0 = new IBk();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      DenseInstance denseInstance0 = new DenseInstance(0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(8);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      binarySparseInstance0.stringValue(attribute0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance2 = new DenseInstance(0, doubleArray0);
      try { 
        naiveBayesMultinomialText0.classifyInstance(denseInstance2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1966049048742238
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      capabilities1.getAttributeCapabilities();
      SystemInUtil.addInputLine("");
      Attribute attribute0 = new Attribute("\n\nOdds Ratios...\n", " ", (-2));
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      linkedList0.add(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.addAll((Collection<? extends Attribute>) linkedList0);
      Instances instances1 = new Instances("E`D", arrayList0, 4);
      instances1.clear();
      naiveBayesMultinomialText0.setUseStopList(true);
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      technicalInformationHandlerJavadoc0.listOptions();
      attribute0.equals(technicalInformationHandlerJavadoc0);
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1768.431);
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      Instances instances2 = iBk0.pruneToK(instances0, doubleArray0, 4);
      instances2.renameAttribute(4, "");
      naiveBayesMultinomialText0.buildClassifier(instances2);
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.toString();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.486856158507856
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      capabilities1.getOtherCapabilities();
      naiveBayesMultinomialText0.getCapabilities();
      capabilities1.disableAllAttributeDependencies();
      instances0.indexOf(capabilities1);
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      predicate2.or(predicate1);
      predicate0.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate0);
      predicate0.or(predicate4);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate0);
      predicate0.and(predicate5);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Consumer<Attribute> consumer0 = (Consumer<Attribute>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      predicate1.test(predicate3);
      arrayList0.listIterator();
      arrayList0.forEach(consumer0);
      arrayList0.removeIf(predicate1);
      IBk iBk0 = new IBk();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      assertEquals(0, capabilities0.getMinimumNumberInstances());
      
      String string0 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string0);
      
      String string1 = naiveBayesMultinomialText0.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string1);
      
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.LNormTipText();
      String string2 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string2);
      
      String string3 = naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string3);
      
      String string4 = naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals("Whether to convert all tokens to lowercase", string4);
      
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      String string5 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string5);
      
      String string6 = naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals("The tokenizing algorithm to use on the strings.", string6);
      
      naiveBayesMultinomialText0.LNormTipText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2854600626943533
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tThe number of date attributes (default 1).");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.m_periodicP = 382;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      double[] doubleArray0 = new double[1];
      naiveBayesMultinomialText0.m_lowercaseTokens = false;
      doubleArray0[0] = 0.0;
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      naiveBayesMultinomialText0.m_lnorm = 0.0;
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.listOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.stemmerTipText();
      System.setCurrentTimeMillis(65L);
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals(382, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9149492627901186
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setPeriodicPruning(645);
      naiveBayesMultinomialText0.m_t = (-4.57826535);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      naiveBayesMultinomialText0.setUseStopList(true);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.894370410034422
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = new Capabilities(naiveBayesMultinomialText0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Attribute attribute0 = new Attribute("M", "M");
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      linkedList0.add(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      linkedList0.clone();
      arrayList0.addAll((Collection<? extends Attribute>) linkedList0);
      Instances instances1 = new Instances("E`D", arrayList0, 4);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      binarySparseInstance0.setValue(0, (double) 2);
      instances1.add((Instance) binarySparseInstance0);
      instances1.add((Instance) binarySparseInstance0);
      naiveBayesMultinomialText0.setUseStopList(true);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      binarySparseInstance0.s_numericAfterDecimalPoint = 0;
      IBk iBk0 = new IBk();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.useStopListTipText();
      System.setCurrentTimeMillis((-1L));
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      System.setCurrentTimeMillis(1092L);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText1.normalizeDocLengthTipText();
      naiveBayesMultinomialText1.lowercaseTokensTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.654408572990075
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-nostars";
      stringArray0[1] = "2aP32,GNMQXL6";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      Capabilities capabilities0 = new Capabilities(naiveBayesMultinomialText0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      capabilities1.getAttributeCapabilities();
      Attribute attribute0 = new Attribute("\n\nOdds Ratios...\n", " ", (-2));
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      linkedList0.add(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.addAll((Collection<? extends Attribute>) linkedList0);
      naiveBayesMultinomialText0.setPeriodicPruning(4);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.pruneDictionary();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.757637858307174
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 64.0;
      doubleArray0[1] = (-761.76294);
      doubleArray0[2] = (-1192.79533532667);
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 1512.59351972225;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-82.042386);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      stringArray0[0] = "weka.classifiers.trees.J48";
      stringArray0[1] = "  \tresult[i] = inst.value(i);\n";
      stringArray0[2] = "J,35+*;uS.";
      stringArray0[3] = "-lnorm";
      stringArray0[4] = "D)Dn";
      stringArray0[5] = "-tokenizer <spec>";
      stringArray0[6] = "";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8403682958951655
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-nostars";
      stringArray0[1] = "2aP32,GNMQXL6";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      Capabilities capabilities0 = new Capabilities(naiveBayesMultinomialText0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      capabilities1.getAttributeCapabilities();
      Attribute attribute0 = new Attribute("\n\nOdds Ratios...\n", " ", (-2));
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      linkedList0.add(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.addAll((Collection<? extends Attribute>) linkedList0);
      Instances instances1 = new Instances("E`D", arrayList0, 4);
      instances1.clear();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      attribute0.equals(technicalInformationHandlerJavadoc0);
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1768.431);
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      Instances instances2 = iBk0.pruneToK(instances0, doubleArray0, 4);
      naiveBayesMultinomialText0.buildClassifier(instances2);
      naiveBayesMultinomialText0.setStopwords((File) null);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LWL lWL0 = new LWL();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(lWL0);
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Capabilities.forInstances(instances0);
      Attribute attribute0 = new Attribute("", "", 1);
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      linkedList0.add(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.addAll((Collection<? extends Attribute>) linkedList0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate0);
      arrayList0.removeIf(predicate4);
      Instances instances1 = new Instances("@relation", arrayList0, 0);
      IBk iBk0 = new IBk();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle numeric class!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.656788699915355
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      Capabilities capabilities2 = capabilities1.getOtherCapabilities();
      naiveBayesMultinomialText0.getCapabilities();
      instances0.indexOf(capabilities1);
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", " ", (-2));
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate0.or(predicate2);
      predicate2.or(predicate1);
      predicate0.negate();
      Predicate.isEqual((Object) capabilities2);
      Predicate<Object> predicate3 = predicate0.and(predicate0);
      predicate0.or(predicate3);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.listIterator();
      arrayList0.removeIf(predicate1);
      IBk iBk0 = new IBk();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      System.setCurrentTimeMillis(2486L);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      File file1 = MockFile.createTempFile("The norm of the instances after normalization.", "", file0);
      naiveBayesMultinomialText0.setStopwords(file1);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = new Capabilities(naiveBayesMultinomialText0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      capabilities1.getAttributeCapabilities();
      Attribute attribute0 = new Attribute("\n\nOdds Ratios...\n", " ", (-2));
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances.test(testInstances0.DEFAULT_WORDS);
      arrayList0.addAll((Collection<? extends Attribute>) linkedList0);
      Instances instances1 = new Instances("because", arrayList0, 2);
      IBk iBk0 = new IBk();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5602573656031233
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-nostars";
      stringArray0[1] = "2aP32,GNMQXL6";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      Capabilities capabilities0 = new Capabilities(naiveBayesMultinomialText0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      capabilities1.getAttributeCapabilities();
      Attribute attribute0 = new Attribute("\n\nOdds Ratios...\n", " ", (-2));
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      linkedList0.add(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.addAll((Collection<? extends Attribute>) linkedList0);
      Instances instances1 = new Instances("E`D", arrayList0, 4);
      instances1.clear();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      attribute0.equals(technicalInformationHandlerJavadoc0);
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      double[] doubleArray1 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(Double.NEGATIVE_INFINITY, doubleArray1);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2698986887396755
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, false);
      byteArray0[0] = (byte)97;
      FileSystemHandling.appendLineToFile(evoSuiteFile1, (String) null);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = "K_<\\uV";
      Attribute attribute0 = new Attribute(string0, "*", 612);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "integer");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      System.setCurrentTimeMillis((-1L));
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(12, stringArray0.length);
      
      System.setCurrentTimeMillis(2L);
      File file0 = naiveBayesMultinomialText0.getStopwords();
      assertTrue(file0.isAbsolute());
      
      naiveBayesMultinomialText0.getTokenizer();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = new Capabilities(naiveBayesMultinomialText0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      capabilities1.getAttributeCapabilities();
      Attribute attribute0 = new Attribute("@data", (String) null, 1529);
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      linkedList0.add(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances.test(testInstances0.DEFAULT_WORDS);
      arrayList0.addAll((Collection<? extends Attribute>) linkedList0);
      Instances instances1 = new Instances("-N <value>", arrayList0, 8);
      IBk iBk0 = new IBk();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer2 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer3 = new IteratedLovinsStemmer();
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "f<g+Y=]\"yhN AN@";
      stringArray0[1] = "";
      stringArray0[0] = "";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 2.0;
      DenseInstance denseInstance0 = new DenseInstance((-1.0), doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(denseInstance1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SparseInstance sparseInstance2 = new SparseInstance((Instance) sparseInstance0);
      double double0 = new Integer(0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(sparseInstance2, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2647.156824855;
      doubleArray0[2] = 2647.156824855;
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      Instance instance0 = null;
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.25;
      doubleArray0[1] = 0.25;
      doubleArray0[2] = 1883.9;
      doubleArray0[3] = 0.25;
      doubleArray0[4] = 0.25;
      doubleArray0[5] = 0.25;
      doubleArray0[6] = 0.25;
      doubleArray0[7] = 0.25;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.25, doubleArray0);
      try { 
        naiveBayesMultinomialText0.updateClassifier(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.399404232382076
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      boolean boolean0 = naiveBayesMultinomialText0.m_normalize;
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      double double0 = naiveBayesMultinomialText0.m_leplace;
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-385.3170269858737);
      doubleArray0[1] = 1.0;
      DenseInstance denseInstance0 = new DenseInstance(1694.9923928701, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      DenseInstance denseInstance1 = new DenseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1044);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance1.enumerateAttributes();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2527.1324;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3.0;
      doubleArray0[4] = (-3211.5519918025157);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\"pbF3/wf|^z?v, ";
      stringArray0[1] = "\"pbF3/wf|^z?v, ";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      serializedClassifier1.getModelFile();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      IBk iBk0 = new IBk(193);
      Instances instances0 = naiveBayesMultinomialText0.m_data;
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      LinearNNSearch linearNNSearch1 = new LinearNNSearch();
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6211272758470872
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Attribute attribute0 = new Attribute("M", "M");
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      linkedList0.add(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      linkedList0.clone();
      arrayList0.addAll((Collection<? extends Attribute>) linkedList0);
      Instances instances0 = new Instances("E`D", arrayList0, 4);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      binarySparseInstance0.setValue(0, (double) 2);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      naiveBayesMultinomialText0.setUseStopList(true);
      binarySparseInstance0.s_numericAfterDecimalPoint = 0;
      DenseInstance denseInstance0 = new DenseInstance(1);
      denseInstance0.value(attribute0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      binarySparseInstance1.stringValue(attribute0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance1);
      binarySparseInstance3.stringValue(attribute0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      try { 
        naiveBayesMultinomialText0.classifyInstance(binarySparseInstance4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9149492627901186
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, true);
      byteArray0[0] = (byte)97;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q3ZR1=<(-f3I^j}");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.pruneDictionary();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.getOptions();
      System.setCurrentTimeMillis(1211L);
      MockFile mockFile0 = new MockFile("TvA");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2527.1324;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3.0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      doubleArray0[0] = (-3210.502856277135);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\"pbF3/wf|^z?v, ";
      stringArray0[1] = "`/VgE`_D;-H]Sn";
      stringArray0[1] = "";
      stringArray0[3] = "9M@B\"fp+G";
      stringArray0[4] = "q5! ;lwx2-=6WR)";
      stringArray0[5] = "";
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 1);
      File file0 = serializedClassifier0.getModelFile();
      file0.delete();
      naiveBayesMultinomialText0.setStopwords(file0);
      String string0 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string0);
      
      File file1 = naiveBayesMultinomialText0.getStopwords();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertSame(file1, file0);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3478760515116748
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      MockFile mockFile0 = new MockFile("If true then document length is normalized according to the settings for norm and lnorm", "If true then document length is normalized according to the settings for norm and lnorm");
      mockFile0.toURI();
      mockFile0.setExecutable(false, false);
      mockFile0.getAbsoluteFile();
      mockFile0.setWritable(false, true);
      mockFile0.toPath();
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.getCapabilities();
      Stopwords stopwords0 = new Stopwords();
      stopwords0.elements();
      naiveBayesMultinomialText0.m_stopwords = stopwords0;
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.m_lnorm = 1407.6620807621985;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.periodicPruningTipText();
      Stopwords.main(stringArray0);
      assertEquals(1407.6620807621985, naiveBayesMultinomialText0.getLNorm(), 0.01);
      
      naiveBayesMultinomialText0.setLNorm(0.0);
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.getStopwords();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.1590695284682866
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_wordFrequencies = false;
      naiveBayesMultinomialText0.setDebug(true);
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.m_leplace = 1.0E-5;
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      wordTokenizer0.getRevision();
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      naiveBayesMultinomialText0.setOptions((String[]) null);
      naiveBayesMultinomialText0.m_norm = 0.0;
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      wordTokenizer0.getOptions();
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, (String[]) null);
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      naiveBayesMultinomialText0.getCapabilities();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      
      naiveBayesMultinomialText0.m_lnorm = 1.0E-5;
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getPeriodicPruning();
      String string0 = naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals("The tokenizing algorithm to use on the strings.", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 2.0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-668);
      intArray0[2] = 76;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = (-1767);
      SparseInstance sparseInstance0 = new SparseInstance(2.0, doubleArray0, intArray0, 109);
      sparseInstance0.setWeight(4.9E-324);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 1.0E-8;
      doubleArray0[3] = 0.2;
      doubleArray0[4] = 0.2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      try { 
        naiveBayesMultinomialText0.classifyInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = new Capabilities(naiveBayesMultinomialText0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Attribute attribute0 = new Attribute("M", "M");
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      linkedList0.add(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      linkedList0.clone();
      arrayList0.addAll((Collection<? extends Attribute>) linkedList0);
      Instances instances0 = new Instances("E`D", arrayList0, 4);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      binarySparseInstance0.setValue(0, (double) 2);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      naiveBayesMultinomialText0.setUseStopList(true);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      binarySparseInstance0.s_numericAfterDecimalPoint = 0;
      doubleArray0[2] = (-1768.4);
      DenseInstance denseInstance0 = new DenseInstance(1);
      denseInstance0.value(attribute0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      binarySparseInstance1.stringValue(attribute0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance1);
      binarySparseInstance3.stringValue(attribute0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      IBk iBk0 = new IBk(193);
      Instances instances0 = naiveBayesMultinomialText0.m_data;
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      LinearNNSearch linearNNSearch1 = new LinearNNSearch();
      DenseInstance denseInstance0 = new DenseInstance(1, (double[]) null);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.269394275120508
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)97;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = "K_<\\uV";
      Attribute attribute0 = new Attribute(string0, "*", 612);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      IBk iBk0 = new IBk();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.m_useStopList = true;
      System.setCurrentTimeMillis(1L);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      System.setCurrentTimeMillis(2L);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.4267173502315558
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer2 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer3 = new IteratedLovinsStemmer();
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "f<g+Y=]\"yhN AN@";
      stringArray0[1] = "";
      stringArray0[2] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      File file0 = sGDText0.getStopwords();
      naiveBayesMultinomialText0.m_stopwordsFile = file0;
      boolean boolean0 = true;
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.getStopwords();
      KDTree kDTree0 = new KDTree();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      try { 
        inputMappedClassifier0.getMappedClassIndex();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // [InputMappedClassifier] No model available!
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.4593576239678994
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer2 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer3 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer4 = new IteratedLovinsStemmer();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer4);
      String[] stringArray0 = new String[3];
      stringArray0[2] = "f<g+Y=]\"yhN AN@";
      stringArray0[1] = "";
      naiveBayesMultinomialText0.m_leplace = 717.03458343392;
      stringArray0[0] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.2698986887396755
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = new Capabilities(naiveBayesMultinomialText0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities.forInstances(instances0);
      Capabilities.forInstances(instances0);
      capabilities0.getAttributeCapabilities();
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", "", (-2));
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      Attribute.main(testInstances0.DEFAULT_WORDS);
      linkedList0.add(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      naiveBayesMultinomialText0.m_normalize = true;
      linkedList0.add(attribute0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.setOptions(stringArray0);
      Random.setNextRandom(4);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.269394275120508
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, false);
      byteArray0[0] = (byte)97;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile2, "cU9Ys");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Attribute attribute0 = new Attribute("Q:f~ok&Do7TMS,#w", "*", 1079);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q3ZR1=<(-f3I^j}");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.620252257570829
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = new Capabilities(naiveBayesMultinomialText0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      capabilities1.getAttributeCapabilities();
      Attribute attribute0 = new Attribute("\n\nOdds Ratios...\n", " ", (-2));
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      linkedList0.add(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.addAll((Collection<? extends Attribute>) linkedList0);
      Instances instances1 = new Instances("E`D", arrayList0, 4);
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 2;
      iBk0.pruneToK(instances1, doubleArray0, (-1469));
      naiveBayesMultinomialText0.buildClassifier(instances0);
      String string0 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string0);
      
      String string1 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string1);
      
      String string2 = naiveBayesMultinomialText0.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string2);
      
      System.setCurrentTimeMillis((-1L));
      String string3 = naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string3);
      
      String string4 = naiveBayesMultinomialText0.globalInfo();
      assertEquals("Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", string4);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      predicate3.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      predicate4.negate();
      predicate0.or(predicate4);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      arrayList0.removeIf(predicate1);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      IBk iBk0 = new IBk();
      System.setCurrentTimeMillis(1358L);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double double0 = naiveBayesMultinomialText0.m_t;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getData();
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.884811922108438
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.setMinWordFrequency(5079.5745474791);
      naiveBayesMultinomialText0.setOptions((String[]) null);
      naiveBayesMultinomialText0.getCapabilities();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 5079.5745474791;
      SparseInstance sparseInstance0 = new SparseInstance(3.0, doubleArray0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.setMinWordFrequency((-1.0));
      assertEquals((-1.0), naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.403682677190002
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      capabilities1.getAttributeCapabilities();
      instances0.indexOf(capabilities1);
      Attribute attribute0 = new Attribute("\n\nOdds Ratios...\n", " ", (-2));
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      predicate3.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      predicate0.or(predicate5);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.removeIf(predicate1);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("string", arrayList1, 3);
      IBk iBk0 = new IBk();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      String string0 = naiveBayesMultinomialText0.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string0);
      
      System.setCurrentTimeMillis(1358L);
      String string1 = naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string1);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.normTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.setLowercaseTokens(false);
      String string2 = naiveBayesMultinomialText1.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string2);
      
      String string3 = naiveBayesMultinomialText0.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t9.0\nclass2\t4.0\nclass3\t7.0\nclass4\t4.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\tclass3\tclass4\t\nover\t2.718281828459045\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\nthe\t7.38905609893065\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\nThe\t7.38905609893065\t2.718281828459045\t7.38905609893065\t2.718281828459045\t\nquick\t7.38905609893065\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\nlazy\t7.38905609893065\t2.718281828459045\t7.38905609893065\t2.718281828459045\t\njumps\t20.085536923187668\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\nbrown\t7.38905609893065\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\ndog\t7.38905609893065\t2.718281828459045\t7.38905609893065\t2.718281828459045\t\nfox\t2.718281828459045\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\n", string3);
      
      naiveBayesMultinomialText2.buildClassifier(instances0);
      assertEquals(0, capabilities0.getMinimumNumberInstances());
      assertFalse(naiveBayesMultinomialText2.getLowercaseTokens());
      
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.9483057456746122
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = new Capabilities(naiveBayesMultinomialText0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      capabilities0.getAttributeCapabilities();
      Attribute attribute0 = new Attribute("@data", " ", (-2));
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      linkedList0.add(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String[] stringArray0 = new String[8];
      capabilities0.toSource("VW\"", (-2));
      stringArray0[0] = "relational";
      linkedList0.add(attribute0);
      stringArray0[2] = "";
      testInstances0.setMultiInstance(true);
      stringArray0[3] = "@attribute";
      stringArray0[4] = "string";
      stringArray0[5] = "relational";
      stringArray0[7] = "numeric";
      Instances.test(stringArray0);
      IBk iBk0 = new IBk();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      System.setCurrentTimeMillis(1028L);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      System.setCurrentTimeMillis(4);
      naiveBayesMultinomialText0.LNormTipText();
      String string0 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string0);
      
      String string1 = naiveBayesMultinomialText0.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t11.0\nclass2\t11.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\t\n", string1);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.normalizeDocLengthTipText();
      naiveBayesMultinomialText1.lowercaseTokensTipText();
      naiveBayesMultinomialText1.stemmerTipText();
      naiveBayesMultinomialText1.stopwordsTipText();
      naiveBayesMultinomialText1.stopwordsTipText();
      naiveBayesMultinomialText1.getStopwords();
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText1.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText1.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText1.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2527.1324;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2527.1324;
      doubleArray0[4] = (-3211.5519918025157);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "kY+lYwR/Yaf ^";
      stringArray0[1] = "The stemming algorithm to use on the words.";
      stringArray0[2] = "T:jz";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "\tWhether NOT use pruning\n\t(default: use pruning)";
      serializedClassifier0.setOptions(stringArray0);
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      AbstractClassifier.makeCopy(serializedClassifier0);
      serializedClassifier1.getModelFile();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText1.toString();
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      
      naiveBayesMultinomialText0.listOptions();
      double double0 = naiveBayesMultinomialText1.getLNorm();
      assertEquals(2.0, double0, 0.01);
      assertEquals(0, naiveBayesMultinomialText1.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText1.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText1.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.884811922108438
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.setMinWordFrequency(5079.5745474791);
      naiveBayesMultinomialText0.setOptions((String[]) null);
      naiveBayesMultinomialText0.getCapabilities();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 5079.5745474791;
      doubleArray0[3] = 5079.5745474791;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.setMinWordFrequency((-1.0));
      assertEquals((-1.0), naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, false);
      byteArray0[0] = (byte)97;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Attribute attribute0 = new Attribute("Q:f~ok&Do7TMS,#w", "*", 1079);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q3ZR1=<(-f3I^j}");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.setLNorm(2907.996);
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals(2907.996, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.269394275120508
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, false);
      byteArray0[0] = (byte)97;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = "K_<\\uV";
      Attribute attribute0 = new Attribute(string0, "*", 612);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_leplace = (double) (byte)97;
      naiveBayesMultinomialText0.m_lnorm = (double) 1;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      System.setCurrentTimeMillis(1L);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      System.setCurrentTimeMillis(2L);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getModelFile();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "6[#,;i|G`F(VH2_r";
      stringArray0[1] = "\tSpecify L-norm to use (default 2.0)";
      stringArray0[2] = "\tThe Capabilities handler to base the handling on.\n\tThe other parameters can be used to override the ones\n\tdetermined from the handler. Additional parameters for\n\thandler can be passed on after the '--'.\n\tEither '-W' or '-t' can be used.";
      stringArray0[3] = "~bVN9V2E+J5M}JUGX";
      stringArray0[4] = "d4N$.?c8xnIzX7He/&";
      stringArray0[5] = "sensible";
      stringArray0[6] = "";
      stringArray0[7] = "measureMDLScore";
      stringArray0[8] = "-W";
      NaiveBayesMultinomialText.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.534059615514255
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer1 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer2 = new IteratedLovinsStemmer();
      IteratedLovinsStemmer iteratedLovinsStemmer3 = new IteratedLovinsStemmer();
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      naiveBayesMultinomialText0.setTokenizer(nGramTokenizer0);
      naiveBayesMultinomialText0.setOptions((String[]) null);
      System.setCurrentTimeMillis(362L);
      naiveBayesMultinomialText0.getTokenizer();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }
}
