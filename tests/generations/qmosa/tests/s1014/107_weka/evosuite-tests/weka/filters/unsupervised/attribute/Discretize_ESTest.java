/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 04:07:10 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SystemInUtil.addInputLine("-B <num>");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("\nClasses:\n");
      discretize0.m_MakeBinary = true;
      int int0 = (-1431655765);
      discretize0.m_NumBins = 752;
      discretize0.getCutPoints((-1431655765));
      discretize0.getCapabilities();
      SystemInUtil.addInputLine("weka/core/Capabilities.props");
      discretize0.setInvertSelection(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)79;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      discretize0.useEqualFrequencyTipText();
      discretize0.m_IgnoreClass = true;
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.PotentialClassIgnorer", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1316114299232787
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("ce*D~", linkedList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super SparseInstance, ?>) unaryOperator2);
      Function<Object, String> function1 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function0);
      Function<String, SparseInstance> function2 = (Function<String, SparseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends SparseInstance>) function2);
      function1.andThen((Function<? super String, ?>) unaryOperator0);
      function1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      linkedList0.add("relational");
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2);
      Locale locale0 = Locale.KOREAN;
      locale0.getDisplayLanguage();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("_WGs5}rxP%6_9z", arrayList1, 4);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[1];
      arrayList1.add(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(59, doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9684766170165764
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList1 = new LinkedList<Attribute>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("0", linkedList2);
      arrayList0.add(attribute0);
      Properties properties0 = new Properties();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super SparseInstance, ?>) unaryOperator0);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, SparseInstance> function3 = (Function<Object, SparseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, SparseInstance> function4 = unaryOperator1.andThen((Function<? super Object, ? extends SparseInstance>) function3);
      Function<Object, SparseInstance> function5 = unaryOperator0.andThen((Function<? super Object, ? extends SparseInstance>) function4);
      function1.andThen((Function<? super String, ? extends SparseInstance>) function5);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList2.add("date");
      Instances instances0 = new Instances("5U3_n", arrayList0, 366);
      SystemInUtil.addInputLine("numeric");
      Instances instances1 = new Instances(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      discretize0.setInputFormat(instances1);
      discretize0.getOptions();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      boolean boolean0 = discretize0.input((Instance) null);
      assertFalse(discretize0.isNewBatch());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0660708377143053
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.JAPAN;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale locale2 = Locale.GERMANY;
      Locale locale3 = Locale.US;
      Locale locale4 = Locale.ITALIAN;
      locale4.toLanguageTag();
      locale0.getDisplayCountry(locale0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      locale1.getExtensionKeys();
      locale1.getExtensionKeys();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) linkedList0, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) linkedList0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale5 = Locale.TRADITIONAL_CHINESE;
      locale0.clone();
      Set<String> set1 = locale5.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set1);
      Attribute attribute0 = new Attribute("\u4E2D\u56FD");
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      locale0.getDisplayLanguage();
      arrayList2.add(attribute0);
      Instances instances0 = new Instances("_WGs5}rxP%6_9z", arrayList2, 40);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1063.8), doubleArray0);
      discretize0.input(binarySparseInstance0);
      discretize0.input(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.143373454137408
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("ce*D~", linkedList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      unaryOperator1.compose((Function<? super SparseInstance, ?>) unaryOperator1);
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      Function<String, SparseInstance> function2 = (Function<String, SparseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends SparseInstance>) function2);
      Function.identity();
      function1.compose((Function<? super Integer, ?>) unaryOperator1);
      attribute0.indexOfValue("bx{\"MT%M");
      function1.andThen((Function<? super String, ?>) unaryOperator0);
      Function<Object, String> function3 = function1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      function1.compose((Function<? super Attribute, ?>) function3);
      linkedList0.add("relational");
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2);
      Locale locale0 = Locale.KOREAN;
      arrayList1.listIterator();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("_WG5}r`P%6_9", arrayList1, 4);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(59, doubleArray0);
      discretize0.input(binarySparseInstance0);
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1801.849;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1908874351));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1908874351
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1546237095090057
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("ce*D~", linkedList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      unaryOperator1.compose((Function<? super SparseInstance, ?>) unaryOperator1);
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      Function<String, SparseInstance> function2 = (Function<String, SparseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends SparseInstance>) function2);
      Function.identity();
      function1.andThen((Function<? super String, ?>) unaryOperator0);
      Function<Object, String> function3 = function1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      function1.compose((Function<? super Attribute, ?>) function3);
      linkedList0.add("relational");
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2);
      Locale locale0 = Locale.KOREAN;
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("_WG5}r`P%6_9", arrayList1, 4);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(59, doubleArray0);
      discretize0.input(binarySparseInstance0);
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1801.849;
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0153182932046643
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.CANADA_FRENCH;
      Locale locale2 = Locale.US;
      Locale locale3 = Locale.ITALIAN;
      Locale locale4 = Locale.ROOT;
      Locale locale5 = Locale.FRENCH;
      locale5.toLanguageTag();
      locale0.getDisplayCountry(locale3);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      locale5.getExtensionKeys();
      locale1.getExtensionKeys();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) list0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale6 = Locale.TRADITIONAL_CHINESE;
      locale5.clone();
      Set<String> set0 = locale5.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("Cina");
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>(4);
      arrayList2.add(attribute0);
      Instances instances0 = new Instances("@attribute", arrayList2, 3432);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.setInputFormat(instances0);
      boolean boolean1 = discretize0.batchFinished();
      assertTrue(boolean1 == boolean0);
      
      String string0 = discretize0.getBinRangesString(0);
      assertEquals("All", string0);
      
      discretize0.setOutputFormat();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize(",pr(lFhstk~5| `$");
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      discretize0.getMakeBinary();
      boolean boolean0 = discretize0.getMakeBinary();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0627299875428027
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.CANADA_FRENCH;
      Locale locale2 = Locale.US;
      Locale locale3 = locale0.stripExtensions();
      Locale locale4 = Locale.ROOT;
      Locale locale5 = Locale.FRENCH;
      locale5.toLanguageTag();
      locale0.getDisplayCountry(locale3);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      locale4.getExtensionKeys();
      locale5.getExtensionKeys();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale6 = Locale.TRADITIONAL_CHINESE;
      locale0.clone();
      Set<String> set0 = locale6.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("\u4E2D\u56FD");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(1);
      locale0.getDisplayLanguage();
      arrayList1.add(attribute0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0, locale_FilteringMode1);
      Instances instances0 = new Instances("_WGs5}rxP%6_9z", arrayList1, 40);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1063.8), doubleArray0);
      discretize0.input(binarySparseInstance0);
      discretize0.calculateCutPointsByEqualWidthBinning(0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0627299875428027
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.JAPAN;
      Locale locale2 = Locale.GERMANY;
      Locale locale3 = locale0.stripExtensions();
      Locale locale4 = Locale.ROOT;
      Locale locale5 = Locale.FRENCH;
      locale5.toLanguageTag();
      locale0.getDisplayCountry(locale3);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      locale4.getExtensionKeys();
      locale5.getExtensionKeys();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale6 = Locale.TRADITIONAL_CHINESE;
      locale0.clone();
      Set<String> set0 = locale6.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("\u4E2D\u56FD");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(1);
      locale0.getDisplayLanguage();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("_WGs5}rxP%6_9z", arrayList1, 40);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1063.8), doubleArray0);
      discretize0.input(binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-374));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -374
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.428715181307695
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Attribute attribute0 = new Attribute("ceJcD~", 15);
      arrayList0.add(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("numeric", arrayList0, 124);
      SystemInUtil.addInputLine("numeric");
      Instances instances1 = new Instances(instances0, 15);
      Attribute attribute1 = new Attribute("relational", instances0);
      Attribute.typeToString(4);
      Instances instances2 = new Instances(instances1, 0);
      instances2.stream();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>(arrayList0);
      arrayList0.add(attribute0);
      instances2.enumerateInstances();
      Instances instances3 = new Instances("v5} }zn!y", arrayList1, 2);
      Instances instances4 = new Instances("Dc%W<G`M-", arrayList2, 865);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'ceJcD~' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.071167710287096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("ce*D~", linkedList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      unaryOperator1.compose((Function<? super SparseInstance, ?>) unaryOperator1);
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      Function<String, SparseInstance> function2 = (Function<String, SparseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends SparseInstance>) function2);
      function1.andThen((Function<? super String, ?>) unaryOperator0);
      Function<Object, String> function3 = function1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      function1.compose((Function<? super Attribute, ?>) function3);
      linkedList0.add("relational");
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2);
      Locale locale0 = Locale.KOREAN;
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("_WGs5}rxP%6_9z", arrayList1, 4);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(59, doubleArray0);
      discretize0.input(binarySparseInstance0);
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1801.849;
      assertFalse(discretize0.isNewBatch());
      
      boolean boolean0 = discretize0.batchFinished();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3558258304206885
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("ceJcD~", linkedList1);
      arrayList0.add(attribute0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      SystemInUtil.addInputLine("numeric");
      Instances instances0 = new Instances("real", arrayList0, 1);
      attribute0.copy("@end");
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>(arrayList1);
      Instances instances1 = new Instances("string", arrayList1, 1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      double[] doubleArray0 = new double[7];
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 3;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (double) 2;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) 4;
      doubleArray2[8] = (double) 2;
      doubleArray1[5] = doubleArray2;
      doubleArray1[7] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 2;
      double[][] doubleArray3 = new double[6][8];
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9720752218515902
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = new Locale("n:87");
      Locale locale1 = Locale.CANADA_FRENCH;
      Locale locale2 = Locale.US;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      linkedList0.addAll((Collection<? extends Locale.LanguageRange>) linkedList1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("]-2|n2>0");
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList2);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Attribute attribute0 = new Attribute("n:87");
      arrayList0.add(attribute0);
      attribute0.copy("}?||GvSRk!^i5%wet");
      Instances instances0 = new Instances("}?||GvSRk!^i5%wet", arrayList0, 0);
      SystemInUtil.addInputLine("Get option -o: ");
      Instances instances1 = new Instances(instances0, 2);
      Instances instances2 = new Instances(instances0, 696);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Instances instances3 = new Instances("@relation", arrayList0, 3);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.setInputFormat(instances3);
      discretize0.setOutputFormat();
      Locale locale3 = Locale.TRADITIONAL_CHINESE;
      Locale locale4 = Locale.CHINESE;
      locale1.toLanguageTag();
      boolean boolean1 = discretize0.batchFinished();
      assertTrue(boolean1 == boolean0);
      
      discretize0.findNumBins(0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5029643162047286
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.CANADA_FRENCH;
      Locale locale2 = Locale.US;
      Locale locale3 = Locale.ITALIAN;
      Locale locale4 = Locale.ROOT;
      Locale locale5 = Locale.FRENCH;
      locale5.toLanguageTag();
      locale0.getDisplayCountry(locale3);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      locale4.getExtensionKeys();
      locale5.getExtensionKeys();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale6 = Locale.TRADITIONAL_CHINESE;
      locale0.clone();
      Set<String> set0 = locale6.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("Cina");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(1);
      locale0.getDisplayLanguage();
      arrayList1.add(attribute0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("k:");
      Instances instances0 = new Instances("TiT_2&", arrayList1, 0);
      SystemInUtil.addInputLine("@end");
      Instances instances1 = new Instances(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval(4198.9584);
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.findNumBinsTipText();
      assertEquals(4198.9584, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0627299875428027
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.GERMANY;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale locale2 = Locale.KOREA;
      Locale locale3 = Locale.SIMPLIFIED_CHINESE;
      Locale locale4 = Locale.GERMAN;
      Locale locale5 = Locale.TAIWAN;
      locale5.toLanguageTag();
      locale0.getDisplayCountry(locale3);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      locale5.getExtensionKeys();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) linkedList0, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) linkedList0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale6 = Locale.CANADA;
      Locale locale7 = new Locale("\u4E2D\u56FD", "\u4E2D\u56FD");
      Set<String> set1 = locale6.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set1);
      Attribute attribute0 = new Attribute("\u4E2D\u56FD");
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      locale0.getDisplayLanguage();
      arrayList2.add(attribute0);
      Instances instances0 = new Instances("_WGs5}rxP%6_9z", arrayList2, 40);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 1.7976931348623157E308;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1063.8), doubleArray0);
      discretize0.input(binarySparseInstance0);
      discretize0.convertInstance(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0956467447202844
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("ce*D~", linkedList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super SparseInstance, ?>) unaryOperator1);
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      Function<String, SparseInstance> function2 = (Function<String, SparseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends SparseInstance>) function2);
      function1.andThen((Function<? super String, ?>) unaryOperator0);
      function1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function<String, Attribute> function3 = (Function<String, Attribute>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends Attribute>) function3);
      linkedList0.add("relational");
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2);
      Locale locale0 = Locale.KOREAN;
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("_WGs5}rxP%6_9z", arrayList1, 4);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(45, doubleArray0);
      discretize0.input(binarySparseInstance0);
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1801.849;
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-337));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -337
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6376398674083723
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize("cltp,mzWbH<ml!LsHJ[");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SystemInUtil.addInputLine("cltp,mzWbH<ml!LsHJ[");
      discretize0.setInvertSelection(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "cltp,mzWbH<ml!LsHJ[");
      discretize0.getCutPoints((-1995));
      discretize0.binsTipText();
      discretize0.listOptions();
      discretize0.getInvertSelection();
      discretize0.getBins();
      String[] stringArray0 = new String[1];
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9166731665848316
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("ceJcD~");
      arrayList0.add(attribute0);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("T^ /v60/}}`JR~U\"58+", arrayList2);
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("@end", arrayList1, 1402);
      SystemInUtil.addInputLine("@attribute");
      Instances instances1 = new Instances("ceJcD~", arrayList0, 1);
      Attribute attribute2 = new Attribute("@relation", instances0, 1402);
      Instances instances2 = new Instances(instances0, 60);
      Instances.mergeInstances(instances0, instances0);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>(arrayList1);
      Instances instances3 = new Instances("integer", arrayList0, 66);
      Discretize discretize0 = new Discretize();
      attribute0.enumerateValues();
      discretize0.setInputFormat(instances3);
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1025959429841774
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("ceJcD~", linkedList1);
      arrayList0.add(attribute0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      SystemInUtil.addInputLine("numeric");
      Instances instances0 = new Instances("real", arrayList0, 1);
      attribute0.copy("@end");
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>(arrayList1);
      Instances instances1 = new Instances("v5} }zn!y", arrayList1, 12);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 2;
      double[][] doubleArray1 = new double[6][8];
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      discretize0.batchFinished();
      discretize0.outputPeek();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_NumBins = (-1879048189);
      SystemInUtil.addInputLine("oU?u'D-;>Xqj2R**$");
      Filter.makeCopy(discretize0);
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-1879048189);
      doubleArray1[1] = (double) (-1879048189);
      doubleArray1[2] = (double) (-1879048189);
      doubleArray1[3] = (double) (-1879048189);
      doubleArray1[4] = (double) (-1879048189);
      doubleArray1[5] = (double) (-1879048189);
      doubleArray1[7] = (double) (-1879048189);
      doubleArray1[8] = (double) (-1879048189);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 534.1;
      doubleArray2[1] = (double) (-1879048189);
      doubleArray2[2] = (double) (-1879048189);
      doubleArray2[3] = (double) (-1879048189);
      doubleArray2[4] = (double) (-1879048189);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) (-1879048189);
      doubleArray3[1] = 534.1;
      doubleArray3[3] = (double) (-1879048189);
      doubleArray3[4] = (double) (-1879048189);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) (-1879048189);
      doubleArray4[1] = (double) (-1879048189);
      doubleArray4[2] = (double) (-1879048189);
      doubleArray4[3] = (double) (-1879048189);
      doubleArray4[4] = (double) (-1879048189);
      discretize0.m_CutPoints = doubleArray0;
      discretize0.getAttributeIndices();
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("ce*D~", linkedList0);
      arrayList0.add(attribute0);
      Properties properties0 = new Properties();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "date");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function0);
      function1.andThen((Function<? super String, ?>) unaryOperator0);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      unaryOperator0.compose((Function<? super Attribute, ? extends String>) function3);
      linkedList0.replaceAll(unaryOperator0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("relational");
      Instances instances0 = new Instances("#bu`dk}1", arrayList0, 0);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1507.83937074), intArray0, 1);
      binarySparseInstance0.dataset();
      Discretize discretize0 = new Discretize("@relation");
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at @relation
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.123168425011997
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.JAPAN;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale locale2 = Locale.GERMANY;
      Locale locale3 = locale0.stripExtensions();
      Locale locale4 = Locale.ROOT;
      Locale locale5 = Locale.FRENCH;
      locale5.toLanguageTag();
      locale0.getDisplayCountry(locale3);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      locale4.getExtensionKeys();
      locale5.getExtensionKeys();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) linkedList0, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) linkedList0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale6 = Locale.TRADITIONAL_CHINESE;
      locale0.clone();
      Set<String> set1 = locale6.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set1);
      Attribute attribute0 = new Attribute("\u4E2D\u56FD");
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>(1);
      locale0.getDisplayLanguage();
      arrayList2.add(attribute0);
      Instances instances0 = new Instances("_WGs5}rxP%6_9z", arrayList2, 40);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1063.8), doubleArray0);
      discretize0.input(binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8807342062201364
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[0];
      discretize0.setMakeBinary(true);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) (-1858);
      doubleArray2[1] = (double) (-1858);
      doubleArray2[2] = (double) (-1858);
      doubleArray2[4] = (double) (-1858);
      doubleArray2[5] = (double) (-1858);
      doubleArray2[6] = (double) (-1858);
      doubleArray2[7] = (double) (-1858);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) (-1858);
      doubleArray3[1] = (double) (-1858);
      doubleArray3[2] = 319.68526;
      discretize0.setIgnoreClass(false);
      doubleArray3[3] = (double) (-1858);
      doubleArray0[2] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.setBins((-1858));
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-1858));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.ENGLISH;
      locale0.getDisplayVariant(locale1);
      Locale locale2 = Locale.CANADA_FRENCH;
      Locale locale3 = Locale.US;
      Locale locale4 = Locale.ITALIAN;
      Locale locale5 = Locale.ROOT;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1, locale_FilteringMode0);
      Locale.lookupTag(arrayList0, list0);
      Locale locale6 = Locale.FRENCH;
      locale6.toLanguageTag();
      locale0.getDisplayCountry(locale4);
      Locale locale7 = Locale.US;
      locale7.stripExtensions();
      locale3.getDisplayLanguage(locale6);
      Locale locale8 = Locale.TRADITIONAL_CHINESE;
      locale8.getDisplayCountry(locale3);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList2, (Collection<Locale>) linkedList0, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) arrayList2, (Collection<Locale>) list1);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale9 = Locale.TRADITIONAL_CHINESE;
      Locale locale10 = (Locale)locale6.clone();
      Set<String> set0 = locale10.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("fr");
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>(16);
      Locale locale11 = Locale.FRENCH;
      locale9.getDisplayLanguage();
      arrayList3.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList3, 1);
      instances0.variance(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      SparseInstance sparseInstance0 = new SparseInstance(3);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.06316420378249
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.JAPAN;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale locale2 = Locale.GERMANY;
      Locale locale3 = locale0.stripExtensions();
      Locale locale4 = Locale.ROOT;
      Locale locale5 = Locale.FRENCH;
      locale5.toLanguageTag();
      locale0.getDisplayCountry(locale3);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      locale1.getExtensionKeys();
      locale5.getExtensionKeys();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) linkedList0, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale6 = Locale.TRADITIONAL_CHINESE;
      locale0.clone();
      Set<String> set1 = locale6.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set1);
      Attribute attribute0 = new Attribute("\u4E2D\u56FD");
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>(1);
      locale0.getDisplayLanguage();
      arrayList2.add(attribute0);
      Instances instances0 = new Instances("_WGs5}rxP%6_9z", arrayList2, 40);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1063.8), doubleArray0);
      discretize0.input(binarySparseInstance0);
      discretize0.calculateCutPoints();
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.4282073694602744
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("ceJcD~", linkedList1);
      arrayList0.add(attribute0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      Instances instances0 = new Instances("numeric", arrayList0, 104);
      SystemInUtil.addInputLine("numeric");
      Instances instances1 = new Instances("real", arrayList0, 1);
      attribute0.copy("@end");
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>(arrayList0);
      Instances instances2 = new Instances("v5} }zn!y", arrayList1, 1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 2;
      double[][] doubleArray1 = new double[6][8];
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      discretize0.batchFinished();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@relation";
      stringArray0[1] = "string";
      stringArray0[2] = "relational";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "@data";
      stringArray0[5] = ".bsi";
      stringArray0[6] = "4^F@ }$8E^n";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Illegal options: @relation string relational .bsi @data .bsi 4^F@ }$8E^n 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.551643266517218
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function5 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function6 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function7 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function7);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function5);
      Function<Object, String> function9 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function10 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function9);
      function10.andThen((Function<? super String, ?>) function7);
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function6);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Object, ? extends String>) function10);
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function8);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.m_FindNumBins = true;
      discretize0.getOptions();
      discretize0.getCapabilities();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.959694102162223
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseEqualFrequency(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RG,p:^(qt8oi^me");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Discretize discretize1 = new Discretize();
      discretize1.getCapabilities();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      discretize1.getCutPoints((-2067947214));
      discretize1.getBinRangesString(2);
      // Undeclared exception!
      try { 
        discretize1.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.594839723260427
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("ce*D~", linkedList0);
      arrayList0.add(attribute0);
      Properties properties0 = new Properties();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "date");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super SparseInstance, ?>) unaryOperator2);
      Function<Object, String> function1 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function0);
      UnaryOperator.identity();
      Function<String, SparseInstance> function2 = (Function<String, SparseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends SparseInstance>) function2);
      function1.andThen((Function<? super String, ?>) unaryOperator0);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function4 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      unaryOperator0.compose((Function<? super Attribute, ? extends String>) function4);
      linkedList0.replaceAll(unaryOperator0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("relational");
      Instances instances0 = new Instances("#bu`dk}1", arrayList0, 0);
      SystemInUtil.addInputLine("relational");
      Instances instances1 = new Instances(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      discretize0.setInputFormat(instances1);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.1360570143460755
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      SystemInUtil.addInputLine((String) null);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function5 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function6 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function7 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function7);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Object, ? extends String>) function5);
      Function<Object, String> function9 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function10 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function9);
      function10.andThen((Function<? super String, ?>) function7);
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function6);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super Object, ? extends String>) function10);
      unaryOperator4.andThen((Function<? super Object, ? extends String>) function8);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Discretize discretize0 = new Discretize();
      Random.setNextRandom(86);
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6467142775717116
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DefaultCols = "-4751,94,12,1";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.m_IgnoreClass = true;
      discretize0.m_UseBinNumbers = true;
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1.7976931348623157E308;
      discretize0.getOptions();
      int int0 = 312;
      discretize0.getCutPoints(312);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(312);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = new Locale(" will have a compatibility");
      Locale locale1 = new Locale("Can't ignore class when changing the number of attributes!", "%IF[#6Qe0#5dk");
      locale1.getDisplayCountry(locale0);
      Locale locale2 = locale0.stripExtensions();
      Locale locale3 = Locale.TAIWAN;
      Locale locale4 = locale1.stripExtensions();
      locale3.getDisplayScript(locale4);
      locale2.toLanguageTag();
      Locale locale5 = new Locale("Can't ignore class when changing the number of attributes!");
      locale4.getUnicodeLocaleKeys();
      Locale locale6 = Locale.GERMAN;
      Locale locale7 = Locale.CANADA_FRENCH;
      locale7.stripExtensions();
      Locale.getISOLanguages();
      Locale locale8 = Locale.US;
      locale2.getDisplayScript(locale8);
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(4, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize(">t4gj<JY-%Khc*");
      String string0 = discretize0.useBinNumbersTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(14);
      binarySparseInstance0.dataset();
      Discretize discretize0 = new Discretize("}?||GvSRk!^i5%wet");
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 5.55555;
      doubleArray0[1] = (double) 2780;
      doubleArray0[2] = (double) 2780;
      doubleArray0[3] = (double) 2780;
      doubleArray0[4] = (double) 2780;
      SparseInstance sparseInstance0 = new SparseInstance((-801.64490203), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(2780.0, doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(sparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1712.8620650697073);
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = (-1116.0);
      doubleArray0[0] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "first-last");
      boolean boolean0 = discretize0.getFindNumBins();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Attribute, String> function0 = (Function<Attribute, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Attribute, ? extends String>) function0);
      linkedList0.replaceAll(unaryOperator0);
      Attribute attribute0 = new Attribute("tR5q@cv*%CRq", linkedList0, protectedProperties1);
      Instances instances0 = new Instances("P0r1V{b1p|+/|IUK", arrayList0, 2);
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(58);
      binarySparseInstance0.dataset();
      Discretize discretize0 = new Discretize("}?|ZGvSR/!^i5%wet");
      double[][] doubleArray0 = new double[5][4];
      double[] doubleArray1 = new double[18];
      doubleArray1[0] = (double) 58;
      doubleArray1[1] = (double) 2780;
      doubleArray1[2] = (double) 58;
      doubleArray1[3] = (double) 2780;
      doubleArray1[4] = (double) 58;
      doubleArray1[6] = (double) 2780;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 58;
      doubleArray2[1] = (double) 2780;
      doubleArray2[2] = (double) 2780;
      doubleArray2[3] = (double) 58;
      doubleArray2[4] = (double) 58;
      doubleArray2[5] = (double) 2780;
      doubleArray2[6] = (double) 2780;
      doubleArray0[1] = doubleArray2;
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(58, intArray0, (-706));
      binarySparseInstance1.dataset();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".");
      discretize1.setInvertSelection(true);
      discretize0.setFindNumBins(true);
      discretize1.setBins((-1952257859));
      discretize1.getBins();
      discretize0.attributeIndicesTipText();
      discretize1.getBinRangesString((-1952257859));
      discretize1.makeBinaryTipText();
      assertEquals((-1952257859), discretize1.getBins());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(14);
      binarySparseInstance0.dataset();
      Discretize discretize0 = new Discretize("?||GvSR!^i5%wet");
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 5.55555;
      doubleArray0[1] = (double) 2780;
      doubleArray0[2] = (double) 14;
      doubleArray0[3] = (double) 2780;
      doubleArray0[4] = (double) 2780;
      SparseInstance sparseInstance0 = new SparseInstance((-803.3647814737386), doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize("a");
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[10];
      doubleArray1[0] = 4530.1180884177;
      doubleArray1[1] = (-1659.36);
      discretize0.setUseBinNumbers(false);
      doubleArray1[2] = 114.64564;
      discretize0.setBins((-480));
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 114.64564;
      doubleArray2[1] = 4530.1180884177;
      doubleArray2[2] = (-1659.36);
      doubleArray2[3] = 114.64564;
      doubleArray2[4] = (-1659.36);
      doubleArray0[1] = doubleArray2;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "a";
      stringArray0[1] = "a";
      stringArray0[2] = "a";
      stringArray0[3] = "a";
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      discretize0.makeBinaryTipText();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize("    if (getInputFormat() == null)\n");
      String string0 = discretize0.invertSelectionTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(58);
      binarySparseInstance0.dataset();
      Discretize discretize0 = new Discretize("}?||GvSR/!^i5%wet");
      double[][] doubleArray0 = new double[5][4];
      double[] doubleArray1 = new double[18];
      doubleArray1[0] = (double) 58;
      doubleArray1[1] = (double) 2780;
      doubleArray1[2] = (double) 58;
      doubleArray1[3] = (double) 2780;
      doubleArray1[4] = (double) 58;
      doubleArray1[6] = (double) 2780;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 58;
      doubleArray2[1] = (double) 2780;
      doubleArray2[2] = (double) 2780;
      doubleArray2[3] = (double) 58;
      doubleArray2[4] = (double) 58;
      doubleArray2[5] = (double) 2780;
      doubleArray2[6] = (double) 2780;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 2780;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(58.0, doubleArray1);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance1);
      // Undeclared exception!
      try { 
        discretize0.input(denseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.CANADA_FRENCH;
      Locale locale2 = Locale.GERMANY;
      Random.setNextRandom((-1073741824));
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "=");
      discretize0.setMakeBinary(true);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1259);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.isNewBatch();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize1 = new Discretize();
      boolean boolean0 = discretize1.getUseEqualFrequency();
      assertFalse(boolean0);
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getFindNumBins());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(14);
      binarySparseInstance0.dataset();
      Discretize discretize0 = new Discretize("}?||GvSRk!^i5%wet");
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 2780;
      doubleArray0[2] = (double) 2780;
      doubleArray0[3] = (double) 2780;
      doubleArray0[4] = (double) 2780;
      SparseInstance sparseInstance0 = new SparseInstance((-801.64490203), doubleArray0);
      Random.setNextRandom(82);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1693.07, doubleArray0);
      boolean boolean0 = discretize0.getMakeBinary();
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.binsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-F";
      stringArray0[1] = ",?/tTb+";
      stringArray0[2] = "ceJcD~";
      stringArray0[3] = "h(+.7RAe&g^^nZe";
      stringArray0[4] = "ceJcD~";
      stringArray0[5] = "S[e D*cIX";
      stringArray0[6] = "e*k.*<zDh*";
      stringArray0[7] = "qH\"((TkQiLws*7v";
      stringArray0[8] = "";
      discretize0.setOptions(stringArray0);
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(58);
      binarySparseInstance0.dataset();
      Discretize discretize0 = new Discretize("}?|GSRk!^i5e");
      double[][] doubleArray0 = new double[5][4];
      double[] doubleArray1 = new double[18];
      doubleArray1[0] = (double) 58;
      doubleArray1[1] = (double) 2780;
      doubleArray1[2] = (double) 58;
      doubleArray1[3] = (double) 2780;
      doubleArray1[4] = (double) 58;
      doubleArray1[6] = (double) 2780;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[1] = (double) 2780;
      doubleArray2[2] = (double) 2780;
      doubleArray2[3] = (double) 58;
      doubleArray2[4] = (double) 58;
      doubleArray2[4] = (double) 2780;
      doubleArray2[6] = (double) 2780;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 2780;
      doubleArray3[1] = (double) 58;
      doubleArray3[2] = (double) 2780;
      doubleArray3[3] = (double) 58;
      doubleArray3[4] = (double) 2780;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (double) 58;
      doubleArray4[1] = (double) 2780;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (double) 58;
      doubleArray5[1] = 3182.019663345;
      doubleArray5[2] = (double) 2780;
      doubleArray5[3] = (double) 2780;
      doubleArray0[4] = doubleArray5;
      discretize0.m_CutPoints = doubleArray0;
      binarySparseInstance0.toString();
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 5.55555;
      doubleArray6[1] = (double) 2780;
      doubleArray6[3] = (double) 2780;
      doubleArray6[4] = (double) 58;
      SparseInstance sparseInstance0 = new SparseInstance(5.55555, doubleArray6);
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Discretize discretize0 = new Discretize("\tUse equal-frequency instead of equal-width discretization.");
      String string0 = discretize0.globalInfo();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.5134377053384513
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getOptions();
      double[][] doubleArray0 = new double[0][8];
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[1] = "Sets the desired weight of instances per interval for equal-frequency binning.";
      stringArray0[2] = "Sets the desired weight of instances per interval for equal-frequency binning.";
      stringArray0[3] = "";
      int[] intArray0 = new int[5];
      intArray0[0] = 933;
      intArray0[1] = 1;
      intArray0[2] = 6;
      intArray0[3] = 68;
      intArray0[4] = 4113;
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.setAttributeIndices("msiiE;`");
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      
      Discretize discretize1 = new Discretize("");
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals(10, discretize1.getBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Discretize discretize0 = new Discretize("qpNVmjY");
      discretize0.setDesiredWeightOfInstancesPerInterval(977.5945030424838);
      assertEquals(977.5945030424838, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function5 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function.identity();
      Function<Object, String> function6 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function7 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function7);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Object, ? extends String>) function5);
      Function<Object, String> function9 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function10 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function9);
      function10.andThen((Function<? super String, ?>) function7);
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function6);
      Function.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super Object, ? extends String>) function10);
      unaryOperator4.andThen((Function<? super Object, ? extends String>) function8);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Discretize discretize0 = new Discretize();
      Random.setNextRandom(86);
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.9111939941470046
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "H9iz>re";
      stringArray0[1] = "-P`<aZv*2vuNWZe%ue";
      stringArray0[2] = "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[3] = "9.kLm";
      discretize0.getBinRangesString(8);
      stringArray0[4] = "f]BuiP,{kF3";
      stringArray0[5] = "ceJcD~";
      stringArray0[6] = "Bz(M3g#ji*I.BbH";
      stringArray0[7] = "`hZv)}^\"";
      stringArray0[8] = "\tOptimize number of bins using leave-one-out estimate\n\tof estimated entropy (for equal-width discretization).\n\tIf this is set then the -B option will be ignored.";
      Discretize.main(stringArray0);
      try { 
        Filter.batchFilterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // No first input file given.
         // 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // -i <filename>
         // \tThe file containing first input instances.
         // -o <filename>
         // \tThe file first output instances will be written to.
         // -r <filename>
         // \tThe file containing second input instances.
         // -s <filename>
         // \tThe file second output instances will be written to.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "first-last");
      discretize0.getInvertSelection();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a!T>WjTl;kD&^+!'7");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), double0, 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      boolean boolean0 = discretize0.m_FindNumBins;
      boolean boolean1 = discretize0.getFindNumBins();
      assertTrue(boolean1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      int int0 = discretize0.getBins();
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, int0);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Attribute.typeToString(68);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>(arrayList0);
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(14);
      binarySparseInstance0.dataset();
      Discretize discretize0 = new Discretize("}?||GvSRk!^i5%wet");
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 5.55555;
      doubleArray0[1] = (double) 2780;
      doubleArray0[2] = (double) 14;
      doubleArray0[3] = (double) 2780;
      doubleArray0[4] = (double) 2780;
      SparseInstance sparseInstance0 = new SparseInstance((-801.64490203), doubleArray0);
      Random.setNextRandom(82);
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals(6, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(14);
      binarySparseInstance0.dataset();
      Discretize discretize0 = new Discretize("}?||GvSRk!^i5%wet");
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 5.55555;
      doubleArray0[1] = (double) 2780;
      doubleArray0[2] = (double) 14;
      doubleArray0[3] = (double) 2780;
      doubleArray0[4] = (double) 2780;
      SparseInstance sparseInstance0 = new SparseInstance((-801.64490203), doubleArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "}?||GvSRk!^i5%wet";
      stringArray0[2] = "@relation";
      stringArray0[3] = "}?||GvSRk!^i5%wet";
      // Undeclared exception!
      try { 
        discretize0.findNumBins(14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.9103281932812037
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka/core/Capabilities.props";
      Discretize discretize1 = new Discretize();
      Random.setNextRandom(2711);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "weka/core/Capabilities.props";
      stringArray1[1] = "weka/core/Capabilities.props";
      stringArray1[2] = "}?j|GvSRk!^i5lwet";
      stringArray1[3] = "weka/core/Capabilities.props";
      stringArray1[4] = "}?j|GvSRk!^i5lwet";
      stringArray1[5] = "weka/core/Capabilities.props";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-6);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      stringArray1[6] = "}?j|GvSRk!^i5lwet";
      stringArray1[7] = "weka/core/Capabilities.props";
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)79;
      byteArray1[1] = (byte)88;
      byteArray1[2] = (byte) (-25);
      byteArray1[3] = (byte)2;
      byteArray1[5] = (byte) (-83);
      byteArray1[6] = (byte)59;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray1);
      stringArray1[8] = "}?j|GvSRk!^i5lwet";
      try { 
        Filter.filterFile(discretize0, stringArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Illegal options: weka/core/Capabilities.props weka/core/Capabilities.props }?j|GvSRk!^i5lwet weka/core/Capabilities.props }?j|GvSRk!^i5lwet weka/core/Capabilities.props }?j|GvSRk!^i5lwet weka/core/Capabilities.props }?j|GvSRk!^i5lwet 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Discretize discretize0 = new Discretize("PL`\"{U_cls+sBS&j");
      String string0 = discretize0.getRevision();
      assertEquals("8964", string0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.8221303550794707
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.clone();
      Discretize discretize0 = new Discretize("mjzvDq29S");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Hj?u3emlH");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      SystemInUtil.addInputLine(",S%kn8%}");
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function1);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Object, ? extends String>) function4);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      function4.andThen((Function<? super String, ?>) unaryOperator2);
      Function<Object, String> function5 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super Object, ? extends String>) function5);
      UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Object, ? extends String>) function5);
      Function<Object, String> function6 = unaryOperator5.andThen((Function<? super Object, ? extends String>) function4);
      unaryOperator0.compose((Function<? super Attribute, ? extends String>) function6);
      Discretize discretize1 = new Discretize();
      Random.setNextRandom((-1073741824));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Illegal options: # 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }
}
