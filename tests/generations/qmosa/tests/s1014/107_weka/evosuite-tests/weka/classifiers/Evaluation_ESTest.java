/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 04:12:25 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.evaluation.output.prediction.Null;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.HierarchicalClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.estimators.KernelEstimator;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.337827080898473
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getStructure();
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = 32;
      intArray0[3] = 32;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(32, intArray0, 32);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      evaluation0.sizeOfPredictedRegions();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.SFPriorEntropy();
      evaluation0.precision(247);
      double double0 = (-731.4948467041344);
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6980640805618012
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Capabilities capabilities0 = attributeSelectedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("{O9bW7;y,&Sf(k-6");
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      Filter.runFilter(multiFilter0, testInstances0.DEFAULT_WORDS);
      MultiFilter multiFilter2 = new MultiFilter();
      Capabilities capabilities1 = multiFilter0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Capabilities capabilities2 = costSensitiveClassifier0.getCapabilities();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      costSensitiveClassifier0.setClassifier(cVParameterSelection0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Attribute attribute0 = new Attribute("@relation", vector0);
      costSensitiveClassifier0.setSeed(2603);
      capabilities2.test(attribute0, false);
      testInstances1.setNumString(15);
      TestInstances.forCapabilities(capabilities2);
      testInstances1.setNumRelationalNominal(17);
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.meanPriorAbsoluteError();
      REPTree rEPTree0 = new REPTree();
      evaluation0.toSummaryString(true);
      evaluation0.toSummaryString(false);
      evaluation0.confusionMatrix();
      double double2 = evaluation0.falseNegativeRate(0);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6812070783018
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = (-693);
      evaluation0.updateNumericScores((double[]) null, (double[]) null, (-2.0));
      SGD sGD0 = new SGD();
      sGD0.setDontNormalize(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation1.weightedAreaUnderPRC();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "n8V;G51wE4/YNBeZ");
      evaluation1.KBRelativeInformation();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation1.m_SumPriorSqrErr = (double) 2;
      int int0 = (-2418);
      Version.MINOR = (-2418);
      // Undeclared exception!
      try { 
        evaluation0.addNumericTrainClass(10.0, (-2257.613918));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -693
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1205406887176075
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGDText sGDText0 = new SGDText();
      evaluation0.getRevision();
      double double0 = evaluation0.m_WithClass;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      evaluation0.correct();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 2208.8842806407442;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(2208.8842806407442, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      evaluation0.SFMeanEntropyGain();
      evaluation0.pctUnclassified();
      double double1 = evaluation0.m_SumPriorSqrErr;
      Random.setNextRandom(1);
      testInstances0.setNumString((-5));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Capabilities capabilities0 = costSensitiveClassifier0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      TestInstances.forCapabilities(capabilities1);
      testInstances0.setNumRelationalNominal(1);
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      evaluation0.KBRelativeInformation();
      evaluation0.meanPriorAbsoluteError();
      REPTree rEPTree0 = new REPTree();
      evaluation0.toSummaryString(true);
      evaluation0.toSummaryString(true);
      evaluation0.confusionMatrix();
      evaluation0.errorRate();
      evaluation0.SFPriorEntropy();
      try { 
        evaluation0.setPriors(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.542577988828428
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Capabilities capabilities0 = attributeSelectedClassifier0.getCapabilities();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      capabilities0.getOtherCapabilities();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate(" random feature");
      testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      Instances instances1 = testInstances0.generate("rt");
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.weightedAreaUnderROC();
      String string0 = evaluation1.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1389978531494243
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.getOptions();
      testInstances0.generate(".bsi");
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation1.weightedAreaUnderROC();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation1.unweightedMicroFmeasure();
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6454727096600312
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SystemInUtil.addInputLine(" ");
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      DecisionStump decisionStump0 = new DecisionStump();
      Null null0 = new Null();
      evaluation0.equals(evaluation0);
      DecisionStump decisionStump1 = new DecisionStump();
      REPTree rEPTree0 = new REPTree();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      CoverTree coverTree0 = new CoverTree();
      evaluation0.SFSchemeEntropy();
      CSVLoader cSVLoader0 = new CSVLoader();
      CSVLoader cSVLoader1 = new CSVLoader();
      SystemInUtil.addInputLine((String) null);
      ArffLoader arffLoader0 = new ArffLoader();
      CSVLoader cSVLoader2 = new CSVLoader();
      CSVLoader cSVLoader3 = new CSVLoader();
      CSVLoader cSVLoader4 = new CSVLoader();
      try { 
        cSVLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("KtsA7W,z");
      Evaluation evaluation0 = new Evaluation(instances0);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) attributeSelectedClassifier0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.1660899068057584
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.delete();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wNN>S\"G");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.updateNumericScores((double[]) null, (double[]) null, (-2.0));
      evaluation0.weightedTrueNegativeRate();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluationForSingleInstance((double[]) null, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3311690807823338
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("ODDSPOywER");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate((-1));
      PipedReader pipedReader0 = new PipedReader();
      evaluation0.correct();
      SGD sGD0 = new SGD();
      sGD0.setDontNormalize(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ODDSPOywER");
      double double0 = evaluation1.KBRelativeInformation();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.addNumericTrainClass((-1.0E-6), (-2984.4988));
      double double1 = evaluation0.correct();
      assertEquals(0.0, double1, 0.01);
      
      ZeroR zeroR0 = new ZeroR();
      evaluation0.unweightedMacroFmeasure();
      double double2 = evaluation1.weightedFalseNegativeRate();
      double double3 = evaluation0.pctIncorrect();
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.227351695719394
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SystemInUtil.addInputLine("^F[L5kwLYkSEkNW^ta\"");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(">V**jE");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanEntropyGain();
      DecisionStump decisionStump0 = new DecisionStump();
      Null null0 = new Null();
      DecisionStump decisionStump1 = new DecisionStump();
      REPTree rEPTree0 = new REPTree();
      CoverTree coverTree0 = new CoverTree();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.weightedMatthewsCorrelation();
      assertEquals(double1, double0, 0.01);
      
      evaluation1.weightedAreaUnderPRC();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[(h``_iNh&VpCPxe");
      Evaluation evaluation2 = new Evaluation(instances0);
      double double2 = evaluation2.KBRelativeInformation();
      assertEquals(0.0, double2, 0.01);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.correct();
      ZeroR zeroR0 = new ZeroR();
      double double3 = evaluation2.unweightedMacroFmeasure();
      double double4 = evaluation2.weightedFalseNegativeRate();
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6083827162783617
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MultiFilter multiFilter0 = new MultiFilter();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      double double1 = evaluation0.priorEntropy();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      double double2 = evaluation0.KBMeanInformation();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.weightedRecall();
      assertNotEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2915896686607256
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SystemInUtil.addInputLine("^F[L5kwLkSEkNW^ta\"");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalsePositives((-2));
      evaluation0.m_NumClasses = 5;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.getRevision();
      evaluation1.numTruePositives((-1));
      evaluation1.SFSchemeEntropy();
      LogitBoost logitBoost0 = new LogitBoost();
      Instances instances1 = null;
      KDTree kDTree0 = new KDTree((Instances) null);
      kDTree0.globalInfo();
      evaluation0.KBInformation();
      CSVLoader cSVLoader0 = new CSVLoader();
      // Undeclared exception!
      try { 
        evaluation0.weightedTrueNegativeRate();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8427273075413524
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.updateNumericScores((double[]) null, (double[]) null, (-2.0));
      evaluation0.weightedTrueNegativeRate();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Object[] objectArray0 = new Object[2];
      textDirectoryLoader0.getDataSet();
      Object object0 = new Object();
      objectArray0[1] = object0;
      evaluation0.evaluateModel((Classifier) adaBoostM1_0, instances0, objectArray0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.rootRelativeSquaredError();
      evaluation0.errorRate();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      textDirectoryLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!tr#by&JL2|t");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-731.6);
      doubleArray0[1] = (-731.6);
      doubleArray0[2] = (-731.6);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray0);
      Attribute attribute0 = new Attribute("@data", 3);
      sparseInstance0.value(attribute0);
      try { 
        evaluation0.updatePriors(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9663267452196522
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.updateNumericScores((double[]) null, (double[]) null, (-2.0));
      evaluation0.weightedTrueNegativeRate();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Object[] objectArray0 = new Object[2];
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Object object0 = new Object();
      objectArray0[1] = object0;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances1);
      try { 
        evaluation0.updateStatsForPredictor(442.64756, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.340234055942502
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumRelationalNominal((-860));
      double double1 = evaluation1.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.truePositiveRate((-1069));
      double double2 = evaluation1.recall(4);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation1.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SystemInUtil.addInputLine("^F[L5kwLkSEkNW^ta\"");
      TestInstances testInstances0 = new TestInstances();
      String string0 = "\\*";
      Instances instances0 = testInstances0.generate("*");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalNominal(192);
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getNormalizeDocLength");
      evaluation0.SFMeanPriorEntropy();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedWriter pipedWriter1 = new PipedWriter();
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1592720529128537
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wNN>S\"G");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.updateNumericScores((double[]) null, (double[]) null, (-2.0));
      evaluation0.weightedTrueNegativeRate();
      MockRandom mockRandom0 = new MockRandom();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) evaluation0;
      objectArray0[2] = (Object) textDirectoryLoader0;
      objectArray0[3] = (Object) mockRandom0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances1, 1206, (java.util.Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4074931791501295
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("preserve-order");
      testInstances0.setNumRelationalNominal((-1794835596));
      testInstances0.setNumNominalValues(20);
      testInstances0.generate("fiCst");
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = true;
      evaluation0.toSummaryString(" ", true);
      Random.setNextRandom(488);
      evaluation0.SFMeanSchemeEntropy();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 488;
      doubleArray0[1] = (double) (-1794835596);
      doubleArray0[2] = (double) 20;
      doubleArray0[3] = (double) 20;
      doubleArray0[4] = (double) 20;
      DenseInstance denseInstance0 = new DenseInstance(Double.NaN, doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8202161271912027
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Capabilities capabilities0 = attributeSelectedClassifier0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("{O9bW7;y,&Sf(k-6");
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      Capabilities capabilities1 = multiFilter0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCapabilities();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      M5Rules m5Rules0 = new M5Rules();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-415.8972));
      evaluation0.weightedTrueNegativeRate();
      evaluation0.pctCorrect();
      evaluation0.weightedFMeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation.handleCostOption("", (-2));
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.440769675320202
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wNN>S\"G");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.updateNumericScores((double[]) null, (double[]) null, (-2.0));
      double double0 = evaluation0.weightedTrueNegativeRate();
      evaluation0.pctCorrect();
      evaluation0.rootMeanPriorSquaredError();
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7082827984291913
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.SFMeanEntropyGain();
      DecisionStump decisionStump0 = new DecisionStump();
      Null null0 = new Null();
      DecisionStump decisionStump1 = new DecisionStump();
      REPTree rEPTree0 = new REPTree();
      CoverTree coverTree0 = new CoverTree();
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double1, 0.01);
      
      CSVLoader cSVLoader0 = new CSVLoader();
      CSVLoader cSVLoader1 = new CSVLoader();
      SystemInUtil.addInputLine(".csv");
      double double2 = evaluation1.kappa();
      assertEquals(1.0, double2, 0.01);
      
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Evaluation.getGlobalInfo(decisionStump1);
      String string0 = Evaluation.getGlobalInfo(naiveBayesMultinomialUpdateable0);
      assertEquals("\nSynopsis for weka.classifiers.bayes.NaiveBayesMultinomialUpdateable:\n\nClass for building and using a multinomial Naive Bayes classifier. For more information see,\n\nAndrew Mccallum, Kamal Nigam: A Comparison of Event Models for Naive Bayes Text Classification. In: AAAI-98 Workshop on 'Learning for Text Categorization', 1998.\n\nThe core equation for this classifier:\n\nP[Ci|D] = (P[D|Ci] x P[Ci]) / P[D] (Bayes rule)\n\nwhere Ci is class i and D is a document.\n\nIncremental version of the algorithm.", string0);
      
      double double3 = evaluation1.errorRate();
      assertEquals(double3, double0, 0.01);
      
      double double4 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      
      evaluation0.addNumericTrainClass(Double.NaN, Double.NaN);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01);
      
      double double5 = evaluation1.errorRate();
      assertNotEquals(double5, double4, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.955575815223406
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("ODDSPOywER");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      
      DecisionStump decisionStump0 = new DecisionStump();
      Null null0 = new Null();
      evaluation0.equals((Object) null);
      DecisionStump decisionStump1 = new DecisionStump();
      REPTree rEPTree0 = new REPTree();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      CoverTree coverTree0 = new CoverTree();
      evaluation0.SFSchemeEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.KBInformation();
      assertEquals(0.0, double1, 0.01);
      
      CSVLoader cSVLoader0 = new CSVLoader();
      CSVLoader cSVLoader1 = new CSVLoader();
      SystemInUtil.addInputLine(">V!**-jE");
      evaluation0.kappa();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Logistic logistic0 = new Logistic();
      Evaluation.getGlobalInfo(logistic0);
      Evaluation.getGlobalInfo(logistic0);
      evaluation0.errorRate();
      evaluation1.SFEntropyGain();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (double) (-2);
      evaluation1.updateNumericScores(doubleArray0, doubleArray1, 0.0);
      evaluation1.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation1.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.132951830896407
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Stacking stacking0 = new Stacking();
      Capabilities capabilities0 = stacking0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      multiFilter1.setInputFormat(instances0);
      Capabilities capabilities1 = multiFilter1.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Capabilities capabilities2 = costSensitiveClassifier0.getCapabilities();
      TestInstances.forCapabilities(capabilities2);
      double double0 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      testInstances1.getData();
      testInstances1.setNumRelationalNominal((-1));
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (-2);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) (-2);
      double double1 = evaluation0.numFalseNegatives((-2));
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.30045221348672
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!tr#by&JL2|t");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-731.4948467041344);
      doubleArray0[1] = (-731.4948467041344);
      doubleArray0[2] = (-731.4948467041344);
      doubleArray0[3] = (-731.4948467041344);
      doubleArray0[4] = (-731.4948467041344);
      doubleArray0[5] = (-731.4948467041344);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-731.4948467041344);
      doubleArray1[1] = (-731.4948467041344);
      doubleArray1[2] = (-731.4948467041344);
      doubleArray1[4] = (-731.4948467041344);
      doubleArray1[5] = (-731.4948467041344);
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, (-731.4948467041344));
      evaluation0.weightedTrueNegativeRate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1173.861, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray1, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "ncAtksne1(");
      TestInstances testInstances0 = new TestInstances();
      int int0 = 4006;
      try { 
        Evaluation.handleCostOption(" ", 4006);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ncAtksne1(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0309328399035236
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("KtsA7W,z");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate((-1));
      PipedReader pipedReader0 = new PipedReader();
      evaluation0.correct();
      SGD sGD0 = new SGD();
      sGD0.setDontNormalize(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedMatthewsCorrelation();
      evaluation1.weightedAreaUnderPRC();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.evaluateModel((Classifier) sGD0, instances0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.SGD", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6708937027926885
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specifedclass forgeerating the classification output.\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.setNumRelationalNominal(192);
      SGDText sGDText0 = new SGDText();
      evaluation0.toMatrixString(".bsi");
      double double0 = evaluation0.m_WithClass;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      RegressionByDiscretization.main(testInstances0.DEFAULT_WORDS);
      evaluation0.correct();
      double double1 = evaluation0.m_MissingClass;
      evaluation0.pctUnclassified();
      evaluation0.weightedAreaUnderROC();
      AbstractClassifier.makeCopy(sGDText0);
      MockRandom mockRandom0 = new MockRandom();
      instances0.resampleWithWeights((java.util.Random) mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom(0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.listOptions();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.evaluateModel((Classifier) serializedClassifier0, instances0, objectArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6308097860544457
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.updateNumericScores((double[]) null, (double[]) null, (-2.0));
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Object[] objectArray0 = new Object[2];
      textDirectoryLoader0.getDataSet();
      Object object0 = new Object();
      objectArray0[1] = object0;
      evaluation0.evaluateModel((Classifier) adaBoostM1_0, instances0, objectArray0);
      double double0 = evaluation0.m_SumPredicted;
      adaBoostM1_0.globalInfo();
      evaluation0.rootRelativeSquaredError();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.SFMeanSchemeEntropy();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.345108895642337
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("ODDSPOywER");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate((-1));
      PipedReader pipedReader0 = new PipedReader();
      evaluation0.correct();
      SGD sGD0 = new SGD();
      sGD0.setDontNormalize(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ODDSPOywER");
      evaluation1.KBRelativeInformation();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.addNumericTrainClass((-1.0E-6), (-2984.4988));
      evaluation0.correct();
      ZeroR zeroR0 = new ZeroR();
      evaluation0.unweightedMacroFmeasure();
      evaluation1.weightedFalseNegativeRate();
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(2, doubleArray0.length);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.0191988013147752
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      textDirectoryLoader0.reset();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(5435);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.weightedAreaUnderPRC();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      double double1 = evaluation0.KBRelativeInformation();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation1.addNumericTrainClass(4.9E-324, 5435);
      double double2 = evaluation0.correct();
      assertEquals(0.0, double2, 0.01);
      
      ZeroR zeroR0 = new ZeroR();
      evaluation0.unweightedMacroFmeasure();
      double double3 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double3, double1, 0.01);
      
      evaluation1.confusionMatrix();
      assertEquals(0.0, evaluation1.correct(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.9547141365878162
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.updateNumericScores((double[]) null, (double[]) null, (-2.0));
      SGD sGD0 = new SGD();
      sGD0.setDontNormalize(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      evaluation1.weightedAreaUnderPRC();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "n8V;G51wE4/YNBeZ");
      evaluation1.KBRelativeInformation();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.addNumericTrainClass(10.0, (-2257.613918));
      assertEquals(0.0, evaluation0.correct(), 0.01);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.correct();
      ZeroR zeroR0 = new ZeroR();
      evaluation2.unweightedMacroFmeasure();
      double double1 = evaluation1.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.52256703842766
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setMinimizeExpectedCost(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.pctUnclassified();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, (int[]) null, 1844);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2597);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 1844;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 0;
      evaluation0.meanAbsoluteError();
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.6682467551087274
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("ODDSPOywER");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate((-1));
      PipedReader pipedReader0 = new PipedReader();
      evaluation0.correct();
      SGD sGD0 = new SGD();
      SGD.main(testInstances0.DEFAULT_WORDS);
      sGD0.setDontNormalize(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ODDSPOywER");
      evaluation1.KBRelativeInformation();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.addNumericTrainClass((-1.0E-6), (-2984.4988));
      evaluation0.correct();
      ZeroR zeroR0 = new ZeroR();
      evaluation0.unweightedMacroFmeasure();
      evaluation1.weightedFalseNegativeRate();
      evaluation1.weightedFMeasure();
      evaluation1.rootMeanSquaredError();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation1.evaluateModelOnce((double[]) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.352641895713288
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = null;
      textDirectoryLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 32;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedMatthewsCorrelation();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.weightedAreaUnderPRC();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) evaluation1;
      objectArray0[1] = (Object) naiveBayes0;
      double[] doubleArray0 = new double[0];
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.635337370766229
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SystemInUtil.addInputLine("^F[kLNkwLkSEkNW^ta\"");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("zx^5/>r\"z1");
      REPTree rEPTree0 = new REPTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      DecisionStump decisionStump0 = new DecisionStump();
      Null null0 = new Null();
      evaluation0.equals(null0);
      DecisionStump decisionStump1 = new DecisionStump();
      REPTree rEPTree1 = new REPTree();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      CoverTree coverTree0 = new CoverTree();
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      LogitBoost logitBoost0 = new LogitBoost();
      KDTree kDTree0 = new KDTree();
      kDTree0.globalInfo();
      evaluation0.KBInformation();
      CSVLoader cSVLoader0 = new CSVLoader();
      CSVLoader cSVLoader1 = new CSVLoader();
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double1, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation1.priorEntropy();
      assertEquals(0.9940302114769565, double2, 0.01);
      
      double double3 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.592235717441842
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      testInstances0.setNumRelationalNominal((-201));
      testInstances0.setNumRelationalNominal((-201));
      SGDText sGDText0 = new SGDText();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      double double0 = evaluation0.m_WithClass;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      RegressionByDiscretization.main(testInstances0.DEFAULT_WORDS);
      evaluation0.correct();
      evaluation0.SFMeanEntropyGain();
      evaluation0.pctUnclassified();
      evaluation0.weightedAreaUnderROC();
      Random.setNextRandom(125);
      AbstractClassifier.makeCopy(sGDText0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(4625L);
      AbstractClassifier.runClassifier(sGDText0, testInstances0.DEFAULT_WORDS);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances(")ZXpOV:U^13/#x Y", arrayList0, 1);
      try { 
        evaluation0.crossValidateModel((Classifier) sGDText0, instances1, 1, (java.util.Random) mockRandom1, (Object[]) regressionByDiscretization0.TAGS_ESTIMATOR);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      RandomTree randomTree0 = new RandomTree();
      String[] stringArray0 = new String[1];
      try { 
        Evaluation.evaluateModel((Classifier) randomTree0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Evaluation.handleCostOption((String) null, (-1));
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.549202465820362
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setMinimizeExpectedCost(true);
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.pctUnclassified();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, (int[]) null, 1844);
      double[] doubleArray0 = new double[6];
      binarySparseInstance0.getRevision();
      doubleArray0[0] = (double) (-2597);
      doubleArray0[2] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      instances0.clear();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      evaluation0.areaUnderROC(1);
      evaluation1.setDiscardPredictions(true);
      assertTrue(evaluation1.getDiscardPredictions());
      
      double double0 = evaluation0.numInstances();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SystemInUtil.addInputLine("^F[L5kwLkSEkNW^ta\"");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("zx^5/>r\"z1");
      TestInstances testInstances1 = new TestInstances();
      IBk iBk0 = new IBk(2095);
      Capabilities capabilities0 = iBk0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      instances0.deleteAttributeType(2095);
      testInstances2.generate("epochsTipText");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      TestInstances testInstances3 = new TestInstances();
      TestInstances testInstances4 = new TestInstances();
      testInstances4.setNumRelationalNominal((-1));
      double double0 = evaluation0.truePositiveRate(1);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Capabilities capabilities0 = attributeSelectedClassifier0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("{O9bW7;y,&Sf(k-6");
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      Capabilities capabilities1 = multiFilter0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Capabilities capabilities2 = costSensitiveClassifier0.getCapabilities();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      costSensitiveClassifier0.setClassifier(cVParameterSelection0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Attribute attribute0 = new Attribute("@relation", vector0);
      capabilities2.test(attribute0, false);
      SGDText sGDText0 = new SGDText();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom((-3207L));
      try { 
        evaluation0.crossValidateModel((Classifier) cVParameterSelection0, instances0, 3, (java.util.Random) mockRandom2, (Object[]) testInstances1.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Capabilities capabilities0 = new Capabilities(multiFilter0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.incorrect();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      // Undeclared exception!
      try { 
        textDirectoryLoader0.getNextInstance(instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.converters.TextDirectoryLoader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.9634787989676514
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SystemInUtil.addInputLine("^F[L5kwLkSEkNW^ta\"");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specifedclass forgeerating the classification output.\n");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.setNumRelationalNominal(192);
      SGDText sGDText0 = new SGDText();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = evaluation0.toMatrixString(".bsi");
      assertEquals(".bsi\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double0 = evaluation0.m_WithClass;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      RegressionByDiscretization.main(testInstances0.DEFAULT_WORDS);
      evaluation0.correct();
      double double1 = evaluation0.m_MissingClass;
      double double2 = evaluation0.pctUnclassified();
      double double3 = evaluation0.weightedAreaUnderROC();
      assertEquals(double3, double2, 0.01);
      
      AbstractClassifier.makeCopy(sGDText0);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.numFalsePositives(0);
      evaluation0.getClassPriors();
      String string1 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string1);
      
      double double4 = evaluation0.recall(1);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = evaluation0.incorrect();
      assertEquals(double5, double4, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.2496172247970594
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Capabilities capabilities0 = classificationViaRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.assign(testInstances1);
      Instances instances0 = testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.toCumulativeMarginDistributionString();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      evaluation0.numTrueNegatives((byte) (-48));
      SystemInUtil.addInputLine(" -1       0    \n");
      evaluation0.numFalsePositives((byte)113);
      evaluation0.setDiscardPredictions(false);
      Random.setNextRandom((-2588));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.728196308627431
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specifedclass forgeerating the classification output.\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.setNumRelationalNominal(192);
      SGDText sGDText0 = new SGDText();
      evaluation0.getRevision();
      double double0 = evaluation0.m_WithClass;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      RegressionByDiscretization.main(testInstances0.DEFAULT_WORDS);
      RegressionByDiscretization regressionByDiscretization2 = new RegressionByDiscretization();
      regressionByDiscretization1.getRevision();
      TestInstances testInstances1 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "c{RBhOZXinCP{ !9");
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double1, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_SumClassPredicted = (-45.0);
      evaluation1.setNumericPriorsFromBuffer();
      evaluation1.addNumericTrainClass(2.0, 724.2939854005);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 2.0;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      double double2 = evaluation0.numTrueNegatives((-2));
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.4486869174985209
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      textDirectoryLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!tr#by&JL2|t");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Capabilities capabilities0 = costSensitiveClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getData();
      testInstances0.setNumRelationalNominal(2);
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(2, doubleArray0);
      try { 
        evaluation0.updateStatsForPredictor((-911.37903), denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.8564909139241834
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      Instances instances0 = testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-2);
      // Undeclared exception!
      try { 
        evaluation0.recall((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.4090671857864736
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SystemInUtil.addInputLine("^F[L5kwLkSEkNW^ta\"");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("^F[L5kwLkSEkNW^ta\"");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate((-1));
      PipedReader pipedReader0 = new PipedReader();
      evaluation0.correct();
      SGD sGD0 = new SGD();
      sGD0.setDontNormalize(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      double double0 = evaluation1.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation.makeOptionString(naiveBayes0, true);
      evaluation0.addNumericTrainClass(0, 2);
      evaluation1.correct();
      ZeroR zeroR0 = new ZeroR();
      double double1 = evaluation0.unweightedMacroFmeasure();
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.739755996933373
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SystemInUtil.addInputLine("^F[L5kwLkSEkNW^ta\"");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("DyUwNKH]FOh3");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      DecisionStump decisionStump0 = new DecisionStump();
      Null null0 = new Null();
      evaluation0.equals("^F[L5kwLkSEkNW^ta\"");
      DecisionStump decisionStump1 = new DecisionStump();
      REPTree rEPTree0 = new REPTree();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      CoverTree coverTree0 = new CoverTree();
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.KBInformation();
      assertEquals(0.0, double1, 0.01);
      
      CSVLoader cSVLoader0 = new CSVLoader();
      CSVLoader cSVLoader1 = new CSVLoader();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      String string0 = Evaluation.getGlobalInfo(naiveBayesMultinomialUpdateable0);
      assertEquals("\nSynopsis for weka.classifiers.bayes.NaiveBayesMultinomialUpdateable:\n\nClass for building and using a multinomial Naive Bayes classifier. For more information see,\n\nAndrew Mccallum, Kamal Nigam: A Comparison of Event Models for Naive Bayes Text Classification. In: AAAI-98 Workshop on 'Learning for Text Categorization', 1998.\n\nThe core equation for this classifier:\n\nP[Ci|D] = (P[D|Ci] x P[Ci]) / P[D] (Bayes rule)\n\nwhere Ci is class i and D is a document.\n\nIncremental version of the algorithm.", string0);
      
      double double2 = evaluation0.m_SumPredicted;
      double double3 = evaluation0.SFEntropyGain();
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-2);
      double double4 = evaluation0.SFPriorEntropy();
      assertEquals(double4, double3, 0.01);
      
      evaluation0.addNumericTrainClass((-1.0), 0.0);
      assertEquals(Double.NaN, evaluation0.SFMeanEntropyGain(), 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.3137085980039775
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      textDirectoryLoader0.getOptions();
      textDirectoryLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!tr#by&JL2|t");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-731.6);
      doubleArray0[1] = (-731.6);
      doubleArray0[2] = (-731.6);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      double double0 = evaluation0.fMeasure(121);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.84540258476543
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getStructure();
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = (-101);
      intArray0[3] = 32;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(32, intArray0, 32);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.matthewsCorrelationCoefficient((-1));
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.meanPriorAbsoluteError();
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("preserve-order");
      testInstances0.setNumRelationalNominal((-1794835596));
      testInstances0.setNumNominalValues(20);
      testInstances0.generate("fiCst");
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "@data");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Capabilities capabilities0 = attributeSelectedClassifier0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("{O9bW7;y,&Sf(k-6");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      multiFilter0.setInputFormat(instances0);
      Capabilities capabilities1 = multiFilter0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities capabilities2 = costSensitiveClassifier0.getCapabilities();
      TestInstances.forCapabilities(capabilities2);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6828558067063366
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SystemInUtil.addInputLine("^F[L5kwLkSEkNW^ta\"");
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = testInstances0.generate("zx^5/>r\"z1");
      TestInstances testInstances1 = new TestInstances();
      IBk iBk0 = new IBk(2095);
      Capabilities capabilities0 = iBk0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      capabilities0.disableAll();
      capabilities0.supportsMaybe(capabilities1);
      testInstances2.generate("epochsTipText");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      TestInstances testInstances3 = new TestInstances();
      testInstances3.setNumRelationalNominal((-1));
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.5406561526120646
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      textDirectoryLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!tr#by&JL2|t");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-731.6);
      doubleArray0[1] = (-731.6);
      doubleArray0[2] = (-731.6);
      doubleArray0[3] = (-731.6);
      doubleArray0[4] = (-731.6);
      doubleArray0[5] = (-731.6);
      double[] doubleArray1 = new double[6];
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      DenseInstance denseInstance0 = new DenseInstance((-2.0), doubleArray0);
      double double0 = evaluation1.numFalsePositives(1428);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.matthewsCorrelationCoefficient(10);
      assertEquals(0.0, double1, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.areaUnderROC(41);
      assertEquals(0.0, evaluation2.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.5862070295659376
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      Capabilities capabilities0 = multiFilter0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.priorEntropy();
      double double2 = evaluation0.KBMeanInformation();
      assertNotEquals(double2, double1, 0.01);
      
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, ".bsi");
      double double3 = evaluation0.areaUnderROC((-381));
      assertEquals(double3, double0, 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = textDirectoryLoader0.getStructure();
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = (-101);
      intArray0[3] = 32;
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom((-101));
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.listOptions();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 32;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockRandom0;
      objectArray0[3] = (Object) serializedClassifier0;
      objectArray0[4] = (Object) 32;
      objectArray0[5] = (Object) textDirectoryLoader0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) serializedClassifier0;
      try { 
        evaluation0.evaluateModel((Classifier) serializedClassifier0, instances1, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = new TestInstances();
      testInstances2.generate(".arff");
      testInstances0.setNumRelationalNominal((-1));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DenseInstance denseInstance0 = new DenseInstance(1718);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) gaussianProcesses0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.1916014530643806
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SystemInUtil.addInputLine("^F[L5kwLkSEkNW^ta\"");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specifedclass forgeerating the classification output.\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.setNumRelationalNominal(192);
      SGDText sGDText0 = new SGDText();
      evaluation0.getRevision();
      double double0 = evaluation0.m_WithClass;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      evaluation0.correct();
      evaluation0.SFMeanEntropyGain();
      evaluation0.pctUnclassified();
      double double1 = evaluation0.m_MissingClass;
      Random.setNextRandom(1);
      Classifier classifier0 = AbstractClassifier.makeCopy(sGDText0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      RegressionByDiscretization regressionByDiscretization2 = new RegressionByDiscretization();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) instances0;
      objectArray0[1] = (Object) mockRandom0;
      objectArray0[2] = (Object) mockRandom0;
      objectArray0[3] = (Object) regressionByDiscretization1;
      objectArray0[4] = (Object) "^F[L5kwLkSEkNW^ta\"";
      objectArray0[5] = (Object) classifier0;
      objectArray0[6] = (Object) instances0;
      objectArray0[7] = (Object) regressionByDiscretization0;
      try { 
        evaluation0.crossValidateModel((Classifier) regressionByDiscretization2, instances0, 56, (java.util.Random) mockRandom0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Instances cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("-lowercase");
      SystemInUtil.addInputLine("l");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.636638945204742
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.trueNegativeRate(1);
      IBk iBk0 = new IBk();
      iBk0.pruneToK(instances0, (double[]) null, 20);
      databaseLoader0.getKeys();
      KDTree kDTree0 = new KDTree(instances0);
      CSVLoader cSVLoader0 = new CSVLoader();
      CSVLoader cSVLoader1 = new CSVLoader();
      CSVLoader cSVLoader2 = new CSVLoader();
      try { 
        cSVLoader2.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      textDirectoryLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!tr#by&JL2|t");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-731.6);
      doubleArray0[1] = (-731.6);
      doubleArray0[2] = (-731.6);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".arff";
      instances0.spliterator();
      stringArray0[2] = ".bsi";
      stringArray0[3] = "!tr#by&JL2|t";
      stringArray0[4] = "@;+`cS|{F_Y";
      stringArray0[5] = "h11Du*@LjdHm-";
      Instances.test(stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DenseInstance denseInstance0 = new DenseInstance((-731.6), doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance1);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      double double0 = evaluation0.numTruePositives(816);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.5776740846716373
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("-lowercase");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("?,L6*=>{#3Fa[tY");
      PipedReader pipedReader0 = new PipedReader(4249);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 50);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.correct();
      SGD sGD0 = new SGD();
      sGD0.setDontNormalize(false);
      evaluation1.SFSchemeEntropy();
      SGDText sGDText0 = new SGDText();
      char[] charArray0 = new char[4];
      charArray0[0] = '7';
      charArray0[1] = ']';
      char char0 = '';
      charArray0[2] = '';
      charArray0[3] = '<';
      evaluation1.num2ShortID(27, charArray0, 4249);
      C45Loader c45Loader0 = new C45Loader();
      try { 
        c45Loader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.5076316992996692
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.toCumulativeMarginDistributionString();
      databaseLoader0.setSource();
      evaluation0.avgCost();
      evaluation0.correct();
      SGD sGD0 = new SGD();
      evaluation0.SFSchemeEntropy();
      SGDText sGDText0 = new SGDText();
      Evaluation.makeOptionString(sGD0, true);
      double double0 = evaluation0.m_WithClass;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[3];
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'j';
      charArray0[2] = 'x';
      charArray0[3] = 'u';
      charArray0[4] = '3';
      charArray0[5] = ',';
      charArray0[6] = '1';
      charArray0[7] = 'l';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2), charArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SystemInUtil.addInputLine("^F[L5kwLkSEkNW^ta\"");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specifedclass forgeerating the classification output.\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      Stack<RandomSubSpace> stack0 = new Stack<RandomSubSpace>();
      instances0.containsAll(stack0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MockRandom mockRandom0 = new MockRandom(1);
      int int0 = 788;
      mockRandom0.nextLong();
      try { 
        evaluation0.crossValidateModel("<&3\u0000TFXcRU]ztO", instances0, 788, testInstances0.DEFAULT_WORDS, (java.util.Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: <&3\u0000TFXcRU]ztO
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.8725336946728466
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specifedclass forgeerating the classification output.\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiFilter multiFilter0 = new MultiFilter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+O\u0000VZ5yX!CSp&");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{%B]|yvLhV^[D7fN");
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      // Undeclared exception!
      try { 
        evaluation1.fMeasure((-1114383320));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1114383320
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.6727547966053267
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setSource();
      int[] intArray0 = new int[6];
      intArray0[0] = 109;
      intArray0[1] = 109;
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.trueNegativeRate((-3939));
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 109;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 109;
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) 109;
      // Undeclared exception!
      try { 
        iBk0.pruneToK(instances0, doubleArray0, 21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("weka.classifiers.lazy.IBk", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5107669586101957
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setSource();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumSqrErr;
      int int0 = (-3939);
      evaluation0.trueNegativeRate(5);
      IBk iBk0 = new IBk();
      iBk0.pruneToK(instances0, (double[]) null, 21);
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getKeys();
      Instances instances1 = null;
      KDTree kDTree0 = new KDTree((Instances) null);
      CSVLoader cSVLoader0 = new CSVLoader();
      CSVLoader cSVLoader1 = new CSVLoader();
      try { 
        cSVLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.8005687885639676
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SystemInUtil.addInputLine("^F[L5kwLkSEkNW^ta\"");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("zx^5/>r\"z1");
      IBk iBk0 = new IBk(2102);
      Capabilities capabilities0 = iBk0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      capabilities1.enableAllClassDependencies();
      instances0.deleteAttributeType(2102);
      Instances instances1 = testInstances0.generate();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalNominal((-1));
      evaluation0.weightedTrueNegativeRate();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      converterUtils_DataSource0.nextElement(instances0);
      Random.setNextRandom((-1216));
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Capabilities capabilities0 = attributeSelectedClassifier0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("{O9bW7;y,&Sf(k-6");
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      multiFilter0.setInputFormat(instances0);
      multiFilter0.getCapabilities();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PipedWriter pipedWriter0 = new PipedWriter();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockRandom mockRandom0 = new MockRandom();
      Instances instances1 = instances0.resampleWithWeights((java.util.Random) mockRandom0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances1);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, (-2471.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.4836450511259716
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.SFSchemeEntropy();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte)15;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)15;
      intArray0[1] = (int) (byte)15;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)9, intArray0, 32);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalsePositives((-1));
      evaluation1.setPriors(instances0);
      testInstances0.setNoClass(false);
      evaluation0.toClassDetailsString(" ");
      // Undeclared exception!
      try { 
        evaluation0.recall((byte)15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.7581179623110317
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Object[] objectArray0 = new Object[2];
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Object object0 = new Object();
      objectArray0[1] = object0;
      evaluation0.evaluateModel((Classifier) adaBoostM1_0, instances0, objectArray0);
      double double1 = evaluation0.SFMeanSchemeEntropy();
      evaluation0.rootRelativeSquaredError();
      double double2 = evaluation0.errorRate();
      assertEquals(double2, double1, 0.01);
      
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      double double3 = evaluation0.SFSchemeEntropy();
      assertNotEquals(double3, double0, 0.01);
      
      evaluation0.setPriors(instances1);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      testInstances0.setWordSeparators((String) null);
      Instances instances0 = testInstances0.generate("measureSelectionTime");
      testInstances0.setNumRelationalNominal((-201));
      SGD sGD0 = new SGD();
      sGD0.setDontNormalize(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertNotNull(doubleArray0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      IBk iBk0 = new IBk(117);
      iBk0.pruneToK(instances0, (double[]) null, 117);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertNotNull(doubleArray0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.6995275173580546
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SystemInUtil.addInputLine(" ");
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      DecisionStump decisionStump0 = new DecisionStump();
      Null null0 = new Null();
      evaluation0.equals(evaluation0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t7S?B)3sP@\"SlQA@a");
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 300.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.471269515097616
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Dqv_Sv(Dzj:<4oo>LX";
      int[] intArray0 = new int[9];
      intArray0[0] = (-2);
      intArray0[3] = 2779;
      intArray0[4] = 2779;
      intArray0[5] = (-2);
      intArray0[6] = 2779;
      intArray0[7] = 2779;
      intArray0[8] = 2779;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1189.2457299447, intArray0, 2779);
      binarySparseInstance0.dataset();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.add((Instance) binarySparseInstance0);
      evaluation1.SFSchemeEntropy();
      evaluation1.numTrueNegatives((-2));
      evaluation1.sizeOfPredictedRegions();
      evaluation1.weightedTruePositiveRate();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (-1328.434672);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) 0;
      doubleArray0[8] = (double) 0;
      try { 
        evaluation1.updateStatsForClassifier(doubleArray0, binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SystemInUtil.addInputLine("^F[L5kwLkSEkNW^ta\"");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specifedclass forgeerating the classification output.\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiFilter multiFilter0 = new MultiFilter();
      IBk iBk0 = new IBk();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.495274504689626
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toSummaryString();
      evaluation0.SFSchemeEntropy();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte)15;
      byteArray0[8] = (byte)11;
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 0.0;
      Instances instances1 = iBk0.pruneToK(instances0, doubleArray0, (-201));
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      Evaluation evaluation2 = new Evaluation(instances1, (CostMatrix) null);
      evaluation2.numFalsePositives(1);
      evaluation2.getClassPriors();
      evaluation0.setPriors(instances0);
      evaluation1.toSummaryString();
      // Undeclared exception!
      try { 
        evaluation0.recall((byte)15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.3072453886394464
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SystemInUtil.addInputLine("^F[L5kwLkSEkNW^ta\"");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      testInstances0.setMultiInstance(false);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      testInstances0.setNumRelationalNominal(192);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'_u&2<W4- 5Y}1");
      double double0 = evaluation0.matthewsCorrelationCoefficient((-2228));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.numTruePositives((-112));
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      testInstances0.setNumRelationalNominal((-201));
      double[] doubleArray0 = null;
      DenseInstance denseInstance0 = new DenseInstance((-201), (double[]) null);
      MockRandom mockRandom0 = new MockRandom();
      instances0.resampleWithWeights((java.util.Random) mockRandom0);
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      Capabilities capabilities0 = hierarchicalClusterer0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      instances0.deleteAttributeType(486);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-0.5));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      KernelEstimator kernelEstimator0 = new KernelEstimator(2295.0);
      Capabilities capabilities0 = kernelEstimator0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalNominal((-1794835593));
      testInstances1.setNumNominalValues(20);
      testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.133820697512222
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      MockRandom mockRandom0 = new MockRandom();
      instances0.resampleWithWeights((java.util.Random) mockRandom0);
      Instances.main(testInstances0.DEFAULT_WORDS);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(67);
      LWL lWL0 = new LWL();
      DecisionStump decisionStump0 = new DecisionStump();
      DecisionStump decisionStump1 = new DecisionStump();
      decisionStump1.buildClassifier(instances0);
      Evaluation.wekaStaticWrapper(decisionStump1, "@relation");
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      String string0 = evaluation0.toSummaryString("@relation", true);
      assertEquals("@relation\nTotal Number of Instances                0     \n", string0);
      
      Random.setNextRandom((-2));
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.694153494393253
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("KtsA7,z");
      Instances instances1 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumClasses(200);
      testInstances1.generate(".bsi");
      evaluation0.numFalsePositives(62);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SystemInUtil.addInputLine("^F[L5kwLkSEkNW^ta\"");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.setNumRelationalNominal(192);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'_u&2<W4- 5Y}1");
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 192;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2));
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.9261483430674589
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SystemInUtil.addInputLine("^F[L5kwLkSEkNW^ta\"");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specifedclass forgeerating the classification output.\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.setNumRelationalNominal(192);
      SGDText sGDText0 = new SGDText();
      evaluation0.getRevision();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      double double0 = evaluation0.numTrueNegatives(1);
      assertEquals(0.0, double0, 0.01);
      
      SystemInUtil.addInputLine("^F[L5kwLkSEkNW^ta\"");
      double double1 = evaluation0.numFalsePositives(84);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.1592720529128537
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getStructure();
      int[] intArray0 = new int[4];
      intArray0[1] = 32;
      intArray0[2] = 32;
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.KBMeanInformation();
      double double2 = evaluation0.rootMeanSquaredError();
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      int int0 = 4006;
      try { 
        Evaluation.handleCostOption("-h or -help\n", (-3658));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.8770565802276473
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SystemInUtil.addInputLine("^F[L5kwLkSEkNW^ta\"");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("DyUwNKH]FOh3");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      DecisionStump decisionStump0 = new DecisionStump();
      Null null0 = new Null();
      evaluation0.equals("^F[L5kwLkSEkNW^ta\"");
      DecisionStump decisionStump1 = new DecisionStump();
      REPTree rEPTree0 = new REPTree();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      CoverTree coverTree0 = new CoverTree();
      evaluation0.SFSchemeEntropy();
      evaluation0.KBInformation();
      CSVLoader cSVLoader0 = new CSVLoader();
      CSVLoader cSVLoader1 = new CSVLoader();
      cSVLoader1.getFieldSeparator();
      SystemInUtil.addInputLine(".csv");
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Evaluation.getGlobalInfo(naiveBayesMultinomialUpdateable0);
      Evaluation.getGlobalInfo(decisionStump1);
      double double0 = evaluation0.m_SumPredicted;
      evaluation0.SFEntropyGain();
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 488.0);
      evaluation0.relativeAbsoluteError();
      try { 
        Evaluation.evaluateModel((Classifier) rEPTree0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.trees.REPTree:
         // 
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf (default 2).
         // -V <minimum variance for split>
         // \tSet minimum numeric class variance proportion
         // \tof train variance for split (default 1e-3).
         // -N <number of folds>
         // \tNumber of folds for reduced error pruning (default 3).
         // -S <seed>
         // \tSeed for random data shuffling (default 1).
         // -P
         // \tNo pruning.
         // -L
         // \tMaximum tree depth (default -1, no maximum)
         // -I
         // \tInitial class value count (default 0)
         // -R
         // \tSpread initial count over all class values (i.e. don't use 1 per value)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.5876527951616035
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      testInstances0.setNumRelationalNominal((-201));
      DenseInstance denseInstance0 = new DenseInstance((-201), (double[]) null);
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      Capabilities capabilities0 = hierarchicalClusterer0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      instances0.deleteAttributeType(486);
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      DenseInstance denseInstance1 = new DenseInstance((-3367.3809433258293), (double[]) null);
      evaluation0.numFalsePositives((-2));
      evaluation0.matthewsCorrelationCoefficient(481);
      evaluation0.areaUnderROC(486);
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      try { 
        evaluation0.evaluateModelOnce((Classifier) randomSubSpace0, (Instance) denseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      Capabilities capabilities0 = multiFilter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("%h");
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.8404427248166062
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SystemInUtil.addInputLine("^F[L5kwLkSEkNW^ta\"");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("zx^5/>r\"z1");
      IBk iBk0 = new IBk(2102);
      Capabilities capabilities0 = iBk0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      capabilities1.enableAllClassDependencies();
      instances0.deleteAttributeType(2102);
      Instances instances1 = testInstances0.generate();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      TestInstances.forCapabilities(capabilities1);
      testInstances0.generate("minNumTipText");
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getNoPruning");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision(2779);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2779
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.7999413850842148
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("-lowercase");
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = null;
      evaluation0.toMatrixString((String) null);
      evaluation0.pctUnclassified();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1720.4, (int[]) null, (-1));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance1.attributeSparse(1010);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.034079085020153
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      Instances instances0 = testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.kappa();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Capabilities capabilities0 = attributeSelectedClassifier0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("{O9bW7;y,&Sf(k-6");
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      multiFilter0.setInputFormat(instances0);
      Capabilities capabilities1 = multiFilter0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 491, (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 491
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      textDirectoryLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!tr#by&JL2|t");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-731.6);
      doubleArray0[1] = (-731.6);
      doubleArray0[2] = (-731.6);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 55, (-2063.85));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.918815296819859
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      Instances instances0 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.878119976013433
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Capabilities capabilities0 = attributeSelectedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("{O9bW7;y,&Sf(k-6");
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      Capabilities capabilities1 = multiFilter0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Capabilities capabilities2 = costSensitiveClassifier0.getCapabilities();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Attribute attribute0 = new Attribute("@relation", vector0);
      capabilities2.test(attribute0, false);
      testInstances0.generate("import weka.core.Capabilities;\n");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.toSummaryString("`cC<HWsE0'/", false);
      Random.setNextRandom(2);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.6968561896360408
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("KtsA7W,z");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate((-1));
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      IBk iBk0 = new IBk();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      Instances instances1 = new Instances(instances0);
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation1 = new Evaluation(instances1, costMatrix0);
      CSVLoader cSVLoader0 = new CSVLoader();
      BufferedReader bufferedReader1 = new BufferedReader(pipedReader0, 1);
      try { 
        bufferedReader1.ready();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.3099760230105293
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!tr#by&JL2|t");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.693147181;
      doubleArray0[1] = 1625.0443294;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1133.076007);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedTrueNegativeRate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.693147181, doubleArray0);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.30045221348672
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      textDirectoryLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!tr#by&JL2|t");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-731.6);
      doubleArray0[1] = (-731.6);
      doubleArray0[2] = (-731.6);
      doubleArray0[3] = (-731.6);
      doubleArray0[4] = (-731.6);
      doubleArray0[5] = (-731.6);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-731.6);
      doubleArray1[1] = (-731.6);
      doubleArray1[2] = (-731.6);
      doubleArray1[3] = (-731.6);
      doubleArray1[4] = (-731.6);
      doubleArray1[5] = (-731.6);
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, (-731.6));
      evaluation0.weightedTrueNegativeRate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1173.861, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray1, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.486476853275102
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SystemInUtil.addInputLine("^F[L5kwLkSEkNW^ta\"");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setNumRelationalNominal((-1));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H7ynIdS<xZq");
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.092883882347058
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SystemInUtil.addInputLine("^F[L5kwLYkSEkNW^ta\"");
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(">V!**-jE");
      DecisionStump decisionStump0 = new DecisionStump();
      Null null0 = new Null();
      DecisionStump decisionStump1 = new DecisionStump();
      AbstractClassifier.makeCopy(decisionStump1);
      REPTree rEPTree0 = new REPTree();
      CoverTree coverTree0 = new CoverTree();
      CSVLoader cSVLoader0 = new CSVLoader();
      CSVLoader cSVLoader1 = new CSVLoader();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Evaluation.getGlobalInfo(naiveBayesMultinomialUpdateable0);
      try { 
        Evaluation.evaluateModel("@data", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name @data.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
      CoverTree coverTree0 = new CoverTree();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      assertFalse(linearNNSearch0.getSkipIdentical());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.5223099245009752
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SystemInUtil.addInputLine("^F[L5kwLkSEkNW^ta\"");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("^F[L5kwLkSEkNW^ta\"");
      SGDText sGDText0 = new SGDText();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_WithClass;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      RegressionByDiscretization.main(testInstances0.DEFAULT_WORDS);
      RegressionByDiscretization regressionByDiscretization2 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization3 = new RegressionByDiscretization();
      regressionByDiscretization3.getRevision();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1278.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-813.7027573557882);
      doubleArray0[7] = (double) 2;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getHeader();
      evaluation0.priorEntropy();
      evaluation0.weightedAreaUnderPRC();
      MockRandom mockRandom0 = new MockRandom(1L);
      try { 
        evaluation0.crossValidateModel((Classifier) regressionByDiscretization1, instances0, 1, (java.util.Random) mockRandom0, (Object[]) regressionByDiscretization0.TAGS_ESTIMATOR);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setNumRelationalNominal((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      double double0 = evaluation1.totalCost();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.4884363736922466
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      IBk iBk0 = new IBk((-2));
      Capabilities capabilities0 = iBk0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.KBRelativeInformation();
      double double1 = evaluation1.priorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.KBMeanInformation();
      assertEquals(double2, double0, 0.01);
      
      evaluation0.getHeader();
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.8023336173632405
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.updateNumericScores((double[]) null, (double[]) null, (-1.849349681833065));
      double double0 = evaluation0.weightedTrueNegativeRate();
      Object[] objectArray0 = new Object[2];
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      double double1 = evaluation0.numTrueNegatives((-286));
      evaluation0.sizeOfPredictedRegions();
      double double2 = evaluation0.weightedTruePositiveRate();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-286);
      intArray0[1] = (-286);
      intArray0[2] = (-286);
      intArray0[3] = (-286);
      intArray0[4] = (-286);
      intArray0[5] = (-286);
      intArray0[6] = (-286);
      intArray0[7] = (-286);
      double double3 = evaluation1.trueNegativeRate((-286));
      assertEquals(0.0, double3, 0.01);
      
      evaluation1.makeDistribution(Double.NaN);
      double double4 = evaluation1.falsePositiveRate(2146);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte)15;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)15;
      intArray0[1] = (int) (byte) (-98);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)9, intArray0, 32);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((byte)9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.4953562846867317
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      testInstances0.setNumRelationalNominal((-201));
      String[] stringArray0 = new String[7];
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.correct();
      SGD sGD0 = new SGD();
      sGD0.setDontNormalize(true);
      evaluation0.SFSchemeEntropy();
      SGDText sGDText0 = new SGDText();
      evaluation0.getRevision();
      double double0 = evaluation0.m_WithClass;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      RegressionByDiscretization.main(stringArray0);
      RegressionByDiscretization regressionByDiscretization2 = new RegressionByDiscretization();
      regressionByDiscretization2.getRevision();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-201);
      doubleArray0[6] = (double) 2;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      principalComponents0.setTransformBackToOriginal(false);
      double double1 = evaluation0.trueNegativeRate(398);
      double[] doubleArray1 = evaluation0.makeDistribution(0.0);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray1, 0.01);
      
      double double2 = evaluation0.falsePositiveRate(7);
      assertEquals(double2, double1, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double3 = evaluation1.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.3109290309357102
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tUses the specified class for generating the classification output.\n");
      testInstances0.setNumRelationalNominal((-201));
      DenseInstance denseInstance0 = new DenseInstance((-201), (double[]) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce(0.0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&K");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      textDirectoryLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!tr#by&JL2|t");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Stack<RandomSubSpace> stack0 = new Stack<RandomSubSpace>();
      double[] doubleArray0 = null;
      DenseInstance denseInstance0 = new DenseInstance((-52.0), (double[]) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce((double) (-1), (Instance) denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.listOptions();
      try { 
        Evaluation.wekaStaticWrapper(decisionStump0, "hd\",j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Evaluation.makeOptionString((Classifier) null, true);
      int[] intArray0 = new int[8];
      intArray0[0] = 1022;
      intArray0[1] = 75;
      intArray0[2] = (-1995440801);
      intArray0[3] = (-417);
      intArray0[4] = (-193);
      intArray0[5] = 23;
      intArray0[6] = (-2057);
      intArray0[7] = 745;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      assertEquals(" Implements Gaussian processes for regression without hyperparameter-tuning. To make choosing an appropriate noise level easier, this implementation applies normalization/standardization to the target attribute as well as the other attributes (if  normalization/standardizaton is turned on). Missing values are replaced by the global mean/mode. Nominal attributes are converted to binary ones. Note that kernel caching is turned off if the kernel used implements CachedKernel.", gaussianProcesses0.globalInfo());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.0613632638474337
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("ODDSPOywER");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate((-1));
      PipedReader pipedReader0 = new PipedReader();
      evaluation0.correct();
      SGD sGD0 = new SGD();
      sGD0.setDontNormalize(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("lnFactorial");
      Evaluation evaluation2 = new Evaluation(instances1);
      TestInstances testInstances2 = new TestInstances();
      testInstances1.setNumRelationalNominal(6);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 105
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.0560913758450368
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedMatthewsCorrelation();
      double double0 = evaluation1.weightedAreaUnderPRC();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      double double1 = evaluation1.KBRelativeInformation();
      assertEquals(Double.NaN, double1, 0.01);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation1.addNumericTrainClass((-1676.698437), 488.0);
      double double2 = evaluation1.correct();
      assertEquals(0.0, double2, 0.01);
      
      ZeroR zeroR0 = new ZeroR();
      evaluation1.unweightedMacroFmeasure();
      evaluation0.weightedFalseNegativeRate();
      double double3 = evaluation1.KBMeanInformation();
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, evaluation1.weightedFalseNegativeRate(), 0.01);
      
      double double4 = evaluation0.avgCost();
      assertEquals(double4, double3, 0.01);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.1250739323361079
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      RandomTree randomTree0 = new RandomTree();
      LogitBoost logitBoost0 = new LogitBoost();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "7`;GY!;Ya";
      stringArray0[1] = "I7C";
      stringArray0[2] = "JkeF~Mg";
      stringArray0[3] = ".koml";
      stringArray0[4] = "Priors disabled, cannot print complexity statistics!";
      logitBoost0.getOptions();
      stringArray0[5] = "whither";
      stringArray0[6] = "tU]R]*wy^";
      stringArray0[7] = "s{j0\"mp$=";
      stringArray0[8] = "j\"p5";
      AbstractClassifier.runClassifier(logitBoost0, stringArray0);
      String[] stringArray1 = new String[0];
      try { 
        Evaluation.evaluateModel((Classifier) randomTree0, stringArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.trees.RandomTree:
         // 
         // -K <number of attributes>
         // \tNumber of attributes to randomly investigate
         // \t(<0 = int(log_2(#attributes)+1)).
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf.
         // -S <num>
         // \tSeed for random number generator.
         // \t(default 1)
         // -depth <num>
         // \tThe maximum depth of the tree, 0 for unlimited.
         // \t(default 0)
         // -N <num>
         // \tNumber of folds for backfitting (default 0, no backfitting).
         // -U
         // \tAllow unclassified instances.
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      textDirectoryLoader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!tr#by&JL2|t");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-731.6);
      doubleArray0[1] = (-731.6);
      doubleArray0[2] = (-731.6);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DenseInstance denseInstance0 = new DenseInstance((-731.6), doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance1);
      IBk iBk0 = new IBk();
      AbstractClassifier.makeCopy(iBk0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) iBk0, (Instance) denseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Instances instances0 = null;
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
