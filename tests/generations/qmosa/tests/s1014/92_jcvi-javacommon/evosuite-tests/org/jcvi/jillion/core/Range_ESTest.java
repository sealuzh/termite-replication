/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 06:23:53 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=4.0376640149138785
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(2147483647L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.ofLength(2147483647L);
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range range2 = range0.intersection(range1);
      range2.intersects(range1);
      range1.getLength();
      range1.toString();
      Range range3 = Range.of(0L);
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.parseRange("[ 0 .. 2147483646 ]/0B", range_CoordinateSystem1);
      Range range4 = Range.of(2147483647L);
      range4.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range3.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.63893636233514
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.of((-257L), (-257L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of((-257L));
      Object object0 = new Object();
      Long long0 = new Long(2147483647L);
      Range range0 = Range.of((-2145759188L), (-257L));
      range0.equals((Object) null);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Range.of((-257L), (-2145759188L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.323100447758692
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of(4294967296L, 4294967296L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      boolean boolean0 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.6215078522476016
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775553L);
      Range range1 = Range.of(9223372036854775553L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      Range range2 = Range.ofLength(9223372036854775553L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(range2);
      assertSame(range2, range0);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.616798828830919
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775553L);
      Range range1 = Range.of(9223372036854775553L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      Range range2 = Range.ofLength(9223372034707289772L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range2.equals(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      List<Range> list1 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list1.contains(range1));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.5951101092382203
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2351L), (-937L));
      List<Range> list0 = range0.split(1L);
      // Undeclared exception!
      range0.complementFrom(list0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2402880620543777
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = 2166L;
      Range.of(2166L);
      Object object0 = new Object();
      Long long1 = new Long((-257L));
      Range.CoordinateSystem range_CoordinateSystem0 = null;
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 4294967294L, (-257L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3589913857537868
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-16L));
      Range range0 = Range.of((-16L), (-16L));
      Range range1 = Range.of((-16L), (-16L));
      Object object2 = new Object();
      range1.equals(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.8309813934310406
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-4048L);
      Range range1 = Range.of((-4048L), (-4048L));
      range0.startsBefore(range1);
      range1.intersects(range0);
      Range range2 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range2);
      List<Range> list1 = range0.complementFrom(list0);
      long long1 = (-1546L);
      Range range3 = Range.of((-1546L), (-1546L));
      range3.getLength();
      range2.startsBefore(range2);
      // Undeclared exception!
      try { 
        range1.complementFrom(list1);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4048 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.340986344011985
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "[M+TQ\"v";
      long long0 = 9223372036854775807L;
      Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = (-3278L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-3278L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3279 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.939126458645178
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(4294967295L);
      long long0 = range0.getLength();
      assertEquals(4294967295L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 4294967295L);
      Range range1 = range_Builder0.build();
      Range range2 = Range.of(4294967295L, 9223372036854775551L);
      Range range3 = Range.ofLength(4294967295L);
      range2.equals(range0);
      List<Range> list0 = range2.complement(range1);
      List<Range> list1 = range3.complementFrom(list0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(list1.contains(range2));
      assertEquals(1, list1.size());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=4.133216383999743
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of((-257L), 4294967295L);
      Range range1 = Range.of(1417L);
      range0.complement(range1);
      Range range2 = Range.ofLength(1417L);
      Range range3 = range1.intersection(range2);
      Range.Builder range_Builder0 = new Range.Builder(1417L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-3217L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.build();
      Object object0 = new Object();
      range3.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=4.1279704514738444
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of((-257L), 4294967295L);
      Range range1 = Range.of(1417L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
      
      Range range2 = Range.ofLength(1417L);
      Range range3 = range1.intersection(range2);
      Range.Builder range_Builder0 = new Range.Builder(1417L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-3217L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range4 = range_Builder2.build();
      Range range5 = Range.of((-6621L), 4294967295L);
      range3.equals(range3);
      assertTrue(range3.isEmpty());
      assertNotSame(range2, range4);
      assertFalse(range3.equals((Object)range5));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.5407820502606326
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = 4422L;
      Range range0 = Range.of((-3355L));
      long long1 = 9223372036854775807L;
      Range range1 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range2.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3355 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.816272273960096
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = new Object();
      Long long0 = new Long((-257L));
      Range range0 = Range.of(4294967295L, 9223372036854775554L);
      range0.equals("The first parameter in the comparison is null.");
      Range range1 = Range.of(1102L);
      range1.intersection(range0);
      Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-257L), 255L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.317922492902887
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(65535L, 65535L);
      Object object1 = new Object();
      Range range1 = Range.of(679L, 65535L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.6688526509834074
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = new Object();
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Long.valueOf(1L);
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      long long1 = 760L;
      Range.of(760L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = 58L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 58L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=4.070778401476157
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(1696L, 1696L);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem0, (-493L), (-493L));
      range0.intersects(range1);
      Range range2 = range1.intersection(range0);
      range2.getBegin();
      range0.isSubRangeOf(range1);
      range2.equals((Object) null);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 255L, 4422L);
      Range range3 = Range.of(range_CoordinateSystem1, (-493L), (-1L));
      Range range4 = range_Builder0.build();
      range4.complement(range3);
      range_Builder0.build();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem1, 4422L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2933577899040096
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.shift(4294967295L);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range1);
      Long long0 = new Long(4294967295L);
      long long1 = 1L;
      range_Builder0.shift(1L);
      String string0 = "K;PV";
      // Undeclared exception!
      try { 
        Range.parseRange("K;PV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse K;PV into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.612674376996636
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(4294967295L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(1987L, 4294967295L);
      Range range2 = Range.of(0L);
      assertFalse(range2.isEmpty());
      
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=4.192046492197117
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(761L);
      range0.isSubRangeOf(range1);
      range0.startsBefore(range1);
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 255L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-1895L), 4370L);
      range_Builder0.build();
      range0.complement(range2);
      Range.Builder range_Builder2 = range_Builder1.copy();
      range_Builder2.build();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem2, 4294967294L, 4294967294L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.868235067807475
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      long long0 = (-2787L);
      Range range1 = Range.of((-2787L), 1566L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = range_Builder0.build();
      range2.equals(range0);
      Range.of(2147483647L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-6L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.7221963782233036
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Range range1 = Range.of((-1364L), (-1066L));
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3976800595209387
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of((-14L), 9961L);
      String string0 = "k\\u vY%=~.";
      Long.getLong(string0);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.340986344011985
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.of(4294967295L, 4294967295L);
      long long0 = 32767L;
      long long1 = 9223372036854775807L;
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.shift(9223372036854775807L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.728284324121524
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of((-255L), 4294967295L);
      Range.of((-137L), 0L);
      Range.of(1987L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=4.012311623435235
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(1696L, 1696L);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1697L, long0);
      
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem0, (-493L), (-493L));
      boolean boolean0 = range0.intersects(range1);
      Range range2 = range1.intersection(range0);
      boolean boolean1 = range0.isSubRangeOf(range1);
      boolean boolean2 = range0.startsBefore(range1);
      assertTrue(boolean2 == boolean0);
      
      Range range3 = Range.of(1696L, 4422L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complementFrom(linkedList0);
      range3.complementFrom(list0);
      Range range4 = Range.of((-3484L));
      assertFalse(range4.isEmpty());
      
      Range.of(983L, 1640L);
      boolean boolean3 = range2.equals(range1);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1517986823729784
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.8581790478040943
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of((-255L), 4294967295L);
      range0.getEnd();
      Range range1 = Range.of((-255L), 4294967295L);
      Range range2 = range1.intersection(range0);
      range0.equals(range1);
      Range.CoordinateSystem.values();
      Range range3 = range0.intersection(range1);
      Range range4 = Range.of(487L);
      range2.isSubRangeOf(range1);
      Range.Builder range_Builder0 = new Range.Builder(range4);
      Range.Builder range_Builder1 = new Range.Builder(range3);
      Range.Builder range_Builder2 = range_Builder1.contractEnd((-32768L));
      range_Builder2.expandBegin(2147483635L);
      range_Builder2.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, (-2797L), 4294967295L);
      assertFalse(range_Builder3.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.8216679302182865
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-3355L));
      long long0 = 4422L;
      range0.endsBefore(range0);
      range0.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-1327L), (-162L));
      long long1 = 9223372036854775807L;
      Range range1 = Range.of(9223372036854775807L);
      range1.isSubRangeOf(range0);
      range1.startsBefore(range0);
      range1.equals(range_CoordinateSystem0);
      long long2 = (-4012L);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-4012L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=4.069590062141886
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(1696L, 1696L);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = new Long(1696L);
      long long1 = range0.getBegin();
      assertEquals(1696L, long1);
      
      Range range1 = Range.of(range_CoordinateSystem0, (-493L), (-493L));
      range0.intersects(range1);
      Range.of(range_CoordinateSystem0, 1696L, 1696L);
      Range range2 = Range.of(1696L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      boolean boolean1 = range0.startsBefore(range1);
      assertTrue(boolean1 == boolean0);
      
      Range range3 = Range.of(1696L, 4422L);
      assertFalse(range3.isEmpty());
      assertFalse(range3.equals((Object)range2));
      
      Range.of((-3484L));
      Range range4 = Range.of(983L, 1615L);
      range0.equals(range4);
      assertFalse(range0.isEmpty());
      assertNotSame(range0, range3);
      
      Range range5 = Range.ofLength(889L);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.6765558459055696
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of((-255L), 4294967295L);
      range0.getEnd();
      Range range1 = Range.of((-106L), 4294967295L);
      range1.getEnd();
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.isSubRangeOf(range0);
      range0.toString(range_CoordinateSystem0);
      Object object1 = new Object();
      range1.equals(range0);
      Range range2 = range0.intersection(range1);
      range2.getLength();
      range2.toString();
      // Undeclared exception!
      try { 
        Range.ofLength((-483L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.6392278113052785
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of((-255L), 4294967295L);
      range0.getEnd();
      Range range1 = Range.of((-106L), 4294967295L);
      Range range2 = range1.intersection(range0);
      range0.equals(range1);
      range2.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem.values();
      Range.of(range_CoordinateSystem0, (-937L), (-255L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294967295L, 2147482276L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.7240993282188923
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(1696L, 1696L);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem0, (-493L), (-493L));
      range0.intersects(range1);
      Range range2 = range1.intersection(range0);
      range2.getBegin();
      range1.equals("S\"");
      range1.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 374L, 569L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, 255L, 9223372036854775807L);
      range_Builder0.build();
      range1.complement(range2);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem3, 1L, 2147483647L);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.3035770196432024
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Long long0 = new Long(0L);
      Range range0 = Range.of(0L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3331942155871506
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(4294967295L);
      Object object1 = null;
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(21L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.947628652233622
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.of((-1330L));
      Range range0 = Range.ofLength(9994L);
      Range range1 = Range.ofLength(127L);
      range1.startsBefore(range0);
      String string0 = "\\|wJ";
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.ofLength(9994L);
      List<Range> list0 = range1.complement(range0);
      range2.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.of(9966L, 3943L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.994687731994249
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = range_Builder0.shift(2350L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder2.build();
      Range.of(2147486036L);
      Range range1 = Range.of((-1356L));
      Range range2 = range1.intersection(range0);
      range0.isSubRangeOf(range2);
      range_Builder0.contractEnd(4294967295L);
      Range.Comparators.values();
      range_Builder1.build();
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.io.IOUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.io.IOUtil into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.7628078066734667
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(1696L, 1696L);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.getBegin();
      Range range1 = range0.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(1696L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      range0.isSubRangeOf(range1);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("NSeE^w`c6-3IZJgH l", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.7988963664790307
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of((-257L), 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.shift(32767L);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(32767L, 32767L);
      Long long0 = new Long(32767L);
      range_Builder1.shift((-257L));
      range1.endsBefore(range1);
      range1.startsBefore(range0);
      range1.equals(range_Builder1);
      // Undeclared exception!
      try { 
        Range.ofLength((-257L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      range_Builder0.expandEnd((-785L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.906422375769874
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-559L), 2147483647L);
      Range range1 = Range.of(2147483647L);
      Range range2 = range0.intersection(range1);
      range2.toString();
      range0.toString(range_CoordinateSystem0);
      range0.getEnd();
      Range.of(range_CoordinateSystem1, 2147483647L, 2147483646L);
      Range.Builder range_Builder0 = new Range.Builder(151L);
      range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(linkedList0);
      range_Builder0.expandBegin(2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange("inputstream can not be null", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse inputstream can not be null into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.2838685127595846
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = (-16L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 127L;
      Range range0 = Range.of(range_CoordinateSystem0, (-14L), 127L);
      range0.getBegin();
      range0.equals("3/I");
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf(";:28]JIrfg7;6+ir.<x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.;:28]JIrfg7;6+ir.<x
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.730045056690737
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of((-16L), (-14L));
      range0.equals((Object) null);
      Range range1 = Range.of((-223L), 2147483647L);
      range1.intersection(range0);
      long long0 = 132L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-14L), 132L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      long long1 = (-506L);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(179L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=4.089978602148625
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of((-257L), 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(32767L);
      Range.Builder range_Builder1 = range_Builder0.shift(32767L);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder1.contractBegin(2314L);
      range0.startsBefore(range1);
      range1.toString();
      Range.Builder range_Builder3 = new Range.Builder(4294967295L);
      Range range2 = range_Builder2.build();
      range_Builder3.copy();
      range0.isSubRangeOf(range2);
      Range range3 = Range.ofLength(32767L);
      Range.of((-128L));
      range3.intersection(range1);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.7253977090992656
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      Long long0 = new Long((-257L));
      Range range1 = Range.of(4294967295L, 9223372036854775554L);
      assertFalse(range1.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range2 = range_Builder1.build();
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.4576633869013826
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.of((-660L), 32767L);
      // Undeclared exception!
      try { 
        Range.ofLength((-660L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.674767833203746
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.of((-3355L), 4422L);
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(4422L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.265251799564302
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(2166L);
      Object object0 = new Object();
      Long long0 = new Long((-257L));
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range1 = Range.of(2166L);
      range1.intersection(range0);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.3264610833314743
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of(4294967295L, 4294967295L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3973290824613014
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range range1 = Range.of(11L, 3634L);
      range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.312778700525052
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of(4294967295L, 4294967295L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range0.equals(object6);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.675816398133622
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of((-3059L), (-257L));
      Range range1 = Range.of((-4084L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.607700099865548
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of((-257L), (-257L));
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-553L);
      Range range1 = Range.of((-553L));
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-257L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.1337008759466283
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      range0.getLength();
      long long0 = range0.getLength();
      assertEquals(4294967295L, long0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean0 = range0.equals(object4);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.6077110996896753
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L, 4422L);
      range1.intersects(range0);
      range1.intersection(range0);
      range0.endsBefore(range0);
      range0.equals(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1416L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.9202503951354264
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of((-257L), 4294967295L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
      
      Range range1 = Range.ofLength(1417L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
      
      Range.Builder range_Builder0 = new Range.Builder(1417L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-3217L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range3 = range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder(range3);
      range_Builder0.contractEnd(1417L);
      Range range4 = range_Builder3.build();
      assertNotSame(range4, range1);
      assertSame(range4, range3);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=4.065948447804965
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of((-257L), 4294967295L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-257L));
      Range range2 = Range.ofLength(4294967295L);
      Range range3 = range1.intersection(range2);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertTrue(range3.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-3217L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range4 = range_Builder2.build();
      Range range5 = Range.of(4294967295L, 4294967295L);
      //  // Unstable assertion: assertTrue(range5.isEmpty());
      
      Long long0 = new Long(761L);
      List<Range> list0 = range4.complement(range2);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range4));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.7616131242210282
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Long long0 = new Long(38L);
      Range range0 = Range.ofLength(9223372036854775259L);
      Long long1 = Long.valueOf(38L);
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(38L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      Range range1 = Range.of(38L);
      Range range2 = range0.intersection(range1);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
      
      Range.ofLength(9223372036854775259L);
      Range.Builder range_Builder2 = range_Builder0.contractEnd(38L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range3 = range_Builder2.build();
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.5275936417220635
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = (-559L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-559L), 2147483636L);
      range0.getEnd();
      range0.getEnd(range_CoordinateSystem0);
      range0.startsBefore(range0);
      range0.getEnd();
      range0.equals(range0);
      String string0 = "offset must be >= 0";
      // Undeclared exception!
      try { 
        Range.parseRange("offset must be >= 0", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse offset must be >= 0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.8169873984876914
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(583L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.shift(4294967295L);
      Range range1 = Range.ofLength(583L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Long long0 = new Long((-257L));
      range1.intersects(range0);
      Range range2 = Range.of((-257L), 4294967295L);
      range0.startsBefore(range2);
      range1.intersects(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-2703L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.578124145680547
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.of(0L, 0L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.ofLength(0L);
      Object object2 = new Object();
      Object object3 = new Object();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.CoordinateSystem) null, (-2216L), 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=4.2155798693443804
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(1696L, 1696L);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(1697L, long0);
      
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem0, (-493L), (-493L));
      range0.endsBefore(range0);
      Range range2 = range1.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range2.getBegin();
      range2.getBegin();
      boolean boolean0 = range0.isSubRangeOf(range1);
      range0.startsBefore(range1);
      boolean boolean1 = range1.equals("S\"");
      //  // Unstable assertion: assertFalse(boolean1);
      
      range1.getBegin();
      Range range3 = Range.ofLength(1697L);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      
      boolean boolean2 = range1.isSubRangeOf(range0);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      
      List<Range> list0 = range0.split(1L);
      Range range4 = Range.of((-493L));
      List<Range> list1 = range1.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list1.contains(range0));
      
      range4.complement(range1);
      Range range5 = range4.asRange();
      //  // Unstable assertion: assertTrue(range4.equals((Object)range1));
      //  // Unstable assertion: assertNotSame(range5, range1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.298155571027304
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range0 = Range.of((-128L), 1L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.7769984453909804
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of((-16L), 1993L);
      Range range1 = Range.of((-16L));
      Range range2 = Range.ofLength(250L);
      Range range3 = range2.intersection(range0);
      range3.intersects(range1);
      Range.Builder range_Builder0 = new Range.Builder((-804L), (-16L));
      range_Builder0.shift((-16L));
      Range range4 = range_Builder0.build();
      assertFalse(range4.equals((Object)range3));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.8264964404542163
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(1417L);
      Range range1 = Range.ofLength(1417L);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(1417L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-3217L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range3 = range_Builder2.build();
      boolean boolean0 = range0.intersects(range2);
      Range range4 = Range.ofLength(761L);
      range_Builder0.copy();
      boolean boolean1 = range2.equals(range4);
      assertTrue(range2.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(range0.isEmpty());
      
      Range range5 = range_Builder2.build();
      assertNotSame(range5, range1);
      assertSame(range5, range3);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=4.102741388312281
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      range0.complement(range0);
      Range range1 = Range.ofLength(1417L);
      Range range2 = range0.intersection(range1);
      range2.intersects(range0);
      Range.of((-6621L), 4294967295L);
      Range range3 = Range.ofLength(4294967295L);
      boolean boolean0 = range2.equals(range3);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.629266424471226
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775553L);
      Range range1 = Range.of(9223372036854775553L);
      range0.complement(range1);
      Range range2 = Range.ofLength(9223372034707289772L);
      range0.intersection(range2);
      Range.Builder range_Builder0 = new Range.Builder(108L);
      long long0 = (-3217L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2252L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.3138503571055704
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Long long0 = new Long(0L);
      long long1 = 9223372036854775259L;
      Range range0 = Range.ofLength(9223372036854775259L);
      Long long2 = Long.valueOf(0L);
      range0.equals(long2);
      long long3 = 2314L;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      long long4 = (-493L);
      range_Builder0.contractBegin((-493L));
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = (-342L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-342L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -342 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=4.090720610659975
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of((-257L), 4294967295L);
      Range range1 = Range.of(1954249L);
      Range range2 = Range.ofLength(1L);
      range1.startsBefore(range0);
      Range range3 = Range.ofLength(1954249L);
      range2.isSubRangeOf(range3);
      range1.complement(range2);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.3127787005250524
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(455L, 4294967295L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range0.equals(object3);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.429893824224806
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of((-288L), 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder((-288L), 2147483647L);
      Range.Builder range_Builder2 = new Range.Builder((-288L), 2147483647L);
      Range range1 = range_Builder2.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.1584024064620357
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(1L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(65535L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.529087309119475
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = 455L;
      Range range0 = Range.of(1L, 1L);
      Range range1 = Range.ofLength(455L);
      range0.isSubRangeOf(range1);
      range0.startsBefore(range1);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.456908815346539
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = 4294967295L;
      long long1 = (-257L);
      Range.of((-257L), 4294967295L);
      long long2 = 32767L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.555787842659382
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of(4294967295L, 4294967295L);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      
      Object object3 = new Object();
      Object object4 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-32768L));
      Range.Builder range_Builder2 = range_Builder1.expandBegin((-32768L));
      range_Builder2.build();
      Range range1 = range_Builder1.build();
      //  // Unstable assertion: assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.689666661881691
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-3355L));
      long long0 = 4422L;
      range0.endsBefore(range0);
      range0.intersection(range0);
      long long1 = (-9223372036854775788L);
      Range range1 = Range.of((-9223372036854775788L));
      range1.isSubRangeOf(range0);
      range1.startsBefore(range0);
      range1.equals(range_CoordinateSystem0);
      long long2 = (-4012L);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-4012L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.6389893394751116
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of((-16L), (-14L));
      String string0 = "k\\uav]%=~.";
      range0.equals(string0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of((-1269L));
      range0.endsBefore(range1);
      String string1 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("RB", string1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.415633560111164
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = new Object();
      Range.of(65537L, 65537L);
      Object object1 = new Object();
      Range.of(65537L);
      Long long0 = new Long(761L);
      assertEquals(761L, (long)long0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.6832335342075195
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      Range range0 = Range.of((-2147483648L), (-258L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.681276458484047
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-559L), 2147483629L);
      range0.getEnd();
      Range range1 = Range.of((-2147483648L), 701L);
      range1.getEnd(range_CoordinateSystem0);
      range0.getEnd(range_CoordinateSystem0);
      range0.intersects(range0);
      range1.getEnd();
      range1.intersection(range0);
      range1.equals(range0);
      String string0 = "length can not be negative";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("length can not be negative");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.length can not be negative
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.568691922747046
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.of(255L, 4294967553L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_CoordinateSystem0, 3022L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.7615350015930415
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L), 141L);
      long long1 = 24L;
      Range range1 = Range.of(24L, 24L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 24L, 2147483647L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.2671143019073323
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object object0 = new Object();
      Range.of(455L, 4294967274L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.7072632192700063
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L, 0L);
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
      
      Range.of((-3059L), (-3059L));
      Range range2 = Range.of(2147483647L);
      boolean boolean0 = range0.equals(range2);
      assertSame(range0, range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.345527107685876
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.shift((-1L));
      Range range1 = range_Builder1.build();
      Long long0 = new Long(3044L);
      range1.startsBefore(range0);
      range1.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.2622243017037382
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-493L), (-493L));
      // Undeclared exception!
      try { 
        Range.of(3050L, (-2424L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.9838175105700264
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of((-16L), (-16L));
      Range range1 = Range.of(1207L);
      range1.complement(range0);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 9991L;
      Range range2 = Range.of(range_CoordinateSystem0, 1207L, 9991L);
      range0.startsBefore(range2);
      Object object0 = new Object();
      Object object1 = new Object();
      range2.intersects(range1);
      range1.equals(object1);
      Range.of((-16L));
      range0.complement(range2);
      range2.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem1.toString();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Residue Based", range_CoordinateSystem3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Residue Based into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.178008108691081
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      long long0 = (-128L);
      Range range0 = Range.of((-128L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.6577665964263764
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-2690L);
      Range range0 = Range.of(range_CoordinateSystem0, (-2690L), (-2690L));
      Range range1 = Range.of((-2690L), (-2319L));
      range0.intersects(range1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Range range2 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.927925909351158
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of((-257L), 127L);
      Range range1 = Range.ofLength(127L);
      range1.intersection(range0);
      range0.getBegin();
      Range.Builder range_Builder0 = new Range.Builder(1L);
      range_Builder0.contractEnd(1L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range2);
      range_Builder1.expandBegin((-726L));
      Range.Builder range_Builder3 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.408385208188493
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of((-3006L), (-257L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.8306845590087413
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L, 0L);
      range1.intersects(range0);
      Range range2 = range1.intersection(range0);
      range2.isSubRangeOf(range0);
      range0.startsBefore(range1);
      range0.equals(range1);
      range0.getBegin();
      long long0 = (-912L);
      Range.of((-912L));
      // Undeclared exception!
      try { 
        Range.of(0L, (-912L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.52399226387643
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(65535L, 65535L);
      Object object1 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range0.equals(object3);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.2428250599402126
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), 255L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = range_Builder1.build();
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -128 .. 0 ]/SB", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.5774533424548802
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of(1417L);
      Range range1 = Range.ofLength(1417L);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(1417L);
      Range range3 = Range.ofLength(1417L);
      range3.startsBefore(range2);
      range0.equals(range3);
      // Undeclared exception!
      try { 
        Range.ofLength((-2732L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.664652130145671
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of(2166L);
      Object object0 = new Object();
      Long long0 = new Long((-257L));
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long.getLong("");
      Long long1 = new Long(2166L);
      Long.getLong("value can not be <0", long1);
      Long.toUnsignedString((-257L));
      range0.equals((Object) null);
      Range range1 = Range.of((-216L), (-216L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.972305806705776
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(65535L);
      Range range1 = Range.of((-257L));
      range0.complement(range1);
      Range range2 = Range.ofLength(0L);
      range1.intersection(range2);
      Range.Builder range_Builder0 = new Range.Builder(127L);
      range_Builder0.contractEnd((-872L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range2);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-3217L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.2838685127595846
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), 255L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = range_Builder1.build();
      Object object5 = new Object();
      boolean boolean0 = range0.equals(object5);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.5179545797441287
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = 141L;
      Range.of((-18L), 141L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-18L), (-18L));
      Range range0 = Range.of((-18L), 65535L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, (-1110L), (-18L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("(,}:+CE&pPojb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.(,}:+CE&pPojb
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.1860594162939453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range0 = Range.of((-32768L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.8499690613108886
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Long long0 = new Long(0L);
      Range range0 = Range.ofLength(9223372036854775259L);
      Long.valueOf(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      boolean boolean0 = range1.isSubRangeOf(range0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertTrue(boolean0);
      
      range_Builder0.build();
      Range range2 = Range.of(0L);
      range1.intersection(range2);
      Range range3 = Range.of(0L);
      boolean boolean1 = range1.isSubRangeOf(range3);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      //  // Unstable assertion: assertTrue(boolean1);
      
      Range range4 = Range.of(4294967295L, 4294967295L);
      Range range5 = range4.asRange();
      //  // Unstable assertion: assertTrue(range5.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=4.111847123809655
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of((-257L), 4294967295L);
      Range range1 = Range.of(1417L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
      
      Range range2 = Range.ofLength(1417L);
      Range range3 = range1.intersection(range2);
      List<Range> list1 = range3.complement(range2);
      assertTrue(list1.contains(range3));
      
      Range.Builder range_Builder0 = new Range.Builder(1417L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-3217L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range4 = range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder(range4);
      assertFalse(range4.isEmpty());
      
      Range.Builder range_Builder4 = new Range.Builder(1417L);
      Range range5 = Range.of(738L, 4633L);
      assertNotSame(range5, range1);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.5613428020281868
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long0 = new Long((-170L));
      Range.of((-170L), 4294965878L);
      Range range0 = Range.of((-170L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.598889411618515
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(65535L, 65535L);
      Range range1 = Range.of(761L);
      range0.startsBefore(range1);
      Range.Builder range_Builder0 = new Range.Builder(32767L);
      range1.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 9223372036854774401L, 9223372036854774401L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854774401L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=4.310546110881944
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-559L), 2147483642L);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem2);
      assertEquals("[ -559 .. 2147483642 ]/RB", string0);
      
      range0.getEnd();
      Range range1 = Range.of((-2147483648L), 694L);
      range0.getEnd(range_CoordinateSystem1);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
      
      Range range2 = Range.of((-559L));
      Range range3 = Range.ofLength(9972L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.parseRange("[ -559 .. 2147483642 ]/RB", range_CoordinateSystem3);
      range4.intersection(range3);
      Range range5 = Range.parseRange("[ -559 .. 2147483642 ]/RB", range_CoordinateSystem2);
      range0.isSubRangeOf(range5);
      range0.asRange();
      Range.of(694L);
      Range range6 = Range.parseRange("[ -559 .. 2147483642 ]/RB");
      List<Range> list0 = range5.complement(range2);
      List<Range> list1 = range6.complementFrom(list0);
      List<Range> list2 = range3.complementFrom(list1);
      List<Range> list3 = range1.complementFrom(list2);
      assertTrue(list3.isEmpty());
      assertFalse(list1.equals((Object)list0));
      assertEquals(1, list1.size());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.840314626517908
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(32767L);
      Range.Builder range_Builder1 = range_Builder0.shift(32767L);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder1.contractBegin(2314L);
      range0.startsBefore(range1);
      String string0 = range1.toString();
      assertEquals("[ 32767 .. 65533 ]/0B", string0);
      
      Range.Builder range_Builder3 = new Range.Builder(4294967295L);
      Range range2 = range_Builder2.build();
      range_Builder3.copy();
      range0.isSubRangeOf(range2);
      Range range3 = range_Builder3.build();
      Range range4 = Range.parseRange("[ 32767 .. 65533 ]/0B");
      Range range5 = range3.intersection(range1);
      assertSame(range5, range4);
      assertFalse(range5.isEmpty());
      
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      range3.asRange();
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.5102604866782356
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      List<Range> list0 = range0.split(127L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
      
      Range range1 = Range.ofLength(127L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.672442102339184
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-4525L), 4294967295L);
      range0.spliterator();
      List<Range> list0 = range0.split(4294967295L);
      assertFalse(list0.contains(range0));
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.2995793963713953
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), 255L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = range_Builder1.build();
      Object object5 = new Object();
      Long long0 = new Long(1713L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem1);
      assertEquals((-128L), long1);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.3976800595209387
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of((-2147483648L), (-1697L));
      Long long0 = new Long(65535L);
      assertEquals(65535L, (long)long0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.2444386795530678
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem1, 919L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.698640669440648
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of((-3355L));
      long long0 = 9223372036854775807L;
      Range range1 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.of(9223372036854775807L);
      range1.isSubRangeOf(range0);
      range1.startsBefore(range0);
      Range.Builder range_Builder0 = new Range.Builder(4422L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.endsBefore(range0);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem0, 4422L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=4.071469408494659
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of((-270L), 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.shift(32767L);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Long long0 = new Long(32767L);
      range0.intersects(range1);
      range1.startsBefore(range0);
      range1.endsBefore(range0);
      Range range2 = Range.ofLength(4294967295L);
      Range range3 = range0.intersection(range1);
      Range range4 = Range.ofLength(1994L);
      range4.isSubRangeOf(range3);
      Range.Builder range_Builder3 = new Range.Builder(range4);
      range_Builder3.contractEnd(0L);
      range_Builder1.build();
      range2.asRange();
      // Undeclared exception!
      try { 
        Range.of(9962L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.691779345969568
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.ofLength(720L);
      Range range1 = Range.of(720L);
      range0.complement(range1);
      Range range2 = Range.ofLength(9223372034707289772L);
      range0.intersection(range2);
      Range.Builder range_Builder0 = new Range.Builder(129L);
      long long0 = (-3217L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2252L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.8274176856923354
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(1558L);
      Range range1 = Range.of(2896L, 4421L);
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      Range range2 = Range.of(2896L);
      range1.complement(range2);
      range1.asRange();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.8988702810779414
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of((-1L), 141L);
      Range range1 = Range.of((-1L), 24L);
      range1.iterator();
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range2.complement(range1);
      range1.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.of((-1L), (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.8173666518520784
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.of((-3355L));
      Range range0 = Range.of((-9223372036854775786L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of((-9223372036854775786L), (-501L));
      //  // Unstable assertion: assertNotSame(range1, range0);
      
      Range range2 = Range.of(4294967295L);
      //  // Unstable assertion: assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.6017778286806665
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of((-255L), 4294967295L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.2827269158609997
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), 255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = range_Builder0.build();
      Object object5 = new Object();
      boolean boolean0 = range0.equals(object5);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.7344430683841288
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of((-257L), 127L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range range1 = range_Builder2.build();
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      range0.equals(range_Builder2);
      long long0 = range0.getLength();
      //  // Unstable assertion: assertEquals(385L, long0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.6312852725069362
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.isEmpty();
      Range.of((-2787L), 1566L);
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Range.of(2016L, 155L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.6935523222693973
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range range1 = Range.of((-2787L), 1566L);
      Object object2 = new Object();
      boolean boolean0 = range1.equals(object2);
      assertFalse(boolean0);
      
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.085091664483793
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=4.197780182491922
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-257L), 4294967295L);
      Range range1 = Range.of(1417L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
      
      Range range2 = Range.ofLength(1417L);
      Range range3 = range1.intersection(range2);
      Range.Builder range_Builder0 = new Range.Builder(1417L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-3217L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.contractBegin(39L);
      range_Builder2.build();
      Range.of((-6621L), 4294967295L);
      List<Range> list1 = range3.split(761L);
      assertTrue(list1.contains(range3));
      
      Range range4 = Range.ofLength(761L);
      boolean boolean0 = range3.equals(range4);
      assertFalse(boolean0);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.60594285466635
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.ofLength(0L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean0 = range1.equals(object5);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.8450375262566645
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of((-1L), 141L);
      Range range1 = Range.of((-1L), 24L);
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range2.complement(range1);
      range1.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.of((-1L), (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=4.1734745627287255
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of((-257L), 4294967295L);
      long long0 = 1417L;
      Range range1 = Range.of(1417L);
      range0.complement(range1);
      Range range2 = Range.ofLength(1417L);
      range1.intersection(range2);
      Range.Builder range_Builder0 = new Range.Builder(1417L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-3217L));
      Range.Builder range_Builder2 = range_Builder1.contractBegin(1417L);
      range_Builder2.build();
      range_Builder1.expandEnd(9223372036854775258L);
      Range range3 = Range.of((-928L), 3005L);
      range3.asRange();
      // Undeclared exception!
      try { 
        range_Builder0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.7727007794745573
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of(1417L);
      Range range1 = Range.ofLength(1417L);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(1417L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-3217L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range3 = range_Builder2.build();
      Range range4 = Range.ofLength(761L);
      range4.getBegin();
      range2.equals(range4);
      assertTrue(range2.isEmpty());
      
      range_Builder2.build();
      Range range5 = range0.asRange();
      assertFalse(range5.isEmpty());
      
      Range range6 = range_Builder2.build();
      assertNotSame(range6, range1);
      assertSame(range6, range3);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.416111855080199
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      long long1 = 4422L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 935L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.581411411735247
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-3355L));
      long long0 = 4422L;
      range0.intersects(range0);
      Range range1 = range0.intersection(range0);
      long long1 = 9223372036854775807L;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range1.isSubRangeOf(range0);
      range0.startsBefore(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-3355L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.9231265501612205
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of(1417L);
      Range range1 = Range.ofLength(1417L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(1417L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-3217L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder1.contractBegin((-3217L));
      range_Builder2.build();
      range_Builder2.copy();
      Range range3 = range_Builder1.build();
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.724263638043593
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range range1 = Range.of(1L);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(9223372034707289772L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(684L);
      Range range3 = range_Builder1.build();
      Range.of(9223372034707289772L);
      range1.isSubRangeOf(range0);
      Range.Builder range_Builder2 = range_Builder1.contractBegin(684L);
      range3.startsBefore(range2);
      long long1 = 9991L;
      Range.Builder range_Builder3 = new Range.Builder(1687L);
      range_Builder2.contractEnd(1L);
      // Undeclared exception!
      try { 
        range_Builder2.contractBegin(9223372034707289772L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.7941390620664635
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-3355L));
      range0.endsBefore(range0);
      Range.of(range_CoordinateSystem0, 4422L, 4422L);
      long long0 = 9223372036854775807L;
      Range range1 = Range.of(9223372036854775807L);
      range1.isSubRangeOf(range0);
      range1.startsBefore(range0);
      long long1 = (-4012L);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-4012L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.4569291138500033
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of((-37L), (-14L));
      Range range1 = Range.of((-14L), (-14L));
      Range range2 = range0.intersection(range1);
      assertNotSame(range1, range0);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.3998437811220925
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2147473677L), (-2147473677L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals((-2147473678L), long0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.6067030950562096
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2407L), 1L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(21L);
      Range.Builder range_Builder2 = range_Builder0.expandBegin(275L);
      Range.ofLength(1172L);
      range_Builder1.shift((-630L));
      Range.Builder range_Builder3 = range_Builder0.contractBegin(1L);
      assertSame(range_Builder3, range_Builder2);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.623339967997357
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.of((-16L), (-14L));
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-16L));
      Range range1 = range_Builder0.build();
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.303248073639753
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1111L), (-1111L));
      long long0 = range0.getEnd();
      assertEquals((-1111L), long0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.7062045688169603
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-257L), 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      range_Builder0.copy();
      range_Builder0.build();
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.6067030950562096
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2407L), 1L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1L));
      Range.Builder range_Builder2 = range_Builder0.expandBegin(275L);
      Range.ofLength(1172L);
      range_Builder1.shift((-630L));
      Range.Builder range_Builder3 = range_Builder0.contractBegin(1L);
      assertSame(range_Builder3, range_Builder2);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.22042883741434
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1L, 1L);
      Range range0 = range_Builder1.build();
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_CoordinateSystem2, 385L, 2L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.279099447743794
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range range0 = Range.of((-2147483906L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.7587331589690343
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.of((-257L), 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.shift(32767L);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range1);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder3.copy();
      Range range2 = range_Builder0.build();
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=4.324253298172299
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of((-257L), 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(32767L);
      Range.Builder range_Builder1 = range_Builder0.shift(32767L);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder1.contractBegin(2314L);
      range0.startsBefore(range1);
      range1.toString();
      Range.Builder range_Builder3 = new Range.Builder(4294967295L);
      range_Builder2.contractBegin((-257L));
      Range range2 = range_Builder2.build();
      range_Builder3.copy();
      range_Builder3.expandBegin((-257L));
      range0.isSubRangeOf(range2);
      Range range3 = range_Builder3.build();
      Range range4 = Range.of((-128L));
      Range range5 = range3.intersection(range1);
      List<Range> list0 = range5.complement(range4);
      List<Range> list1 = range2.complementFrom(list0);
      range2.complementFrom(list1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range6 = Range.of(range_CoordinateSystem0, 3083L, 9223372036854775807L);
      range6.complement(range5);
      range5.asRange();
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.2402880620543777
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1750L, 1750L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.398514435824651
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long long0 = (-1L);
      Range.of((-1L), 141L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 1111L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1111L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.298155571027304
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.of((-117L), (-117L));
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.30273127777412
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), 0L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.398884395129128
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-493L), (-493L));
      range0.split(4294967295L);
      // Undeclared exception!
      try { 
        range0.split((-493L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.622776271121116
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of((-257L), 127L);
      long long0 = range0.getEnd();
      assertEquals(127L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.shift(4294967295L);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range range1 = range_Builder2.build();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.of((-4211L), 1873L);
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.3976800595209387
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Object object0 = new Object();
      Range.of((-2147483648L), (-2147483648L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
  }

  /**
  //Test case number: 159
  /*Coverage entropy=3.111534645219026
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.ofLength(3132L);
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
  }

  /**
  //Test case number: 160
  /*Coverage entropy=3.2035603560287917
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 3444L, 3444L);
      long long0 = (-3059L);
      // Undeclared exception!
      try { 
        Range.of(0L, (-3059L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(4294967295L);
      Range.of(2657L, 2657L);
      Object object2 = new Object();
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
  }
}
