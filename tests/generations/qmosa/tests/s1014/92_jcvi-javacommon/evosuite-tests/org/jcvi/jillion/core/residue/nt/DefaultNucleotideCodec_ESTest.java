/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 03:50:35 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.clone();
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-2), iterator0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-112);
      Nucleotide nucleotide0 = Nucleotide.Gap;
      defaultNucleotideCodec0.encode(nucleotide0);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-124);
      byte byte1 = (byte)1;
      Nucleotide nucleotide1 = Nucleotide.Pyrimidine;
      nucleotide1.getAllPossibleAmbiguities();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.8141986525875637
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(1503, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor((byte[]) null, 1982292598);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-48);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.266970744711691
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Nucleotide nucleotide0 = Nucleotide.Keto;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 1545);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      Byte byte0 = new Byte((byte)9);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec0.isGap(byteArray1, 77);
      Integer integer0 = new Integer(84);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getGappedOffsetFor(byteArray0, 8);
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 84);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getNumberOfGaps(byteArray1);
      byte[] byteArray2 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.328921816977514
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Nucleotide nucleotide0 = Nucleotide.Keto;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 1545);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set0);
      Byte byte0 = new Byte((byte)9);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec1.isGap(byteArray1, 77);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec4.getGappedOffsetFor(byteArray0, 9);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.getUngappedOffsetFor(byteArray1, 14);
      DefaultNucleotideCodec.values();
      int int1 = defaultNucleotideCodec1.getNumberOfGaps(byteArray1);
      assertTrue(int1 == int0);
      
      Nucleotide nucleotide1 = Nucleotide.Strong;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec6.encode((Collection<Nucleotide>) set1);
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec7.toString(byteArray0);
      assertEquals("", string0);
      
      DefaultNucleotideCodec defaultNucleotideCodec8 = DefaultNucleotideCodec.INSTANCE;
      String string1 = defaultNucleotideCodec8.toString(byteArray2);
      assertEquals("CG", string1);
      
      defaultNucleotideCodec8.getGapOffsets(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-46)}, byteArray2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.177247217159339
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Keto;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("K", string0);
      
      List<Integer> list0 = defaultNucleotideCodec0.getGapOffsets(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)46}, byteArray1);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.569957390159635
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-124);
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)48}, byteArray1);
      
      byteArray0[4] = (byte)1;
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1225);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec0.isGap(byteArray0, (byte)1);
      Integer integer0 = new Integer(1225);
      Integer.compareUnsigned((-2754), (-2754));
      Integer.divideUnsigned((byte) (-112), (-555));
      int int1 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 93259013);
      assertTrue(int1 == int0);
      
      Integer integer1 = new Integer((int) integer0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte) (-112);
      byteArray3[1] = (byte) (-64);
      byteArray3[2] = (byte)1;
      byteArray3[3] = (byte) (-124);
      byteArray3[4] = (byte) (-124);
      byteArray3[5] = (byte)1;
      Nucleotide nucleotide1 = defaultNucleotideCodec0.decode(byteArray0, (byte)1);
      assertEquals(Nucleotide.Adenine, nucleotide1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4966948142172347
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Adenine;
      Set<Nucleotide> set0 = nucleotide1.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray1);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)1);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      int int0 = defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray1, (byte)1);
      assertEquals(0, int0);
      
      DefaultNucleotideCodec.values();
      boolean boolean0 = defaultNucleotideCodec2.isGap(byteArray2, 0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-150));
      Integer.compareUnsigned((-555), 0);
      Integer.compareUnsigned((byte)1, 3);
      Integer.divideUnsigned((-1), 14);
      Integer integer1 = new Integer(636);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec1.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide2 = Nucleotide.Pyrimidine;
      defaultNucleotideCodec3.encode(nucleotide2);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec4.toString(byteArray1);
      assertEquals("T", string0);
      
      Nucleotide nucleotide3 = defaultNucleotideCodec4.decode(byteArray2, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)7, (byte) (-9), (byte) (-106), (byte)74, (byte) (-64)}, byteArray2);
      assertEquals(Nucleotide.NotThymine, nucleotide3);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.4315714019898262
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-112);
      Nucleotide nucleotide0 = Nucleotide.Gap;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-124);
      Nucleotide nucleotide1 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide1.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, (byte) (-112));
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide1);
      byteArray0[4] = (byte)1;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1225);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec0.isGap(byteArray0, (byte)1);
      Integer integer0 = new Integer(67);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray2, 0);
      Integer integer1 = new Integer(1495);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9062983862586433
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte) (-64);
      Nucleotide nucleotide0 = Nucleotide.Gap;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-64));
      Nucleotide nucleotide1 = Nucleotide.Weak;
      nucleotide1.getAllPossibleAmbiguities();
      Byte byte1 = new Byte((byte) (-64));
      Nucleotide nucleotide2 = Nucleotide.NotCytosine;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide2);
      int int0 = 1225;
      Byte byte2 = new Byte((byte)1);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec0.isGap(byteArray1, (byte)1);
      Integer integer0 = new Integer(1225);
      Integer.compareUnsigned((-324), (byte) (-64));
      int int1 = new Integer((-324));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor((byte[]) null, (-165));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.40254232901456
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)124;
      byte byte0 = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      byte byte1 = (byte)77;
      byteArray0[2] = (byte)77;
      byte byte2 = (byte)42;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-1097));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7290425571534516
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte) (-64);
      Nucleotide nucleotide0 = Nucleotide.Keto;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-64));
      long long0 = (-2147483648L);
      // Undeclared exception!
      try { 
        Range.of((long) (byte) (-64), (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.152515573108789
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Nucleotide nucleotide0 = Nucleotide.Gap;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 1534);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      Byte byte0 = new Byte((byte)9);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec1.isGap(byteArray1, 74);
      Integer integer0 = new Integer(84);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getGappedOffsetFor(byteArray0, 223);
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray0, 84);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.getNumberOfGaps(byteArray1);
      Nucleotide nucleotide1 = Nucleotide.Amino;
      nucleotide1.getBasesFor();
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[16];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap((byte[]) null, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = new byte[16];
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray1, 10L);
      assertEquals(Nucleotide.Gap, nucleotide0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.341060701572992
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      int int0 = defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 1545);
      Byte byte0 = new Byte((byte)9);
      DefaultNucleotideCodec.values();
      Integer integer0 = new Integer(84);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, 223);
      assertEquals(0, int1);
      
      int int2 = defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 84);
      assertEquals(84, int2);
      
      DefaultNucleotideCodec.values();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      List<Integer> list0 = defaultNucleotideCodec6.getGapOffsets(byteArray1);
      assertTrue(list0.contains(int0));
      assertEquals(5, byteArray1.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4388210016383502
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 1545;
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 1545);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      Byte byte0 = new Byte((byte)7);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec0.isGap(byteArray1, 77);
      Integer integer0 = new Integer(84);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getGappedOffsetFor(byteArray0, 223);
      int int1 = new Byte((byte)7);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getNumberOfGaps(byteArray1);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec3.toString(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec4.decode(byteArray0, 4294967295L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483645
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = (-4440);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0227872392324935
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Adenine;
      nucleotide1.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray1);
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)1);
      assertEquals(0, int0);
      
      long long0 = defaultNucleotideCodec1.getUngappedLength(byteArray1);
      assertEquals(1L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-32)}, byteArray1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.427649788737201
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-112);
      Nucleotide nucleotide0 = Nucleotide.Gap;
      defaultNucleotideCodec0.encode(nucleotide0);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-124);
      Nucleotide nucleotide1 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide1.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide1);
      byteArray0[4] = (byte)1;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1225);
      DefaultNucleotideCodec.values();
      Integer integer0 = new Integer(1225);
      Integer.divideUnsigned((byte) (-112), (-555));
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 93259013);
      Integer integer1 = new Integer((int) integer0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.toString(byteArray1);
      byte[] byteArray3 = new byte[12];
      byteArray3[0] = (byte) (-112);
      defaultNucleotideCodec0.isGap(byteArray2, (-196));
      defaultNucleotideCodec0.getNumberOfGaps(byteArray3);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.4405599682421686
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Nucleotide nucleotide0 = Nucleotide.Keto;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 1545);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set0);
      Byte byte0 = new Byte((byte)9);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec1.isGap(byteArray1, 77);
      Integer integer0 = new Integer(84);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getGappedOffsetFor(byteArray0, 223);
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray0, 84);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.getNumberOfGaps(byteArray1);
      Nucleotide nucleotide1 = Nucleotide.Amino;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec4.toString(byteArray1);
      defaultNucleotideCodec4.getNumberOfGapsUntil(byteArray0, (-1355));
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray2, 0);
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray2, 260);
      defaultNucleotideCodec2.toString(byteArray0);
      int int0 = 3;
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)9;
      byteArray3[1] = (byte)9;
      byteArray3[2] = (byte)9;
      byteArray3[3] = (byte)9;
      Range range0 = Range.of((long) 84);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec5.iterator(byteArray3, range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.5884897782438547
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 1561);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set0);
      Byte byte0 = new Byte((byte)7);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec1.isGap(byteArray1, 77);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getGappedOffsetFor(byteArray0, 223);
      defaultNucleotideCodec4.getUngappedOffsetFor(byteArray0, (-384));
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray0, 84);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.getNumberOfGaps(byteArray1);
      Nucleotide nucleotide1 = Nucleotide.Amino;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec4.toString(byteArray1);
      defaultNucleotideCodec5.encode(nucleotide1);
      byte[] byteArray2 = new byte[7];
      byteArray2[1] = (byte)7;
      byteArray2[2] = (byte)7;
      byteArray2[3] = (byte)7;
      byteArray2[4] = (byte)118;
      byteArray2[5] = (byte)7;
      byteArray2[6] = (byte)1;
      Range range0 = Range.of((long) 0);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec5.iterator(byteArray2, range0);
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.4824170298176607
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Nucleotide nucleotide0 = Nucleotide.Keto;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 1545);
      assertEquals(0, int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set0);
      Byte byte0 = new Byte((byte)9);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec1.isGap(byteArray1, 84);
      Integer integer0 = new Integer(84);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, 5723);
      defaultNucleotideCodec4.getGappedOffsetFor(byteArray0, 223);
      int int1 = defaultNucleotideCodec2.getUngappedOffsetFor(byteArray0, 84);
      assertEquals(84, int1);
      
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.getNumberOfGaps(byteArray1);
      Nucleotide nucleotide1 = Nucleotide.Amino;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec4.toString(byteArray1);
      int int2 = defaultNucleotideCodec3.getNumberOfGapsUntil(byteArray1, 16);
      int int3 = defaultNucleotideCodec0.getNumberOfGaps(byteArray2);
      assertTrue(int3 == int2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)29}, byteArray2);
      
      defaultNucleotideCodec4.getUngappedLength(byteArray1);
      Range range0 = Range.ofLength(0);
      defaultNucleotideCodec5.iterator(byteArray1, range0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-1));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.391670682129058
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 1545);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set0);
      Byte byte0 = new Byte((byte)7);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec1.isGap(byteArray1, 77);
      Integer integer0 = new Integer(0);
      defaultNucleotideCodec3.getGappedOffsetFor(byteArray0, 223);
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray0, (-384));
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray0, 1545);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getNumberOfGaps(byteArray1);
      Nucleotide nucleotide1 = Nucleotide.Amino;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec3.toString(byteArray1);
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      byte[] byteArray2 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec3.getGapOffsets(byteArray1);
      defaultNucleotideCodec3.getNumberOfGaps(byteArray2);
      defaultNucleotideCodec4.isGap(byteArray1, 0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.decode((byte[]) null, (byte)7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, (byte)0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.425910149055313
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 1545);
      Byte byte0 = new Byte((byte)9);
      DefaultNucleotideCodec.values();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor((byte[]) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.197802967358126
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-81);
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte) (-81);
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte) (-81);
      byteArray1[5] = (byte)2;
      byteArray1[6] = (byte) (-81);
      byteArray1[7] = (byte)2;
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (-4338));
      assertEquals((-4338), int0);
      
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte) (-93);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 0);
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      List<Integer> list0 = defaultNucleotideCodec0.getGapOffsets(byteArray2);
      assertEquals(0, list0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte) (-46), (byte) (-32)}, byteArray2);
      
      byte[] byteArray3 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte) (-46), (byte) (-32)}, byteArray3);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.269717710049351
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Keto;
      Set<Nucleotide> set0 = nucleotide1.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-64));
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray0);
      
      defaultNucleotideCodec0.isGap(byteArray1, (-2124878554));
      defaultNucleotideCodec0.isGap(byteArray2, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.4473754135048114
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-112);
      Nucleotide nucleotide0 = Nucleotide.Gap;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-124);
      Nucleotide nucleotide1 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide1.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, (byte) (-112));
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byteArray0[4] = (byte)1;
      Byte byte0 = new Byte((byte)1);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec0.isGap(byteArray0, (byte)1);
      Integer integer0 = new Integer((byte) (-124));
      int int1 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 93259010);
      assertTrue(int1 == int0);
      
      int int2 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (byte)1);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec.values();
      int int3 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      assertTrue(int3 == int2);
      
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertEquals(4, byteArray2.length);
      
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray1);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1080709812521095
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      Nucleotide nucleotide0 = Nucleotide.Gap;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-94);
      byte byte0 = (byte)1;
      Nucleotide nucleotide1 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide1.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, (byte)0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byteArray0[4] = (byte)1;
      Byte byte1 = new Byte((byte)1);
      DefaultNucleotideCodec.values();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.269575966604985
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Keto;
      Set<Nucleotide> set0 = nucleotide1.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-64));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray0);
      
      defaultNucleotideCodec0.isGap(byteArray1, (-2124878554));
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertEquals(4, byteArray2.length);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)21;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      ListIterator<Nucleotide> listIterator0 = linkedList0.listIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-1073741823), (Iterator<Nucleotide>) listIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.5169428310496103
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Nucleotide nucleotide0 = Nucleotide.Keto;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1);
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 1545);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set0);
      Byte byte0 = new Byte((byte)9);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec1.isGap(byteArray1, 77);
      Integer integer0 = new Integer(84);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getGappedOffsetFor(byteArray0, 223);
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray0, 84);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.getNumberOfGaps(byteArray1);
      Nucleotide nucleotide1 = Nucleotide.Amino;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec4.toString(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec6.toString(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec7.getGapOffsets(byteArray1);
      defaultNucleotideCodec7.iterator(byteArray2);
      defaultNucleotideCodec5.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec7.isGap(byteArray0, 10);
      Range range0 = Range.of((long) 0, (long) 0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 0 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.421367050447491
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Nucleotide nucleotide0 = Nucleotide.Keto;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 1545);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      Byte byte0 = new Byte((byte)9);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray1, 0);
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray1, 1543);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getNumberOfGaps(byteArray1);
      Nucleotide nucleotide1 = Nucleotide.Unknown;
      nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide2 = Nucleotide.Pyrimidine;
      defaultNucleotideCodec6.encode(nucleotide2);
      Range range0 = Range.of(1757L);
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec7.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 1757 .. 1757 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.202999696051705
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      byteArray0[1] = (byte)84;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-19);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)84);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 78);
      byteArray0[5] = (byte) (-1);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[6] = (byte)1;
      Nucleotide nucleotide0 = Nucleotide.Keto;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byteArray0[7] = (byte)68;
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      int int0 = new Byte((byte) (-19));
      assertEquals((byte) (-19), int0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6063676846108654
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte)91;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-3778));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[11];
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1908874353);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 1343L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 1343 corresponds to encodedIndex 675  encodedglyph length is 11
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 0 corresponds to encodedIndex 4  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5213722930031675
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)81;
      byteArray0[0] = (byte)81;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 2048);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.valueOf("INSTANCE");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte)120;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-1);
      byteArray0[2] = (byte)103;
      byteArray0[4] = (byte)40;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      byteArray0[1] = (byte)84;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[2] = (byte)9;
      byte byte0 = (byte)69;
      Range range0 = Range.of((-604L));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-1);
      byteArray0[2] = (byte)103;
      byteArray0[2] = (byte)40;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.081326785870523
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray0, 1399);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(0, iterator0);
      defaultNucleotideCodec1.isGap(byteArray1, 2);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)7;
      byteArray2[1] = (byte)127;
      byteArray2[2] = (byte)75;
      byteArray2[4] = (byte) (-71);
      defaultNucleotideCodec1.decodedLengthOf(byteArray2);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte)75, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.8328218701969083
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("NHDBWYK", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)40;
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals((-939131033L), long0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.40254232901456
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)13;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.2732409507095364
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)77;
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byte[] byteArray1 = new byte[16];
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray1, (byte)0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.520805078028692
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-124);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 552);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.1296233673511074
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)124;
      Byte byte0 = new Byte((byte) (-112));
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1225);
      DefaultNucleotideCodec.values();
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, (byte)0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(1225);
      Integer.compareUnsigned((byte)124, 2940);
      Integer.compareUnsigned(3, 3);
      Integer.divideUnsigned((byte) (-112), (byte) (-64));
      DefaultNucleotideCodec.values();
      int int1 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      assertTrue(int1 == int0);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte) (-64);
      byteArray1[2] = (byte) (-112);
      byteArray1[4] = (byte)124;
      byteArray1[5] = (byte)1;
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, (byte)1);
      assertEquals(Nucleotide.Gap, nucleotide0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.iterator(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)7;
      byte byte0 = (byte) (-123);
      byteArray1[2] = (byte)75;
      byteArray1[3] = (byte) (-123);
      byteArray1[4] = (byte) (-71);
      Integer integer0 = new Integer((byte)7);
      DefaultNucleotideCodec.values();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte) (-71));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -71
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 12;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-80);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      Range range0 = Range.of(0L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.345910149055313
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)62;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.403763330235561
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte)7;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.6241026221599717
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)73;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1242200684);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)50;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (-1857L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -1857
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)118;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-1225));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode(nucleotide0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2806L), (-2806L));
      range0.toString();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.8344319225942862
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-2806L);
      Range range0 = Range.of(range_CoordinateSystem0, (-2806L), (-2806L));
      range0.toString();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -2806 .. -2806 ]/0B is out of range of sequence which is only [ 0 .. 6 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil((byte[]) null, (-593));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      defaultNucleotideCodec0.encode(nucleotide0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(339, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(5, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.671110990052186
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-121);
      defaultNucleotideCodec0.iterator(byteArray0);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-2);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byte[] byteArray1 = new byte[5];
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (-657));
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)7;
      byteArray1[2] = (byte)83;
      byteArray1[3] = (byte)83;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray1, (byte)7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.7988457068767891
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2806L), (-2806L));
      range0.toString();
      List<Range> list0 = range0.split(773L);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-4);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-72);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)9;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.5311820181617297
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 550);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.1296233673511074
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)124;
      Byte byte0 = new Byte((byte) (-112));
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1225);
      DefaultNucleotideCodec.values();
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, (byte)0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(1225);
      Integer.compareUnsigned((-555), 2940);
      Integer.compareUnsigned(3, 3);
      Integer.divideUnsigned((byte) (-112), (-555));
      Integer integer1 = new Integer((int) integer0);
      DefaultNucleotideCodec.values();
      int int1 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      assertTrue(int1 == int0);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte) (-64);
      byteArray1[2] = (byte) (-112);
      byteArray1[4] = (byte)124;
      byteArray1[5] = (byte)1;
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, (byte)1);
      assertEquals(Nucleotide.Gap, nucleotide0);
  }
}
