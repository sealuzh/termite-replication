/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 05:51:15 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.BufferedInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 71;
      SimpleNode simpleNode0 = new SimpleNode(71);
      String string0 = "q";
      simpleNode0.id = 71;
      simpleNode0.identifiers = null;
      // Undeclared exception!
      try { 
        simpleNode0.toString("q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.8102583142923485
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(48);
      JavaParser javaParser0 = new JavaParser("{");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OcDA");
      simpleNode0.setIdentifier("{");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.setIdentifier("=");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.setIdentifier(">=");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OcDA");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump((String) null, stringWriter0);
      assertEquals("<RelationalExpression>\n  <identifier>=</identifier>\n  <identifier>*ge</identifier>\n</RelationalExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8249506629220404
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(48);
      SystemInUtil.addInputLine("<<");
      simpleNode0.setIdentifier("<<");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(48);
      StringWriter stringWriter1 = stringWriter0.append('T');
      stringWriter1.append('d');
      simpleNode0.dump("<<", stringWriter0);
      simpleNode0.dump("3/-|B/GVe>BN:~f{YMm", stringWriter0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 864);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream2);
      // Undeclared exception!
      try { 
        pipedOutputStream0.write((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.OutputStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(71);
      String string0 = "<=";
      simpleNode0.id = 71;
      simpleNode0.identifiers = null;
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 52;
      SimpleNode simpleNode0 = new SimpleNode(52);
      StringWriter stringWriter0 = new StringWriter();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      simpleNode0.toString("mXYK");
      simpleNode0.identifiers = null;
      // Undeclared exception!
      try { 
        simpleNode0.setIdentifier("\"true\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.2405224421065282
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(21);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ">");
      stringWriter1.close();
      simpleNode0.setIdentifier("|");
      StringWriter stringWriter2 = new StringWriter(607);
      StringWriter stringWriter3 = new StringWriter(607);
      StringWriter stringWriter4 = new StringWriter();
      StringWriter stringWriter5 = stringWriter2.append('x');
      stringWriter4.write(21);
      stringWriter2.close();
      StringWriter stringWriter6 = stringWriter0.append('x');
      stringWriter6.append('x');
      stringWriter4.write(607);
      stringWriter6.append(',');
      stringWriter2.close();
      simpleNode0.setIdentifier(";");
      StringWriter stringWriter7 = new StringWriter();
      simpleNode0.dump("%", stringWriter5);
      assertEquals("x<MethodDeclaration>\n  <identifier>|</identifier>\n</MethodDeclaration>\n", stringWriter5.toString());
      
      simpleNode0.toString(";");
      simpleNode0.toString("%");
      String string0 = simpleNode0.toString();
      assertEquals("MethodDeclaration : | : ;", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1669);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      SimpleNode simpleNode0 = new SimpleNode(63);
      simpleNode0.setIdentifier("-");
      simpleNode0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append('N');
      StringWriter stringWriter3 = stringWriter2.append('N');
      stringWriter1.append('N');
      stringWriter3.append('Q');
      simpleNode0.dump("-", stringWriter2);
      assertEquals("NNNQ<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\n", stringWriter2.toString());
      assertEquals("NNNQ<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6332004508871008
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 47;
      SimpleNode simpleNode0 = new SimpleNode(47);
      StringWriter stringWriter0 = new StringWriter(47);
      stringWriter0.close();
      simpleNode0.setIdentifier("}");
      simpleNode0.toString("<");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("$67", stringWriter1);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "<InstanceOfExpression : }");
      stringWriter2.append('~');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedOutputStream0.close();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      try { 
        pipedInputStream0.connect(pipedOutputStream1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 47;
      SimpleNode simpleNode0 = new SimpleNode(47);
      StringWriter stringWriter0 = new StringWriter(47);
      SystemInUtil.addInputLine(">=");
      simpleNode0.setIdentifier(">=");
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.dump("ExclusiveOrExpression", stringWriter0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-1627265334));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.387188887795372
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pMTQO-1#f?q'3>");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pMTQO-1#f?q'3>");
      SystemInUtil.addInputLine((String) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2529);
      JavaParser javaParser0 = new JavaParser(bufferedInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (byte)1);
      simpleNode0.setIdentifier(">>");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      StringWriter stringWriter1 = new StringWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.dump("pMTQO-1#f?q'3>", stringWriter0);
      assertEquals("<PackageDeclaration>\n  <identifier>*rshft</identifier>\n</PackageDeclaration>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString("pMTQO-1#f?q'3>");
      assertEquals("pMTQO-1#f?q'3>PackageDeclaration : >>", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.225740170586414
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(48);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("&&");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "!");
      JavaParser javaParser0 = new JavaParser("&&");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ceA");
      SystemInUtil.addInputLine("&&");
      simpleNode0.setIdentifier("&&");
      simpleNode0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.setIdentifier("=");
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.setIdentifier(">=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ceA");
      simpleNode0.toString("</identifier>");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('9');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/19_jmca");
      FileSystemHandling.createFolder(evoSuiteFile1);
      simpleNode0.dump("5IWY&h(|", stringWriter0);
      assertEquals("9<RelationalExpression>\n  <identifier>*amp</identifier>\n  <identifier>=</identifier>\n  <identifier>*ge</identifier>\n</RelationalExpression>\n", stringWriter0.toString());
      
      simpleNode0.toString(">=");
      String string0 = simpleNode0.toString("J$2si=fJ\"thrSrGK");
      assertEquals("J$2si=fJ\"thrSrGKRelationalExpression : && : = : >=", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.23742646687433
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      StringWriter stringWriter0 = new StringWriter(47);
      simpleNode0.setIdentifier("E");
      simpleNode0.toString("E");
      simpleNode0.setIdentifier("E");
      simpleNode0.toString();
      SystemInUtil.addInputLine("InstanceOfExpression : E : E");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "InstanceOfExpression : E : E");
      simpleNode0.setIdentifier("&");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Py0:{Rv3xz%RbB");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      simpleNode0.dump("AssertStatement", stringWriter0);
      assertEquals("<InstanceOfExpression>\n  <identifier>E</identifier>\n  <identifier>E</identifier>\n  <identifier>*amp</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.2438228280066395
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 71;
      SimpleNode simpleNode0 = new SimpleNode(71);
      simpleNode0.setIdentifier("<");
      simpleNode0.toString("<");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("<", stringWriter0);
      stringWriter0.append('f');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedOutputStream0.close();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      try { 
        pipedInputStream0.connect(pipedOutputStream1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      SimpleNode simpleNode1 = new SimpleNode(1);
      simpleNode0.jjtSetParent(simpleNode1);
      simpleNode0.jjtGetNumChildren();
      SystemInUtil.addInputLine((String) null);
      Node node0 = simpleNode0.jjtGetParent();
      assertNotNull(node0);
      
      String string0 = simpleNode0.toString();
      assertEquals("PackageDeclaration", string0);
      
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.521120920696931
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(114);
      JavaParser javaParser0 = new JavaParser("yXw7H");
      SimpleNode simpleNode1 = new SimpleNode(114);
      Node[] nodeArray0 = new Node[9];
      simpleNode0.children = nodeArray0;
      simpleNode1.setIdentifier("");
      simpleNode0.id = 58;
      simpleNode0.jjtAddChild(simpleNode1, 58);
      simpleNode1.parser = javaParser0;
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetNumChildren();
      simpleNode1.jjtAddChild((Node) null, 58);
      simpleNode1.jjtAddChild((Node) null, 59);
      simpleNode0.toString("yXw7H");
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode1.identifiers = arrayList0;
      simpleNode0.jjtOpen();
      simpleNode0.jjtGetChild(58);
      simpleNode1.setIdentifier("yXw7H");
      simpleNode0.jjtGetNumChildren();
      simpleNode1.jjtGetParent();
      simpleNode1.jjtAddChild(simpleNode0, 58);
      simpleNode0.toString("transient");
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 114);
      simpleNode1.jjtGetChild(58);
      // Undeclared exception!
      try { 
        simpleNode1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 114
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      StringWriter stringWriter0 = new StringWriter(47);
      stringWriter0.close();
      Node[] nodeArray0 = new Node[1];
      simpleNode0.identifiers = null;
      SimpleNode simpleNode1 = new SimpleNode((-3192));
      nodeArray0[0] = (Node) simpleNode1;
      simpleNode0.children = nodeArray0;
      // Undeclared exception!
      try { 
        simpleNode0.dump(" : ", stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 114;
      SimpleNode simpleNode0 = new SimpleNode(114);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 114);
      simpleNode0.jjtGetChild(114);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-60));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -60
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(114);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/19_jmca");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.jjtGetNumChildren();
      SimpleNode simpleNode1 = new SimpleNode(834);
      assertFalse(simpleNode1.equals((Object)simpleNode0));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.214237539212665
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(52);
      StringWriter stringWriter0 = new StringWriter(52);
      StringReader stringReader0 = new StringReader("<RhFw/&W+");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1106823794), (-1303));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      javaCharStream0.GetImage();
      simpleNode0.jjtAddChild(simpleNode0, 588);
      stringWriter0.close();
      StringWriter stringWriter1 = new StringWriter(52);
      simpleNode0.setIdentifier(">=");
      simpleNode0.toString();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "UnaryExpression : >=");
      StringWriter stringWriter3 = stringWriter2.append('<');
      StringWriter stringWriter4 = new StringWriter();
      StringWriter stringWriter5 = stringWriter3.append('p');
      stringWriter4.append(';');
      stringWriter0.append(';');
      // Undeclared exception!
      simpleNode0.dump("Fg32vbh", stringWriter5);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1214104753232883
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      StringWriter stringWriter0 = new StringWriter(37);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(37);
      StringWriter stringWriter3 = new StringWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      stringWriter1.write(charArray0, 0, 0);
      StringWriter stringWriter4 = stringWriter1.append('x');
      stringWriter1.close();
      stringWriter0.append('x');
      stringWriter4.flush();
      StringWriter stringWriter5 = new StringWriter();
      StringWriter stringWriter6 = new StringWriter(0);
      StringWriter stringWriter7 = new StringWriter('x');
      StringWriter stringWriter8 = new StringWriter(37);
      StringWriter stringWriter9 = new StringWriter(2532);
      stringWriter5.close();
      StringWriter stringWriter10 = new StringWriter(37);
      stringWriter10.write(charArray0);
      StringWriter stringWriter11 = new StringWriter(2532);
      StringWriter stringWriter12 = new StringWriter(0);
      simpleNode0.toString();
      SimpleNode simpleNode1 = new SimpleNode((-1004));
      simpleNode0.jjtAddChild(simpleNode1, 1962);
      StringWriter stringWriter13 = new StringWriter();
      StringWriter stringWriter14 = new StringWriter();
      stringWriter14.append('x');
      simpleNode0.dump("NameList", stringWriter14);
      assertEquals(1963, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3397771104125353
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      simpleNode0.setIdentifier("");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      StringWriter stringWriter0 = new StringWriter(37);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(37);
      stringWriter0.write("Z3pFX");
      StringWriter stringWriter3 = new StringWriter();
      char[] charArray0 = new char[1];
      stringWriter0.flush();
      charArray0[0] = 'x';
      stringWriter1.write(charArray0, 0, 0);
      StringWriter stringWriter4 = new StringWriter(0);
      stringWriter1.close();
      stringWriter0.append('x');
      stringWriter4.flush();
      StringWriter stringWriter5 = new StringWriter(0);
      StringWriter stringWriter6 = new StringWriter();
      stringWriter6.write(charArray0);
      StringWriter stringWriter7 = new StringWriter(37);
      StringWriter stringWriter8 = new StringWriter();
      StringWriter stringWriter9 = new StringWriter(37);
      stringWriter6.write(charArray0);
      StringWriter stringWriter10 = new StringWriter(2566);
      StringWriter stringWriter11 = new StringWriter();
      simpleNode0.toString();
      StringWriter stringWriter12 = new StringWriter();
      stringWriter12.write(charArray0);
      stringWriter12.close();
      StringWriter stringWriter13 = new StringWriter();
      stringWriter12.write("NameList : ");
      simpleNode0.dump("UnaryExpressionNotPlusMinus", stringWriter2);
      assertEquals("<NameList>\n</NameList>\n", stringWriter2.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.2508158349996463
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 71;
      SimpleNode simpleNode0 = new SimpleNode(71);
      simpleNode0.setIdentifier("<=");
      simpleNode0.toString();
      simpleNode0.toString("<=");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("<=", stringWriter0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.087302357535235
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      simpleNode0.setIdentifier("|");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(37);
      stringWriter0.write("Z&pF");
      StringWriter stringWriter3 = new StringWriter();
      char[] charArray0 = new char[1];
      stringWriter0.flush();
      charArray0[0] = '\u0080';
      stringWriter1.write(charArray0, 0, 0);
      StringWriter stringWriter4 = new StringWriter(0);
      stringWriter1.close();
      StringWriter stringWriter5 = new StringWriter(0);
      stringWriter4.flush();
      StringWriter stringWriter6 = new StringWriter();
      StringWriter stringWriter7 = new StringWriter();
      stringWriter7.write(charArray0);
      StringWriter stringWriter8 = new StringWriter(37);
      StringWriter stringWriter9 = new StringWriter();
      stringWriter5.close();
      StringWriter stringWriter10 = new StringWriter(37);
      stringWriter7.write(charArray0);
      StringWriter stringWriter11 = new StringWriter(2566);
      StringWriter stringWriter12 = new StringWriter();
      simpleNode0.toString();
      StringWriter stringWriter13 = new StringWriter();
      stringWriter13.close();
      StringWriter stringWriter14 = new StringWriter();
      stringWriter13.write("NameList : |");
      simpleNode0.dump("UnaWE]pLe\"s,onNotPgusMinus", stringWriter2);
      assertEquals("<NameList>\n  <identifier>|</identifier>\n</NameList>\n", stringWriter2.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 4096;
      SimpleNode simpleNode0 = new SimpleNode(4096);
      StringWriter stringWriter0 = new StringWriter(4096);
      String string0 = ">=";
      SystemInUtil.addInputLine(">=");
      simpleNode0.setIdentifier(">=");
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringWriter0.append('T');
      // Undeclared exception!
      try { 
        simpleNode0.dump("PrimarySuffix", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4096
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.7017630849882761
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      StringWriter stringWriter0 = new StringWriter(47);
      stringWriter0.close();
      Node[] nodeArray0 = new Node[1];
      SimpleNode simpleNode1 = new SimpleNode((-3192));
      nodeArray0[0] = (Node) simpleNode1;
      simpleNode0.children = nodeArray0;
      simpleNode0.dump(" : ", stringWriter0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.7774035244144605
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(114);
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      stringWriter0.write(charArray0);
      SimpleNode simpleNode1 = new SimpleNode(114);
      simpleNode0.dump("ConditionalExpression", stringWriter0);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*ge");
      JavaParser javaParser0 = new JavaParser("*ge");
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-718), (-718));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParser0.token_source = javaParserTokenManager0;
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 17);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ExtendsList");
      SimpleNode simpleNode0 = new SimpleNode((-1073741822));
      JavaParser javaParser0 = new JavaParser("==");
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, (-1073741822));
      simpleNode1.jjtSetParent(simpleNode0);
      assertEquals(0, simpleNode1.jjtGetNumChildren());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) null);
      StringWriter stringWriter1 = stringWriter0.append('t');
      CharBuffer charBuffer0 = CharBuffer.allocate('t');
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) null);
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      stringWriter2.close();
      StringWriter stringWriter3 = stringWriter0.append((CharSequence) charBuffer1);
      stringWriter3.close();
      stringWriter3.append('m');
      stringWriter2.append('t');
      stringWriter1.append('t');
      int int0 = 380;
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, 380);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>(37);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(37);
      stringWriter0.write("NX");
      StringWriter stringWriter3 = new StringWriter();
      stringWriter1.write("|");
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      stringWriter1.write(charArray0, 0, 0);
      stringWriter1.close();
      StringWriter stringWriter4 = new StringWriter();
      stringWriter0.flush();
      StringWriter stringWriter5 = new StringWriter(0);
      StringWriter stringWriter6 = new StringWriter('x');
      stringWriter6.write(charArray0);
      StringWriter stringWriter7 = new StringWriter(37);
      stringWriter6.append((CharSequence) "NX");
      int int0 = 2566;
      stringWriter4.close();
      StringWriter stringWriter8 = new StringWriter(37);
      stringWriter6.write(charArray0);
      StringWriter stringWriter9 = new StringWriter(2566);
      StringWriter stringWriter10 = new StringWriter();
      StringWriter stringWriter11 = new StringWriter();
      stringWriter11.write(charArray0);
      stringWriter11.close();
      StringWriter stringWriter12 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(0);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      stringWriter0.append('t');
      CharBuffer charBuffer0 = CharBuffer.allocate(2945);
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) null);
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      stringWriter2.close();
      StringWriter stringWriter3 = stringWriter0.append((CharSequence) charBuffer1);
      stringWriter3.close();
      char[] charArray0 = new char[1];
      StringWriter stringWriter4 = new StringWriter();
      StringWriter stringWriter5 = stringWriter4.append((CharSequence) charBuffer1);
      StringBuffer stringBuffer0 = stringWriter5.getBuffer();
      StringWriter stringWriter6 = stringWriter5.append((CharSequence) stringBuffer0, 0, 177);
      stringWriter6.write(charArray0);
      SimpleNode simpleNode0 = new SimpleNode((-3268));
      simpleNode0.dump("UnaryExpression", stringWriter3);
      assertSame(stringWriter3, stringWriter1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>(37);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(37);
      stringWriter0.write("NX");
      StringWriter stringWriter3 = new StringWriter();
      stringWriter1.write("|");
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      stringWriter1.write(charArray0, 0, 0);
      StringWriter stringWriter4 = stringWriter1.append('x');
      stringWriter1.close();
      StringWriter stringWriter5 = new StringWriter();
      stringWriter4.flush();
      StringWriter stringWriter6 = new StringWriter(0);
      StringWriter stringWriter7 = new StringWriter('x');
      stringWriter7.write(charArray0);
      StringWriter stringWriter8 = new StringWriter(37);
      StringWriter stringWriter9 = new StringWriter();
      stringWriter5.close();
      StringWriter stringWriter10 = new StringWriter(37);
      stringWriter7.write(charArray0);
      StringWriter stringWriter11 = new StringWriter(2566);
      StringWriter stringWriter12 = new StringWriter();
      StringWriter stringWriter13 = new StringWriter();
      stringWriter13.write(charArray0);
      stringWriter13.close();
      StringWriter stringWriter14 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(0);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.233504898246879
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 48;
      SimpleNode simpleNode0 = new SimpleNode(48);
      simpleNode0.setIdentifier(">");
      simpleNode0.toString("ceA");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier(")");
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      simpleNode0.dump("ExtendsList", stringWriter0);
      simpleNode0.toString();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, (-1816));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.2508158349996463
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(52);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DVe&#");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)110;
      byteArray0[8] = (byte)77;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DVe&#");
      SystemInUtil.addInputLine((String) null);
      simpleNode0.setIdentifier("<");
      simpleNode0.toString();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UnaryExpression : <");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.dump("%", stringWriter0);
      assertEquals("<UnaryExpression>\n  <identifier>*lt</identifier>\n</UnaryExpression>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString("!{]Mc_$CIu");
      assertEquals("!{]Mc_$CIuUnaryExpression : <", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 10, (-3382), 10);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-327));
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -327
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.7962719295404583
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 114;
      SimpleNode simpleNode0 = new SimpleNode(114);
      String string0 = "yXw7H";
      JavaParser javaParser0 = new JavaParser("yXw7H");
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 58);
      Node[] nodeArray0 = new Node[9];
      simpleNode0.children = nodeArray0;
      simpleNode1.setIdentifier("");
      int int1 = 18;
      simpleNode0.id = 18;
      simpleNode0.jjtAddChild(simpleNode1, 58);
      simpleNode1.parser = javaParser0;
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetParent();
      simpleNode0.parent = null;
      simpleNode0.jjtGetNumChildren();
      simpleNode1.jjtAddChild((Node) null, 18);
      simpleNode1.jjtAddChild((Node) null, 59);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.toString("yXw7H");
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode1.jjtSetParent((Node) null);
      simpleNode1.identifiers = arrayList0;
      simpleNode0.jjtOpen();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 59
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 4015, 4015);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 1);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 4015);
      // Undeclared exception!
      try { 
        simpleNode0.toString("{+&Kt'~!@h=");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4015
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7039917864324614
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 114;
      SimpleNode simpleNode0 = new SimpleNode(114);
      SimpleNode simpleNode1 = new SimpleNode(114);
      simpleNode0.jjtAddChild(simpleNode1, 114);
      simpleNode0.jjtGetChild(114);
      simpleNode0.jjtClose();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode1, (-60));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -60
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1));
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-1904));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)1;
      byteArray0[7] = (byte)110;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[8] = (byte)77;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DVe&#");
      SystemInUtil.addInputLine((String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode((byte)110);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      try { 
        javaParser0.BreakStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: )
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      StringWriter stringWriter0 = new StringWriter(37);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(37);
      stringWriter0.write("Z3pFX");
      StringWriter stringWriter3 = new StringWriter();
      char[] charArray0 = new char[1];
      stringWriter0.flush();
      charArray0[0] = 'x';
      stringWriter1.write(charArray0, 0, 0);
      StringWriter stringWriter4 = new StringWriter(0);
      stringWriter1.close();
      StringWriter stringWriter5 = stringWriter0.append('x');
      stringWriter4.flush();
      StringWriter stringWriter6 = new StringWriter(0);
      StringWriter stringWriter7 = new StringWriter();
      stringWriter7.write(charArray0);
      StringWriter stringWriter8 = new StringWriter(37);
      StringWriter stringWriter9 = new StringWriter();
      stringWriter5.close();
      StringWriter stringWriter10 = new StringWriter(37);
      stringWriter7.write(charArray0);
      StringWriter stringWriter11 = new StringWriter(0);
      StringWriter stringWriter12 = new StringWriter();
      StringWriter stringWriter13 = new StringWriter();
      stringWriter13.flush();
      stringWriter13.write(charArray0);
      stringWriter13.close();
      StringWriter stringWriter14 = new StringWriter();
      simpleNode0.dump("Z3pFX", stringWriter2);
      assertEquals("", stringWriter2.toString());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ExtendsList");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-741), (-741));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParser0.token_source = javaParserTokenManager0;
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 17);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }
}
