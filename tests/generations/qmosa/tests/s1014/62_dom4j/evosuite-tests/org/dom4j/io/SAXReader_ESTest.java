/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 05:40:17 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.util.Enumeration;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.Document;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultText;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl0.resolveEntity("file://", "[ absolute: ");
      XMLReader xMLReader0 = sAXReader0.installXMLFilter(xMLFilterImpl0);
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte) (-125);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4467, (byte)0);
      SAXReader sAXReader2 = new SAXReader(xMLReader0, true);
      // Undeclared exception!
      try { 
        sAXReader2.setProperty(")g23Tx6x", byteArrayInputStream0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.215531857271748
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createNamespace("//home/ubuntu/termite/projects/62_dom4j/]<#1Y_gR,dk*4OJ0/]<#1Y_gR,dk*4OJ0/B')0]<#1Y_gR,dk*4OJ0", "//home/ubuntu/termite/projects/62_dom4j/]<#1Y_gR,dk*4OJ0/]<#1Y_gR,dk*4OJ0/B')0]<#1Y_gR,dk*4OJ0");
      defaultDocumentFactory0.createText("Couldn't create SAX reader");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Couldn't create SAX reader");
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributes2Impl0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributes2Impl1);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl2);
      Attributes2Impl attributes2Impl3 = new Attributes2Impl();
      MockFile mockFile0 = new MockFile("Couldn't create SAX reader");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print((-351.87955F));
      mockPrintWriter0.print(false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("Ny-Aa");
      mockPrintWriter1.println("=;\"F.It:|!1c)h3d");
      File file0 = MockFile.createTempFile("c9,DlZsOlGB", "org.dom4j.io.SAXReader$SAXEntityResolver");
      // Undeclared exception!
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4209367594436118
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, false);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl1.resolveEntity((String) null, "file://");
      sAXReader0.installXMLFilter(xMLFilterImpl2);
      MockFile mockFile0 = new MockFile("o");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print((-3804.0F));
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createText("file://");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      sAXReader0.getXMLReader();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader0.read("org.dom4j.tree.AbstractCDATA");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/org.dom4j.tree.AbstractCDATA (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/org.dom4j.tree.AbstractCDATA (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createNamespace("//home/ubuntu/termite/projects/62_dom4j/]<#1Y_gR,dk*4OJ0/]<#1Y_gR,dk*4OJ0/B')0]<#1Y_gR,dk*4OJ0", "//home/ubuntu/termite/projects/62_dom4j/]<#1Y_gR,dk*4OJ0/]<#1Y_gR,dk*4OJ0/B')0]<#1Y_gR,dk*4OJ0");
      defaultDocumentFactory0.createText("Couldn't create SAX reader");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Couldn't create SAX reader");
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributes2Impl0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributes2Impl1);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      Attributes2Impl attributes2Impl3 = new Attributes2Impl(attributes2Impl1);
      Attributes2Impl attributes2Impl4 = new Attributes2Impl(attributes2Impl2);
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl2);
      Attributes2Impl attributes2Impl5 = new Attributes2Impl();
      attributes2Impl3.getType(" predicates: ", "//tmp/Expected <QName> or *0/tmp/home/ubuntu/termite/projects/62_dom4j/B')/4IK+Hbml`yO*e/v/B')0]<#1Y_gR,dk*4OJ00?b|:=");
      AttributesImpl attributesImpl1 = new AttributesImpl(attributes2Impl1);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilter xMLFilter0 = sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader(xMLFilter0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      try { 
        sAXReader1.setProperty("KQH2xEkqyCC<f`", attributes2Impl0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: KQH2xEkqyCC<f`
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.31931252327703
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl0.resolveEntity("file://", "[ absolute: ");
      XMLReader xMLReader0 = sAXReader0.installXMLFilter(xMLFilterImpl0);
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte) (-125);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4467, (byte)0);
      SAXReader sAXReader2 = new SAXReader(xMLReader0, true);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        sAXReader2.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3030098046687266
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createNamespace("//home/ubuntu/termite/projects/62_dom4j/]<#1Y_gR,dk*4OJ0/]<#1Y_gR,dk*4OJ0/B')0]<#1Y_gR,dk*4OJ0", "//home/ubuntu/termite/projects/62_dom4j/]<#1Y_gR,dk*4OJ0/]<#1Y_gR,dk*4OJ0/B')0]<#1Y_gR,dk*4OJ0");
      defaultDocumentFactory0.createText("Couldn't create SAX reader");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributes2Impl0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl1);
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory3.createText(" : ");
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      // Undeclared exception!
      try { 
        sAXReader0.read("http://xml.org/sax/features/string-interning");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.557192582159071
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setStripWhitespaceText(true);
      sAXReader0.setValidation(true);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.setEncoding("http://xml.org/sax/features/namespaces");
      sAXReader0.getDocumentFactory();
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.isStripWhitespaceText();
      sAXReader0.getDocumentFactory();
      try { 
        sAXReader0.read("//tmp/Error on line 0k}*2Pc?}%'%sICx");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: //tmp/Error on line 0k}*2Pc?}%'%sICx Nested exception: no protocol: //tmp/Error on line 0k}*2Pc?}%'%sICx
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, false);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl1.resolveEntity((String) null, "file://");
      sAXReader0.installXMLFilter(xMLFilterImpl2);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader1 = new SAXReader(false);
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isValidating());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4858171770030553
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createText(":C@;]-<^I3VBFo^{");
      String string0 = "";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("/\n4R{9N", ":C@;]-<^I3VBFo^{");
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.util.SimpleSingleton", "/\n4R{9N");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl(attributesImpl0);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributesImpl0);
      Attributes2Impl attributes2Impl3 = new Attributes2Impl(attributes2Impl1);
      AttributesImpl attributesImpl1 = new AttributesImpl(attributes2Impl3);
      Attributes2Impl attributes2Impl4 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      sAXReader1.createDefaultEntityResolver("L5)");
      sAXReader0.isIncludeInternalDTDDeclarations();
      sAXReader1.installXMLFilter(xMLFilterImpl0);
      try { 
        sAXReader1.setXMLReaderClassName("");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.349742765197841
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      SAXParseException sAXParseException0 = new SAXParseException("//tmp/o^2L|q1cxA2*[0", locatorImpl0);
      defaultHandler0.error(sAXParseException0);
      sAXReader0.setErrorHandler(defaultHandler0);
      File file0 = MockFile.createTempFile("Xv{}uGT/Wzi!bOc5Q:", "Xv{}uGT/Wzi!bOc5Q:");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.214734015212756
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/,)tTxw}m4G&C;[,xh0lt");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "file://");
      PipedInputStream pipedInputStream0 = new PipedInputStream(47);
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.setProperty("http://xml.org/sax/properties/declaration-handler", "org.dom4j.IllegalAddException");
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // The value specified for property 'http://xml.org/sax/properties/declaration-handler' cannot be casted to org.xml.sax.ext.DeclHandler.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXParseException sAXParseException0 = new SAXParseException("//tmp/==9^[ha;|zM^`0==9^[ha;|zM^`", (String) null, "e", (byte) (-8), 47);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      URL uRL0 = MockURL.getFileExample();
      URI uRI0 = MockURL.toURI(uRL0);
      URL uRL1 = MockURI.toURL(uRI0);
      MockURL.URL(uRL1, "e");
      SAXReader sAXReader0 = new SAXReader();
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)13, (byte)13);
      byteArrayInputStream0.mark((byte)13);
      byteArrayInputStream0.close();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)13;
      byteArray1[2] = (byte)13;
      byteArray1[4] = (byte)119;
      byteArray1[5] = (byte)13;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1, 58, (byte)13);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream1);
      byteArrayInputStream1.read(byteArray1);
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.setFeature("http://xml.org/sax/features/use-locator2", true);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // Feature 'http://xml.org/sax/features/use-locator2' is read only.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.425954476320476
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "_wL0@XkC6h<7hBd");
      sAXReader0.setEncoding("");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      ElementStack elementStack0 = new ElementStack();
      elementStack0.getCurrent();
      DOMNamespace dOMNamespace0 = new DOMNamespace((Element) null, "_wL0@XkC6h<7hBd", "pgX|/0");
      QName qName0 = defaultDocumentFactory0.createQName("", (Namespace) dOMNamespace0);
      qName0.toString();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      QName qName1 = QName.get("8L@@");
      qName0.toString();
      QName qName2 = QName.get("8L@@", "z#&%[+<P;l`4vU.Vl");
      UserDataElement userDataElement0 = new UserDataElement(qName2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName1);
      nonLazyElement0.getQualifiedName();
      DOMNamespace dOMNamespace1 = new DOMNamespace(userDataElement0, "ju)AWsa/", "pgX|/0");
      SAXReader sAXReader1 = new SAXReader();
      StringReader stringReader0 = new StringReader("//tmp/3hoip,hHy*U.OD1E!hm0file:");
      try { 
        sAXReader0.read((Reader) stringReader0, "pgX|/0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document pgX|/0 : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.401586530460972
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = 2;
      sAXReader0.setEncoding("A\"X@");
      SAXParseException sAXParseException0 = new SAXParseException("", "A\"X@", "A\"X@", 2, (-1171));
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader1 = new SAXReader(parserAdapter0);
      String string0 = null;
      File file0 = MockFile.createTempFile("A\"X@", (String) null);
      file0.setReadOnly();
      file0.getAbsoluteFile();
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"A\"X@\". Nested exception: Invalid encoding name \"A\"X@\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader();
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertTrue(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      xMLReaderAdapter0.endElement("Validation not supported for XMLReader: ", "T{tj1=t", "Validation not supported for XMLReader: ");
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.getXMLReader();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createNamespace("//home/ubuntu/termite/projects/62_dom4j/]<#1Y_gR,dk*4OJ0/]<#1Y_gR,dk*4OJ0/B')0]<#1Y_gR,dk*4OJ0", "//home/ubuntu/termite/projects/62_dom4j/]<#1Y_gR,dk*4OJ0/]<#1Y_gR,dk*4OJ0/B')0]<#1Y_gR,dk*4OJ0");
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultDocumentFactory0.createText("/");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      QName.get("q,1)DUb+H(");
      defaultDocumentFactory2.createText("TY3jSk");
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLReader(xMLFilterImpl0);
      try { 
        sAXReader0.setXMLReaderClassName("TY3jSk");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class TY3jSk not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLReader xMLReader0 = null;
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      String string0 = "//tmp/,)tTxw}m4G&C;[,xh0lt";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-3&%|TpoU/e)#2");
      sAXReader0.setEncoding("//tmp/,)tTxw}m4G&C;[,xh0lt");
      try { 
        sAXReader0.read("//tmp/,)tTxw}m4G&C;[,xh0lt");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: //tmp/,)tTxw}m4G&C;[,xh0lt Nested exception: no protocol: //tmp/,)tTxw}m4G&C;[,xh0lt
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.312305887286281
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEncoding("amp");
      byte[] byteArray0 = new byte[1];
      String string0 = "4=:}3XN~6";
      AttributesImpl attributesImpl0 = new AttributesImpl();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("4=:}3XN~6");
      sAXReader_SAXEntityResolver0.uriPrefix = "CDATA_SECTION_NODE";
      sAXReader_SAXEntityResolver0.resolveEntity("I.|1Z?", "Error on line ");
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "ovR@AD%z");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultDocumentFactory0.createText("/");
      defaultDocumentFactory1.createPattern("/");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      QName.get("");
      defaultDocumentFactory1.createText("&Dc-EbGrfdM$w");
      NonLazyElement nonLazyElement0 = new NonLazyElement("KR=@6XY&CVYe");
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory1);
      try { 
        sAXReader0.read("/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:/// : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-6), 21);
      byteArrayInputStream0.mark((byte) (-6));
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.close();
      byteArrayInputStream0.skip((byte) (-6));
      byteArrayInputStream0.skip(1440L);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, 21, 463);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream1);
      SAXReader sAXReader0 = new SAXReader(true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream1 = new DataInputStream(sequenceInputStream0);
      try { 
        sAXReader0.read((InputStream) dataInputStream1, "D");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.flush();
      mockPrintWriter0.append('<');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory1);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      try { 
        sAXReader0.configureReader(parserAdapter0, defaultHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@5516f484 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.494366543619266
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = QName.get("");
      qName0.getQualifiedName();
      QName qName1 = defaultDocumentFactory0.createQName("", "~B)}?||Gv", "org.dom4j.tree.DefaultElement");
      DocumentFactory documentFactory0 = qName1.getDocumentFactory();
      qName0.setDocumentFactory(documentFactory0);
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      SAXReader sAXReader1 = new SAXReader(documentFactory0);
      sAXReader0.getEncoding();
      StringReader stringReader0 = new StringReader("}u");
      sAXReader0.getErrorHandler();
      sAXReader0.setEncoding("");
      MockFile mockFile0 = new MockFile("~B)}?||Gv", "org.dom4j.QName");
      MockFile.createTempFile("~B)}?||Gv", "", (File) mockFile0);
      MockFile mockFile1 = new MockFile(mockFile0, "");
      StringReader stringReader1 = new StringReader("org.dom4j.tree.DefaultElement");
      try { 
        sAXReader0.read((Reader) stringReader1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createDefaultEntityResolver("//home/ubuntu/termite/projects/62_dom4j/%/8(mr|~[4%1_>Mr6'*lOo~$-LW|1=");
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-6);
      QName qName0 = QName.get("//tmp/7.,']PYY41G![LB)J0org.dom4j.QName@5eac7096 [name: 7.,']PYY41G![LB)J namespace: \"org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]\"]");
      qName0.toString();
      QName qName1 = QName.get("//tmp/7.,']PYY41G![LB)J0org.dom4j.QName@5eac7096 [name: 7.,']PYY41G![LB)J namespace: \"org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]\"]");
      qName1.toString();
      QName.get("org.dom4j.QName@874d6550 [name: //tmp/7.,']PYY41G![LB)J0org.dom4j.QName@5eac7096 [name: 7.,']PYY41G![LB)J namespace: \"org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]\"] namespace: \"org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]\"]");
      AttributesImpl attributesImpl0 = new AttributesImpl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl0.startElement((String) null, "org.dom4j.QName@874d6550 [name: //tmp/7.,']PYY41G![LB)J0org.dom4j.QName@5eac7096 [name: 7.,']PYY41G![LB)J namespace: \"org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]\"] namespace: \"org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]\"]", "//tmp/==9^[ha;|zM^`0==9^[ha;|zM^`", attributesImpl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      xMLFilterImpl1.endDocument();
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (-1));
      try { 
        sAXReader0.setProperty("//tmp/==9^[ha;|zM^`0==9^[ha;|zM^`", byteArrayInputStream0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '//tmp/==9^[ha;|zM^`0==9^[ha;|zM^`' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.getExternalSubset("//tmp/DU3\"0a0.tmp", (String) null);
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createNamespace("//home/ubuntu/termite/projects/62_dom4j/]<#1Y_gR,dk*4OJ0/]<#1Y_gR,dk*4OJ0/B')0]<#1Y_gR,dk*4OJ0", "//home/ubuntu/termite/projects/62_dom4j/]<#1Y_gR,dk*4OJ0/]<#1Y_gR,dk*4OJ0/B')0]<#1Y_gR,dk*4OJ0");
      defaultDocumentFactory0.createText("/");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory3.createProcessingInstruction("T.<:+|cff7_", "T.<:+|cff7_");
      defaultDocumentFactory3.createText("");
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory3);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.3671774230734823
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.flush();
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println(" r[gP$|QoWK<&12O");
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) printWriter0;
      objectArray0[1] = (Object) printWriter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) printWriter0;
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) mockPrintWriter1;
      objectArray0[7] = (Object) mockPrintWriter1;
      objectArray0[8] = (Object) sAXReader0;
      mockPrintWriter2.format(locale0, " r[gP$|QoWK<&12O", objectArray0);
      mockPrintWriter2.println(0.0F);
      printWriter0.println(0.0F);
      MockFile mockFile0 = new MockFile("//tmp/4?_d0[px{-B.", " r[gP$|QoWK<&12O");
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockFile0);
      mockPrintWriter3.print(0.0F);
      MockFile mockFile1 = new MockFile(" r[gP$|QoWK<&12O", " r[gP$|QoWK<&12O");
      mockFile1.getAbsolutePath();
      URL uRL0 = mockFile1.toURL();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, " r[gP$|QoWK<&12O");
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/ r[gP$|QoWK<&12O/ r[gP$|QoWK<&12O (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/ r[gP$|QoWK<&12O/ r[gP$|QoWK<&12O (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2390954562106087
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      StringReader stringReader0 = new StringReader("//tmp/http:/xml.org/sax/features/validation0.tmp");
      try { 
        sAXReader0.read((Reader) stringReader0, "//tmp/http:/xml.org/sax/features/validation0.tmp");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@39620a51 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@39620a51 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.3326774197215174
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.278600407264681
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)13, (byte)13);
      byteArrayInputStream0.read(byteArray0);
      byteArrayInputStream0.mark((byte)13);
      byteArrayInputStream0.close();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte)13;
      byteArray1[2] = (byte)13;
      byteArray1[3] = (byte)13;
      byteArray1[4] = (byte)119;
      byteArray1[5] = (byte)13;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1, 58, (byte)13);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream1);
      SAXReader sAXReader0 = new SAXReader(true);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      StringReader stringReader0 = new StringReader("//tmp/A\"X@0.tmp");
      InputSource inputSource0 = new InputSource(stringReader0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.4135748571943636
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      mockPrintWriter0.print((-1));
      mockPrintWriter0.flush();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.flush();
      mockPrintWriter0.append('D');
      mockPrintWriter1.print(0L);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      mockPrintWriter0.println("iy,_Y?Uhw");
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter0, true);
      StringWriter stringWriter2 = new StringWriter();
      MockPrintWriter mockPrintWriter4 = new MockPrintWriter(stringWriter2, true);
      mockPrintWriter4.print((float) (-1));
      MockPrintWriter mockPrintWriter5 = new MockPrintWriter(mockPrintWriter3, true);
      mockPrintWriter4.print((float) 0L);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createEntity("", "iy,_Y?Uhw");
      defaultDocumentFactory0.createText("iy,_Y?Uhw");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory2);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      String string0 = "This should never happen. Caught: ";
      Locator2Impl locator2Impl0 = new Locator2Impl();
      sAXReader0.setIgnoreComments(false);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl0);
      attributesImpl0.getType("4qYKR6?%Lw51SA", "4qYKR6?%Lw51SA");
      attributes2Impl0.setAttributes(attributesImpl0);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      AttributesImpl attributesImpl1 = new AttributesImpl();
      AttributesImpl attributesImpl2 = new AttributesImpl(attributesImpl1);
      AttributesImpl attributesImpl3 = new AttributesImpl(attributesImpl2);
      Attributes2Impl attributes2Impl2 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Attributes2Impl attributes2Impl3 = new Attributes2Impl();
      attributesImpl0.getIndex("lower-case", "org.jaxen.expr.PredicateSet");
      Attributes2Impl attributes2Impl4 = new Attributes2Impl();
      Attributes2Impl attributes2Impl5 = new Attributes2Impl(attributes2Impl4);
      AttributesImpl attributesImpl4 = new AttributesImpl(attributesImpl0);
      Attributes2Impl attributes2Impl6 = new Attributes2Impl();
      Attributes2Impl attributes2Impl7 = new Attributes2Impl(attributes2Impl5);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attributes2Impl attributes2Impl8 = new Attributes2Impl(attributes2Impl0);
      AttributesImpl attributesImpl5 = new AttributesImpl(attributesImpl3);
      AttributesImpl attributesImpl6 = new AttributesImpl(attributes2Impl0);
      Attributes2Impl attributes2Impl9 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      try { 
        sAXReader0.setXMLReaderClassName("org.jaxen.expr.PredicateSet");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class org.jaxen.expr.PredicateSet does not implement XMLReader
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "p;$W`F_],U(";
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      try { 
        sAXReader0.read("enF;9*:");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: enF;9*: Nested exception: no protocol: enF;9*:
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-8);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-8), 644);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.close();
      byteArrayInputStream1.skip((byte) (-8));
      byteArrayInputStream1.skip((byte) (-8));
      byteArrayInputStream1.close();
      byteArrayInputStream1.skip(0L);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, (-1), 364);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0, 357, (byte) (-8));
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream5 = new ByteArrayInputStream(byteArray0, 1, (byte) (-8));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream3);
      SAXReader sAXReader0 = new SAXReader();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream5, 357);
      bufferedInputStream0.markSupported();
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream3);
      SAXReader sAXReader1 = new SAXReader((String) null);
      try { 
        sAXReader1.read((InputStream) byteArrayInputStream3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(false);
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      SAXParseException sAXParseException0 = new SAXParseException("')Q_", (Locator) null);
      StringWriter stringWriter0 = new StringWriter();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("')Q_");
      sAXReader_SAXEntityResolver0.resolveEntity("Expected <QName> or *", (String) null);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      AttributesImpl attributesImpl1 = new AttributesImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl(attributesImpl1);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl();
      Attributes2Impl attributes2Impl3 = new Attributes2Impl();
      Attributes2Impl attributes2Impl4 = new Attributes2Impl(attributes2Impl3);
      AttributesImpl attributesImpl2 = new AttributesImpl(attributesImpl1);
      Attributes2Impl attributes2Impl5 = new Attributes2Impl();
      Attributes2Impl attributes2Impl6 = new Attributes2Impl(attributes2Impl3);
      Attributes2Impl attributes2Impl7 = new Attributes2Impl(attributes2Impl3);
      Attributes2Impl attributes2Impl8 = new Attributes2Impl(attributes2Impl6);
      Attributes2Impl attributes2Impl9 = new Attributes2Impl();
      AttributesImpl attributesImpl3 = new AttributesImpl(attributesImpl1);
      Attributes2Impl attributes2Impl10 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader1.setXMLReaderClassName("Expected <QName> or *");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class Expected <QName> or * not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader();
      MockFile mockFile0 = new MockFile("//tmp/tmp/,#E0/tmp/org.dom4j.QName@2f [name: / namespace: \"org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]\"]00/tmp/,#E0/tmp/org.dom4j.QName@2f [name: / namespace: \"org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]\"]0", "@b4n");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.installXMLFilter((XMLReader) null);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.flush();
      mockPrintWriter0.append('<');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println("");
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      mockPrintWriter2.println(0.0F);
      MockFile mockFile0 = new MockFile("gP", "Validation not supported for XMLReader: ");
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print(1391.79F);
      MockFile mockFile1 = new MockFile("http://xml.org/sax/features/validation", "");
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      MockException mockException0 = new MockException((Throwable) null);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      SAXParseException sAXParseException0 = new SAXParseException("Validation not supported for XMLReader: ", locator2Impl0, mockException0);
      sAXParseException0.getLineNumber();
      sAXParseException0.toString();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      try { 
        sAXReader0.setProperty("gP", "http://xml.org/sax/features/validation");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'gP' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      QName qName0 = QName.get("[#", namespace0, "[#");
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName0);
      DOMNamespace dOMNamespace0 = new DOMNamespace((Element) null, (String) null, "oF\"");
      DOMNamespace dOMNamespace1 = new DOMNamespace(nonLazyElement0, "", "[pCE%E%{Gr?n7cWPI{}");
      DefaultDocumentFactory.getInstance();
      sAXReader0.setFeature("http://xml.org/sax/features/namespace-prefixes", true);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      SAXParseException sAXParseException0 = new SAXParseException("')Q_", (Locator) null);
      StringWriter stringWriter0 = new StringWriter();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("')Q_");
      AttributesImpl attributesImpl0 = new AttributesImpl();
      AttributesImpl attributesImpl1 = new AttributesImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl(attributesImpl1);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl();
      Attributes2Impl attributes2Impl3 = new Attributes2Impl(attributes2Impl1);
      AttributesImpl attributesImpl2 = new AttributesImpl(attributesImpl1);
      Attributes2Impl attributes2Impl4 = new Attributes2Impl();
      Attributes2Impl attributes2Impl5 = new Attributes2Impl(attributes2Impl2);
      Attributes2Impl attributes2Impl6 = new Attributes2Impl();
      Attributes2Impl attributes2Impl7 = new Attributes2Impl(attributes2Impl5);
      Attributes2Impl attributes2Impl8 = new Attributes2Impl();
      AttributesImpl attributesImpl3 = new AttributesImpl(attributesImpl1);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertNotNull(xMLReader0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.3834744755118558
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.removeHandler("org.dom4j.dom.DOMDocument");
      sAXReader0.getDispatchHandler();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.configureReader(parserAdapter0, sAXContentHandler0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("T*m", "T*m");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      DocumentFactory documentFactory1 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertSame(documentFactory1, defaultDocumentFactory0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributes2Impl0);
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributes2Impl1);
      Attributes2Impl attributes2Impl3 = new Attributes2Impl(attributes2Impl2);
      attributes2Impl0.getType("not", "not");
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl1);
      AttributesImpl attributesImpl1 = new AttributesImpl(attributes2Impl0);
      Attributes2Impl attributes2Impl4 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.2414456828156455
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "\"");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setDefaultHandler((ElementHandler) null);
      SAXReader sAXReader1 = new SAXReader();
      sAXReader0.removeHandler("");
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      
      QName qName0 = QName.get("");
      Namespace namespace0 = Namespace.get("http://xml.org/sax/properties/lexical-handler", "org.jaxen.expr.iter.IterableParentAxis");
      QName.get("\"", namespace0, "");
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName0);
      DOMNamespace dOMNamespace0 = new DOMNamespace(nonLazyElement0, "UI9?zbk", "//tmp/iZ7iczS0?QIF.CG^X1F?E4qa");
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader2 = new SAXReader(documentFactory0);
      assertFalse(sAXReader2.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader2.isStripWhitespaceText());
      assertFalse(sAXReader2.isIgnoreComments());
      assertFalse(sAXReader2.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader2.isStringInternEnabled());
      assertFalse(sAXReader2.isMergeAdjacentText());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.440140500251581
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.addHandler("org.dom4j.io.SAXContentHandler", pruningDispatchHandler0);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)21;
      byteArray0[8] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getEntityResolver();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      QName qName0 = QName.get("//tmp/\n4R{9N0");
      qName0.getDocumentFactory();
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      URI uRI0 = MockURI.aHttpURI;
      AttributesImpl attributesImpl0 = new AttributesImpl();
      AttributesImpl attributesImpl1 = new AttributesImpl(attributesImpl0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl(attributesImpl1);
      AttributesImpl attributesImpl2 = new AttributesImpl(attributesImpl1);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.startElement("", " ='\"", ";=+g[7U", attributesImpl1);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl3);
      try { 
        sAXReader1.setXMLReaderClassName("");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.2394714949802967
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setDocumentFactory(documentFactory0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.addHandler("r>:BT\u0002$J+OGT$", (ElementHandler) null);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      xMLReaderAdapter0.endDocument();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.processingInstruction("", "");
      dispatchHandler0.removeHandler("lf3");
      dispatchHandler0.setDefaultHandler((ElementHandler) null);
      parserAdapter0.getDTDHandler();
      parserAdapter0.setContentHandler(xMLReaderAdapter0);
      sAXReader0.addHandler("\"xl@iD*@7-", dispatchHandler0);
      sAXReader0.setValidation(false);
      sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.getEntityResolver();
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.setMergeAdjacentText(false);
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.getXMLFilter();
      sAXReader0.isStripWhitespaceText();
      sAXReader0.resetHandlers();
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.setEntityResolver((EntityResolver) null);
      sAXReader0.getErrorHandler();
      sAXReader0.getDocumentFactory();
      try { 
        MockURL.URL((URL) null, "");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.2627410975693714
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      xMLReaderAdapter0.setErrorHandler(xMLFilterImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      xMLFilterImpl0.setDocumentLocator(locator2Impl0);
      xMLFilterImpl0.getErrorHandler();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.getDocumentFactory();
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      sAXReader0.setEntityResolver(xMLFilterImpl1);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      sAXReader0.getDocumentFactory();
      sAXReader0.setValidation(false);
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.resolveEntity("", "");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.getType("4qYKR6?%Lw51SA", "4qYKR6?%Lw51SA");
      attributes2Impl0.setAttributes(attributes2Impl0);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      AttributesImpl attributesImpl1 = new AttributesImpl(attributesImpl0);
      AttributesImpl attributesImpl2 = new AttributesImpl(attributesImpl1);
      Attributes2Impl attributes2Impl2 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Attributes2Impl attributes2Impl3 = new Attributes2Impl();
      attributes2Impl0.getIndex("lower-case", "4qYKR6?%Lw51SA");
      Attributes2Impl attributes2Impl4 = new Attributes2Impl();
      Attributes2Impl attributes2Impl5 = new Attributes2Impl(attributes2Impl4);
      AttributesImpl attributesImpl3 = new AttributesImpl(attributes2Impl0);
      Attributes2Impl attributes2Impl6 = new Attributes2Impl();
      Attributes2Impl attributes2Impl7 = new Attributes2Impl(attributes2Impl5);
      Attributes2Impl attributes2Impl8 = new Attributes2Impl(attributes2Impl0);
      AttributesImpl attributesImpl4 = new AttributesImpl(attributesImpl2);
      AttributesImpl attributesImpl5 = new AttributesImpl(attributes2Impl0);
      Attributes2Impl attributes2Impl9 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getDispatchHandler();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.resetHandlers();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      SAXParseException sAXParseException0 = new SAXParseException("Unrecognized axis code: ", (Locator) null);
      SAXParseException sAXParseException1 = new SAXParseException("z9#)FUs,H[6souQqe", "!#+:|2|:X", "Unrecognized axis code: ", (-530), 45, sAXParseException0);
      SAXParseException sAXParseException2 = new SAXParseException("4SL( $`R+", (Locator) null, sAXParseException1);
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl0);
      attributes2Impl0.setAttributes(attributesImpl0);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      AttributesImpl attributesImpl1 = new AttributesImpl();
      AttributesImpl attributesImpl2 = new AttributesImpl(attributesImpl1);
      AttributesImpl attributesImpl3 = new AttributesImpl(attributesImpl2);
      Attributes2Impl attributes2Impl2 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Attributes2Impl attributes2Impl3 = new Attributes2Impl();
      attributesImpl0.getIndex("lower-case", "org.jaxen.expr.PredicateSet");
      Attributes2Impl attributes2Impl4 = new Attributes2Impl();
      Attributes2Impl attributes2Impl5 = new Attributes2Impl(attributes2Impl4);
      AttributesImpl attributesImpl4 = new AttributesImpl(attributesImpl0);
      Attributes2Impl attributes2Impl6 = new Attributes2Impl();
      Attributes2Impl attributes2Impl7 = new Attributes2Impl(attributes2Impl5);
      Attributes2Impl attributes2Impl8 = new Attributes2Impl(attributes2Impl0);
      AttributesImpl attributesImpl5 = new AttributesImpl();
      Attributes2Impl attributes2Impl9 = new Attributes2Impl(attributes2Impl0);
      AttributesImpl attributesImpl6 = new AttributesImpl();
      AttributesImpl attributesImpl7 = new AttributesImpl(attributesImpl6);
      Attributes2Impl attributes2Impl10 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createNamespace("", "org.jaxen.expr.iter.IterableNamespaceAxis");
      defaultDocumentFactory0.createText("@7RH2u$");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createQName("//tmp/mO*L{Ig4h8Ff!0c9,DlZsOlGB");
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      Document document0 = defaultDocumentFactory0.createDocument();
      defaultDocumentFactory7.createQName("org.jaxen.expr.iter.IterableNamespaceAxis");
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory1);
      sAXReader0.setStripWhitespaceText(false);
      Object object0 = new Object();
      try { 
        sAXReader0.setProperty("\"*=rK  [LZ*43QWq", document0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '\"*=rK  [LZ*43QWq' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      QName qName0 = QName.get("[#", namespace0, "[#");
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName0);
      DOMNamespace dOMNamespace0 = new DOMNamespace((Element) null, (String) null, "oF\"");
      DOMNamespace dOMNamespace1 = new DOMNamespace(nonLazyElement0, "~", "[pCE%E%{Gr?n7cWPI{}");
      DefaultDocumentFactory.getInstance();
      try { 
        sAXReader0.setFeature("Notation", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'Notation' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/No modification allowed0mpw!%");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      QName qName0 = QName.get("7.,']PYY41G![LB)J");
      qName0.toString();
      QName qName1 = QName.get("8L@@");
      qName0.toString();
      QName qName2 = QName.get("//tmp/iZ7iczS0?QIF.CG^X1F?E4qa", "7.,']PYY41G![LB)J");
      UserDataElement userDataElement0 = new UserDataElement(qName2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName1);
      nonLazyElement0.getQualifiedName();
      DOMNamespace dOMNamespace0 = new DOMNamespace(nonLazyElement0, "//tmp/?QIF.CG^X1F?E4qa0org.jaxen.dom4j.DocumentNavigator", "7.,']PYY41G![LB)J");
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("//tmp/Z7iczS0?QIF.CG^X1F?E4qa");
      try { 
        sAXReader0.read((Reader) stringReader0, "//tmp/No modification allowed0mpw!%");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document //tmp/No modification allowed0mpw!% : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.3868214863623547
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader(true);
          StringWriter stringWriter0 = new StringWriter();
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
          mockPrintWriter0.flush();
          PrintWriter printWriter0 = mockPrintWriter0.append('<');
          MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
          mockPrintWriter1.println("");
          StringWriter stringWriter1 = new StringWriter();
          MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
          Locale locale0 = Locale.KOREA;
          Object[] objectArray0 = new Object[9];
          objectArray0[0] = (Object) printWriter0;
          objectArray0[1] = (Object) printWriter0;
          objectArray0[2] = (Object) locale0;
          objectArray0[3] = (Object) locale0;
          objectArray0[4] = (Object) printWriter0;
          objectArray0[5] = (Object) stringWriter0;
          objectArray0[6] = (Object) mockPrintWriter1;
          objectArray0[7] = (Object) mockPrintWriter1;
          objectArray0[8] = (Object) sAXReader0;
          mockPrintWriter2.format(locale0, "", objectArray0);
          mockPrintWriter2.println(0.0F);
          printWriter0.println(0.0F);
          MockFile mockFile0 = new MockFile("//tmp/4?_d0[Lx{-B.", "");
          MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockFile0);
          mockPrintWriter3.write("");
          mockPrintWriter3.print(0.0F);
          mockFile0.getAbsolutePath();
          URL uRL0 = MockURL.getFtpExample();
          SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/4?_d0[Lx{-B.");
          sAXReader_SAXEntityResolver0.resolveEntity((String) null, "");
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor313.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor313.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getEncoding();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      QName qName0 = QName.get("7.,']PYY41G![LB)J");
      qName0.toString();
      QName qName1 = QName.get("8L@@");
      qName0.toString();
      QName qName2 = QName.get("//tmp/iZ7iczS0?QIF.CG^X1F?E4qa", "7.,']PYY41G![LB)J");
      UserDataElement userDataElement0 = new UserDataElement(qName2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName1);
      nonLazyElement0.getQualifiedName();
      DOMNamespace dOMNamespace0 = new DOMNamespace(nonLazyElement0, "//tmp/?QIF.CG^X1F?E4qa0org.jaxen.dom4j.DocumentNavigator", "7.,']PYY41G![LB)J");
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("//tmp/Z7iczS0?QIF.CG^X1F?E4qa");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      defaultDocumentFactory0.createNamespace("", "org.jaxen.expr.iter.IterableNamespaceAxis");
      defaultDocumentFactory0.createText("");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultText defaultText0 = new DefaultText("9-rrkbZPq");
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createQName("org.jaxen.expr.iter.IterableNamespaceAxis");
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      defaultDocumentFactory8.createText("");
      DefaultDocumentFactory defaultDocumentFactory9 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory10 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      try { 
        sAXReader0.read(" it must be greater than 2");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/ it must be greater than 2 (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/ it must be greater than 2 (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.flush();
      mockPrintWriter0.append('<');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println("");
      StringWriter stringWriter1 = new StringWriter();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(stringWriter1, true);
      float float0 = 0.75F;
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.resolveEntity("tiQgK|}21BOdTOc_", "tiQgK|}21BOdTOc_", (String) null, "tiQgK|}21BOdTOc_");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createText("@7Rn2ub");
      defaultDocumentFactory1.createNamespace("A", "@7Rn2ub");
      defaultDocumentFactory1.createText("//tmp/Xv{}uGT/Wzi!bOc5Q:0Xv{}uGT/Wzi!bOc5Q:");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      defaultDocumentFactory8.createQName("");
      defaultDocumentFactory1.createText("//tmp/y 'E&44rB^4;0VuRl");
      DefaultDocumentFactory defaultDocumentFactory9 = new DefaultDocumentFactory();
      defaultDocumentFactory6.createProcessingInstruction("@7Rn2ub", "@7Rn2ub");
      DefaultDocumentFactory defaultDocumentFactory10 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createProcessingInstruction("[(DefaultAbsoluteLocationPath): ", "@7Rn2ub");
      DefaultDocumentFactory defaultDocumentFactory11 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory12 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory12);
      try { 
        sAXReader0.read("_uZ~v2!");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/_uZ~v2! (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/_uZ~v2! (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.2407560846182575
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("/\n4R{9N");
      sAXReader_SAXEntityResolver0.resolveEntity("JhfL}X-%SnEm$*@ &i", "//tmp/47L9G0w4{TI");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "http://xml.org/sax/features/namespaces");
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      AttributesImpl attributesImpl1 = new AttributesImpl(attributesImpl0);
      Attributes2Impl attributes2Impl2 = new Attributes2Impl();
      Attributes2Impl attributes2Impl3 = new Attributes2Impl(attributesImpl0);
      AttributesImpl attributesImpl2 = new AttributesImpl(attributesImpl0);
      Attributes2Impl attributes2Impl4 = new Attributes2Impl();
      Attributes2Impl attributes2Impl5 = new Attributes2Impl(attributes2Impl4);
      AttributesImpl attributesImpl3 = new AttributesImpl();
      Attributes2Impl attributes2Impl6 = new Attributes2Impl(attributesImpl3);
      AttributesImpl attributesImpl4 = new AttributesImpl(attributes2Impl6);
      Attributes2Impl attributes2Impl7 = new Attributes2Impl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultDocumentFactory0.createText("/");
      defaultDocumentFactory1.createPattern("/");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      QName.get("");
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory3);
      namespaceStack0.getNamespaceForPrefix("&Dc-EbGrfdM$w");
      defaultDocumentFactory1.createQName("", (Namespace) null);
      defaultDocumentFactory1.createText("&Dc-EbGrfdM$w");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory1, true);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      
      NonLazyElement nonLazyElement0 = new NonLazyElement("KR=@6XY&CVYe");
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory1);
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isStripWhitespaceText());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      boolean boolean0 = true;
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.flush();
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println("");
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter1, false);
      MockPrintWriter mockPrintWriter4 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter1.print(0.75F);
      mockPrintWriter4.print(false);
      MockPrintWriter mockPrintWriter5 = new MockPrintWriter("Ny-Aa");
      printWriter0.println("Ny-Aa");
      File file0 = MockFile.createTempFile("mO*L{Ig4h8Ff!", "c9,DlZsOlGB");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.flush();
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      printWriter0.print(2620L);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      String string0 = "";
      mockPrintWriter1.println("");
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      String string1 = "org.jaxen.dom4j.DocumentNavigator";
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "http://xml.org/sax/features/validation");
      defaultDocumentFactory0.createQName("", "#### Warning: couldn't create bean: ");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.isValidating();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.notationDecl("/", "/", "/");
      sAXReader0.configureReader(parserAdapter0, defaultHandler0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.isValidating();
      sAXReader0.setMergeAdjacentText(true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, sAXContentHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createText("d");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      QName.get("F,1)DU6+H(");
      NonLazyElement nonLazyElement0 = new NonLazyElement("}(lu4hI9A&9hL");
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setMergeAdjacentText(false);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("Td p_AR9t", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class Td p_AR9t not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createNamespace((String) null, "//home/ubunt/termite/projects/62_domj/]<#1Y_gR,dk*4OJ0/]<#1YgR,dk*4OJ0/B')0]<#1Y_gR,dk*4OJ0");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createText("");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      defaultDocumentFactory3.createProcessingInstruction("//home/ubunt/termite/projects/62_domj/]<#1Y_gR,dk*4OJ0/]<#1YgR,dk*4OJ0/B')0]<#1Y_gR,dk*4OJ0", "MPHR:ZI!P #;i<");
      defaultDocumentFactory1.createText("");
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.createXMLReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      defaultDocumentFactory0.createNamespace("", "org.jaxen.expr.iter.IterableNamespaceAxis");
      defaultDocumentFactory0.createText("@7Rn2ub");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultText defaultText0 = new DefaultText("@7Rn2ub");
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      defaultDocumentFactory7.createQName("");
      defaultDocumentFactory6.createText("");
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory9 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory3);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-6), 21);
      byteArrayInputStream0.mark((byte) (-6));
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.close();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, 21, 463);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream1);
      SAXReader sAXReader0 = new SAXReader(true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream1 = new DataInputStream(sequenceInputStream0);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
