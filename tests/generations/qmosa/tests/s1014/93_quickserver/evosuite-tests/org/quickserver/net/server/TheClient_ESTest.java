/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 04:05:09 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.SocketAddress;
import java.net.SocketOption;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.util.xmlreader.Secure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      QuickServer quickServer1 = new QuickServer();
      quickServer1.configQuickServer();
      quickServer1.setClientBinaryHandler("");
      theClient0.setServer(quickServer1);
      theClient0.setServer(quickServer1);
      QuickServer quickServer2 = new QuickServer();
      QuickServer quickServer3 = new QuickServer();
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getLocalSocketAddress();
      mockSocket0.bind((SocketAddress) null);
      theClient0.setSocket(mockSocket0);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getSocket();
      System.setCurrentTimeMillis(0L);
      theClient0.getServer();
      theClient0.getServer();
      theClient0.getClientBinaryHandler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      theClient0.getAuthenticator();
      System.setCurrentTimeMillis(0L);
      theClient0.getSocketChannel();
      theClient0.getClientWriteHandler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      theClient0.getClientObjectHandler();
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      theClient0.getServer();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.19741190322987
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:40>", blockingClientHandler0.getName());
      
      TheClient theClient0 = new TheClient();
      theClient0.setClientCommandHandler(commandHandler0);
      TheClient theClient1 = new TheClient();
      theClient1.getClientBinaryHandler();
      theClient0.getClientCommandHandler();
      theClient1.toString();
      theClient1.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient1.getMaxAuthTry();
      theClient0.getSocketChannel();
      theClient0.setSocketChannel((SocketChannel) null);
      theClient1.setSocketChannel((SocketChannel) null);
      theClient1.getMaxAuthTry();
      QuickServer quickServer0 = new QuickServer("");
      Secure secure0 = new Secure();
      secure0.setProtocol("dO9uq");
      quickServer0.getSecurityManager();
      secure0.setLoad(false);
      secure0.setLoad(false);
      quickServer0.setSecure(secure0);
      quickServer0.setServiceState(0);
      theClient0.setServer(quickServer0);
      theClient1.getMaxAuthTry();
      theClient1.getTimeout();
      theClient0.getServer();
      TheClient theClient2 = new TheClient();
      theClient2.getTimeout();
      theClient1.toString();
      theClient1.getClientObjectHandler();
      theClient2.getServer();
      theClient2.getAuthenticator();
      //  // Unstable assertion: assertEquals(0, theClient2.getMaxAuthTry());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.196939089991099
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      theClient0.setTrusted(false);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientBinaryHandler();
      CommandHandler commandHandler1 = (CommandHandler)theClient0.getClientCommandHandler();
      theClient0.toString();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      commandHandler1.lostConnection(blockingClientHandler0);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getMaxAuthTry();
      theClient0.setClientCommandHandler(commandHandler1);
      theClient0.getMaxAuthTry();
      QuickServer quickServer0 = new QuickServer("g");
      Secure secure0 = new Secure();
      quickServer0.setSecure(secure0);
      secure0.setLoad(false);
      secure0.setLoad(false);
      quickServer0.setSecure((Secure) null);
      quickServer0.setServiceState(4416);
      theClient0.setServer(quickServer0);
      theClient0.getTimeout();
      theClient0.setMaxAuthTry(1128);
      theClient0.getTimeout();
      theClient0.getServer();
      theClient0.getTimeout();
      theClient0.toString();
      theClient0.getClientObjectHandler();
      System.setCurrentTimeMillis(724L);
      theClient0.getClientWriteHandler();
      assertEquals(1128, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("");
      theClient0.getMaxAuthTryMsg();
      theClient0.getMaxConnectionMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("j|sCu AS", 2);
      Proxy proxy0 = new Proxy(proxy_Type0, inetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getSoTimeout();
      theClient0.setSocket(mockSocket0);
      theClient0.getSocket();
      String string0 = theClient0.toString();
      assertFalse(theClient0.getTrusted());
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      theClient0.setTimeoutMsg("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.getTimeoutMsg();
      System.setCurrentTimeMillis((-402L));
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-71));
      theClient0.setMaxAuthTryMsg("NK)aa\"vDvdm^N!");
      theClient0.setMaxAuthTry((-1));
      theClient0.setMaxAuthTryMsg("NK)aa\"vDvdm^N!");
      theClient0.getMaxAuthTryMsg();
      theClient0.getMaxAuthTry();
      theClient0.toString();
      assertEquals((-1), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.485528191921338
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      theClient0.setMaxConnectionMsg("H");
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      commandHandler0.closingConnection(blockingClientHandler0);
      assertEquals("<ClientHandler-Pool#-1-ID:1>", blockingClientHandler0.getName());
      
      theClient0.getClientCommandHandler();
      theClient0.toString();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getMaxAuthTry();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      ClientEvent clientEvent0 = theClient0.getClientEvent();
      theClient0.setClientEvent(clientEvent0);
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientWriteHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getMaxConnectionMsg();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.getClientWriteHandler();
      assertEquals(0, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("Og$");
      theClient0.getTimeoutMsg();
      theClient0.getTimeoutMsg();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Og$");
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler((-170));
      commandHandler0.closingConnection(blockingClientHandler0);
      assertEquals("<ClientHandler-Pool#-170-ID:1>", blockingClientHandler0.getName());
      
      theClient0.setClientEventHandler(commandHandler0);
      ClientEvent clientEvent0 = ClientEvent.READ;
      theClient0.getClientEventHandler();
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("");
      theClient0.setMaxConnectionMsg((String) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getMaxConnectionMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(true);
      theClient0.getTrusted();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis((-2161L));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      theClient0.setTimeout(9);
      int int0 = theClient0.getTimeout();
      assertEquals(9, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("3o hocket");
      theClient0.getMaxAuthTryMsg();
      int int0 = theClient0.getMaxAuthTry();
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, int0);
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      Data data0 = new Data();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)49;
      data0.setPassword(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)118;
      byteArray1[1] = (byte) (-42);
      byteArray1[2] = (byte) (-30);
      byteArray1[3] = (byte)48;
      data0.setPassword(byteArray1);
      data0.setLastAsked("");
      data0.setLastAsked("lQ+pYxYu(gq}");
      data0.setLastAsked("lQ+pYxYu(gq}");
      TheClient theClient0 = new TheClient();
      theClient0.setClientData(data0);
      theClient0.setTimeout(0);
      MockSocket mockSocket0 = new MockSocket();
      theClient0.getSocket();
      theClient0.getClientData();
      theClient0.getClientWriteHandler();
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getTimeout());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertFalse(theClient0.getCommunicationLogging());
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-71));
      theClient0.setMaxAuthTryMsg("NK)aa\"vDvdm^N!");
      theClient0.setMaxAuthTry(93);
      theClient0.setMaxAuthTryMsg("NK)aa\"vDvdm^N!");
      theClient0.getMaxAuthTryMsg();
      theClient0.getMaxAuthTry();
      theClient0.toString();
      assertEquals(93, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9676652704776565
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)10;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientEvent();
      theClient0.getClientBinaryHandler();
      theClient0.getClientExtendedEventHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientData();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)56;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)100;
      byteArray1[1] = (byte)56;
      byteArray1[2] = (byte) (-100);
      byteArray1[3] = (byte)100;
      byteArray1[4] = (byte)56;
      byteArray1[5] = (byte)56;
      byteArray1[6] = (byte)56;
      byteArray1[7] = (byte)125;
      byteArray1[8] = (byte)100;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray1);
      byteArray0[3] = (byte) (-2);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)0;
      byteArray0[8] = (byte)98;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      boolean boolean0 = theClient0.getTrusted();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(boolean0);
      
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getTimeoutMsg();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CommandHandler commandHandler0 = new CommandHandler();
      TheClient theClient0 = new TheClient();
      theClient0.setAuthenticator((Authenticator) null);
      CommandHandler commandHandler1 = new CommandHandler();
      assertFalse(commandHandler1.equals((Object)commandHandler0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      QuickServer quickServer1 = new QuickServer();
      theClient0.setServer(quickServer1);
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      QuickServer quickServer2 = new QuickServer();
      assertNull(quickServer2.getClientEventHandler());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          TheClient theClient0 = new TheClient();
          theClient0.setTimeout((-934));
          theClient0.getTimeout();
          SocketOption<Integer> socketOption0 = (SocketOption<Integer>) mock(SocketOption.class, new ViolatedAssumptionAnswer());
          Integer integer0 = new Integer(0);
          MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 26);
          mockInetSocketAddress0.getHostName();
          mockInetSocketAddress0.getHostName();
          String string0 = mockInetSocketAddress0.getHostName();
          assertEquals("127.0.0.1", string0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      assertFalse(theClient0.getTrusted());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      org.quickserver.net.qsadmin.Authenticator authenticator1 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator1);
      theClient0.getClientAuthenticationHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }
}
