/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 04:28:18 GMT 2019
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.ComponentListener;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.AffineTransform;
import java.awt.image.ShortLookupTable;
import java.awt.image.renderable.ParameterBlock;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.net.URL;
import java.time.Month;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import javax.media.jai.CollectionOp;
import javax.media.jai.OperationRegistry;
import javax.media.jai.WarpGrid;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;
import javax.swing.JSpinner;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.ListDataListener;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.plaf.PanelUI;
import javax.swing.plaf.basic.BasicPanelUI;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.VisualPageListItem;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addListDataListener((ListDataListener) null);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet1 = new TreeSet<VisualPageListItem>((SortedSet<VisualPageListItem>) treeSet0);
      treeSet1.addAll(treeSet0);
      treeSet0.addAll(treeSet1);
      visualListModel0.appendAllElements(treeSet0);
      Vector<VisualPageListItem> vector0 = null;
      visualListModel0.data = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">");
      byte[] byteArray0 = new byte[7];
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ">");
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)123;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt(91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.43922990176965
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[5] = visualPageListItemArray0[1];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[6];
      intArray1[0] = 5;
      visualListModel0.moveUpIndexes(intArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      visualListModel0.reverseElements(intArray1);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray2 = new int[3];
      intArray2[0] = 5;
      intArray2[1] = 5;
      intArray2[2] = 5;
      visualListModel0.moveUpIndex(5);
      visualListModel1.rotateClockwiseElements(intArray2);
      // Undeclared exception!
      try { 
        visualListModel0.subList(5, (-2736));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(5) > toIndex(-2736)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2786339548781145
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) visualListModel0);
      predicate0.negate();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[6];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1763);
      intArray0[1] = (-3285);
      intArray0[2] = 5;
      intArray0[3] = 5;
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      try { 
        visualListModel0.reverseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1763
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Integer> defaultComboBoxModel0 = new DefaultComboBoxModel<Integer>();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(defaultComboBoxModel0);
      jComboBox0.getMaximumSize();
      visualListModel0.data = null;
      // Undeclared exception!
      try { 
        visualListModel0.subList(0, 0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4208430327407737
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[11];
      visualListModel0.moveDownIndexes(intArray0);
      intArray0[0] = (-6);
      intArray0[1] = (-6);
      intArray0[2] = (-6);
      intArray0[3] = 46;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray1 = new int[0];
      visualListModel0.moveUpIndexes(intArray1);
      int[] intArray2 = new int[6];
      intArray0[1] = (-399);
      visualListModel0.moveUpIndexes(intArray1);
      intArray2[5] = 20;
      visualListModel0.moveDownIndexes(intArray2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      visualListModel0.reverseElements(intArray1);
      visualListModel0.rotateClockwiseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1797413261689855
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[5] = visualPageListItemArray0[1];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray1 = new int[6];
      intArray1[0] = 5;
      intArray1[1] = (-399);
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveDownIndex(5);
      assertEquals(7, visualListModel0.getSize());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      JSpinner jSpinner0 = new JSpinner();
      jSpinner0.createImage(90, 90);
      JSpinner.DefaultEditor jSpinner_DefaultEditor0 = new JSpinner.DefaultEditor(jSpinner0);
      jSpinner_DefaultEditor0.getVisibleRect();
      jSpinner0.isFocusOwner();
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(116, 0);
      jSpinner_DefaultEditor0.getClientProperty(keyStroke0);
      String string0 = "A=ok";
      jSpinner_DefaultEditor0.getHeight();
      PanelUI panelUI0 = jSpinner_DefaultEditor0.getUI();
      panelUI0.getAccessibleChildrenCount(jSpinner0);
      jSpinner_DefaultEditor0.setUI(panelUI0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2427276237316462
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      Consumer<VisualPageListItem> consumer0 = (Consumer<VisualPageListItem>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      stack0.add((VisualPageListItem) null);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      stack0.retainAll(linkedHashSet0);
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = visualPageListItemArray0[1];
      visualListModel0.setData(visualPageListItemArray0);
      stack0.add(visualPageListItemArray0[3]);
      int[] intArray0 = new int[6];
      visualListModel0.getElements();
      visualListModel0.removeElements(intArray0, true);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      JSpinner jSpinner0 = new JSpinner();
      int int0 = 90;
      jSpinner0.createImage(90, 90);
      JSpinner.DefaultEditor jSpinner_DefaultEditor0 = new JSpinner.DefaultEditor(jSpinner0);
      jSpinner_DefaultEditor0.getVisibleRect();
      jSpinner0.isFocusOwner();
      jSpinner_DefaultEditor0.getHeight();
      PanelUI panelUI0 = jSpinner_DefaultEditor0.getUI();
      panelUI0.getAccessibleChildrenCount(jSpinner0);
      jSpinner_DefaultEditor0.setUI(panelUI0);
      jSpinner_DefaultEditor0.setToolTipText("A=ok");
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      JSpinner jSpinner0 = new JSpinner();
      jSpinner0.createImage(90, 90);
      JSpinner.DefaultEditor jSpinner_DefaultEditor0 = new JSpinner.DefaultEditor(jSpinner0);
      jSpinner_DefaultEditor0.getTextField();
      Class<JSpinner.DefaultEditor> class0 = JSpinner.DefaultEditor.class;
      jSpinner_DefaultEditor0.getListeners(class0);
      PanelUI panelUI0 = jSpinner_DefaultEditor0.getUI();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ((BasicPanelUI) panelUI0).getBaselineResizeBehavior(jSpinner0);
      int[] intArray0 = new int[1];
      intArray0[0] = 90;
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 90
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.612726894621007
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[5] = visualPageListItemArray0[1];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[6];
      intArray1[0] = 5;
      int[] intArray2 = new int[3];
      intArray2[0] = 5;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      intArray2[1] = 5;
      intArray2[2] = 5;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray2, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.92967840055467
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      Consumer<VisualPageListItem> consumer0 = (Consumer<VisualPageListItem>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = visualPageListItemArray0[1];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-399);
      intArray0[1] = (-2017);
      intArray0[2] = (-2017);
      intArray0[3] = (-399);
      try { 
        visualListModel0.removeElements(intArray0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -399
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) visualListModel0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.DefaultEditor jSpinner_DefaultEditor0 = new JSpinner.DefaultEditor(jSpinner0);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      // Undeclared exception!
      try { 
        visualListModel0.appendAllElements(vector0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1943399120517686
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[5] = visualPageListItemArray0[1];
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) visualListModel0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) visualPageListItemArray0[5];
      objectArray0[3] = (Object) visualListModel0;
      objectArray0[4] = (Object) visualListModel0;
      objectArray0[5] = (Object) visualPageListItemArray0[5];
      objectArray0[6] = (Object) visualPageListItemArray0[5];
      objectArray0[7] = (Object) visualPageListItemArray0[5];
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(objectArray0);
      jComboBox0.getTopLevelAncestor();
      jComboBox0.getMaximumSize();
      visualListModel0.removeListDataListener(jComboBox0);
      visualListModel0.setData(visualPageListItemArray0);
      int int0 = 6;
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[6];
      intArray1[0] = 6;
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.reverseElements(intArray1);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSpinner jSpinner0 = new JSpinner();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      jSpinner0.createImage(90, 90);
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      jSpinner_NumberEditor0.getTextField();
      PanelUI panelUI0 = jSpinner_NumberEditor0.getUI();
      panelUI0.getMaximumSize(jSpinner_NumberEditor0);
      ((BasicPanelUI) panelUI0).getBaselineResizeBehavior(jSpinner0);
      jSpinner_NumberEditor0.setUI(panelUI0);
      jSpinner_NumberEditor0.setToolTipText("");
      Predicate.isEqual((Object) jSpinner_NumberEditor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":&[=rytTIa");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Kz>': ");
      int[] intArray0 = new int[1];
      intArray0[0] = 90;
      int[] intArray1 = new int[9];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray1[1] = 90;
      visualListModel0.reverseElements(intArray1);
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 90
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.142183513315372
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[11];
      intArray0[0] = (-6);
      intArray0[1] = (-6);
      intArray0[2] = (-6);
      intArray0[3] = 46;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualListModel0.setData(visualPageListItemArray0);
      int int0 = 5;
      int[] intArray1 = new int[0];
      int[] intArray2 = new int[1];
      intArray2[0] = 46;
      try { 
        visualListModel0.moveUpIndexes(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 45
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1437065979373684
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[11];
      intArray0[0] = (-6);
      intArray0[1] = (-6);
      intArray0[2] = (-6);
      intArray0[3] = 46;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray1 = new int[0];
      visualListModel0.moveUpIndexes(intArray1);
      int[] intArray2 = new int[6];
      intArray0[1] = (-399);
      visualListModel0.moveUpIndexes(intArray1);
      intArray2[5] = (-399);
      try { 
        visualListModel0.moveDownIndexes(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -398
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.949779297296489
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[5] = visualPageListItemArray0[1];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[6];
      intArray1[0] = 5;
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.reverseElements(intArray1);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)79;
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)81;
      byte byte1 = (byte) (-56);
      byteArray0[3] = (byte) (-56);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-56), (byte) (-68));
      byteArrayInputStream0.mark((byte) (-56));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      try { 
        dataInputStream0.readUnsignedByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0928838823470586
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[5] = visualPageListItemArray0[1];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[6];
      intArray1[0] = (-12);
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel0.moveDownIndexes(intArray0);
      try { 
        visualListModel0.reverseElements(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -12
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4968404371301967
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[11];
      intArray0[0] = (-6);
      intArray0[10] = (-6);
      intArray0[2] = 0;
      int int0 = 46;
      intArray0[3] = 46;
      visualListModel0.moveUpIndexes(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray1 = new int[1];
      visualListModel0.moveUpIndexes(intArray1);
      int[] intArray2 = new int[14];
      intArray0[1] = (-399);
      visualListModel0.moveUpIndexes(intArray1);
      intArray2[5] = 5;
      visualListModel0.moveDownIndexes(intArray2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      visualListModel0.reverseElements(intArray1);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray2);
      visualListModel0.moveDownIndexes(intArray1);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8973520027539594
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[5] = visualPageListItemArray0[1];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[6];
      intArray1[0] = 6;
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel0.moveDownIndexes(intArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)47;
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      assertEquals(7, visualListModel0.getSize());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<String> stack0 = new Stack<String>();
      JComboBox<String> jComboBox0 = new JComboBox<String>();
      jComboBox0.isFocusOwner();
      jComboBox0.getRegisteredKeyStrokes();
      visualListModel0.addListDataListener(jComboBox0);
      int[] intArray0 = new int[0];
      OperationRegistry operationRegistry0 = OperationRegistry.getThreadSafeOperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      Hashtable<RenderingHints.Key, Integer> hashtable0 = new Hashtable<RenderingHints.Key, Integer>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      CollectionOp collectionOp0 = new CollectionOp(operationRegistry0, "!Ogh", parameterBlock0, renderingHints0);
      // Undeclared exception!
      try { 
        visualListModel0.appendAllElements(collectionOp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No descriptor by name \"!Ogh\" is registered under mode \"collection\".
         //
         verifyException("javax.media.jai.OperationRegistry", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.157280995708096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSpinner jSpinner0 = new JSpinner();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSpinner0.setIgnoreRepaint(false);
      jSpinner0.createImage(90, 90);
      JSpinner.DefaultEditor jSpinner_DefaultEditor0 = new JSpinner.DefaultEditor(jSpinner0);
      PanelUI panelUI0 = jSpinner_DefaultEditor0.getUI();
      jSpinner_DefaultEditor0.setUI(panelUI0);
      jSpinner_DefaultEditor0.setToolTipText("");
      Predicate.isEqual((Object) jSpinner_DefaultEditor0);
      JComponent.isLightweightComponent(jSpinner0);
      int[] intArray0 = new int[1];
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      int[] intArray1 = null;
      visualListModel0.reverseElements(intArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9253539308675658
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) visualListModel0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.and(predicate2);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate4.negate();
      Predicate<Object> predicate8 = predicate3.or(predicate1);
      Predicate<Object> predicate9 = predicate6.negate();
      Predicate<Object> predicate10 = predicate5.and(predicate9);
      Predicate<Object> predicate11 = predicate8.negate();
      predicate10.or(predicate8);
      Predicate<Object> predicate12 = predicate5.negate();
      predicate11.and(predicate10);
      predicate8.or(predicate11);
      Predicate<Object> predicate13 = predicate1.or(predicate0);
      Predicate<Object> predicate14 = predicate3.negate();
      predicate11.or(predicate13);
      Predicate<Object> predicate15 = predicate9.negate();
      Predicate<Object> predicate16 = predicate7.or(predicate4);
      Predicate<Object> predicate17 = predicate9.or(predicate14);
      Predicate<Object> predicate18 = predicate12.or(predicate15);
      predicate2.negate();
      Predicate<Object> predicate19 = predicate17.negate();
      Predicate.isEqual((Object) predicate18);
      predicate19.negate();
      predicate16.negate();
      predicate2.and(predicate13);
      predicate10.and(predicate8);
      int[] intArray0 = new int[1];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSpinner jSpinner0 = new JSpinner();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 90;
      jSpinner0.setIgnoreRepaint(false);
      jSpinner0.createImage(90, 90);
      JSpinner.DefaultEditor jSpinner_DefaultEditor0 = new JSpinner.DefaultEditor(jSpinner0);
      PanelUI panelUI0 = jSpinner_DefaultEditor0.getUI();
      jSpinner_DefaultEditor0.setUI(panelUI0);
      jSpinner_DefaultEditor0.setToolTipText("");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)85;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Predicate.isEqual((Object) jSpinner_DefaultEditor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[p!D(/b");
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9253539308675658
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) visualListModel0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.and(predicate2);
      predicate5.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate3);
      Predicate<Object> predicate7 = predicate3.or(predicate1);
      Predicate<Object> predicate8 = predicate6.or(predicate2);
      Predicate<Object> predicate9 = predicate5.and(predicate8);
      Predicate<Object> predicate10 = predicate7.negate();
      Predicate<Object> predicate11 = predicate5.negate();
      Predicate<Object> predicate12 = predicate10.and(predicate9);
      predicate7.or(predicate10);
      Predicate<Object> predicate13 = predicate1.or(predicate0);
      predicate3.negate();
      Predicate<Object> predicate14 = predicate10.or(predicate13);
      Predicate<Object> predicate15 = predicate14.and(predicate7);
      Predicate<Object> predicate16 = predicate13.negate();
      predicate12.or(predicate2);
      predicate3.or(predicate7);
      predicate7.or(predicate16);
      predicate15.negate();
      predicate11.negate();
      predicate12.negate();
      predicate4.negate();
      Predicate<Object> predicate17 = predicate16.and(predicate9);
      predicate17.and(predicate13);
      int[] intArray0 = new int[1];
      intArray0[0] = (-2017);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2017
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSpinner jSpinner0 = new JSpinner();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      jSpinner0.createImage(90, 90);
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      jSpinner_NumberEditor0.getTextField();
      PanelUI panelUI0 = jSpinner_NumberEditor0.getUI();
      panelUI0.getMaximumSize(jSpinner_NumberEditor0);
      ((BasicPanelUI) panelUI0).getBaselineResizeBehavior(jSpinner0);
      jSpinner_NumberEditor0.setUI(panelUI0);
      jSpinner_NumberEditor0.setToolTipText("");
      Predicate.isEqual((Object) jSpinner_NumberEditor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":&[=rytTIa");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Kz>': ");
      int[] intArray0 = new int[1];
      intArray0[0] = 90;
      visualListModel0.moveDownIndexes(intArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        visualListModel0.reverseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 90
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0709763739725617
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      predicate3.and(predicate1);
      Predicate<Object> predicate5 = predicate4.or(predicate0);
      Predicate<Object> predicate6 = predicate5.or(predicate4);
      Predicate<Object> predicate7 = predicate1.and(predicate2);
      predicate5.negate();
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate3.and(predicate8);
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate8.or(predicate5);
      predicate11.test(predicate6);
      predicate9.or(predicate11);
      Month month0 = Month.MARCH;
      Month month1 = Month.MARCH;
      predicate10.test(month0);
      Predicate<Object> predicate12 = predicate3.negate();
      predicate3.or(predicate10);
      Predicate<Object> predicate13 = predicate12.and(predicate7);
      Predicate<Object> predicate14 = predicate13.negate();
      Object object0 = new Object();
      predicate1.test(object0);
      Predicate<Object> predicate15 = predicate14.or(predicate6);
      predicate14.and(predicate15);
      Predicate.isEqual((Object) null);
      predicate15.negate();
      predicate12.or(predicate15);
      visualListModel0.addElementAt((VisualPageListItem) null, (-18));
      visualListModel0.updateElementAt((-18), (VisualPageListItem) null);
      visualListModel0.moveUpIndex(1);
      int[] intArray0 = new int[1];
      intArray0[0] = (-18);
      try { 
        visualListModel0.removeElements(intArray0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -18
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.366892719051667
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[11];
      intArray0[0] = (-6);
      intArray0[1] = (-6);
      intArray0[2] = (-6);
      intArray0[3] = 46;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray1 = new int[0];
      visualListModel0.moveUpIndexes(intArray1);
      int[] intArray2 = new int[6];
      intArray0[1] = (-399);
      visualListModel0.moveUpIndexes(intArray1);
      intArray2[5] = 5;
      visualListModel0.moveDownIndexes(intArray2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      visualListModel0.reverseElements(intArray1);
      visualListModel0.rotateClockwiseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel0.moveDownIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>();
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      jComboBox0.addItemListener((ItemListener) null);
      Object object0 = new Object();
      visualListModel0.moveDownIndex(0);
      visualListModel0.moveUpIndex((-422));
      short[][] shortArray0 = new short[6][4];
      short[] shortArray1 = new short[8];
      shortArray1[0] = (short)14;
      shortArray1[1] = (short)1;
      shortArray1[2] = (short)1366;
      shortArray1[3] = (short) (-2355);
      shortArray1[4] = (short)414;
      shortArray1[5] = (short) (-760);
      shortArray1[7] = (short)9;
      shortArray0[4] = shortArray1;
      short[] shortArray2 = new short[1];
      shortArray2[0] = (short)9;
      short[] shortArray3 = new short[1];
      shortArray0[2] = shortArray3;
      short[] shortArray4 = new short[5];
      shortArray4[0] = (short) (-2696);
      shortArray4[3] = (short) (-760);
      shortArray4[4] = (short) (-2355);
      shortArray0[3] = shortArray4;
      short[] shortArray5 = new short[8];
      shortArray5[1] = (short) (-760);
      shortArray5[2] = (short) (-2355);
      shortArray5[3] = (short) (-2696);
      shortArray5[5] = (short)9;
      shortArray0[4] = shortArray5;
      short[] shortArray6 = new short[9];
      shortArray6[0] = (short)414;
      shortArray6[1] = (short) (-2355);
      shortArray6[2] = (short)9;
      shortArray6[3] = (short)14;
      shortArray6[4] = (short) (-760);
      shortArray6[5] = (short)14;
      shortArray6[7] = (short)9;
      ShortLookupTable shortLookupTable0 = null;
      try {
        shortLookupTable0 = new ShortLookupTable((-239), shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset must be greater than 0
         //
         verifyException("java.awt.image.LookupTable", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.clear();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Predicate.isEqual((Object) stack0);
      JSpinner jSpinner0 = new JSpinner();
      jSpinner0.hasFocus();
      jSpinner0.createImage(90, 90);
      JSpinner.DefaultEditor jSpinner_DefaultEditor0 = new JSpinner.DefaultEditor(jSpinner0);
      jSpinner_DefaultEditor0.setToolTipText("");
      Predicate.isEqual((Object) jSpinner_DefaultEditor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[p!D(/b");
      int[] intArray0 = new int[1];
      intArray0[0] = 90;
      int[] intArray1 = new int[9];
      intArray1[0] = 90;
      intArray1[1] = 90;
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 90
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) visualListModel0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate0);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate1.or(predicate2);
      Predicate<Object> predicate7 = predicate2.or(predicate1);
      Predicate<Object> predicate8 = predicate6.or(predicate1);
      Predicate<Object> predicate9 = predicate4.and(predicate8);
      predicate9.negate();
      Predicate<Object> predicate10 = predicate4.and(predicate9);
      predicate6.negate();
      predicate8.or(predicate3);
      predicate7.or(predicate9);
      Predicate<Object> predicate11 = predicate1.or(predicate0);
      predicate2.negate();
      Predicate<Object> predicate12 = predicate5.or(predicate11);
      predicate12.and(predicate7);
      predicate11.negate();
      predicate10.or(predicate1);
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("YMWv'H`,nZQ", (VetoableChangeListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("", (VetoableChangeListener) null);
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.add(componentListener1, componentListener1);
      VisualListModel visualListModel1 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      Vector<VisualPageListItem> vector1 = visualListModel0.data;
      visualListModel0.prependAllElements(vector1);
      assertEquals(2, vector1.size());
      assertEquals(2, visualListModel0.getSize());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6745460275183657
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSpinner jSpinner0 = new JSpinner();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSpinner0.createImage(90, 90);
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      jSpinner_NumberEditor0.getTextField();
      PanelUI panelUI0 = jSpinner_NumberEditor0.getUI();
      ((BasicPanelUI) panelUI0).getBaselineResizeBehavior(jSpinner0);
      jSpinner_NumberEditor0.setUI(panelUI0);
      jSpinner_NumberEditor0.setToolTipText("");
      Predicate.isEqual((Object) jSpinner_NumberEditor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":&[=rytTIa");
      int[] intArray0 = new int[1];
      intArray0[0] = 90;
      int[] intArray1 = new int[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray1[1] = 90;
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy(":&[=rytTIa", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("rR9HE`]", vetoableChangeListenerProxy0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      VisualListModel visualListModel1 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.prependAllElements(vector0);
      // Undeclared exception!
      try { 
        visualListModel2.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate3.and(predicate1);
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate6.or(predicate4);
      Predicate<Object> predicate8 = predicate1.and(predicate2);
      Predicate<Object> predicate9 = predicate6.negate();
      Predicate<Object> predicate10 = predicate1.negate();
      Predicate<Object> predicate11 = predicate5.negate();
      Predicate<Object> predicate12 = predicate11.negate();
      Predicate<Object> predicate13 = predicate10.or(predicate6);
      Predicate<Object> predicate14 = predicate13.or(predicate9);
      predicate13.test(predicate7);
      Predicate<Object> predicate15 = predicate11.or(predicate13);
      Month month0 = Month.MARCH;
      Month month1 = Month.MARCH;
      Predicate<Object> predicate16 = predicate2.negate();
      predicate12.test(month0);
      Predicate<Object> predicate17 = predicate3.negate();
      predicate3.or(predicate12);
      Predicate<Object> predicate18 = predicate17.and(predicate8);
      Predicate<Object> predicate19 = predicate18.negate();
      Object object0 = new Object();
      predicate1.test(object0);
      Predicate<Object> predicate20 = predicate15.negate();
      predicate19.and(predicate20);
      Predicate.isEqual((Object) predicate0);
      predicate14.or(predicate15);
      predicate13.test(predicate18);
      predicate7.or(predicate13);
      predicate16.negate();
      predicate6.negate();
      visualListModel0.getSize();
      visualListModel0.clearData();
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.319904429847949
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      Iterator<VisualPageListItem> iterator0 = treeSet0.iterator();
      Object object0 = treeSet0.clone();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "v5<:y 0";
      objectArray0[2] = (Object) treeSet0;
      objectArray0[3] = (Object) iterator0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) visualListModel0;
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.remove((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>(treeSet0);
      visualListModel0.removeElementAt(0, true);
      visualListModel0.addAllElements(4412, (Collection<VisualPageListItem>) linkedList0);
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      assertTrue(stack0.empty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.addElement((VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) visualListModel0);
      stack0.add((VisualPageListItem) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<String> predicate3 = Predicate.isEqual((Object) stack0);
      Predicate<Object> predicate4 = predicate0.and(predicate1);
      Predicate<DefaultTableModel> predicate5 = Predicate.isEqual((Object) predicate3);
      Boolean boolean0 = new Boolean(true);
      Predicate<Object> predicate6 = predicate4.or(predicate1);
      predicate2.or(predicate6);
      visualListModel0.removeElements(0, 0, true);
      predicate4.negate();
      predicate4.and(predicate2);
      Predicate<Object> predicate7 = predicate6.negate();
      Month month0 = Month.OCTOBER;
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate5);
      predicate7.negate();
      predicate7.and(predicate8);
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        MockURL.openStream(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) visualListModel0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      predicate2.test(object0);
      Predicate<Object> predicate5 = predicate2.or(predicate1);
      visualListModel0.removeElements(0, 0, false);
      Predicate.isEqual((Object) predicate5);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate6 = predicate5.and(predicate1);
      predicate6.test(predicate0);
      Object object1 = new Object();
      Predicate.isEqual(object1);
      predicate2.or(predicate6);
      Predicate<Object> predicate7 = predicate3.and(predicate0);
      predicate1.or(predicate6);
      predicate2.and(predicate2);
      predicate7.and(predicate3);
      predicate3.test(predicate2);
      Predicate.isEqual((Object) predicate4);
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke('\'');
      AWTKeyStroke.getAWTKeyStroke(0, 0);
      Predicate.isEqual((Object) aWTKeyStroke0);
      Predicate<Object> predicate8 = predicate1.or(predicate6);
      // Undeclared exception!
      try { 
        predicate8.or((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.3074153952359477
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      boolean boolean0 = false;
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0, false);
      visualListModel0.addAllElements(0, collection0);
      visualListModel0.moveUpIndex(4);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualListModel0.setData(visualPageListItemArray0);
      // Undeclared exception!
      try { 
        visualListModel0.prependAllElements(collection0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) visualListModel0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.and(predicate2);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate4.negate();
      Predicate<Object> predicate8 = predicate3.or(predicate1);
      Predicate<Object> predicate9 = predicate6.negate();
      Predicate<Object> predicate10 = predicate5.and(predicate9);
      Predicate<Object> predicate11 = predicate8.negate();
      predicate10.or(predicate8);
      Predicate<Object> predicate12 = predicate5.negate();
      predicate11.and(predicate10);
      predicate8.or(predicate11);
      Predicate<Object> predicate13 = predicate1.or(predicate0);
      Predicate<Object> predicate14 = predicate3.negate();
      predicate11.or(predicate13);
      Predicate<Object> predicate15 = predicate9.negate();
      Predicate<Object> predicate16 = predicate7.or(predicate4);
      Predicate<Object> predicate17 = predicate9.or(predicate14);
      Predicate<Object> predicate18 = predicate12.or(predicate15);
      predicate2.negate();
      Predicate<Object> predicate19 = predicate17.negate();
      Predicate.isEqual((Object) predicate18);
      predicate19.negate();
      predicate16.negate();
      predicate2.and(predicate13);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.getValidElements();
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      assertEquals(1, visualPageListItemArray0.length);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      jInternalFrame0.createVolatileImage((-471), (-113));
      jInternalFrame0.setMaximum(false);
      JInternalFrame jInternalFrame1 = new JInternalFrame("N ULL", false);
      jInternalFrame0.firePropertyChange("N ULL", (-113), (-113));
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = new JInternalFrame.JDesktopIcon(jInternalFrame1);
      KeyStroke.getKeyStroke("");
      KeyStroke.getKeyStroke("~CaD7Al;[{2lty(");
      jInternalFrame_JDesktopIcon0.unregisterKeyboardAction((KeyStroke) null);
      jInternalFrame_JDesktopIcon0.setSize((-2332), (-471));
      jInternalFrame_JDesktopIcon0.setFocusable(false);
      jInternalFrame_JDesktopIcon0.setDebugGraphicsOptions((-471));
      jInternalFrame_JDesktopIcon0.getWidth();
      jInternalFrame_JDesktopIcon0.doLayout();
      jInternalFrame_JDesktopIcon0.setVisible(false);
      jInternalFrame0.getFocusTraversalPolicy();
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon1 = new JInternalFrame.JDesktopIcon(jInternalFrame0);
      jInternalFrame_JDesktopIcon1.repaint((long) (-113));
      jInternalFrame_JDesktopIcon1.imageUpdate((Image) null, (-2332), (-471), (-2332), (-2332), (-2332));
      jInternalFrame_JDesktopIcon1.getMouseWheelListeners();
      jInternalFrame_JDesktopIcon1.getMinimumSize();
      jInternalFrame_JDesktopIcon1.setFocusTraversalKeysEnabled(true);
      jInternalFrame1.setDesktopIcon(jInternalFrame_JDesktopIcon1);
      JInternalFrame jInternalFrame2 = new JInternalFrame();
      Boolean.valueOf("N ULL");
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[0];
      visualListModel0.setData(visualPageListItemArray0);
      assertEquals(0, visualPageListItemArray0.length);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndexes(intArray0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.moveUpIndexes(intArray0);
      vector0.add((VisualPageListItem) null);
      Stack<Integer> stack0 = new Stack<Integer>();
      DefaultComboBoxModel<Integer> defaultComboBoxModel0 = new DefaultComboBoxModel<Integer>(stack0);
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(defaultComboBoxModel0);
      visualListModel0.removeListDataListener(jComboBox0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) vector0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.undeleteElements(intArray0);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.40799015797335
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[11];
      intArray0[0] = (-6);
      intArray0[1] = (-6);
      intArray0[2] = (-6);
      intArray0[3] = 46;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray1 = new int[0];
      visualListModel0.moveUpIndexes(intArray1);
      int[] intArray2 = new int[6];
      intArray0[1] = 46;
      visualListModel0.moveUpIndexes(intArray1);
      intArray2[5] = 5;
      visualListModel0.moveDownIndexes(intArray2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      // Undeclared exception!
      try { 
        visualListModel0.addAllElements((Collection<VisualPageListItem>) vector0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.4729427262458132
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[5] = visualPageListItemArray0[1];
      visualListModel0.setData(visualPageListItemArray0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true);
      jInternalFrame0.setMaximum(false);
      JInternalFrame jInternalFrame1 = new JInternalFrame("", false);
      jInternalFrame0.firePropertyChange("", 0, 2166);
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = new JInternalFrame.JDesktopIcon(jInternalFrame0);
      jInternalFrame_JDesktopIcon0.setSize((-2332), (-1));
      jInternalFrame_JDesktopIcon0.setFocusable(true);
      jInternalFrame_JDesktopIcon0.getWidth();
      jInternalFrame_JDesktopIcon0.doLayout();
      jInternalFrame_JDesktopIcon0.setVisible(false);
      JInternalFrame jInternalFrame2 = new JInternalFrame();
      jInternalFrame2.getFocusTraversalPolicy();
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon1 = new JInternalFrame.JDesktopIcon(jInternalFrame2);
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon2 = jInternalFrame0.getDesktopIcon();
      jInternalFrame_JDesktopIcon2.getMouseWheelListeners();
      jInternalFrame_JDesktopIcon1.getMinimumSize();
      jInternalFrame_JDesktopIcon2.setFocusTraversalKeysEnabled(false);
      jInternalFrame2.setDesktopIcon(jInternalFrame_JDesktopIcon1);
      JInternalFrame jInternalFrame3 = new JInternalFrame();
      Boolean.valueOf("");
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.clearData();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)60;
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      jInternalFrame0.createVolatileImage((-2147), (-113));
      jInternalFrame0.setMaximum(false);
      JInternalFrame jInternalFrame1 = new JInternalFrame("(msL^'2A#", false);
      jInternalFrame0.firePropertyChange("", (int) (byte)60, 1);
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = new JInternalFrame.JDesktopIcon(jInternalFrame0);
      jInternalFrame_JDesktopIcon0.setSize((-622), (-2332));
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon1 = jInternalFrame1.getDesktopIcon();
      jInternalFrame_JDesktopIcon1.setFocusable(false);
      jInternalFrame_JDesktopIcon0.doLayout();
      jInternalFrame_JDesktopIcon0.setVisible(false);
      jInternalFrame1.getFocusTraversalPolicy();
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon2 = new JInternalFrame.JDesktopIcon(jInternalFrame1);
      jInternalFrame_JDesktopIcon2.getMouseWheelListeners();
      jInternalFrame_JDesktopIcon1.getMinimumSize();
      jInternalFrame_JDesktopIcon0.setFocusTraversalKeysEnabled(true);
      jInternalFrame0.setDesktopIcon(jInternalFrame_JDesktopIcon1);
      JInternalFrame jInternalFrame2 = new JInternalFrame();
      Boolean.valueOf("");
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.setData((VisualPageListItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("yS[4nM,-+ry", (VetoableChangeListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("&X#&c4)84]N,:MP3`:", vetoableChangeListenerProxy0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getSize();
      visualListModel0.clearData();
      visualListModel0.getElementAt(0);
      visualListModel0.getValidElements();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 809;
      visualListModel0.getElementAt(809);
      OperationRegistry operationRegistry0 = new OperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      RenderingHints renderingHints0 = new RenderingHints((RenderingHints.Key) null, "");
      CollectionOp collectionOp0 = new CollectionOp(operationRegistry0, "", parameterBlock0, renderingHints0);
      // Undeclared exception!
      try { 
        visualListModel0.prependAllElements(collectionOp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No descriptor by name \"\" is registered under mode \"collection\".
         //
         verifyException("javax.media.jai.OperationRegistry", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      int[] intArray0 = null;
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.reverseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      jInternalFrame0.createVolatileImage((-449), (-83));
      jInternalFrame0.setMaximum(false);
      JInternalFrame jInternalFrame1 = new JInternalFrame("N ULL", true);
      jInternalFrame0.firePropertyChange("N ULL", (-83), (-83));
      jInternalFrame0.getInternalFrameListeners();
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = new JInternalFrame.JDesktopIcon(jInternalFrame1);
      KeyStroke.getKeyStroke("~CraD7Al;[{2lty(");
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      jInternalFrame_JDesktopIcon0.setSize((-2332), (-449));
      jInternalFrame_JDesktopIcon0.setFocusable(false);
      jInternalFrame_JDesktopIcon0.setDebugGraphicsOptions((-449));
      jInternalFrame_JDesktopIcon0.getWidth();
      jInternalFrame_JDesktopIcon0.doLayout();
      jInternalFrame_JDesktopIcon0.setVisible(false);
      jInternalFrame0.getFocusTraversalPolicy();
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon1 = new JInternalFrame.JDesktopIcon(jInternalFrame0);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jInternalFrame0, (-83), (-449), (-1), (-123), 2420, (-1), false, menuElementArray0, (MenuSelectionManager) null);
      jInternalFrame_JDesktopIcon0.getToolTipText((MouseEvent) menuDragMouseEvent0);
      jInternalFrame_JDesktopIcon1.repaint((long) (-1));
      jInternalFrame_JDesktopIcon1.imageUpdate((Image) null, (-2332), 1144, (-2332), (-2342), (-2332));
      jInternalFrame_JDesktopIcon1.getMouseWheelListeners();
      jInternalFrame_JDesktopIcon1.getMinimumSize();
      int int0 = visualListModel0.getSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeElements((-1), (-1), false);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        visualListModel0.setData((Vector<VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(objectArray0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.remove((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      UnaryOperator<VisualPageListItem> unaryOperator0 = UnaryOperator.identity();
      stack0.replaceAll(unaryOperator0);
      defaultCaret0.getPathIterator((AffineTransform) null);
      KeyStroke[] keyStrokeArray0 = new KeyStroke[5];
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(0, 0);
      keyStrokeArray0[0] = keyStroke0;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultLeafIcon();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("", icon0);
      jCheckBoxMenuItem0.getAccelerator();
      keyStrokeArray0[1] = null;
      KeyStroke.getKeyStroke(0, 0);
      keyStrokeArray0[2] = null;
      KeyStroke.getKeyStroke("");
      keyStrokeArray0[3] = keyStroke0;
      KeyEvent keyEvent0 = new KeyEvent(jComboBox0, 40000, 0L, 40000, 203, 'E');
      KeyStroke.getKeyStrokeForEvent(keyEvent0);
      keyStrokeArray0[4] = null;
      stack0.toArray(keyStrokeArray0);
      MouseListener mouseListener0 = AWTEventMulticaster.add((MouseListener) null, (MouseListener) defaultCaret0);
      AWTEventMulticaster.remove((MouseListener) null, mouseListener0);
      defaultCaret0.contains((double) 0, (double) 0, (double) 0, (double) 0);
      defaultCaret0.add(0, 0);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>(stack0);
      linkedList0.add((VisualPageListItem) null);
      linkedList0.add((VisualPageListItem) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) linkedList0);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1955230216918316
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      Consumer<VisualPageListItem> consumer0 = (Consumer<VisualPageListItem>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = visualPageListItemArray0[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      visualListModel0.setData(visualPageListItemArray0);
      int int0 = (-2017);
      int int1 = (-399);
      int int2 = (-641);
      int[] intArray0 = new int[6];
      int int3 = 1;
      visualListModel0.reverseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.subList(1, (-399));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1) > toIndex(-399)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Integer> defaultComboBoxModel0 = new DefaultComboBoxModel<Integer>();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(defaultComboBoxModel0);
      jComboBox0.getMaximumSize();
      VisualListModel visualListModel1 = new VisualListModel();
      int int0 = 116;
      int int1 = (-1125);
      // Undeclared exception!
      try { 
        visualListModel1.subList(116, (-1125), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(116) > toIndex(-1125)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      DefaultComboBoxModel<Integer> defaultComboBoxModel0 = new DefaultComboBoxModel<Integer>();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(defaultComboBoxModel0);
      jComboBox0.getMaximumSize();
      int int0 = (-123);
      // Undeclared exception!
      try { 
        visualListModel0.subList(32767, (-123), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(32767) > toIndex(-123)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>();
      jComboBox0.getMaximumSize();
      visualListModel0.subList(1, 32767, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Stack<String> stack0 = new Stack<String>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream1);
      DataInputStream dataInputStream2 = new DataInputStream((InputStream) null);
      Vector<String> vector0 = new Vector<String>();
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(dataInputStream2, (-5882));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("YMWv'H`,nZQ", (VetoableChangeListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("=[", (VetoableChangeListener) null);
      VisualListModel visualListModel0 = new VisualListModel();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "=[");
      visualListModel0.moveDownIndex((-7));
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt((-7), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(368);
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>();
      JComboBox<Integer> jComboBox1 = new JComboBox<Integer>();
      Stack<String> stack0 = new Stack<String>();
      JComboBox<String> jComboBox2 = new JComboBox<String>();
      JComboBox<String> jComboBox3 = new JComboBox<String>();
      jComboBox3.firePropertyChange("", (-215L), (-1L));
      assertFalse(jComboBox3.isFocusCycleRoot());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      jInternalFrame0.createVolatileImage((-471), (-133));
      JInternalFrame jInternalFrame1 = new JInternalFrame("N ULL", false, false, true, true);
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = new JInternalFrame.JDesktopIcon(jInternalFrame1);
      jInternalFrame_JDesktopIcon0.setVisible(false);
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon1 = new JInternalFrame.JDesktopIcon(jInternalFrame0);
      jInternalFrame1.setDesktopIcon(jInternalFrame_JDesktopIcon1);
      JInternalFrame jInternalFrame2 = new JInternalFrame();
      jInternalFrame0.getTopLevelAncestor();
      jInternalFrame2.getNormalBounds();
      Stack<String> stack0 = new Stack<String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel0.moveUpIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) visualListModel0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      predicate1.test(object0);
      Predicate<Object> predicate4 = predicate1.or(predicate0);
      visualListModel0.removeElements(0, 0, false);
      Predicate.isEqual((Object) predicate4);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate5 = predicate4.and(predicate0);
      predicate5.test(predicate0);
      Predicate.isEqual(object0);
      predicate1.or(predicate5);
      Predicate<Object> predicate6 = predicate2.and(predicate0);
      predicate0.or(predicate5);
      predicate1.and(predicate1);
      predicate6.and(predicate2);
      predicate2.test(predicate1);
      Predicate.isEqual((Object) predicate3);
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke('\'');
      AWTKeyStroke.getAWTKeyStroke(0, 0);
      Predicate.isEqual((Object) aWTKeyStroke0);
      Predicate<Object> predicate7 = predicate0.or(predicate5);
      // Undeclared exception!
      try { 
        predicate7.or((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      Integer integer0 = new Integer(152);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeElements(152, 2243, true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)68;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)68;
      byteArray0[4] = (byte)68;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)68, (byte)0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.reset();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      byteArrayInputStream1.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream1, (byte)68);
      DataInputStream dataInputStream1 = new DataInputStream(pushbackInputStream0);
      pushbackInputStream0.unread((int) (byte)68);
      dataInputStream1.readByte();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      dataInputStream1.readByte();
      byteArrayInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      dataInputStream0.read();
      DataInputStream dataInputStream2 = new DataInputStream(byteArrayInputStream1);
      byteArrayInputStream0.read(byteArray0);
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream4.read(byteArray0);
      byteArrayInputStream4.skip((-1029L));
      dataInputStream0.markSupported();
      byteArrayInputStream0.markSupported();
      byteArrayInputStream4.reset();
      byteArrayInputStream4.close();
      byteArrayInputStream2.mark(612);
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream0);
      DataInputStream dataInputStream4 = new DataInputStream(byteArrayInputStream1);
      int[] intArray0 = new int[1];
      visualListModel0.rotateClockwiseElements(intArray0);
      assertEquals(1, intArray0.length);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.removeElements(0, (-1084), true);
      defaultCaret0.setFrameFromDiagonal((double) (byte)68, (-1547.0092772), 1530.951479206, (-765.4790662633));
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)68;
      floatArray0[1] = (float) 286;
      floatArray0[2] = (float) 783;
      floatArray0[3] = (float) (-1548);
      floatArray0[4] = (float) 68;
      floatArray0[6] = (float) 68;
      floatArray0[7] = (float) 68;
      floatArray0[8] = (float) 3;
      WarpGrid warpGrid0 = null;
      try {
        warpGrid0 = new WarpGrid((byte)68, 1463, 286, 3, (-637), 90, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WarpPositions.length != 2*xNumCells + 1*yNumCells + 1.
         //
         verifyException("javax.media.jai.WarpGrid", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      jInternalFrame0.createVolatileImage((-471), (-113));
      jInternalFrame0.setMaximum(false);
      JInternalFrame jInternalFrame1 = new JInternalFrame("N ULL", false);
      jInternalFrame0.firePropertyChange("N ULL", (-113), (-113));
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = new JInternalFrame.JDesktopIcon(jInternalFrame1);
      KeyStroke.getKeyStroke("");
      KeyStroke.getKeyStroke("~CaD7Al;[{2lty(");
      jInternalFrame_JDesktopIcon0.unregisterKeyboardAction((KeyStroke) null);
      jInternalFrame_JDesktopIcon0.setSize((-2332), (-471));
      jInternalFrame_JDesktopIcon0.setFocusable(false);
      jInternalFrame_JDesktopIcon0.setDebugGraphicsOptions((-471));
      jInternalFrame_JDesktopIcon0.getWidth();
      jInternalFrame_JDesktopIcon0.doLayout();
      int[] intArray0 = new int[3];
      intArray0[0] = (-2332);
      intArray0[1] = (-471);
      intArray0[2] = (-2332);
      visualListModel0.removeElements(intArray0, false);
      System.setCurrentTimeMillis((-2332));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)68;
      byteArray0[1] = (byte)19;
      byteArray0[4] = (byte)68;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.reset();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      byteArrayInputStream1.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream1, (byte)68);
      DataInputStream dataInputStream1 = new DataInputStream(pushbackInputStream0);
      pushbackInputStream0.unread((int) (byte)0);
      dataInputStream1.readByte();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      dataInputStream1.readByte();
      byteArrayInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      dataInputStream0.read();
      DataInputStream dataInputStream2 = new DataInputStream(byteArrayInputStream1);
      byteArrayInputStream0.read(byteArray0);
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream4.read(byteArray0);
      byteArrayInputStream4.skip((-1029L));
      dataInputStream0.markSupported();
      byteArrayInputStream0.markSupported();
      byteArrayInputStream4.reset();
      byteArrayInputStream4.close();
      byteArrayInputStream2.mark(612);
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream0);
      DataInputStream dataInputStream4 = new DataInputStream(byteArrayInputStream1);
      int[] intArray0 = new int[0];
      visualListModel0.rotateClockwiseElements(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = null;
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Stack<String> stack0 = new Stack<String>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream2);
      DataInputStream dataInputStream2 = new DataInputStream(dataInputStream0);
      try { 
        pipedOutputStream0.connect(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      VisualListModel visualListModel0 = new VisualListModel();
      System.setCurrentTimeMillis(858L);
      visualListModel0.removeElements(1, 1, true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.removeElements(intArray0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = null;
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("YH&WvH`,nZQ", (VetoableChangeListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("=[", (VetoableChangeListener) null);
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<String> vector0 = new Vector<String>();
      visualListModel0.addAllElements((-1170), (Collection<VisualPageListItem>) null);
      Vector<String> vector1 = new Vector<String>();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)31;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-334), 3668);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((-1512));
      byteArrayInputStream1.close();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream1);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.close();
      byteArrayInputStream2.close();
      byteArrayInputStream2.read(byteArray0);
      byteArrayInputStream1.reset();
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream1);
      byteArrayInputStream2.reset();
      DataInputStream dataInputStream2 = new DataInputStream(byteArrayInputStream1);
      dataInputStream2.read();
      byteArrayInputStream1.reset();
      byteArrayInputStream0.close();
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream2);
      DataInputStream dataInputStream4 = new DataInputStream(dataInputStream1);
      List<VisualPageListItem> list0 = visualListModel0.getValidElements();
      assertNull(list0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      jInternalFrame0.createVolatileImage((-113), (-113));
      jInternalFrame0.contains((-113), (-883));
      JInternalFrame jInternalFrame1 = new JInternalFrame("N ULL");
      jInternalFrame1.setMaximum(false);
      JInternalFrame jInternalFrame2 = new JInternalFrame("N ULL", false);
      jInternalFrame1.firePropertyChange("N ULL", (-2142), (-2142));
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = new JInternalFrame.JDesktopIcon(jInternalFrame0);
      jInternalFrame_JDesktopIcon0.setFocusable(true);
      jInternalFrame_JDesktopIcon0.setVisible(true);
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon1 = new JInternalFrame.JDesktopIcon(jInternalFrame2);
      jInternalFrame_JDesktopIcon1.setFocusTraversalKeysEnabled(true);
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon2 = new JInternalFrame.JDesktopIcon(jInternalFrame0);
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getDockingColor();
      jInternalFrame_JDesktopIcon2.setForeground((Color) null);
      jInternalFrame2.setDesktopIcon(jInternalFrame_JDesktopIcon2);
      JInternalFrame jInternalFrame3 = new JInternalFrame();
      Boolean.valueOf("N ULL");
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      visualListModel0.setData(visualPageListItemArray0);
      assertEquals(4, visualListModel0.getSize());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("yS[4nM,-+ry", (VetoableChangeListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("rR9HE`]", (VetoableChangeListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.prependAllElements(vector0);
      assertEquals(10, vector0.capacity());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("yS[4nM,-+ry", (VetoableChangeListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("rR9HE`]", (VetoableChangeListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-2457));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSpinner jSpinner0 = new JSpinner();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      jSpinner0.createImage(90, 90);
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      jSpinner_NumberEditor0.getTextField();
      PanelUI panelUI0 = jSpinner_NumberEditor0.getUI();
      panelUI0.getMaximumSize(jSpinner_NumberEditor0);
      ((BasicPanelUI) panelUI0).getBaselineResizeBehavior(jSpinner0);
      jSpinner_NumberEditor0.setUI(panelUI0);
      jSpinner_NumberEditor0.setToolTipText("");
      Predicate.isEqual((Object) jSpinner_NumberEditor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":&[=rytTIa");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Kz>': ");
      int[] intArray0 = new int[1];
      intArray0[0] = 90;
      int[] intArray1 = new int[9];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray1[1] = 90;
      VisualListModel visualListModel0 = new VisualListModel();
      Object object0 = visualListModel0.getElementAt(9);
      assertNull(object0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.505443429095587
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1657);
      visualListModel0.subList((-1657), 46);
      intArray0[1] = (-565);
      intArray0[2] = (-717);
      intArray0[3] = (-1400);
      intArray0[4] = 1013;
      intArray0[5] = (-348);
      intArray0[6] = 90;
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.subList((-339), 1817, false);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      assertEquals(7, intArray0.length);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.373950665988046
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("", true, true, true, true);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      jInternalFrame0.addComponentListener((ComponentListener) null);
      jInternalFrame0.getNormalBounds();
      VisualListModel visualListModel0 = new VisualListModel();
      Object object0 = new Object();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      visualListModel0.elementsChanged();
      visualListModel0.reverseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.undeleteElements(intArray0);
      assertEquals(4, intArray0.length);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      System.setCurrentTimeMillis(1073741824L);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(34, 34, true);
      assertNull(collection0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Stack<String> stack0 = new Stack<String>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream1);
      DataInputStream dataInputStream2 = new DataInputStream(dataInputStream0);
      dataInputStream2.skip(0);
      try { 
        pipedOutputStream0.connect(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)68;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)68;
      byteArray0[4] = (byte)68;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)68, (byte)0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.reset();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream1, (byte)68);
      byteArrayInputStream0.read();
      DataInputStream dataInputStream1 = new DataInputStream(pushbackInputStream0);
      dataInputStream1.readByte();
      byteArrayInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      dataInputStream0.read();
      DataInputStream dataInputStream2 = new DataInputStream(byteArrayInputStream1);
      byteArrayInputStream0.read(byteArray0);
      byteArrayInputStream2.read(byteArray0);
      byteArrayInputStream1.reset();
      byteArrayInputStream2.close();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.addAllElements((int) (byte)68, (Collection<VisualPageListItem>) stack0);
      byteArrayInputStream2.mark(611);
      dataInputStream1.readUnsignedByte();
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream0);
      DataInputStream dataInputStream4 = new DataInputStream(byteArrayInputStream2);
      Vector<String> vector0 = new Vector<String>();
      DataInputStream dataInputStream5 = new DataInputStream((InputStream) null);
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream4.close();
      DataInputStream dataInputStream6 = new DataInputStream(byteArrayInputStream4);
      visualListModel0.getValidElements();
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      assertEquals(0, visualPageListItemArray0.length);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.addAllElements((-1864), (Collection<VisualPageListItem>) stack0);
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)68;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)68;
      byteArray0[4] = (byte)68;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)68, (byte)0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.reset();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream1, (byte)68);
      byteArrayInputStream0.read();
      DataInputStream dataInputStream1 = new DataInputStream(pushbackInputStream0);
      dataInputStream1.readByte();
      byteArrayInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      dataInputStream0.read();
      DataInputStream dataInputStream2 = new DataInputStream(byteArrayInputStream1);
      byteArrayInputStream0.read(byteArray0);
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream4.read(byteArray0);
      byteArrayInputStream4.reset();
      byteArrayInputStream4.close();
      byteArrayInputStream2.mark(611);
      dataInputStream1.readUnsignedByte();
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream0);
      DataInputStream dataInputStream4 = new DataInputStream(byteArrayInputStream2);
      Vector<String> vector0 = new Vector<String>();
      DataInputStream dataInputStream5 = new DataInputStream((InputStream) null);
      ByteArrayInputStream byteArrayInputStream5 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream5.close();
      DataInputStream dataInputStream6 = new DataInputStream(byteArrayInputStream5);
      assertFalse(dataInputStream6.equals((Object)dataInputStream0));
  }
}
