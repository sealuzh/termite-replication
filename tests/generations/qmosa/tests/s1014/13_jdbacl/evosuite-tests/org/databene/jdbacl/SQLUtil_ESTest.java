/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 06:27:06 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.math.BigInteger;
import java.sql.Timestamp;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import java.util.Vector;
import javax.management.remote.JMXPrincipal;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.collection.OrderedNameMap;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.IscTrHandle;
import org.firebirdsql.gds.XSQLDA;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.jni.LocalGDSImpl;
import org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.tools.SimpleResultSet;
import org.h2.value.Value;
import org.h2.value.ValueArray;
import org.h2.value.ValueUuid;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.lib.HsqlByteArrayOutputStream;
import org.hsqldb.persist.HsqlProperties;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.550438436883685
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "RELEASE";
      stringArray0[1] = "RELEASE";
      stringArray0[2] = "RELEASE";
      stringArray0[3] = "RELEASE";
      stringArray0[4] = "RELEASE";
      stringArray0[5] = "RELEASE";
      stringArray0[6] = "RELEASE";
      stringArray0[7] = "RELEASE";
      SQLUtil.join("RELEASE", "RELEASE", stringArray0, "RELEASE", "RELEASE", stringArray0);
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("", compositeDBObject0);
      String string0 = "'FEY+";
      tableContainer0.getTable("'FEY+");
      DBDataType dBDataType0 = DBDataType.getInstance(5, "RELEASE");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0, (Integer) null, (Integer) null);
      defaultDBColumn0.setDefaultValue("`}n`t&lW+'WB1''");
      defaultDBColumn0.setDefaultValue("RELEASE");
      SQLUtil.renderColumn(defaultDBColumn0);
      String[] stringArray1 = new String[0];
      SQLUtil.renderColumnNames(stringArray1);
      SQLUtil.renderColumn(defaultDBColumn0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("`}n`t&lW+'WB1''", true, "RELEASE", "\"]w7Hrx-1*y)3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      XSQLVAR xSQLVAR2 = new XSQLVAR();
      XSQLVAR xSQLVAR3 = new XSQLVAR();
      XSQLVAR xSQLVAR4 = new XSQLVAR();
      xSQLVAR3.sqlname = null;
      xSQLVAR0.copyFrom(xSQLVAR4, true);
      XSQLVAR xSQLVAR5 = new XSQLVAR();
      FileSystemHandling.shouldAllThrowIOExceptions();
      xSQLVAR4.sqlname = "updatehcl^ m^v@c:ejosn";
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[2] = null;
      xSQLVAR1.ownname = null;
      xSQLVAR2.aliasname = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = " = ";
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("", compositeDBObject0);
      tableContainer0.getTable("release sav");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, (DBDataType) null, (Integer) 0);
      // Undeclared exception!
      try { 
        SQLUtil.renderValue(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      StringBuilder stringBuilder3 = stringBuilder1.append("Dlgp1 WIBb5/_NJZ[");
      StringBuilder stringBuilder4 = stringBuilder3.append((double) ',');
      stringBuilder4.append((-5305.9F));
      stringBuilder2.reverse();
      stringBuilder2.append(false);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("|%AX<5eLwCn{b&5(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: |%AX<5eLwCn{b&5(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      StringBuilder stringBuilder2 = stringBuilder0.append("Dlgp1 WIBb5/_NJZ[");
      stringBuilder1.append(',');
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      charArray0[4] = ',';
      charArray0[5] = ',';
      charArray0[6] = ',';
      StringBuilder stringBuilder3 = stringBuilder1.append(charArray0);
      stringBuilder0.append(80L);
      StringBuilder stringBuilder4 = stringBuilder1.append(0.0F);
      StringBuilder stringBuilder5 = stringBuilder2.reverse();
      stringBuilder5.appendCodePoint(48);
      stringBuilder5.append((CharSequence) stringBuilder3);
      stringBuilder4.insert(48, "Dlgp1 WIBb5/_NJZ[");
      stringBuilder4.append(false);
      stringBuilder0.reverse();
      stringBuilder2.append(true);
      SQLUtil.parseColumnTypeAndSize("qxP8VJ8");
      DBSchema dBSchema0 = new DBSchema("drop index&wxrr");
      dBSchema0.getTable("qxP8VJ8");
      DBDataType dBDataType0 = DBDataType.getInstance(48, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("qxP8VJ8", (DBTable) null, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1662196885986296
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer.valueOf((-2901));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("5KBxNB");
      String string0 = "insert";
      DBDataType dBDataType0 = DBDataType.getInstance((-1805591790), "5KBxNB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insert", defaultDBTable0, dBDataType0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.clear();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("zIh6g1-D(", defaultDBTable0, dBDataType0);
      linkedList0.add((DBColumn) defaultDBColumn1);
      dBDataType0.isAlpha();
      linkedList0.offer(defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumn(dBColumnArray0[2]);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((-218133000));
      HsqlByteArrayOutputStream hsqlByteArrayOutputStream0 = rowOutputBinary0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(hsqlByteArrayOutputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockPrintWriter0.println(true);
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "zIh6g1-D(", (Object[]) dBColumnArray0);
      printWriter0.print((float) 0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("zIh6g1-D(", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn2);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "insert 5KBXNB NULL";
      stringArray0[1] = "zIh6g1-D(, insert";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("insert", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "zIh6g1-D(, insert");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("zIh6g1-D(, insert", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      StringBuilder stringBuilder3 = stringBuilder2.insert(0, (-64222374));
      // Undeclared exception!
      try { 
        stringBuilder3.insert(90020, "sO'|+'SvLe&^jo*>");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 90020
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      Boolean.logicalOr(false, false);
      Boolean.logicalAnd(false, false);
      SQLUtil.normalize("*/", true);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      LocalGDSImpl localGDSImpl0 = null;
      try {
        localGDSImpl0 = new LocalGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7100147853413437
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Random.setNextRandom(100000);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "drop materialized viewenf;9*:";
      stringArray0[0] = "drop materialized viewenf;9*:";
      SQLUtil.renderColumnListWithTableName("PRIMARY KEY ", stringArray0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "PRIMARY KEY ";
      SQLUtil.removeComments("PRIMARY KEY .drop materialized viewenf;9*:, PRIMARY KEY .null, PRIMARY KEY .null");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "N|Gu:r,V)Pm8$=SGo2", true, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.renderWhereClause(stringArray1, stringArray0);
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec1 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      SQLUtil.mutatesDataOrStructure("alter session");
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      Timestamp timestamp0 = new Timestamp(5L);
      xSQLVAR1.encodeTimestamp(timestamp0);
      xSQLVAR1.deepCopy();
      boolean boolean0 = true;
      XSQLVAR xSQLVAR2 = new XSQLVAR();
      HsqlProperties hsqlProperties0 = new HsqlProperties();
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3251892804900773
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setSslfactory("0OW-s'|rWag");
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setSsl(true);
      PGConnectionPoolDataSource pGConnectionPoolDataSource2 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource3 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource3.setLoginTimeout(57);
      PGConnectionPoolDataSource pGConnectionPoolDataSource4 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setUnknownLength(2372);
      pGConnectionPoolDataSource1.setPortNumber((-2114));
      pGConnectionPoolDataSource3.setSocketTimeout((-129));
      pGConnectionPoolDataSource4.setPassword("execinsert");
      pGConnectionPoolDataSource3.setSslfactory("execinsert");
      pGConnectionPoolDataSource2.setPortNumber((-1551));
      StringBuilder stringBuilder0 = new StringBuilder();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("DyDbiE^eT&v&@9L~");
      assertNull(boolean0);
      
      Boolean boolean1 = SQLUtil.mutatesStructure("callm\fs78,");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("5KBxNB");
      DBDataType dBDataType0 = DBDataType.getInstance((-1805591790), "5KBxNB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insert", defaultDBTable0, dBDataType0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("zIh6g1-D(", defaultDBTable0, dBDataType0);
      linkedList0.add((DBColumn) defaultDBColumn1);
      dBDataType0.isAlpha();
      linkedList0.offer(defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      DBColumn[] dBColumnArray1 = new DBColumn[8];
      dBColumnArray1[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray1[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray1[2] = (DBColumn) defaultDBColumn1;
      dBColumnArray1[3] = (DBColumn) defaultDBColumn1;
      dBColumnArray1[4] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("insert", defaultDBTable0, dBDataType0);
      dBColumnArray1[5] = (DBColumn) defaultDBColumn2;
      dBColumnArray1[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray1[7] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray1);
      assertEquals("insert, zIh6g1-D(, zIh6g1-D(, zIh6g1-D(, zIh6g1-D(, insert, insert, zIh6g1-D(", string0);
      
      String string1 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("zIh6g1-D(, insert", string1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      StringBuilder stringBuilder2 = new StringBuilder();
      StringBuilder stringBuilder3 = stringBuilder2.reverse();
      stringBuilder3.chars();
      StringBuilder stringBuilder4 = new StringBuilder();
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = '{';
      StringBuilder stringBuilder5 = stringBuilder4.append(charArray0);
      SQLUtil.addOptionalCondition("ny3RR~6\"rwF)!n>)", stringBuilder5);
      assertEquals("s{ or ny3RR~6\"rwF)!n>)", stringBuilder5.toString());
      
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)50;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      SQLUtil.isProcedureCall("\n/* distinct */");
      String string0 = "\\'NR";
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("\n/* distinct */", "'NR", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema("\n/* distinct */");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '
         // /* distinct *_/'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.099208065626936
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLUtil.isDDL("drop materialized viewinsertgenerate_time");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "inner";
      stringArray0[1] = "inner";
      stringArray0[2] = "drop materialized viewinsertgenerate_time";
      stringArray0[3] = "inner";
      stringArray0[4] = "drop materialized viewinsertgenerate_time";
      stringArray0[5] = "drop materialized viewinsertgenerate_time";
      SQLUtil.leftJoin("inner", stringArray0, "n", "inner", stringArray0);
      DBSchema dBSchema0 = new DBSchema("drop materialized viewinsertgenerate_time");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("inner", defaultDBTable0, (-892), "drop materialized viewinsertgenerate_time");
      SQLUtil.renderValue(defaultDBColumn0);
      defaultDBColumn0.setVersionColumn(false);
      defaultDBColumn0.setVersionColumn(true);
      SQLUtil.join("inner", "zt|N-D9", stringArray0, " aO'_Gh9\">/", ")", stringArray0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'insert' has no foreign key with the columns (inner, inner, drop materialized viewinsertgenerate_time, inner, drop materialized viewinsertgenerate_time, drop materialized viewinsertgenerate_time)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.538227272115305
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getDescription();
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      boolean boolean0 = true;
      pGConnectionPoolDataSource1.setTcpKeepAlive(true);
      String string0 = "org.apache.derby.impl.sql.compile.ValueNodeList";
      pGConnectionPoolDataSource1.setSslfactory("org.apache.derby.impl.sql.compile.ValueNodeList");
      pGConnectionPoolDataSource0.setSsl(true);
      String string1 = "select into";
      pGConnectionPoolDataSource1.setDatabaseName("ConnectionPoolDataSource from PostgreSQL 8.4 JDBC4 (build 701)");
      pGConnectionPoolDataSource0.setSslfactory((String) null);
      pGConnectionPoolDataSource0.getLogWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.mutatesDataOrStructure("pA,S.7tB%t,G*");
      SQLUtil.isQuery("select into");
      SQLUtil.addOptionalCondition("org.h2.table.SingleColumnResolver", stringBuilder0);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource1.getLoginTimeout();
      PGConnectionPoolDataSource pGConnectionPoolDataSource2 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource3 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource3.getLoginTimeout();
      pGConnectionPoolDataSource1.setLoginTimeout(0);
      pGConnectionPoolDataSource2.getDescription();
      pGConnectionPoolDataSource1.setSocketTimeout((-1970488749));
      PGConnectionPoolDataSource pGConnectionPoolDataSource4 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource1.setPortNumber((-1970488749));
      PGConnectionPoolDataSource pGConnectionPoolDataSource5 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource3.setCompatible("ConnectionPoolDataSource from PostgreSQL 8.4 JDBC4 (build 701)");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("relelase", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("ConnectionPoolDataSource from PostgreSQL 8.4 JDBC4 (build 701)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"build 701\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.428860207414804
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("se~ect i", 12345);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("h2.check", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource1.getDescription();
      Random.setNextRandom(5330);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ConnectionPoolDataSource from PostgreSQL 8.4 JDBC4 (build 701)";
      stringArray0[1] = "ConnectionPoolDataSource from PostgreSQL 8.4 JDBC4 (build 701)";
      stringArray0[2] = "ConnectionPoolDataSource from PostgreSQL 8.4 JDBC4 (build 701)";
      stringArray0[3] = "ConnectionPoolDataSource from PostgreSQL 8.4 JDBC4 (build 701)";
      stringArray0[4] = "ConnectionPoolDataSource from PostgreSQL 8.4 JDBC4 (build 701)";
      stringArray0[5] = "a)x-(%k2JtS_";
      stringArray0[6] = "ConnectionPoolDataSource from PostgreSQL 8.4 JDBC4 (build 701)";
      stringArray0[7] = "a)x-(%k2JtS_";
      stringArray0[8] = "ConnectionPoolDataSource from PostgreSQL 8.4 JDBC4 (build 701)";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "ConnectionPoolDataSource from PostgreSQL 8.4 JDBC4 (build 701)";
      objectArray0[2] = (Object) "ConnectionPoolDataSource from PostgreSQL 8.4 JDBC4 (build 701)";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = ',';
      Integer.valueOf((-2901));
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "left";
      stringArray0[1] = ">aQ3't;/yt}&TEc";
      stringArray0[2] = "DXa=]";
      stringArray0[3] = "left";
      stringArray0[4] = "left";
      stringArray0[5] = "DXa=]";
      stringArray0[6] = "";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "VALUELIST ";
      stringArray1[1] = "VALUELIST ";
      stringArray1[2] = "left";
      stringArray1[3] = "";
      stringArray1[4] = "VALUELIST ";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("left", stringArray0, "left", "#F,&-nnbvkcAW&Auk", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.2285471551746845
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Random.setNextRandom((-1840700267));
      StringBuilder stringBuilder0 = new StringBuilder("qCPa&K7utuQ3zdw@2");
      StringBuilder stringBuilder1 = stringBuilder0.append(80.0);
      StringBuilder stringBuilder2 = stringBuilder0.append(true);
      StringBuilder stringBuilder3 = new StringBuilder(stringBuilder2);
      StringBuilder stringBuilder4 = stringBuilder1.append((-1840700267));
      stringBuilder3.append((CharSequence) "qCPa&K7utuQ3zdw@2");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*3KFF& GRF<mn3R~?m[", (DBSchema) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "42883";
      stringArray0[1] = "42883";
      stringArray0[2] = "qCPa&K7utuQ3zdw@2";
      stringArray0[3] = "42883";
      stringArray0[4] = "*3KFF& GRF<mn3R~?m[";
      stringArray0[5] = "42883";
      stringArray0[6] = "*3KFF& GRF<mn3R~?m[";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "42883", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("qCPa&K7utuQ3zdw@2", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("42883", true, dBTable0, "42883");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder4);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintStream mockPrintStream0 = new MockPrintStream("42883");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertSame(dBTable0, defaultDBTable0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      char[] charArray0 = new char[2];
      charArray0[0] = '}';
      stringBuilder1.append((Object) stringBuilder0);
      DBDataType dBDataType0 = DBDataType.getInstance((-449), "insertderby.version.drdamaint");
      Integer integer0 = new Integer((-449));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insertderby.version.drdamaint", (DBTable) null, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      charArray0[1] = '.';
      // Undeclared exception!
      try { 
        stringBuilder1.append(charArray0, 1500, 95);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      stringBuilder1.append("Dlgp1 WIBb5/_NJZ[");
      StringBuilder stringBuilder3 = stringBuilder2.append(',');
      StringBuilder stringBuilder4 = stringBuilder3.append((double) ',');
      stringBuilder4.append((-5305.9F));
      stringBuilder4.append(false);
      stringBuilder2.reverse();
      stringBuilder2.append(false);
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Random.setNextRandom((-14));
      DBDataType dBDataType0 = DBDataType.getInstance((-14), "e:-sr;");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.min((-14), (-14));
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      String string0 = "insertdelete";
      TableContainer tableContainer0 = new TableContainer("e:-sr;");
      tableContainer0.equals("e:-sr;");
      tableContainer0.getTable("");
      Integer integer2 = Integer.valueOf(45);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insertdelete", (DBTable) null, dBDataType0, integer0, integer2);
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "drop materialized viewdydbie^et&v&@9l~";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "s~_kj";
      stringArray1[1] = "T_%[m>)tL";
      stringArray1[2] = "gH)RmGaq-4D";
      stringArray1[3] = "drop materialized viewdydbie^et&v&@9l~";
      // Undeclared exception!
      try { 
        SQLUtil.join("Ebm5>#s,@=1=R", "drop materialized viewdydbie^et&v&@9l~", stringArray0, "T_%[m>)tL", "s~_kj", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLUtil.mutatesStructure("create tablez<y");
      String string0 = "!/";
      DBCatalog dBCatalog0 = new DBCatalog();
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("create tablez<y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'create tablez<y'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      char[] charArray0 = new char[3];
      charArray0[1] = ',';
      Integer.valueOf((-2923));
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      tableContainer0.toString();
      Integer integer1 = new Integer(',');
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance((-2923), " NOT");
      Integer integer3 = new Integer(0);
      Integer.min((-3349), 13);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer3, integer2);
      String string0 = defaultDBColumn0.toString();
      assertEquals(" :  NOT(0,3)", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = " :  NOT(0,3)";
      TimeZone timeZone0 = TimeZone.getTimeZone("jtR+<Q=J*znfb'<cc");
      timeZone0.setRawOffset(0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize(" :  NOT(0,3)");
      assertEquals(3, objectArray0.length);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.19953461806653
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      StringBuilder stringBuilder2 = new StringBuilder();
      stringBuilder1.reverse();
      stringBuilder2.reverse();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuilder2.append(stringBuffer0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "%|%=<',=@";
      stringArray0[1] = "%|%=<',=@";
      stringArray0[2] = "yYa~aI[O:)~zh/";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "%|%=<',=@", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("%|%=<',=@", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String[] stringArray1 = new String[6];
      stringArray1[0] = "%|%=<',=@";
      stringArray1[1] = "%|%=<',=@";
      stringArray1[2] = "yYa~aI[O:)~zh/";
      stringArray1[3] = "yYa~aI[O:)~zh/";
      stringArray1[4] = "%|%=<',=@";
      stringArray1[5] = "%|%=<',=@";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("yYa~aI[O:)~zh/", false, dBTable0, stringArray0, dBTable0, stringArray1);
      File file0 = MockFile.createTempFile("%|%=<',=@", "%|%=<',=@");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      stringBuilder0.append(0L);
      stringBuilder0.append(charArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6kyS=!o2k?vl`Y$");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter index", defaultDBTable0, 1442, "b{s:/bE BgaUH");
      DBDataType dBDataType0 = DBDataType.getInstance(1442, "execgetbulktablescanre");
      defaultDBColumn0.setType(dBDataType0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      Integer integer0 = RawTransaction.ABORT;
      defaultDBColumn0.setFractionDigits(integer0);
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0F);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("0e\u0000EXECGETBULKTABLESCANRE0.0EXECGETBULKTABLESCANRE", stringBuilder1.toString());
      assertEquals("0e\u0000EXECGETBULKTABLESCANRE0.0EXECGETBULKTABLESCANRE", stringBuilder0.toString());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Rqh^DW=C_0", defaultDBTable0, (-381222334), "Rqh^DW=C_0");
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      defaultDBColumn0.isUnique();
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      // Undeclared exception!
      try { 
        ContextService.getFactory();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      stringWriter1.flush();
      stringWriter0.getBuffer();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "0g: 1";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("0g: 1", (String[]) null, "r48nO", "r48nO", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setSslfactory("iJhTj`EwD=]HD");
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource1.setSsl(true);
      PGConnectionPoolDataSource pGConnectionPoolDataSource2 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource3 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource1.setLoginTimeout(57);
      PGConnectionPoolDataSource pGConnectionPoolDataSource4 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource1.setUnknownLength(1485);
      pGConnectionPoolDataSource0.setPortNumber((-415074003));
      pGConnectionPoolDataSource0.setSocketTimeout((-133719151));
      PGConnectionPoolDataSource pGConnectionPoolDataSource5 = new PGConnectionPoolDataSource();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4689241556465507
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "z<T";
      stringArray0[1] = "Xj";
      stringArray0[2] = "truncate";
      stringArray0[3] = "";
      stringArray0[4] = "insert";
      SQLUtil.renderColumnNames(stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "Xj", "Xj");
      DBCheckConstraint dBCheckConstraint1 = new DBCheckConstraint("Xj", true, "ql[qs0_l", "insert");
      dBCheckConstraint0.isEquivalent(dBCheckConstraint1);
      SQLUtil.constraintName(dBCheckConstraint0);
      SQLUtil.constraintName(dBCheckConstraint0);
      SQLUtil.innerJoin("insert", stringArray0, (String) null, "z<T", stringArray0);
      System.setCurrentTimeMillis(1L);
      DBCatalog dBCatalog0 = new DBCatalog("truncate");
      dBCatalog0.getSchema("insert");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized viewe~ec isnto", (DBSchema) null);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      stringBuilder1.append(1.0E9);
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[1] = '4';
      charArray0[2] = '2';
      charArray0[3] = 'L';
      charArray0[4] = 'r';
      charArray0[5] = '8';
      charArray0[6] = '<';
      charArray0[8] = '\'';
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OrderedNameMap.createCaseIgnorantMap();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      xSQLVAR0.deepCopy();
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      XSQLVAR xSQLVAR2 = new XSQLVAR();
      XSQLVAR xSQLVAR3 = new XSQLVAR();
      XSQLVAR xSQLVAR4 = xSQLVAR2.deepCopy();
      xSQLVAR4.deepCopy();
      XSQLVAR xSQLVAR5 = new XSQLVAR();
      XSQLVAR xSQLVAR6 = xSQLVAR5.deepCopy();
      xSQLVAR2.copyFrom(xSQLVAR6, true);
      XSQLVAR xSQLVAR7 = new XSQLVAR();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("execute", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = "rename";
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)73;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" and ", 47);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      String string0 = "D*_FZ[n<g*+aj~";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (byte)73, "D*_FZ[n<g*+aj~");
      defaultDBColumn0.getForeignKeyConstraint();
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      boolean boolean0 = SQLUtil.isProcedureCall("execute");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Boolean.logicalOr(false, true);
      Boolean.logicalAnd(true, true);
      SQLUtil.normalize("Id0d'b1iJ8mK", true);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      LocalGDSImpl localGDSImpl0 = null;
      try {
        localGDSImpl0 = new LocalGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.355785150714608
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      ErrorMessages errorMessages0 = new ErrorMessages();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("drop indexderby.ver!ion.drdamaint", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setSsl(true);
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource2 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource2.getLoginTimeout();
      pGConnectionPoolDataSource0.setLoginTimeout((-192));
      PGConnectionPoolDataSource pGConnectionPoolDataSource3 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource3.getDescription();
      PGConnectionPoolDataSource pGConnectionPoolDataSource4 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource3.setUnknownLength(0);
      pGConnectionPoolDataSource4.setPortNumber(6663);
      PGConnectionPoolDataSource pGConnectionPoolDataSource5 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource5.setSocketTimeout(206);
      PGConnectionPoolDataSource pGConnectionPoolDataSource6 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource6.setPassword("{Sw");
      pGConnectionPoolDataSource4.setSslfactory("exec");
      pGConnectionPoolDataSource6.setPortNumber(380);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execupdate");
      assertNull(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.mutatesDataOrStructure("execgetbulktablescanresultset");
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      // Undeclared exception!
      try { 
        simpleResultSet0.getNClob(2896);
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
         //
         // Method org/h2/tools/SimpleResultSet.getNClob(I)Ljava/sql/NClob; is abstract
         //
         verifyException("org.h2.tools.SimpleResultSet", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.3125019625949976
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      OrderedNameMap.createCaseIgnorantMap();
      OrderedNameMap<Object> orderedNameMap0 = new OrderedNameMap<Object>();
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("GENERATE_TIME");
      assertNull(boolean1);
      
      boolean boolean2 = SQLUtil.isDML("truncate");
      assertTrue(boolean2);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OrderedNameMap<DBProcedure> orderedNameMap0 = new OrderedNameMap<DBProcedure>();
      DBCatalog dBCatalog0 = new DBCatalog("kKW~7|dL@F");
      dBCatalog0.setName((String) null);
      dBCatalog0.equals((Object) null);
      dBCatalog0.getComponents();
      dBCatalog0.getSchema((String) null);
      dBCatalog0.getTables();
      dBCatalog0.setName((String) null);
      OrderedNameMap<Object> orderedNameMap1 = new OrderedNameMap<Object>();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
      
      DBPackage dBPackage0 = new DBPackage("hashKeyColumns[", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure("create unique index", dBPackage0);
      String string1 = SQLUtil.ownerDotComponent(dBProcedure0);
      assertEquals("hashKeyColumns[.create unique index", string1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = SQLUtil.normalize("57/)I--#fn+[Ym&kn", false);
      assertEquals("57 /) I -- # fn + [ Ym & kn", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      xSQLVAR0.deepCopy();
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      XSQLVAR xSQLVAR2 = new XSQLVAR();
      XSQLVAR xSQLVAR3 = new XSQLVAR();
      xSQLVAR1.sqlname = "";
      xSQLVAR0.copyFrom(xSQLVAR3, true);
      XSQLVAR xSQLVAR4 = new XSQLVAR();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      String[] stringArray0 = new String[1];
      stringArray0[0] = "G;Gw\"F)K!>iE [RLje";
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcConnectionPool.create((ConnectionPoolDataSource) jdbcDataSource0);
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("callfz.> 5 # / + ms.yl", "G;Gw\"F)K!>iE [RLje", "G;Gw\"F)K!>iE [RLje");
      jdbcConnectionPool0.getLogWriter();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Boolean boolean0 = new Boolean(":iI+/-k`d");
      Boolean.logicalXor(false, false);
      Boolean.logicalAnd(false, true);
      Boolean.getBoolean(":iI+/-k`d");
      Boolean.logicalOr(true, false);
      Boolean.logicalOr(false, false);
      Boolean.logicalAnd(false, true);
      Boolean.logicalAnd(false, false);
      SQLUtil.normalize("Fz.>5#/+mS.Yl", (boolean) boolean0);
      LocalGDSImpl localGDSImpl0 = null;
      try {
        localGDSImpl0 = new LocalGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      boolean boolean1 = false;
      Boolean.logicalOr(false, false);
      int int0 = 1;
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("N!L", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("drop table", (String[]) null, " (", "drop table", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "G;Gw\"F)K!>iE [RLje";
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setSslfactory("G;Gw\"F)K!>iE [RLje");
      pGConnectionPoolDataSource0.setSsl(true);
      pGConnectionPoolDataSource0.setServerName(" @n( ");
      pGConnectionPoolDataSource0.setUnknownLength(2372);
      pGConnectionPoolDataSource0.setPortNumber((-1317));
      pGConnectionPoolDataSource0.setSocketTimeout(8);
      pGConnectionPoolDataSource0.setPassword("G;Gw\"F)K!>iE [RLje");
      pGConnectionPoolDataSource0.setSslfactory("G;Gw\"F)K!>iE [RLje");
      pGConnectionPoolDataSource0.setPortNumber((-2090));
      String string0 = SQLUtil.renderValue(" @n( ");
      assertEquals("' @n( '", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ValueUuid.get(byteArray0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" NOT NULL", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "m!7";
      String[] stringArray1 = new String[8];
      stringArray1[0] = "m!7";
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      timeZone0.setRawOffset((-98859289));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Random.setNextRandom((-1840700267));
      StringBuilder stringBuilder0 = new StringBuilder("qCPa&K7utuQ3zdw@2");
      StringBuilder stringBuilder1 = stringBuilder0.append(473.7781210473289);
      stringBuilder1.append(true);
      StringBuilder stringBuilder2 = new StringBuilder((CharSequence) "qCPa&K7utuQ3zdw@2");
      stringBuilder2.append((-1840700267));
      stringBuilder2.append((CharSequence) stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("42883", (DBSchema) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "42883";
      stringArray0[1] = "alter tablecsreate sequence";
      stringArray0[2] = "qCPa&K7utuQ3zdw@2";
      stringArray0[3] = "*3KFF& GRF<mn3R~?m[";
      stringArray0[4] = "d&#0~FY$%oAu8<$2o!C";
      stringArray0[5] = "*3KFF& GRF<mn3R~?m[";
      stringArray0[6] = "42883";
      stringArray0[7] = "42883";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter tablecsreate sequence", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("qCPa&K7utuQ3zdw@2", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alter tablecsreate sequence", true, dBTable0, "42883");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder2);
      assertEquals("check constraint", dBCheckConstraint0.getObjectType());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(80.0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-12);
      Boolean boolean0 = new Boolean(" rop materialized viewenf;9*:");
      StringBuilder stringBuilder2 = stringBuilder0.append(true);
      StringBuilder stringBuilder3 = new StringBuilder(stringBuilder1);
      Boolean.getBoolean("CONSTRAINT ");
      StringBuilder stringBuilder4 = stringBuilder2.append(100000);
      StringBuilder stringBuilder5 = stringBuilder4.append((CharSequence) stringBuilder3);
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[1] = '_';
      charArray0[2] = 'K';
      charArray0[3] = ' ';
      stringBuilder0.append(charArray0);
      Boolean.logicalOr(true, true);
      stringBuilder5.chars();
      StringBuilder stringBuilder6 = stringBuilder3.append(773);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*3KFF& GRF<mn3R~?m[", (DBSchema) null);
      stringBuilder6.insert((int) (byte)4, (boolean) boolean0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" rop materialized viewenf;9*:", true, defaultDBTable0, "XMLCDATA");
      StringBuilder stringBuilder7 = stringBuilder5.appendCodePoint(100000);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder7);
      assertEquals("80.0true10000080.0true=_K \uD821\uDEA0CONSTRAINT \" rop materialized viewenf;9*:\" ", stringBuilder5.toString());
      assertEquals("80.0true10000080.0true=_K \uD821\uDEA0CONSTRAINT \" rop materialized viewenf;9*:\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.4163355820123322
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("!nr?X3", false, defaultDBTable1, stringArray0, defaultDBTable1, stringArray0);
      defaultDBTable1.isIdentical(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec1);
      String string1 = SQLUtil.renderColumnListWithTableName("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delete");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncatecreate sequence", defaultDBTable0, 503, "truncatecreate sequence");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "select into", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("3XM\u0000C+M,4f)0?", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("delete", dBTable0, (-1), "truncatecreate sequence");
      defaultDBColumn1.getForeignKeyConstraint();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("getHoldability()");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) constraintDescriptorList0, (Collection<String>) constraintDescriptorList0, locale_FilteringMode0);
      VersionNumber versionNumber0 = new VersionNumber(constraintDescriptorList0, constraintDescriptorList0);
      VersionNumber versionNumber1 = new VersionNumber(constraintDescriptorList0, constraintDescriptorList0);
      versionNumber0.compareTo(versionNumber1);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("getHoldability()", ")J", versionNumber1);
      DBCatalog dBCatalog0 = new DBCatalog();
      assertEquals("catalog", dBCatalog0.getObjectType());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      XSQLVAR xSQLVAR2 = new XSQLVAR();
      XSQLVAR xSQLVAR3 = new XSQLVAR();
      XSQLVAR xSQLVAR4 = new XSQLVAR();
      xSQLVAR1.aliasname = "";
      xSQLVAR0.copyFrom(xSQLVAR4, true);
      XSQLVAR xSQLVAR5 = new XSQLVAR();
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      DBDataType dBDataType0 = DBDataType.getInstance((-2419), "JlF_");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("JlF_");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("JlF_", defaultDBTable0, dBDataType0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("zIh6g1-D(", defaultDBTable0, dBDataType0);
      linkedList0.add((DBColumn) defaultDBColumn1);
      dBDataType0.isAlpha();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("zIh6g1-D(", defaultDBTable0, dBDataType0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer.valueOf((-2901));
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.clear();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("select1nle", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "gka]di>*l/j");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("rename");
      assertNotNull(boolean1);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      XSQLVAR xSQLVAR2 = new XSQLVAR();
      XSQLVAR xSQLVAR3 = new XSQLVAR();
      XSQLVAR xSQLVAR4 = new XSQLVAR();
      xSQLVAR3.sqlname = "";
      xSQLVAR0.copyFrom(xSQLVAR4, true);
      XSQLVAR xSQLVAR5 = new XSQLVAR();
      FileSystemHandling.shouldAllThrowIOExceptions();
      xSQLVAR4.sqlname = "updatehcl^ m^v@c:ejosn";
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      xSQLVAR1.ownname = null;
      stringArray0[4] = "select";
      stringArray0[5] = "";
      stringArray0[6] = " = ";
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("updatehcl^ m^v@c:ejosn");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.reverse();
      SQLUtil.normalize("ny3RR~6\"rwF)!n>)", false);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      PrintWriter printWriter0 = pGConnectionPoolDataSource0.getLogWriter();
      assertNull(printWriter0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Rqh^DW=C_0", defaultDBTable0, (-381222334), "Rqh^DW=C_0");
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      defaultDBColumn0.isUnique();
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Rqh^DW=C_0";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM * WHERE Rqh^DW=C_0 = 'Rqh^DW=C_0'", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.357285019952196
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Random.setNextRandom((-1840700267));
      StringBuilder stringBuilder0 = new StringBuilder("qCPa&K7utuQ3zdw@2");
      StringBuilder stringBuilder1 = stringBuilder0.append(80.0);
      StringBuilder stringBuilder2 = stringBuilder0.append(true);
      StringBuilder stringBuilder3 = new StringBuilder(stringBuilder2);
      StringBuilder stringBuilder4 = stringBuilder1.append((-1840700267));
      stringBuilder3.append((CharSequence) "qCPa&K7utuQ3zdw@2");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*3KFF& GRF<mn3R~?m[", (DBSchema) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "42883";
      stringArray0[1] = "42883";
      stringArray0[2] = "qCPa&K7utuQ3zdw@2";
      stringArray0[3] = "42883";
      stringArray0[4] = "*3KFF& GRF<mn3R~?m[";
      stringArray0[5] = "42883";
      stringArray0[6] = "*3KFF& GRF<mn3R~?m[";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "42883", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("qCPa&K7utuQ3zdw@2", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("42883", true, dBTable0, "42883");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder4);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("<Q", "PRIMARY KEY ", "zGrEn,!2~");
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("A%GAwH_ZU+DZx3%~8", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      StringBuilder stringBuilder2 = new StringBuilder();
      StringBuilder stringBuilder3 = stringBuilder2.reverse();
      stringBuilder3.chars();
      StringBuilder stringBuilder4 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setSsl(true);
      pGConnectionPoolDataSource0.setUnknownLength(2372);
      pGConnectionPoolDataSource0.setPortNumber(39);
      pGConnectionPoolDataSource0.setSslfactory((String) null);
      pGConnectionPoolDataSource0.setSocketTimeout((-835));
      pGConnectionPoolDataSource0.setSslfactory("}2@");
      pGConnectionPoolDataSource0.setPassword((String) null);
      pGConnectionPoolDataSource0.setPrepareThreshold((-835));
      pGConnectionPoolDataSource0.setTcpKeepAlive(true);
      pGConnectionPoolDataSource0.getLogWriter();
      pGConnectionPoolDataSource0.setSslfactory("CEATE ROL ");
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource1.setTcpKeepAlive(true);
      pGConnectionPoolDataSource1.getLogWriter();
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      int int0 = (-2901);
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = ',';
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "select";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("select", false, defaultDBTable0, stringArray0, defaultDBTable1, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      OrderedNameMap.createCaseIgnorantMap();
      MockFile mockFile0 = new MockFile("select into", "call");
      MockFile mockFile1 = new MockFile(mockFile0, "yEKt.3he");
      mockFile1.renameTo(mockFile0);
      mockFile1.getAbsoluteFile();
      MockPrintStream mockPrintStream0 = new MockPrintStream("alter session");
      mockPrintStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ValueUuid valueUuid0 = ValueUuid.get(byteArray0);
      String[] stringArray0 = new String[0];
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "select intodydbie^et&v&@9l~";
      objectArray0[1] = (Object) "2B";
      objectArray0[2] = (Object) "alter index";
      objectArray0[3] = (Object) "w9k^a<s*{|6A";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "select intodydbie^et&v&@9l~";
      objectArray0[6] = (Object) "select intodydbie^et&v&@9l~";
      objectArray0[7] = (Object) "w9k^a<s*{|6A";
      objectArray0[8] = (Object) valueUuid0;
      String string0 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("'", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("'`doP]|_(wbS+%Q&U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: '`doP]|_(wbS+%Q&U
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Random.setNextRandom((-14));
      Random.setNextRandom((-2899));
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setDouble(String,double)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Boolean boolean0 = new Boolean((String) null);
      Boolean.logicalXor(false, true);
      Boolean.logicalAnd(false, false);
      Boolean.getBoolean("9E");
      Boolean.logicalOr(false, false);
      Boolean.logicalOr(true, true);
      Boolean.logicalAnd(true, true);
      Boolean.logicalAnd(false, true);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      String[] stringArray0 = new String[1];
      stringArray0[0] = "G;Gw\"F)K!>iE [RLje";
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setSslfactory("G;Gw\"F)K!>iE [RLje");
      pGConnectionPoolDataSource0.setSsl(true);
      pGConnectionPoolDataSource0.setServerName(" and ");
      pGConnectionPoolDataSource0.setUnknownLength(2372);
      pGConnectionPoolDataSource0.setPortNumber((-1317));
      pGConnectionPoolDataSource0.setSocketTimeout(8);
      pGConnectionPoolDataSource0.setPassword("G;Gw\"F)K!>iE [RLje");
      pGConnectionPoolDataSource0.setSslfactory("G;Gw\"F)K!>iE [RLje");
      pGConnectionPoolDataSource0.getLogWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray1 = new String[9];
      stringArray1[0] = " and ";
      stringArray1[1] = " and ";
      stringArray1[2] = "G;Gw\"F)K!>iE [RLje";
      stringArray1[3] = "alter materialized viewdjrby.version.drdamaiat";
      stringArray1[4] = "insertdjrby.version.drdamaiat";
      stringArray1[5] = "G;Gw\"F)K!>iE [RLje";
      stringArray1[6] = "alter materialized viewdjrby.version.drdamaiat";
      stringArray1[7] = "GENERATE_TIME";
      stringArray1[8] = "G;Gw\"F)K!>iE [RLje";
      String string0 = SQLUtil.innerJoin("G;Gw\"F)K!>iE [RLje", stringArray0, "#_0@QpNs%-R9RSFW", "alter materialized viewdjrby.version.drdamaiat", stringArray1);
      assertEquals("#_0@QpNs%-R9RSFW as alter materialized viewdjrby.version.drdamaiat on G;Gw\"F)K!>iE [RLje.G;Gw\"F)K!>iE [RLje = alter materialized viewdjrby.version.drdamaiat. and ", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "std";
      stringArray0[1] = "std";
      stringArray0[2] = "std";
      stringArray0[3] = "/ZD~s8P";
      SQLUtil.join("enF;9*:", "std", stringArray0, "std", "release save", stringArray0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, (String) null, "selecti");
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = ':';
      charArray0[1] = '\u0084';
      charArray0[3] = '\u0000';
      charArray0[4] = 'H';
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("The array index is out of range: {0}, number of elements: {1}.", stringBuilder0);
      stringBuilder1.deleteCharAt(11);
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1, nameSpec0);
      SQLUtil.addOptionalCondition("selecti", stringBuilder2);
      System.setCurrentTimeMillis(80L);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , , , , )", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      char[] charArray0 = new char[3];
      charArray0[1] = ',';
      Integer.valueOf((-2901));
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      tableContainer0.toString();
      Integer integer1 = new Integer((-2901));
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(410, "(");
      tableContainer0.getTables();
      Integer integer3 = RawTransaction.COMMIT;
      Integer integer4 = RawTransaction.ABORT;
      Integer integer5 = RawTransaction.LOCK_ESCALATE;
      Integer integer6 = new Integer(0);
      Integer integer7 = RawTransaction.LOCK_ESCALATE;
      Integer.min(410, 97);
      Integer integer8 = RawTransaction.COMMIT;
      Integer.getInteger("org.apache.derby.impl.sql.execute.rts.RealIndexRowToBaseRowStatistics", (Integer) null);
      Integer integer9 = RawTransaction.LOCK_ESCALATE;
      Integer integer10 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer9, integer10);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ValueUuid.get(byteArray0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" NOT NULL", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">";
      TimeZone timeZone0 = TimeZone.getTimeZone(">");
      timeZone0.setRawOffset(11);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("[o", defaultDBTable0, (-1), "43Y03.U");
      defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Random.setNextRandom(100000);
      StringBuilder stringBuilder0 = new StringBuilder("jj SeO");
      StringBuilder stringBuilder1 = stringBuilder0.append((double) 100000);
      StringBuilder stringBuilder2 = stringBuilder0.append(true);
      StringBuilder stringBuilder3 = new StringBuilder(stringBuilder1);
      StringBuilder stringBuilder4 = stringBuilder2.append(100000);
      stringBuilder4.append((CharSequence) stringBuilder3);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*3KFF& GRF<mn3R~?m[", (DBSchema) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "*3KFF& GRF<mn3R~?m[";
      stringArray0[1] = "alter tablee~ec isnto";
      stringArray0[2] = "*3KFF& GRF<mn3R~?m[";
      stringArray0[3] = "drop materialized viewenf;9*:";
      stringArray0[4] = "42883";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "qCPa&K7utuQ3zdw@2", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("drop materialized viewenf;9*:", false, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("DATE", true, defaultDBTable0, "XMLCDATA");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder3);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder5 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertFalse(stringBuilder5.equals((Object)stringBuilder1));
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      Integer.getInteger((String) null, (-4));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      Integer.valueOf((-4));
      DBDataType dBDataType0 = DBDataType.getInstance((-4), "\u0001");
      DBDataType.getInstance(0, "\u0001");
      dBDataType0.isNumber();
      Integer integer0 = new Integer((-4));
      Integer integer1 = new Integer((-4));
      Integer.compareUnsigned((-4), 0);
      Integer.sum((-4), (-4));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("HcL^ M^V@C:ejosN", defaultDBTable0, dBDataType0, (Integer) (-4), integer1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      String string0 = defaultDBColumn0.toString();
      assertEquals("HcL^ M^V@C:ejosN : \u0001(-4,-4)", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\u0001";
      stringArray0[1] = "\u0001";
      stringArray0[2] = "executee~ec isn*to";
      streamTokenizer0.nval = 80.0;
      stringArray0[3] = null;
      stringArray0[4] = null;
      String[] stringArray1 = new String[4];
      stringArray1[0] = null;
      streamTokenizer0.sval = streamTokenizer0.sval;
      stringArray1[2] = "T'ak[y";
      stringArray1[3] = "T'ak[y";
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("80", string1);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "alter materialized view";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alter materialized view", true, defaultDBTable0, "into");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "alter materialized view");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.append(7L);
      int int0 = (-410347082);
      // Undeclared exception!
      try { 
        stringBuilder2.replace((-410347082), (-129), "into");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -410347082
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "yQBO;)FG";
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";+e-WnNiufG\"/j-$|8");
      String string0 = "A-~i-f=!:g5cGr{";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("A-~i-f=!:g5cGr{", (DBSchema) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "A-~i-f=!:g5cGr{", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[1] = 'o';
      defaultDBTable0.getReferrers();
      charArray0[2] = 'J';
      charArray0[3] = 'T';
      // Undeclared exception!
      try { 
        stringBuilder1.insert(183, charArray0, 183, 183);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 183
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.8885995049191862
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ResultSet not positioned properly, perhaps you need to call next.";
      stringArray0[1] = "|![mG{als*Gg";
      stringArray0[2] = "|![mG{als*Gg";
      stringArray0[3] = "|![mG{als*Gg";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "ResultSet not positioned properly, perhaps you need to call next.", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("|![mG{als*Gg", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("|![mG{als*Gg", true, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT |![mG{als*Gg FOREIGN KEY (ResultSet not positioned properly, perhaps you need to call next., |![mG{als*Gg, |![mG{als*Gg, |![mG{als*Gg) REFERENCES null(ResultSet not positioned properly, perhaps you need to call next., |![mG{als*Gg, |![mG{als*Gg, |![mG{als*Gg)", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.8688245196701632
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("j7?hTr@t8h\"jM\"", false, (String) null, "ZK");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      dBCheckConstraint0.setName("ZK");
      DBCheckConstraint dBCheckConstraint1 = new DBCheckConstraint("execute5y32!dz#a&tmwa|ra[", false, (String) null, "d");
      dBCheckConstraint1.setOwner(compositeDBObject0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      dBCheckConstraint1.equals("Illegal column type format: ");
      Object object0 = new Object();
      dBCheckConstraint0.equals(object0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint1, nameSpec0);
      assertEquals("CONSTRAINT execute5y32!dz#a&tmwa|ra[ CHECK d", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      xSQLVAR0.deepCopy();
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      XSQLVAR xSQLVAR2 = new XSQLVAR();
      XSQLVAR xSQLVAR3 = new XSQLVAR();
      xSQLVAR2.sqlname = null;
      xSQLVAR0.copyFrom(xSQLVAR3, true);
      XSQLVAR xSQLVAR4 = new XSQLVAR();
      FileSystemHandling.shouldAllThrowIOExceptions();
      xSQLVAR3.sqlname = "updatehcl^ m^v@c:ejosn";
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[2] = null;
      xSQLVAR4.sqlname = null;
      String string0 = SQLUtil.join((String) null, "X0Y30.S", stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("null as null on X0Y30.S.null = null.null and X0Y30.S.null = null.null and X0Y30.S.null = null.null and X0Y30.S.null = null.null and X0Y30.S.null = null.null and X0Y30.S.null = null.null and X0Y30.S.null = null.null", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OrderedNameMap.createCaseIgnorantMap();
      OrderedNameMap<Object> orderedNameMap0 = new OrderedNameMap<Object>();
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "3XM\u0000C+M,4f)0?";
      stringArray0[1] = "3XM\u0000C+M,4f)0?";
      stringArray0[3] = "3XM\u0000C+M,4f)0?";
      Character.valueOf('G');
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("6g!1etfZe.Dk5_");
      Character character0 = new Character('G');
      SQLUtil.renderValue(character0);
      Integer integer0 = RawTransaction.COMMIT;
      assertEquals(0, (int)integer0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      VersionNumber versionNumber0 = new VersionNumber(vector0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("EUL{M}U7Uy[Pe|", "J2xcw^M ", versionNumber0);
      defaultDatabase0.getTable("wM86$z? .El~t!Cio", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "J2xcw^M ";
      stringArray0[1] = "";
      stringArray0[2] = "SF6N";
      stringArray0[3] = "create materialized viewcreate sequen_e";
      stringArray0[4] = "J2xcw^M ";
      stringArray0[5] = "J2xcw^M ";
      stringArray0[6] = "J2xcw^M ";
      stringArray0[7] = "EUL{M}U7Uy[Pe|";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.removeExtensionParams();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("XLjMA\"7JpzD-kb", (DBTable) null, (DBDataType) null, integer0, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setSslfactory("0OW-s'|rWag");
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setSsl(true);
      PGConnectionPoolDataSource pGConnectionPoolDataSource2 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource3 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource3.setLoginTimeout(57);
      PGConnectionPoolDataSource pGConnectionPoolDataSource4 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setUnknownLength(2372);
      pGConnectionPoolDataSource1.setPortNumber((-2114));
      pGConnectionPoolDataSource3.setSocketTimeout((-129));
      pGConnectionPoolDataSource4.setPassword("execinsert");
      pGConnectionPoolDataSource3.setSslfactory("execinsert");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("#[ofu searchbytes(0,2) ", "#[ofu searchbytes(0,2) ", (VersionNumber) null);
      defaultDatabase0.getSequences();
      defaultDatabase0.getPackages();
      String string0 = SQLUtil.ownerDotComponent(defaultDatabase0);
      assertEquals("#[ofu searchbytes(0,2) ", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      SQLUtil.normalize("callhcl^ m@c:ejosn : \u0001\u00F3(2,-4)", true);
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      // Undeclared exception!
      try { 
        internalTransactionCoordinator0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.codePoints();
      char[] charArray0 = new char[7];
      stringBuilder0.codePoints();
      charArray0[1] = '\u0000';
      stringBuilder0.codePoints();
      stringBuilder0.append("6");
      stringBuilder0.reverse();
      stringBuilder0.codePoints();
      SQLUtil.addOptionalCondition("pAH'':x{", stringBuilder0);
      assertEquals("6 or pAH'':x{", stringBuilder0.toString());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.codePoints();
      char[] charArray0 = new char[7];
      stringBuilder0.codePoints();
      charArray0[1] = '\u0000';
      stringBuilder0.codePoints();
      stringBuilder0.append('\u0000');
      stringBuilder0.codePoints();
      SQLUtil.addOptionalCondition("pAH'':x{", stringBuilder0);
      assertEquals("\u0000 or pAH'':x{", stringBuilder0.toString());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.codePoints();
      char[] charArray0 = new char[7];
      stringBuilder0.codePoints();
      charArray0[1] = '\u0000';
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("exec");
      stringWriter0.flush();
      stringWriter0.write("execute");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuilder0.append(stringBuffer0);
      SQLUtil.addRequiredCondition("f|3", stringBuilder0);
      assertEquals("execexecute and f|3", stringBuilder0.toString());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.removeComments("sc");
      assertEquals("sc", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = Boolean.TRUE;
      boolean boolean2 = SQLUtil.isDDL("Oi10Aa7\"r");
      assertFalse(boolean2);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.3230994163312477
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "IOException in isc_service_start";
      stringArray0[1] = "IOException in isc_service_start";
      stringArray0[2] = "IOException in isc_service_start";
      stringArray0[3] = "IOException in isc_service_start";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)38;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[4] = "IOException in isc_service_start";
      stringArray0[5] = "IOException in isc_service_start";
      String string0 = SQLUtil.join("IOException in isc_service_start", "IOException in isc_service_start", stringArray0, "IOException in isc_service_start", "IOException in isc_service_start", stringArray0);
      assertEquals("IOException in isc_service_start join IOException in isc_service_start as IOException in isc_service_start on IOException in isc_service_start.IOException in isc_service_start = IOException in isc_service_start.IOException in isc_service_start and IOException in isc_service_start.IOException in isc_service_start = IOException in isc_service_start.IOException in isc_service_start and IOException in isc_service_start.IOException in isc_service_start = IOException in isc_service_start.IOException in isc_service_start and IOException in isc_service_start.IOException in isc_service_start = IOException in isc_service_start.IOException in isc_service_start and IOException in isc_service_start.IOException in isc_service_start = IOException in isc_service_start.IOException in isc_service_start and IOException in isc_service_start.IOException in isc_service_start = IOException in isc_service_start.IOException in isc_service_start", string0);
      
      System.setCurrentTimeMillis((-272L));
      SQLUtil.renderColumnNames(stringArray0);
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(IOException in isc_service_start, IOException in isc_service_start, IOException in isc_service_start, IOException in isc_service_start, IOException in isc_service_start, IOException in isc_service_start)", string1);
      
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("truncate", compositeDBObject0);
      tableContainer0.getSchema();
      tableContainer0.getTable("truncate");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(IOException in isc_service_start, IOException in isc_service_start, IOException in isc_service_start, IOException in isc_service_start, IOException in isc_service_start, IOException in isc_service_start)", (DBTable) null, (byte) (-1), "IOException in isc_service_start");
      String string2 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("(IOException in isc_service_start, IOException in isc_service_start, IOException in isc_service_start, IOException in isc_service_start, IOException in isc_service_start, IOException in isc_service_start) IOEXCEPTION IN ISC_SERVICE_START NULL", string2);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select into5z1`h2y,yrb.5z1`h2y,yrb, 5z1`h2y,yrb.5z1 ` h2y, yrb, 5z1`h2y,yrb. not null", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      String string3 = SQLUtil.substituteMarkers("", "tx[:g|j^E|i';G", (Object) null);
      assertEquals("", string3);
      
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = "tx[:g|j^E|i';G";
      stringArray1[2] = "(IOException in isc_service_start, IOException in isc_service_start, IOException in isc_service_start, IOException in isc_service_start, IOException in isc_service_start, IOException in isc_service_start)";
      stringArray1[3] = "(IOException in isc_service_start, IOException in isc_service_start, IOException in isc_service_start, IOException in isc_service_start, IOException in isc_service_start, IOException in isc_service_start)";
      stringArray1[4] = "select into5z1`h2y,yrb.5z1`h2y,yrb, 5z1`h2y,yrb.5z1 ` h2y, yrb, 5z1`h2y,yrb. not null";
      String string4 = SQLUtil.renderWhereClause(stringArray1, stringArray1);
      assertFalse(string4.equals((Object)string3));
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      ValueUuid.get(byteArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ">";
      stringArray0[1] = ">";
      stringArray0[2] = ">";
      stringArray0[3] = "m!7";
      stringArray0[4] = ">";
      stringArray0[5] = "m!7";
      stringArray0[6] = "m!7";
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ">";
      objectArray0[1] = (Object) ">";
      objectArray0[2] = (Object) ">";
      objectArray0[3] = (Object) (byte)0;
      Object object1 = new Object();
      objectArray0[5] = (Object) "m!7";
      objectArray0[6] = (Object) "m!7";
      objectArray0[7] = (Object) ">";
      objectArray0[8] = (Object) ">";
      String string0 = SQLUtil.substituteMarkers("m!7", ">", objectArray0[0]);
      assertEquals("m!7", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "_x>@Na\"4;";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "insert";
      objectArray0[1] = (Object) "bczqoQ3|b=ix&6b";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLUtil.isQuery("j7?hTr@t8h\"jM\"");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      genericDescriptorList0.add((Object) "j7?hTr@t8h\"jM\"");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("create materialized view-a`^{y!6g6y", "bqfJ", versionNumber0);
      defaultDatabase0.getPackages();
      genericDescriptorList0.listIterator();
      DBCatalog dBCatalog0 = defaultDatabase0.getCatalog("6I]s5J}?|HUFh");
      assertNull(dBCatalog0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "RVl%h";
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setSslfactory("0OW-s'|rWag");
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource1.setSsl(true);
      PGConnectionPoolDataSource pGConnectionPoolDataSource2 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource2.setServerName("IF4 [Z[%FYl[{P0LAh9");
      pGConnectionPoolDataSource2.setUnknownLength(2372);
      pGConnectionPoolDataSource1.setSocketTimeout(1994);
      pGConnectionPoolDataSource0.setPassword("qT");
      pGConnectionPoolDataSource0.setSslfactory("0OW-s'|rWag");
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("Skqf", "Skqf", (VersionNumber) null);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("R<");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Random.setNextRandom((-3591));
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      char[] charArray0 = new char[3];
      charArray0[1] = 'B';
      Integer.valueOf((-2901));
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      tableContainer0.toString();
      Integer integer1 = new Integer('B');
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance((-2901), " NOT");
      tableContainer0.getTables();
      Integer integer3 = RawTransaction.COMMIT;
      Integer integer4 = RawTransaction.ABORT;
      Integer integer5 = RawTransaction.LOCK_ESCALATE;
      Integer integer6 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer7 = RawTransaction.LOCK_ESCALATE;
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Xw+l=Q}g<", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("kKW~7|dL@F");
      dBCatalog0.getComponents();
      dBCatalog0.getSchema(";ZHH3P/rmApZ+\u0007Ug[;");
      dBCatalog0.getTables();
      dBCatalog0.getComponents();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertNotNull(string0);
      assertEquals("catalog kKW~7|dL@F", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "select";
      SQLUtil.isQuery("select");
      PipedReader pipedReader0 = new PipedReader();
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      // Undeclared exception!
      try { 
        internalTransactionCoordinator0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.1950865325403197
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Boolean boolean0 = new Boolean(":iI+/-k`d");
      Boolean.logicalXor(false, false);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLoginTimeout();
      pGConnectionPoolDataSource0.setLoginTimeout(0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource1.getDescription();
      pGConnectionPoolDataSource0.setSocketTimeout(0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource2 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setPortNumber(0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource3 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource2.setCompatible(":iI+/-k`d");
      pGConnectionPoolDataSource0.setPassword(":iI+/-k`d");
      pGConnectionPoolDataSource3.setPortNumber(0);
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean1);
      assertNotNull(boolean1);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-113);
      ValueUuid valueUuid0 = ValueUuid.get(byteArray0);
      Value[] valueArray0 = new Value[6];
      valueArray0[1] = (Value) valueUuid0;
      valueArray0[2] = (Value) valueUuid0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">";
      stringArray0[1] = "execprimary key";
      stringArray0[2] = "m!7";
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-113);
      ValueUuid valueUuid0 = ValueUuid.get(byteArray0);
      Value[] valueArray0 = new Value[6];
      valueArray0[0] = (Value) valueUuid0;
      valueArray0[1] = (Value) valueUuid0;
      valueArray0[2] = (Value) valueUuid0;
      valueArray0[3] = (Value) valueUuid0;
      valueArray0[4] = (Value) valueUuid0;
      valueArray0[5] = (Value) valueUuid0;
      ValueArray.get(valueArray0);
      ValueArray.get(valueArray0);
      ValueArray valueArray1 = ValueArray.get(valueArray0);
      Reader reader0 = valueArray1.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      streamTokenizer0.ordinaryChars(754, 22);
      streamTokenizer0.lowerCaseMode(false);
      ErrorMessages errorMessages0 = new ErrorMessages();
      ErrorMessages errorMessages1 = new ErrorMessages();
      // Undeclared exception!
      try { 
        errorMessages1.getNClob((String) null);
        fail("Expecting exception: AbstractMethodError");
      
      } catch(AbstractMethodError e) {
         //
         // Method org/apache/derby/diag/ErrorMessages.getNClob(Ljava/lang/String;)Ljava/sql/NClob; is abstract
         //
         verifyException("org.apache.derby.diag.ErrorMessages", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.3450363141108999
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "., .";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("., .", stringArray0, "p@9|", "update", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ValueUuid.get(byteArray0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" NOT NULL", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "m!7";
      String[] stringArray1 = new String[8];
      stringArray1[1] = "vdrguIRWO";
      stringArray1[2] = ">";
      stringArray1[6] = "gH)RmGaq-4D";
      stringArray1[7] = "vdrguIRWO";
      String string0 = SQLUtil.join("s~_kj", "s~_kj", stringArray0, "vdrguIRWO", "m!7", stringArray1);
      assertEquals("s~_kj join vdrguIRWO as m!7 on s~_kj.m!7 = m!7.null", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-113);
      ValueUuid valueUuid0 = ValueUuid.get(byteArray0);
      Value[] valueArray0 = new Value[6];
      valueArray0[0] = (Value) valueUuid0;
      valueArray0[1] = (Value) valueUuid0;
      valueArray0[2] = (Value) valueUuid0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">";
      stringArray0[1] = "execprimary key";
      stringArray0[2] = "m!7";
      stringArray0[3] = "m!7";
      SQLUtil.join("NGy%8M+]KwUD", "m!7", stringArray0, "s~_ukj", ">", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.join("x", "NGy%8M+]KwUD join s~_ukj as > on m!7.> = >.> and m!7.execprimary key = >.execprimary key and m!7.m!7 = >.m!7 and m!7.m!7 = >.m!7", (String[]) null, (String) null, "?p*CiCo", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "drop table";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "drop table";
      stringArray1[1] = null;
      String string0 = SQLUtil.leftJoin("drop table", stringArray0, "\u0001|\u0001\uFFFF\u0001R\u0001L\u0001R\u0003\uFFFF\u0001V\u0001Y\u0001E\u0002R\u0001S\u0001O\u0001N\u0001O\u0001R\u0001U\u0001A\u0001O\u0001A\u0002S\u0001O\u0001\uFFFF\u0001O\u0002\uFFFF\u0001>\u0001=\u0001\uFFFF\u0001-\u0001\uFFFF\u0001*\u0007\uFFFF\u0001E\u0001O\u0001N\u0001S\u0001U\u0001O\u0001M\u0001B\u0001A\u0001I\u0001M\u0001L\u0001X\u0001T\u0001M\u0001A\u0001O\u0001F\u0001z\u0001T\u0001Y\u0002z\u0001T\u0001R\u0001I\u0002z\u0001X\u0001V\u0001N\u0001A\u0001W\u0001N\u0001T\u0001S\u0001L\u0001O\u0001T\u0001O\u0001B\u0001Q\u0003S\u0001G\u0001R\u0001z\u0001T\u0002D\u0002I\u0002R\b\uFFFF\u0001A\u0001B\u0001S\u0001P\u0001U\u0001H\u0001C\u0001N\u0001C\u0001R\u0001B\u0001P\u0001L\u0001N\u0001G\u0001E\u0001A\u0001O\u0001T\u0002O\u0001A\u0001z\u0001L\u0001B\u0001R\u0001B\u0001F\u0001E\u0001\uFFFF\u0001W\u0001O\u0001z\u0001A\u0002\uFFFF\u0001V\u0001T\u0001M\u0001T\u0001E\u0002\uFFFF\u0001T\u0001E\u0001I\u0001E\u0001B\u0001z\u0001G\u0002E\u0001A\u0001E\u0001A\u0001P\u0001E\u0001R\u0001P\u0001U\u0001H\u0001T\u0001S\u0001G\u0001z\u0001U\u0001C\u0001\uFFFF\u0001E\u0002z\u0001N\u0001Q\u0001E\u0001z\u0001T\u0001z\u0001T\u0001R\u0001I\u0001M\u0001E\u0001A\u0002K\u0001z\u0001A\u0001O\u0001E\u0001z\u0001G\u0001S\u0001R\u0001B\u0001z\u0001G\u0001M\u0001C\u0001R\u0001\uFFFF\u0001z\u0001E\u0001C\u0001z\u0001E\u0001z\u0001E\u0001R\u0001\uFFFF\u0001N\u0001S\u0001R\u0001N\u0001E\u0001I\u0001A\u0001R\u0001X\u0001R\u0001X\u0001M\u0001T\u0001X\u0001L\u0001z\u0001D\u0001\uFFFF\u0001E\u0001N\u0001R\u0001B\u0001T\u0001U\u0002z\u0001E\u0001A\u0001E\u0003z\u0001I\u0001\uFFFF\u0001E\u0001H\u0001R\u0002\uFFFF\u0001G\u0001U\u0001I\u0001\uFFFF\u0001E\u0001\uFFFF\u0001R\u0001E\u0001T\u0002N\u0001z\u0001D\u0002z\u0001\uFFFF\u0001L\u0001R\u0001z\u0001\uFFFF\u0001E\u0001T\u00012\u0001z\u0001\uFFFF\u0001G\u0001P\u0001H\u0001A\u0001\uFFFF\u0001R\u0001H\u0001\uFFFF\u0001R\u0001\uFFFF\u0002E\u0001I\u0002E\u0001C\u0001R\u0001T\u0001R\u0002A\u0001z\u0001A\u0001T\u0001E\u0001O\u0001T\u0001E\u0001\uFFFF\u0002z\u0001T\u0001E\u0001L\u0001E\u0001L\u0002\uFFFF\u0001G\u0001z\u0001R\u0001N\u0003\uFFFF\u0001N\u0001S\u0001A\u0002z\u0001E\u0001G\u0001z\u0001A\u0001S\u0001z\u0001T\u0001z\u0001\uFFFF\u0001E\u0002\uFFFF\u0001z\u0001A\u0001P\u0001\uFFFF\u0001R\u0001A\u0001z\u0001\uFFFF\u0001I\u0001R\u0001E\u0001L\u0001z\u0001A\u0001_\u0001N\u0001z\u0001Z\u0001D\u0001E\u0001R\u0001S\u0001I\u0001Y\u0001N\u0001L\u0001Y\u0001\uFFFF\u0001N\u0001E\u0001N\u0001R\u0001E\u0001z\u0002\uFFFF\u0001I\u0001N\u0001E\u0001z\u0001T\u0001E\u0001\uFFFF\u0001T\u0001C\u0001G\u0001z\u0001R\u0002\uFFFF\u0001z\u0001N\u0001\uFFFF\u0001I\u0001S\u0001\uFFFF\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001R\u0001A\u0001z\u0001M\u0001\uFFFF\u0001N\u0001E\u0001z\u0001L\u0001\uFFFF\u0001R\u0001P\u0001z\u0001\uFFFF\u0001A\u0002z\u0001E\u0001I\u0001O\u0001z\u0001S\u0001z\u0001P\u0001S\u0001N\u0001T\u0001I\u0001N\u0001\uFFFF\u0001O\u0001C\u0001z\u0001\uFFFF\u0002z\u0001I\u0001E\u0001z\u0001\uFFFF\u00012\u0001\uFFFF\u0001z\u0001N\u0001z\u0002\uFFFF\u0001Y\u0001C\u0001\uFFFF\u0001P\u0001G\u0001S\u0001\uFFFF\u0001E\u00012\u0001O\u0001\uFFFF\u0001T\u0002\uFFFF\u0001A\u0001O\u0001N\u0001\uFFFF\u0001z\u0001\uFFFF\u0001E\u0001z\u0001T\u0001z\u0001N\u0001T\u0001N\u0001E\u0003\uFFFF\u0001T\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001T\u0001\uFFFF\u0001z\u0001E\u0002z\u0001S\u0001L\u0001z\u0001O\u0001I\u0001S\u0001N\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001S\u0001\uFFFF\u0001G\u0001S\u0001z\u0001S\u0001I\u0002\uFFFF\u0001z\u0001\uFFFF\u0001z\u0002\uFFFF\u0002z\u0001\uFFFF\u0001L\u0001O\u0001E\u0002z\u0002\uFFFF\u0003z\u0001\uFFFF\u0001z\u0001O\u0001z\u0004\uFFFF\u0001z\u0001N\u0001z\u0006\uFFFF\u0001N\u0002\uFFFF\u0001z\u0001\uFFFF\u0001z\u0001\uFFFF\u0001z\u0002\uFFFF", "update", stringArray1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "57/)I--#fn+[Ym&kn";
      stringArray0[1] = "57/)I--#fn+[Ym&kn";
      String string0 = SQLUtil.leftJoin("gd7B78`'p7", stringArray0, "deletealter tablestd", "delete", stringArray0);
      assertEquals("left join deletealter tablestd as delete on gd7B78`'p7.57/)I--#fn+[Ym&kn = delete.57/)I--#fn+[Ym&kn and gd7B78`'p7.57/)I--#fn+[Ym&kn = delete.57/)I--#fn+[Ym&kn and gd7B78`'p7.null = delete.null", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLUtil.isProcedureCall("select");
      PipedReader pipedReader0 = new PipedReader();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.getTransaction();
      isc_stmt_handle_impl0.getOutSqlda();
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecute2((IscTrHandle) null, isc_stmt_handle_impl0, 5, (XSQLDA) null, (XSQLDA) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLUtil.mutatesStructure("RELEASE SAVEPOINT ");
      ErrorMessages errorMessages0 = new ErrorMessages();
      ErrorMessages errorMessages1 = new ErrorMessages();
      assertFalse(errorMessages1.equals((Object)errorMessages0));
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ZffQ; :@~";
      stringArray0[1] = "updateRef(int,Ref)";
      stringArray0[2] = "";
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLUtil.normalize("D_FZ[ny<g*+j~", true);
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.getTransaction();
      isc_stmt_handle_impl0.getOutSqlda();
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecute2((IscTrHandle) null, isc_stmt_handle_impl0, 0, (XSQLDA) null, (XSQLDA) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.normalize("u!datefe/irzrryiq0(//!-", false);
      assertEquals("u ! datefe / irzrryiq0 (/ / ! -", string0);
  }
}
