/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 04:07:45 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(og!,;|fv_~i9Zyv+");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) stringReader0);
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("(og!,;|fv_~i9Zyv+");
      stringReader0.reset();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.clone();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("()$\"-NM");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4503379533856173
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NBavLdl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.makeVariable();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm2, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm3 = (JSPredicateForm)jSPredicateForm1.clone();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm3.standarizerPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm4.setElementAt(jSSubstitution1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "NOj");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "NOj";
      objectArray0[2] = (Object) "NOj";
      objectArray0[3] = (Object) "NOj";
      objectArray0[4] = (Object) jSPredicateForm0;
      objectArray0[5] = (Object) jSSubstitution1;
      objectArray0[6] = (Object) "NOj";
      jSPredicateForm0.toArray(objectArray0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSSubstitution1.add((Object) jSTerm0);
      jSSubstitution1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Object[] objectArray1 = new Object[15];
      objectArray1[0] = (Object) jSTerm0;
      objectArray1[1] = (Object) jSSubstitution0;
      objectArray1[2] = (Object) "NOj";
      JSPredicateForm jSPredicateForm2 = jSTerm0.standarizerPredicateForm();
      System.setCurrentTimeMillis(0L);
      StringBuffer stringBuffer0 = jSPredicateForm1.toStr();
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm2));
      assertEquals("(NOj(NOj ))", stringBuffer0.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "NOj");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.add((Object) null);
      Integer integer0 = new Integer((-32833118));
      jSSubstitution0.add((Object) integer0);
      jSSubstitution0.add((Object) jSSubstitution0);
      Object[] objectArray0 = new Object[7];
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) "NOj";
      objectArray0[2] = (Object) integer0;
      jSTerm0.lastElement();
      Integer integer1 = new Integer((-1));
      jSTerm0.add((Object) integer1);
      objectArray0[4] = (Object) "NOj";
      objectArray0[5] = (Object) integer0;
      jSTerm0.toArray();
      Integer integer2 = new Integer((-32833118));
      Object[] objectArray1 = new Object[12];
      objectArray1[1] = (Object) integer1;
      jSSubstitution0.remove((Object) null);
      objectArray0[1] = (Object) integer0;
      jSSubstitution0.add((Object) "NOj");
      jSPredicateForm0.setSize(1221);
      objectArray1[3] = (Object) jSSubstitution0;
      objectArray1[7] = (Object) jSSubstitution0;
      Object[] objectArray2 = new Object[4];
      objectArray0[2] = (Object) integer0;
      objectArray2[1] = (Object) "NOj";
      objectArray0[6] = (Object) jSTerm0;
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(0dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(2914, 2914);
      streamTokenizer0.slashStarComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer1.slashSlashComments(false);
      stringReader0.ready();
      streamTokenizer0.pushBack();
      StringReader stringReader1 = new StringReader("(0dl");
      streamTokenizer1.ordinaryChars(62, 2678);
      streamTokenizer1.ordinaryChars(7, 4536);
      streamTokenizer0.ttype = (-4);
      streamTokenizer0.nval = (double) (-4);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(7);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.colon = (-3);
      JSJshopVars.coma = 1;
      JSJshopVars.astherisk = 1;
      JSJshopVars.leftPar = 1;
      JSJshopVars.rightPar = (-1);
      JSJshopVars.percent = 1;
      JSJshopVars.slash = 37;
      jSPredicateForm0.add((Object) null);
      JSJshopVars.backquote = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.minus = 1;
      JSJshopVars.minus = 37;
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.slash = (-1);
      JSJshopVars.interrogation = 1;
      JSJshopVars.leftBrac = 1;
      JSJshopVars.minus = 1;
      JSJshopVars.coma = 1;
      JSJshopVars.exclamation = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.dot = (-3);
      JSJshopVars.leftPar = 1;
      JSJshopVars.dot = 1;
      JSJshopVars.equalT = (-3);
      JSJshopVars.coma = 1;
      JSJshopVars.leftBrac = 4416;
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.percent = (-1);
      JSJshopVars.percent = 1;
      JSJshopVars.lessT = 1;
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5367224694372197
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N(Badl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm3 = (JSPredicateForm)jSPredicateForm1.clone();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm3.standarizerPredicateForm();
      jSPredicateForm4.removeAllElements();
      jSPredicateForm4.stream();
      JSPredicateForm jSPredicateForm5 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.setSize(560);
      jSPredicateForm2.applySubstitutionPF(jSSubstitution1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) streamTokenizer0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) jSPredicateForm2;
      jSSubstitution1.toArray(objectArray0);
      jSPredicateForm2.print();
      assertEquals(2, jSTerm0.size());
      assertTrue(jSPredicateForm2.equals((Object)jSPredicateForm5));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0114042647073516
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "NOj");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      Integer integer0 = new Integer(1);
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add((Object) integer0);
      jSTerm0.setSize(1);
      jSSubstitution0.add((Object) jSSubstitution0);
      Integer integer1 = new Integer((-824));
      jSSubstitution0.add((Object) integer1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) integer0;
      jSSubstitution1.remove(objectArray0[1]);
      Integer integer2 = new Integer((-824));
      jSPredicateForm0.addElement(integer2);
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) jSSubstitution1;
      objectArray0[4] = (Object) jSSubstitution1;
      jSSubstitution1.addElement(jSSubstitution0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) integer0;
      Object[] objectArray2 = new Object[6];
      objectArray2[1] = (Object) jSSubstitution1;
      objectArray2[2] = (Object) jSTerm0;
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.630959968481805
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NBavLdl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.matches(jSPredicateForm2, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm3 = (JSPredicateForm)jSPredicateForm1.clone();
      jSPredicateForm3.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm4 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.setSize(560);
      JSPredicateForm jSPredicateForm5 = jSPredicateForm4.standarizerPredicateForm();
      jSTerm0.cloneT();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm5.applySubstitutionPF(jSSubstitution1);
      jSPredicateForm1.equals(jSPredicateForm6);
      jSPredicateForm2.clonePF();
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6459534134609535
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NBavLdl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = (JSPredicateForm)jSPredicateForm1.clone();
      jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm0.setSize(560);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.standarizerPredicateForm();
      jSTerm0.cloneT();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm3.applySubstitutionPF(jSSubstitution1);
      jSPredicateForm1.equals(jSPredicateForm4);
      jSTerm0.clonePF();
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(0pl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      StringReader stringReader1 = new StringReader("0zmXD~");
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.sval = null;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer1.ttype = (-2);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer2.nval = (double) 713;
      streamTokenizer2.resetSyntax();
      streamTokenizer2.slashStarComments(true);
      streamTokenizer2.slashStarComments(false);
      streamTokenizer0.whitespaceChars((-2), (-2878));
      jSTerm0.add((Object) null);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer2.pushBack();
      stringReader1.skip(713);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.coma = 1;
      JSJshopVars.apostrophe = 1;
      JSJshopVars.rightBrac = 1;
      JSJshopVars.astherisk = 1;
      JSJshopVars.slash = 1;
      JSJshopVars.minus = 652;
      JSJshopVars.coma = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.verticalL = 1;
      jSPredicateForm0.setSize(1);
      JSJshopVars.percent = 652;
      JSJshopVars.lessT = 652;
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N(0dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("0zmXD~");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      stringReader0.read();
      String string0 = "K-%";
      streamTokenizer0.slashSlashComments(false);
      jSTerm0.add((Object) null);
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader1.skip((-2044L));
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "NOj");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-824));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[9];
      objectArray0[3] = (Object) jSSubstitution0;
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) integer0;
      StringReader stringReader0 = new StringReader("NOj");
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis((-824));
      stringReader0.mark(40);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(0Mdl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      StringReader stringReader1 = new StringReader("0mD");
      streamTokenizer1.sval = null;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer1.resetSyntax();
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer2.ttype = (-4);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      char[] charArray0 = new char[7];
      streamTokenizer1.ttype = (int) 'i';
      streamTokenizer2.ttype = (int) '\u0012';
      streamTokenizer1.ttype = (int) '7';
      streamTokenizer2.ttype = (int) '\u0000';
      charArray0[6] = '\\';
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer3);
      streamTokenizer0.lowerCaseMode(true);
      jSTerm0.lastElement();
      jSTerm1.add((Object) "0.0");
      streamTokenizer1.parseNumbers();
      streamTokenizer1.ordinaryChar(0);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      stringReader1.skip(55);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.wordChars(55, 55);
      System.setCurrentTimeMillis(55);
      streamTokenizer0.sval = null;
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.colon = (-3);
      JSJshopVars.coma = 1;
      JSJshopVars.astherisk = 1;
      JSJshopVars.leftPar = 1;
      JSJshopVars.rightPar = (-1);
      JSJshopVars.percent = 1;
      JSJshopVars.slash = 37;
      JSJshopVars.backquote = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.minus = 1;
      JSJshopVars.minus = 37;
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.slash = (-1);
      JSJshopVars.interrogation = 1;
      JSJshopVars.leftBrac = 1;
      JSJshopVars.minus = 1;
      JSJshopVars.coma = 1;
      JSJshopVars.exclamation = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.dot = 0;
      JSJshopVars.leftPar = 1;
      JSJshopVars.dot = 1;
      JSJshopVars.coma = 1;
      JSJshopVars.leftBrac = 4457;
      Integer integer0 = new Integer(1);
      jSPredicateForm0.addElement(integer0);
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.percent = (-1);
      JSJshopVars.percent = 1;
      JSJshopVars.lessT = 4457;
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(og!,;fv_~i9Zyv+");
      StringReader stringReader1 = new StringReader("(og!,;fv_~i9Zyv+");
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.reset();
      char[] charArray0 = new char[7];
      charArray0[1] = 'X';
      charArray0[2] = 'q';
      stringReader0.read();
      stringReader1.ready();
      charArray0[1] = 'Q';
      charArray0[0] = 'D';
      charArray0[3] = 'D';
      stringReader0.skip(40);
      charArray0[4] = '7';
      CharBuffer charBuffer0 = CharBuffer.allocate('q');
      stringReader1.read(charBuffer0);
      stringReader0.reset();
      stringReader0.reset();
      stringReader1.read();
      StringReader stringReader2 = new StringReader("(og!,;fv_~i9Zyv+");
      stringReader2.reset();
      stringReader2.read(charArray0);
      stringReader1.reset();
      stringReader0.close();
      stringReader2.skip(0L);
      StringReader stringReader3 = new StringReader("vSmqL");
      stringReader2.read();
      stringReader0.markSupported();
      stringReader2.markSupported();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.coma = 1;
      JSJshopVars.astherisk = 1;
      JSJshopVars.leftPar = 1;
      JSJshopVars.rightPar = (-1);
      JSJshopVars.percent = 1;
      JSJshopVars.slash = 37;
      JSJshopVars.backquote = 1;
      JSJshopVars.minus = 0;
      JSJshopVars.minus = 37;
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.slash = (-1);
      JSJshopVars.interrogation = 1;
      JSJshopVars.leftBrac = 1;
      JSJshopVars.minus = 1;
      JSJshopVars.coma = 1;
      JSJshopVars.exclamation = 36;
      JSJshopVars.percent = 1;
      JSJshopVars.dot = 0;
      JSJshopVars.leftPar = 1;
      JSJshopVars.dot = 1;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.setSize(1);
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "NC{";
      StringReader stringReader0 = new StringReader("NC{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("NC{");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) "NC{");
      stringReader1.reset();
      stringReader1.skip((-1));
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "(<Q\"d";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(<Q\"d");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(og!,;|fv_~i9Zyv+");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) stringReader0);
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("(og!,;|fv_~i9Zyv+");
      stringReader0.reset();
      stringReader1.markSupported();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(0Mdl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      StringReader stringReader1 = new StringReader("0zmXD~");
      streamTokenizer1.sval = null;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer1.resetSyntax();
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer2.ttype = (-4);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      char[] charArray0 = new char[7];
      streamTokenizer0.ttype = (int) '<';
      streamTokenizer0.ttype = (int) '2';
      streamTokenizer1.ttype = (int) 'i';
      streamTokenizer0.nval = (double) '\u001C';
      charArray0[4] = '7';
      streamTokenizer2.nval = (double) '\u0000';
      charArray0[6] = 'X';
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.ordinaryChar((-2));
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      stringReader1.skip(105);
      streamTokenizer1.whitespaceChars(50, 50);
      streamTokenizer0.wordChars(105, 105);
      System.setCurrentTimeMillis(105);
      streamTokenizer0.sval = null;
      System.setCurrentTimeMillis(50);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Nmj");
      jSTerm0.add((Object) "Nmj");
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N(0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = "0zmXD~";
      StringReader stringReader1 = new StringReader("0zmXD~");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "N(0");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.add((Object) jSTerm3);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "NOj";
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "NOj");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.add((Object) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.colon = (-3);
      JSJshopVars.coma = 1;
      JSJshopVars.astherisk = 1;
      JSJshopVars.leftPar = 1;
      JSJshopVars.rightPar = 1;
      JSJshopVars.equalT = (-2004620737);
      JSJshopVars.percent = 1;
      JSJshopVars.slash = 1;
      JSJshopVars.backquote = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.minus = 1;
      JSJshopVars.minus = 37;
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.slash = 1;
      JSJshopVars.interrogation = 1;
      JSJshopVars.leftBrac = 1;
      JSJshopVars.minus = 1;
      JSJshopVars.exclamation = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.dot = (-3);
      JSJshopVars.leftPar = 1;
      JSJshopVars.dot = 1;
      JSJshopVars.equalT = (-3);
      JSJshopVars.equalT = 1030;
      JSJshopVars.leftBrac = 4416;
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.lessT = 1;
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.7963116401738131
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oac%s_<D7");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      StringReader stringReader1 = new StringReader("0zmXD~");
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.sval = null;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer2.ttype = (-4);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer3.whitespaceChars(61, (-4));
      streamTokenizer2.ttype = (-4);
      streamTokenizer2.resetSyntax();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer3.slashStarComments(true);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer2.sval = "0zmXD~";
      streamTokenizer3.ttype = (-4);
      streamTokenizer1.ordinaryChar(3216);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertFalse(jSSubstitution0.fail());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oac%s_<D7");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      StringReader stringReader1 = new StringReader("0zmXD~");
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.sval = null;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer2.ttype = (-4);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer3.whitespaceChars(61, (-4));
      streamTokenizer2.ttype = (-4);
      streamTokenizer2.resetSyntax();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer2.slashStarComments(true);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer2.sval = "0zmXD~";
      streamTokenizer3.ttype = (-4);
      streamTokenizer2.resetSyntax();
      streamTokenizer1.ordinaryChar(3216);
      jSTerm1.matches((JSPredicateForm) jSTerm0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(0pl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      StringReader stringReader1 = new StringReader("0zmXD~");
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.sval = null;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer2.ttype = streamTokenizer2.ttype;
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer3);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer3.whitespaceChars(61, 41);
      streamTokenizer2.ttype = (-4);
      streamTokenizer2.resetSyntax();
      streamTokenizer0.wordChars((-4), (-2));
      streamTokenizer2.slashStarComments(true);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer0.whitespaceChars((-4), (-2878));
      streamTokenizer1.resetSyntax();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer2.sval = "0zmXD~";
      streamTokenizer1.ordinaryChar(3233);
      jSTerm1.matches((JSPredicateForm) jSTerm0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.coma = 1;
      JSJshopVars.astherisk = 1;
      JSJshopVars.slash = 1;
      jSPredicateForm0.add((Object) "x%R}59nU\"b");
      JSJshopVars.minus = 652;
      JSJshopVars.coma = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.percent = 652;
      JSJshopVars.coma = 1;
      JSJshopVars.lessT = 652;
      jSPredicateForm0.print();
      System.setCurrentTimeMillis(652);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.colon = (-3);
      JSJshopVars.coma = 1;
      JSJshopVars.astherisk = 1;
      JSJshopVars.leftPar = 1;
      JSJshopVars.rightPar = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.slash = 37;
      JSJshopVars.backquote = 37;
      JSJshopVars.percent = 1;
      JSJshopVars.minus = 1;
      JSJshopVars.minus = 1;
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.slash = 1;
      JSJshopVars.interrogation = 1;
      JSJshopVars.dot = 37;
      JSJshopVars.leftBrac = 1;
      JSJshopVars.colon = 4;
      JSJshopVars.minus = 1;
      JSJshopVars.coma = 1;
      JSJshopVars.exclamation = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.dot = 4;
      JSJshopVars.leftPar = 1;
      JSJshopVars.dot = 1;
      JSJshopVars.equalT = 1;
      JSJshopVars.equalT = 1030;
      JSJshopVars.coma = 1;
      JSJshopVars.leftBrac = 1;
      jSPredicateForm0.print();
      assertTrue(jSPredicateForm0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.slash = (-752);
      JSJshopVars.minus = 652;
      jSPredicateForm0.trimToSize();
      JSJshopVars.percent = (-1807);
      JSPredicateForm jSPredicateForm1 = null;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(0pl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      StringReader stringReader1 = new StringReader("0zmXD~");
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.sval = null;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer2.ttype = streamTokenizer2.ttype;
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer3);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer3.whitespaceChars(61, 41);
      streamTokenizer2.ttype = (-4);
      streamTokenizer2.resetSyntax();
      streamTokenizer0.wordChars((-4), (-1));
      streamTokenizer2.slashStarComments(true);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer0.whitespaceChars((-4), (-2878));
      streamTokenizer1.resetSyntax();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer2.sval = "0zmXD~";
      streamTokenizer1.ordinaryChar(3233);
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis((-4));
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(0Mdl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      StringReader stringReader1 = new StringReader("0zmXD~");
      streamTokenizer1.sval = null;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer1.resetSyntax();
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer2.ttype = (-4);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      char[] charArray0 = new char[7];
      streamTokenizer0.ttype = (int) '<';
      streamTokenizer0.ttype = (int) '2';
      streamTokenizer1.ttype = (int) 'i';
      streamTokenizer0.nval = (double) '\u001C';
      charArray0[4] = '7';
      charArray0[5] = '\u0000';
      charArray0[6] = 'X';
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.ordinaryChar((-1));
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      stringReader1.skip(105);
      streamTokenizer1.whitespaceChars(50, 50);
      streamTokenizer0.wordChars(105, 105);
      System.setCurrentTimeMillis(105);
      streamTokenizer0.sval = null;
      System.setCurrentTimeMillis(50);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.spliterator();
      JSJshopVars.minus = 652;
      JSJshopVars.percent = (-1807);
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      Integer integer0 = new Integer(1);
      jSSubstitution0.add((Object) integer0);
      jSSubstitution0.add((Object) jSSubstitution0);
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) "NOj";
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) "NOj";
      objectArray0[5] = (Object) integer0;
      Integer integer1 = new Integer(1);
      jSSubstitution0.add((Object) integer1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object[] objectArray1 = new Object[9];
      objectArray1[1] = (Object) integer0;
      jSSubstitution1.remove((Object) null);
      objectArray1[2] = (Object) integer0;
      objectArray1[3] = (Object) jSSubstitution1;
      objectArray1[4] = (Object) jSSubstitution1;
      Object[] objectArray2 = new Object[9];
      objectArray0[2] = (Object) integer0;
      objectArray2[1] = (Object) "NOj";
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.colon = 1;
      JSJshopVars.coma = 1;
      JSJshopVars.coma = 1;
      JSJshopVars.astherisk = 1;
      JSJshopVars.leftPar = 1;
      JSJshopVars.rightPar = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.slash = 1;
      JSJshopVars.backquote = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.minus = 1;
      JSJshopVars.exclamation = 1;
      JSJshopVars.minus = 1;
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.slash = 1;
      JSJshopVars.interrogation = 1;
      JSJshopVars.dot = 1;
      JSJshopVars.leftBrac = 1;
      JSJshopVars.colon = 1;
      JSJshopVars.minus = 1;
      JSJshopVars.coma = 1;
      StringReader stringReader0 = new StringReader("e");
      stringReader0.skip(1L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6730116670092565
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(0dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer0.pushBack();
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.nextToken();
      stringReader0.skip((-4));
      streamTokenizer0.whitespaceChars((-1101820271), 40);
      streamTokenizer1.sval = "(0dl";
      streamTokenizer1.parseNumbers();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.sval = "(0dl";
      streamTokenizer0.commentChar((-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ttype = (-4);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(og!,;nv_~i9Zyv+");
      StringReader stringReader1 = new StringReader("(og!,;nv_~i9Zyv+");
      char[] charArray0 = new char[4];
      stringReader1.read(charArray0);
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      stringReader0.reset();
      char[] charArray1 = new char[6];
      charArray1[2] = '\u0084';
      stringReader0.read();
      stringReader1.markSupported();
      stringReader0.reset();
      charArray1[3] = '\u0084';
      stringReader0.close();
      stringReader1.skip('\u0084');
      stringReader1.skip(40);
      stringReader1.read();
      StringReader stringReader2 = new StringReader("(og!,;nv_~i9Zyv+");
      stringReader2.skip(249L);
      stringReader2.reset();
      stringReader2.read(charArray1, 0, 0);
      stringReader2.markSupported();
      stringReader2.read(charArray1);
      stringReader1.reset();
      stringReader2.markSupported();
      stringReader2.reset();
      stringReader2.mark(6);
      stringReader0.markSupported();
      stringReader2.reset();
      stringReader2.skip(0L);
      stringReader2.read();
      stringReader2.markSupported();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.2868359830561607
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(og!,;nv_~i9Zyv+");
      StringReader stringReader1 = new StringReader("(og!,;nv_~i9Zyv+");
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.reset();
      char[] charArray0 = new char[7];
      charArray0[2] = 'q';
      stringReader0.read();
      stringReader1.markSupported();
      stringReader1.ready();
      charArray0[3] = 'D';
      stringReader0.skip(40);
      stringReader0.reset();
      stringReader1.read();
      StringReader stringReader2 = new StringReader("(og!,;nv_~i9Zyv+");
      stringReader2.reset();
      stringReader2.markSupported();
      stringReader2.read(charArray0);
      stringReader1.reset();
      stringReader2.markSupported();
      stringReader2.mark(7);
      StringReader stringReader3 = new StringReader("B=btQV)jj&?F1({p");
      stringReader2.read();
      stringReader0.markSupported();
      stringReader2.markSupported();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.351783994289646
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "NOj");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.clonePF();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.add((Object) null);
      Integer integer0 = new Integer((-32833118));
      jSSubstitution0.add((Object) integer0);
      Object[] objectArray0 = new Object[7];
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) "NOj";
      jSTerm0.lastElement();
      Integer integer1 = new Integer((-1));
      jSTerm0.add((Object) integer1);
      objectArray0[4] = (Object) "NOj";
      objectArray0[5] = (Object) integer0;
      Integer integer2 = new Integer((-32833118));
      Object[] objectArray1 = new Object[12];
      objectArray1[1] = (Object) integer1;
      jSSubstitution0.remove((Object) null);
      objectArray0[1] = (Object) integer0;
      jSSubstitution0.add((Object) "NOj");
      Integer integer3 = new Integer((-32833118));
      jSSubstitution0.add((Object) integer3);
      objectArray1[3] = (Object) jSSubstitution0;
      objectArray1[7] = (Object) jSSubstitution0;
      Object[] objectArray2 = new Object[4];
      objectArray0[2] = (Object) integer0;
      objectArray2[1] = (Object) "NOj";
      objectArray0[6] = (Object) jSTerm0;
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.coma = 1;
      JSJshopVars.astherisk = 1;
      JSJshopVars.leftPar = 1;
      JSJshopVars.rightPar = (-1);
      JSJshopVars.percent = 1;
      int int0 = 37;
      JSJshopVars.slash = 37;
      JSJshopVars.backquote = 1;
      JSJshopVars.minus = 0;
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.slash = (-1);
      JSJshopVars.interrogation = 1;
      JSJshopVars.leftBrac = 1;
      JSJshopVars.minus = 1;
      JSJshopVars.coma = 1;
      JSJshopVars.exclamation = 36;
      JSJshopVars.percent = 1;
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(0, stringBuffer0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSJshopVars.colon = (-3);
      JSJshopVars.coma = 32;
      JSJshopVars.astherisk = 32;
      JSJshopVars.leftPar = 32;
      JSJshopVars.rightPar = 32;
      JSJshopVars.equalT = (-2004620737);
      JSJshopVars.percent = 32;
      JSJshopVars.slash = 32;
      JSJshopVars.backquote = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.minus = 32;
      JSJshopVars.minus = 37;
      JSJshopVars.slash = 32;
      JSJshopVars.interrogation = 32;
      JSJshopVars.leftBrac = 1;
      JSJshopVars.minus = 32;
      JSJshopVars.exclamation = 1;
      JSJshopVars.percent = 32;
      JSJshopVars.dot = (-3);
      JSJshopVars.leftPar = 32;
      JSJshopVars.dot = 32;
      JSJshopVars.equalT = (-3);
      JSJshopVars.equalT = 1030;
      JSJshopVars.leftBrac = 4416;
      JSJshopVars.percent = 32;
      JSJshopVars.percent = 32;
      JSJshopVars.lessT = 32;
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(og!,;v_~i9Zyv+");
      StringReader stringReader1 = new StringReader("(og!,;v_~i9Zyv+");
      stringReader1.markSupported();
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.reset();
      char[] charArray0 = new char[7];
      charArray0[2] = 'q';
      stringReader0.read();
      stringReader1.markSupported();
      stringReader0.reset();
      stringReader1.read();
      stringReader1.ready();
      stringReader0.skip(40);
      stringReader1.skip(40);
      stringReader0.reset();
      stringReader1.read();
      StringReader stringReader2 = new StringReader("(og!,;v_~i9Zyv+");
      stringReader2.skip(249L);
      stringReader2.reset();
      stringReader2.markSupported();
      stringReader1.markSupported();
      stringReader2.markSupported();
      stringReader2.read(charArray0);
      stringReader1.reset();
      stringReader2.markSupported();
      stringReader2.mark(7);
      StringReader stringReader3 = new StringReader("B=btQV)jj&?F1({p");
      stringReader2.reset();
      stringReader2.read();
      stringReader0.markSupported();
      stringReader2.markSupported();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "($\"-Tdl";
      String string1 = null;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.add((Object) "($\"-Tdl");
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      int int0 = (-2584);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) stringBuffer0, (-2584), (-2584));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "($\"-Tdl";
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.add((Object) "($\"-Tdl");
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      int int0 = (-2584);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) stringBuffer0, (-2584), (-2584));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.colon = (-3);
      JSJshopVars.coma = 1;
      JSJshopVars.astherisk = 1;
      JSJshopVars.leftPar = 1;
      JSJshopVars.rightPar = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.slash = 37;
      JSJshopVars.backquote = 37;
      JSJshopVars.percent = 1;
      JSJshopVars.minus = 1;
      JSJshopVars.minus = (-3);
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.slash = 1;
      JSJshopVars.interrogation = 1;
      JSJshopVars.leftBrac = 1;
      JSJshopVars.colon = 1;
      JSJshopVars.minus = 1;
      JSJshopVars.coma = 1;
      JSJshopVars.exclamation = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.dot = 1;
      JSJshopVars.leftPar = 1;
      JSJshopVars.dot = 1;
      JSJshopVars.equalT = (-3);
      JSJshopVars.equalT = 1030;
      JSJshopVars.coma = 1;
      JSJshopVars.leftBrac = 1;
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.lessT = 1;
      jSPredicateForm0.toStr();
      System.setCurrentTimeMillis(1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.colon = 1;
      JSJshopVars.coma = 1;
      JSJshopVars.coma = 1;
      JSJshopVars.astherisk = 1;
      JSJshopVars.leftPar = 1;
      JSJshopVars.rightPar = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.slash = 1;
      JSJshopVars.backquote = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.minus = 1;
      JSJshopVars.exclamation = 1;
      JSJshopVars.minus = 1;
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.slash = 1;
      JSJshopVars.interrogation = 1;
      JSJshopVars.dot = 1;
      JSJshopVars.leftBrac = 1;
      JSJshopVars.colon = 1;
      JSJshopVars.minus = 1;
      JSJshopVars.coma = 1;
      JSJshopVars.exclamation = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.dot = 1;
      JSJshopVars.leftPar = 1;
      JSJshopVars.dot = 1;
      JSJshopVars.slash = 1;
      JSJshopVars.equalT = 1;
      JSJshopVars.equalT = 1;
      JSJshopVars.coma = 1;
      JSJshopVars.leftBrac = 1;
      JSJshopVars.interrogation = 1;
      JSJshopVars.slash = 1;
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.semicolon = 1;
      JSJshopVars.percent = 1;
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.colon = (-3);
      JSJshopVars.coma = 1;
      JSJshopVars.astherisk = 1;
      JSJshopVars.leftPar = 1;
      JSJshopVars.rightPar = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.slash = 37;
      JSJshopVars.backquote = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.minus = 1;
      JSJshopVars.exclamation = 1;
      JSJshopVars.minus = (-3);
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.slash = 1;
      JSJshopVars.interrogation = 1;
      JSJshopVars.dot = 1;
      JSJshopVars.leftBrac = 1;
      JSJshopVars.colon = 1;
      JSJshopVars.minus = 1;
      JSJshopVars.coma = 1;
      JSJshopVars.exclamation = 1;
      JSJshopVars.percent = 1;
      JSJshopVars.dot = 1;
      JSJshopVars.leftPar = 1;
      JSJshopVars.dot = 1;
      JSJshopVars.equalT = 1;
      JSJshopVars.equalT = 1030;
      JSJshopVars.coma = 1;
      JSJshopVars.leftBrac = 1;
      JSJshopVars.interrogation = 1;
      JSJshopVars.whiteSpace = 1;
      JSJshopVars.percent = 1;
      jSPredicateForm0.print();
      assertTrue(jSPredicateForm0.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(0dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.nextToken();
      streamTokenizer0.pushBack();
      streamTokenizer1.ordinaryChars(40, 40);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.ttype = 40;
      streamTokenizer0.nval = (double) 40;
      streamTokenizer0.ttype = (-1438);
      streamTokenizer1.ttype = 67;
      streamTokenizer1.whitespaceChars((-1438), (-1438));
      streamTokenizer1.ordinaryChars((-1438), (-1438));
      streamTokenizer0.pushBack();
      streamTokenizer0.commentChar(67);
      streamTokenizer0.quoteChar(67);
      streamTokenizer0.nextToken();
      streamTokenizer0.whitespaceChars(67, (-1438));
      streamTokenizer1.parseNumbers();
      streamTokenizer0.quoteChar(67);
      streamTokenizer0.sval = null;
      streamTokenizer0.commentChar(67);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.ordinaryChar(67);
      streamTokenizer1.wordChars((-2218), (-2218));
      streamTokenizer0.ttype = 67;
      streamTokenizer1.nval = (double) 67;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(false);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(og!,;nv_~i9Zyv+");
      StringReader stringReader1 = new StringReader("(og!,;nv_~i9Zyv+");
      char[] charArray0 = new char[4];
      stringReader1.read(charArray0);
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      stringReader0.reset();
      char[] charArray1 = new char[6];
      stringReader0.read(charArray1);
      charArray1[2] = 'q';
      stringReader0.read();
      stringReader1.markSupported();
      stringReader0.reset();
      charArray1[3] = 'q';
      stringReader1.skip('q');
      stringReader1.skip(110);
      stringReader0.reset();
      stringReader1.read();
      StringReader stringReader2 = new StringReader("(og!,;nv_~i9Zyv+");
      stringReader2.skip(249L);
      stringReader2.reset();
      stringReader2.read(charArray1, 0, 0);
      stringReader2.markSupported();
      stringReader2.read(charArray1);
      stringReader1.reset();
      stringReader2.markSupported();
      stringReader2.reset();
      stringReader2.mark(6);
      StringReader stringReader3 = new StringReader("B=btQV)jj&?F1({p");
      stringReader2.reset();
      stringReader2.skip(0L);
      stringReader2.read();
      stringReader2.markSupported();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("B=btQV)jj&?F1({p");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, Object> function4 = function3.andThen((Function<? super String, ?>) unaryOperator0);
      Function<Object, String> function5 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Integer integer0 = new Integer((-1076865205));
      function4.apply(integer0);
      Function<Object, Object> function6 = function2.andThen((Function<? super String, ?>) function4);
      Function<Object, String> function7 = function5.compose((Function<? super Object, ?>) function3);
      Function<Object, String> function8 = function1.compose((Function<? super Object, ?>) unaryOperator0);
      Function.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Integer, ? extends String>) function2);
      Function.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      function8.compose((Function<? super Integer, ?>) unaryOperator1);
      function7.compose((Function<? super String, ?>) function6);
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function9 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function8);
      function7.andThen((Function<? super String, ?>) function9);
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "($\"Tdl";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("($\"Tdl");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1531));
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
