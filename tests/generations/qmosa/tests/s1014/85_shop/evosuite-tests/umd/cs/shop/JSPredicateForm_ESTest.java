/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 05:40:42 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0910596228402674
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isEmpty();
      jSTerm1.removeAllElements();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.trimToSize();
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm2.add((Object) streamTokenizer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.isEmpty();
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9297061990576545
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "(!M";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(!M");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.15003511526394
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(!M <");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7724273678973164
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ny0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parallelStream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "Ny0");
      jSTerm0.trimToSize();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.add((Object) "Ny0");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm1.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm1.clonePF();
      jSTerm0.addAll((Collection) jSPredicateForm1);
      jSPredicateForm0.isEmpty();
      jSTerm0.matches(jSPredicateForm0);
      jSTerm0.equals(jSTerm1);
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      jSPredicateForm2.trimToSize();
      jSPredicateForm0.matches(jSPredicateForm2, jSSubstitution0);
      jSTerm1.matches(jSPredicateForm2);
      jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm0.trimToSize();
      jSPredicateForm1.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.standarizerPredicateForm();
      JSJshopVars.dot = 2162;
      jSPredicateForm3.matches(jSPredicateForm1);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(G# ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.055641185494705
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.parallelStream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "not");
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm1.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      jSTerm0.addAll((Collection) jSPredicateForm1);
      jSPredicateForm1.equals((JSPredicateForm) jSTerm1);
      jSTerm0.matches(jSPredicateForm0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm2.trimToSize();
      jSPredicateForm0.matches(jSPredicateForm2, jSSubstitution0);
      jSTerm1.matches(jSPredicateForm2);
      jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm0.trimToSize();
      jSPredicateForm1.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "not";
      int int0 = 0;
      jSTerm0.insertElementAt("not", 0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.003112485047475
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ny0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.parallelStream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "Ny0");
      jSTerm0.trimToSize();
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm1.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm1.clonePF();
      jSTerm0.addAll((Collection) jSPredicateForm1);
      jSPredicateForm1.equals((JSPredicateForm) jSTerm1);
      jSTerm0.matches(jSPredicateForm0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm2.trimToSize();
      jSPredicateForm0.matches(jSPredicateForm2, jSSubstitution0);
      jSTerm1.matches(jSPredicateForm2);
      jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm0.trimToSize();
      jSPredicateForm1.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm3.matches(jSPredicateForm1);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.flagLevel = (-1378);
      JSJshopVars.verticalL = (-1378);
      Integer integer0 = new Integer((-1378));
      jSPredicateForm0.addElement(integer0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.973106841384916
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".(0dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = (-4);
      StringReader stringReader1 = new StringReader("0zmXD~");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      streamTokenizer2.whitespaceChars((-850), (-850));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.listIterator();
      jSSubstitution0.add((Object) streamTokenizer1);
      jSSubstitution0.containsAll(jSTerm0);
      jSTerm0.clonePF();
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.01672246943722
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ny0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("0zmXD~");
      streamTokenizer0.wordChars((-1122), (-4));
      stringReader1.ready();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.parallelStream();
      jSTerm0.stream();
      streamTokenizer0.quoteChar(1);
      stringReader0.reset();
      JSTerm jSTerm1 = new JSTerm();
      char[] charArray0 = new char[5];
      streamTokenizer2.ttype = (int) 'm';
      stringReader1.read(charArray0);
      charArray0[1] = '!';
      charArray0[2] = 'U';
      charArray0[3] = '#';
      charArray0[4] = 'm';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader1.read(charBuffer0);
      jSTerm1.add((Object) "Ny0");
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      JSJshopVars.plus = 109;
      jSTerm0.isEmpty();
      JSPredicateForm jSPredicateForm1 = jSTerm1.clonePF();
      jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm1.toStr();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer3.lineno());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.verticalL = (-1378);
      JSJshopVars.flagLevel = (-1378);
      JSJshopVars.verticalL = (-1378);
      JSJshopVars.minus = (-1378);
      JSJshopVars.rightPar = (-1378);
      JSJshopVars.equalT = (-1378);
      JSJshopVars.semicolon = (-1378);
      jSPredicateForm0.addElement("*DK");
      JSJshopVars.slash = (-1378);
      JSJshopVars.coma = (-1378);
      JSJshopVars.slash = (-1378);
      JSJshopVars.backquote = (-1378);
      JSJshopVars.rightPar = (-764);
      JSJshopVars.lessT = (-1378);
      JSJshopVars.rightPar = (-1378);
      JSJshopVars.rightPar = (-1378);
      JSJshopVars.astherisk = (-1378);
      JSJshopVars.backquote = (-1378);
      jSPredicateForm0.setSize(63);
      JSJshopVars.colon = (-1378);
      JSJshopVars.semicolon = (-1378);
      JSJshopVars.flagLevel = (-52716389);
      JSJshopVars.leftBrac = (-1378);
      JSJshopVars.apostrophe = (-1378);
      JSJshopVars.leftPar = (-1378);
      JSJshopVars.apostrophe = (-1378);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9408408938290123
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ny0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("0zmXD~");
      streamTokenizer0.wordChars((-1130), (-4));
      stringReader1.reset();
      stringReader1.ready();
      stringReader1.ready();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer0.lowerCaseMode(true);
      stringReader1.skip((-55L));
      jSTerm0.parallelStream();
      streamTokenizer0.quoteChar((-1));
      stringReader0.reset();
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer1.nval = (double) (-4);
      jSTerm1.add((Object) "Ny0");
      streamTokenizer2.parseNumbers();
      streamTokenizer2.eolIsSignificant(false);
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer2.nval = (-1526.247989226);
      streamTokenizer0.ttype = (-4);
      jSSubstitution0.add((Object) streamTokenizer1);
      JSPredicateForm jSPredicateForm1 = jSTerm1.clonePF();
      boolean boolean0 = jSTerm1.equals(jSPredicateForm1);
      assertTrue(boolean0);
      
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm2 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      assertNotSame(jSPredicateForm2, jSPredicateForm0);
      
      jSPredicateForm1.print();
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7875550098159887
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "YuE");
      jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.standarizerPredicateForm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      unaryOperator0.apply("(");
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ?>) function1);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function3 = unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function2);
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function4 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function3);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function3);
      Function.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function3);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function4);
      jSPredicateForm0.addAll((Collection) jSPredicateForm0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Integer, ?>) function3);
      unaryOperator4.compose((Function<? super String, ? extends Integer>) function3);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.9996892929208165
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ny0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "Ny0");
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm1.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm1.clonePF();
      jSTerm0.addAll((Collection) jSPredicateForm1);
      jSPredicateForm1.equals((JSPredicateForm) jSTerm1);
      jSTerm0.matches(jSPredicateForm0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm2.trimToSize();
      jSPredicateForm0.matches(jSPredicateForm2, jSSubstitution0);
      jSTerm1.matches(jSPredicateForm2);
      jSPredicateForm0.trimToSize();
      jSPredicateForm1.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ny0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.read();
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) "Ny0");
      streamTokenizer0.ordinaryChar((-4));
      char[] charArray0 = new char[7];
      charArray0[0] = ';';
      charArray0[1] = 'q';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = '\\';
      charArray0[5] = 'P';
      charArray0[6] = '.';
      streamTokenizer1.sval = "Ny0";
      streamTokenizer1.pushBack();
      char[] charArray1 = new char[0];
      streamTokenizer0.whitespaceChars((-4), 78);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray1);
      stringReader0.read(charBuffer0);
      streamTokenizer2.eolIsSignificant(false);
      streamTokenizer0.slashSlashComments(false);
      jSTerm0.firstElement();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.lessT = (-164144132);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.listIterator();
      JSSubstitution jSSubstitution1 = jSSubstitution0.standarizerSubs();
      jSSubstitution1.clear();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.sort(comparator0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0910596228402674
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N(0dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeFunction();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.listIterator();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution1 = jSSubstitution0.standarizerSubs();
      jSSubstitution0.sort(comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.sort(comparator1);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-3868));
      streamTokenizer1.commentChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.commentChar(657);
      streamTokenizer0.commentChar((-4));
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.nval = (double) (-4);
      stringReader0.close();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer2);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "(D[KOK");
      jSTerm0.print();
      jSTerm0.add((Object) "(D[KOK");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SystemInUtil.addInputLine(")9`#_");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("c_[xEZSE+t-A/fA");
      SystemInUtil.addInputLine("");
      SystemInUtil.addInputLine(")9`#_");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.setSize(15);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(og!,;|fv_~i9jZyv+");
      StringReader stringReader1 = new StringReader("(og!,;|fv_~i9jZyv+");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-87));
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.reset();
      jSTerm0.add((Object) stringReader1);
      stringReader1.mark(1139);
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = '1';
      charArray0[2] = '(';
      charArray0[3] = 'Z';
      charArray0[4] = 'B';
      charArray0[5] = 'V';
      charArray0[6] = '(';
      stringReader0.read(charArray0);
      streamTokenizer0.slashSlashComments(true);
      stringReader1.reset();
      StringReader stringReader2 = new StringReader("(og!,;|fv_~i9jZyv+");
      stringReader2.mark(0);
      stringReader2.skip((-87));
      stringReader2.markSupported();
      streamTokenizer0.whitespaceChars(124, 124);
      stringReader1.markSupported();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSPredicateForm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N(0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "0zmXD~");
      jSTerm0.add((Object) null);
      streamTokenizer2.eolIsSignificant(true);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function3 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function4 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function3);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Integer, Integer> function5 = Function.identity();
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function.identity();
      Function<Integer, Integer> function7 = unaryOperator2.compose((Function<? super Integer, ? extends Integer>) function2);
      Function<Object, Integer> function8 = function1.andThen((Function<? super Integer, ? extends Integer>) function5);
      Function.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Integer> function9 = unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function8);
      function4.andThen((Function<? super Integer, ?>) function6);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      Function<Object, String> function10 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function11 = unaryOperator4.compose((Function<? super Object, ? extends String>) function10);
      unaryOperator4.compose((Function<? super Object, ? extends String>) function11);
      function7.andThen((Function<? super Integer, ? extends String>) function11);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function8);
      Function<Object, Integer> function12 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function9);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, Integer> function13 = unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Integer> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.compose((Function<? super String, ? extends Integer>) function12);
      unaryOperator5.compose((Function<? super String, ? extends Integer>) function6);
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Integer, ?>) function13);
      UnaryOperator.identity();
      Function<Object, Integer> function14 = unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function8);
      unaryOperator2.compose((Function<? super String, ? extends Integer>) function14);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ny0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("0zmXD~");
      stringReader1.ready();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.parallelStream();
      stringReader0.markSupported();
      stringReader0.reset();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "Ny0");
      stringReader0.read();
      System.setCurrentTimeMillis((-2464L));
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(1017L);
      System.setCurrentTimeMillis((-4));
      jSTerm1.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1, (JSSubstitution) null);
      assertTrue(jSSubstitution0.isEmpty());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(,DO");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.041486554618706
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ny0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "Ny0");
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm1.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm1.clonePF();
      jSPredicateForm1.equals((JSPredicateForm) jSTerm1);
      jSTerm0.matches(jSPredicateForm0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm2.trimToSize();
      jSPredicateForm0.matches(jSPredicateForm2, jSSubstitution0);
      jSTerm1.matches(jSPredicateForm2);
      jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm0.trimToSize();
      jSSubstitution0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSPredicateForm1.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("expected '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = (-4);
      StringReader stringReader1 = new StringReader("0zmXD");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer0.lowerCaseMode(false);
      char[] charArray0 = new char[7];
      streamTokenizer0.ttype = 59;
      stringReader0.markSupported();
      charArray0[1] = '\u0016';
      streamTokenizer1.lowerCaseMode(true);
      charArray0[2] = '\u0000';
      charArray0[3] = '\u0000';
      charArray0[4] = 'L';
      charArray0[5] = 'O';
      streamTokenizer2.lowerCaseMode(false);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.equals(jSPredicateForm0);
      System.setCurrentTimeMillis((-1090L));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9670690902048545
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "d");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.removeAllElements();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.trimToSize();
      StringReader stringReader0 = new StringReader("the okenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm1.isEmpty();
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.addAll((Collection) jSTerm2);
      jSTerm3.add((Object) jSTerm1);
      UnaryOperator.identity();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm3);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      boolean boolean1 = jSTerm4.equals((JSPredicateForm) jSTerm0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ny0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(4545);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("0zmXD~");
      streamTokenizer0.wordChars((-1122), (-4));
      stringReader1.ready();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.parallelStream();
      streamTokenizer1.nextToken();
      streamTokenizer0.quoteChar(1);
      jSTerm0.add((Object) "0zmXD~");
      System.setCurrentTimeMillis((-1));
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.flagLevel = (-1378);
      JSJshopVars.verticalL = (-1378);
      JSJshopVars.minus = (-1378);
      JSJshopVars.rightPar = (-1378);
      JSJshopVars.equalT = (-1378);
      JSJshopVars.semicolon = (-1378);
      jSPredicateForm0.addElement("*DK");
      JSJshopVars.slash = (-1378);
      JSJshopVars.coma = (-1378);
      JSJshopVars.slash = (-1378);
      JSJshopVars.backquote = (-1378);
      JSJshopVars.rightPar = (-764);
      JSJshopVars.lessT = (-1378);
      JSJshopVars.rightPar = (-1378);
      JSJshopVars.rightPar = (-1378);
      JSJshopVars.astherisk = (-1378);
      JSJshopVars.backquote = (-1378);
      JSJshopVars.colon = (-1378);
      JSJshopVars.semicolon = (-1378);
      JSJshopVars.flagLevel = (-52716389);
      JSJshopVars.leftBrac = (-1378);
      JSJshopVars.apostrophe = (-1378);
      JSJshopVars.apostrophe = (-1378);
      JSJshopVars.percent = (-1378);
      JSJshopVars.semicolon = (-1378);
      JSJshopVars.rightPar = JSJshopVars.rightPar;
      JSJshopVars.minus = (-1378);
      JSJshopVars.flagLevel = (-1378);
      JSJshopVars.exclamation = (-1378);
      JSJshopVars.leftBrac = (-1378);
      jSPredicateForm0.print();
      assertFalse(jSPredicateForm0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.flagLevel = (-4619);
      JSJshopVars.verticalL = (-165360616);
      jSPredicateForm0.setSize(84);
      JSJshopVars.rightPar = (-764);
      JSJshopVars.coma = (-4619);
      JSJshopVars.slash = (-4619);
      JSJshopVars.rightPar = (-764);
      JSJshopVars.lessT = (-4619);
      JSJshopVars.rightPar = 2100;
      JSJshopVars.rightPar = (-4619);
      JSJshopVars.backquote = (-4619);
      JSJshopVars.interrogation = (-4619);
      JSJshopVars.flagLevel = (-52716389);
      JSJshopVars.apostrophe = (-2582);
      JSJshopVars.percent = (-4619);
      JSJshopVars.semicolon = (-4619);
      JSJshopVars.rightPar = JSJshopVars.rightPar;
      JSJshopVars.minus = (-4619);
      JSJshopVars.exclamation = (-4619);
      JSJshopVars.leftBrac = (-4619);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.flagLevel = (-1378);
      JSJshopVars.verticalL = (-1378);
      JSJshopVars.minus = (-1378);
      JSJshopVars.rightPar = (-1378);
      JSJshopVars.equalT = (-1378);
      JSJshopVars.semicolon = (-1378);
      JSJshopVars.slash = (-1378);
      JSJshopVars.coma = (-1378);
      JSJshopVars.slash = (-1378);
      JSJshopVars.backquote = (-1378);
      JSJshopVars.rightPar = (-1378);
      JSJshopVars.lessT = (-1378);
      JSJshopVars.rightPar = (-1378);
      JSJshopVars.rightPar = (-1378);
      JSJshopVars.astherisk = (-1378);
      JSJshopVars.percent = (-1378);
      JSJshopVars.backquote = (-1378);
      JSJshopVars.colon = (-1378);
      JSJshopVars.semicolon = (-1378);
      JSJshopVars.flagLevel = (-52716389);
      JSJshopVars.leftBrac = (-1378);
      JSJshopVars.apostrophe = (-1378);
      JSJshopVars.apostrophe = (-1378);
      JSJshopVars.astherisk = (-1378);
      JSJshopVars.percent = (-1378);
      JSJshopVars.semicolon = (-1378);
      JSJshopVars.rightPar = JSJshopVars.rightPar;
      JSJshopVars.minus = (-1378);
      JSJshopVars.flagLevel = (-1378);
      JSJshopVars.exclamation = (-1378);
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      System.setCurrentTimeMillis(18L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(870L);
      System.setCurrentTimeMillis(870L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1334L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1340L);
      System.setCurrentTimeMillis((-475L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-475L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1334L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.print();
      assertEquals(10, jSPredicateForm0.capacity());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SystemInUtil.addInputLine("_@&o;8f>Kw");
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-3834L));
      System.setCurrentTimeMillis(925L);
      System.setCurrentTimeMillis((-3834L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1162L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-132L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6911954998471348
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "ddk");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSJshopVars.leftBrac = 1191;
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      // Undeclared exception!
      try { 
        unaryOperator0.compose((Function<? super Object, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6911954998471348
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "ddk");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSJshopVars.leftBrac = 1192;
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      // Undeclared exception!
      try { 
        unaryOperator0.compose((Function<? super Object, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0238736061572697
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "d");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isEmpty();
      jSTerm1.removeAllElements();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.trimToSize();
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm1.isEmpty();
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      UnaryOperator.identity();
      jSTerm3.addAll((Collection) jSTerm2);
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.equals((JSPredicateForm) jSTerm3);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm3);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(18L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(870L);
      System.setCurrentTimeMillis(870L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1334L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1340L);
      System.setCurrentTimeMillis((-475L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-475L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1334L));
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long long0 = 360L;
      System.setCurrentTimeMillis(360L);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      System.setCurrentTimeMillis(15L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(870L);
      System.setCurrentTimeMillis(870L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1334L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1340L);
      System.setCurrentTimeMillis((-475L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-475L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1334L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(([dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.pushBack();
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.close();
      streamTokenizer1.ttype = 909;
      streamTokenizer1.ordinaryChars((-4), (-3868));
      streamTokenizer2.commentChar(909);
      streamTokenizer2.ttype = 909;
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer1.resetSyntax();
      streamTokenizer2.eolIsSignificant(false);
      streamTokenizer2.commentChar(909);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer2);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(([ml");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = (-4);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer2.commentChar((-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer2.quoteChar((-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer3.ttype = (-4);
      streamTokenizer3.ordinaryChars(0, (-4));
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer3.commentChar(42);
      streamTokenizer0.commentChar((-4));
      streamTokenizer3.wordChars((-4), (-4));
      streamTokenizer3.ttype = (-4);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer3.sval = null;
      streamTokenizer2.commentChar((-4));
      streamTokenizer3.quoteChar((-4));
      streamTokenizer2.ttype = streamTokenizer2.ttype;
      streamTokenizer2.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChars((-4), 32);
      streamTokenizer2.commentChar((-4));
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0068967152315558
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(l# dl");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0zmXD~");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.add((Object) "Predicateform.print(): 0 elements");
      jSTerm0.add((Object) "Ny0");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(([dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar(1);
      streamTokenizer0.pushBack();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer2.commentChar((-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.slashStarComments(false);
      streamTokenizer3.sval = null;
      streamTokenizer1.quoteChar((-4));
      streamTokenizer2.ttype = (-4);
      streamTokenizer3.commentChar((-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.commentChar(69);
      streamTokenizer1.quoteChar(2280);
      streamTokenizer3.wordChars((-4), (-4));
      streamTokenizer1.resetSyntax();
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.parseNumbers();
      streamTokenizer3.slashSlashComments(true);
      streamTokenizer1.ordinaryChars((-4), (-4));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("tRe tokeiz$r is @C");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Integer, String> function4 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super Integer, ? extends String>) function4);
      Function.identity();
      unaryOperator1.compose((Function<? super Integer, ? extends Integer>) function1);
      Function.identity();
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      function1.andThen((Function<? super Integer, ?>) function5);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.compose((Function<? super Object, ? extends String>) function6);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.apply((Object) null);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, Integer> function8 = unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function3);
      UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ? extends Integer>) function7);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      unaryOperator1.compose((Function<? super String, ? extends Integer>) function8);
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SystemInUtil.addInputLine(")#_");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("");
      SystemInUtil.addInputLine("7_+0od|`a");
      SystemInUtil.addInputLine("");
      SystemInUtil.addInputLine("MHCvV1u");
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.flagLevel = (-1378);
      JSJshopVars.verticalL = (-1378);
      JSJshopVars.minus = (-1378);
      JSJshopVars.rightPar = (-1378);
      JSJshopVars.equalT = (-1378);
      JSJshopVars.semicolon = (-1378);
      jSPredicateForm0.addElement("*DK");
      JSJshopVars.slash = (-1378);
      JSJshopVars.coma = (-1378);
      JSJshopVars.slash = (-1378);
      JSJshopVars.backquote = (-1378);
      JSJshopVars.rightPar = (-764);
      JSJshopVars.lessT = (-1378);
      JSJshopVars.rightPar = (-1378);
      JSJshopVars.rightPar = (-1378);
      JSJshopVars.astherisk = (-1378);
      JSJshopVars.backquote = (-1378);
      JSJshopVars.colon = (-1378);
      JSJshopVars.semicolon = (-1378);
      JSJshopVars.flagLevel = (-52716389);
      JSJshopVars.leftBrac = (-1378);
      JSJshopVars.apostrophe = (-1378);
      JSJshopVars.leftPar = (-1378);
      JSJshopVars.apostrophe = (-1378);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("(*DK)", stringBuffer0.toString());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SystemInUtil.addInputLine(")");
      SystemInUtil.addInputLine(")");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine(")");
      SystemInUtil.addInputLine("c_[xEZSE+t-A/fA");
      SystemInUtil.addInputLine("c_[xEZSE+t-A/fA");
      SystemInUtil.addInputLine("e02e");
      SystemInUtil.addInputLine((String) null);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("", stringBuffer0.toString());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis(18L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(870L);
      System.setCurrentTimeMillis(870L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1334L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1340L);
      System.setCurrentTimeMillis((-475L));
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      long long0 = (-34L);
      System.setCurrentTimeMillis((-34L));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(([dl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar(1);
      streamTokenizer0.pushBack();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer2.commentChar((-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.slashStarComments(false);
      streamTokenizer3.sval = null;
      streamTokenizer1.quoteChar((-4));
      streamTokenizer2.ttype = (-4);
      streamTokenizer3.commentChar((-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.commentChar(69);
      streamTokenizer1.quoteChar(2280);
      streamTokenizer3.wordChars((-4), (-4));
      streamTokenizer1.resetSyntax();
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer2.quoteChar((-4));
      streamTokenizer3.resetSyntax();
      streamTokenizer3.commentChar((-4));
      streamTokenizer2.ordinaryChars((-4), (-4));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(KOK");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SystemInUtil.addInputLine(")#_");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("");
      SystemInUtil.addInputLine("7_+0od|`a");
      SystemInUtil.addInputLine("}{V=y<mQk4vq~;");
      SystemInUtil.addInputLine("}{V=y<mQk4vq~;");
      SystemInUtil.addInputLine("f+-9N_wKE:v&~JB)T");
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SystemInUtil.addInputLine("is");
      SystemInUtil.addInputLine("is");
      SystemInUtil.addInputLine("7_u0o|`a");
      SystemInUtil.addInputLine("is");
      SystemInUtil.addInputLine("cnot");
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(# ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution1 = jSSubstitution0.standarizerSubs();
      jSSubstitution0.containsAll(jSSubstitution1);
      jSSubstitution0.sort(comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.sort(comparator1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.clear();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
