/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 04:26:37 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.157963565450758
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.dot = 69;
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.makeEval(true);
      StringReader stringReader0 = new StringReader("Expecting ')' for term.");
      jSTerm1.equals(jSTerm0);
      jSTerm0.isGround();
      jSTerm1.cloneT();
      assertTrue(jSTerm1.isEval());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.477597976426666
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSTerm0.add((Object) "@YW^?grZcZjX!n*,DxV");
      StringReader stringReader0 = new StringReader("@YW^?grZcZjX!n*,DxV");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.lastElement();
      jSTerm1.add((Object) "@YW^?grZcZjX!n*,DxV");
      JSTerm jSTerm2 = jSTerm0.cloneT();
      System.setCurrentTimeMillis(0L);
      jSTerm1.makeVariable();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.makeConstant();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.equals(jSTerm0);
      jSTerm2.makeConstant();
      jSTerm0.isEmpty();
      jSTerm1.isGround();
      JSTerm jSTerm5 = jSTerm3.call();
      jSTerm5.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm4.matches(jSTerm3);
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7481554572476763
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "@YW^?grZcZjX!n*,DxV");
      StringReader stringReader0 = new StringReader("@YW^?grZcZjX!n*,DxV");
      jSTerm0.standardizerTerm();
      jSTerm0.add((Object) "@YW^?grZcZjX!n*,DxV");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      stringReader0.markSupported();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7480673485460891
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "@YW^?gxrZcZjX!n*,DxV");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      String string0 = "?";
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      StringReader stringReader1 = new StringReader("?");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      Object[] objectArray0 = new Object[0];
      jSTerm1.toArray(objectArray0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.push((Object) null);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.isConstant();
      StringReader stringReader0 = new StringReader("(/ PYs7D6vo:Q");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.quoteChar((-2));
      jSTerm0.isFunction();
      jSTerm0.isEmpty();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.call();
      streamTokenizer0.quoteChar(2);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "@YW^?grZcZjX!n*,DxV");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      JSJshopVars.exclamation = (-1526);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("%%%");
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8288411561741995
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSSubstitution0);
      StringReader stringReader0 = new StringReader("<%~WE=x=zCD?+u");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      int int0 = 96;
      stringReader0.mark(96);
      JSJshopVars.flagLevel = 357;
      jSTerm1.isVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.instance(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9356005054539458
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "@YW^?grZcZjX!n*,DxV");
      JSJshopVars.coma = (-3);
      StringReader stringReader0 = new StringReader("@YW^?grZcZjX!n*,DxV");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) "@YW^?grZcZjX!n*,DxV");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = 598;
      jSTerm1.isFunction();
      stringReader0.skip(598);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.540181328450802
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSTerm0.add((Object) "@YW^?grZcZjX!n*,DxV");
      StringReader stringReader0 = new StringReader("@YW^?grZcZjX!n*,DxV");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.lastElement();
      jSTerm1.add((Object) "@YW^?grZcZjX!n*,DxV");
      JSTerm jSTerm2 = jSTerm0.cloneT();
      System.setCurrentTimeMillis(0L);
      jSTerm1.makeVariable();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.makeConstant();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.equals(jSTerm0);
      jSTerm2.makeConstant();
      jSTerm4.matches(jSTerm3, jSSubstitution0);
      jSTerm3.call();
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm5.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8018924006588726
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSTerm0.add((Object) "@YW^?grZcZjX!n*,DxV");
      jSTerm0.add((Object) null);
      StringReader stringReader0 = new StringReader("@YW^?grZcZjX!n*,DxV");
      jSTerm0.add((Object) "@YW^?grZcZjX!n*,DxV");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6434177197931796
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "@YW^?grZcZjX!n*,DxV");
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isGround();
      System.setCurrentTimeMillis(211L);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2467992051654933
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.insertElementAt(jSTerm0, 0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      jSTerm0.isGround();
      jSTerm0.makeConstant();
      jSTerm0.isFunction();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      System.setCurrentTimeMillis(0);
      jSTerm1.makeVariable();
      jSTerm0.makeVariable();
      jSTerm0.makeConstant();
      jSTerm0.isEmpty();
      jSTerm1.isGround();
      jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.standardizerTerm();
      jSTerm0.cloneT();
      assertTrue(jSTerm0.isConstant());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.dot = 69;
      StringReader stringReader0 = new StringReader("expecting");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(false);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7930940134110525
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("He)Q>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[1] = (Object) "He)Q>";
      objectArray0[2] = (Object) streamTokenizer0;
      objectArray0[3] = (Object) stringReader0;
      objectArray0[4] = (Object) streamTokenizer0;
      objectArray0[5] = (Object) streamTokenizer0;
      JSJshopVars.colon = (-1327);
      jSTerm0.toArray(objectArray0);
      streamTokenizer0.slashStarComments(false);
      jSTerm0.parseList(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.insertElementAt(jSTerm0, 0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      jSTerm0.containsAll(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.143952200643869
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSSubstitution0);
      StringReader stringReader0 = new StringReader("<%~WE=x=zCD?+u");
      jSTerm0.containsAll(jSTerm0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      System.setCurrentTimeMillis(0);
      jSTerm1.makeVariable();
      jSTerm0.makeConstant();
      jSTerm1.isEmpty();
      jSTerm0.isGround();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm3.standardizerTerm();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.insertElementAt(jSTerm0, 0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      jSTerm0.containsAll(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.insertElementAt(jSTerm0, 0);
      jSTerm0.add((Object) jSSubstitution0);
      StringReader stringReader0 = new StringReader("Z[cq5^Hiz)0-WN>");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      Object[] objectArray0 = new Object[0];
      jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.add((Object) jSSubstitution1);
      StringReader stringReader1 = new StringReader("zodp6+y3%un1*y");
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2212293736761892
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.call();
      System.setCurrentTimeMillis((-1));
      jSTerm1.makeVariable();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      jSTerm0.makeConstant();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm1.equals(jSTerm1);
      jSTerm2.makeConstant();
      jSTerm1.matches(jSTerm3, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm4.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.026221474036724
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSSubstitution0);
      StringReader stringReader0 = new StringReader("<%~WE=x=zCD?+u");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      stringReader0.mark(96);
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSSubstitution2.instance(jSTerm0);
      jSTerm0.matches(jSTerm1, jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8735105206455307
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.containsAll(jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSSubstitution0);
      String string0 = "<%~WE=x=\\zCD?+u";
      StringReader stringReader0 = new StringReader("<%~WE=x=zCD?+u");
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3792922544726758
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.insertElementAt(jSTerm0, 0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      jSTerm0.containsAll(jSSubstitution0);
      jSTerm0.makeConstant();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      jSSubstitution0.sort(comparator0);
      jSTerm0.isFunction();
      StringReader stringReader0 = new StringReader("%p`eiGUMNm@8KN004_K");
      stringReader0.mark(0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) 0;
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9521382094153648
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSSubstitution0);
      StringReader stringReader0 = new StringReader("<%~WE=x=zCD?+u");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.add((Object) jSSubstitution0);
      stringReader0.reset();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.instance(jSTerm0);
      jSTerm0.matches(jSTerm1, jSSubstitution2);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.quoteChar(1107);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1500602244842355
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSTerm0.add((Object) "@YW^?grZcZjX!n*,DxV");
      StringReader stringReader0 = new StringReader("@YW^?grZcZjX!n*,DxV");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.lastElement();
      jSTerm1.add((Object) "@YW^?grZcZjX!n*,DxV");
      jSTerm0.cloneT();
      System.setCurrentTimeMillis(0L);
      jSTerm1.makeVariable();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("@YW^?grZcZjX!n*,DxV");
      jSTerm1.equals(jSTerm0);
      jSTerm1.isGround();
      jSTerm2.print();
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm2.isConstant());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.150111030669994
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      jSSubstitution0.removeAllElements();
      jSTerm0.add((Object) "@YW^?grZcZjX!n*,DxV");
      StringReader stringReader0 = new StringReader("@YW^?grZcZjX!n*,DxV");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      Object[] objectArray0 = new Object[10];
      jSTerm1.lastElement();
      objectArray0[0] = (Object) "@YW^?grZcZjX!n*,DxV";
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[7] = (Object) jSSubstitution0;
      jSTerm0.toArray(objectArray0);
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("%%%");
      jSTerm1.equals(jSTerm0);
      jSTerm1.isGround();
      jSTerm1.cloneT();
      jSTerm1.print();
      assertEquals("[@YW^?grZcZjX!n*,DxV, [@YW^?grZcZjX!n*,DxV]]", jSTerm1.toString());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      String string0 = "<=";
      jSSubstitution0.add((Object) "<=");
      int int0 = 0;
      jSSubstitution0.insertElementAt(jSTerm0, 0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      jSTerm0.containsAll(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0097091818941455
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.makeConstant();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.equals(jSTerm0);
      jSTerm2.makeConstant();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.420610737702113
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis((-1));
      jSTerm3.makeVariable();
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution1);
      jSTerm0.makeConstant();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm1.equals(jSTerm1);
      jSTerm2.makeConstant();
      jSTerm3.matches(jSTerm4, jSSubstitution1);
      stringReader0.ready();
      jSTerm3.toStr();
      // Undeclared exception!
      try { 
        jSTerm5.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.2788479335999434
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.insertElementAt(jSTerm0, 0);
      jSSubstitution0.spliterator();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      jSTerm0.containsAll(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.makeConstant();
      jSTerm0.isGround();
      jSSubstitution0.listIterator(0);
      StringReader stringReader0 = new StringReader("(/ PYs7D6vo:Q");
      stringReader0.mark(0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      jSTerm0.isEmpty();
      jSTerm0.isGround();
      jSTerm0.call();
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1761856615603072
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "@YW^?grZcZjX!n*,DxV");
      jSTerm0.add((Object) null);
      System.setCurrentTimeMillis((-3224L));
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.makeConstant();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.equals(jSTerm0);
      jSTerm2.makeConstant();
      jSTerm2.isEmpty();
      jSTerm2.isGround();
      JSTerm jSTerm3 = jSTerm2.call();
      // Undeclared exception!
      try { 
        jSTerm3.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.891053111376833
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      String string0 = "@YW?grZcZjX!n*,,DxV";
      jSTerm0.add((Object) "@YW?grZcZjX!n*,,DxV");
      StringReader stringReader0 = new StringReader("%%%");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.equals(jSTerm1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.771623955677366
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      jSSubstitution0.removeAllElements();
      jSTerm0.add((Object) "@YW^?grZcZjX!n*,DxV");
      StringReader stringReader0 = new StringReader("@YW^?grZcZjX!n*,DxV");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "@YW^?grZcZjX!n*,DxV";
      jSTerm0.toArray(objectArray0);
      jSTerm1.add((Object) "@YW^?grZcZjX!n*,DxV");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9559838465843624
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("He)Q>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "He)Q>";
      objectArray0[2] = (Object) streamTokenizer0;
      objectArray0[3] = (Object) stringReader0;
      objectArray0[4] = (Object) streamTokenizer0;
      objectArray0[5] = (Object) streamTokenizer0;
      JSJshopVars.colon = (-1327);
      jSTerm0.toArray(objectArray0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertFalse(jSSubstitution0.fail());
      
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm2.isFunction());
      assertEquals("[nil]", jSTerm2.toString());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.1321922400878854
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      jSSubstitution0.removeAllElements();
      jSTerm0.add((Object) "@YW^?grZcZjX!n*,DxV");
      StringReader stringReader0 = new StringReader(" hqGI^{T)");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) "?";
      objectArray0[2] = (Object) listIterator0;
      jSTerm1.toArray(objectArray0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      jSTerm1.add((Object) listIterator0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("@YW^?grZcZjX!n*,DxV");
      jSTerm0.equals(jSTerm1);
      jSTerm0.isGround();
      jSTerm0.cloneT();
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.1321922400878854
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      StringReader stringReader0 = new StringReader("%");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) "%";
      objectArray0[3] = (Object) jSTerm1;
      objectArray0[4] = (Object) "%";
      objectArray0[5] = (Object) jSTerm1;
      jSTerm1.toArray(objectArray0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.verticalL = 1231;
      StringReader stringReader1 = new StringReader("%%%");
      jSTerm0.equals(jSTerm1);
      jSTerm1.isGround();
      jSTerm1.cloneT();
      assertTrue(jSTerm1.isFunction());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.951848439223888
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.9521382094153648
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      jSSubstitution0.removeAllElements();
      jSTerm0.add((Object) "@YW^?grZcZjX!n*,DxV");
      StringReader stringReader0 = new StringReader("@YW^?grZcZjX!n*,DxV");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      Object[] objectArray0 = new Object[10];
      jSTerm1.lastElement();
      objectArray0[0] = (Object) "@YW^?grZcZjX!n*,DxV";
      Object object0 = new Object();
      jSTerm1.toArray(objectArray0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.add((Object) jSSubstitution2);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      StringReader stringReader1 = new StringReader("2]J.l");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      assertFalse(jSTerm4.isFunction());
      assertTrue(jSTerm4.isConstant());
      assertNotSame(jSTerm4, jSTerm3);
      assertEquals(1, jSTerm4.size());
      assertFalse(jSTerm4.isVariable());
      assertFalse(jSTerm4.isEval());
      
      JSTerm jSTerm5 = jSTerm1.cloneT();
      assertTrue(jSTerm5.isFunction());
      assertTrue(jSTerm1.isFunction());
      assertNotSame(jSTerm1, jSTerm5);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.5611613016436676
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2);
      jSTerm2.equals(jSTerm1);
      jSTerm0.makeVariable();
      jSTerm2.containsAll(jSSubstitution0);
      jSTerm2.toStr();
      jSTerm0.equals(jSTerm1);
      jSTerm0.isEmpty();
      jSTerm2.makeEval(true);
      jSTerm1.isGround();
      JSTerm jSTerm3 = jSTerm1.call();
      JSJshopVars.rightBrac = 1;
      jSTerm3.cloneT();
      jSTerm3.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm0, jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.8848713335781608
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.verticalL = (-1773);
      JSJshopVars.dot = 69;
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.3592367006650063
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      int int0 = 0;
      jSSubstitution0.insertElementAt(jSTerm0, 0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      jSTerm0.containsAll(jSSubstitution0);
      jSTerm0.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.firstElement();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "@YW^?grZcZjX!n*,DxV");
      StringReader stringReader0 = new StringReader("@YW^?grZcZjX!n*,DxV");
      jSTerm0.add((Object) "@YW^?grZcZjX!n*,DxV");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      jSTerm0.isConstant();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.1321922400878854
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      streamTokenizer0.ttype = 101;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm2.call();
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm3.set(0, jSSubstitution0);
      jSTerm4.forEach(consumer0);
      streamTokenizer0.quoteChar((-1));
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.cloneS();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("(/ PYs7D6vo:Q");
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      boolean boolean0 = jSTerm0.isVariable();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.9521382094153648
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.equals(jSTerm2);
      jSTerm0.parallelStream();
      jSTerm0.print();
      jSTerm0.makeVariable();
      jSTerm1.isVariable();
      // Undeclared exception!
      try { 
        jSTerm2.containsAll((Collection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.2148896539491203
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      jSSubstitution0.toArray(objectArray0);
      jSSubstitution0.removeAllElements();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSSubstitution0);
      StringReader stringReader0 = new StringReader("<%~WE=x=zCD?+u");
      jSTerm0.containsAll(jSTerm0);
      StringReader stringReader1 = new StringReader("(/ PYs7D6vo:Q");
      stringReader0.mark(889);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSJshopVars.coma = (-761);
      streamTokenizer0.slashStarComments(false);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("expecting");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      stringReader1.skip((-4));
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.089935099971897
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      jSSubstitution0.removeAllElements();
      jSTerm0.add((Object) jSSubstitution0);
      StringReader stringReader0 = new StringReader("expecting");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      Object[] objectArray0 = new Object[0];
      jSTerm0.toArray(objectArray0);
      jSTerm1.add((Object) listIterator0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("Vqrm3A");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.equals(jSTerm0);
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.4287691203187398
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.removeAllElements();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm0.isEval());
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "@YW^?grZcZjX!n*,DxV");
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      System.setCurrentTimeMillis(211L);
      StringReader stringReader0 = new StringReader("@YW^?grZcZjX!n*,DxV");
      stringReader0.mark(96);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.quoteChar(96);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.1490368070871373
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.matches(jSTerm2);
      jSTerm2.equals(jSTerm1);
      JSJshopVars.exclamation = 727;
      JSJshopVars.apostrophe = 727;
      jSTerm0.makeVariable();
      jSTerm2.toStr();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5568271679009453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSTerm0.add((Object) "@YW^?grZcZjX!n*,DxV");
      StringReader stringReader0 = new StringReader("@YW^?grZcZjX!n*,DxV");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.lastElement();
      jSTerm1.add((Object) "@YW^?grZcZjX!n*,DxV");
      JSTerm jSTerm2 = jSTerm0.cloneT();
      System.setCurrentTimeMillis(0L);
      jSTerm1.makeVariable();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.makeConstant();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.equals(jSTerm0);
      jSTerm2.makeConstant();
      jSTerm0.isEmpty();
      jSTerm1.isGround();
      jSTerm3.call();
      jSTerm3.cloneT();
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm4.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7897475470555704
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".)>4xVsPuVg");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(2);
      streamTokenizer0.eolIsSignificant(true);
      char[] charArray0 = new char[3];
      charArray0[0] = ';';
      charArray0[1] = '$';
      charArray0[2] = 'd';
      stringReader0.read(charArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.containsAll(jSPredicateForm0);
      streamTokenizer0.nval = 1.0;
      jSTerm0.toStr();
      jSTerm0.isGround();
      jSTerm0.print();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.602024241138303
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.matches(jSTerm2);
      jSTerm2.equals(jSTerm1);
      jSTerm0.makeVariable();
      jSTerm2.containsAll(jSSubstitution0);
      jSTerm2.toStr();
      jSTerm0.equals(jSTerm1);
      jSTerm0.isEmpty();
      jSTerm1.isGround();
      JSTerm jSTerm3 = jSTerm1.call();
      jSTerm3.cloneT();
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      jSTerm4.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSSubstitution0.retainAll(jSPredicateForm0);
      jSSubstitution0.removeAllElements();
      StringReader stringReader0 = new StringReader("cYW^?zrZcZjX!n*,txV");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = 'c';
      charArray0[2] = 'N';
      charArray0[3] = 't';
      charArray0[4] = ':';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.8486855577264172
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("v5~w(Nc~46-HWju+0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.add((Object) jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1537419427010902
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.insertElementAt(jSTerm0, 0);
      jSSubstitution0.spliterator();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      jSTerm0.containsAll(jSSubstitution0);
      jSTerm0.makeConstant();
      jSTerm0.isConstant();
      StringReader stringReader0 = new StringReader("(/ PYs7D6vo:Q");
      jSTerm0.isEmpty();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSTerm0.makeFunction();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5810937501718236
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.astherisk = 52;
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.377819508039033
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZodP6+{Y3%UN1*~Y ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("OmuQ|T[/S5ag@<\"");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clear();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      StringReader stringReader1 = new StringReader("");
      StringReader stringReader2 = new StringReader("");
      jSTerm0.isEval();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      streamTokenizer0.wordChars(52, 0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.quoteChar(40);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting constant symbol as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 984.915350175594;
      streamTokenizer0.ordinaryChars(540, 540);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
