/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 05:07:41 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.285831693431616
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.pollLast();
      linkedList0.push((Object) null);
      jSTerm0.addAll((Collection) linkedList0);
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("DR*Y2fIAK.-vk");
      jSTerm1.addAll((Collection) jSTerm0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      System.setCurrentTimeMillis(0L);
      jSTerm3.makeEval(true);
      jSTerm2.listIterator();
      StringReader stringReader1 = new StringReader("Line ");
      stringReader0.mark(499);
      System.setCurrentTimeMillis(2589L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm3.isFunction());
      assertTrue(jSTerm4.isFunction());
      assertTrue(jSTerm4.isEval());
      assertFalse(jSTerm2.isConstant());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.535849000453449
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "1YW^?zrlcZX!n*,txV");
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElements(jSSubstitution0);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.add((Object) jSSubstitution3);
      jSTerm2.standardizerTerm();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.cloneS();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.equals(jSTerm2);
      jSSubstitution4.clear();
      JSJshopVars.percent = 1767;
      StringReader stringReader0 = new StringReader("1YW^?zrlcZX!n*,txV");
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution2);
      Predicate<String> predicate1 = predicate0.negate();
      predicate0.test("J}5]Av#");
      predicate0.and(predicate1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9715503473033111
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parallelStream();
      jSTerm0.add((Object) "cYW^HzrZcljX!8A,txV");
      StringReader stringReader0 = new StringReader("nil");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3093517394969356
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(q/ PYs7D6vo:Q");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.nval = (double) 889;
      streamTokenizer0.quoteChar(889);
      streamTokenizer0.quoteChar(889);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer0.sval = streamTokenizer0.sval;
      streamTokenizer0.commentChar((-9115));
      streamTokenizer1.whitespaceChars(41, 2556);
      streamTokenizer1.nval = (double) 2556;
      streamTokenizer0.parseNumbers();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSSubstitution0.add((Object) jSTerm0);
      String string0 = "cYW^?zrZcZjX!n*,txV";
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "cYW^?zrZcZjX!n*,txV";
      jSTerm0.add((Object) "cYW^?zrZcZjX!n*,txV");
      jSTerm0.add((Object) "cYW^?zrZcZjX!n*,txV");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9417429777213613
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Stream stream0 = jSTerm0.parallelStream();
      jSTerm0.add((Object) "cYW^HzrZcljX!8A,txV");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.push(stream0);
      jSTerm0.addAll((Collection) linkedList0);
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("%");
      jSTerm1.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parallelStream();
      jSTerm0.add((Object) "cYW^HzrZcljX!8A,txV");
      StringReader stringReader0 = new StringReader("EqES4\"gA%Fje%d7;q'");
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.removeLastOccurrence(jSTerm0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.pollLast();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      linkedList0.push(jSSubstitution0);
      jSTerm0.addAll((Collection) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7222254182132617
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.add((Object) "cYW^?zrZcZjX!n*,txV");
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.call();
      JSJshopVars.rightBrac = (-172);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) jSTerm1;
      objectArray0[2] = (Object) jSSubstitution2;
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[5] = (Object) jSTerm0;
      objectArray0[6] = (Object) jSSubstitution4;
      objectArray0[7] = (Object) "cYW^?zrZcZjX!n*,txV";
      jSTerm0.toArray();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution4);
      jSSubstitution4.add((Object) null);
      System.setCurrentTimeMillis(665L);
      objectArray0[3] = (Object) (-950);
      jSTerm2.makeVariable();
      JSSubstitution jSSubstitution5 = jSTerm2.matches(jSTerm1, jSSubstitution2);
      jSSubstitution5.add((Object) jSTerm2);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm2.matches(jSTerm3, jSSubstitution5);
      assertEquals("[cYW^?zrZcZjX!n*,txV, [cYW^?zrZcZjX!n*,txV]]", jSTerm0.toString());
      assertEquals(10, jSTerm1.capacity());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8511931801579333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w9G8Amc;LFMe{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.parallelStream();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.makeVariable();
      jSTerm0.sort(comparator0);
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm1 = jSTerm0.call();
      JSJshopVars.coma = (-1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.call();
      stringReader0.skip((-389L));
      JSJshopVars.greaterT = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      jSTerm2.toStr();
      JSJshopVars.flagLevel = (-3878);
      System.setCurrentTimeMillis(441L);
      jSTerm2.equals(jSTerm1);
      jSTerm2.cloneT();
      JSTerm jSTerm4 = jSTerm3.cloneT();
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm4.isVariable());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4340181248336115
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.pollFirst();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.push((Object) null);
      jSTerm0.addAll((Collection) linkedList0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) linkedList0;
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.pollFirst();
      linkedList0.pollLast();
      linkedList0.push((Object) null);
      jSTerm0.addAll((Collection) linkedList0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "nil");
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSTerm0.ensureCapacity(819);
      linkedList0.add((Object) "max");
      linkedList0.push((Object) null);
      jSTerm0.addAll((Collection) linkedList0);
      JSJshopVars.plus = 819;
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7656968195870957
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "1YW^?zrlcZX!n*,txV");
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElements(jSSubstitution0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      assertTrue(jSTerm3.isFunction());
      
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.cloneS();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.containsAll(jSPredicateForm0);
      boolean boolean0 = jSTerm0.equals(jSTerm2);
      assertNotSame(jSTerm2, jSTerm3);
      assertTrue(boolean0);
      
      jSSubstitution3.clear();
      JSJshopVars.percent = 1767;
      StringReader stringReader0 = new StringReader("1YW^?zrlcZX!n*,txV");
      JSTerm jSTerm4 = jSTerm1.cloneT();
      assertTrue(jSTerm4.isFunction());
      
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution2);
      Predicate<String> predicate1 = predicate0.negate();
      predicate0.test("J}5]Av#");
      Predicate<String> predicate2 = predicate0.and(predicate1);
      predicate2.or(predicate1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution3);
      jSTerm0.applySubstitutionT(jSSubstitution4);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(42, stringBuffer0.length());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.995423552235459
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("?bEY-N):IX^8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) streamTokenizer0);
      jSTerm0.call();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) streamTokenizer0;
      jSTerm2.toArray(objectArray0);
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      System.setCurrentTimeMillis(820L);
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm3.matches(jSTerm0, jSSubstitution2);
      jSTerm0.standardizerTerm();
      jSTerm2.matches(jSTerm1, jSSubstitution1);
      jSTerm2.matches(jSTerm0);
      assertEquals("[?bEY-N, []]", jSTerm2.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6742616407429973
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("?bEY-N):IX^8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.call();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.add((Object) jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "?bEY-N):IX^8";
      objectArray0[1] = (Object) jSTerm1;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) streamTokenizer0;
      objectArray0[4] = (Object) "?bEY-N):IX^8";
      objectArray0[5] = (Object) stringReader0;
      objectArray0[6] = (Object) "?bEY-N):IX^8";
      objectArray0[7] = (Object) stringReader0;
      jSTerm0.toArray(objectArray0);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm2.standardizerTerm();
      jSTerm4.removeAll(jSTerm1);
      jSTerm3.cloneT();
      System.setCurrentTimeMillis(0L);
      jSTerm1.call();
      assertEquals("[Token[')'], line 1, [?bEY-N]]", jSTerm1.toString());
      
      jSTerm5.standardizerTerm();
      assertFalse(jSTerm2.equals((Object)jSTerm5));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9448777056036146
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSTerm0.add((Object) "cYW^?zrZcZjX!n*,txV");
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution2);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution4);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm3.forEach(consumer0);
      StringReader stringReader0 = new StringReader("A(rTx82aR,b");
      jSTerm0.equals(jSTerm2);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = (-1624);
      streamTokenizer0.ordinaryChar((-1624));
      streamTokenizer0.whitespaceChars((-1312), 1674);
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.711765305692349
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?bEY-N):IX^8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      jSTerm2.replaceAll(unaryOperator0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.add((Object) jSTerm3);
      Object object0 = new Object();
      jSTerm0.lastElement();
      jSTerm3.applySubstitutionT(jSSubstitution1);
      System.setCurrentTimeMillis(76L);
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      jSTerm3.removeAll(jSTerm4);
      jSTerm2.cloneT();
      jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis((-1L));
      jSTerm2.call();
      jSTerm2.call();
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm5.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "DTSH(Eb`+Vp(");
      StringReader stringReader0 = new StringReader("(;i)#/^{J@.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.add((Object) stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6582455274279546
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "cYW^?zrZcZjX!n*,txV");
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.flagLevel = 5362;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution3);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm3.forEach(consumer0);
      jSSubstitution3.cloneS();
      StringReader stringReader0 = new StringReader("A(rTx82aR,b");
      jSTerm0.equals(jSTerm2);
      JSTerm jSTerm4 = new JSTerm();
      stringReader0.skip(0L);
      JSTerm jSTerm5 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      jSTerm2.addAll((Collection) jSTerm0);
      System.setCurrentTimeMillis((-4));
      jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5089261243365537
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "cYW^?zrZcZX!n*,txV");
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElements(jSSubstitution0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) jSTerm2);
      Object object0 = new Object();
      jSTerm3.lastElement();
      assertEquals("[cYW^?zrZcZX!n*,txV, [cYW^?zrZcZX!n*,txV]]", jSTerm2.toString());
      
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution0);
      System.setCurrentTimeMillis(76L);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm1.standardizerTerm();
      jSTerm2.removeAll(jSPredicateForm0);
      jSTerm4.call();
      jSTerm2.cloneT();
      System.setCurrentTimeMillis((-1L));
      jSTerm2.call();
      JSTerm jSTerm6 = new JSTerm();
      JSTerm jSTerm7 = jSTerm2.standardizerTerm();
      assertTrue(jSTerm7.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6958363339191367
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.pollLast();
      linkedList0.push((Object) null);
      jSTerm0.addAll((Collection) linkedList0);
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.rightBrac = (-2008);
      jSTerm1.addAll((Collection) jSTerm0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      StringReader stringReader0 = new StringReader("DR*Y^2fIAK.-vk");
      jSTerm3.lastElement();
      System.setCurrentTimeMillis(76L);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm2.standardizerTerm();
      JSTerm jSTerm6 = jSTerm3.call();
      // Undeclared exception!
      try { 
        jSTerm6.matches(jSTerm5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.pollFirst();
      linkedList0.removeLastOccurrence((Object) null);
      linkedList0.pollLast();
      Object object0 = jSTerm0.clone();
      linkedList0.add(object0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = null;
      objectArray0[3] = (Object) linkedList0;
      objectArray0[4] = null;
      objectArray0[5] = (Object) jSTerm0;
      objectArray0[6] = null;
      objectArray0[7] = null;
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = null;
      objectArray1[1] = (Object) jSTerm0;
      objectArray1[2] = (Object) linkedList0;
      JSJshopVars.minus = (-554);
      linkedList0.toArray(objectArray1);
      Object object1 = new Object();
      linkedList0.push(objectArray0[1]);
      jSTerm0.addAll((Collection) linkedList0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1506719848487332
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isConstant();
      jSTerm0.isGround();
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3973985366367248
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?bEY-N):IX^8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      jSTerm2.replaceAll(unaryOperator0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.add((Object) jSTerm3);
      jSTerm0.lastElement();
      StringReader stringReader1 = new StringReader("?bEY-N):IX^8");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm3.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.set(124, "not");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 124
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7424332252546373
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?bEY-N):IX^8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      jSTerm2.replaceAll(unaryOperator0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm3);
      jSTerm0.lastElement();
      jSTerm3.applySubstitutionT(jSSubstitution0);
      System.setCurrentTimeMillis(76L);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm0.standardizerTerm();
      jSTerm3.removeAll(jSTerm5);
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm4.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7164870010602384
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "cYW^?zrZcZj!n*,txV");
      JSTerm jSTerm1 = jSTerm0.call();
      JSJshopVars.whiteSpace = 194;
      JSJshopVars.rightBrac = (-3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSPredicateForm0.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.isFunction();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution3);
      JSJshopVars.dot = (-3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution4);
      jSTerm2.removeElement("cYW^?zrZcZj!n*,txV");
      jSTerm2.standardizerTerm();
      JSJshopVars.colon = 60;
      jSSubstitution3.add((Object) jSSubstitution2);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution9.setSize(784);
      JSTerm jSTerm3 = new JSTerm();
      JSJshopVars.leftBrac = 194;
      JSJshopVars.interrogation = 194;
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution10);
      jSTerm4.isGround();
      // Undeclared exception!
      try { 
        jSTerm3.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.interrogation = 85;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(/ PYs7D6vo:Q");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.nval = (double) 889;
      streamTokenizer0.quoteChar(889);
      streamTokenizer0.quoteChar(889);
      stringReader0.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer0.sval = streamTokenizer0.sval;
      streamTokenizer0.commentChar((-9115));
      streamTokenizer1.whitespaceChars(41, 2556);
      streamTokenizer1.nval = (double) 2556;
      streamTokenizer0.parseNumbers();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5683304305687247
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      int int0 = 0;
      jSSubstitution0.insertElementAt(jSTerm0, 0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      jSTerm0.containsAll(jSSubstitution0);
      jSTerm0.makeConstant();
      jSTerm0.isFunction();
      StringReader stringReader0 = new StringReader("%p`eiGUMNm@8KN004_K");
      stringReader0.mark(0);
      jSTerm0.makeVariable();
      jSTerm0.containsAll(jSSubstitution0);
      jSTerm0.toStr();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("?bEY-N):IX^8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip(0L);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.quoteChar((-444));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      Object object0 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) streamTokenizer3);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer4);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) streamTokenizer2;
      jSTerm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.addAll((Collection<?>) jSTerm0);
      linkedList0.pollFirst();
      linkedList0.removeLastOccurrence((Object) null);
      linkedList0.pollLast();
      linkedList0.push((Object) null);
      linkedList0.addFirst(jSTerm0);
      jSTerm0.addAll((Collection) linkedList0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = null;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = null;
      jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.621582890216697
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.insertElementAt(jSTerm0, 0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      jSTerm0.containsAll(jSSubstitution0);
      jSTerm0.makeConstant();
      jSTerm0.isFunction();
      StringReader stringReader0 = new StringReader("%p`eiGUMNm@8KN004_K");
      stringReader0.mark(0);
      jSTerm0.makeVariable();
      jSTerm0.containsAll(jSSubstitution0);
      jSTerm0.toStr();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      jSTerm0.clear();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.622827904722017
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(/ PYs7D6vo:Q");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.nval = (double) 889;
      streamTokenizer0.quoteChar(889);
      streamTokenizer0.quoteChar(889);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer0.sval = streamTokenizer0.sval;
      streamTokenizer0.commentChar((-9115));
      streamTokenizer1.whitespaceChars(41, 2556);
      StringReader stringReader1 = new StringReader("expecting");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.parseNumbers();
      StringReader stringReader2 = new StringReader("%%%0");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader2);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6594031888289993
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("?bEY-N):IX^8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm3.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      jSTerm3.equals(jSTerm2);
      JSTerm jSTerm4 = new JSTerm();
      StringReader stringReader1 = new StringReader("?bEY-N):IX^8");
      jSTerm1.cloneT();
      Object object1 = jSTerm0.firstElement();
      Predicate<String> predicate0 = Predicate.isEqual(object1);
      Predicate<String> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      jSTerm4.isEmpty();
      System.setCurrentTimeMillis(41);
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm4.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.pollLast();
      linkedList0.push((Object) null);
      jSTerm0.addAll((Collection) linkedList0);
      StringReader stringReader0 = new StringReader("DR*Y2fIAK.-vk");
      jSTerm0.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.4940355237092673
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm1.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.752004859204831
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "cYW^?zrZcZX!n*,txV");
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElements(jSSubstitution0);
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      assertTrue(jSTerm3.isFunction());
      
      JSJshopVars.colon = (-3168);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("A(rTx82aR,b");
      boolean boolean0 = jSTerm0.equals(jSTerm2);
      assertNotSame(jSTerm2, jSTerm3);
      assertTrue(boolean0);
      
      JSTerm jSTerm4 = new JSTerm();
      JSJshopVars.percent = 1767;
      StringReader stringReader1 = new StringReader("A(rTx82aR,b");
      JSTerm jSTerm5 = jSTerm1.cloneT();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution2);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate0.and(predicate1);
      predicate2.or(predicate1);
      jSTerm5.removeIf(predicate2);
      assertTrue(jSTerm5.isFunction());
      assertNotSame(jSTerm5, jSTerm1);
      
      JSJshopVars.rightPar = (-3168);
      System.setCurrentTimeMillis((-3168));
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm6 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm6.applySubstitutionT(jSSubstitution4);
      assertFalse(jSTerm6.isEval());
      
      jSTerm0.print();
      assertTrue(jSTerm0.equals((Object)jSTerm3));
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6424838366385375
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.add((Object) "cYW^?zrZcZjX!n*,txV");
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution2.standarizerSubs();
      jSTerm2.toArray();
      jSTerm0.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution8.add((Object) "");
      System.setCurrentTimeMillis(0L);
      jSTerm2.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm0, jSSubstitution6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8885995049191862
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("?bEY-N):IX^8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip(0L);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.quoteChar((-444));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer1.ordinaryChar(2);
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer3.whitespaceChars(1, (-4));
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm0.containsAll(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.parseList(streamTokenizer1);
      assertTrue(jSTerm2.isConstant());
      assertEquals("[nil]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(2348L);
      System.setCurrentTimeMillis(0L);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals("?bEY-N ", stringBuffer0.toString());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4118090007716961
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.pollFirst();
      linkedList0.removeLastOccurrence((Object) null);
      linkedList0.pollLast();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = null;
      objectArray0[3] = (Object) linkedList0;
      objectArray0[4] = null;
      objectArray0[5] = (Object) jSTerm0;
      objectArray0[6] = null;
      objectArray0[7] = null;
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = null;
      objectArray1[1] = (Object) jSTerm0;
      objectArray1[2] = (Object) linkedList0;
      linkedList0.toArray(objectArray1);
      Object object0 = new Object();
      linkedList0.push(objectArray0[1]);
      StringReader stringReader0 = new StringReader(")");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      jSTerm0.parseList(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.pollLast();
      linkedList0.push((Object) null);
      jSTerm0.addAll((Collection) linkedList0);
      jSTerm0.trimToSize();
      jSTerm0.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.2437162270879734
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("expecti6g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isConstant();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm1.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.2417959414452882
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("(< PYs7D6vo:Q");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.nval = streamTokenizer0.nval;
      streamTokenizer0.quoteChar(889);
      streamTokenizer0.quoteChar(889);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.sval = null;
      streamTokenizer1.whitespaceChars(889, 889);
      System.setCurrentTimeMillis((-4));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.eolIsSignificant(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer2.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.213468927853141
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(/ PYs7D6vo:Q");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChar(889);
      streamTokenizer0.nval = (double) 889;
      streamTokenizer0.quoteChar(889);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar(34);
      streamTokenizer2.pushBack();
      streamTokenizer0.whitespaceChars(124, 798);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(124, (-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.3105624464720997
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution5);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSSubstitution0.clone();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.691578577274091
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?bEY-N):IX^8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      jSTerm2.replaceAll(unaryOperator0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.7389613522468985
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "cYW^?zrZcZj!n*,txV");
      JSTerm jSTerm1 = jSTerm0.call();
      JSJshopVars.whiteSpace = 194;
      JSJshopVars.rightBrac = (-3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSPredicateForm0.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.retainAll(jSPredicateForm0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution3);
      JSJshopVars.dot = 60;
      jSTerm2.removeElement("cYW^?zrZcZj!n*,txV");
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSJshopVars.colon = 60;
      jSTerm1.standardizerTerm();
      jSTerm3.removeAll(jSSubstitution3);
      jSTerm2.call();
      JSTerm jSTerm4 = jSTerm2.cloneT();
      JSJshopVars.rightPar = 194;
      System.setCurrentTimeMillis((-1L));
      jSTerm4.call();
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = jSTerm4.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm6);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.616765592249253
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "cYW^?zrZcZX!n*,txV");
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution3);
      String string0 = "A(rTx82aR,b";
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      int int0 = (-3168);
      JSJshopVars.colon = (-3168);
      jSTerm2.addElement(jSSubstitution3);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm3.forEach(consumer0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("A(rTx82aR,b");
      jSTerm0.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSSubstitution3.remove(62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 62
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.631607833399805
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "cYW^?zrZcZX!n*,txV");
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElements(jSSubstitution0);
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSJshopVars.colon = (-3168);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("A(rTx82aR,b");
      boolean boolean0 = jSTerm0.equals(jSTerm2);
      JSTerm jSTerm4 = new JSTerm();
      JSJshopVars.percent = 1767;
      StringReader stringReader1 = new StringReader("A(rTx82aR,b");
      JSTerm jSTerm5 = jSTerm1.cloneT();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution2);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate0.and(predicate1);
      predicate2.or(predicate1);
      jSTerm5.removeIf(predicate2);
      JSJshopVars.rightPar = (-3168);
      System.setCurrentTimeMillis((-3168));
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      boolean boolean1 = jSTerm3.equals(jSTerm5);
      assertNotSame(jSTerm5, jSTerm1);
      assertTrue(jSTerm1.isFunction());
      assertEquals("[cYW^?zrZcZX!n*,txV, [cYW^?zrZcZX!n*,txV]]", jSTerm3.toString());
      assertNotSame(jSTerm3, jSTerm2);
      assertFalse(boolean1 == boolean0);
      assertFalse(jSTerm5.isConstant());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.548194917018036
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "csW^?zrZZX!n*,yxV");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      jSTerm1.standardizerTerm();
      JSJshopVars.colon = (-3168);
      Predicate<JSTerm> predicate0 = Predicate.isEqual((Object) "csW^?zrZZX!n*,yxV");
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<JSTerm> predicate2 = predicate0.or(predicate1);
      Predicate<JSTerm> predicate3 = predicate2.and(predicate0);
      Predicate<JSTerm> predicate4 = predicate3.negate();
      jSSubstitution2.removeIf(predicate4);
      jSSubstitution2.setSize(2165);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("csW^?zrZZX!n*,yxV");
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      StringReader stringReader1 = new StringReader("csW^?zrZZX!n*,yxV");
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.7152337223641987
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.add((Object) "");
      JSTerm jSTerm1 = jSTerm0.call();
      jSSubstitution0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution2);
      jSSubstitution3.add((Object) "");
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) jSTerm1;
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution4);
      objectArray0[2] = (Object) jSSubstitution1;
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) 1214;
      objectArray0[5] = (Object) jSTerm0;
      jSSubstitution3.add((Object) "");
      objectArray0[6] = (Object) jSSubstitution3;
      objectArray0[7] = (Object) "";
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution3);
      jSSubstitution3.add((Object) null);
      jSSubstitution1.assignFailure();
      objectArray0[3] = (Object) (-950);
      jSTerm2.matches(jSTerm1, jSSubstitution1);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSJshopVars.percent = (-950);
      JSSubstitution jSSubstitution5 = jSTerm1.matches(jSTerm3, jSSubstitution4);
      assertTrue(jSSubstitution5.fail());
      assertEquals(10, jSTerm1.capacity());
      
      JSTerm jSTerm4 = jSTerm3.cloneT();
      assertTrue(jSTerm3.isFunction());
      assertTrue(jSTerm4.isFunction());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm3.isEval());
      assertEquals("[, []]", jSTerm4.toString());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.415286598287365
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution2);
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) jSTerm0;
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution4);
      jSSubstitution1.add((Object) "X_GcJ)j@Bu0Y,^");
      objectArray0[2] = (Object) jSSubstitution1;
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) 1214;
      objectArray0[5] = (Object) jSTerm0;
      objectArray0[6] = (Object) jSSubstitution3;
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      jSSubstitution3.add((Object) null);
      jSSubstitution1.assignFailure();
      objectArray0[3] = (Object) (-950);
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2, jSSubstitution2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6694351084945749
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(/ PYs7D6vo:Q");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.nval = (double) 889;
      streamTokenizer0.quoteChar(889);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ordinaryChar(3022);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.eolIsSignificant(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.resetSyntax();
      streamTokenizer3.pushBack();
      streamTokenizer0.whitespaceChars((-4), (-194));
      streamTokenizer4.pushBack();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(3022, 32);
      streamTokenizer1.whitespaceChars((-4), (-194));
      System.setCurrentTimeMillis((-779L));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer6);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.537830199413689
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      jSTerm0.add((Object) "cYW^?zrZcZX!n*,txV");
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElements(jSSubstitution0);
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm3.makeEval(true);
      jSTerm3.parallelStream();
      assertTrue(jSTerm3.isEval());
      
      JSJshopVars.colon = (-3168);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("A(rTx82aR,b");
      JSTerm jSTerm4 = new JSTerm();
      JSJshopVars.percent = 1767;
      StringReader stringReader1 = new StringReader("A(rTx82aR,b");
      jSTerm1.cloneT();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution2);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate0.and(predicate1);
      predicate2.or(predicate1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution3);
      assertTrue(jSTerm0.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5222371210080627
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "cYW^?zrZcZj!n*,txV");
      JSTerm jSTerm1 = jSTerm0.call();
      JSJshopVars.whiteSpace = 194;
      JSJshopVars.rightBrac = (-3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.isConstant();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution3);
      JSJshopVars.dot = (-3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution4);
      jSTerm2.removeElement("cYW^?zrZcZj!n*,txV");
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm3.removeElement(jSSubstitution4);
      JSJshopVars.colon = 60;
      jSSubstitution3.add((Object) jSSubstitution2);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution9.removeAll(jSSubstitution5);
      jSSubstitution9.setSize(784);
      jSTerm0.applySubstitutionT(jSSubstitution9);
      JSJshopVars.leftBrac = 194;
      JSJshopVars.interrogation = 194;
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution10);
      JSTerm jSTerm4 = new JSTerm();
      assertTrue(jSTerm4.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fq/e#|[a}U$:`aU^|v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      System.setCurrentTimeMillis(655L);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "cYW^HzrZcljX!8A,txV");
      StringReader stringReader0 = new StringReader("?bEY-N):IX^8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.print();
      StringReader stringReader1 = new StringReader("");
      StringReader stringReader2 = new StringReader("yc_GSAGfp>//|I,[_K");
      StringReader stringReader3 = null;
      try {
        stringReader3 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.2569878732860134
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nil");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertEquals(1, jSTerm1.size());
      
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean1 == boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertNotSame(jSTerm2, jSTerm0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.8537070105599445
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      System.setCurrentTimeMillis(18L);
      StringReader stringReader0 = new StringReader("?bEY-N):IX^8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip(5L);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.listIterator();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm2);
      jSTerm0.toStr();
      System.setCurrentTimeMillis((-459L));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      streamTokenizer0.lowerCaseMode(true);
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSJshopVars.leftPar = 41;
      jSTerm3.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution3);
      JSTerm jSTerm5 = jSTerm1.cloneT();
      jSTerm3.matches(jSTerm5, jSSubstitution2);
      JSTerm jSTerm6 = jSTerm3.call();
      System.setCurrentTimeMillis(5L);
      jSTerm6.isEval();
      jSTerm4.isGround();
      JSTerm jSTerm7 = null;
      try {
        jSTerm7 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) "cYW^?zrZcZjX!*?6xV");
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(0L);
      jSTerm0.makeVariable();
      jSSubstitution3.clone();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      System.setCurrentTimeMillis((-27L));
      boolean boolean0 = jSTerm0.isVariable();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6107334121088384
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.add((Object) "");
      JSTerm jSTerm1 = jSTerm0.call();
      jSSubstitution0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution2);
      jSTerm1.isVariable();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) jSTerm1;
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution4);
      jSSubstitution1.add((Object) "X_GcJ)j@Bu0Y,^");
      objectArray0[2] = (Object) jSSubstitution1;
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) 1214;
      objectArray0[5] = (Object) jSTerm0;
      jSSubstitution3.add((Object) "");
      objectArray0[6] = (Object) jSSubstitution3;
      objectArray0[7] = (Object) "";
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution3);
      jSSubstitution3.add((Object) null);
      jSSubstitution1.assignFailure();
      objectArray0[3] = (Object) (-950);
      jSTerm2.matches(jSTerm1, jSSubstitution1);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm0.matches(jSTerm3, jSSubstitution2);
      jSTerm2.cloneT();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution5);
      assertEquals("[, []]", jSTerm0.toString());
      assertTrue(jSTerm0.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3093517394969356
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parallelStream();
      jSTerm0.add((Object) "cYW^HzrZcljX!8A,txV");
      StringReader stringReader0 = new StringReader("(;i)#/^{J@.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.resetSyntax();
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.pushBack();
      streamTokenizer3.nval = 0.0;
      streamTokenizer2.whitespaceChars((-4), (-697));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.whitespaceChars(478, (-4));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.5505340983045857
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "cYW^?zrZcZX!n*,txV");
      StringReader stringReader0 = new StringReader("cYW^?zrZcZX!n*,txV");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElements(jSSubstitution0);
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      JSTerm jSTerm3 = new JSTerm();
      Object object0 = jSTerm2.clone();
      jSTerm3.add(object0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm5 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution3 = jSSubstitution2.cloneS();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm5.containsAll(jSTerm4);
      jSTerm1.equals(jSTerm4);
      JSTerm jSTerm6 = new JSTerm();
      jSSubstitution1.clear();
      StringReader stringReader1 = new StringReader("mBfC6$wu");
      JSTerm jSTerm7 = new JSTerm();
      jSTerm2.firstElement();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "%%%");
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.and(predicate0);
      predicate1.or(predicate2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm6.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.650313084897343
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.addAll((Collection) jSTerm0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm1.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm1);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.matches(jSTerm4);
      JSTerm jSTerm6 = jSTerm1.standardizerTerm();
      int int0 = 1;
      jSTerm6.matches(jSTerm3);
      JSTerm jSTerm7 = null;
      try {
        jSTerm7 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.9024533308450557
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("cYW^?zrZcZjX!n*,txV");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?Hf2:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("[?%%%]", jSTerm0.toString());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.retainAll(jSSubstitution0);
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.9707298482199227
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      System.setCurrentTimeMillis(655L);
      StringReader stringReader0 = new StringReader("?bEY-N):IX^8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm2.replaceAll(unaryOperator0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.add((Object) jSTerm3);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "?bEY-N):IX^8";
      Object object1 = jSTerm0.lastElement();
      objectArray0[1] = object1;
      objectArray0[3] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution1);
      System.setCurrentTimeMillis(76L);
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = jSTerm0.standardizerTerm();
      jSTerm3.removeAll(jSTerm6);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.assignFailure();
      jSTerm4.matches(jSTerm1, jSSubstitution1);
      jSTerm0.standardizerTerm();
      jSTerm0.matches(jSTerm4, jSSubstitution0);
      assertEquals("[[]]", jSTerm0.toString());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "cYW^HzrZcljX!8A,txV";
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.8602694272780225
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?bEY-N):IX^8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.commentChar((-2));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.resetSyntax();
      streamTokenizer1.ordinaryChar(0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar(62);
      streamTokenizer5.pushBack();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer4.whitespaceChars(547, (-4));
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer8);
      assertEquals(41, streamTokenizer8.ttype);
      assertEquals("[., [?bEY-N], [nil]]", jSTerm1.toString());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.pollFirst();
      linkedList0.removeLastOccurrence((Object) null);
      linkedList0.pollLast();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = null;
      objectArray0[3] = (Object) linkedList0;
      objectArray0[4] = null;
      objectArray0[5] = (Object) jSTerm0;
      objectArray0[6] = null;
      objectArray0[7] = null;
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = null;
      objectArray1[1] = (Object) jSTerm0;
      objectArray1[2] = (Object) linkedList0;
      linkedList0.toArray(objectArray1);
      Object object0 = new Object();
      linkedList0.push(objectArray0[1]);
      jSTerm0.addAll((Collection) linkedList0);
      StringReader stringReader0 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      JSJshopVars.whiteSpace = 3148;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      // Undeclared exception!
      try { 
        jSSubstitution0.subList(3148, 3148);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3148
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.pollFirst();
      JSJshopVars.dot = 39;
      linkedList0.removeLastOccurrence((Object) null);
      linkedList0.pollLast();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = null;
      objectArray0[3] = (Object) linkedList0;
      objectArray0[4] = null;
      objectArray0[5] = (Object) jSTerm0;
      objectArray0[6] = null;
      objectArray0[7] = null;
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = null;
      objectArray1[1] = (Object) jSTerm0;
      objectArray1[2] = (Object) linkedList0;
      linkedList0.toArray(objectArray1);
      Object object0 = new Object();
      linkedList0.push(objectArray0[1]);
      System.setCurrentTimeMillis((-1522L));
      System.setCurrentTimeMillis(1171L);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = linkedList0.pollLast();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = null;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = null;
      linkedList0.toArray(objectArray0);
      Object object1 = new Object();
      linkedList0.push(object0);
      jSTerm0.addAll((Collection) linkedList0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.quoteChar((-4));
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.sval = null;
      streamTokenizer2.eolIsSignificant(false);
      streamTokenizer1.whitespaceChars((-4), (-4));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.6573186405438316
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "cYW^HzrZcljX!8A,txV");
      StringReader stringReader0 = new StringReader("(;i)#/^{J@.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.resetSyntax();
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.pushBack();
      streamTokenizer3.nval = 0.0;
      streamTokenizer2.whitespaceChars((-4), (-697));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.whitespaceChars(478, (-4));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.4863125658959901
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("?bEY-N):IX^8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip(0L);
      int int0 = (-444);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.quoteChar((-444));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer1.whitespaceChars((-2), (-4));
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer2.whitespaceChars((-2), (-3772));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer3);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Q.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.quoteChar((-4));
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.slashStarComments(false);
      streamTokenizer1.sval = null;
      streamTokenizer2.eolIsSignificant(false);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer1.ordinaryChar(62);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6288922115877589
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.quoteChar((-4));
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer2.pushBack();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.ordinaryChar(4);
      streamTokenizer5.pushBack();
      streamTokenizer0.whitespaceChars((-697), (-1));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer5.whitespaceChars(2770, 478);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.3093517394969356
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "DTSH(Eb`+Vp(");
      StringReader stringReader0 = new StringReader("(;i)#/^{J@.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.pushBack();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.resetSyntax();
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer2.pushBack();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ttype = (-4);
      streamTokenizer3.ordinaryChar(4);
      streamTokenizer1.parseNumbers();
      streamTokenizer4.pushBack();
      streamTokenizer3.nval = 0.0;
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.nval = (double) (-697);
      streamTokenizer3.nval = 0.0;
      streamTokenizer2.whitespaceChars((-4), (-697));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nval = 0.0;
      streamTokenizer5.whitespaceChars(478, (-4));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChar((-2728));
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.quoteChar((-4));
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.sval = null;
      streamTokenizer2.eolIsSignificant(false);
      streamTokenizer1.whitespaceChars((-4), (-4));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
