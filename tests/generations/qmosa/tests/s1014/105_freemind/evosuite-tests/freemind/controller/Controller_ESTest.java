/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 03:39:16 GMT 2019
 */

package freemind.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import freemind.controller.Controller;
import freemind.main.FreeMindMain;
import freemind.modes.mindmapmode.MindMapMode;
import freemind.modes.schememode.SchemeMode;
import freemind.preferences.FreemindPropertyListener;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import javax.swing.Box;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JViewport;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.UserAgentAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import plugins.collaboration.database.DatabaseStarter;
import plugins.map.MapDialog;
import plugins.map.MapNodePositionHolder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Controller_ESTest extends Controller_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SchemeMode schemeMode0 = new SchemeMode();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0);
      StringContent stringContent0 = new StringContent();
      UserAgentAdapter userAgentAdapter1 = new UserAgentAdapter();
      BridgeContext bridgeContext1 = new BridgeContext(userAgentAdapter1);
      schemeMode0.getController();
      Controller.CloseAction controller_CloseAction0 = null;
      try {
        controller_CloseAction0 = new Controller.CloseAction((Controller) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller$CloseAction", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FreemindPropertyListener freemindPropertyListener0 = null;
      Controller.addPropertyChangeListener((FreemindPropertyListener) null);
      int int0 = (-2427);
      JViewport jViewport0 = new JViewport();
      Controller.DisposeOnClose controller_DisposeOnClose0 = new Controller.DisposeOnClose();
      ComponentEvent componentEvent0 = new ComponentEvent(jViewport0, (-304));
      // Undeclared exception!
      try { 
        controller_DisposeOnClose0.componentHidden(componentEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JViewport cannot be cast to java.awt.Window
         //
         verifyException("freemind.controller.Controller$DisposeOnClose", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JTableHeader jTableHeader0 = new JTableHeader();
      Color color0 = Color.pink;
      color0.darker();
      FocusEvent focusEvent0 = new FocusEvent(jTableHeader0, 2729, false);
      DatabaseStarter databaseStarter0 = new DatabaseStarter();
      DatabaseStarter databaseStarter1 = new DatabaseStarter();
      focusEvent0.getOppositeComponent();
      focusEvent0.getOppositeComponent();
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      metalTreeUI0.getPreferredMinSize();
      Box.Filler box_Filler0 = new Box.Filler((Dimension) null, (Dimension) null, (Dimension) null);
      focusEvent0.setSource((Object) null);
      Controller.DisposeOnClose controller_DisposeOnClose0 = new Controller.DisposeOnClose();
      // Undeclared exception!
      try { 
        controller_DisposeOnClose0.componentHidden(focusEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller$DisposeOnClose", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Controller controller0 = null;
      try {
        controller0 = new Controller((FreeMindMain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Controller.getPropertyChangeListeners();
      Controller.Closer controller_Closer0 = new Controller.Closer();
      MapDialog mapDialog0 = new MapDialog();
      mapDialog0.getMapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.nodeVisibilityChanged((MapNodePositionHolder) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.MapDialog", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JColorChooser jColorChooser0 = Controller.getCommonJColorChooser();
      MindMapMode mindMapMode0 = new MindMapMode();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jColorChooser0;
      objectArray0[2] = (Object) jColorChooser0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) mindMapMode0;
      objectArray0[7] = (Object) mindMapMode0;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 0);
      ActionEvent actionEvent0 = new ActionEvent(defaultTableModel0, 0, (String) null, 3653);
      assertNull(actionEvent0.getActionCommand());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getDefaultClosedIcon();
      JCheckBox jCheckBox0 = new JCheckBox();
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("", (VetoableChangeListener) null);
      jCheckBox0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      StyleContext styleContext0 = new StyleContext();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jCheckBox0;
      Object object0 = new Object();
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("", (VetoableChangeListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy3 = new VetoableChangeListenerProxy("freemind.controller.Controller$PropertyAction", vetoableChangeListenerProxy2);
      JCheckBox jCheckBox1 = new JCheckBox();
      VetoableChangeListenerProxy vetoableChangeListenerProxy4 = new VetoableChangeListenerProxy("/8*k@tb;$] 7w.yO-OR", vetoableChangeListenerProxy0);
      jCheckBox0.addVetoableChangeListener(vetoableChangeListenerProxy4);
      Color color0 = Color.green;
      try { 
        Controller.showCommonJColorChooserDialog(defaultTreeCellRenderer0, "option_changes_may_require_restart", color0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
