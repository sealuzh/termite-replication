/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 03:41:35 GMT 2020
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.mindmapmode.MindMapMode;
import freemind.view.mindmapview.MultipleImage;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.ImageProducer;
import java.awt.image.MemoryImageSource;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.text.DateFormatSymbols;
import java.util.Calendar;
import java.util.Collection;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import javax.help.plaf.basic.BasicHelpUI;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.event.RowSorterEvent;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.text.DefaultCaret;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.DefaultImageHandler;
import org.apache.batik.svggen.ExtensionHandler;
import org.apache.batik.svggen.ImageHandler;
import org.apache.batik.svggen.ImageHandlerPNGEncoder;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.pdf.PDFInfo;
import org.apache.xalan.templates.ElemChoose;
import org.apache.xalan.templates.NamespaceAlias;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.apache.xml.dtm.ref.CoroutineManager;
import org.apache.xml.dtm.ref.IncrementalSAXSource_Filter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7421583343393316
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ElemChoose elemChoose0 = new ElemChoose();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(elemChoose0);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(37);
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      ExtensionHandler extensionHandler0 = sVGGeneratorContext0.getExtensionHandler();
      SVGGraphics2D.buildSVGGeneratorContext(elemChoose0, defaultImageHandler0, extensionHandler0);
      SVGGeneratorContext.createDefault(elemChoose0);
      sVGGeneratorContext0.setDOMFactory(elemChoose0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Dimension dimension0 = gridBagLayout0.minimumLayoutSize(jDayChooser0);
      dimension0.setSize((double) 13, (-2231.2893907805));
      jDayChooser0.setMaximumSize(dimension0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 90, 806L, 90, 39, 'q');
      jDayChooser0.keyPressed(keyEvent0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.684451552301395
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.CANADA;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Calendar.getAvailableCalendarTypes();
      FileSystemHandling.shouldAllThrowIOExceptions();
      stack0.removeAllElements();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack0.sort(comparator0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser_DecoratorButton0.getContainerListeners();
      jDayChooser0.getDebugGraphicsOptions();
      int int0 = JComponent.WHEN_IN_FOCUSED_WINDOW;
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setMaxDayCharacters(2);
      jDayChooser0.setMaxDayCharacters(2);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7736275476159054
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ElemChoose elemChoose0 = new ElemChoose();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(elemChoose0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMonth(13);
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      sVGGeneratorContext0.setImageHandler(defaultImageHandler0);
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      sVGGeneratorContext0.setGraphicContextDefaults(sVGGeneratorContext_GraphicContextDefaults0);
      SVGGeneratorContext.createDefault(elemChoose0);
      sVGGeneratorContext0.setDOMFactory(elemChoose0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Dimension dimension0 = gridBagLayout0.minimumLayoutSize(jDayChooser0);
      dimension0.setSize((double) 90, (-1000000.0));
      jDayChooser1.setMaximumSize(dimension0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, (-2012), 13, (-1000000), 40, 'T');
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser1.setMaxSelectableDate((Date) null);
      assertEquals(21, jDayChooser1.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9354908236014685
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.CANADA;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMonth(1699);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NamespaceAlias namespaceAlias0 = new NamespaceAlias(1699);
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGraphics2D.buildSVGGeneratorContext(namespaceAlias0, defaultImageHandler0, defaultExtensionHandler0);
      ImageHandler imageHandler0 = sVGGeneratorContext0.getImageHandler();
      SVGGraphics2D.buildSVGGeneratorContext(namespaceAlias0, imageHandler0, defaultExtensionHandler0);
      ImageHandler imageHandler1 = sVGGeneratorContext0.getImageHandler();
      SVGGraphics2D.buildSVGGeneratorContext(namespaceAlias0, imageHandler1, defaultExtensionHandler0);
      sVGGeneratorContext0.setDOMFactory(namespaceAlias0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 906, 62135596800000L, 424, 424, 'P');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMaxDayCharacters(1699);
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      jDayChooser0.setSundayForeground(systemColor0);
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertNull(jButton0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6527697871323417
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaximumSize();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      int int0 = JComponent.WHEN_IN_FOCUSED_WINDOW;
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setMaxDayCharacters((byte) (-31));
      jDayChooser0.setMaxDayCharacters((byte) (-78));
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6885063804586076
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.CANADA;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Calendar.getAvailableCalendarTypes();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser1.setForeground((Color) null);
      JDayChooser jDayChooser3 = new JDayChooser();
      JButton jButton0 = jDayChooser0.selectedDay;
      jDayChooser3.selectedDay = null;
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(false);
      jDayChooser0.setFocusTraversalKeysEnabled(true);
      jDayChooser3.setWeekOfYearVisible(true);
      jDayChooser0.getWeekdayForeground();
      jDayChooser3.drawWeeks();
      ImageHandlerPNGEncoder imageHandlerPNGEncoder0 = null;
      try {
        imageHandlerPNGEncoder0 = new ImageHandlerPNGEncoder("day", "day");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // imageDir does not exist
         //
         verifyException("org.apache.batik.svggen.AbstractImageHandlerEncoder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7499727356053123
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis((-8L));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Class<JButton> class0 = JButton.class;
      BasicHelpUI.getIcon(class0, "\"PQICa8y[J9<r");
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      menuSelectionManager0.setSelectedPath(menuElementArray0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-1610), (-1610), (-1610), 160, '*', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.setKeyCode(160);
      MultipleImage multipleImage0 = new MultipleImage(0.0);
      jDayChooser0.isDayBordersVisible();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      BasicInternalFrameUI basicInternalFrameUI0 = new BasicInternalFrameUI(jInternalFrame0);
      Dimension dimension0 = basicInternalFrameUI0.getPreferredSize(jDayChooser0);
      jDayChooser0.setMaximumSize(dimension0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "21");
      KeyEvent keyEvent0 = new KeyEvent(jInternalFrame0, 3, 3, (-1610), (-407), 'I');
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jDayChooser0, 33, 3, (-1610), 33, '*', menuElementArray0, menuSelectionManager0);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(menuKeyEvent1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setIgnoreRepaint(false);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy((String) null, vetoableChangeListener0);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.getLocale();
      jDayChooser0.initDecorations();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.initDecorations();
      int int0 = 8930;
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(8930);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Calendar.getAvailableCalendarTypes();
      boolean boolean0 = false;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Color color0 = null;
      boolean boolean1 = false;
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.setForeground((Color) null);
      JDayChooser jDayChooser3 = new JDayChooser();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(true);
      jDayChooser1.setFocusTraversalKeysEnabled(false);
      jDayChooser1.setWeekOfYearVisible(false);
      ImageHandlerPNGEncoder imageHandlerPNGEncoder0 = null;
      try {
        imageHandlerPNGEncoder0 = new ImageHandlerPNGEncoder((String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // imageDir should not be null
         //
         verifyException("org.apache.batik.svggen.AbstractImageHandlerEncoder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7421583343393316
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ElemChoose elemChoose0 = new ElemChoose();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(elemChoose0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMonth(13);
      SVGGeneratorContext sVGGeneratorContext1 = SVGGeneratorContext.createDefault(elemChoose0);
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      sVGGeneratorContext0.setImageHandler(defaultImageHandler0);
      SVGGeneratorContext.createDefault(elemChoose0);
      sVGGeneratorContext1.setDOMFactory(elemChoose0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 14, 90, 46, 90, 'a');
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.setFont((Font) null);
      jDayChooser1.initDecorations();
      assertEquals(14, jDayChooser1.getDay());
      
      jDayChooser0.setDayBordersVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.616230775360895
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange("accessories.plugins.time.JDayChooser$1", (-482), (-482));
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7329045285804874
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Dimension dimension0 = jDayChooser0.getMaximumSize();
      dimension0.setSize((-372), 2019);
      dimension0.setSize(0.0, 3097.843167249504);
      jDayChooser0.setMaximumSize(dimension0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setYear(4);
      jDayChooser0.drawWeeks();
      jDayChooser0.drawDays();
      jDayChooser0.setDay(45);
      jDayChooser0.addListeners(45);
      jDayChooser0.isDecorationBackgroundVisible();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(29, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5652530394958077
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "04%*xWhC#");
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Class<MockCalendar> class0 = MockCalendar.class;
      BasicHelpUI.getIcon(class0, "day");
      JCheckBox jCheckBox0 = new JCheckBox("day", (Icon) null);
      jDayChooser0.getTreeLock();
      jDayChooser0.init();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ElemChoose elemChoose0 = new ElemChoose();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(elemChoose0);
      jDayChooser0.setMonth(63);
      sVGGeneratorContext0.setDOMFactory(elemChoose0);
      jDayChooser0.setYearChooser((JYearChooser) null);
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      jDayChooser0.setComponentOrientation(componentOrientation0);
      jDayChooser0.setDayBordersVisible(true);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.876532317917
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis(20L);
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMonth(1699);
      NamespaceAlias namespaceAlias0 = new NamespaceAlias(1699);
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGraphics2D.buildSVGGeneratorContext(namespaceAlias0, defaultImageHandler0, defaultExtensionHandler0);
      ImageHandler imageHandler0 = sVGGeneratorContext0.getImageHandler();
      SVGGraphics2D.buildSVGGeneratorContext(namespaceAlias0, imageHandler0, defaultExtensionHandler0);
      sVGGeneratorContext0.setDOMFactory(namespaceAlias0);
      jDayChooser0.setComponentOrientation((ComponentOrientation) null);
      jDayChooser0.setEnabled(true);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      int int0 = jDayChooser1.getDay();
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertEquals(1, int0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1, 0L, 34, 142, '9');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.765686580753037
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ElemChoose elemChoose0 = new ElemChoose();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(elemChoose0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMonth(13);
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      sVGGeneratorContext0.setImageHandler(defaultImageHandler0);
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      sVGGeneratorContext0.setGraphicContextDefaults(sVGGeneratorContext_GraphicContextDefaults0);
      SVGGeneratorContext.createDefault(elemChoose0);
      sVGGeneratorContext0.setDOMFactory(elemChoose0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(13, 2820.264263089, 13, (-1184.65646875));
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      jDayChooser0.getBounds(rectangle0);
      Dimension dimension0 = jDayChooser0.getPreferredSize();
      dimension0.setSize(49.8, (-1184.65646875));
      jDayChooser0.setMaximumSize(dimension0);
      jDayChooser1.setEnabled(true);
      jDayChooser0.setYear(39);
      jDayChooser0.drawDays();
      jDayChooser1.setDay((-1184));
      jDayChooser0.drawWeeks();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser1.setDayBordersVisible(true);
      assertEquals(1, jDayChooser1.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7902488130485366
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaximumSize();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.getDebugGraphicsOptions();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMaxDayCharacters((byte)12);
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(0, color0.getBlue());
      
      jDayChooser0.setSelectableDateRange(date0, date0);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      int int0 = 10;
      ActionEvent actionEvent0 = new ActionEvent(calendar0, 10, "28");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.60348254073507
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Class<JButton> class0 = JButton.class;
      BasicHelpUI.getIcon(class0, "\"PQICa8y[J9<r");
      JCheckBox jCheckBox0 = new JCheckBox("7/<Zr^][", (Icon) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5604230937343346
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDaysInMonth();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.62460900034393
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ElemChoose elemChoose0 = new ElemChoose();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(elemChoose0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setWeekdayForeground((Color) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Point2D.Double point2D_Double0 = new Point2D.Double(0, 1.0);
      defaultCaret0.setFrameFromCenter((Point2D) point2D_Double0, (Point2D) point2D_Double0);
      jDayChooser0.removeMouseListener(defaultCaret0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1019, 1, 0, 1019, 0);
      jDayChooser0.today = (Calendar) mockGregorianCalendar0;
      jDayChooser0.getSelectedDay();
      Locale locale0 = null;
      DateFormatSymbols dateFormatSymbols0 = null;
      try {
        dateFormatSymbols0 = new DateFormatSymbols((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jMonthChooser0.isFocusable();
      jMonthChooser0.getAccessibleContext();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7130500015319496
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Class<JButton> class0 = JButton.class;
      BasicHelpUI.getIcon(class0, "\"PQICa8y[J9<r");
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      menuSelectionManager0.setSelectedPath(menuElementArray0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-1610), (-1610), (-1610), 160, '*', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.setKeyCode(160);
      MultipleImage multipleImage0 = new MultipleImage(0.0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORTED;
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.LINE_HEIGHT;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, (-1606), "1");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals((-16754012), color0.getRGB());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ElemChoose elemChoose0 = new ElemChoose();
      SVGGeneratorContext.createDefault(elemChoose0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.655880760262649
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaximumSize();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.getDebugGraphicsOptions();
      jDayChooser0.setEnabled(true);
      jDayChooser0.setYear(3181);
      jDayChooser0.drawDays();
      jDayChooser0.setDay(35);
      assertEquals(28, jDayChooser0.getDay());
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.drawWeeks();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8091943779309343
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[3];
      JMenu jMenu0 = new JMenu();
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      JPopupMenu jPopupMenu1 = new JPopupMenu();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (int) 'z';
      intArray0[2] = 0;
      intArray0[3] = 478;
      intArray0[4] = 478;
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(478, 0, intArray0, 478, 8928);
      jPopupMenu0.createImage((ImageProducer) memoryImageSource0);
      menuElementArray0[1] = (MenuElement) jPopupMenu1;
      JMenuItem jMenuItem0 = jMenu0.add("West");
      menuElementArray0[2] = (MenuElement) jMenuItem0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 478, 1567L, 478, 478, 'z', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.7136871488474132
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Class<JButton> class0 = JButton.class;
      BasicHelpUI.getIcon(class0, "\"PQICa8y[J9<r");
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      menuSelectionManager0.setSelectedPath(menuElementArray0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-1610), (-1610), (-1610), 160, '*', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.setKeyCode(160);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      BasicInternalFrameUI basicInternalFrameUI0 = new BasicInternalFrameUI(jInternalFrame0);
      Dimension dimension0 = basicInternalFrameUI0.getPreferredSize(jInternalFrame0);
      jDayChooser0.setMaximumSize(dimension0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      dimension0.width = 5;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-120), 0L, (-120), 5, '_');
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jInternalFrame0, (-120), (-2387L), 18, 5, '1', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent1);
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RY`q=Y");
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Class<String> class0 = String.class;
      BasicHelpUI.getIcon(class0, "day");
      JCheckBox jCheckBox0 = new JCheckBox("RY`q=Y", (Icon) null);
      int int0 = 13;
      // Undeclared exception!
      try { 
        jDayChooser1.add((Component) jCheckBox0, (Object) class0, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal component position
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[\"L");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaximumSize();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.getDebugGraphicsOptions();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getBaseline(95, 40);
      jDayChooser0.getAlignmentY();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.paint((Graphics) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.CANADA;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setDecorationBordersVisible(true);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.getMaxDayCharacters();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RowSorterEvent.Type.values();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardPolicy0);
      CoroutineManager coroutineManager0 = new CoroutineManager();
      IncrementalSAXSource_Filter incrementalSAXSource_Filter0 = new IncrementalSAXSource_Filter(coroutineManager0, (byte) (-31));
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      scheduledThreadPoolExecutor0.schedule((Runnable) incrementalSAXSource_Filter0, 0L, timeUnit0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy1 = new ThreadPoolExecutor.DiscardPolicy();
      threadPoolExecutor_DiscardPolicy1.rejectedExecution(incrementalSAXSource_Filter0, scheduledThreadPoolExecutor0);
      ActionEvent actionEvent0 = new ActionEvent(incrementalSAXSource_Filter0, 0, "^])k%", (byte) (-3));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xml.dtm.ref.IncrementalSAXSource_Filter cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.698009616895563
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      System.setCurrentTimeMillis(20L);
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDayBordersVisible(true);
      int int0 = 1699;
      jDayChooser0.setMonth(1699);
      NamespaceAlias namespaceAlias0 = new NamespaceAlias(1699);
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(1699);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.7419541084422874
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getPropertyChangeListeners("TX^n");
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-852), false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.focusGained(focusEvent0);
      int int0 = 2333;
      long long0 = (-817L);
      int int1 = 502;
      char char0 = 'b';
      MenuElement[] menuElementArray0 = new MenuElement[5];
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      MindMapMode mindMapMode0 = new MindMapMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-99);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getComponentListeners();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack0.sort(comparator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) set0, locale_FilteringMode0);
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.getLocale();
      jDayChooser0.setLocale(locale0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      jDayChooser0.getMaximumSize();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      jDayChooser0.getBounds(rectangle0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.5876788665337553
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      PDFInfo pDFInfo0 = new PDFInfo();
      jDayChooser0.setDecorationBackgroundVisible(false);
      pDFInfo0.getCreationDate();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      Class<RowSorterEvent.Type> class0 = RowSorterEvent.Type.class;
      BasicHelpUI.getIcon(class0, "|.yN8!");
      JCheckBox jCheckBox0 = new JCheckBox("7/<Zr^][", (Icon) null);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.CUSTOM_SPACING;
      // Undeclared exception!
      try { 
        jDayChooser0.add((Component) jCheckBox0, (Object) gVTAttributedCharacterIterator_TextAttribute0, (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_TTB);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal component position
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.7736275476159054
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ElemChoose elemChoose0 = new ElemChoose();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(elemChoose0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMonth(13);
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      sVGGeneratorContext0.setImageHandler(defaultImageHandler0);
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      sVGGeneratorContext0.setGraphicContextDefaults(sVGGeneratorContext_GraphicContextDefaults0);
      SVGGeneratorContext.createDefault(elemChoose0);
      sVGGeneratorContext0.setDOMFactory(elemChoose0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Dimension dimension0 = gridBagLayout0.minimumLayoutSize(jDayChooser0);
      dimension0.setSize((double) 90, (-1000000.0));
      jDayChooser1.setMaximumSize(dimension0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, (-2012), 13, (-1000000), 40, 'T');
      jDayChooser1.keyPressed(keyEvent0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = jDayChooser1.getMaxDayCharacters();
      assertEquals(21, jDayChooser1.getDay());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.797362550286864
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.setSubject("day");
      jDayChooser0.setDecorationBackgroundVisible(false);
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMonth(1699);
      NamespaceAlias namespaceAlias0 = new NamespaceAlias(1699);
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGraphics2D.buildSVGGeneratorContext(namespaceAlias0, defaultImageHandler0, defaultExtensionHandler0);
      sVGGeneratorContext0.setDOMFactory(namespaceAlias0);
      jDayChooser0.setComponentOrientation((ComponentOrientation) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 915, (-366L), (-2306), (-78), 'm');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.698009616895563
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      System.setCurrentTimeMillis(20L);
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMonth(1699);
      NamespaceAlias namespaceAlias0 = new NamespaceAlias(1699);
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGraphics2D.buildSVGGeneratorContext(namespaceAlias0, defaultImageHandler0, defaultExtensionHandler0);
      sVGGeneratorContext0.getImageHandler();
      sVGGeneratorContext0.setDOMFactory(namespaceAlias0);
      jDayChooser0.setComponentOrientation((ComponentOrientation) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 906, 2332L, (-3385), 1699, 'm');
      assertEquals(1, jDayChooser0.getDay());
      
      jDayChooser0.setDay(18);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }
}
