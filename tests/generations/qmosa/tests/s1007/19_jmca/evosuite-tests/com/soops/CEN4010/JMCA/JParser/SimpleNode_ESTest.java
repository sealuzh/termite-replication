/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 23:05:41 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.toString("k|ZXIP3p,L,$H4s");
      simpleNode0.identifiers = null;
      simpleNode0.identifiers = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&&");
      String string0 = "<<";
      SystemInUtil.addInputLine("<<");
      // Undeclared exception!
      try { 
        simpleNode0.toString("k|ZXIP3p,L,$H4s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9615101453376094
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtSetParent(simpleNode0);
      simpleNode0.jjtSetParent(simpleNode0);
      simpleNode0.jjtSetParent(simpleNode0);
      simpleNode0.jjtGetNumChildren();
      String string0 = "|dAdJF6Q`B0c";
      simpleNode0.toString();
      simpleNode0.jjtSetParent(simpleNode0);
      simpleNode0.jjtGetParent();
      simpleNode0.toString();
      SimpleNode simpleNode1 = (SimpleNode)simpleNode0.jjtGetParent();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode1.dump("Z\"ZuOUNOgUk", stringWriter0);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-172));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -172
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0605706572811844
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      StringWriter stringWriter0 = new StringWriter(64);
      stringWriter0.write(64);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.setIdentifier("&&");
      StringWriter stringWriter2 = new StringWriter(0);
      StringWriter stringWriter3 = new StringWriter(0);
      StringWriter stringWriter4 = new StringWriter(1321);
      JavaParser javaParser0 = new JavaParser("&&");
      Token token0 = javaParser0.token;
      simpleNode0.setIdentifier("<=");
      StringWriter stringWriter5 = new StringWriter();
      simpleNode0.dump((String) null, stringWriter1);
      assertEquals("<CompilationUnit>\n  <identifier>*amp</identifier>\n  <identifier>*le</identifier>\n</CompilationUnit>\n", stringWriter1.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("CompilationUnit : && : <=", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.696002882574327
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter(0);
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.jjtSetParent((Node) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2401);
      stringWriter0.write("GNUy\u0005Ss78b$eAbQz");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      simpleNode0.dump("TryStateme$nt", stringWriter0);
      simpleNode0.jjtAddChild((Node) null, 0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0682924484507355
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.setIdentifier("<");
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '/';
      stringWriter0.write(charArray0);
      StringWriter stringWriter1 = new StringWriter(1737);
      StringWriter stringWriter2 = stringWriter0.append('o');
      stringWriter1.flush();
      stringWriter2.write(charArray0);
      StringWriter stringWriter3 = stringWriter2.append('/');
      stringWriter2.write("Equalit$7yExpressin");
      stringWriter0.close();
      stringWriter1.close();
      stringWriter3.write(1737);
      StringWriter stringWriter4 = new StringWriter();
      StringWriter stringWriter5 = new StringWriter();
      StringWriter stringWriter6 = new StringWriter();
      simpleNode0.dump("7+@1\"PU1:32T", stringWriter1);
      stringWriter1.write("@");
      stringWriter4.write((-46160863));
      stringWriter1.write("PX#s");
      assertEquals("<VariableDeclaratorId>\n  <identifier>*lt</identifier>\n</VariableDeclaratorId>\n@PX#s", stringWriter1.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("VariableDeclaratorId : <", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6134788277392043
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("{");
      arrayList0.trimToSize();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("Ex", 0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>(0);
      arrayList0.add("k|ZX8P3p,L,$Hjs");
      simpleNode0.identifiers = arrayList0;
      ArrayList<String> arrayList2 = simpleNode0.identifiers;
      Integer integer0 = new Integer(0);
      locale_LanguageRange0.equals(integer0);
      arrayList1.add(locale_LanguageRange0);
      SystemInUtil.addInputLine("(3{r/xLjm");
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add(locale_LanguageRange0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-49);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      arrayList2.add("(3{r/xLjm");
      simpleNode0.identifiers.add("}");
      SystemInUtil.addInputLine("NXur=:Md2");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump(":2ac,(", stringWriter0);
      SimpleNode simpleNode1 = new SimpleNode((-1445));
      assertFalse(simpleNode1.equals((Object)simpleNode0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.2438228280066395
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Integer, String> function3 = unaryOperator0.compose((Function<? super Integer, ? extends String>) function1);
      function2.apply(function3);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function4 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator1.compose((Function<? super InputStream, ?>) function4);
      Function<Object, List<String>> function5 = (Function<Object, List<String>>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super String, ? extends List<String>>) function5);
      Function.identity();
      Function<Object, String> function6 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, SequenceInputStream> function7 = (Function<Object, SequenceInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function7).apply(any());
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super String, ? extends Integer>) function8);
      function1.compose((Function<? super InputStream, ?>) function1);
      Function<Object, Integer> function9 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.compose((Function<? super Integer, ? extends Integer>) function9);
      Function<Object, SequenceInputStream> function10 = unaryOperator1.andThen((Function<? super Object, ? extends SequenceInputStream>) function7);
      function10.apply(function6);
      Function.identity();
      Function.identity();
      Function.identity();
      function10.compose((Function<? super Object, ?>) unaryOperator1);
      Function.identity();
      function10.compose((Function<? super SequenceInputStream, ?>) function2);
      function3.apply((Integer) null);
      unaryOperator1.andThen((Function<? super Object, ? extends SequenceInputStream>) function10);
      Integer integer0 = new Integer(62);
      function3.apply(integer0);
      Function.identity();
      JavaParser javaParser0 = new JavaParser((String) null);
      SimpleNode simpleNode0 = new SimpleNode(62);
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump((String) null, stringWriter0);
      assertEquals("<PrimarySuffix>\n  <identifier>*ge</identifier>\n</PrimarySuffix>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString("S=>49?RG$IYTFs");
      assertEquals("S=>49?RG$IYTFsPrimarySuffix : >=", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2283766931186737
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.setIdentifier("='");
      JavaParser javaParser0 = new JavaParser("RAcXAqWi~_og+kw#!m");
      Token token0 = javaParser0.getToken(0);
      StringWriter stringWriter0 = new StringWriter(0);
      Token token1 = Token.newToken(0);
      token1.endColumn = 0;
      token0.specialToken = token1;
      token1.kind = 1080;
      token0.specialToken.next = javaParser0.token;
      token1.beginLine = 0;
      stringWriter0.write(0);
      Token token2 = Token.newToken(1080);
      token2.specialToken = javaParser0.token;
      token2.specialToken = null;
      token2.specialToken = token1.next;
      Token token3 = javaParser0.getNextToken();
      Token token4 = token3.specialToken;
      token2.specialToken.specialToken = null;
      token2.specialToken = token1;
      token2.specialToken.image = "&";
      token1.kind = 0;
      Token token5 = new Token();
      simpleNode0.setIdentifier("&");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump((String) null, stringWriter0);
      assertEquals("\u0000<CompilationUnit>\n  <identifier>='</identifier>\n  <identifier>*amp</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString((String) null);
      assertEquals("nullCompilationUnit : =' : &", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6017766353206057
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("yh,^", stringWriter0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)93;
      Object object0 = new Object();
      ArrayList<String> arrayList2 = simpleNode0.identifiers;
      Object[] objectArray0 = new Object[2];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) (byte)93;
      arrayList2.toArray(objectArray0);
      arrayList2.add("<");
      SystemInUtil.addInputLine("<");
      SystemInUtil.addInputLine("p[");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("NXur=:Md2", stringWriter0);
      assertEquals("<InstanceOfExpression>\n  <identifier>*lt</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6200155105291458
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("w");
      arrayList0.trimToSize();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("Ex", 0);
      locale_LanguageRange0.equals((Object) null);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList0.add("<=");
      arrayList1.add(locale_LanguageRange0);
      arrayList1.retainAll(linkedList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      locale_LanguageRange0.equals(linkedList0);
      arrayList1.add(locale_LanguageRange0);
      SystemInUtil.addInputLine("w");
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.identifiers = arrayList0;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      linkedList1.add(locale_LanguageRange0);
      simpleNode0.identifiers.add("njM_QR");
      arrayList0.add("WCl[<#L/");
      SystemInUtil.addInputLine("&'k4ay[`&3qQs");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("w", stringWriter0);
      SimpleNode simpleNode1 = new SimpleNode(0);
      assertFalse(simpleNode1.equals((Object)simpleNode0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.8053415898278653
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      arrayList0.trimToSize();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("Ex", 0);
      linkedList0.add(locale_LanguageRange0);
      locale_LanguageRange0.equals((Object) null);
      linkedList0.add(locale_LanguageRange0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      linkedList0.offerFirst(locale_LanguageRange0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      arrayList1.add(locale_LanguageRange0);
      arrayList1.retainAll(linkedList1);
      arrayList1.add(locale_LanguageRange0);
      locale_LanguageRange0.equals(linkedList1);
      MockFile mockFile0 = new MockFile("Ex", "1f1#ZDDx5YwFy%");
      ArrayList<String> arrayList2 = simpleNode0.identifiers;
      arrayList2.add(";");
      arrayList0.ensureCapacity(0);
      SystemInUtil.addInputLine("<<");
      SystemInUtil.addInputLine("dD,]j.q)=JbQGCEIS)");
      StringWriter stringWriter0 = new StringWriter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("!ls\\'Npv");
      FileSystemHandling.createFolder(evoSuiteFile0);
      SimpleNode simpleNode1 = new SimpleNode(1584);
      simpleNode0.dump("{", stringWriter0);
      assertEquals("<CompilationUnit>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.109265744154189
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(22);
      Node node0 = null;
      simpleNode0.jjtAddChild((Node) null, 3934);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      simpleNode0.toString();
      int int0 = 524;
      String string0 = "\",\"";
      simpleNode0.setIdentifier("\",\"");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump(";`u_", stringWriter0);
      stringWriter0.write(159);
      simpleNode0.dump("", stringWriter0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      // Undeclared exception!
      simpleNode0.dump("MethodDeclarator", stringWriter1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3397771104125353
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.setIdentifier("");
      JavaParser javaParser0 = new JavaParser("RAcXAqWi~_og+kw#!m");
      Token token0 = Token.newToken(0);
      StringWriter stringWriter0 = new StringWriter(0);
      Token token1 = Token.newToken(0);
      token1.beginLine = 0;
      token1.endColumn = 0;
      token1.endColumn = 0;
      token0.specialToken = token1;
      token0.specialToken = token1;
      token0.image = "VariableDeclaratorId";
      token0.specialToken.beginColumn = 0;
      stringWriter0.write(0);
      Token token2 = Token.newToken(0);
      token2.kind = 98;
      token2.beginColumn = 0;
      token1.beginLine = 488;
      Token token3 = new Token();
      simpleNode0.dump("RAcXAqWi~_og+kw#!m", stringWriter0);
      assertEquals("\u0000<CompilationUnit>\n</CompilationUnit>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("CompilationUnit : ", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.233504898246879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(0);
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.setIdentifier("=");
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      StringWriter stringWriter5 = new StringWriter();
      JavaParser javaParser0 = new JavaParser("*ge");
      Token token0 = javaParser0.token;
      MockFile mockFile0 = new MockFile(")cAcSU=}Wh");
      mockFile0.delete();
      MockFile mockFile1 = new MockFile("*amp", "\"for\"");
      MockFile mockFile2 = new MockFile("-~b'/Vt1!Un,4F^", "3!6NA");
      SimpleNode simpleNode1 = new SimpleNode(1275);
      simpleNode0.setIdentifier(">>");
      simpleNode0.dump(")cAcSU=}Wh", stringWriter3);
      assertEquals("<CompilationUnit>\n  <identifier>=</identifier>\n  <identifier>*rshft</identifier>\n</CompilationUnit>\n", stringWriter3.toString());
      
      String string0 = simpleNode0.toString("*ge");
      assertEquals("*geCompilationUnit : = : >>", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.2283766931186737
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.setIdentifier("='");
      JavaParser javaParser0 = new JavaParser("RAcXAqWi~_og+kw#!m");
      Token token0 = javaParser0.getToken(0);
      StringWriter stringWriter0 = new StringWriter(0);
      Token token1 = Token.newToken(0);
      token1.beginLine = (-14);
      token1.endColumn = 0;
      token0.specialToken = token1;
      token1.kind = 0;
      stringWriter0.write(0);
      Token.newToken(0);
      Token token2 = new Token();
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump((String) null, stringWriter0);
      assertEquals("\u0000<CompilationUnit>\n  <identifier>='</identifier>\n  <identifier>*gt</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString("W:PFMISh[qP;8fk");
      assertEquals("W:PFMISh[qP;8fkCompilationUnit : =' : >", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Integer, String> function3 = unaryOperator0.compose((Function<? super Integer, ? extends String>) function1);
      function2.apply(function3);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function4 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator1.compose((Function<? super InputStream, ?>) function4);
      Function<Object, List<String>> function5 = (Function<Object, List<String>>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super String, ? extends List<String>>) function5);
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, SequenceInputStream> function6 = (Function<Object, SequenceInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function8 = function2.andThen((Function<? super String, ? extends Integer>) function7);
      function1.compose((Function<? super InputStream, ?>) function1);
      Function<Object, Integer> function9 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      SimpleNode simpleNode0 = new SimpleNode((-1085407416));
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) function9;
      objectArray0[1] = (Object) function8;
      arrayList0.toArray(objectArray0);
      arrayList0.add("");
      arrayList0.ensureCapacity((-1085407416));
      SystemInUtil.addInputLine("}");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump("", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4477688673683726
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      String string0 = "\"goto\"";
      simpleNode0.toString("TypeParameters");
      simpleNode0.setIdentifier("\"goto\"");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("", stringWriter0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      String string1 = "\"for\"";
      arrayList0.add("\"for\"");
      simpleNode0.jjtOpen();
      stringWriter0.write((-2366));
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-2366));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.002663334987299
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("w");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      arrayList0.trimToSize();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      SystemInUtil.addInputLine("w");
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      arrayList0.add("k|ZXILP3p,L,$H4s");
      arrayList0.add("njM_QR");
      simpleNode0.identifiers = arrayList0;
      simpleNode0.identifiers.add("Ex");
      arrayList0.ensureCapacity(0);
      SystemInUtil.addInputLine("&'k4ay[`&3qQs");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("i4+`Vsf3A7L4T~9~\"h", stringWriter0);
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode1.jjtAddChild(simpleNode0, 0);
      simpleNode1.jjtGetChild(0);
      assertEquals(1, simpleNode1.jjtGetNumChildren());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)105;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-140));
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 648);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = (-1074787338);
      SimpleNode simpleNode0 = new SimpleNode((-1074787338));
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode0, (-1074787338));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(33);
      StringReader stringReader0 = new StringReader("=");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 112);
      simpleNode0.jjtSetParent(simpleNode1);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
      
      Node node0 = simpleNode0.jjtGetParent();
      assertNotNull(node0);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.140016795854641
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtGetParent();
      simpleNode0.identifiers = null;
      simpleNode0.jjtAddChild((Node) null, 0);
      int int0 = 2856;
      SimpleNode simpleNode1 = new SimpleNode(2856);
      simpleNode1.id = 2856;
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('G');
      stringWriter1.flush();
      simpleNode0.parent = null;
      String string0 = "</identifier>";
      simpleNode1.dump("</identifier>", stringWriter1);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtSetParent((Node) null);
      simpleNode1.jjtGetNumChildren();
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.id = (-1794);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("ArrayDimsAndInits", "TQi.k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"TQi.k\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter(739);
      simpleNode0.jjtAddChild((Node) null, 51);
      simpleNode0.jjtGetNumChildren();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(739);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 739
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtGetParent();
      simpleNode0.identifiers = null;
      simpleNode0.jjtAddChild((Node) null, 0);
      SimpleNode simpleNode1 = new SimpleNode(2856);
      simpleNode1.id = 2856;
      simpleNode1.parent = (Node) simpleNode0;
      simpleNode1.identifiers = null;
      simpleNode0.jjtSetParent(simpleNode1);
      simpleNode0.jjtSetParent(simpleNode1);
      simpleNode1.jjtSetParent(simpleNode0);
      simpleNode1.jjtGetNumChildren();
      // Undeclared exception!
      try { 
        simpleNode0.setIdentifier("|dAdJF6Q`B0c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      simpleNode0.jjtClose();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)72;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1813, (byte)72);
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (byte)10);
      SimpleNode simpleNode1 = new SimpleNode(482);
      simpleNode0.jjtAddChild(simpleNode1, 482);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(483, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6061920506332319
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("{");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      arrayList0.trimToSize();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("Ex", 0);
      linkedList0.add(locale_LanguageRange0);
      linkedList0.add(locale_LanguageRange0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      linkedList0.offerFirst(locale_LanguageRange0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>(0);
      arrayList0.add("k|ZXIP3p,L,$H4s");
      linkedList0.add(locale_LanguageRange0);
      simpleNode0.identifiers = arrayList0;
      arrayList0.add((String) null);
      ArrayList<String> arrayList2 = simpleNode0.identifiers;
      arrayList2.add("NXur=:Md2");
      arrayList2.ensureCapacity((-1085407416));
      SystemInUtil.addInputLine("k|ZXIP3p,L,$H4s");
      SystemInUtil.addInputLine("FieltDeclaration");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump("p(18Y2(@M|i1ChadI", stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnaryOperator.identity();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, List<String>> function0 = (Function<Object, List<String>>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      Function<Object, SequenceInputStream> function1 = (Function<Object, SequenceInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, SequenceInputStream> function3 = unaryOperator0.andThen((Function<? super Object, ? extends SequenceInputStream>) function1);
      Function.identity();
      Function.identity();
      Function.identity();
      Function<Object, SequenceInputStream> function4 = function3.compose((Function<? super Object, ?>) unaryOperator0);
      function3.apply(function4);
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, SequenceInputStream> function6 = unaryOperator0.andThen((Function<? super Object, ? extends SequenceInputStream>) function3);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends SequenceInputStream>) function6);
      Integer integer0 = new Integer(62);
      Function.identity();
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader("}");
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, (-1023));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Integer, String> function3 = unaryOperator0.compose((Function<? super Integer, ? extends String>) function1);
      function2.apply(function3);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function4 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator1.compose((Function<? super InputStream, ?>) function4);
      Function<Object, List<String>> function5 = (Function<Object, List<String>>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.andThen((Function<? super String, ? extends List<String>>) function5);
      Function<Integer, Integer> function6 = Function.identity();
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      Function<Object, Integer> function8 = function1.andThen((Function<? super String, ? extends Integer>) function7);
      function4.compose((Function<? super InputStream, ?>) function2);
      Function<Integer, String> function9 = function3.compose((Function<? super Integer, ? extends Integer>) function6);
      Function<Object, SequenceInputStream> function10 = (Function<Object, SequenceInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function10).apply(any());
      Function<Object, SequenceInputStream> function11 = unaryOperator1.andThen((Function<? super Object, ? extends SequenceInputStream>) function10);
      Function<Object, SequenceInputStream> function12 = unaryOperator1.andThen((Function<? super Object, ? extends SequenceInputStream>) function11);
      function11.apply(function1);
      Function.identity();
      Function.identity();
      Function.identity();
      function8.andThen((Function<? super Integer, ? extends String>) function3);
      function11.apply(function3);
      function11.compose((Function<? super Object, ?>) function12);
      function12.compose((Function<? super SequenceInputStream, ?>) function8);
      function3.apply((Integer) null);
      unaryOperator1.andThen((Function<? super Object, ? extends SequenceInputStream>) function12);
      Integer integer0 = new Integer((-1111285243));
      function9.apply((Integer) null);
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode((-2936));
      // Undeclared exception!
      try { 
        simpleNode0.toString((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2936
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-1310));
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      Node node0 = simpleNode0.jjtGetChild(0);
      assertEquals(7, node0.jjtGetNumChildren());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-1310));
      Node[] nodeArray0 = new Node[7];
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      Node node0 = simpleNode0.jjtGetChild(0);
      assertNull(node0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5890216965316937
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtAddChild((Node) null, 0);
      int int0 = 739;
      StringWriter stringWriter0 = new StringWriter(739);
      simpleNode0.dump("g^tZv\".oyG'M", stringWriter0);
      StringWriter stringWriter1 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.jjtSetParent((Node) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0504696471801742
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("{");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      arrayList0.trimToSize();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("Ex", 0);
      linkedList0.add(locale_LanguageRange0);
      locale_LanguageRange0.equals((Object) null);
      linkedList0.add(locale_LanguageRange0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      linkedList0.offerFirst(locale_LanguageRange0);
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      SystemInUtil.addInputLine("{");
      arrayList0.add("k|ZXIP3p,L,$H4s");
      linkedList0.add(locale_LanguageRange0);
      simpleNode0.identifiers = arrayList0;
      arrayList0.add("k|ZXIP3p,L,$H4s");
      arrayList0.ensureCapacity((-1085407416));
      SystemInUtil.addInputLine("{");
      SystemInUtil.addInputLine("&'k4ay[`&3qQs");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("i4+`Vsf3A7L4T~9~\"h", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>k|ZXIP3p,L,$H4s</identifier>\n  <identifier>k|ZXIP3p,L,$H4s</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString("{");
      assertEquals("{CompilationUnit : { : k|ZXIP3p,L,$H4s : k|ZXIP3p,L,$H4s", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("{");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("Ex", 0);
      linkedList0.add(locale_LanguageRange0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      arrayList0.add("k|ZXIP3p,L,$H4s");
      linkedList0.add(locale_LanguageRange0);
      simpleNode0.identifiers = arrayList0;
      arrayList0.add("k|ZXIP3p,L,$H4s");
      arrayList0.ensureCapacity((-1085407416));
      SystemInUtil.addInputLine("{");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SystemInUtil.addInputLine("&'k4ay[`_&3qQs");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("i4+`Vsf3A7L4T~9~\"h", stringWriter0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("QN/", "&'k4ay[`_&3qQs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"&'k4ay[`_&3qQs\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.8480029084466802
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      Node[] nodeArray0 = new Node[7];
      Node node0 = simpleNode0.parent;
      nodeArray0[0] = null;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "n?^3YO6<J04";
      simpleNode0.dump(string0, stringWriter0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-6262915));
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      // Undeclared exception!
      try { 
        simpleNode0.dump("PX]4i*ni24N=vB8B!", (Writer) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E");
      JavaParser javaParser0 = new JavaParser("E");
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser1, (-1995617199));
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.437973641118805
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-67));
      int int0 = 3133;
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Integer, String> function3 = unaryOperator0.compose((Function<? super Integer, ? extends String>) function1);
      function2.apply(function3);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function4 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator1.compose((Function<? super InputStream, ?>) function4);
      Function<Object, List<String>> function5 = (Function<Object, List<String>>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super String, ? extends List<String>>) function5);
      Function.identity();
      Function<Object, String> function6 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, SequenceInputStream> function7 = (Function<Object, SequenceInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function7).apply(any());
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super String, ? extends Integer>) function8);
      function1.compose((Function<? super InputStream, ?>) function1);
      Function<Object, Integer> function9 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.compose((Function<? super Integer, ? extends Integer>) function9);
      Function<Object, SequenceInputStream> function10 = unaryOperator1.andThen((Function<? super Object, ? extends SequenceInputStream>) function7);
      function10.apply(function6);
      Function.identity();
      Function.identity();
      Function.identity();
      function10.compose((Function<? super Object, ?>) unaryOperator1);
      Function.identity();
      function10.compose((Function<? super SequenceInputStream, ?>) function2);
      function3.apply((Integer) null);
      unaryOperator1.andThen((Function<? super Object, ? extends SequenceInputStream>) function10);
      Function.identity();
      StringWriter stringWriter0 = new StringWriter();
      JavaParser javaParser0 = new JavaParser((Reader) null);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-120958784));
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -120958784
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }
}
