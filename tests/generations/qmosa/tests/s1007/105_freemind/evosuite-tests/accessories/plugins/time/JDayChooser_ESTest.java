/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 01:00:16 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMindApplet;
import freemind.main.FreeMindMain;
import freemind.modes.ModeController;
import freemind.modes.browsemode.BrowseMapModel;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.common.plugins.MapNodePositionHolderBase;
import freemind.modes.mindmapmode.MindMapMode;
import freemind.modes.schememode.SchemeMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.ComponentColorModel;
import java.beans.PropertyChangeListener;
import java.sql.Timestamp;
import java.text.ParseException;
import java.time.temporal.Temporal;
import java.util.Date;
import java.util.Locale;
import java.util.Vector;
import javax.help.plaf.basic.BasicHelpUI;
import javax.swing.AbstractButton;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.plaf.metal.MetalLabelUI;
import javax.swing.text.DefaultCaret;
import javax.swing.text.StyledEditorKit;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.ExtensionHandler;
import org.apache.batik.svggen.ImageHandler;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xerces.impl.dtd.DTDGrammar;
import org.apache.xerces.impl.dtd.XMLDTDDescription;
import org.apache.xerces.impl.xs.SchemaGrammar;
import org.apache.xerces.parsers.CachingParserPool;
import org.apache.xerces.util.SymbolTable;
import org.apache.xerces.util.XMLGrammarPoolImpl;
import org.apache.xerces.xni.grammars.XMLGrammarDescription;
import org.apache.xerces.xni.grammars.XMLGrammarPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.w3c.dom.Document;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2358253639551506
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setSize((-922), (-922));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.getDay();
      jDayChooser0.initDecorations();
      jDayChooser0.getSundayForeground();
      Locale locale0 = Locale.UK;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.getGreatestMinimum(14);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockGregorianCalendar0.setFirstDayOfWeek((-922));
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar(mockGregorianCalendar0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.143643204222251
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getToolTipText();
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser0.setDoubleBuffered(true);
      jDayChooser1.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser1.getMaxDayCharacters());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1247934888088933
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl(2992);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      MockSimpleDateFormat mockSimpleDateFormat1 = new MockSimpleDateFormat();
      MockDate mockDate0 = new MockDate(2992, 2992, 2992, 2992, 2992, 2992);
      BrowseMode browseMode0 = new BrowseMode();
      MockDate mockDate1 = new MockDate((-1582), 9999, 841, (-1622), 841, (-1622));
      jDayChooser0.setSelectableDateRange(mockDate1, (Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2050253724772264
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = AbstractButton.TEXT_CHANGED_PROPERTY;
      JTable jTable0 = new JTable();
      KeyEvent keyEvent0 = new KeyEvent(jTable0, (-1718), (-1718), (-1718), (-1718), '^');
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent1 = new KeyEvent(jTable0, (-1001), (-2761), 40, (-1001), '^');
      jDayChooser0.keyPressed(keyEvent1);
      jDayChooser0.setDay((-1718));
      SchemeMode schemeMode0 = new SchemeMode();
      StyledEditorKit.BoldAction styledEditorKit_BoldAction0 = new StyledEditorKit.BoldAction();
      jDayChooser0.setDay(0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.drawDays();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.09745574900228
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = AbstractButton.CONTENT_AREA_FILLED_CHANGED_PROPERTY;
      Object object0 = new Object();
      ActionEvent actionEvent0 = new ActionEvent(object0, (-1431655763), "Center");
      actionEvent0.setSource("accessories.plugins.time.JDayChooser$1");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2358379389334586
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.black;
      int int0 = (-727);
      color0.getColorSpace();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setForeground(color0);
      jDayChooser0.setFocus();
      MapDialog mapDialog0 = new MapDialog();
      jDayChooser0.getDecorationBackgroundColor();
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.removeContainerListener((ContainerListener) null);
      // Undeclared exception!
      try { 
        mapDialog0.getRegistration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.extensions.HookAdapter", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.15093828530084
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      System.setCurrentTimeMillis(262L);
      String string0 = AbstractButton.BORDER_PAINTED_CHANGED_PROPERTY;
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1247934888088933
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      System.setCurrentTimeMillis(12);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.PAINT_INFO;
      ActionEvent actionEvent0 = new ActionEvent("14", (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_RTL, (String) null, (long) gVTAttributedCharacterIterator_TextAttribute0.SMALL_CAPS, (int) gVTAttributedCharacterIterator_TextAttribute0.ADJUST_SPACING);
      actionEvent0.setSource((Object) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 24);
      System.setCurrentTimeMillis((long) gVTAttributedCharacterIterator_TextAttribute0.UNDERLINE_ON);
      MockDate mockDate0 = new MockDate((int) gVTAttributedCharacterIterator_TextAttribute0.UNDERLINE_ON, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_NONE, (int) gVTAttributedCharacterIterator_TextAttribute0.ADJUST_ALL, (int) gVTAttributedCharacterIterator_TextAttribute0.ADJUST_ALL, 486, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_TERMINAL);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.weekdayForeground = color0;
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2358379389334586
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.resetKeyboardActions();
      jDayChooser0.addNotify();
      jDayChooser0.setEnabled(false);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      jDayChooser0.getDayPanel();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-789), "day", (-573));
      JEditorPane jEditorPane0 = new JEditorPane();
      Color color0 = jEditorPane0.getSelectionColor();
      jDayChooser0.setSundayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 1198L, (-221), 0, '0', 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getGreatestMinimum(0);
      mockGregorianCalendar0.setLenient(false);
      keyEvent0.setSource(mockGregorianCalendar0);
      JMenu jMenu0 = new JMenu("1M4g");
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jMenu0, 11, 0L, (-321), 0, '`', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.paramString();
      mockGregorianCalendar0.clone();
      KeyEvent.getKeyText(17);
      keyEvent0.consume();
      keyEvent0.setSource(menuKeyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.KOREA;
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.08675805622068
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StyledEditorKit.BoldAction styledEditorKit_BoldAction0 = new StyledEditorKit.BoldAction();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_MEDIAL;
      ActionEvent actionEvent0 = new ActionEvent(integer0, (-612), "day", 36);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ActionEvent actionEvent1 = new ActionEvent(jDayChooser_DecoratorButton0, (-271), "Windows");
      actionEvent0.setSource(integer0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = AbstractButton.CONTENT_AREA_FILLED_CHANGED_PROPERTY;
      StyledEditorKit.BoldAction styledEditorKit_BoldAction0 = new StyledEditorKit.BoldAction();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      ActionEvent actionEvent0 = new ActionEvent(mockGregorianCalendar0, 65793, "18", 65793);
      ActionEvent actionEvent1 = new ActionEvent("18", 65793, "+");
      actionEvent1.setSource(styledEditorKit_BoldAction0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1190834887056056
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      System.setCurrentTimeMillis(262L);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.drawDays();
      jDayChooser1.setDay(1023);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-856));
      jDayChooser1.focusGained((FocusEvent) null);
      JComponent.getDefaultLocale();
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, 1023, "Oh955z", 8945);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Boolean boolean0 = new Boolean(true);
      AffineTransform.getScaleInstance((-1), (-1));
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.268189214945181
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis((-3507L));
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3461), (-3507L), (-3461), (-3461), '[');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay((-3461));
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setMinSelectableDate((Date) null);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.091803330640885
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay((-3461));
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.151027626853596
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_TERMINAL;
      integerArray0[0] = integer0;
      JList<Integer> jList0 = new JList<Integer>(integerArray0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(14);
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setMaxDayCharacters((-1085));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.164766018437543
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)29;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getColorModel();
      jDayChooser0.drawDays();
      jDayChooser0.setYear(0);
      jDayChooser0.getSundayForeground();
      jDayChooser0.setDay((byte) (-13));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1196), (byte)49, (byte) (-29), 44, '+');
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.170017960567567
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getColorModel();
      jDayChooser0.drawDays();
      jDayChooser0.setYear(0);
      jDayChooser0.getSundayForeground();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.325877091300684
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      System.setCurrentTimeMillis((-3507L));
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3461), (-3507L), (-3461), (-3461), '[');
      jDayChooser0.keyPressed(keyEvent0);
      System.setCurrentTimeMillis((-3507L));
      MockDate mockDate0 = new MockDate((-3461));
      Date date0 = jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.setMaxSelectableDate(date0);
      Timestamp timestamp0 = new Timestamp(10485760L);
      jDayChooser0.setSelectableDateRange(mockDate0, timestamp0);
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.097462582473991
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getToolTipText();
      jDayChooser0.setFocusCycleRoot(true);
      jDayChooser0.setDoubleBuffered(false);
      jDayChooser1.initDecorations();
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1336666818916004
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocale();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.initDecorations();
      JMapViewer jMapViewer0 = new JMapViewer();
      ModeController modeController0 = null;
      FreeMindMain freeMindMain0 = null;
      BrowseMapModel browseMapModel0 = null;
      try {
        browseMapModel0 = new BrowseMapModel((FreeMindMain) null, (ModeController) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.MapAdapter", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      System.setCurrentTimeMillis((-3507L));
      JDayChooser jDayChooser0 = new JDayChooser();
      Vector<Integer> vector0 = new Vector<Integer>();
      JList<Integer> jList0 = new JList<Integer>(vector0);
      Color color0 = jList0.getSelectionBackground();
      jDayChooser0.setBackground(color0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      jDayChooser0.getLocale();
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2083377530546424
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = (-221);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 1198L, (-221), 0, '0', 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getGreatestMinimum(0);
      mockGregorianCalendar0.setLenient(false);
      keyEvent0.paramString();
      KeyEvent.getKeyText(11);
      keyEvent0.setSource(mockGregorianCalendar0);
      jDayChooser0.keyPressed(keyEvent0);
      KeyEvent.getKeyText(31);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar(mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DAY_OF_MONTH: 29 -> 1
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = AbstractButton.TEXT_CHANGED_PROPERTY;
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      ImageIcon imageIcon0 = MapNodePositionHolderBase.getMapLocationIcon();
      imageIcon0.getImageObserver();
      Class<Temporal> class0 = Temporal.class;
      BasicHelpUI.getIcon(class0, "text");
      JButton jButton0 = new JButton((Icon) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.GERMANY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1483678495764296
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = AbstractButton.TEXT_CHANGED_PROPERTY;
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.ENGLISH;
      jDayChooser0.setMaxDayCharacters(37);
      jDayChooser0.setMaxDayCharacters(1);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.1756770373274956
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 1198L, (-221), 0, '0', 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setLenient(false);
      keyEvent0.paramString();
      KeyEvent.getKeyText(11);
      keyEvent0.setSource(mockGregorianCalendar0);
      jDayChooser0.keyPressed(keyEvent0);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 0, 0, 44, 13, '0');
      jDayChooser0.keyPressed(keyEvent1);
      int int0 = jDayChooser0.getDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.091803330640885
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = AbstractButton.TEXT_CHANGED_PROPERTY;
      System.setCurrentTimeMillis((-3507L));
      JDayChooser jDayChooser0 = new JDayChooser();
      SchemeMode schemeMode0 = new SchemeMode();
      StyledEditorKit.BoldAction styledEditorKit_BoldAction0 = new StyledEditorKit.BoldAction();
      jDayChooser0.setDay(0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.KOREA;
      locale0.getDisplayLanguage(locale1);
      Locale locale2 = Locale.CHINESE;
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1866881986404256
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      jDayChooser0.addPropertyChangeListener((PropertyChangeListener) metalLabelUI0);
      jDayChooser0.paintAll(pDFDocumentGraphics2D0);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(0);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      System.setCurrentTimeMillis(300000L);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-3069));
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl(3630);
      SymbolTable symbolTable0 = new SymbolTable();
      XMLDTDDescription xMLDTDDescription0 = mock(XMLDTDDescription.class, new ViolatedAssumptionAnswer());
      DTDGrammar dTDGrammar0 = new DTDGrammar(symbolTable0, xMLDTDDescription0);
      XMLGrammarDescription xMLGrammarDescription0 = dTDGrammar0.getGrammarDescription();
      xMLGrammarPoolImpl0.containsGrammar(xMLGrammarDescription0);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool1 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      MockSimpleDateFormat mockSimpleDateFormat1 = new MockSimpleDateFormat();
      try { 
        mockSimpleDateFormat1.parse("day");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"day\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.1337304777448702
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      System.setCurrentTimeMillis((-3507L));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-3461));
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl(3900);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      SchemaGrammar.BuiltinSchemaGrammar schemaGrammar_BuiltinSchemaGrammar0 = SchemaGrammar.SG_SchemaNS;
      XMLGrammarDescription xMLGrammarDescription0 = schemaGrammar_BuiltinSchemaGrammar0.getGrammarDescription();
      cachingParserPool_ShadowedGrammarPool0.equals(xMLGrammarDescription0, xMLGrammarDescription0);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool1 = new CachingParserPool.ShadowedGrammarPool(cachingParserPool_ShadowedGrammarPool0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      MockSimpleDateFormat mockSimpleDateFormat1 = new MockSimpleDateFormat();
      try { 
        mockSimpleDateFormat0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.0966532889808382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = AbstractButton.TEXT_CHANGED_PROPERTY;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInputMap();
      SystemColor systemColor0 = SystemColor.windowBorder;
      Locale locale0 = Locale.PRC;
      jDayChooser0.drawDays();
      jDayChooser0.setYear(375);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      byteArray0[2] = (byte)0;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)22;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance((-1999.62), 0.0);
      GraphicContext graphicContext0 = new GraphicContext(affineTransform0);
      affineTransform0.rotate((double) (byte)0);
      Font font0 = graphicContext0.getFont();
      jDayChooser0.setFont(font0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis((byte)75);
      jDayChooser0.setForeground(systemColor0);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((byte)75);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance(515, (byte)25);
      GraphicContext graphicContext0 = new GraphicContext(affineTransform0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(1101L);
      jDayChooser0.addListeners((byte)25);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getSundayForeground();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 450);
      jDayChooser0.focusLost(focusEvent0);
      Locale locale0 = Locale.US;
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      Locale.lookup(canvasGraphicsNode0, canvasGraphicsNode0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", locale0);
      try { 
        mockSimpleDateFormat0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYearChooser((JYearChooser) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      jDayChooser0.defaultMinSelectableDate = null;
      stringArray0[4] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      System.setCurrentTimeMillis((-1129L));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(6);
      MindMapMode mindMapMode0 = new MindMapMode();
      assertEquals("MindMap", mindMapMode0.toString());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.091803330640885
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = AbstractButton.TEXT_CHANGED_PROPERTY;
      System.setCurrentTimeMillis((-3507L));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(49);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isWeekOfYearVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.059528639351508
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = AbstractButton.CONTENT_AREA_FILLED_CHANGED_PROPERTY;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JTable jTable0 = new JTable();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance(360.0, 0.0);
      GraphicContext graphicContext0 = new GraphicContext(affineTransform0);
      affineTransform0.rotate((-1782.4033908961));
      graphicContext0.getFont();
      JTextPane jTextPane0 = new JTextPane();
      jTextPane0.modelToView(1109);
      jDayChooser0.scrollRectToVisible((Rectangle) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.128665186009052
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicScrollBarUI basicScrollBarUI0 = new BasicScrollBarUI();
      Dimension dimension0 = basicScrollBarUI0.getMaximumSize(jDayChooser0);
      dimension0.setSize(366.0, (-2916.60994242709));
      dimension0.clone();
      dimension0.height = 135;
      dimension0.height = 135;
      dimension0.setSize((-2916.60994242709), (-2916.60994242709));
      jDayChooser0.setMaximumSize(dimension0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(135);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.3027768840111857
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getToolTipText();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 760, 760, 760, 760, '\\');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0966166083347697
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.1700300170400846
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.magenta;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 981.0789F;
      jDayChooser0.getComponents();
      floatArray0[4] = 0.0F;
      Color.getColor("day", color0);
      floatArray0[5] = (-3348.0F);
      floatArray0[6] = 0.0F;
      color0.getRGBColorComponents(floatArray0);
      jDayChooser0.resetKeyboardActions();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.init();
      jDayChooser0.getSelectedDay();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      try { 
        mockSimpleDateFormat0.parse("West");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"West\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.2404282305331034
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      System.setCurrentTimeMillis((-3507L));
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3461), (-3507L), (-3461), (-3461), '[');
      keyEvent0.setKeyChar('K');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay(13);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.2308572865913234
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.removeFocusListener(defaultCaret0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.drawDays();
      jDayChooser0.setFocusCycleRoot(false);
      defaultCaret0.getUpdatePolicy();
      jDayChooser0.maxDayCharacters = 4;
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.getDayPanel();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0L, 0, 0, 'C');
      KeyEvent.getKeyModifiersText(0);
      jDayChooser0.getVisibleRect();
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.initDecorations();
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.097763814100573
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getInputMap();
      SystemColor systemColor0 = SystemColor.windowBorder;
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.setDoubleBuffered(true);
      jDayChooser1.setMaxDayCharacters(0);
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.156776391711678
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.windowBorder;
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getToolTipText();
      CachingParserPool.SynchronizedGrammarPool cachingParserPool_SynchronizedGrammarPool0 = new CachingParserPool.SynchronizedGrammarPool((XMLGrammarPool) null);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(cachingParserPool_SynchronizedGrammarPool0);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool1 = new CachingParserPool.ShadowedGrammarPool(cachingParserPool_ShadowedGrammarPool0);
      jDayChooser0.setDebugGraphicsOptions((-1095));
      Locale locale0 = Locale.ENGLISH;
      jDayChooser1.setMaxDayCharacters((-1024));
      jDayChooser1.setMaxDayCharacters(196);
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.058591591902833
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      jDayChooser0.weekOfYearVisible = false;
      jDayChooser0.setDecorationBordersVisible(false);
      int int0 = 0;
      FocusEvent focusEvent0 = null;
      try {
        focusEvent0 = new FocusEvent((Component) null, 0, true, (Component) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = AbstractButton.CONTENT_AREA_FILLED_CHANGED_PROPERTY;
      StyledEditorKit.BoldAction styledEditorKit_BoldAction0 = new StyledEditorKit.BoldAction();
      ActionEvent actionEvent0 = new ActionEvent("18", 65793, "accessories.plugins.time.JDayChooser$1");
      actionEvent0.setSource("contentAreaFilled");
      actionEvent0.setSource(styledEditorKit_BoldAction0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.086761435341095
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.windowBorder;
      jDayChooser0.setForeground(systemColor0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getToolTipText();
      CachingParserPool.SynchronizedGrammarPool cachingParserPool_SynchronizedGrammarPool0 = new CachingParserPool.SynchronizedGrammarPool((XMLGrammarPool) null);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(cachingParserPool_SynchronizedGrammarPool0);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool1 = new CachingParserPool.ShadowedGrammarPool(cachingParserPool_ShadowedGrammarPool0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      MockSimpleDateFormat mockSimpleDateFormat1 = null;
      try {
        mockSimpleDateFormat1 = new MockSimpleDateFormat(":Ehg[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'g'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.0634080210456234
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      System.setCurrentTimeMillis(423L);
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDaysInMonth();
      // Undeclared exception!
      try { 
        SVGGraphics2D.buildSVGGeneratorContext((Document) null, (ImageHandler) null, (ExtensionHandler) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // domFactory should not be null
         //
         verifyException("org.apache.batik.svggen.SVGGeneratorContext", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.1236847859261854
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInputMap();
      SystemColor systemColor0 = SystemColor.windowBorder;
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getSelectedDay();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.1677452551206233
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      System.setCurrentTimeMillis((-3507L));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(false);
      try { 
        JOptionPane.getFrameForComponent(jDayChooser0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.1339116557850115
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser1.setDoubleBuffered(false);
      jDayChooser0.setMaxDayCharacters(2);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = 23;
      jDayChooser0.setDay(23);
      Color color0 = jDayChooser0.getSundayForeground();
      ColorSpace colorSpace0 = color0.getColorSpace();
      ComponentColorModel componentColorModel0 = null;
      try {
        componentColorModel0 = new ComponentColorModel(colorSpace0, false, false, 23, 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown data type 23
         //
         verifyException("java.awt.image.DataBuffer", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.drawWeeks();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 11, 11, 11, (-4509), 'j', 1793);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Boolean boolean1 = new Boolean(false);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance((-1), (-1));
      GraphicContext graphicContext0 = new GraphicContext(affineTransform0);
      affineTransform0.rotate(49.71);
      Font font0 = graphicContext0.getFont();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFont(font0);
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
  }
}
