/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 23:44:33 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.656467906839108
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1233L, 32772L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1614L));
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder();
      Range range2 = range_Builder2.build();
      range_Builder0.build();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range3 = Range.of(range_CoordinateSystem0, (-1614L), 32772L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-128L), 1233L);
      boolean boolean0 = range3.equals(range0);
      assertFalse(boolean0);
      
      Range range4 = range1.intersection(range2);
      assertFalse(range4.isEmpty());
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertSame(range2, range4);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.5095439038220855
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1233L, 32773L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1614L));
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder();
      Range range2 = range_Builder2.build();
      range_Builder0.build();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range2.equals(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertNotSame(range2, range1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.5848936295546534
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(1012L);
      Range range1 = Range.of(range_CoordinateSystem0, 1012L, 1012L);
      range1.intersection(range0);
      range1.isEmpty();
      Range.of(1012L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 1012L, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.990479766365092
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.contractBegin(2147483647L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(2147483647L);
      Range.Builder range_Builder3 = range_Builder1.shift(2147483647L);
      Range.Builder range_Builder4 = range_Builder3.shift((-675L));
      range_Builder0.build();
      Range.Builder range_Builder5 = range_Builder1.expandBegin((-675L));
      range_Builder4.expandBegin((-675L));
      range_Builder5.build();
      range0.equals(range_Builder4);
      Range.Builder range_Builder6 = new Range.Builder(2147483646L, 2147483647L);
      Range range1 = range_Builder5.build();
      Range range2 = Range.ofLength(467L);
      range1.complement(range2);
      // Undeclared exception!
      range1.split(608L);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.86045691096395
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.endsBefore(range1);
      Range.of(4294967295L);
      range0.intersection(range1);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("7f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 7f into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.981648580151051
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.addLast(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147482408L, 2147483647L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.5086504000206076
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(9223372036854774854L);
      Object object0 = new Object();
      Long long0 = new Long(0L);
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = new Long(9223372036854774854L);
      range0.toString(range_CoordinateSystem0);
      Object object2 = new Object();
      Object object3 = new Object();
      Range range1 = Range.parseRange("[ 9223372036854774855 .. 9223372036854774855 ]/RB");
      range0.equals(range1);
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object3));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.508028540807635
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1239L);
      Range range0 = range_Builder1.build();
      range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      range_Builder1.contractBegin(75L);
      range_Builder3.build();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      Range range1 = range_Builder4.build();
      Object object0 = new Object();
      Range range2 = range_Builder0.build();
      Range.Builder range_Builder5 = new Range.Builder((-91L), 1239L);
      Object object1 = new Object();
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 2147482408L, 9223372036854775807L);
      range3.equals(range0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.6710845285246476
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(1012L);
      Range range1 = Range.of(range_CoordinateSystem0, 1012L, 1012L);
      range1.intersection(range0);
      Range.of(1012L, 1012L);
      range0.equals(range1);
      range0.equals((Object) null);
      Range range2 = Range.of(1012L);
      // Undeclared exception!
      try { 
        range2.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.63590763084783
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147482881L), (-2021L));
      Range range1 = Range.of((-2147482881L), 1455L);
      Range range2 = range0.intersection(range1);
      Long long0 = new Long((-1152L));
      range0.equals(range2);
      // Undeclared exception!
      try { 
        Range.of(1239L, (-2021L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.509262948574243
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775796L));
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
      
      Range range1 = Range.of((-9223372036854775796L));
      Range range2 = range1.intersection(range0);
      boolean boolean1 = range0.isSubRangeOf(range0);
      boolean boolean2 = range2.equals((Object) null);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=4.182876689766941
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of(1711L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-4888L), 440L);
      linkedList0.add(range1);
      Range range2 = Range.of((-1L), (-1L));
      linkedList0.addLast(range2);
      linkedList0.add(range2);
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      range2.spliterator();
      range2.endsBefore(range0);
      Range.of(127L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.829587976108078
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1239L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(2147483647L);
      range_Builder3.contractBegin(2147483647L);
      range1.equals(range0);
      Range range2 = Range.ofLength(2147483647L);
      assertFalse(range2.isEmpty());
      
      Range range3 = range0.intersection(range1);
      assertFalse(range3.isEmpty());
      
      Object object0 = new Object();
      range1.spliterator();
      range0.equals("FaVQ)u3\"hdRuz1\"rM%");
      Range.of((-3880L));
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean0 = range0.equals(object4);
      assertSame(range0, range3);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.885929453720481
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.of((-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 255L);
      Range range1 = Range.ofLength(127L);
      Range range2 = range0.intersection(range1);
      Object object0 = new Object();
      range2.equals(object0);
      //  // Unstable assertion: assertFalse(range1.equals((Object)range2));
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      range0.equals(range_CoordinateSystem0);
      Range range3 = Range.of(127L);
      //  // Unstable assertion: assertFalse(range3.equals((Object)range0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.669002809283281
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.addLast(range0);
      linkedList0.add(range0);
      range0.equals((Object) null);
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      range1.spliterator();
      range1.equals(object0);
      Range range3 = Range.of(0L);
      assertFalse(range3.isEmpty());
      
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.6725993070034875
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder0.build();
      range0.equals(range1);
      Range range2 = Range.ofLength(9223372036854775807L);
      Range range3 = range2.intersection(range1);
      Object object0 = new Object();
      range0.spliterator();
      Object object1 = new Object();
      range2.equals(object1);
      range3.startsBefore(range0);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-1287L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1287 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.5747299509492625
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      assertTrue(range1.isEmpty());
      
      Range range2 = Range.of((-1666L));
      Object object0 = new Object();
      range0.equals(range2);
      assertFalse(range0.isEmpty());
      
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range2.equals("");
      assertFalse(boolean0);
      
      Range range3 = Range.of((-920L));
      assertFalse(range3.equals((Object)range1));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.34903219069916
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147482630L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(2147482630L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Object object0 = new Object();
      range1.equals(range0);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(2147482630L, 65535L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.869614576879871
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.ofLength(2147483647L);
      Range range1 = Range.of(range_CoordinateSystem0, 599L, 599L);
      Range.of((-88L));
      Range range2 = Range.of(range_CoordinateSystem0, 599L, 599L);
      range2.intersection(range0);
      range2.equals(range1);
      range0.equals(range1);
      Range.of(2147484322L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 1152L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0221811742593516
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483649L);
      range_Builder0.contractBegin(2147483649L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean1 = range0.equals(object4);
      assertTrue(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.6011382362219595
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4222L, 2147483647L);
      range0.equals((Object) null);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 9223372036854775041L, (-9223372036854775808L));
      Range.Builder range_Builder1 = new Range.Builder(255L);
      long long0 = (-3288L);
      Range.Builder range_Builder2 = range_Builder0.contractBegin((-3288L));
      range_Builder2.build();
      Object object3 = new Object();
      Range.of(2218L);
      try { 
        Long.decode(">x0TrqdHIcc%0]<w3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \">x0TrqdHIcc%0]<w3\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.4266232952564706
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      Object object1 = new Object();
      range0.isEmpty();
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(2147483650L, 599L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.60409188634877
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-2009L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2009 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.9902104329316153
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(987L);
      Range range1 = Range.of(range_CoordinateSystem0, 987L, 987L);
      Range range2 = Range.of(range_CoordinateSystem0, 987L, 987L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range0.equals(range1);
      range0.equals(range_CoordinateSystem0);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range range3 = Range.of(2297L);
      range3.intersects(range2);
      Range range4 = Range.of(2297L);
      range1.isSubRangeOf(range0);
      range4.endsBefore(range2);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range5 = range_Builder0.build();
      range_Builder0.contractBegin(1L);
      range_Builder0.expandEnd(65535L);
      Range range6 = range_Builder0.build();
      assertFalse(range6.equals((Object)range0));
      
      Range.Builder range_Builder1 = new Range.Builder(1L, 987L);
      range_Builder0.copy();
      Range.Comparators.values();
      Range range7 = range1.intersection(range3);
      assertSame(range1, range5);
      assertTrue(range7.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.5057620350845506
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder1.shift(4294967295L);
      Range range1 = range_Builder0.build();
      Range range2 = range_Builder1.build();
      assertTrue(range2.isEmpty());
      
      boolean boolean0 = range0.equals("qqDG+gBV=r%4;zm-[Gf");
      assertSame(range0, range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.5743046216282206
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1604L);
      Range.Builder range_Builder2 = range_Builder1.contractEnd(1604L);
      range_Builder0.build();
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder3 = new Range.Builder(9223372036854775798L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      Range.Builder range_Builder5 = new Range.Builder(9223372036854775798L);
      range_Builder5.expandBegin(1604L);
      Range.Builder range_Builder6 = new Range.Builder();
      range_Builder6.expandBegin((-32769L));
      range_Builder3.build();
      range0.equals((Object) null);
      Range.Builder range_Builder7 = new Range.Builder(9223372036854775798L, (-32769L));
      assertFalse(range_Builder7.equals((Object)range_Builder2));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.4754358370685594
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147482630L);
      range_Builder0.contractBegin(1239L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range range0 = range_Builder2.build();
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(2147482630L, 1191L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.4805471685642826
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1604L);
      range_Builder1.contractEnd(1604L);
      Range range0 = range_Builder1.build();
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(9223372036854775798L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder1.copy();
      range_Builder0.contractBegin(2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.709966923581369
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(52L);
      Long long0 = new Long(52L);
      Range range1 = Range.of(29L);
      range1.spliterator();
      Object object0 = new Object();
      range0.equals(range1);
      Range range2 = Range.ofLength(52L);
      range2.complement(range1);
      range1.intersection(range2);
      Object object1 = new Object();
      range0.spliterator();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.4773725653896794
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1239L);
      Range range0 = range_Builder1.build();
      Object object0 = new Object();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(9223372036854775807L, (-9223372034707291650L));
      range_Builder3.expandBegin((-749L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.664089138283542
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), (-1165L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-613L), 420L);
      range_Builder0.contractBegin((-32768L));
      Range range2 = range_Builder0.build();
      Object object0 = new Object();
      Range range3 = Range.of((-973L));
      Range.of(range_CoordinateSystem1, (-2444L), (-873L));
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range2);
      range3.equals(range1);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-128L), (-3099L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.226347648829042
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long long0 = 716L;
      Range range0 = Range.of(716L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.7188017768890025
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(1012L);
      Range range1 = Range.of(range_CoordinateSystem0, 1012L, 1012L);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      
      range1.equals(range0);
      Range range3 = Range.ofLength(1012L);
      range3.equals(range0);
      //  // Unstable assertion: assertTrue(range3.equals((Object)range1));
      
      Range range4 = Range.of(1012L);
      //  // Unstable assertion: assertFalse(range4.equals((Object)range3));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.9029474428770903
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775272L, 9223372036854775289L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      range0.spliterator();
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of((-1165L));
      Range.of(711L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        range1.complement(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1165 would make range [9223372036854775272 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.7557836024811166
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(9223372036854775805L);
      range0.forEach(consumer0);
      Range range1 = Range.of((-1513L), 1363L);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      
      Range range2 = Range.of((-1513L));
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.720000963925278
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775796L));
      range0.endsBefore(range0);
      Range range1 = Range.of((-9223372036854775796L));
      range1.intersection(range0);
      range0.isSubRangeOf(range0);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.884825479920995
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of((-32768L));
      Object object0 = new Object();
      range1.spliterator();
      range0.endsBefore(range1);
      Range range2 = Range.of(9223372036854775807L);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range2.toString(range_CoordinateSystem0);
      range0.isSubRangeOf(range1);
      List<Range> list0 = range2.complement(range0);
      // Undeclared exception!
      try { 
        range1.complementFrom(list0);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.263155040283282
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-3183L);
      Range range0 = Range.of(range_CoordinateSystem0, (-3183L), (-3183L));
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.720787633611235
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 922L, 65543L);
      range0.spliterator();
      Range range1 = Range.of(922L, 922L);
      range1.isSubRangeOf(range0);
      Object object0 = new Object();
      range1.equals(range0);
      Range.ofLength(65543L);
      Range range2 = range1.intersection(range0);
      Object object1 = new Object();
      range0.equals(range2);
      // Undeclared exception!
      try { 
        Range.of(65543L, (-1308L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.878681410120063
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 599L, 599L);
      Range range2 = range1.intersection(range0);
      Long long0 = new Long((-9223372036854775166L));
      range1.equals(long0);
      Range range3 = Range.of(2147483647L);
      range3.equals(range1);
      range1.getLength();
      range2.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1249L, 2147483647L);
      Range.ofLength(0L);
      range2.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of((-9223372036854775166L), 3233L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.5547718855247417
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 5154L, 5154L);
      range_Builder0.build();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(5154L, 5154L);
      Range.Builder range_Builder3 = range_Builder2.shift(5154L);
      Range range1 = range_Builder0.build();
      range_Builder3.build();
      boolean boolean0 = range1.equals(range_Builder0);
      assertFalse(boolean0);
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.075617484794956
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(732L);
      range_Builder0.contractBegin(732L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.3693891892460597
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775802L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.shift(9223372036854775802L);
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -13 would make range [9223372036854775802 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.205497874050625
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.of(2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals("end of file reached before entire block was skipped");
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=4.054256821484146
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), (-1165L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of((-1165L));
      Range range3 = Range.ofLength(255L);
      assertFalse(range3.isEmpty());
      
      range1.equals("[{wHJ3");
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-613L), 420L);
      Range.Builder range_Builder1 = new Range.Builder(420L);
      range_Builder1.contractBegin((-32768L));
      Range range4 = range_Builder0.build();
      List<Range> list0 = range4.split(1L);
      assertFalse(list0.contains(range4));
      assertEquals(1034, list0.size());
      
      Object object0 = new Object();
      Range.of((-968L));
      Range.of(range_CoordinateSystem1, (-2444L), (-873L));
      Range.Comparators range_Comparators0 = Range.Comparators.SHORTEST_TO_LONGEST;
      Range.Comparators.values();
      Range.Comparators range_Comparators1 = Range.Comparators.ARRIVAL;
      Range range5 = range2.intersection(range0);
      assertTrue(range5.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.538283235817434
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = 32767L;
      Range range0 = Range.of(32767L, 32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(32767L);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        range1.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.2167244631155167
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.contractEnd(611L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.1966840500739986
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.contractEnd(1604L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(1604L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range0.equals(object5);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.1786334995603744
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.Comparators.values();
      Range.Comparators.values();
      Range.Comparators range_Comparators0 = Range.Comparators.ARRIVAL;
      Range range0 = Range.of(599L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.494106305612675
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = 9223372036854775805L;
      Range range0 = Range.of(9223372036854775805L);
      range0.forEach(consumer0);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775805L, (-2947L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2948 would make range [9223372036854775805 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.520085140219675
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.of(765L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.7147815409063423
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775797L));
      boolean boolean0 = range0.isSubRangeOf(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range range1 = Range.of((-9223372036854775797L));
      Range range2 = range1.intersection(range0);
      range2.intersects(range1);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      boolean boolean1 = range1.intersects(range2);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean2 = range0.equals(range1);
      //  // Unstable assertion: assertSame(range1, range2);
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      //  // Unstable assertion: assertTrue(boolean2);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.6559162210881966
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775802L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.shift((-2222L));
      Range range1 = range_Builder0.build();
      Range range2 = range_Builder0.build();
      range2.equals("qqDG+gBV=r%4;zm-[Gf");
      assertSame(range2, range1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.5602943999069034
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1233L, 32772L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1614L));
      Range range0 = range_Builder0.build();
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder2.build();
      range_Builder0.build();
      Object object0 = new Object();
      range_Builder2.shift(32772L);
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("unable to delete ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.unable to delete 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.483563079344056
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1239L, 32772L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1614L));
      range_Builder0.build();
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = range_Builder1.contractBegin((-1614L));
      range_Builder2.build();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      range_Builder4.build();
      range0.equals((Object) null);
      Range.Builder range_Builder5 = new Range.Builder(32772L, 65535L);
      assertFalse(range_Builder5.equals((Object)range_Builder2));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.6658019877414985
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-2222L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2222L), 2440L);
      Range range2 = range1.intersection(range0);
      range1.equals(consumer0);
      boolean boolean0 = range0.equals(range2);
      assertNotSame(range2, range1);
      assertTrue(boolean0);
      assertSame(range2, range0);
      
      Range range3 = Range.of(1012L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.401707950384665
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147482630L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.build();
      Object object0 = new Object();
      range_Builder0.build();
      Range.Builder range_Builder3 = new Range.Builder(2147482630L, 2147482630L);
      Range range0 = range_Builder3.build();
      Object object1 = new Object();
      range0.equals((Object) null);
      Range.Builder range_Builder4 = new Range.Builder(30L, 1634L);
      assertFalse(range_Builder4.equals((Object)range_Builder2));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.5584079123582244
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775295L);
      Range range1 = Range.ofLength(1949L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775295L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1027 would make range [9223372036854775295 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.9282589220285464
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(0L, 32767L);
      Range range1 = Range.ofLength(32767L);
      range1.complement(range0);
      Range.of(0L);
      String string0 = range1.toString();
      Object object0 = new Object();
      range1.isSubRangeOf(range0);
      range0.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder(32767L);
      range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string1 = range_CoordinateSystem0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.6720383693755014
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Long long0 = new Long(52L);
      Range range0 = Range.of(29L, 29L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(52L);
      Range range2 = range0.intersection(range1);
      Object object1 = new Object();
      range2.equals(range1);
      List<Range> list0 = range2.complement(range0);
      //  // Unstable assertion: assertSame(range2, range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.458368505124831
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(52L);
      Long long0 = new Long(52L);
      Range range1 = Range.of(29L);
      Spliterator<Long> spliterator0 = range1.spliterator();
      range0.isSubRangeOf(range1);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Range range2 = Range.ofLength(52L);
      Range range3 = range1.intersection(range2);
      assertFalse(range3.isEmpty());
      
      Object object0 = new Object();
      range0.spliterator();
      range2.equals(spliterator0);
      range2.equals(range1);
      assertSame(range1, range3);
      
      Range range4 = Range.of(598L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.9338390872798894
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(52L);
      Long long0 = new Long(52L);
      Range range1 = Range.of(29L);
      Spliterator<Long> spliterator0 = range1.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2260L), 29L);
      Range range3 = range0.intersection(range2);
      assertTrue(range3.isEmpty());
      
      range2.equals(spliterator0);
      Range range4 = Range.of(29L, 29L);
      range4.equals(range0);
      Range range5 = Range.of(52L);
      assertFalse(range5.isEmpty());
      assertFalse(range5.equals((Object)range4));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.549995879987985
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(1012L);
      Range range1 = Range.of(range_CoordinateSystem0, 1012L, 1012L);
      Range range2 = Range.of(range_CoordinateSystem0, 1012L, 1012L);
      range0.equals(range1);
      range0.intersects(range2);
      Range.of(1012L);
      Range.of(1012L, 1639L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 1012L, 1012L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.6172827785600656
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.contractBegin(2147483647L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(2147483647L);
      range_Builder1.shift(2147483647L);
      Range range1 = Range.of((-1363L), 32767L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.714599654697719
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(9223372036854775805L);
      range0.forEach(consumer0);
      range0.equals((Object) null);
      Range range1 = Range.ofLength(2118L);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.3951251426136455
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of((-102L));
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.4018248508997724
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-102L));
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long0 = new Long((-2357L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      Range range1 = Range.of(0L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.4306246850176714
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(9223372036854775805L);
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.of(1583L, 152L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.813945351592974
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(987L);
      Range range1 = Range.of(range_CoordinateSystem0, 987L, 987L);
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Range range2 = range_Builder1.build();
      Object object0 = new Object();
      range1.intersects(range2);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(3921L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.4354437493622094
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483649L);
      range_Builder0.build();
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(65535L, 4294967295L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder2.build();
      assertFalse(range0.isEmpty());
      
      Range range1 = range_Builder0.build();
      boolean boolean0 = range1.equals("unable to mkdir for ");
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.7001598810336604
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range range0 = Range.of(2688L);
      Range range1 = Range.ofLength(65535L);
      range1.complement(range0);
      Range.Comparators range_Comparators0 = Range.Comparators.ARRIVAL;
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.477133154549791
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.4363498948964
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(0L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775770L, (-128L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -128 would make range [9223372036854775770 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.5974618434712773
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of(121L, 4294967286L);
      Object object2 = new Object();
      range0.equals(object2);
      Object object3 = new Object();
      Long long0 = new Long(4294967286L);
      Range range1 = Range.ofLength(3094L);
      List<Range> list0 = range1.split(121L);
      assertEquals(26, list0.size());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=4.03238181984442
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(726L, 726L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.addLast(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      range0.spliterator();
      Range range1 = Range.of(835L);
      range0.endsBefore(range1);
      Range range2 = Range.of((-1974L));
      range1.isSubRangeOf(range2);
      Long long0 = new Long(2865L);
      assertEquals(2865L, (long)long0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.9126578893072175
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(52L);
      Long long0 = new Long(52L);
      Range range1 = Range.of(52L, 52L);
      range1.spliterator();
      range0.isSubRangeOf(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      assertTrue(linkedList0.contains(range1));
      
      Object object0 = new Object();
      range0.equals(range1);
      Range range2 = Range.ofLength(52L);
      Range range3 = range1.intersection(range2);
      Object object1 = new Object();
      range2.spliterator();
      range3.equals(range2);
      range3.complement(range1);
      range2.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range2.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.461450415806532
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.ofLength(30L);
      List<Range> list0 = range0.split(30L);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.676755244116598
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 599L, 599L);
      Range range1 = Range.of(2147483647L);
      Range range2 = range1.intersection(range0);
      range0.isSubRangeOf(range2);
      range0.complement(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("unable to mkdirs for ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.unable to mkdirs for 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.200767051101671
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long long0 = 52L;
      Range range0 = Range.of(52L);
      Long long1 = new Long(52L);
      long long2 = 29L;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.4507470807426976
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2585L), (-2585L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      Object object0 = new Object();
      range_Builder3.shift((-2585L));
      Long long0 = new Long(9223372036854775807L);
      range0.equals(range_Builder1);
      Range.Builder range_Builder4 = new Range.Builder((-32769L), 32767L);
      assertFalse(range_Builder4.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.996544747325357
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-3419L));
      Range range1 = Range.of(2285L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      List<Range> list2 = range1.complementFrom(list1);
      assertTrue(list1.contains(range1));
      assertEquals(0, list2.size());
      
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.5630227001120107
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(9223372036854775807L);
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range1 = range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      range_Builder1.build();
      range1.complement(range0);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(9223372036854775807L, 9223372036854775076L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.3077736496255974
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-901L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range range0 = Range.of((-901L));
      List<Range> list0 = range0.split(32767L);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.57269254248435
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(1012L);
      Range range1 = Range.of(range_CoordinateSystem0, 1012L, 1012L);
      range1.intersection(range0);
      range0.equals(range1);
      range0.equals((Object) null);
      Range.of(1012L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1012L, 618L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.4207520830625633
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.contractBegin((-1L));
      Object object0 = new Object();
      range0.equals("cluster distance can not be negative");
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(103L, (-1637L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.330141623328874
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.build();
      Range range1 = range_Builder1.build();
      range0.equals(range1);
      Range.Builder range_Builder3 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      assertFalse(range_Builder3.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.6397472122200143
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.contractBegin(2147483647L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(2147483647L);
      Range.Builder range_Builder3 = range_Builder1.shift(2147483647L);
      Range.Builder range_Builder4 = range_Builder3.shift((-675L));
      range_Builder0.build();
      Range.Builder range_Builder5 = range_Builder1.expandBegin((-675L));
      Range.Builder range_Builder6 = range_Builder4.expandBegin((-675L));
      Range range1 = range_Builder5.build();
      range0.equals(range_Builder4);
      range1.equals(range_Builder6);
      Object object0 = new Object();
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.7642032133513585
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 127L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range range1 = Range.of((-1L), (-1L));
      range1.spliterator();
      range1.endsBefore(range0);
      long long0 = 9223372036854774854L;
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.843042439153277
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1239L, 32772L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1614L));
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range0.complement(range1);
      Range.Comparators range_Comparators0 = Range.Comparators.ARRIVAL;
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.8141598633268887
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 2147483647L);
      range1.spliterator();
      range1.startsBefore(range0);
      range0.endsBefore(range1);
      range1.endsBefore(range0);
      assertFalse(range0.isEmpty());
      
      Range range2 = Range.of((-1L));
      boolean boolean0 = range2.isSubRangeOf(range1);
      assertTrue(boolean0);
      assertFalse(range2.isEmpty());
      
      Long long0 = new Long(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range1.toString(range_CoordinateSystem1);
      assertEquals("[ -1 .. 2147483648 ]/SB", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=4.073038874321615
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.addLast(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      range0.spliterator();
      range0.endsBefore(range0);
      Range range1 = Range.of((-1L));
      range1.isSubRangeOf(range0);
      Long long0 = new Long(2147483647L);
      assertEquals(2147483647L, (long)long0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.2694409050594997
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of((-1360L));
      long long0 = (-2837L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      range_Builder0.expandEnd((-522L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.3383144219539966
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147482630L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(2147482630L);
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder3 = new Range.Builder((-3659L), 1377L);
      assertFalse(range_Builder3.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.632944005314664
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.contractBegin(2147483647L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(2147483647L);
      Range.Builder range_Builder3 = range_Builder1.shift(2147483647L);
      Range.Builder range_Builder4 = range_Builder3.shift((-675L));
      Range.Builder range_Builder5 = range_Builder1.expandBegin((-675L));
      Range.Builder range_Builder6 = range_Builder4.expandBegin((-675L));
      range_Builder5.build();
      range0.equals(range_Builder4);
      Range.Builder range_Builder7 = new Range.Builder(2147483646L, 2147483647L);
      assertFalse(range_Builder7.equals((Object)range_Builder6));
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.2743775744652655
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-128L));
      Range range0 = Range.of(9223372036854775806L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=4.014757886072118
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-674L), 767L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-731L));
      range1.intersects(range0);
      range1.isSubRangeOf(range0);
      range0.endsBefore(range1);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = range_Builder0.contractEnd((-674L));
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder4.build();
      range_Builder3.expandEnd((-674L));
      range_Builder3.build();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.3732081287394666
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of(2147482630L);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-901L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(object4);
      Range range1 = Range.ofLength(9223372036854774854L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      Range range2 = range1.intersection(range0);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.736143429453179
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), (-1165L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      range0.spliterator();
      boolean boolean0 = range0.endsBefore(range1);
      Range range2 = Range.of((-32768L));
      boolean boolean1 = range2.intersects(range1);
      boolean boolean2 = range2.isSubRangeOf(range1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = range0.startsBefore(range2);
      assertFalse(boolean3 == boolean1);
      assertSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(boolean3);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.5859388601720585
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getEnd();
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-32768L));
      range_Builder0.build();
      range_Builder1.expandEnd((-32768L));
      range_Builder1.build();
      String string0 = "org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.722061854057001
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range range0 = Range.of((-102L));
      Object object1 = new Object();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Object object2 = new Object();
      Object object3 = new Object();
      Range range1 = Range.of(32767L, 32767L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.6316796486281424
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of((-366L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of((-366L), 2147486234L);
      Range range2 = Range.of((-365L), 2147483647L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.4604825404479804
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(1578L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin((-128L));
      range_Builder2.expandBegin(3977L);
      Range range0 = range_Builder1.build();
      range0.startsBefore(range0);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(1578L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.5490811352707317
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1839L, 1839L);
      List<Range> list0 = range0.split(2982L);
      assertTrue(list0.contains(range0));
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 953068L, 953068L);
      range0.intersection(range1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.6775172346657494
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 599L, 599L);
      Range range2 = range1.intersection(range0);
      Long long0 = new Long((-9223372036854775166L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(2060L, 2060L);
      range0.complement(range2);
      Range.Builder range_Builder1 = new Range.Builder((-274L), 2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(2147483647L, 2147483647L);
      Range.Builder range_Builder3 = new Range.Builder((-1541L), 65535L);
      assertFalse(range_Builder3.equals((Object)range_Builder2));
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.2671143019073323
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.of(765L, 9223372036854775807L);
      Range.Comparators range_Comparators0 = Range.Comparators.ARRIVAL;
      Range.Comparators.values();
      Range.Comparators range_Comparators1 = Range.Comparators.ARRIVAL;
      assertSame(range_Comparators1, range_Comparators0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.6508563151601945
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775796L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      range0.spliterator();
      Range range1 = Range.ofLength(899L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.47833749015798
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      Object object1 = new Object();
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = range_Builder1.expandEnd(0L);
      range_Builder3.shift(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=4.061114693250248
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(2147483647L);
      range1.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(2587L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 787L, 787L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range2.toString(range_CoordinateSystem2);
      assertEquals("[ 788 .. 787 ]/RB", string0);
      
      range1.isSubRangeOf(range0);
      boolean boolean0 = range0.intersects(range2);
      assertFalse(boolean0);
      
      Range range3 = Range.ofLength(1L);
      String string1 = range0.toString();
      assertEquals("[ 2147483647 .. 2147483647 ]/0B", string1);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(linkedList0);
      Range.of((-1370L));
      Range.parseRange("[ 788 .. 787 ]/RB");
      range3.isSubRangeOf(range1);
      List<Range> list0 = range2.complement(range1);
      assertTrue(list0.contains(range2));
      
      Range range4 = Range.parseRange("[ 2147483647 .. 2147483648 ]/SB", range_CoordinateSystem1);
      assertFalse(range4.equals((Object)range2));
      
      boolean boolean1 = range3.isEmpty();
      assertFalse(boolean1);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse SB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.963996435926057
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = 9223372036854774854L;
      Range range0 = Range.of(9223372036854774854L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(9223372036854774854L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range2 = Range.of(9223372036854774854L);
      range1.intersects(range2);
      range1.isSubRangeOf(range0);
      range2.endsBefore(range1);
      Range.ofLength(2237L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      long long1 = (-2846L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-2846L));
      Range.parseRange("[ 9223372036854774854 .. 9223372036854774854 ]/0B");
      Range.Builder range_Builder2 = range_Builder1.expandBegin(1L);
      range1.intersection(range0);
      Range.Builder range_Builder3 = new Range.Builder(1L, 65535L);
      // Undeclared exception!
      try { 
        range_Builder2.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854773916 would make range [9223372036854774853 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.6745498787496325
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.of(3417L, 3417L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(2147483646L);
      Range range1 = Range.of(2147482630L);
      range1.isSubRangeOf(range0);
      range1.endsBefore(range0);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = range_Builder0.build();
      range_Builder0.build();
      range0.startsBefore(range2);
      Range.Builder range_Builder1 = new Range.Builder(0L, 70L);
      Range.Builder range_Builder2 = new Range.Builder(0L, 2147482630L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(255L, (-1269L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range.of(127L, 4294967286L);
      Object object1 = new Object();
      Long long0 = new Long((-2708L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("unable to mkdir for ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.unable to mkdir for 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.578152990246962
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      range_Builder0.build();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range.CoordinateSystem.values();
      Range range1 = Range.of(2147483647L, 2147483647L);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertNotSame(range2, range1);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.692794841388169
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(765L, 4294967295L);
      Range.Comparators range_Comparators0 = Range.Comparators.ARRIVAL;
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, (-1392L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.6284103428067445
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 599L, 599L);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of((-434L), (-9223372036854775166L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=4.103475067217966
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of(0L, 32767L);
      Range range1 = Range.ofLength(32767L);
      List<Range> list0 = range1.complement(range0);
      assertEquals(0, list0.size());
      
      Range range2 = Range.of(0L);
      Range range3 = Range.of((-128L));
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      boolean boolean1 = range1.isSubRangeOf(range2);
      assertNotSame(range1, range0);
      
      boolean boolean2 = range3.endsBefore(range0);
      assertFalse(boolean2 == boolean1);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractEnd((-2837L));
      Range.Builder range_Builder1 = new Range.Builder(range2);
      Range range4 = range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder1.expandEnd(0L);
      range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder((-670L), (-670L));
      range_Builder1.copy();
      assertFalse(range2.isEmpty());
      assertSame(range2, range4);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.791069012743916
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1239L);
      range_Builder1.build();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      range_Builder1.contractBegin(75L);
      Range range1 = range_Builder3.build();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      range_Builder4.build();
      Object object0 = new Object();
      range_Builder0.build();
      Range.Builder range_Builder5 = new Range.Builder((-91L), 1239L);
      Object object1 = new Object();
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.736019112155928
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1239L);
      Range range0 = range_Builder1.build();
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range2 = range_Builder2.build();
      range1.complement(range0);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      range2.complement(range1);
      Range.Builder range_Builder4 = new Range.Builder((-274L), 6396823L);
      Range.Builder range_Builder5 = new Range.Builder((-2232L), 3874L);
      assertFalse(range_Builder5.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.1356630787162727
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.7817415539003294
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.of((-9223372036854775796L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 599L, 599L);
      Range.of(599L, 9223372036854774575L);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range.Comparators.values();
      Range.Comparators range_Comparators1 = Range.Comparators.ARRIVAL;
      assertFalse(range_Comparators1.equals((Object)range_Comparators0));
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.486782992255533
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of(765L, 4294967295L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.2009388382289825
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1316L), (-1316L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Hb[TEB~,L+7we$7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Hb[TEB~,L+7we$7
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.4798349444856234
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(3592L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(2147483647L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder2.expandEnd(2147483647L);
      range_Builder0.shift(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals((-1L), long1);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.of((-32768L), (-232L));
      Range.Comparators range_Comparators0 = Range.Comparators.ARRIVAL;
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.527523745378989
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1604L);
      range_Builder1.contractEnd(1604L);
      range_Builder0.build();
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(9223372036854775798L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder0.contractBegin(2147483647L);
      Range range0 = range_Builder3.build();
      Range.Builder range_Builder4 = new Range.Builder(9223372036854775798L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      range_Builder3.expandEnd(9223372036854775798L);
      range_Builder2.shift((-32769L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9223372036854775797L, long0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.1925863485716692
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.of((-32768L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.339030945056547
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1604L, 3592L);
      range_Builder0.contractEnd(1604L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(1604L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      boolean boolean0 = range0.equals(object6);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.6686542645059004
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775802L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.shift((-2222L));
      Range range1 = range_Builder0.build();
      range_Builder0.build();
      Range range2 = range1.asRange();
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.245905362460896
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.5428211206406504
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483649L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1222L);
      Range range0 = range_Builder1.build();
      range_Builder1.contractEnd(1222L);
      range_Builder0.contractBegin(1222L);
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(2147483647L);
      range0.isEmpty();
      range_Builder2.copy();
      Range.Builder range_Builder3 = new Range.Builder(2147483647L, 2147483647L);
      Range range1 = range_Builder3.build();
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.084638746946344
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854774854L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.084638746946344
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854774854L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("D(jzmMF)_&.\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.D(jzmMF)_&.\"
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.6004392643663565
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder3 = new Range.Builder(2147483647L);
      Range.Builder range_Builder4 = range_Builder1.shift(2147483647L);
      Range.Builder range_Builder5 = range_Builder4.shift((-678L));
      range_Builder0.build();
      range_Builder1.expandBegin(732L);
      range_Builder4.expandEnd(732L);
      Range.Builder range_Builder6 = range_Builder1.expandBegin((-678L));
      Range.Builder range_Builder7 = range_Builder5.expandBegin((-678L));
      Range range1 = range_Builder6.build();
      range0.equals(range_Builder5);
      Range.Builder range_Builder8 = new Range.Builder(range1);
      assertFalse(range_Builder8.equals((Object)range_Builder7));
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.071369388946837
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.split((-2326L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.922458567166194
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.expandBegin(2147483647L);
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1239L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(2147483647L);
      Range.Builder range_Builder3 = range_Builder0.shift(1996L);
      range_Builder2.shift(255L);
      Range.Builder range_Builder4 = range_Builder1.expandBegin(2147483647L);
      range_Builder4.expandBegin(2147483647L);
      Range range1 = range_Builder0.build();
      range1.complement(range0);
      Range.Builder range_Builder5 = new Range.Builder(466L, 2147483646L);
      Range range2 = range_Builder3.build();
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.3967533651373905
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range range0 = Range.of((-102L));
      long long0 = range0.getBegin();
      assertEquals((-102L), long0);
      
      Object object1 = new Object();
      range0.spliterator();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.1408241587613217
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of(2147482630L);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-901L));
      long long1 = range0.getEnd();
      assertEquals(2147482630L, long1);
      
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean0 = range0.equals(object4);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.182507072573158
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getEnd();
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.1398345496569178
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of(2147482630L);
      Object object0 = new Object();
      range0.getBegin();
      Object object1 = new Object();
      Long long0 = new Long((-901L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.822594395130869
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getBegin();
      Range range1 = Range.of(29L, 29L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      range0.equals(range1);
      Range range2 = Range.ofLength(0L);
      Range range3 = range1.intersection(range2);
      Object object1 = new Object();
      range3.equals(range2);
      range3.complement(range1);
      boolean boolean1 = range2.startsBefore(range0);
      assertFalse(boolean1);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.085091664483793
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(1252L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long(65535L);
      Long long1 = new Long(4715L);
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.4776167656338797
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.copy();
      range_Builder0.contractBegin(1239L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.0840133560770506
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775295L);
      long long0 = range0.getLength();
      assertEquals(9223372036854775295L, long0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.8168511647471113
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1239L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(0L);
      Range range2 = Range.of((-4923L));
      range0.isSubRangeOf(range1);
      range2.endsBefore(range1);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range_Builder1.build();
      Range range3 = range_Builder1.build();
      range3.startsBefore(range0);
      Range.Builder range_Builder3 = new Range.Builder((-4923L), 2153L);
      Range.Builder range_Builder4 = new Range.Builder(1240L, 1239L);
      Range.Builder range_Builder5 = new Range.Builder((-2176L), 1240L);
      assertFalse(range_Builder5.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.667008885289139
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.of(1012L);
      Range.of((-1385L));
      Range.of((-128L), 2147483647L);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.298155571027304
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-101L), (-101L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.298155571027304
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-128L), (-128L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.561201058583821
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of((-102L));
      Range.of((-102L), 4294967295L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("OuB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.OuB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.381800605102105
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      range0.endsBefore(range0);
      Range.Builder range_Builder2 = new Range.Builder(479L, 987L);
      assertFalse(range_Builder2.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.778644709741395
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Range range1 = range_Builder0.build();
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, (-1881L), (-581L));
      range_Builder1.copy();
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.469988568814979
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1239L);
      Range range0 = range_Builder1.build();
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.build();
      range_Builder0.build();
      Object object0 = new Object();
      range_Builder1.shift((-32769L));
      range0.isSubRangeOf(range1);
      Range.Builder range_Builder3 = new Range.Builder(9223372036854774569L, (-9223372036854743027L));
      assertFalse(range_Builder3.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.2380188789437025
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Long long0 = new Long((-9223372036854775166L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-2147483648L));
      Range.Comparators.values();
      Range.Comparators.values();
      Range.Comparators range_Comparators0 = Range.Comparators.ARRIVAL;
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.573615550061114
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1604L);
      range_Builder1.contractEnd(1604L);
      Range range0 = range_Builder0.build();
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(9223372036854775798L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder0.contractBegin(2147483647L);
      range_Builder3.build();
      Range.Builder range_Builder4 = new Range.Builder(9223372036854775798L);
      Range.Builder range_Builder5 = new Range.Builder(9223372036854775798L);
      range_Builder3.expandEnd(9223372036854775798L);
      Long long0 = new Long(841L);
      range_Builder2.shift((-32769L));
      range0.equals(range_Builder3);
      Range.Builder range_Builder6 = null;
      try {
        range_Builder6 = new Range.Builder((-32769L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.4816408359163757
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1604L);
      range_Builder1.contractEnd(1604L);
      range_Builder0.build();
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(9223372036854775798L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      long long1 = (-32769L);
      Range.Builder range_Builder4 = new Range.Builder(9223372036854775798L);
      long long2 = 841L;
      range_Builder2.shift(9223372036854775798L);
      range_Builder3.expandEnd(9223372036854775798L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.5460680006218315
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1604L);
      Range.Builder range_Builder2 = range_Builder1.contractEnd(1604L);
      range_Builder0.build();
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder3 = new Range.Builder(9223372036854775798L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      range_Builder3.contractEnd(2147483647L);
      range_Builder0.contractBegin(2147483647L);
      range_Builder4.build();
      Range.Builder range_Builder5 = new Range.Builder(9223372036854775798L);
      range0.equals(range_Builder0);
      range_Builder2.copy();
      Range.Builder range_Builder6 = new Range.Builder(4294967295L, 9223372036854775076L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1233L, 32772L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("38[%'6|'[uzZM", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 38[%'6|'[uzZM into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.6281786392461104
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372034707292161L, 9223372034707292161L);
      Range range1 = Range.ofLength(9223372034707292161L);
      long long0 = 0L;
      range0.endsBefore(range1);
      Range range2 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complementFrom(linkedList0);
      range2.complementFrom(list0);
      range1.toString();
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = (-2032L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-2032L), 9223372036854775314L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.4766620800575474
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483649L);
      range_Builder0.contractBegin(2147483649L);
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range1 = Range.of(2147483649L, 2147483649L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.08332035538405
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.ofLength(9223372036854774748L);
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("x{&6CM*8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.x{&6CM*8
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=3.1860594162939453
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-901L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range0 = Range.of((-901L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=3.607682371390042
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.contractBegin((-1L));
      Range.Builder range_Builder3 = range_Builder0.copy();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      Range.Builder range_Builder5 = range_Builder2.shift(598L);
      range_Builder5.expandBegin(1239L);
      Range range0 = range_Builder4.build();
      range0.equals(range_Builder3);
      Range.Builder range_Builder6 = new Range.Builder(2147483646L, 9223372036854775807L);
      assertFalse(range_Builder6.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 162
  /*Coverage entropy=3.1356178217257975
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(1363L, 1363L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=3.406321862181104
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range_Builder0.copy();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }
}
