/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 00:57:48 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.BufferUnderflowException;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte) (-27);
      byte[] byteArray0 = new byte[5];
      int int0 = 10;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 10);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode(byteArray0, 4294967295L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483645
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-81));
      Byte byte1 = new Byte((byte) (-81));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) byte1;
      Object object1 = new Object();
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      linkedList2.toArray(objectArray0);
      Object object2 = new Object();
      linkedList1.toArray(objectArray0);
      Comparator<Byte> comparator1 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator1);
      linkedList0.removeAll(linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.valueOf("INSTANCE");
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode((byte[]) null, (-2971L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -2971
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-81));
      Byte byte1 = new Byte((byte) (-81));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) byte1;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) comparator0;
      linkedList1.toArray(objectArray0);
      Object object2 = new Object();
      linkedList1.toArray(objectArray0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.967834387068873
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      defaultNucleotideCodec0.encode((int) (byte) (-1), iterator0);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-116);
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte)78;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4444896314927744
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      Byte byte0 = new Byte((byte) (-36));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = defaultNucleotideCodec1.decode(byteArray0, 9223372036854775807L);
      assertEquals(Nucleotide.Gap, nucleotide0);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.isGap(byteArray0, (byte) (-109));
      Nucleotide nucleotide1 = Nucleotide.Keto;
      nucleotide1.getBasesFor();
      Nucleotide nucleotide2 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide2.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec4.getUngappedOffsetFor(byteArray1, (byte) (-68));
      assertEquals((-68), int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec5.getUngappedLength(byteArray1);
      assertEquals(2L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-46)}, byteArray1);
      
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec6.getNumberOfGapsUntil(byteArray0, (-3109));
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      int int2 = defaultNucleotideCodec7.getNumberOfGaps(byteArray0);
      assertTrue(int2 == int1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.525033554164486
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      int int0 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[0] = (byte)0;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)0);
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, 0L);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec1.isGap(byteArray0, (byte)0);
      nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.isGap(byteArray0, (byte)0);
      Nucleotide nucleotide1 = Nucleotide.Strong;
      nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      String string0 = defaultNucleotideCodec1.toString(byteArray0);
      assertEquals("", string0);
      
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
      int int1 = defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray1, (-1193));
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray1);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.522216243846521
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Byte byte0 = new Byte((byte)0);
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, (long) byte0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Strong;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      Nucleotide nucleotide2 = Nucleotide.Cytosine;
      Set<Nucleotide> set2 = nucleotide2.getAllPossibleAmbiguities();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set2);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec2.isGap(byteArray1, (byte)0);
      assertTrue(boolean0);
      
      nucleotide1.getBasesFor();
      defaultNucleotideCodec0.getGapOffsets(byteArray2);
      nucleotide2.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray3 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set1);
      assertEquals(5, byteArray3.length);
      
      defaultNucleotideCodec1.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec4.getUngappedOffsetFor(byteArray1, (-911));
      assertEquals((-911), int0);
      
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray2, (-1556));
      long long0 = defaultNucleotideCodec3.getUngappedLength(byteArray2);
      assertEquals(7L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)7, (byte) (-9), (byte) (-104), (byte) (-85), (byte)48}, byteArray2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4896938156242214
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Byte byte0 = new Byte((byte)0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte)0;
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, 4L);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.isGap(byteArray0, (byte)71);
      Set<Nucleotide> set1 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set1);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec4.toString(byteArray0);
      assertEquals("", string0);
      
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, 9);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec5.getUngappedOffsetFor(byteArray1, 1488);
      assertEquals(1488, int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec6.getUngappedLength(byteArray2);
      assertEquals(2L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)30}, byteArray2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.427729535769155
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Byte byte0 = new Byte((byte)0);
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, (long) byte0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.isGap(byteArray0, (byte)0);
      Nucleotide nucleotide1 = Nucleotide.Keto;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set1);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec4.getUngappedOffsetFor(byteArray2, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)46}, byteArray2);
      
      List<Integer> list0 = defaultNucleotideCodec1.getGapOffsets(byteArray1);
      assertTrue(list0.contains(int0));
      
      byte[] byteArray3 = defaultNucleotideCodec2.encode(nucleotide0);
      assertEquals(5, byteArray3.length);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)0;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      int int0 = (-2129735848);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-38);
      byteArray1[2] = (byte) (-26);
      byteArray1[3] = (byte)118;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.5598211531906787
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Byte byte0 = new Byte((byte)0);
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, (long) byte0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.isGap(byteArray0, (byte)0);
      Nucleotide nucleotide1 = Nucleotide.Keto;
      Nucleotide.parse('A');
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set1);
      String string0 = defaultNucleotideCodec2.toString(byteArray2);
      assertEquals("GT", string0);
      
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec3.getUngappedOffsetFor(byteArray0, (byte)0);
      assertEquals(0, int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec4.getUngappedLength(byteArray1);
      assertEquals(0L, long0);
      
      int int1 = defaultNucleotideCodec2.getGappedOffsetFor(byteArray2, (-2099));
      assertEquals(2, int1);
      assertEquals(5, byteArray2.length);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.4694974603336526
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)0);
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, (long) byte0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec2.isGap(byteArray0, (byte)0);
      assertFalse(boolean0);
      
      nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec3.toString(byteArray1);
      assertEquals("-", string0);
      
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (byte)0);
      assertEquals(5, byteArray1.length);
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.5124390852601466
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Byte byte0 = new Byte((byte)0);
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, (long) byte0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec2.isGap(byteArray0, (byte)0);
      assertFalse(boolean0);
      
      Set<Nucleotide> set1 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set1);
      String string0 = defaultNucleotideCodec3.toString(byteArray1);
      assertEquals("-", string0);
      
      int int0 = defaultNucleotideCodec3.getUngappedOffsetFor(byteArray0, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec4.getUngappedOffsetFor(byteArray0, 0);
      assertEquals(0, int1);
      
      long long0 = new Byte((byte)0);
      int int2 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, 406);
      assertEquals(1, int2);
      
      int int3 = defaultNucleotideCodec3.getNumberOfGaps(byteArray1);
      assertEquals(5, byteArray1.length);
      assertFalse(int3 == int0);
      assertEquals(1, int3);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.565529205648932
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)0);
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, 0L);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec1.isGap(byteArray0, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, (byte)0);
      assertFalse(boolean0);
      
      Nucleotide nucleotide1 = Nucleotide.Keto;
      nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      String string0 = defaultNucleotideCodec3.toString(byteArray0);
      assertEquals("", string0);
      
      int int0 = defaultNucleotideCodec2.getUngappedOffsetFor(byteArray1, (-3185));
      assertEquals((-3185), int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec4.getUngappedOffsetFor(byteArray1, 0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      int int2 = defaultNucleotideCodec5.getNumberOfGapsUntil(byteArray0, 0);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      int int3 = defaultNucleotideCodec6.getNumberOfGaps(byteArray0);
      assertFalse(int3 == int1);
      
      int int4 = defaultNucleotideCodec1.getGappedOffsetFor(byteArray1, (-34));
      assertFalse(int4 == int2);
      assertEquals(5, byteArray1.length);
      assertEquals(1, int4);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.5870353436327926
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      Byte byte0 = new Byte((byte)0);
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec3.isGap(byteArray1, (byte)0);
      assertTrue(boolean0);
      
      Nucleotide nucleotide1 = Nucleotide.Keto;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)46}, byteArray2);
      
      String string0 = defaultNucleotideCodec0.toString(byteArray1);
      assertEquals("-", string0);
      
      int int0 = defaultNucleotideCodec1.getUngappedOffsetFor(byteArray1, (byte)0);
      assertEquals((-1), int0);
      
      long long0 = defaultNucleotideCodec3.getUngappedLength(byteArray1);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.5163713808258255
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Byte byte0 = new Byte((byte)0);
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, (long) byte0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Strong;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      Nucleotide nucleotide2 = Nucleotide.Cytosine;
      Set<Nucleotide> set2 = nucleotide2.getAllPossibleAmbiguities();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)7, (byte) (-9), (byte) (-104), (byte) (-85), (byte)48}, byteArray2);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec2.isGap(byteArray1, 927);
      assertFalse(boolean0);
      
      nucleotide1.getBasesFor();
      nucleotide2.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray3 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set1);
      assertEquals(5, byteArray3.length);
      
      String string0 = defaultNucleotideCodec1.toString(byteArray0);
      assertEquals("", string0);
      
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec4.getUngappedOffsetFor(byteArray1, (-911));
      assertEquals(5, byteArray1.length);
      assertEquals((-911), int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-81));
      Byte byte1 = new Byte((byte) (-81));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) byte1;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      Byte.compare((byte) (-81), (byte) (-81));
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) comparator0;
      linkedList1.toArray(objectArray0);
      Object object2 = new Object();
      linkedList0.poll();
      linkedList1.toArray(objectArray0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator1);
      linkedList0.removeAll(linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte) (-81);
      byteArray0[8] = (byte) (-81);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap((byte[]) null, (byte) (-81));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-81));
      Byte byte1 = new Byte((byte) (-81));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) byte1;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) comparator0;
      linkedList1.toArray(objectArray0);
      Object object2 = new Object();
      linkedList1.toArray(objectArray0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator1);
      linkedList0.removeAll(linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(15, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.538556725953367
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Amino;
      nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte) (-118);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)3;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.26905839261394
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-109);
      defaultNucleotideCodec0.isGap(byteArray0, (-2618));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Amino;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.toString(byteArray1);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 2779);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode(226, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[12];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      byte byte0 = (byte) (-81);
      Byte byte1 = new Byte((byte) (-81));
      Byte byte2 = new Byte((byte) (-81));
      Object object0 = new Object();
      Byte.toUnsignedInt((byte) (-81));
      Object object1 = new Object();
      Object[] objectArray0 = new Object[8];
      Object object2 = new Object();
      objectArray0[0] = object2;
      objectArray0[1] = (Object) comparator0;
      objectArray0[2] = (Object) linkedList0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = object1;
      objectArray0[5] = object1;
      Object object3 = new Object();
      objectArray0[6] = object3;
      objectArray0[7] = (Object) byte1;
      linkedList1.toArray(objectArray0);
      Object object4 = new Object();
      linkedList1.toArray(objectArray0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator1);
      linkedList0.removeAll(linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      byte[] byteArray1 = new byte[7];
      defaultNucleotideCodec0.isGap(byteArray1, (-1131179264));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 175);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.26381679241522
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec0.encode((int) (byte)0, iterator0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-50);
      byte byte1 = (byte)16;
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      byteArray0[6] = (byte)16;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode((byte[]) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor((byte[]) null, 89);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      String string0 = "RVC";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)65;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-81));
      Byte byte1 = new Byte((byte) (-81));
      Byte byte2 = new Byte((byte) (-81));
      linkedList1.add(byte2);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) byte1;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) comparator0;
      linkedList1.toArray(objectArray0);
      Object object2 = new Object();
      linkedList1.toArray(objectArray0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator1);
      linkedList0.removeAll(linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor((byte[]) null, (-1431655764));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.434799037944202
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)31);
      byte byte0 = (byte)11;
      defaultNucleotideCodec0.toString(byteArray0);
      byte[] byteArray1 = null;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec1.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9676652704776565
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      Byte byte1 = new Byte((byte)0);
      defaultNucleotideCodec0.decode(byteArray0, (long) byte1);
      defaultNucleotideCodec0.isGap(byteArray0, 1192);
      // Undeclared exception!
      try { 
        Range.parseRange("O%RgkC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse O%RgkC into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7988457068767891
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-81));
      linkedList1.add(byte0);
      Byte byte1 = new Byte((byte) (-81));
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      linkedList0.add(nucleotide0);
      Byte.compare((byte)87, (byte)87);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) byte1;
      Byte.compare((byte)20, (byte)20);
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) linkedList0;
      linkedList1.toArray(objectArray0);
      Object object2 = new Object();
      linkedList1.toArray(objectArray0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator1);
      linkedList0.removeAll(linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)87;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5633125094217712
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)49;
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      byte[] byteArray1 = new byte[9];
      defaultNucleotideCodec0.isGap(byteArray1, (byte)0);
      String string0 = "/_YGr0Ww||";
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-81));
      Byte byte1 = new Byte((byte) (-81));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) byte1;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) comparator0;
      linkedList1.toArray(objectArray0);
      Object object2 = new Object();
      linkedList1.toArray(objectArray0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      byteArray0[3] = (byte) (-81);
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte) (-28);
      byteArray0[8] = (byte)0;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-1019), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)112;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.2732409507095364
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)1;
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byte[] byteArray1 = new byte[9];
      defaultNucleotideCodec0.isGap(byteArray1, (byte)0);
      String string0 = "range can not be null";
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2745180899177098
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-68);
      byteArray0[0] = (byte) (-68);
      byte byte1 = (byte) (-109);
      byteArray0[1] = (byte) (-109);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[2] = (byte) (-109);
      defaultNucleotideCodec0.isGap(byteArray0, (-2645));
      // Undeclared exception!
      try { 
        Range.parseRange("O%RgkC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse O%RgkC into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-81));
      Byte byte1 = new Byte((byte) (-81));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) byte1;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      objectArray0[5] = (Object) comparator0;
      linkedList0.toArray(objectArray0);
      Object object2 = new Object();
      linkedList0.toArray(objectArray0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte) (-81);
      Range range0 = Range.of((long) (byte) (-81), (long) (byte) (-81));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.63955266031573
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Byte byte0 = new Byte((byte)0);
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, (long) byte0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.isGap(byteArray0, (byte)0);
      Nucleotide nucleotide1 = Nucleotide.Keto;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec3.toString(byteArray1);
      defaultNucleotideCodec3.getUngappedOffsetFor(byteArray0, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getUngappedOffsetFor(byteArray0, 0);
      defaultNucleotideCodec0.getUngappedLength(byteArray1);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, 406);
      defaultNucleotideCodec3.getNumberOfGaps(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec5.iterator(byteArray1);
      defaultNucleotideCodec3.encode(0, iterator0);
      Range range0 = Range.ofLength((byte)0);
      Iterator<Nucleotide> iterator1 = defaultNucleotideCodec0.iterator(byteArray0, range0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.6502963454945077
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Byte byte0 = new Byte((byte)0);
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, (long) byte0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray1);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec2.isGap(byteArray0, (byte)0);
      assertFalse(boolean0);
      
      Nucleotide nucleotide1 = Nucleotide.Keto;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set1);
      String string0 = defaultNucleotideCodec3.toString(byteArray2);
      assertEquals("GT", string0);
      
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      int int0 = defaultNucleotideCodec4.getUngappedOffsetFor(byteArray0, (byte)0);
      assertEquals(0, int0);
      
      defaultNucleotideCodec0.getUngappedLength(byteArray2);
      defaultNucleotideCodec4.getNumberOfGapsUntil(byteArray2, (byte)0);
      Nucleotide nucleotide2 = Nucleotide.Purine;
      defaultNucleotideCodec1.encode(nucleotide2);
      Range range0 = Range.of((long) (byte)0);
      defaultNucleotideCodec3.iterator(byteArray2, range0);
      assertEquals(5, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)46}, byteArray2);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.930792587528488
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      String string0 = "RVC";
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)0;
      Range range0 = Range.of(1847L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 927
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.pollFirst();
      linkedList1.sort(comparator0);
      linkedList0.removeAll(linkedList1);
      Iterator<Nucleotide> iterator0 = linkedList0.iterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(309, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-67));
      Byte byte1 = new Byte((byte) (-67));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) byte1;
      objectArray0[2] = objectArray0[1];
      objectArray0[3] = object0;
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) comparator0;
      linkedList1.toArray(objectArray0);
      linkedList1.toArray(objectArray0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil((byte[]) null, (byte) (-67));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      int int0 = 255;
      Integer integer0 = new Integer(255);
      int int1 = (-77);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      int int0 = 255;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-9);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-9));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, 4);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)14;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.421911661589563
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      byte byte0 = (byte) (-81);
      Byte byte1 = new Byte((byte) (-81));
      Byte byte2 = new Byte((byte) (-81));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) byte2;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) comparator0;
      linkedList1.toArray(objectArray0);
      Object object2 = new Object();
      linkedList1.toArray(objectArray0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator1);
      linkedList0.removeAll(linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-81);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-81));
      Byte byte1 = new Byte((byte) (-81));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) byte1;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) comparator0;
      linkedList1.toArray(objectArray0);
      Object object2 = new Object();
      linkedList1.toArray(objectArray0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator1);
      linkedList0.removeAll(linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte) (-81);
      byteArray0[8] = (byte) (-81);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.622204027249963
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte)80;
      byteArray0[8] = (byte)2;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)2);
      byte[] byteArray1 = new byte[9];
      defaultNucleotideCodec0.isGap(byteArray1, (byte)0);
      String string0 = "/_YGr0Ww||";
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.iterator();
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte.compare((byte)0, (byte)0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) comparator0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      predicate0.negate();
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      linkedList0.removeIf(predicate1);
      Object object0 = new Object();
      Object object1 = new Object();
      Byte.compare((byte)0, (byte)0);
      Object object2 = new Object();
      Byte.toUnsignedLong((byte)0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = object2;
      objectArray0[3] = (Object) predicate4;
      objectArray0[4] = (Object) predicate0;
      objectArray0[5] = (Object) predicate0;
      linkedList0.toArray(objectArray0);
      linkedList0.offerFirst((Byte) (byte)0);
      Object object3 = new Object();
      linkedList0.toArray(objectArray0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 3);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte) (-54));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -54
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.815301492400081
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(546, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)110;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.403763330235561
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-97);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-81));
      Byte byte1 = new Byte((byte) (-81));
      Object object0 = new Object();
      Byte.toUnsignedInt((byte) (-81));
      Byte.compare((byte) (-81), (byte) (-81));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "N+L!Ur0}");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Object object1 = new Object();
      predicate0.test(object1);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      predicate3.negate();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[8];
      Object object3 = new Object();
      objectArray0[0] = object3;
      Byte.compare((byte) (-81), (byte) (-81));
      objectArray0[1] = (Object) comparator0;
      objectArray0[2] = (Object) linkedList0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = object2;
      objectArray0[5] = object2;
      objectArray0[6] = object3;
      Byte.toUnsignedLong((byte) (-81));
      objectArray0[7] = (Object) byte0;
      Object object4 = new Object();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.4132130431348466
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)3;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte.compare((byte)0, (byte)0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) comparator0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      predicate0.negate();
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      Object object0 = new Object();
      Object object1 = new Object();
      Byte.compare((byte)0, (byte)0);
      predicate4.or(predicate1);
      Object object2 = new Object();
      Byte.toUnsignedLong((byte)0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[2] = object2;
      objectArray0[3] = (Object) predicate4;
      objectArray0[4] = (Object) predicate0;
      objectArray0[5] = (Object) predicate0;
      Object object3 = new Object();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode(byteArray0, 942L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 942 corresponds to encodedIndex 475  encodedglyph length is 9
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-81));
      Byte byte1 = new Byte((byte) (-81));
      Object object0 = new Object();
      Byte.toUnsignedInt((byte) (-81));
      Byte.compare((byte) (-81), (byte) (-81));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "N+L!Ur0}");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate2);
      linkedList1.removeIf(predicate3);
      Object object1 = new Object();
      Object[] objectArray0 = new Object[8];
      Object object2 = new Object();
      objectArray0[0] = object2;
      Byte.compare((byte) (-81), (byte) (-81));
      objectArray0[1] = (Object) comparator0;
      objectArray0[2] = (Object) linkedList0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[5] = object1;
      Object object3 = new Object();
      objectArray0[6] = object3;
      Byte.toUnsignedLong((byte) (-81));
      objectArray0[7] = (Object) byte0;
      Object[] objectArray1 = linkedList1.toArray(objectArray0);
      Object object4 = new Object();
      linkedList1.toArray(objectArray1);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-81);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 0 corresponds to encodedIndex 4  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-81));
      Byte byte1 = new Byte((byte) (-81));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) byte1;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      Byte.toUnsignedInt((byte)12);
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) comparator0;
      linkedList1.toArray(objectArray0);
      Object object2 = new Object();
      linkedList1.toArray(objectArray0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator1);
      linkedList0.removeAll(linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-85);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.26147956346083
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte)12;
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      DefaultNucleotideCodec.values();
      Nucleotide nucleotide1 = Nucleotide.Pyrimidine;
      defaultNucleotideCodec0.encode(nucleotide1);
      DefaultNucleotideCodec.values();
      int int0 = (-2611);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.ofLength(4L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray1, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 3 ]/0B is out of range of sequence which is only [ 0 .. 2 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.6205643331111412
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)67);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.9649066497880012
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-81));
      Byte byte1 = new Byte((byte) (-81));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) byte1;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) comparator0;
      linkedList1.toArray(objectArray0);
      Byte byte2 = new Byte((byte) (-91));
      Byte byte3 = new Byte((byte) (-81));
      Byte byte4 = new Byte((byte)52);
      linkedList1.add(byte4);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator1);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      linkedList0.removeAll(linkedList2);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte) (-81));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.044202005598979
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Range range0 = Range.of((long) (byte)0, 78L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 78 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.786100866302153
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-81));
      Byte byte1 = new Byte((byte) (-81));
      Object object0 = new Object();
      Byte.toUnsignedInt((byte) (-81));
      Byte.compare((byte) (-81), (byte) (-81));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "N+L!Ur0}");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      linkedList0.add(nucleotide0);
      Object object1 = new Object();
      predicate0.test(object1);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      linkedList1.removeIf(predicate4);
      Object object2 = new Object();
      Object[] objectArray0 = new Object[8];
      Object object3 = new Object();
      objectArray0[0] = object3;
      Byte.compare((byte) (-81), (byte) (-81));
      objectArray0[2] = (Object) linkedList0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = object2;
      objectArray0[5] = object2;
      objectArray0[6] = object3;
      Byte.toUnsignedLong((byte) (-81));
      objectArray0[7] = (Object) byte0;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("H", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-112)}, byteArray0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.3766265400583184
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)95;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-2094));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)82;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2145L), (long) (byte)95);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -2145 .. 95 ]/0B is out of range of sequence which is only [ 0 .. 1597911889 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.482562078343055
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)0);
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, 0L);
      assertEquals(Nucleotide.Gap, nucleotide0);
      
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      nucleotide0.getBasesFor();
      defaultNucleotideCodec1.isGap(byteArray0, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedLength(byteArray0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, DefaultNucleotideCodec>, Byte>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, DefaultNucleotideCodec>, Byte>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 2);
      AbstractMap.SimpleImmutableEntry<String, DefaultNucleotideCodec> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, DefaultNucleotideCodec>("", defaultNucleotideCodec0);
      AbstractMap.SimpleEntry<String, DefaultNucleotideCodec> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, DefaultNucleotideCodec>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, DefaultNucleotideCodec> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, DefaultNucleotideCodec>(abstractMap_SimpleEntry0);
      Byte byte0 = new Byte((byte)0);
      AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, DefaultNucleotideCodec>, Byte> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, DefaultNucleotideCodec>, Byte>(abstractMap_SimpleImmutableEntry1, byte0);
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry1;
      AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, DefaultNucleotideCodec>, Byte> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, DefaultNucleotideCodec>, Byte>(abstractMap_SimpleEntry1);
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry2;
      linkedList0.toArray(abstractMap_SimpleEntryArray0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.removeAll(linkedList1);
      Nucleotide nucleotide1 = Nucleotide.Pyrimidine;
      Set<Nucleotide> set0 = nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec4.toString(byteArray0);
      assertEquals("", string0);
      
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec5.iterator(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec6.encode((int) (byte)0, iterator0);
      assertEquals(4, byteArray2.length);
      
      int int1 = defaultNucleotideCodec6.getNumberOfGaps(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-34)}, byteArray1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)0;
      Range range0 = Range.ofLength((byte)52);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
}
