/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 23:45:27 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sun.msv.datatype.xsd.XSDatatype;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FilterInputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.Namespace;
import org.dom4j.NodeType;
import org.dom4j.QName;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.dom4j.datatype.DatatypeAttribute;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.NamespaceStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3834744755118558
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      sAXReader_SAXEntityResolver0.resolveEntity("", ")9Z&9A\"v/G{");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.createDefaultEntityResolver("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-1);
      String string1 = "//home/ubuntu/termite/projects/62_dom4j/:ZFjJ/:ZFjJ0:ZFjJ";
      defaultDocumentFactory0.createQName("//home/ubuntu/termite/projects/62_dom4j/:ZFjJ/:ZFjJ0:ZFjJ", "", "");
      XMLReader xMLReader0 = null;
      SAXReader sAXReader1 = new SAXReader((XMLReader) null, false);
      sAXReader0.isStringInternEnabled();
      try { 
        sAXReader1.setXMLReaderClassName("//home/ubuntu/termite/projects/62_dom4j/:ZFjJ/:ZFjJ0:ZFjJ");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //home/ubuntu/termite/projects/62_dom4j/:ZFjJ/:ZFjJ0:ZFjJ not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      try { 
        sAXReader0.setProperty("http://xml.org/sax/properties/declaration-handler", "//home/ubuntu/termite/projects/62_dom4j/\"sYD/Validation not supported for XMLReader: 0http:/xml.org/sax/features/string-interning");
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // The value specified for property 'http://xml.org/sax/properties/declaration-handler' cannot be casted to org.xml.sax.ext.DeclHandler.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4067946754198752
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      locator2Impl1.setPublicId("");
      locator2Impl1.setPublicId("");
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.getSystemId();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl1);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      sAXReader0.setEncoding("//tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|");
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      pipedInputStream0.markSupported();
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"//TMP/HOME/UBUNTU/TERMITE/PROJECTS/62_DOM4J/AUOS]0W3J &U~|0/HOME/UBUNTU/TERMITE/PROJECTS/62_DOM4J/AUOS]0W3J &U~|\". Nested exception: Invalid encoding name \"//TMP/HOME/UBUNTU/TERMITE/PROJECTS/62_DOM4J/AUOS]0W3J &U~|0/HOME/UBUNTU/TERMITE/PROJECTS/62_DOM4J/AUOS]0W3J &U~|\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, (byte)53);
      bufferedInputStream1.mark((byte)53);
      bufferedInputStream1.close();
      bufferedInputStream1.mark((-2936));
      bufferedInputStream1.mark((byte)53);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(bufferedInputStream1);
      BufferedInputStream bufferedInputStream3 = new BufferedInputStream(bufferedInputStream0);
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.setProperty("http://xml.org/sax/properties/declaration-handler", (Object) null);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      MockFile mockFile0 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      MockFile mockFile1 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile0.toURL();
      File file0 = mockFile1.getAbsoluteFile();
      mockFile1.mkdir();
      MockFile.createTempFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      MockFile mockFile2 = new MockFile(mockFile1, "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      mockFile2.getAbsolutePath();
      file0.setWritable(true, true);
      File file1 = MockFile.createTempFile("//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|00/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0", "//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|00/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0");
      file1.toURL();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      mockFile2.getAbsoluteFile();
      file0.toURL();
      file0.mkdirs();
      file1.getCanonicalPath();
      file1.deleteOnExit();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projets/62_dom4j");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".kTOY ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|00/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0");
      file0.toURI();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.setEncoding(".kTOY ");
      try { 
        sAXReader0.read("/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \".KTOY \". Nested exception: Invalid encoding name \".KTOY \".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.setErrorHandler(defaultHandler2_0);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      try { 
        sAXReader0.setFeature("http://xml.org/sax/features/use-locator2", true);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // Feature 'http://xml.org/sax/features/use-locator2' is read only.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.441447689794065
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl1);
      locatorImpl0.setSystemId((String) null);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      Locator2Impl locator2Impl5 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl0);
      locatorImpl2.getColumnNumber();
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl0);
      LocatorImpl locatorImpl4 = new LocatorImpl(locatorImpl3);
      locatorImpl2.setPublicId("");
      locatorImpl0.setPublicId("=1-");
      Locator2Impl locator2Impl6 = new Locator2Impl();
      LocatorImpl locatorImpl5 = new LocatorImpl(locator2Impl5);
      locatorImpl4.setPublicId("=1-");
      LocatorImpl locatorImpl6 = new LocatorImpl();
      SAXReader sAXReader0 = new SAXReader(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Object object0 = new Object();
      Object object1 = new Object();
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      sAXReader0.setEncoding("u~>i^,}{ta\"Kg");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("=1-");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      StringReader stringReader0 = new StringReader("");
      stringReader0.reset();
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = '#';
      charArray0[2] = 'F';
      charArray0[3] = '{';
      charArray0[4] = '%';
      charArray0[5] = 'R';
      charArray0[6] = '6';
      xMLFilterImpl0.characters(charArray0, 224, (-640));
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.isValidating();
      try { 
        sAXReader0.setXMLReaderClassName("/");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class / not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)53;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<FilterInputStream> enumeration1 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("//home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile1 = new MockFile("//home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|", "//home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|");
      MockFile mockFile2 = new MockFile(mockFile1, "//home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|");
      mockFile2.setReadOnly();
      mockFile2.setReadable(false, false);
      File file0 = MockFile.createTempFile("//home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|", "");
      file0.mkdirs();
      DOMDocument dOMDocument0 = new DOMDocument("");
      URL uRL0 = MockURL.getHttpExample();
      MockURL.URL(uRL0, "//home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|");
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      sAXReader0.setIgnoreComments(true);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.isIgnoreComments();
      parserAdapter0.getEntityResolver();
      // Undeclared exception!
      try { 
        parserAdapter0.parse((InputSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2186036184656626
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      xMLFilterImpl0.skippedEntity("http://xml.org/sax/features/namespace-prefixes");
      XMLReader xMLReader0 = sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLReader0);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.setEntityResolver(sAXContentHandler0);
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'l';
      charArray0[2] = 'y';
      xMLFilterImpl0.ignorableWhitespace(charArray0, 915, 915);
      sAXReader0.getEntityResolver();
      sAXReader0.getEntityResolver();
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      bufferedInputStream0.markSupported();
      bufferedInputStream0.mark(915);
      bufferedInputStream0.mark(3083);
      String string0 = "//tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0";
      MockFile mockFile0 = new MockFile("", "");
      File file0 = MockFile.createTempFile("v7<#Bo{uJ", "//tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0", (File) mockFile0);
      // Undeclared exception!
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)53;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      bufferedInputStream0.mark((byte)0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream((InputStream) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "http://xml.org/sax/features/namespace-prefixes");
      SAXReader sAXReader1 = new SAXReader(true);
      sAXReader1.setFeature("http://xml.org/sax/features/namespace-prefixes", true);
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertTrue(sAXReader1.isValidating());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.688656384655456
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      XMLReader xMLReader0 = sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.createContentHandler(xMLReader0);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = 'l';
      charArray0[2] = '>';
      xMLFilterImpl0.ignorableWhitespace(charArray0, 915, 915);
      sAXReader0.installXMLFilter(xMLReader0);
      sAXReader0.getXMLReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.getPublicId();
      locator2Impl0.getColumnNumber();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      SAXParseException sAXParseException0 = new SAXParseException("ofxVHsLUNUj2VX", locator2Impl1, (Exception) null);
      SAXReader sAXReader1 = new SAXReader(false);
      Object object0 = new Object();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty("-Ro#ooad", xMLFilterImpl1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3872942996011255
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      String string0 = "";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "");
      StringReader stringReader0 = new StringReader("");
      inputSource0.setCharacterStream(stringReader0);
      InputSource inputSource1 = new InputSource("");
      inputSource0.getSystemId();
      try { 
        sAXReader1.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("//home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|", "//home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|");
      inputSource0.getSystemId();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: //home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|//home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~| Nested exception: no protocol: //home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|//home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.187372721971773
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      XMLReader xMLReader0 = sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLReader0);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.setEntityResolver(sAXContentHandler0);
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'l';
      charArray0[2] = 'y';
      StringReader stringReader0 = new StringReader("//home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|");
      // Undeclared exception!
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Mu");
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setStripWhitespaceText(false);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.187372721971773
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      XMLReader xMLReader0 = sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLReader0);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.setEntityResolver(sAXContentHandler0);
      char[] charArray0 = new char[4];
      StringReader stringReader0 = new StringReader("(wO^X\"8mnv^ngzeW");
      // Undeclared exception!
      try { 
        sAXReader0.read((Reader) stringReader0, "(wO^X\"8mnv^ngzeW");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3891188032707174
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DOMDocument dOMDocument0 = new DOMDocument();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      String string0 = null;
      QName qName0 = new QName((String) null);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createElement(qName0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 5);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 3046);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      try { 
        sAXReader0.read((InputStream) dataInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Stream closed Nested exception: Stream closed
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4684408338023998
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)53;
      sAXReader0.setEncoding("8'(`zL);;\"V:fwbE51C");
      sAXReader0.removeHandler("8'(`zL);;\"V:fwbE51C");
      byteArray0[2] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byteArrayInputStream0.markSupported();
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "//home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"8'(`ZL);;\"V:FWBE51C\". Nested exception: Invalid encoding name \"8'(`ZL);;\"V:FWBE51C\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createQName("1;", "1;");
      defaultDocumentFactory1.createQName("//tmp/mp/~{sZV0sZ0/mp/~{sZV0sZ");
      SAXReader sAXReader1 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createText("//tmp/tmp/~{sZV0~{sZV0/tmp/~{sZV0~{sZV");
      Namespace.get("//tmp/tmp/~{sZV0~{sZV0/tmp/~{sZV0~{sZV", "header");
      boolean boolean0 = sAXReader1.isIncludeExternalDTDDeclarations();
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(boolean0);
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIgnoreComments());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = ":^v0#Q*k?gkh,zMobU|";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(":^v0#Q*k?gkh,zMobU|");
      sAXReader_SAXEntityResolver0.resolveEntity(":^v0#Q*k?gkh,zMobU|", ":^v0#Q*k?gkh,zMobU|");
      sAXReader_SAXEntityResolver0.resolveEntity(":^v0#Q*k?gkh,zMobU|", ")9Z&9A\"v/G{");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createQName("1;", "=,Wj>Wj'R-'365|1K~");
      defaultDocumentFactory0.createQName("7J");
      String string1 = "ixM3F2;}Q*zU&\"E";
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      try { 
        sAXReader0.setXMLReaderClassName("1;");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class 1; not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      String string0 = ".kTOY ";
      MockFile mockFile0 = new MockFile(".kTOY ", "//tmp/tmp/~{sZV0~{sZV0/tmp/~{sZV0~{sZV");
      mockFile0.mkdirs();
      SAXReader sAXReader0 = new SAXReader(false);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockFile mockFile0 = new MockFile("//v7<#Bo{uJ0/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0");
      MockFile.createTempFile("//v7<#Bo{uJ0/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0", "org.jaxen.FunctionCallException");
      mockFile0.toURL();
      mockFile0.mkdirs();
      URL uRL0 = MockURL.getHttpExample();
      MockURL.URL(uRL0, "(double)");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.isValidating();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2518217906291524
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = (XMLFilterImpl)sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl1);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.setEntityResolver(sAXContentHandler0);
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'l';
      charArray0[2] = 'y';
      xMLFilterImpl0.ignorableWhitespace(charArray0, 915, 915);
      sAXReader0.getEntityResolver();
      sAXReader0.getEntityResolver();
      xMLFilterImpl1.warning((SAXParseException) null);
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      bufferedInputStream0.mark(915);
      bufferedInputStream0.mark(3083);
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.187372721971773
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = (XMLFilterImpl)sAXReader0.installXMLFilter(xMLFilterImpl0);
      xMLFilterImpl1.startPrefixMapping("", "");
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl1);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.setEntityResolver(sAXContentHandler0);
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'l';
      charArray0[2] = 'y';
      xMLFilterImpl0.ignorableWhitespace(charArray0, 915, 915);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)88);
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.252191749933629
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = (XMLFilterImpl)sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl1);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.setEntityResolver(sAXContentHandler0);
      char[] charArray0 = new char[3];
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      charArray0[0] = '>';
      charArray0[1] = 'l';
      charArray0[2] = '\u0087';
      xMLFilterImpl0.ignorableWhitespace(charArray0, 915, 915);
      sAXReader0.getEntityResolver();
      sAXReader0.getEntityResolver();
      xMLFilterImpl1.warning((SAXParseException) null);
      URL uRL0 = MockURL.getFtpExample();
      URL uRL1 = MockURL.URL(uRL0, "S1El{$T~4*#EET^{");
      // Undeclared exception!
      try { 
        sAXReader0.read(uRL1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4648, 4648);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 4648);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream1, byteArrayInputStream0);
      SAXReader sAXReader0 = new SAXReader(true);
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertTrue(boolean0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      EntityResolver entityResolver0 = sAXReader0.createDefaultEntityResolver("TA:n(^5TpN+8'H0B`P");
      sAXReader0.setEntityResolver(entityResolver0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)53;
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      MockFile mockFile0 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      MockFile mockFile1 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile1.toURL();
      mockFile1.getAbsoluteFile();
      mockFile1.mkdir();
      mockFile1.getAbsolutePath();
      MockFile.createTempFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      MockFile mockFile2 = new MockFile(mockFile1, "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      File file0 = MockFile.createTempFile("//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|00/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0", "//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|00/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0");
      MockURL.getFileExample();
      MockFile mockFile3 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", ".kTOY ");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      mockFile3.getAbsoluteFile();
      MockFile mockFile4 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", ".kTOY ");
      mockFile3.toURL();
      mockFile3.mkdirs();
      file0.getCanonicalPath();
      file0.deleteOnExit();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".kTOY ");
      file0.setLastModified(0L);
      mockFile3.toURI();
      mockFile3.setWritable(false, false);
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.createXMLReader();
      Namespace namespace0 = Namespace.get("//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|00/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0", "//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|00/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0");
      assertEquals("Namespace", namespace0.getNodeTypeName());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, (byte)53);
      bufferedInputStream1.close();
      bufferedInputStream1.mark(17);
      bufferedInputStream1.mark((byte)53);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(bufferedInputStream1);
      bufferedInputStream1.markSupported();
      bufferedInputStream1.mark(1988);
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      bufferedInputStream0.close();
      StringReader stringReader0 = new StringReader(",oY}_TO`=A0dt*b-U");
      String string0 = "/";
      try { 
        sAXReader0.read((Reader) stringReader0, "/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:/// : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 1349);
      bufferedInputStream1.mark((byte)53);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(bufferedInputStream1);
      bufferedInputStream2.mark(4527);
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      String string0 = ",HM7hO$";
      SAXReader sAXReader1 = new SAXReader();
      sAXReader0.getXMLFilter();
      sAXReader1.installXMLFilter((XMLReader) null);
      try { 
        sAXReader0.setXMLReaderClassName("//home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~| not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "HQW'7;@g";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SAXReader sAXReader0 = new SAXReader(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.startDocument();
      SAXParseException sAXParseException0 = new SAXParseException("^;?6,bQ);I=Qn_", "", "", (-1720), (-1720));
      xMLFilterImpl0.warning(sAXParseException0);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0, false);
      sAXReader1.installXMLFilter(xMLFilterImpl0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createQName("");
      SAXReader sAXReader2 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader2.setXMLReaderClassName("");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setEncoding("Yqv0H&I`w/VXf_c");
      sAXReader0.getEncoding();
      sAXReader0.resetHandlers();
      ElementStack elementStack0 = new ElementStack(504);
      sAXReader0.getXMLFilter();
      XMLReaderAdapter xMLReaderAdapter0 = null;
      try {
        xMLReaderAdapter0 = new XMLReaderAdapter((XMLReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // XMLReader must not be null
         //
         verifyException("org.xml.sax.helpers.XMLReaderAdapter", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3868214863623547
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          boolean boolean0 = true;
          SAXReader sAXReader0 = new SAXReader(true);
          sAXReader0.setEncoding("Yqv0H&I`w/VXf_c");
          FileSystemHandling.createFolder((EvoSuiteFile) null);
          sAXReader0.getXMLReader();
          String string0 = "\\90Bj6MGDhD(; ";
          URL uRL0 = MockURL.getFtpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor437.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor437.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      MockFile mockFile1 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile0.toURL();
      File file0 = mockFile1.getAbsoluteFile();
      mockFile1.renameTo(mockFile0);
      file0.setExecutable(false, false);
      mockFile1.mkdir();
      MockFile mockFile2 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      MockFile mockFile3 = new MockFile(mockFile1, "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      File file1 = MockFile.createTempFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      file1.toURL();
      mockFile3.delete();
      mockFile0.getAbsolutePath();
      URI uRI0 = mockFile3.toURI();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      File file2 = mockFile3.getAbsoluteFile();
      MockFile mockFile4 = new MockFile(uRI0);
      URL uRL0 = file0.toURL();
      file0.mkdirs();
      file2.setLastModified(0L);
      mockFile1.deleteOnExit();
      mockFile0.setReadable(false);
      MockFile mockFile5 = new MockFile(uRI0);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      file1.getCanonicalPath();
      file1.deleteOnExit();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projets");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      file1.deleteOnExit();
      file0.deleteOnExit();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockURI.relativize(uRI0, uRI0);
      mockFile0.setWritable(false, false);
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~ (No such file or directory) Nested exception: /home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~ (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, (DefaultHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.4650276902273243
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.setEncoding("");
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      defaultDocumentFactory0.createQName("KB.JU^;KEfP", "KB.JU^;KEfP", "This Entity is read-only. It cannot be modified");
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.323506266372055
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      MockFile mockFile0 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      MockFile mockFile1 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile1.toURL();
      File file0 = mockFile1.getAbsoluteFile();
      mockFile1.mkdir();
      MockFile.createTempFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      MockFile mockFile2 = new MockFile(mockFile1, "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      File file1 = MockFile.createTempFile("//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|00/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0", "//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|00/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0");
      file1.toURL();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      mockFile2.getAbsoluteFile();
      MockFile mockFile3 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", ".kTOY ");
      file0.toURL();
      file0.mkdirs();
      file1.getCanonicalPath();
      file1.deleteOnExit();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".kTOY ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|00/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0");
      file0.toURI();
      mockFile0.setWritable(false, false);
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setEncoding("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      try { 
        sAXReader0.read(file1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"//HOME/UBUNTU/TERMITE/PROJETS/62_DOM4J/EUOS]0W3J &U~/\". Nested exception: Invalid encoding name \"//HOME/UBUNTU/TERMITE/PROJETS/62_DOM4J/EUOS]0W3J &U~/\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Mu");
      SAXReader sAXReader0 = new SAXReader(true);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, (byte)53);
      bufferedInputStream1.close();
      bufferedInputStream1.mark((-2936));
      bufferedInputStream1.mark((byte)53);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(bufferedInputStream1);
      bufferedInputStream1.mark(1988);
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setErrorHandler(defaultHandler0);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      String string0 = "guY[;";
      MockFile mockFile0 = new MockFile("guY[;", "guY[;");
      MockFile mockFile1 = new MockFile("guY[;");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile1.toURL();
      File file0 = MockFile.createTempFile("guY[;", "guY[;");
      MockFile mockFile2 = new MockFile(mockFile1, "guY[;");
      String string1 = "Bz8._^+VkE w@Zmf";
      MockURL.getFileExample();
      MockFile mockFile3 = new MockFile("guY[;", ".kTOY ");
      mockFile3.toURL();
      mockFile3.mkdirs();
      mockFile1.getCanonicalPath();
      file0.deleteOnExit();
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read((File) mockFile1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockFile mockFile0 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      MockFile mockFile1 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile0.toURL();
      File file0 = mockFile1.getAbsoluteFile();
      mockFile1.renameTo(mockFile0);
      file0.setExecutable(false, false);
      mockFile1.mkdir();
      MockFile mockFile2 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      MockFile mockFile3 = new MockFile(mockFile1, "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      File file1 = MockFile.createTempFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      file1.toURL();
      mockFile0.getAbsolutePath();
      URI uRI0 = mockFile3.toURI();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      File file2 = mockFile3.getAbsoluteFile();
      MockFile mockFile4 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      file0.toURL();
      file0.mkdirs();
      mockFile1.deleteOnExit();
      MockFile.createTempFile("//Imp/mp/~{sZV0sZ0/mp/~{sZV0sZ", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", file2);
      file1.getCanonicalPath();
      file1.deleteOnExit();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projets");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projets/62_dom4j");
      file1.deleteOnExit();
      file0.deleteOnExit();
      FileSystemHandling.appendStringToFile(evoSuiteFile1, ".kTOY ");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      MockURI.relativize(uRI0, uRI0);
      mockFile0.setWritable(false, false);
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read(file1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setStringInternEnabled(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("JUJc4j{XaPv?<");
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/features/namespaces", "http://xml.org/sax/features/namespaces");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader1 = new SAXReader();
      SAXContentHandler sAXContentHandler0 = sAXReader1.createContentHandler(parserAdapter0);
      sAXReader0.configureReader(parserAdapter0, sAXContentHandler0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Object object0 = new Object();
      Object object1 = new Object();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Class<String> class0 = String.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      Object object2 = new Object();
      BeanElement beanElement0 = new BeanElement("K<'YRoBC`dx~Wq", object2);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      QName qName0 = beanAttributeList0.getQName(0);
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeAttribute datatypeAttribute0 = new DatatypeAttribute(qName0, xSDatatype0);
      datatypeAttribute0.getParent();
      defaultDocumentFactory0.createAttribute((Element) null, "K<'YRoBC`dx~Wq", "K<'YRoBC`dx~Wq");
      defaultDocumentFactory0.createText("KO)rt&c;bob#i+");
      Namespace.get(" : ", "KO)rt&c;bob#i+");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("K<'YRoBC`dx~Wq");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity(" : ", " : ");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLReader();
      byte byte0 = (byte)87;
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)87, 68);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, (InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0, 24);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.3326774197215174
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "");
      String string1 = "}nvIOV;PT]-gl P<";
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3868214863623547
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<FilterInputStream> enumeration1 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      sequenceInputStream0.close();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream1);
      int int0 = 128;
      bufferedInputStream0.close();
      sequenceInputStream0.read();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0, 59);
      bufferedInputStream0.mark(2147483645);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(sequenceInputStream0);
      bufferedInputStream2.mark(128);
      bufferedInputStream2.reset();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      BufferedInputStream bufferedInputStream3 = new BufferedInputStream(pushbackInputStream0);
      bufferedInputStream2.mark(59);
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      pushbackInputStream0.skip((-629L));
      NamespaceStack namespaceStack0 = new NamespaceStack();
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.addHandler("//home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|", pruningDispatchHandler0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("4\"@Ku*YYr");
      sAXReader_SAXEntityResolver0.resolveEntity("v", "v");
      sAXReader_SAXEntityResolver0.resolveEntity("D\"g(MXmeO1", "//home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|");
      sAXReader_SAXEntityResolver0.resolveEntity("//home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|", "4\"@Ku*YYr");
      SAXReader sAXReader1 = new SAXReader();
      Namespace.get("!&aV'R-Wg|)ivI");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      // Undeclared exception!
      try { 
        namespaceStack0.getNamespace((byte)53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      sAXReader0.createDefaultEntityResolver("::text()");
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)87;
      DOMNamespace dOMNamespace0 = new DOMNamespace("", "//home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.clear();
      namespaceStack0.push("::text()", "namespace()");
      // Undeclared exception!
      try { 
        namespaceStack0.getNamespace((byte)87);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 87, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<FilterInputStream> enumeration1 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream1);
      bufferedInputStream0.close();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0, 59);
      bufferedInputStream0.mark(2147483645);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(sequenceInputStream0);
      bufferedInputStream2.mark(128);
      bufferedInputStream2.reset();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader();
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      String string0 = "552rnQ6Ae,d<?c";
      String string1 = " : ";
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createQName("1;", "552rnQ6Ae,d<?c");
      defaultDocumentFactory1.createQName(" : ");
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      StringReader stringReader0 = new StringReader("http://xml.org/sax/properties/lexical-handler");
      try { 
        sAXReader0.read((Reader) stringReader0, "552rnQ6Ae,d<?c");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document 552rnQ6Ae,d<?c : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      MockFile mockFile0 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      MockFile mockFile1 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile1.toURL();
      mockFile1.getAbsoluteFile();
      mockFile1.mkdir();
      MockFile.createTempFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      MockFile mockFile2 = new MockFile(mockFile1, "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      File file0 = MockFile.createTempFile("//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|00/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0", "//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|00/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0");
      MockURL.getFileExample();
      MockFile mockFile3 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", ".kTOY ");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      mockFile3.getAbsoluteFile();
      MockFile mockFile4 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", ".kTOY ");
      mockFile3.toURL();
      mockFile3.mkdirs();
      file0.getCanonicalPath();
      file0.deleteOnExit();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".kTOY ");
      SAXReader sAXReader0 = new SAXReader();
      String string0 = null;
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.320573333787351
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("JUJc4j{XaPv?<");
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sa/features/namespaces", "http://xml.org/sa/features/namespaces");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.configureReader(parserAdapter0, sAXContentHandler0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = 92;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 92, (byte)87);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 61, 92);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createDefaultEntityResolver("");
      byte byte0 = (byte)87;
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 61, 92);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createDefaultEntityResolver("//tmp/tmp/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|00/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|00/tmp/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|00/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0");
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.3219307546040406
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream((InputStream) null, (byte)53);
      bufferedInputStream0.mark((byte)53);
      bufferedInputStream0.close();
      bufferedInputStream0.mark((-2936));
      bufferedInputStream1.mark(394);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(bufferedInputStream0);
      BufferedInputStream bufferedInputStream3 = new BufferedInputStream(bufferedInputStream1);
      bufferedInputStream3.mark(53);
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader1.read((InputStream) bufferedInputStream2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4648, 4648);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 4648);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream1, byteArrayInputStream0);
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.3660231847196305
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, (byte)53);
      bufferedInputStream1.close();
      bufferedInputStream1.mark((-2936));
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(bufferedInputStream1);
      BufferedInputStream bufferedInputStream3 = new BufferedInputStream(bufferedInputStream0);
      bufferedInputStream0.mark((-2936));
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      pipedInputStream0.markSupported();
      try { 
        sAXReader0.read((InputStream) bufferedInputStream2, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Stream closed Nested exception: Stream closed
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Mu");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.setXMLReader(parserAdapter0);
      try { 
        sAXReader0.setProperty("//home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|", (Object) null);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: //home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "http://xml.org/sax/features/namespace-prefixes");
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      locator2Impl0.setSystemId("Error on line ");
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl1);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locator2Impl3.getPublicId();
      Locator2Impl locator2Impl4 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl4);
      locator2Impl0.setPublicId("Error on line ");
      LocatorImpl locatorImpl2 = new LocatorImpl();
      locator2Impl3.setLineNumber(73);
      locator2Impl3.setSystemId("Error on line ");
      LocatorImpl locatorImpl3 = new LocatorImpl(locatorImpl0);
      locator2Impl1.setSystemId("Error on line ");
      locatorImpl3.getColumnNumber();
      locatorImpl3.setSystemId((String) null);
      locator2Impl2.setSystemId("qd$!^0;9c9xlu");
      locatorImpl0.getSystemId();
      Locator2Impl locator2Impl6 = new Locator2Impl(locatorImpl1);
      LocatorImpl locatorImpl4 = new LocatorImpl();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createText("4QxJ.~K0:'2");
      Namespace.get((String) null, "qd$!^0;9c9xlu");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertNotNull(documentFactory0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertSame(documentFactory0, defaultDocumentFactory0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl1);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl4 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl0);
      locatorImpl3.getColumnNumber();
      LocatorImpl locatorImpl4 = new LocatorImpl(locatorImpl3);
      locatorImpl0.setPublicId("=1-");
      LocatorImpl locatorImpl5 = new LocatorImpl();
      LocatorImpl locatorImpl6 = new LocatorImpl(locator2Impl4);
      locatorImpl4.setPublicId("=1-");
      LocatorImpl locatorImpl7 = new LocatorImpl();
      SAXReader sAXReader0 = new SAXReader(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u~>i^,}{ta\"Kg");
      sAXReader0.resetHandlers();
      Object object0 = new Object();
      Object object1 = new Object();
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)8;
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("text()");
      sAXReader_SAXEntityResolver0.resolveEntity("text()", "text()");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.removeHandler("text()");
      DOMNamespace dOMNamespace0 = new DOMNamespace("org.dom4j.tree.DefaultNamespace", "c");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.contains(dOMNamespace0);
      namespaceStack0.getDefaultNamespace();
      // Undeclared exception!
      try { 
        namespaceStack0.getNamespace((byte)8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.setValidation(false);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, (byte)53);
      bufferedInputStream1.close();
      bufferedInputStream1.mark((-2936));
      bufferedInputStream1.mark((byte)53);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(bufferedInputStream1);
      BufferedInputStream bufferedInputStream3 = new BufferedInputStream(bufferedInputStream0);
      bufferedInputStream2.mark(1988);
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      pipedInputStream0.markSupported();
      try { 
        sAXReader0.setProperty("a\"'-xaP81yRS4)V`zF", (Object) null);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'a\"'-xaP81yRS4)V`zF' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockFile mockFile0 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      MockFile mockFile1 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile0.toURL();
      File file0 = mockFile1.getAbsoluteFile();
      mockFile1.renameTo(mockFile0);
      file0.setExecutable(false, false);
      mockFile1.mkdir();
      MockFile mockFile2 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      MockFile mockFile3 = new MockFile(mockFile1, "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      File file1 = MockFile.createTempFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      file1.toURL();
      mockFile3.delete();
      mockFile0.getAbsolutePath();
      mockFile3.toURI();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      File file2 = mockFile3.getAbsoluteFile();
      MockFile mockFile4 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      file0.toURL();
      file0.mkdirs();
      file2.setLastModified(0L);
      mockFile1.deleteOnExit();
      mockFile0.setReadable(false);
      MockFile.createTempFile("//Imp/mp/~{sZV0sZ0/mp/~{sZV0sZ", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", file2);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      file1.getCanonicalPath();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.getXMLReader();
      Namespace namespace0 = Namespace.get("/tmp/home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/0/home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~", "//Imp/mp/~{sZV0sZ0/mp/~{sZV0sZ");
      assertEquals("/tmp/home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/0/home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~", namespace0.getPrefix());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader0.setMergeAdjacentText(true);
      defaultDocumentFactory0.createDocument("http://xml.org/sax/features/namespaces");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      ElementStack elementStack0 = new ElementStack();
      // Undeclared exception!
      try { 
        dispatchHandler0.onStart(elementStack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.DispatchHandler", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte byte0 = (byte)87;
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = 115;
      int int1 = 82;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)87, 82);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "//home/ubuntu/termite/projects/62_dom4j/~s5gb68/Q");
      byteArrayInputStream0.reset();
      DOMDocument dOMDocument0 = new DOMDocument();
      try { 
        sAXReader0.setFeature("", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockFile mockFile0 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      MockFile mockFile1 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile0.toURL();
      File file0 = mockFile1.getAbsoluteFile();
      mockFile1.renameTo(mockFile0);
      file0.setExecutable(false, false);
      mockFile1.mkdir();
      MockFile mockFile2 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      MockFile mockFile3 = new MockFile(mockFile1, "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      File file1 = MockFile.createTempFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      mockFile3.delete();
      mockFile0.getAbsolutePath();
      URI uRI0 = mockFile3.toURI();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      File file2 = mockFile3.getAbsoluteFile();
      MockFile mockFile4 = new MockFile(uRI0);
      mockFile3.toURL();
      file0.mkdirs();
      file2.setLastModified(0L);
      mockFile0.mkdir();
      mockFile1.deleteOnExit();
      mockFile0.setReadable(false);
      MockFile mockFile5 = new MockFile(uRI0);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      file1.getCanonicalPath();
      file1.deleteOnExit();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projets");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      file1.deleteOnExit();
      file0.deleteOnExit();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockURI.relativize(uRI0, uRI0);
      mockFile0.setWritable(false, false);
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class //home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/ not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, (byte)53);
      bufferedInputStream1.close();
      bufferedInputStream1.mark((-2936));
      bufferedInputStream1.mark((byte)53);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(bufferedInputStream1);
      boolean boolean0 = bufferedInputStream1.markSupported();
      bufferedInputStream1.mark(1988);
      SAXReader sAXReader0 = new SAXReader((String) null);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, (byte)53);
      bufferedInputStream1.close();
      bufferedInputStream1.mark((-2936));
      bufferedInputStream1.mark((byte)53);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(bufferedInputStream1);
      SAXReader sAXReader0 = new SAXReader(true);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      String string0 = "8xyY&";
      MockFile mockFile0 = new MockFile((File) null, "//tmp/G#))?t M*73b+0/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|");
      MockFile.createTempFile("8xyY&", "8xyY&", (File) mockFile0);
      MockURL.getHttpExample();
      try { 
        MockURL.URL("(.vE:-M'o", "//tmp/G#))?t M*73b+0/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|", "*[name()='");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: (.ve:-m'o
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = "";
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      StringReader stringReader0 = new StringReader("");
      DefaultDocument defaultDocument0 = new DefaultDocument();
      assertEquals(NodeType.DOCUMENT_NODE, defaultDocument0.getNodeTypeEnum());
      assertEquals("Document", defaultDocument0.getNodeTypeName());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getDispatchHandler();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createQName("LuHCK:\"l@{UOv", "]:PwJ@Se0 .>");
      defaultDocumentFactory0.createQName((String) null);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createText("//tmp/tmp/~{sZV0~{sZV0/tmp/~{sZV0~{sZV");
      Namespace namespace0 = Namespace.get("LuHCK:\"l@{UOv", "[#n(u.aZ@u3`Ws");
      assertEquals("LuHCK:\"l@{UOv", namespace0.getPrefix());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXReader0.setDefaultHandler(sAXModifyElementHandler0);
      String string0 = null;
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createPattern("org.dom4j.datatype.DatatypeAttribute");
      // Undeclared exception!
      try { 
        defaultDocumentFactory3.createQName("org.dom4j.bean.BeanDocumentFactory", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      sAXReader0.setDocumentFactory(documentFactory0);
      String string0 = "scCQ4VgLpJ";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("scCQ4VgLpJ");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = new QName("http://xml.org/sax/features/string-interning");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createElement((QName) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      // Undeclared exception!
      try { 
        defaultDocumentFactory1.createPattern("{k>3.n9tBNo>@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid XPath expression: {k>3.n9tBNo>@ Unexpected '{k>3.n9tBNo>@'
         //
         verifyException("org.dom4j.xpath.XPathPattern", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      try { 
        sAXReader0.configureReader(parserAdapter0, defaultHandler2_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@2ce20190 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setIgnoreComments(true);
      Object object0 = new Object();
      Object object1 = new Object();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      try { 
        sAXReader0.setProperty("Mu", (Object) null);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'Mu' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createQName("WW6v", "WW6v");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      String string0 = "cXzl";
      defaultDocumentFactory0.createQName("WW6v", "cXzl");
      defaultDocumentFactory1.createQName("1;");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory2);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.6936743058024093
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = (XMLFilterImpl)sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl1);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.setEntityResolver(sAXContentHandler0);
      char[] charArray0 = new char[3];
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      charArray0[0] = '>';
      charArray0[1] = 'l';
      charArray0[2] = 'y';
      xMLFilterImpl0.ignorableWhitespace(charArray0, 915, 915);
      sAXReader0.getEntityResolver();
      sAXReader0.setXMLReader(xMLFilterImpl0);
      sAXReader0.getEntityResolver();
      xMLFilterImpl1.warning((SAXParseException) null);
      XMLFilterImpl xMLFilterImpl2 = (XMLFilterImpl)sAXReader0.installXMLFilter(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl3 = (XMLFilterImpl)sAXReader0.getXMLReader();
      sAXReader0.createContentHandler(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl4 = (XMLFilterImpl)sAXReader0.getXMLReader();
      sAXReader0.createContentHandler(xMLFilterImpl4);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertSame(xMLFilterImpl4, xMLFilterImpl3);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte byte0 = (byte)87;
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = 115;
      int int1 = 82;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)87, 82);
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.8337288996753665
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = (XMLFilterImpl)sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl1);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.setEntityResolver(sAXContentHandler0);
      char[] charArray0 = new char[3];
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      charArray0[0] = '>';
      charArray0[1] = 'l';
      charArray0[2] = 'y';
      xMLFilterImpl0.ignorableWhitespace(charArray0, 915, 915);
      sAXReader0.getEntityResolver();
      sAXReader0.getEntityResolver();
      xMLFilterImpl1.warning((SAXParseException) null);
      XMLFilterImpl xMLFilterImpl2 = (XMLFilterImpl)sAXReader0.installXMLFilter(xMLFilterImpl1);
      xMLFilterImpl2.getDTDHandler();
      sAXReader0.getXMLReader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sAXReader0.createContentHandler(xMLFilterImpl2);
      sAXReader0.isIgnoreComments();
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<FilterInputStream> enumeration1 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream1, 44);
      bufferedInputStream0.close();
      bufferedInputStream0.mark(44);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      pipedInputStream0.markSupported();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.366660627207849
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      MockFile mockFile0 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      MockFile mockFile1 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile0.toURL();
      MockFile mockFile2 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      mockFile1.mkdir();
      MockFile mockFile3 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      MockFile mockFile4 = new MockFile(mockFile1, "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      File file0 = MockFile.createTempFile("//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|00/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0", "//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|00/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0");
      file0.toURL();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      mockFile4.getAbsoluteFile();
      MockFile mockFile5 = new MockFile("//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|00/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0");
      mockFile2.toURL();
      mockFile2.mkdirs();
      mockFile1.deleteOnExit();
      file0.getCanonicalPath();
      file0.deleteOnExit();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projets");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projets/62_dom4j");
      file0.deleteOnExit();
      FileSystemHandling.appendStringToFile(evoSuiteFile1, ".kTOY ");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|00/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0");
      mockFile2.toURI();
      mockFile0.setWritable(false, false);
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/g:5kNE-G!~o3&G+H&0g:5kNE-G!~o3&G+H&");
      sAXReader_SAXEntityResolver0.resolveEntity("[w6)QcX/0<?}x }(/I", (String) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.close();
      Enumeration<FilterInputStream> enumeration1 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream1);
      bufferedInputStream0.close();
      sequenceInputStream1.read();
      BufferedInputStream bufferedInputStream1 = null;
      try {
        bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.323506266372055
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      MockFile mockFile0 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      MockFile mockFile1 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile1.toURL();
      mockFile1.getAbsoluteFile();
      mockFile1.mkdir();
      MockFile.createTempFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      MockFile mockFile2 = new MockFile(mockFile1, "//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/");
      File file0 = MockFile.createTempFile("//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|00/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0", "//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|00/tmp/home/ubuntu/termite/projects/62_dom4j/aUoS]0W3J &u~|0");
      MockURL.getFileExample();
      MockFile mockFile3 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", ".kTOY ");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      mockFile3.getAbsoluteFile();
      MockFile mockFile4 = new MockFile("//home/ubuntu/termite/projets/62_dom4j/eUoS]0W3J &u~/", ".kTOY ");
      mockFile3.toURL();
      mockFile3.mkdirs();
      file0.getCanonicalPath();
      file0.deleteOnExit();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".kTOY ");
      file0.setLastModified(0L);
      mockFile3.toURI();
      file0.getAbsoluteFile();
      mockFile3.setWritable(false, false);
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.465500503466094
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 1349);
      bufferedInputStream1.mark((byte)53);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(bufferedInputStream1);
      bufferedInputStream2.mark(4527);
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      SAXReader sAXReader1 = new SAXReader(true);
      sAXReader1.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      try { 
        sAXReader0.read((InputStream) bufferedInputStream1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Stream closed Nested exception: Stream closed
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.getQNames();
      QName qName0 = defaultDocumentFactory0.createQName("//home/ubuntu/termite/projects/62_dom4j/:^ZFjJ/:^ZFjJ0:^ZFjJ", "//home/ubuntu/termite/projects/62_dom4j/)9Z&9A\"v/G{/'9/A^lwrKsRFWW|R0Hk<rb[Fs&i", " : ");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLFilter((XMLFilter) null);
      sAXReader0.getXMLFilter();
      sAXReader0.getXMLFilter();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.getEncoding();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      xMLFilterImpl1.ignorableWhitespace(charArray0, 1, 1);
      sAXReader0.getEntityResolver();
      sAXReader0.getEntityResolver();
      xMLFilterImpl1.warning((SAXParseException) null);
      sAXReader0.installXMLFilter(xMLFilterImpl1);
      sAXReader0.getXMLReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      String string0 = "h";
      Namespace namespace0 = new Namespace("kwaW@", "%@z[vfT:3w6}");
      namespace0.asXML();
      Namespace.get("kwaW@");
      namespace0.clone();
      try { 
        sAXReader0.setXMLReaderClassName("%@z[vfT:3w6}");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class %@z[vfT:3w6} not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.420295386033961
  */
  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, (byte)53);
      bufferedInputStream1.close();
      bufferedInputStream1.mark((-2936));
      bufferedInputStream1.mark((byte)53);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(bufferedInputStream1);
      BufferedInputStream bufferedInputStream3 = new BufferedInputStream(bufferedInputStream0);
      bufferedInputStream0.mark((-2936));
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      pipedInputStream0.mark((-2936));
      NamespaceStack namespaceStack0 = new NamespaceStack();
      pipedInputStream0.markSupported();
      try { 
        sAXReader0.read((InputStream) bufferedInputStream1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Stream closed Nested exception: Stream closed
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte byte0 = (byte)87;
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = 115;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)87, 115);
      byteArrayInputStream0.reset();
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl2 = new LocatorImpl();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl3 = new LocatorImpl();
      LocatorImpl locatorImpl4 = new LocatorImpl(locator2Impl0);
      locatorImpl0.setColumnNumber((-2795));
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl3);
      LocatorImpl locatorImpl5 = new LocatorImpl(locator2Impl5);
      locatorImpl3.getSystemId();
      locatorImpl1.setSystemId("Error on line ");
      locatorImpl2.getColumnNumber();
      LocatorImpl locatorImpl6 = new LocatorImpl(locatorImpl4);
      Locator2Impl locator2Impl6 = new Locator2Impl();
      locator2Impl3.getPublicId();
      Locator2Impl locator2Impl7 = new Locator2Impl(locatorImpl6);
      locatorImpl4.setPublicId("");
      LocatorImpl locatorImpl7 = new LocatorImpl();
      SAXReader sAXReader0 = new SAXReader(true);
      Object object0 = new Object();
      Object object1 = new Object();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      StringReader stringReader0 = new StringReader("file://");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
