/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 23:26:00 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.008925238667177
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("2A}T+?4", false, (String) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-expandEmpty)";
      stringArray0[1] = "2A}T+?4";
      stringArray0[2] = "Invalid attribute quote caracter (";
      stringArray0[3] = "Invalid attribute quote caracter (";
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setTrimText(false);
      outputFormat0.setIndent("2A}T+?4");
      outputFormat0.getEncoding();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setEncoding("!");
      assertEquals("!", outputFormat1.getEncoding());
      
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.326382410687197
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = new OutputFormat("hTlO[B1Y7Mao^av", false, "hTlO[B1Y7Mao^av");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-expandEmmty)";
      stringArray0[1] = "-expandEmmty)";
      stringArray0[3] = "hTlO[B1Y7Mao^av";
      outputFormat1.parseOptions(stringArray0, 0);
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      String[] stringArray1 = new String[2];
      stringArray1[0] = "-omitEncoding";
      stringArray1[1] = "hTlO[B1Y7Mao^av";
      outputFormat0.parseOptions(stringArray1, 0);
      assertTrue(outputFormat0.isOmitEncoding());
      
      OutputFormat outputFormat2 = new OutputFormat("ovdgUm4$I#&", false);
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat3.isOmitEncoding());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5164586295246056
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "-expandEmpty'";
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty'", true, "-expandEmpty'");
      int int0 = 0;
      outputFormat0.setIndentSize(0);
      outputFormat0.setIndentSize(0);
      boolean boolean0 = true;
      outputFormat0.setIndent("-expandEmpty'");
      outputFormat0.setIndent("-expandEmpty'");
      // Undeclared exception!
      outputFormat0.setIndentSize(2147483645);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3036548834525026
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      OutputFormat outputFormat0 = new OutputFormat("-expa'dEmmty)", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-expandEmpty'";
      stringArray0[1] = "-newlines";
      stringArray0[2] = "-expandEmpty'";
      stringArray0[3] = "-newlines";
      stringArray0[4] = "-newlines";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.2726355432283127
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = new OutputFormat("GZ0v+KZh?~Z}_m", true, "-lineSeparator");
      OutputFormat outputFormat2 = new OutputFormat("-lineSeparator", true);
      String[] stringArray0 = new String[0];
      outputFormat2.parseOptions(stringArray0, 0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "-lineSeparator";
      stringArray1[1] = "-expandEmmty)";
      stringArray1[2] = "ERN+FO)`$PE4T6KmD";
      stringArray1[3] = "-trimText";
      stringArray1[4] = "-trimText";
      stringArray1[5] = "-lineSeparator";
      stringArray1[6] = "GZ0v+KZh?~Z}_m";
      outputFormat1.parseOptions(stringArray1, 0);
      outputFormat0.parseOptions(stringArray1, 0);
      outputFormat0.parseOptions(stringArray1, 0);
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      outputFormat3.parseOptions(stringArray1, 684);
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions((String[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0570954878456993
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isNewlines());
      
      OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-padText";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals(1, int0);
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = new OutputFormat();
      assertFalse(outputFormat2.isTrimText());
      assertFalse(outputFormat2.isPadText());
      assertFalse(outputFormat2.isNewlines());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat3.getIndent());
      assertEquals(0, outputFormat3.getNewLineAfterNTags());
      assertEquals("\n", outputFormat3.getLineSeparator());
      assertTrue(outputFormat3.isTrimText());
      assertTrue(outputFormat3.isPadText());
      assertFalse(outputFormat3.isSuppressDeclaration());
      assertTrue(outputFormat3.isNewlines());
      assertTrue(outputFormat3.isNewLineAfterDeclaration());
      assertFalse(outputFormat3.isOmitEncoding());
      assertEquals('\"', outputFormat3.getAttributeQuoteCharacter());
      assertEquals("UTF-8", outputFormat3.getEncoding());
      assertFalse(outputFormat3.isXHTML());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3635525261215684
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat0 = new OutputFormat("-indent", true, "-indent");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-expandEmpty)";
      stringArray0[1] = "-expandEmpty)";
      stringArray0[2] = "-trimText";
      stringArray0[3] = "-indent";
      stringArray0[6] = "-expandEmpty)";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1043164582292713
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-suppressDeclaration");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-newlines";
      stringArray0[1] = "-suppressDeclaration";
      stringArray0[2] = ")";
      stringArray0[3] = ")";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5656377593693374
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat0 = new OutputFormat("-inhent");
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-indentSize";
      stringArray0[1] = "-inhent";
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-inhent\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1236872039715937
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[16];
      stringArray0[0] = "-xhtml-expandEmmty)";
      stringArray0[1] = "-xhtml-expandEmmty)";
      stringArray0[2] = "#4I3";
      stringArray0[3] = "#4I3";
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isXHTML());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat1.isXHTML());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.66233753390471
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-expanbEmptykb{z?IO %xOa,}B|";
      stringArray0[1] = "-expanbEmptykb{z?IO %xOa,}B|";
      outputFormat0.setNewLineAfterNTags(1);
      stringArray0[2] = "-expanbEmptykb{z?IO %xOa,}B|";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "-expanbEmptykb{z?IO %xOa,}B|";
      stringArray1[1] = "  ";
      stringArray1[2] = "-expanbEmptykb{z?IO %xOa,}B|";
      outputFormat0.getNewLineAfterNTags();
      assertEquals(1, outputFormat0.getNewLineAfterNTags());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = new OutputFormat("-expanbEmptykb{z?IO %xOa,}B|");
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7513195185353623
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setAttributeQuoteCharacter('\'');
      assertEquals('\'', outputFormat0.getAttributeQuoteCharacter());
      
      String[] stringArray0 = new String[16];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "-trimText";
      stringArray0[3] = "#4I3";
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setPadText(true);
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      outputFormat2.setIndent("-trimText");
      assertTrue(outputFormat2.isNewlines());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("~z:vAZXfsb1yF", false, "KL+TEGU_?B");
      assertEquals("~z:vAZXfsb1yF", outputFormat0.getIndent());
      
      outputFormat0.setIndent((String) null);
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("KL+TEGU_?B", outputFormat0.getEncoding());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmptyvtrimRex", false, "-expandEmptyvtrimRex");
      int int0 = 0;
      String[] stringArray0 = new String[0];
      outputFormat0.parseOptions(stringArray0, 0);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-237));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -237
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "-expandEmpty'";
      boolean boolean0 = false;
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty'", false, "-expandEmpty'");
      int int0 = 0;
      outputFormat0.setIndentSize(0);
      outputFormat0.setSuppressDeclaration(false);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('!');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (!)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setNewLineAfterNTags((-482));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-expandEmptyvtrimRex";
      stringArray0[1] = "se|B";
      outputFormat0.setSuppressDeclaration(true);
      stringArray0[2] = "-expandEmptyvtrimRex";
      stringArray0[3] = "-expandEmptyvtrimRex";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertEquals((-482), int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2161907404847625
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isPadText());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setAttributeQuoteCharacter('\"');
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-inhent";
      stringArray0[1] = "-inhent";
      stringArray0[2] = "-inhent";
      stringArray0[3] = "-inhent";
      stringArray0[4] = "-inhent";
      stringArray0[5] = "-inhent";
      stringArray0[6] = "-inhent";
      stringArray0[7] = "-inhent";
      stringArray0[8] = "-inhent";
      outputFormat0.parseOptions(stringArray0, 0);
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat3.isExpandEmptyElements());
      assertTrue(outputFormat3.isTrimText());
      assertFalse(outputFormat3.isXHTML());
      assertTrue(outputFormat3.isNewLineAfterDeclaration());
      assertTrue(outputFormat3.isNewlines());
      assertEquals("UTF-8", outputFormat3.getEncoding());
      assertEquals("\n", outputFormat3.getLineSeparator());
      assertEquals("  ", outputFormat3.getIndent());
      assertTrue(outputFormat3.isPadText());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.876156142363588
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setLineSeparator("t8Y?%7u>/C)X");
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setXHTML(true);
      outputFormat0.isXHTML();
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.isTrimText();
      outputFormat0.isNewlines();
      OutputFormat outputFormat1 = new OutputFormat("hfXk");
      outputFormat1.setTrimText(false);
      outputFormat0.setNewlines(true);
      assertEquals("t8Y?%7u>/C)X", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.4048020956387437
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.setIndentSize(0);
      outputFormat0.setLineSeparator("");
      outputFormat0.setIndentSize((-1042));
      outputFormat0.setNewLineAfterDeclaration(false);
      String[] stringArray0 = new String[0];
      outputFormat0.parseOptions(stringArray0, 5);
      outputFormat0.setIndentSize(5);
      outputFormat0.getEncoding();
      outputFormat0.setEncoding((String) null);
      outputFormat0.setEncoding("");
      outputFormat0.setNewLineAfterNTags(5);
      outputFormat0.isPadText();
      outputFormat0.isNewlines();
      outputFormat0.setIndentSize(0);
      outputFormat0.isNewLineAfterDeclaration();
      String string0 = OutputFormat.STANDARD_INDENT;
      outputFormat0.isOmitEncoding();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setNewlines(false);
      outputFormat1.setExpandEmptyElements(false);
      outputFormat1.isNewLineAfterDeclaration();
      outputFormat0.getLineSeparator();
      assertEquals(5, outputFormat0.getNewLineAfterNTags());
      
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0593133448245116
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "1C5&,m\"t&|*[9J>T2K";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setEncoding("");
      outputFormat0.setIndent(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.isOmitEncoding();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setPadText(true);
      outputFormat1.setNewLineAfterNTags(0);
      outputFormat1.setExpandEmptyElements(true);
      outputFormat1.setPadText(true);
      outputFormat1.setExpandEmptyElements(true);
      outputFormat0.setEncoding("");
      outputFormat1.setPadText(false);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.isXHTML();
      outputFormat1.parseOptions(stringArray0, 0);
      outputFormat1.setIndent("");
      outputFormat1.isOmitEncoding();
      outputFormat1.getNewLineAfterNTags();
      outputFormat0.isSuppressDeclaration();
      outputFormat1.isExpandEmptyElements();
      outputFormat1.getEncoding();
      assertTrue(outputFormat1.isExpandEmptyElements());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      char char0 = '&';
      OutputFormat outputFormat0 = new OutputFormat("(QFOY@ PC<wZ$wMxS-r", false, "Z{)");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('&');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (&)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6182894328470765
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      assertEquals("", outputFormat0.getIndent());
      
      String[] stringArray0 = new String[3];
      outputFormat0.setIndent("");
      stringArray0[0] = "Ea~|m]GrGD";
      stringArray0[2] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.isNewlines();
      outputFormat0.setTrimText(false);
      outputFormat0.setNewlines(false);
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.658208530445275
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setEncoding((String) null);
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions((String[]) null, (-1935101450));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2265351295364386
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setLineSeparator("bm!1T.S=%Lth");
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setXHTML(true);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setPadText(true);
      outputFormat0.setOmitEncoding(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewlines(true);
      outputFormat0.getIndent();
      outputFormat1.setSuppressDeclaration(false);
      outputFormat0.setIndent(true);
      outputFormat1.setLineSeparator("}XY57]7Jg0[;#a:!3I");
      outputFormat1.isNewLineAfterDeclaration();
      outputFormat0.setPadText(true);
      outputFormat1.setTrimText(true);
      String string0 = OutputFormat.STANDARD_INDENT;
      assertEquals("  ", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-indentSiSe", false, "-indentSiSe");
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setNewLineAfterDeclaration(false);
      OutputFormat outputFormat1 = new OutputFormat("-expandEmptyvtrimRex", true, "");
      outputFormat0.setOmitEncoding(false);
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "g%";
      stringArray0[1] = "-expandEmptyvtrimRex";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "";
      stringArray0[5] = "g%";
      stringArray0[6] = "-indentSiSe";
      stringArray0[7] = "8B`R&!M";
      stringArray0[8] = "";
      outputFormat1.getEncoding();
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7687280585396392
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      String[] stringArray0 = new String[3];
      outputFormat0.setIndent("");
      stringArray0[0] = "";
      outputFormat0.setPadText(false);
      outputFormat0.parseOptions(stringArray0, 0);
      boolean boolean0 = outputFormat0.isNewlines();
      assertTrue(boolean0);
      
      outputFormat0.setTrimText(false);
      outputFormat0.setNewlines(false);
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[3];
      int int0 = 1;
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.507010372243086
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      outputFormat0.setLineSeparator("");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setNewlines(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.isPadText();
      outputFormat0.setEncoding("");
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setNewLineAfterDeclaration(false);
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat1.setIndentSize(0);
      outputFormat1.setEncoding("");
      outputFormat0.parseOptions(stringArray0, 683);
      outputFormat1.setNewLineAfterDeclaration(true);
      outputFormat0.isXHTML();
      outputFormat0.setXHTML(false);
      outputFormat2.setEncoding("XbG{EG3T`8KD[(@");
      outputFormat0.getIndent();
      outputFormat2.getIndent();
      outputFormat0.setIndent(true);
      outputFormat0.getLineSeparator();
      assertTrue(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isTrimText());
      
      outputFormat0.setTrimText(true);
      boolean boolean0 = outputFormat0.isTrimText();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9337689012151085
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setSuppressDeclaration(true);
      outputFormat0.setTrimText(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setSuppressDeclaration(true);
      String string0 = outputFormat0.getIndent();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setIndentSize((-1883646251));
      assertTrue(outputFormat2.isNewlines());
      
      outputFormat2.setNewlines(false);
      outputFormat1.setPadText(false);
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = string0;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      outputFormat3.parseOptions(stringArray0, 1020);
      outputFormat1.setIndent("X-:");
      OutputFormat outputFormat4 = OutputFormat.createPrettyPrint();
      assertEquals("\n", outputFormat4.getLineSeparator());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.004183953258615
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setSuppressDeclaration(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent(true);
      outputFormat0.setTrimText(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.getIndent();
      assertTrue(outputFormat0.isSuppressDeclaration());
      
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setIndentSize((-1883646251));
      outputFormat2.setNewlines(false);
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "  ";
      stringArray0[1] = "  ";
      stringArray0[2] = "  ";
      stringArray0[3] = "  ";
      stringArray0[4] = "  ";
      stringArray0[5] = "  ";
      stringArray0[6] = "  ";
      outputFormat3.parseOptions(stringArray0, 1020);
      outputFormat1.setIndent("X-:");
      assertFalse(outputFormat1.isExpandEmptyElements());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9397928111645655
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      outputFormat0.setNewLineAfterDeclaration(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      outputFormat0.parseOptions(stringArray0, 1612);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndent("");
      outputFormat0.setIndentSize((-4544));
      outputFormat0.setNewLineAfterNTags(1713);
      outputFormat0.setLineSeparator("");
      outputFormat0.isOmitEncoding();
      outputFormat0.isXHTML();
      outputFormat0.isSuppressDeclaration();
      outputFormat0.isSuppressDeclaration();
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertEquals(1713, outputFormat0.getNewLineAfterNTags());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3945396266384384
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setIndentSize((-1350));
      outputFormat0.setNewLineAfterNTags(63);
      outputFormat0.setTrimText(false);
      outputFormat0.setIndentSize(1641);
      outputFormat0.setLineSeparator("g\"61n>.y('~x-@Z");
      outputFormat0.isPadText();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.isOmitEncoding();
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setIndent("g\"61n>.y('~x-@Z");
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setIndent("Iy[sDh\"U.s;Ij2");
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setLineSeparator("Iy[sDh\"U.s;Ij2");
      outputFormat1.setIndent("g\"61n>.y('~x-@Z");
      outputFormat0.setIndent(true);
      outputFormat0.setLineSeparator("O$Q,&+");
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setIndentSize((-1719));
      outputFormat0.isSuppressDeclaration();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "g\"61n>.y('~x-@Z";
      stringArray0[1] = "Iy[sDh\"U.s;Ij2";
      outputFormat1.parseOptions(stringArray0, 2292);
      assertEquals("g\"61n>.y('~x-@Z", outputFormat1.getIndent());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.753349994178044
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.isPadText();
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      String[] stringArray0 = new String[0];
      OutputFormat.createCompactFormat();
      outputFormat0.setLineSeparator("");
      assertEquals("  ", outputFormat0.getIndent());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("~z:vAZXfsb1yF", false, "KL+TEGU_OZ");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-*xpandEmp:yverimRex";
      stringArray0[1] = "KL+TEGU_OZ";
      stringArray0[2] = "~z:vAZXfsb1yF";
      String string0 = outputFormat0.getLineSeparator();
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", string0);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("KL+TEGU_OZ", outputFormat0.getEncoding());
      assertEquals("~z:vAZXfsb1yF", outputFormat0.getIndent());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setOmitEncoding(true);
      outputFormat0.isOmitEncoding();
      String string0 = OutputFormat.STANDARD_INDENT;
      assertEquals("  ", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-suppressDeclaration");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-newlines";
      stringArray0[1] = "-suppressDeclaration";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals("-suppressDeclaration", outputFormat0.getIndent());
      assertEquals(0, int0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9267295637409885
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("h", false, "h");
      outputFormat0.setIndentSize(0);
      outputFormat0.setIndentSize(0);
      outputFormat0.setIndentSize((-441));
      outputFormat0.setNewLineAfterDeclaration(false);
      OutputFormat.createPrettyPrint();
      outputFormat0.setIndent(false);
      outputFormat0.isXHTML();
      outputFormat0.setIndent("-encoding");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndent("-encoding");
      outputFormat0.setSuppressDeclaration(false);
      assertEquals("-encoding", outputFormat0.getIndent());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty'", false, "-expandEmpty'");
      outputFormat0.setIndent("-expandEmpty'");
      outputFormat0.setIndent("-expandEmpty'");
      outputFormat0.setIndent(true);
      outputFormat0.setIndent("pa?4KP,k/@a>p+Sn");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-expandEmpty'";
      stringArray0[1] = "}XY57]7Jg0[;#a:!3I";
      outputFormat0.setIndent("-padText");
      assertEquals("-padText", outputFormat0.getIndent());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.180066384203239
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "-expandEmptyvtrimRex";
      OutputFormat outputFormat0 = new OutputFormat("-expandEmptyvtrimRex", false);
      int int0 = 0;
      String string1 = "W\\9pNz9t";
      String[] stringArray0 = new String[12];
      stringArray0[0] = "-expandEmptyvtrimRex";
      stringArray0[1] = "-expandEmptyvtrimRex";
      stringArray0[3] = "-expandEmptyvtrimRex";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.isOmitEncoding();
      String string0 = OutputFormat.STANDARD_INDENT;
      assertEquals("  ", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6997608016132726
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("+QSg1_+Dc||'AxOgh7", false);
      int int0 = 0;
      String string0 = "g%";
      String[] stringArray0 = new String[9];
      stringArray0[0] = "+QSg1_+Dc||'AxOgh7";
      stringArray0[1] = null;
      stringArray0[2] = "g%";
      stringArray0[3] = "+QSg1_+Dc||'AxOgh7";
      outputFormat0.parseOptions(stringArray0, 0);
      String[] stringArray1 = new String[5];
      stringArray1[0] = null;
      stringArray1[1] = null;
      stringArray1[2] = "_r^V%vy|+A";
      stringArray1[3] = "+QSg1_+Dc||'AxOgh7";
      stringArray1[4] = "g%";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String string0 = OutputFormat.STANDARD_INDENT;
      OutputFormat outputFormat1 = new OutputFormat("}expa&dEmpty", false, "L0B}JcO:B][=6G");
      outputFormat1.setEncoding("Cv3rSk-bG /=VZK");
      assertEquals("Cv3rSk-bG /=VZK", outputFormat1.getEncoding());
      
      OutputFormat outputFormat2 = new OutputFormat("Cv3rSk-bG /=VZK");
      assertFalse(outputFormat2.isPadText());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("~z:vAZXfsb1yF", false, "KL+TEGU_OZ");
      outputFormat0.setXHTML(false);
      assertFalse(outputFormat0.isXHTML());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-expandEmptyvtrimRex";
      stringArray0[1] = "KL+TEGU_OZ";
      stringArray0[2] = "~z:vAZXfsb1yF";
      OutputFormat outputFormat1 = new OutputFormat("~z:vAZXfsb1yF", false, "-expandEmptyvtrimRex");
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isTrimText());
      assertEquals("~z:vAZXfsb1yF", outputFormat1.getIndent());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertEquals("-expandEmptyvtrimRex", outputFormat1.getEncoding());
      assertFalse(outputFormat1.isNewlines());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isOmitEncoding());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertFalse(outputFormat1.isPadText());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0676032882216056
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-encoding", false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-encoding";
      stringArray0[1] = "-encoding";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("-encoding", outputFormat0.getEncoding());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText");
      outputFormat0.setPadText(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "zP+";
      stringArray0[1] = "-expandEmptyCkec7>JTt8O~HkJCy";
      stringArray0[2] = "zP+";
      stringArray0[3] = "-expandEmpty'";
      stringArray0[4] = "-trimText";
      stringArray0[5] = "-expandEmpty'";
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.546269624945665
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterDeclaration(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.isSuppressDeclaration();
      outputFormat1.setXHTML(true);
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat1.setXHTML(true);
      outputFormat1.isNewlines();
      outputFormat0.isNewlines();
      outputFormat1.setNewlines(false);
      outputFormat2.setLineSeparator(" ");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "'";
      stringArray0[1] = "Z{b(P";
      stringArray0[2] = "h?SI&";
      stringArray0[3] = "Me(X";
      stringArray0[4] = "vC/flr2\"Xg";
      stringArray0[5] = "$g";
      stringArray0[6] = "z";
      stringArray0[7] = "";
      int int0 = outputFormat2.parseOptions(stringArray0, 0);
      assertEquals(" ", outputFormat2.getLineSeparator());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "-expandEmpty'";
      stringArray0[2] = "zP+";
      stringArray0[3] = "-expandEmpty'";
      stringArray0[5] = "-expandEmpty'";
      OutputFormat outputFormat0 = new OutputFormat(":$Z4e$t\"Lr^P\"c", true);
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals('\"', char0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(":$Z4e$t\"Lr^P\"c", outputFormat0.getIndent());
      assertFalse(outputFormat0.isOmitEncoding());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.6289785638348517
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setSuppressDeclaration(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.isSuppressDeclaration();
      outputFormat1.setSuppressDeclaration(true);
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat1.setXHTML(true);
      outputFormat1.isNewlines();
      outputFormat0.isNewlines();
      assertTrue(outputFormat0.isSuppressDeclaration());
      
      outputFormat1.setNewlines(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "'";
      stringArray0[1] = "Z{b(P";
      stringArray0[2] = "h?SI&";
      stringArray0[3] = "Me(X";
      stringArray0[4] = "vC/flr2\"Xg";
      stringArray0[5] = "$g";
      outputFormat2.setLineSeparator("p4");
      stringArray0[6] = "z";
      stringArray0[7] = "7";
      int int0 = outputFormat2.parseOptions(stringArray0, 0);
      assertEquals("p4", outputFormat2.getLineSeparator());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6711893730418441
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-xhtml)";
      stringArray0[1] = "K4h";
      stringArray0[2] = "mod0&q!coHR";
      stringArray0[3] = "NWzZZtJb7H~0)fg";
      stringArray0[4] = "-lineSeparator";
      stringArray0[5] = "-xhtmlEa~|t]QGGD";
      stringArray0[6] = "@ 6_;e]6k|wbz7v`)";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertFalse(outputFormat0.isPadText());
      assertEquals(1, int0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.7118640950892862
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "-indentSiSe";
      OutputFormat outputFormat0 = new OutputFormat("-indentSiSe", true, "-indentSiSe");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-indentSiSe";
      stringArray0[3] = "-indentSiSe";
      stringArray0[2] = "-indentSiSe";
      stringArray0[3] = "-indentSiSe";
      stringArray0[4] = "-indentSiSe";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 0);
      int int0 = 1028;
      outputFormat0.parseOptions(stringArray0, 1028);
      int int1 = (-1718320895);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1718320895));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1718320895
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Nk", true);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('7');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (7)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }
}
