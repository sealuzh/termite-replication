/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 14:07:12 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.NoSuchElementException;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7118451352339121
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isEmpty();
      jSTerm1.addElement(jSTerm0);
      jSTerm1.addElement(jSTerm0);
      jSTerm0.addElement((Object) null);
      jSTerm1.cloneT();
      jSTerm1.setSize(40);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = null;
      jSTerm0.add((Object) null);
      jSTerm0.sort((Comparator) null);
      jSTerm0.isVariable();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.2148896539491203
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAll(jSTerm0);
      jSTerm0.addElement(jSTerm0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      jSTerm0.addElement(predicate0);
      StringReader stringReader0 = new StringReader("(");
      stringReader0.markSupported();
      stringReader0.markSupported();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAll(jSTerm0);
      jSTerm0.addElement(jSTerm0);
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7118451352339121
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isEmpty();
      jSTerm1.addElement(jSTerm0);
      jSTerm1.addElement(jSTerm0);
      jSTerm0.addElement((Object) null);
      jSTerm1.cloneT();
      System.setCurrentTimeMillis(0L);
      jSTerm1.standardizerTerm();
      assertEquals("[[null], [null]]", jSTerm1.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2758554445550456
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W{CJ@Tyw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(2302, 2302);
      streamTokenizer0.whitespaceChars(2302, 2302);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm0);
      jSTerm0.firstElement();
      streamTokenizer0.ordinaryChar(62);
      jSSubstitution0.add((Object) jSTerm2);
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm1.matches(jSTerm3);
      jSTerm3.equals(jSTerm1);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm3, jSSubstitution1);
      StringReader stringReader1 = new StringReader("'");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSJshopVars.dot = (-1);
      streamTokenizer1.ordinaryChars(1745, 2302);
      jSTerm2.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      jSTerm0.isVariable();
      jSTerm1.add((Object) null);
      jSTerm0.retainAll(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      jSTerm0.addElement(predicate0);
      jSTerm0.clone();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate0);
      predicate4.test(predicate0);
      Predicate<String> predicate6 = predicate5.and(predicate2);
      Predicate<String> predicate7 = predicate6.and(predicate5);
      Predicate<String> predicate8 = predicate5.and(predicate6);
      predicate5.and(predicate8);
      predicate5.test("l ");
      Predicate<String> predicate9 = predicate5.and(predicate5);
      predicate9.negate();
      Predicate<String> predicate10 = predicate8.negate();
      predicate10.and(predicate4);
      predicate5.and(predicate10);
      predicate10.negate();
      Predicate<Object> predicate11 = predicate2.or(predicate0);
      Predicate<Object> predicate12 = predicate3.or(predicate4);
      Predicate<Object> predicate13 = predicate3.or(predicate12);
      predicate4.and(predicate2);
      predicate13.negate();
      predicate3.negate();
      Predicate<String> predicate14 = predicate10.or(predicate1);
      Predicate<Object> predicate15 = predicate11.or(predicate2);
      Predicate<Object> predicate16 = predicate15.negate();
      predicate3.and(predicate16);
      Predicate.isEqual((Object) predicate11);
      Predicate<Object> predicate17 = predicate16.and(predicate15);
      predicate7.or(predicate17);
      predicate14.and(predicate4);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$44/1005911766 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      StringReader stringReader0 = new StringReader("9:+_{UC[");
      stringReader0.close();
      StringReader stringReader1 = new StringReader("`");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader2 = new StringReader("9:+_{UC[");
      StringReader stringReader3 = new StringReader("88t'/)9Z&9A\"v/G");
      jSTerm0.addElement("`");
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      jSTerm0.addElement(jSTerm0);
      Predicate.isEqual((Object) jSTerm0);
      StringReader stringReader0 = new StringReader("FOsco4Tg-p|4S");
      stringReader0.markSupported();
      stringReader0.mark(96);
      StringReader stringReader1 = new StringReader("FOsco4Tg-p|4S");
      stringReader0.close();
      StringReader stringReader2 = new StringReader("Undefined function to be evaluated  in Call statement");
      stringReader2.markSupported();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader3 = new StringReader("`G.,iI,l/m8P1");
      StringReader stringReader4 = new StringReader("88t'/)9Z&9A\"v/G");
      jSTerm0.addElement("`G.,iI,l/m8P1");
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9328065726143313
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAll(jSTerm0);
      jSTerm0.addElement(jSTerm0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      Predicate<String> predicate4 = Predicate.isEqual((Object) jSTerm0);
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate5.and(predicate0);
      Predicate<String> predicate7 = predicate5.and(predicate3);
      Predicate<String> predicate8 = predicate7.negate();
      Predicate.isEqual((Object) predicate0);
      Predicate<String> predicate9 = Predicate.isEqual((Object) predicate8);
      Predicate<String> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate1.negate();
      predicate10.and(predicate11);
      Predicate<String> predicate12 = predicate10.negate();
      predicate7.or(predicate12);
      Predicate<String> predicate13 = predicate7.negate();
      predicate7.and(predicate9);
      predicate13.negate();
      Predicate<String> predicate14 = predicate5.and(predicate6);
      predicate14.negate();
      predicate13.or(predicate2);
      predicate4.negate();
      predicate6.and(predicate14);
      jSTerm0.trimToSize();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.makeEval(true);
      jSTerm1.toStr();
      jSTerm1.cloneT();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertTrue(jSTerm1.isEval());
      
      jSTerm0.standardizerTerm();
      assertNotSame(jSTerm0, jSTerm2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3667110520552042
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate0.or(predicate1);
      Predicate<String> predicate3 = Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate4 = predicate3.negate();
      predicate4.or(predicate2);
      predicate3.or(predicate2);
      predicate0.test(": Error reading control parameters: ");
      Predicate.isEqual((Object) predicate4);
      StringReader stringReader0 = new StringReader("%q%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.lastElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8627104081671435
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iy");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.matches(jSTerm1);
      StringReader stringReader1 = new StringReader("D(jzmMF)_&.\"");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm2, jSSubstitution1);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4270610433807247
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "?t[>pi/2y";
      StringReader stringReader0 = new StringReader("?t[>pi/2y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = null;
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3464955264366987
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.matches(jSTerm1);
      StringReader stringReader1 = new StringReader("D(jzmMF)_&.\"");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.matches(jSTerm3, jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm2);
      jSTerm0.equals(jSTerm2);
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      streamTokenizer1.ordinaryChars((-945), (-945));
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.equals(jSTerm1);
      jSTerm2.call();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.parseList(streamTokenizer1);
      // Undeclared exception!
      try { 
        jSTerm3.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.256833783090265
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W{CJ@Tyw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(2302, 2302);
      streamTokenizer0.whitespaceChars(2302, 2302);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      stringReader0.reset();
      jSTerm0.print();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      jSTerm1.equals(jSTerm0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) null);
      Predicate<String> predicate1 = predicate0.and(predicate0);
      Predicate<String> predicate2 = predicate1.negate();
      Predicate<String> predicate3 = predicate2.or(predicate1);
      predicate3.or(predicate2);
      jSTerm1.call();
      System.setCurrentTimeMillis((-1));
      jSTerm0.print();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      assertFalse(jSTerm0.isConstant());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAll(jSTerm0);
      jSTerm0.addElement(jSTerm0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      jSTerm0.addElement(predicate0);
      Object object0 = jSTerm0.clone();
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate0);
      predicate4.test(predicate0);
      Predicate<String> predicate6 = predicate5.negate();
      Predicate<String> predicate7 = predicate6.and(predicate2);
      Predicate<String> predicate8 = predicate7.and(predicate5);
      Predicate<String> predicate9 = predicate6.and(predicate7);
      predicate5.and(predicate9);
      predicate5.test(": ");
      Predicate<String> predicate10 = predicate6.and(predicate5);
      predicate8.negate();
      Predicate<String> predicate11 = predicate9.negate();
      predicate11.and(predicate4);
      predicate10.and(predicate4);
      Object object1 = new Object();
      Predicate<String> predicate12 = Predicate.isEqual(object1);
      predicate12.negate();
      Predicate<Object> predicate13 = Predicate.isEqual((Object) predicate4);
      predicate13.and(predicate0);
      Predicate<Object> predicate14 = predicate3.negate();
      Predicate.isEqual((Object) predicate7);
      predicate7.or(predicate14);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$44/1005911766 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.addElement((Object) null);
      Object object0 = jSTerm0.clone();
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate2 = predicate1.negate();
      predicate1.and(predicate2);
      Predicate<String> predicate3 = predicate0.or(predicate1);
      predicate3.negate();
      Predicate<String> predicate4 = predicate0.and(predicate0);
      predicate3.and(predicate4);
      predicate4.negate();
      Predicate.isEqual((Object) null);
      predicate0.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) null);
      Predicate<String> predicate6 = predicate0.and(predicate5);
      Predicate<String> predicate7 = predicate6.negate();
      predicate3.and(predicate5);
      predicate0.and(predicate7);
      jSTerm0.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAll(jSTerm0);
      jSTerm0.addElement(jSTerm0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      jSTerm0.addElement(predicate0);
      Object object0 = jSTerm0.clone();
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate0.or(predicate2);
      StringReader stringReader0 = new StringReader("eHmzcv0o/%iOM_DwT");
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<String> predicate4 = Predicate.isEqual((Object) predicate0);
      predicate3.test(predicate0);
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate5.and(predicate2);
      predicate6.and(predicate4);
      Predicate<String> predicate7 = predicate5.and(predicate6);
      Predicate.isEqual(object0);
      predicate4.and(predicate7);
      predicate4.test(": ");
      Predicate<String> predicate8 = predicate5.and(predicate4);
      predicate8.negate();
      Predicate<String> predicate9 = predicate7.negate();
      Predicate<String> predicate10 = predicate9.and(predicate3);
      Predicate<String> predicate11 = predicate8.and(predicate3);
      predicate11.test(">gB81rL$/v|^X%V!");
      Predicate.isEqual((Object) predicate7);
      predicate5.negate();
      predicate11.negate();
      predicate11.and(predicate10);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$44/1005911766 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAll(jSTerm0);
      jSTerm0.addElement(jSTerm0);
      jSTerm0.addElement((Object) null);
      int int0 = 205;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAll(jSTerm0);
      jSTerm0.addElement(jSTerm0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      jSTerm0.addElement(predicate0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate0);
      predicate4.test(predicate0);
      Predicate<String> predicate6 = predicate5.and(predicate2);
      Predicate<String> predicate7 = predicate6.and(predicate5);
      Predicate<String> predicate8 = predicate5.and(predicate6);
      Predicate<String> predicate9 = predicate5.and(predicate8);
      predicate5.test(": ");
      Predicate<String> predicate10 = predicate5.and(predicate5);
      predicate10.negate();
      Predicate<String> predicate11 = predicate8.negate();
      predicate11.and(predicate4);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate12 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<String> predicate13 = predicate6.or(predicate4);
      Predicate<String> predicate14 = predicate5.negate();
      predicate12.and(predicate7);
      predicate14.negate();
      Predicate<Object> predicate15 = predicate4.or(predicate3);
      Predicate<Object> predicate16 = predicate3.and(predicate15);
      Predicate<String> predicate17 = predicate13.and(predicate10);
      predicate3.or(predicate1);
      predicate16.negate();
      Predicate<String> predicate18 = predicate9.or(predicate6);
      predicate1.and(predicate16);
      Predicate.isEqual((Object) predicate15);
      Predicate<String> predicate19 = predicate13.or(predicate3);
      predicate18.and(predicate19);
      predicate14.or(predicate17);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$44/1005911766 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8055149492285163
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?t[>pi/2y");
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("?t[>pi/2y");
      StringReader stringReader2 = new StringReader("?t[>pi/2y");
      stringReader2.close();
      stringReader2.markSupported();
      StringReader stringReader3 = new StringReader("?t[>pi/2y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader3);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader3);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.commentChar(32);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm1);
      jSTerm0.equals(jSTerm1);
      jSTerm0.clone();
      jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      StringReader stringReader4 = null;
      try {
        stringReader4 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?t[>pi/2y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.setSize(127);
      jSTerm1.applySubstitutionPF(jSSubstitution1);
      jSTerm1.print();
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3639211032839484
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.removeAll(jSTerm0);
      jSTerm1.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      jSTerm0.isEval();
      jSTerm0.add((Object) predicate0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.retainAll(jSTerm0);
      jSTerm0.makeVariable();
      jSTerm1.isVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.makeFunction();
      jSTerm3.isFunction();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7481554572476763
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement(jSTerm0);
      jSTerm0.isFunction();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.equals(jSTerm0);
      assertTrue(jSTerm0.isFunction());
      
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.631345420808597
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W{CJ@Tyw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      streamTokenizer0.ordinaryChars((-1), (-1));
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertEquals(1, jSTerm1.size());
      
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean1 == boolean0);
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isEval());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.393580568616634
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W{CJ@Tyw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(2302, 2302);
      streamTokenizer0.whitespaceChars(2302, 2302);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      stringReader0.reset();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0);
      jSTerm0.matches(jSTerm0);
      jSTerm0.equals(jSTerm0);
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.equals(jSTerm2);
      streamTokenizer0.ordinaryChars((-945), 0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm2.equals(jSTerm1);
      jSTerm1.standardizerTerm();
      jSTerm1.equals(jSTerm0);
      jSTerm0.call();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0771015748862114
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("* ");
      stringReader0.markSupported();
      stringReader0.mark(42);
      StringReader stringReader1 = new StringReader("* ");
      stringReader0.close();
      StringReader stringReader2 = new StringReader("* ");
      stringReader2.markSupported();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader3 = new StringReader("88t'/)9Z&9A\"v/G");
      StringReader stringReader4 = new StringReader("* ");
      jSTerm0.addElement(stringReader0);
      jSTerm0.cloneT();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.2334530057864614
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.removeAll(jSTerm0);
      jSTerm1.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.add((Object) predicate0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.retainAll(jSTerm0);
      jSTerm0.makeVariable();
      jSTerm1.isVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.makeFunction();
      jSTerm2.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAll(jSTerm0);
      jSTerm0.addElement(jSTerm0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      jSTerm0.addElement(predicate0);
      Object object0 = jSTerm0.clone();
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate0.or(predicate2);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<String> predicate4 = Predicate.isEqual((Object) predicate0);
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate5.and(predicate2);
      predicate6.and(predicate4);
      Predicate<String> predicate7 = predicate5.and(predicate6);
      Predicate.isEqual(object0);
      predicate4.and(predicate7);
      predicate4.test(": ");
      Predicate<String> predicate8 = predicate5.and(predicate4);
      predicate8.negate();
      Predicate<String> predicate9 = predicate7.negate();
      Predicate<String> predicate10 = predicate9.and(predicate3);
      Predicate<String> predicate11 = predicate10.and(predicate7);
      Object object1 = new Object();
      Predicate.isEqual((Object) ": ");
      predicate11.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?t[>pi/2y");
      stringReader0.markSupported();
      stringReader0.markSupported();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("(srt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      char[] charArray0 = new char[6];
      char char0 = '2';
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.2700181519104905
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isEmpty();
      jSTerm0.addElement(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("* ");
      stringReader0.markSupported();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("* ");
      StringReader stringReader2 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader3 = new StringReader("");
      char[] charArray0 = new char[8];
      charArray0[0] = 'H';
      charArray0[1] = '*';
      charArray0[2] = 'z';
      charArray0[3] = 'm';
      charArray0[4] = 'F';
      charArray0[5] = 'l';
      charArray0[6] = '-';
      charArray0[7] = 'B';
      stringReader3.read(charArray0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader3);
      jSTerm0.parseList(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.963908339870089
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isEmpty();
      jSTerm0.addElement(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm2.matches(jSTerm1);
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.matches(jSTerm2, jSSubstitution1);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.309785293652847
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isEmpty();
      jSTerm0.addElement(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      jSTerm2.matches(jSTerm1);
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm3.matches(jSTerm1, jSSubstitution3);
      System.setCurrentTimeMillis((-1));
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.equals(jSTerm2);
      streamTokenizer0.ordinaryChars(62, 39);
      jSTerm2.equals(jSTerm3);
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.087085294603742
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isEmpty();
      jSTerm0.addElement(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm0);
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm2.matches(jSTerm4, jSSubstitution3);
      System.setCurrentTimeMillis((-1));
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.matches(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7480673485460891
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isVariable();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8848713335781608
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate.isEqual((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) ".XC8KUxld;?Hr");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.trimToSize();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.removeElement(jSSubstitution5);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution4.containsAll(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.323199317398565
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W{CJ@Tyw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(2302, 2302);
      streamTokenizer0.whitespaceChars(2302, 2302);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      stringReader0.reset();
      jSTerm0.print();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      jSTerm1.matches(jSTerm0);
      jSTerm1.equals(jSTerm0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm0.equals(jSTerm3);
      streamTokenizer0.ordinaryChars((-943), 0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm2.cloneT();
      jSTerm3.equals(jSTerm2);
      jSTerm2.standardizerTerm();
      jSTerm2.equals(jSTerm1);
      jSTerm1.call();
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1682824501765625
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?t[>pi/2y");
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("sr");
      stringReader1.close();
      stringReader1.markSupported();
      StringReader stringReader2 = new StringReader("%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), 295);
      streamTokenizer0.commentChar(35);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader2);
      streamTokenizer3.whitespaceChars(32, 35);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader2);
      streamTokenizer6.ordinaryChars(63, (-4));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.2271458261982313
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("* ");
      stringReader0.markSupported();
      stringReader0.mark(42);
      StringReader stringReader1 = new StringReader("* ");
      StringReader stringReader2 = new StringReader("<M");
      stringReader1.close();
      StringReader stringReader3 = new StringReader("`");
      stringReader3.read();
      stringReader3.markSupported();
      StringReader stringReader4 = new StringReader("`");
      stringReader3.markSupported();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader5 = new StringReader("`");
      jSTerm0.addElement("<M");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSSubstitution2.fail());
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm2.isFunction());
      
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis(42);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution1);
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isFunction());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.7751292747786216
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?t[>pi/2y");
      stringReader0.markSupported();
      stringReader0.markSupported();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("(srt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 0.0;
      streamTokenizer1.parseNumbers();
      streamTokenizer2.wordChars(0, (-4));
      streamTokenizer2.commentChar(37);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader1);
      streamTokenizer6.ordinaryChars(63, 37);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader1);
      streamTokenizer7.eolIsSignificant(true);
      streamTokenizer8.wordChars(1, 2);
      streamTokenizer8.ordinaryChars((-4), (-761));
      streamTokenizer8.quoteChar(2);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1935496040981333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?t[>pi/2y");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 0.0;
      streamTokenizer2.slashStarComments(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer2.wordChars(0, (-4));
      streamTokenizer2.whitespaceChars(45, (-1837));
      streamTokenizer2.commentChar(45);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.ordinaryChars((-4), 45);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer7.ordinaryChar((-1540));
      streamTokenizer5.eolIsSignificant(true);
      streamTokenizer7.wordChars(1, (-4));
      streamTokenizer7.ordinaryChars((-4), (-761));
      streamTokenizer7.quoteChar(1230);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.9834932100421987
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "list";
      StringReader stringReader0 = new StringReader("list");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.matches(jSTerm1);
      StringReader stringReader1 = new StringReader("D(jzmMF)_&.\"");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.matches(jSTerm3, jSSubstitution0);
      jSTerm1.removeAllElements();
      jSTerm3.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0592293789763123
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm1);
      jSTerm0.isGround();
      streamTokenizer0.whitespaceChars(42, 93);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSEvaluate.numericValue(jSTerm1);
      jSTerm2.matches((JSPredicateForm) jSTerm0);
      JSJshopVars.VarCounter = 32;
      jSTerm0.print();
      // Undeclared exception!
      try { 
        jSTerm2.addAll(32, (Collection) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 32
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6216679171123505
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "BBpA^)) ";
      StringReader stringReader0 = new StringReader("BBpA^)) ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.ensureCapacity(672);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.isGround();
      jSTerm1.isConstant();
      jSTerm0.isGround();
      jSTerm1.makeVariable();
      jSTerm0.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) "");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      jSSubstitution1.add((Object) jSTerm0);
      objectArray0[2] = (Object) jSSubstitution1;
      objectArray0[3] = (Object) jSSubstitution1;
      objectArray0[4] = (Object) jSSubstitution1;
      // Undeclared exception!
      try { 
        jSTerm1.get((-981));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -981
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.0449311748495913
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?t[>pi/2y");
      stringReader0.markSupported();
      stringReader0.markSupported();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate0.negate();
      Predicate<String> predicate3 = predicate2.or(predicate1);
      Predicate<String> predicate4 = predicate2.negate();
      Predicate<String> predicate5 = predicate4.and(predicate0);
      predicate5.negate();
      Predicate<String> predicate6 = predicate4.or(predicate1);
      Predicate<String> predicate7 = predicate6.and(predicate0);
      predicate4.negate();
      predicate6.or(predicate1);
      predicate3.negate();
      predicate6.and(predicate7);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.trimToSize();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.toStr();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      assertEquals(1, jSTerm1.capacity());
      
      jSTerm3.standardizerTerm();
      assertFalse(jSTerm1.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate0.negate();
      predicate4.or(predicate0);
      predicate3.or(predicate0);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate7 = predicate5.and(predicate6);
      Predicate<Object> predicate8 = predicate7.or(predicate6);
      Predicate<Object> predicate9 = predicate5.and(predicate8);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      predicate9.test(jSSubstitution1);
      Predicate.isEqual((Object) jSSubstitution0);
      predicate6.negate();
      jSTerm1.removeIf(predicate9);
      jSTerm0.makeVariable();
      boolean boolean0 = jSTerm0.isVariable();
      assertTrue(jSTerm0.isVariable());
      
      StringReader stringReader0 = new StringReader("call");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      boolean boolean1 = jSTerm1.isVariable();
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.037734194785151
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?t[>pi/2y");
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("?t[>pi/2y");
      StringReader stringReader2 = new StringReader("?t[>pi/2y");
      stringReader2.close();
      stringReader2.markSupported();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) stringReader0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution2);
      jSSubstitution1.containsAll(jSTerm2);
      jSTerm0.equals(jSTerm2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution3);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0905994737794786
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("* ");
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("* ");
      stringReader0.close();
      StringReader stringReader2 = new StringReader("* ");
      stringReader2.markSupported();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader3 = new StringReader("88t'/)9Z&9A\"v/G");
      StringReader stringReader4 = new StringReader("* ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader4);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader4);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.wordChars(37, 43);
      streamTokenizer1.commentChar(43);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader4);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-41), 2);
      streamTokenizer4.pushBack();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader3);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer6);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.0140355237092673
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("* ");
      stringReader0.markSupported();
      stringReader0.mark(42);
      StringReader stringReader1 = new StringReader("9:+_{UC[");
      StringReader stringReader2 = new StringReader("9:+_{UC[");
      stringReader2.close();
      stringReader0.markSupported();
      StringReader stringReader3 = new StringReader("* ");
      stringReader0.markSupported();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader4 = new StringReader("88t'/)9Z&9A\"v/G");
      JSJshopVars.exclamation = 1;
      jSTerm0.addElement((Object) null);
      jSTerm0.cloneT();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      jSTerm0.addElement(jSTerm0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      Predicate<String> predicate4 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate5 = predicate0.or(predicate1);
      Predicate<String> predicate6 = predicate4.or(predicate5);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) "Expecting variable name in term");
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate4);
      predicate8.and(predicate2);
      Predicate<Object> predicate9 = predicate1.or(predicate0);
      predicate1.or(predicate9);
      Predicate<String> predicate10 = predicate4.negate();
      Predicate<String> predicate11 = predicate6.and(predicate7);
      Predicate<String> predicate12 = predicate4.and(predicate10);
      predicate11.negate();
      predicate12.test("q");
      Predicate.isEqual((Object) predicate2);
      Predicate<String> predicate13 = predicate12.negate();
      Predicate<String> predicate14 = predicate13.negate();
      predicate1.and(predicate8);
      Predicate<Object> predicate15 = predicate3.and(predicate7);
      predicate14.or(predicate15);
      jSTerm0.print();
      assertFalse(jSTerm0.isVariable());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.771623955677366
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isEmpty();
      jSTerm1.addElement(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm2, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1343702624534777
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?t[>pi/2y");
      stringReader0.markSupported();
      stringReader0.markSupported();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("(srt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer2.wordChars(0, (-4));
      streamTokenizer2.commentChar(37);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      jSTerm0.matches(jSTerm1);
      jSTerm0.equals(jSTerm1);
      jSTerm0.clone();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      StringReader stringReader2 = new StringReader("%%%00");
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-1));
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?t[>pi/2y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.setSize(127);
      jSTerm1.applySubstitutionPF(jSSubstitution1);
      jSTerm1.isFunction();
      System.setCurrentTimeMillis(127);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.139079103896908
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?t[>pi/2y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      streamTokenizer0.ordinaryChars((-945), 62);
      jSTerm0.equals(jSTerm1);
      jSTerm1.call();
      StringReader stringReader1 = new StringReader("(srt");
      stringReader1.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSJshopVars.plus = 2110;
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add(0, (Object) jSSubstitution1);
      jSSubstitution0.ensureCapacity(2);
      assertEquals("[[]]", jSSubstitution0.toString());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.4548671092662881
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) ".XC8KUxld;?Hr");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.containsAll(jSSubstitution0);
      StringReader stringReader0 = new StringReader(".XC8KUxld;?Hr");
      StringReader stringReader1 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1, jSSubstitution2);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      System.setCurrentTimeMillis(269L);
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.minus = 32;
      jSTerm0.makeEval(false);
      jSTerm0.isGround();
      jSTerm0.setSize(39);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) ") ");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ") ";
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[4] = (Object) jSSubstitution1;
      objectArray0[6] = (Object) jSSubstitution1;
      jSSubstitution1.toArray(objectArray0);
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSSubstitution1.add(object0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeConstant();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.ensureCapacity((-39));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.9002560512685369
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) ".XC8KUxld;?Hr");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.trimToSize();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.removeElement(jSSubstitution5);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution5);
      Predicate<String> predicate1 = Predicate.isEqual((Object) jSSubstitution5);
      predicate1.negate();
      Predicate.isEqual((Object) jSSubstitution3);
      Object object0 = new Object();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      Predicate.isEqual((Object) predicate0);
      Predicate.isEqual((Object) predicate1);
      predicate0.negate();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(".XC8KUxld;?Hr");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.toStr();
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.retainAll(jSTerm0);
      jSSubstitution1.setSize(127);
      System.setCurrentTimeMillis(127);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAll(jSTerm0);
      jSTerm0.addElement(jSTerm0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      jSTerm0.addElement(predicate0);
      Object object0 = jSTerm0.clone();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate0.or(predicate2);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<String> predicate4 = Predicate.isEqual((Object) predicate0);
      predicate3.test(predicate0);
      Predicate<String> predicate5 = predicate4.and(predicate2);
      Predicate<String> predicate6 = predicate5.and(predicate4);
      Predicate<String> predicate7 = predicate4.and(predicate5);
      Predicate<String> predicate8 = predicate6.negate();
      Predicate<String> predicate9 = predicate4.and(predicate4);
      Predicate<String> predicate10 = predicate4.and(predicate5);
      predicate8.test("%%%0");
      Predicate<String> predicate11 = predicate7.and(predicate9);
      predicate9.negate();
      Predicate<String> predicate12 = predicate7.negate();
      predicate10.and(predicate11);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate13 = Predicate.isEqual((Object) jSSubstitution0);
      predicate6.and(predicate13);
      Object object1 = new Object();
      Predicate.isEqual(object0);
      Predicate<String> predicate14 = predicate8.and(predicate12);
      predicate14.negate();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate0.or(predicate1);
      Predicate<String> predicate3 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate4 = predicate0.or(predicate1);
      Predicate<String> predicate5 = predicate3.or(predicate4);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) "Expecting variable name in term");
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate3);
      predicate7.and(predicate2);
      Predicate<Object> predicate8 = predicate1.or(predicate0);
      predicate1.or(predicate8);
      Predicate<String> predicate9 = predicate3.negate();
      Predicate<String> predicate10 = predicate5.and(predicate6);
      Predicate<String> predicate11 = predicate3.and(predicate9);
      predicate10.negate();
      predicate11.test("q");
      Predicate<String> predicate12 = Predicate.isEqual((Object) predicate2);
      predicate12.test("ceil");
      predicate11.negate();
      predicate12.negate();
      predicate5.and(predicate9);
      jSTerm0.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("* ");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer1.wordChars(0, 2);
      streamTokenizer1.whitespaceChars((-3), 41);
      streamTokenizer1.commentChar(68);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(34, (-420));
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer7.eolIsSignificant(true);
      streamTokenizer3.wordChars(41, 3745);
      streamTokenizer7.ordinaryChars((-4), 68);
      streamTokenizer1.quoteChar(41);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.22371807606583377
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?t[>pi/2y");
      stringReader0.markSupported();
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("(srt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 0.0;
      streamTokenizer1.parseNumbers();
      streamTokenizer2.wordChars(0, (-4));
      streamTokenizer2.whitespaceChars(45, (-1837));
      streamTokenizer2.commentChar(45);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader1);
      streamTokenizer6.ordinaryChars((-4), 45);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader1);
      streamTokenizer5.eolIsSignificant(true);
      streamTokenizer7.wordChars(1, (-4));
      streamTokenizer7.ordinaryChars((-4), (-761));
      streamTokenizer7.quoteChar(1230);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.7751292747786216
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?t[>pi/2y");
      stringReader0.markSupported();
      stringReader0.markSupported();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("(srt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 0.0;
      streamTokenizer1.parseNumbers();
      streamTokenizer2.wordChars(0, (-4));
      streamTokenizer2.commentChar(37);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.slashStarComments(true);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader1);
      streamTokenizer2.parseNumbers();
      streamTokenizer6.ordinaryChars((-4), 37);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader1);
      streamTokenizer7.eolIsSignificant(true);
      streamTokenizer8.wordChars(1, 2);
      streamTokenizer8.ordinaryChars(1, (-4));
      streamTokenizer8.ordinaryChars((-4), (-4));
      streamTokenizer8.quoteChar(2);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
