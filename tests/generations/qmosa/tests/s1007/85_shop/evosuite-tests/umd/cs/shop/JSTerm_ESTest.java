/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 00:42:48 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.77963456098982
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1T$.9u$?+.*)('P7p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm0.addAll((Collection) jSTerm0);
      jSTerm3.isEmpty();
      JSTerm jSTerm4 = new JSTerm();
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm5 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm1.clonePF();
      jSTerm5.removeAll(jSTerm4);
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm5);
      assertEquals("[1.0, 1.0]", jSTerm0.toString());
      
      jSTerm3.cloneT();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm5);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = predicate2.negate();
      predicate3.negate();
      Predicate<String> predicate4 = predicate0.or(predicate3);
      predicate4.and(predicate2);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) "<");
      Predicate<Object> predicate6 = predicate5.or(predicate5);
      Predicate<Object> predicate7 = predicate5.and(predicate6);
      Predicate<Object> predicate8 = predicate7.negate();
      predicate8.or(predicate7);
      Predicate<Object> predicate9 = predicate8.negate();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      predicate9.test(jSSubstitution2);
      jSTerm5.matches(jSTerm2, jSSubstitution0);
      jSTerm3.matches(jSTerm2, jSSubstitution1);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      JSTerm jSTerm6 = jSTerm3.standardizerTerm();
      assertFalse(jSTerm6.isFunction());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8406668715958623
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1T$.9u$?+.*)('P7p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSJshopVars.leftBrac = 2540;
      jSTerm3.addAll((Collection) jSTerm1);
      jSTerm3.isEmpty();
      JSTerm jSTerm4 = new JSTerm();
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm5 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm1.clonePF();
      JSTerm jSTerm6 = jSTerm2.cloneT();
      jSTerm5.removeAll(jSTerm4);
      jSTerm6.matches(jSTerm5);
      JSTerm jSTerm7 = jSTerm3.cloneT();
      jSTerm4.equals(jSTerm6);
      jSTerm2.standardizerTerm();
      jSTerm7.call();
      JSTerm jSTerm8 = null;
      try {
        jSTerm8 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.608760118798248
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1T.u$?+.*)('P7p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      assertTrue(jSTerm3.isFunction());
      
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm2);
      Predicate<String> predicate1 = predicate0.or(predicate0);
      Predicate<String> predicate2 = predicate1.and(predicate0);
      Predicate<String> predicate3 = predicate2.negate();
      predicate3.negate();
      Predicate<String> predicate4 = Predicate.isEqual((Object) "1T.u$?+.*)('P7p");
      Predicate<String> predicate5 = predicate1.negate();
      Predicate<String> predicate6 = predicate5.and(predicate1);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate8 = predicate7.and(predicate7);
      Predicate<Object> predicate9 = predicate8.or(predicate7);
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      predicate5.negate();
      predicate7.negate();
      Predicate<Object> predicate12 = predicate7.negate();
      Predicate<Object> predicate13 = predicate12.negate();
      Predicate<String> predicate14 = predicate1.negate();
      Predicate.isEqual((Object) predicate1);
      predicate1.negate();
      Predicate<String> predicate15 = predicate14.negate();
      Predicate<String> predicate16 = predicate15.and(predicate3);
      predicate4.negate();
      predicate16.or(predicate6);
      predicate14.and(predicate13);
      predicate10.test("rok69d2s");
      predicate11.test(predicate12);
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertTrue(jSTerm2.isFunction());
      assertEquals("(. 1.0 (. T.u?+0* nil ))", stringBuffer0.toString());
      assertTrue(jSTerm2.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8066158306294606
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1T$.9u$?+.*)('P7p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.standardizerTerm();
      jSTerm2.equals(jSTerm1);
      JSTerm jSTerm3 = new JSTerm();
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.cloneT();
      jSTerm4.removeAll(jSTerm3);
      // Undeclared exception!
      try { 
        jSTerm2.remove((-3));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5990559795722032
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1T$.9u$?+.*)('P7p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEval();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.print();
      stringReader0.markSupported();
      jSTerm1.setSize(41);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.515414670682635
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(": ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) ": ");
      jSSubstitution0.containsAll(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElements(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.addElement(jSSubstitution4);
      jSSubstitution2.addElements(jSSubstitution4);
      jSTerm0.matches(jSTerm1, jSSubstitution3);
      StringReader stringReader0 = new StringReader(": ");
      jSTerm1.standardizerTerm();
      jSTerm0.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      StringReader stringReader1 = new StringReader(": ");
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.makeEval(true);
      jSTerm2.applySubstitutionT(jSSubstitution11);
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7048626112241436
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1T$.9u$?+.*)('P7p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      streamTokenizer0.parseNumbers();
      JSJshopVars.leftBrac = 2540;
      jSTerm3.addAll((Collection) jSTerm1);
      jSTerm3.isEmpty();
      JSTerm jSTerm4 = new JSTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm5 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm1.clonePF();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      jSTerm5.removeAll(jSTerm3);
      Function<Object, JSTerm> function3 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.andThen((Function<? super Object, ? extends JSTerm>) function3);
      Object object0 = new Object();
      unaryOperator0.apply(unaryOperator1);
      jSTerm4.replaceAll(unaryOperator1);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm4.forEach(consumer0);
      jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm4.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8873327789813352
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1T.u$?+.*)('P7p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.cloneT();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm2);
      Predicate<String> predicate1 = predicate0.or(predicate0);
      Predicate<String> predicate2 = predicate1.and(predicate0);
      Predicate<String> predicate3 = predicate2.negate();
      predicate3.negate();
      Predicate.isEqual((Object) "1T.u$?+.*)('P7p");
      Predicate<String> predicate4 = predicate1.negate();
      predicate4.and(predicate1);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate6 = predicate5.and(predicate5);
      Predicate<Object> predicate7 = predicate6.or(predicate5);
      Predicate<Object> predicate8 = predicate7.negate();
      predicate8.negate();
      Predicate<String> predicate9 = predicate4.negate();
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate<Object> predicate11 = predicate5.negate();
      predicate11.negate();
      Predicate<String> predicate12 = predicate1.negate();
      Predicate.isEqual((Object) predicate1);
      predicate1.negate();
      predicate9.or(predicate4);
      Predicate<String> predicate13 = predicate12.negate();
      predicate13.and(predicate3);
      predicate9.negate();
      predicate9.or(predicate10);
      predicate7.negate();
      predicate7.negate();
      jSTerm1.print();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(NT.9uf?+.*k('P7p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.commentChar(1094);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.quoteChar((-3));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.pushBack();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.ordinaryChar((-2));
      streamTokenizer1.slashSlashComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.wordChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer3.resetSyntax();
      streamTokenizer3.slashStarComments(false);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer2.resetSyntax();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.934738905497888
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1T$.9u$?+.*)('P7p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.nval = (double) (-4);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSJshopVars.minus = 41;
      StringReader stringReader1 = new StringReader("Yzl-63llUdO*!l.");
      System.setCurrentTimeMillis(41);
      JSTerm jSTerm4 = new JSTerm();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringReader1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) jSTerm2;
      objectArray0[3] = (Object) jSTerm2;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      jSTerm3.sort(comparator0);
      objectArray0[4] = (Object) "Yzl-63llUdO*!l.";
      objectArray0[5] = (Object) jSTerm0;
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = object0;
      objectArray1[1] = object0;
      objectArray1[2] = (Object) jSTerm0;
      objectArray1[3] = (Object) jSTerm2;
      jSTerm1.toArray(objectArray1);
      jSTerm3.print();
      JSTerm jSTerm5 = jSTerm3.standardizerTerm();
      JSTerm jSTerm6 = jSTerm5.call();
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals(10, jSTerm6.capacity());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9448468679826323
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.addElement(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.setSize(2000);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = null;
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate4.or(predicate1);
      predicate7.or(predicate5);
      predicate7.negate();
      Predicate.isEqual((Object) predicate6);
      predicate1.test(predicate7);
      Predicate<Object> predicate11 = predicate2.negate();
      predicate7.or(predicate5);
      Predicate<String> predicate12 = predicate8.negate();
      Predicate<Object> predicate13 = predicate11.and(predicate3);
      Predicate<Object> predicate14 = predicate11.negate();
      predicate11.and(predicate13);
      Predicate<String> predicate15 = predicate9.or(predicate5);
      Predicate<String> predicate16 = predicate0.negate();
      predicate16.and(predicate10);
      predicate15.negate();
      Predicate<String> predicate17 = predicate16.and(predicate12);
      predicate14.test(predicate17);
      jSTerm0.add((Object) null);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7186438010844762
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      String string0 = ": ";
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addAll((Collection) jSTerm1);
      jSTerm0.addElement(": ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("term");
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1T$.9u$?+.*)('P7p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.nval = 1.0;
      streamTokenizer0.ordinaryChar(2012);
      streamTokenizer0.quoteChar((-8));
      char[] charArray0 = new char[8];
      charArray0[0] = '\u0080';
      charArray0[1] = '\u0080';
      charArray0[2] = '\u0080';
      charArray0[3] = '\u0080';
      charArray0[4] = 'A';
      charArray0[5] = '\u0080';
      charArray0[6] = '\u0080';
      charArray0[7] = '\u0080';
      stringReader0.read(charArray0);
      streamTokenizer0.ordinaryChars(46, 2012);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.295789001088607
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ;20");
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = 'g';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.eolIsSignificant(true);
      JSTerm jSTerm1 = jSTerm0.call();
      streamTokenizer0.lowerCaseMode(true);
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm2.makeEval(true);
      jSTerm2.remove((Object) stringReader0);
      jSTerm2.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate4.or(predicate1);
      predicate7.or(predicate5);
      predicate7.negate();
      Predicate.isEqual((Object) predicate6);
      predicate1.test(predicate7);
      Predicate<Object> predicate11 = predicate2.negate();
      predicate7.or(predicate5);
      Predicate<String> predicate12 = predicate8.negate();
      Predicate<Object> predicate13 = predicate11.and(predicate3);
      predicate11.negate();
      predicate11.and(predicate13);
      Predicate<String> predicate14 = predicate9.or(predicate5);
      Predicate<String> predicate15 = predicate0.negate();
      predicate15.and(predicate10);
      predicate14.negate();
      predicate15.and(predicate12);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7039917864324614
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      int int0 = 1993;
      jSTerm0.setSize(1993);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Iterator iterator0 = jSSubstitution1.iterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) iterator0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution7);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution1);
      jSSubstitution0.removeAll(jSTerm0);
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate4.negate();
      predicate4.test("t");
      Predicate<String> predicate7 = predicate5.negate();
      predicate1.test(predicate2);
      Predicate<String> predicate8 = predicate0.negate();
      Predicate<String> predicate9 = predicate8.or(predicate1);
      predicate9.negate();
      predicate8.test("` ");
      Predicate<Object> predicate10 = predicate4.or(predicate1);
      Predicate<String> predicate11 = predicate8.or(predicate1);
      predicate1.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate12 = predicate11.negate();
      Predicate.isEqual((Object) predicate6);
      predicate10.and(predicate1);
      Predicate<String> predicate13 = predicate12.negate();
      predicate10.or(predicate3);
      Predicate<Integer> predicate14 = Predicate.isEqual((Object) "t");
      Predicate<Integer> predicate15 = predicate14.negate();
      Predicate.isEqual((Object) predicate13);
      predicate1.test(predicate8);
      predicate7.negate();
      Integer integer0 = new Integer((-4));
      predicate15.test(integer0);
      predicate5.negate();
      jSTerm0.addElement(predicate15);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate4.negate();
      predicate4.test("t");
      Predicate<String> predicate7 = predicate5.negate();
      predicate1.test(predicate2);
      Predicate<String> predicate8 = predicate0.negate();
      Predicate<String> predicate9 = predicate8.or(predicate1);
      predicate9.negate();
      predicate8.test("` ");
      Predicate<Object> predicate10 = predicate4.or(predicate1);
      Predicate<String> predicate11 = predicate8.or(predicate1);
      predicate1.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate12 = predicate11.negate();
      predicate12.test((String) null);
      Predicate.isEqual((Object) predicate6);
      predicate10.and(predicate1);
      Predicate<String> predicate13 = predicate12.negate();
      predicate6.or(predicate3);
      Predicate<Integer> predicate14 = Predicate.isEqual((Object) "t");
      Predicate<Integer> predicate15 = predicate14.negate();
      Predicate.isEqual((Object) predicate13);
      predicate1.test(predicate8);
      predicate7.negate();
      Integer integer0 = new Integer((-4));
      predicate15.test(integer0);
      predicate5.negate();
      jSTerm0.addElement(predicate15);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$45/1722058814 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4638523261020335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isEmpty();
      jSTerm0.addElement(": ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSSubstitution0.removeElements(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.spliterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm3.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9051066634117592
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addAll((Collection) jSTerm1);
      jSTerm0.addElement(": ");
      jSTerm0.addElement(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.clone();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate4.negate();
      predicate4.test("t");
      Predicate<String> predicate7 = predicate5.negate();
      predicate1.test(predicate2);
      Predicate<String> predicate8 = predicate0.negate();
      Predicate<String> predicate9 = predicate8.or(predicate1);
      predicate9.negate();
      predicate8.test("` ");
      Predicate<Object> predicate10 = predicate4.or(predicate1);
      Predicate<String> predicate11 = predicate8.or(predicate1);
      predicate1.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate12 = predicate11.negate();
      Predicate.isEqual((Object) predicate6);
      predicate10.and(predicate1);
      Predicate<String> predicate13 = predicate12.negate();
      predicate10.or(predicate3);
      Predicate<Integer> predicate14 = Predicate.isEqual((Object) "t");
      Predicate<Integer> predicate15 = predicate14.negate();
      Predicate.isEqual((Object) predicate13);
      predicate1.test(predicate8);
      predicate7.negate();
      Integer integer0 = new Integer((-4));
      predicate15.test(integer0);
      predicate5.negate();
      jSTerm0.addElement(predicate15);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$45/1722058814 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.948504972645516
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isEmpty();
      jSTerm0.addElement(": ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSSubstitution0.removeElements(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.spliterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(": ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      streamTokenizer0.quoteChar((-3412));
      JSTerm jSTerm3 = jSTerm0.call();
      JSSubstitution jSSubstitution6 = jSTerm0.matches(jSTerm2, jSSubstitution3);
      jSTerm0.matches(jSTerm3);
      jSTerm1.standardizerTerm();
      assertTrue(jSTerm0.isVariable());
      
      jSTerm1.matches((JSTerm) null, jSSubstitution6);
      assertNotSame(jSTerm2, jSTerm1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.3945853084381383
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1T$.9u$?+.*)('P7p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      StringReader stringReader1 = new StringReader("Yz/{\"%Ai-g.");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer3.commentChar(1339);
      streamTokenizer3.resetSyntax();
      streamTokenizer2.slashStarComments(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer4.commentChar(1339);
      streamTokenizer2.parseNumbers();
      StringReader stringReader2 = new StringReader("t");
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader2);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer4.quoteChar((-4));
      streamTokenizer4.slashStarComments(true);
      streamTokenizer3.slashSlashComments(true);
      streamTokenizer2.resetSyntax();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer4);
      JSTerm jSTerm3 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm2, jSSubstitution0);
      assertEquals(41, streamTokenizer0.ttype);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7879639623115553
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isEmpty();
      jSTerm0.addElement(": ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      Integer integer0 = new Integer(11);
      jSSubstitution6.addElement(integer0);
      jSSubstitution1.addElements(jSSubstitution5);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution7 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      StringReader stringReader0 = new StringReader("|KBL2F|PeV##cjc");
      jSSubstitution2.addElement(jSSubstitution3);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution4);
      jSSubstitution7.add((Object) jSSubstitution6);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      jSTerm2.cloneT();
      jSTerm2.matches(jSTerm0);
      assertTrue(jSTerm0.isVariable());
      assertNotSame(jSTerm0, jSTerm3);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate4.negate();
      predicate4.test("t");
      Predicate<String> predicate7 = predicate5.negate();
      predicate1.test(predicate2);
      Predicate<String> predicate8 = predicate0.negate();
      Predicate<String> predicate9 = predicate8.or(predicate1);
      predicate9.negate();
      predicate8.test("` ");
      Predicate<Object> predicate10 = predicate4.or(predicate1);
      Predicate<String> predicate11 = predicate8.or(predicate1);
      predicate1.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate12 = predicate11.negate();
      predicate12.test((String) null);
      Predicate.isEqual((Object) predicate6);
      predicate10.and(predicate1);
      Predicate<String> predicate13 = predicate12.negate();
      predicate6.or(predicate3);
      Predicate<Integer> predicate14 = Predicate.isEqual((Object) "t");
      Predicate<Integer> predicate15 = predicate14.negate();
      Predicate.isEqual((Object) predicate13);
      predicate1.test(predicate8);
      predicate7.negate();
      Integer integer0 = new Integer((-4));
      predicate15.test(integer0);
      predicate5.negate();
      jSTerm0.addElement(predicate15);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.503333204440867
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate4.or(predicate1);
      predicate7.or(predicate5);
      predicate7.negate();
      predicate1.test(predicate7);
      Predicate<Object> predicate11 = predicate2.negate();
      predicate5.test((String) null);
      Predicate<String> predicate12 = predicate8.negate();
      Predicate<String> predicate13 = predicate9.or(predicate5);
      Predicate<String> predicate14 = predicate0.negate();
      Predicate<String> predicate15 = predicate14.and(predicate10);
      predicate13.negate();
      predicate11.negate();
      Predicate<String> predicate16 = predicate12.negate();
      Predicate<Object> predicate17 = predicate4.negate();
      predicate15.or(predicate17);
      predicate9.negate();
      predicate8.or(predicate15);
      predicate7.or(predicate10);
      predicate16.or(predicate4);
      predicate14.negate();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.3663528150596425
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isEmpty();
      jSTerm1.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate0.or(predicate4);
      Predicate<Object> predicate5 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate6 = predicate0.negate();
      Predicate<String> predicate7 = predicate6.negate();
      Predicate<String> predicate8 = predicate7.or(predicate6);
      predicate6.negate();
      Predicate<String> predicate9 = predicate6.or(predicate8);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate0.and(predicate9);
      Predicate<String> predicate10 = predicate8.negate();
      Predicate<String> predicate11 = predicate10.or(predicate9);
      predicate11.or(predicate8);
      predicate8.negate();
      predicate9.and(predicate0);
      Predicate<Object> predicate12 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate13 = predicate12.and(predicate5);
      Predicate<Object> predicate14 = predicate13.negate();
      predicate14.or(predicate13);
      Predicate.isEqual((Object) "");
      predicate2.negate();
      jSTerm0.removeIf(predicate1);
      jSTerm0.makeVariable();
      jSTerm0.isVariable();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.equals(jSTerm0);
      jSTerm0.isFunction();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(jSTerm0.isFunction());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.562815860600497
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      jSTerm0.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<String> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      JSJshopVars.VarCounter = 0;
      Predicate<String> predicate6 = predicate0.negate();
      Predicate<String> predicate7 = predicate6.negate();
      Predicate<String> predicate8 = predicate7.or(predicate6);
      predicate6.negate();
      Predicate<String> predicate9 = predicate6.or(predicate8);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate0.and(predicate9);
      Predicate<String> predicate10 = predicate8.negate();
      predicate10.and(predicate7);
      predicate4.or(predicate10);
      predicate10.or(predicate8);
      predicate8.negate();
      predicate10.negate();
      predicate9.and(predicate0);
      Predicate<Object> predicate11 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate12 = predicate11.and(predicate5);
      Predicate<Object> predicate13 = predicate12.negate();
      Predicate<Object> predicate14 = predicate13.or(predicate12);
      predicate10.or(predicate14);
      Predicate<String> predicate15 = predicate9.or(predicate14);
      Predicate<String> predicate16 = Predicate.isEqual((Object) predicate13);
      predicate6.or(predicate16);
      Predicate<String> predicate17 = predicate15.negate();
      predicate17.and(predicate9);
      StringReader stringReader0 = new StringReader("error");
      jSTerm0.cloneT();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      predicate4.negate();
      predicate4.test("t");
      predicate5.negate();
      Predicate<String> predicate6 = predicate0.negate();
      predicate6.negate();
      predicate6.negate();
      Predicate<Object> predicate7 = predicate4.or(predicate1);
      Predicate<Object> predicate8 = predicate1.or(predicate4);
      Predicate<String> predicate9 = predicate6.or(predicate5);
      Predicate<Object> predicate10 = predicate7.and(predicate1);
      predicate9.negate();
      predicate4.or(predicate8);
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate11 = predicate1.and(predicate10);
      predicate11.test((Object) null);
      predicate0.or(predicate8);
      predicate5.negate();
      jSTerm0.addElement((Object) null);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.clone();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate4.negate();
      predicate4.test("t");
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate3.or(predicate4);
      Predicate<String> predicate11 = predicate8.or(predicate3);
      predicate9.negate();
      Predicate<String> predicate12 = predicate9.or(predicate4);
      Predicate.isEqual((Object) "?");
      predicate4.test("t");
      Predicate<Object> predicate13 = predicate10.negate();
      Predicate<Object> predicate14 = Predicate.isEqual((Object) "?");
      Predicate<String> predicate15 = predicate9.or(predicate14);
      Predicate<String> predicate16 = predicate8.negate();
      Predicate<Object> predicate17 = predicate6.and(predicate2);
      predicate6.negate();
      predicate13.and(predicate1);
      predicate5.or(predicate17);
      predicate15.negate();
      Predicate<String> predicate18 = predicate12.and(predicate4);
      Predicate<String> predicate19 = predicate18.or(predicate1);
      Predicate<String> predicate20 = predicate16.and(predicate18);
      Predicate.isEqual((Object) predicate20);
      predicate19.negate();
      predicate11.and(predicate8);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(predicate2);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$46/1446711619 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4194556182027664
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isEmpty();
      jSTerm0.addElement(": ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution1.add((Object) jSTerm1);
      jSSubstitution0.removeElements(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSSubstitution2;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm2;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) jSSubstitution2;
      objectArray0[6] = (Object) jSSubstitution3;
      objectArray0[7] = (Object) jSTerm2;
      objectArray0[8] = (Object) jSSubstitution3;
      jSSubstitution0.toArray(objectArray0);
      jSTerm0.spliterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.removeElements(jSSubstitution2);
      jSTerm0.equals(jSTerm2);
      jSTerm2.equals(jSTerm1);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate2.or(predicate4);
      Predicate<Object> predicate5 = predicate1.or(predicate2);
      predicate3.and(predicate5);
      Predicate<String> predicate6 = Predicate.isEqual((Object) predicate3);
      Predicate<String> predicate7 = predicate6.and(predicate3);
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate7.or(predicate0);
      Predicate<String> predicate10 = predicate6.and(predicate0);
      Predicate<String> predicate11 = predicate6.and(predicate0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      predicate10.or(predicate5);
      jSTerm0.replaceAll(unaryOperator0);
      Predicate<String> predicate12 = predicate10.negate();
      Predicate<String> predicate13 = predicate12.negate();
      Predicate<String> predicate14 = predicate13.negate();
      Predicate<Object> predicate15 = predicate1.negate();
      predicate14.and(predicate15);
      Predicate<String> predicate16 = predicate8.or(predicate9);
      predicate16.test("call ");
      predicate11.or(predicate9);
      Predicate.isEqual((Object) predicate6);
      predicate15.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSTerm) null, jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.3105624464720997
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.584880596629479
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement(jSTerm0);
      Object object0 = new Object();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm2.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6070398132485693
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(": ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) ": ");
      jSSubstitution0.containsAll(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElements(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.addElement(jSSubstitution5);
      JSSubstitution jSSubstitution6 = jSTerm0.matches(jSTerm1, jSSubstitution4);
      assertFalse(jSSubstitution6.fail());
      
      StringReader stringReader0 = new StringReader(": ");
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertTrue(jSTerm2.isFunction());
      
      jSTerm0.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution9);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      StringReader stringReader1 = new StringReader(": ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      StringReader stringReader2 = new StringReader("lglix D[.DFi+R5c");
      JSTerm jSTerm4 = jSTerm1.cloneT();
      StringReader stringReader3 = new StringReader("/`kmP.`JPQ6s");
      jSTerm3.matches(jSTerm4);
      assertTrue(jSTerm4.isFunction());
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm4);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.865871668174381
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate.isEqual((Object) predicate1);
      predicate2.or(predicate4);
      Predicate<Object> predicate5 = predicate1.or(predicate2);
      predicate3.and(predicate5);
      Predicate<String> predicate6 = Predicate.isEqual((Object) predicate3);
      Predicate<String> predicate7 = predicate6.and(predicate3);
      predicate7.negate();
      predicate7.or(predicate0);
      predicate6.and(predicate0);
      predicate6.and(predicate0);
      jSSubstitution0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("?5/_ d{M;!d/6=5)sy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm3.isGround();
      assertFalse(jSTerm3.isFunction());
      assertFalse(boolean0);
      assertFalse(jSTerm3.isEval());
      assertEquals("[?%%%]", jSTerm3.toString());
      
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      boolean boolean1 = jSTerm2.isGround();
      assertTrue(boolean1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate4.negate();
      predicate4.test("t");
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate3.or(predicate4);
      predicate8.or(predicate3);
      predicate9.negate();
      Predicate<String> predicate11 = predicate9.or(predicate4);
      Predicate.isEqual((Object) "?");
      predicate2.and(predicate6);
      predicate4.test("t");
      Predicate<Object> predicate12 = predicate10.negate();
      Predicate<Object> predicate13 = Predicate.isEqual((Object) "?");
      predicate10.negate();
      predicate9.or(predicate13);
      Predicate<String> predicate14 = predicate8.negate();
      Predicate<Object> predicate15 = predicate6.and(predicate2);
      predicate6.negate();
      Predicate<Object> predicate16 = predicate12.and(predicate1);
      predicate5.or(predicate15);
      Predicate<String> predicate17 = predicate11.and(predicate4);
      predicate17.or(predicate1);
      Predicate<String> predicate18 = predicate14.and(predicate17);
      predicate18.and(predicate16);
      Predicate.isEqual((Object) predicate18);
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6602162707648
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(NT.9uf?+.*k('P7p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.commentChar(1094);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.quoteChar((-3));
      streamTokenizer0.ordinaryChar(1);
      streamTokenizer1.quoteChar(1094);
      char[] charArray0 = new char[8];
      charArray0[0] = '\u0080';
      charArray0[1] = '\u0080';
      charArray0[2] = '\u0080';
      charArray0[3] = '\u0080';
      charArray0[4] = '\u0080';
      charArray0[5] = '\u0080';
      charArray0[6] = '\u0080';
      charArray0[7] = '\u0080';
      stringReader0.read(charArray0);
      streamTokenizer0.ordinaryChars((-4), (-91));
      streamTokenizer1.slashSlashComments(true);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.456952223364751
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(": ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution0.containsAll(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.removeElements(jSSubstitution2);
      jSSubstitution2.containsAll(jSSubstitution1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      jSTerm1.firstElement();
      jSSubstitution0.add((Object) ": ");
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution2.trimToSize();
      jSSubstitution4.add((Object) jSSubstitution3);
      int int0 = 11;
      JSJshopVars.lessT = 11;
      jSTerm1.setSize(11);
      jSSubstitution1.addElement(jSSubstitution2);
      jSSubstitution3.addElements(jSSubstitution2);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      StringReader stringReader0 = new StringReader("phw~S3r(KO[8");
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7856559149196487
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isEmpty();
      jSTerm0.addElement(": ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSSubstitution1.print();
      jSSubstitution0.removeElements(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.spliterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(": ");
      StringReader stringReader1 = new StringReader(": ");
      jSTerm1.standardizerTerm();
      stringReader1.ready();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader1.reset();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.7848125741159726
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isFunction();
      jSTerm0.addElement(":");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.equals(jSTerm0);
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) ":";
      jSSubstitution0.toArray(objectArray0);
      jSTerm1.removeElement(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm0.equals(jSTerm3);
      JSTerm jSTerm4 = new JSTerm();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm4.forEach(consumer0);
      jSTerm4.trimToSize();
      jSTerm1.add((Object) jSTerm4);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm5 = jSTerm0.cloneT();
      jSTerm5.remove(objectArray0[3]);
      jSTerm2.applySubstitutionT(jSSubstitution0);
      int int0 = 68;
      // Undeclared exception!
      try { 
        jSTerm4.equals(jSTerm5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.2563640070887918
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1TEk$.9u$?+.*)('P7p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      stringReader0.reset();
      JSJshopVars.lessT = (-4);
      stringReader0.ready();
      JSJshopVars.plus = (-4);
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.VarCounter = 1;
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm1.isEval());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.701264949575983
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isEmpty();
      jSTerm0.addElement(": ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(">");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("lglix D[.DFi+R5c");
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.call();
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.649637249326637
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(": ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.addAll((Collection) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution0.containsAll(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.removeElements(jSSubstitution2);
      jSSubstitution2.containsAll(jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution2.trimToSize();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.add((Object) jSSubstitution0);
      jSTerm0.add((Object) jSTerm1);
      StringReader stringReader0 = new StringReader("thU0k},Ff$sR'j");
      jSTerm1.standardizerTerm();
      jSTerm1.applySubstitutionT(jSSubstitution4);
      assertTrue(jSTerm1.isVariable());
      
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.isGround();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      assertEquals("[: , [: ]]", jSTerm3.toString());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-2258), (-2258));
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.5005220101957537
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate5.negate();
      predicate7.test("z<WXSO$TC");
      predicate4.or(predicate1);
      Predicate<String> predicate10 = predicate7.or(predicate5);
      Predicate<Object> predicate11 = predicate3.negate();
      predicate11.or(predicate4);
      Predicate<String> predicate12 = predicate10.or(predicate8);
      predicate7.or(predicate0);
      Predicate<String> predicate13 = predicate12.negate();
      Predicate<String> predicate14 = predicate10.and(predicate9);
      predicate10.test("24h {{ 4,I:IRI");
      Predicate<String> predicate15 = predicate14.or(predicate10);
      predicate13.or(predicate15);
      predicate10.or(predicate2);
      predicate10.negate();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm1.equals(jSTerm2);
      assertFalse(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
      assertTrue(jSTerm3.isFunction());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6952096715064595
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isEmpty();
      jSTerm0.addElement(": ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSSubstitution4.add((Object) jSSubstitution3);
      jSSubstitution2.addAll((Collection) jSTerm0);
      jSSubstitution3.removeElements(jSSubstitution1);
      jSSubstitution2.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      Integer integer0 = new Integer(11);
      jSSubstitution5.addElement(integer0);
      jSSubstitution1.addElements(jSSubstitution1);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution6 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      StringReader stringReader0 = new StringReader("|KBL2F|PeV##cjc");
      jSSubstitution2.addElement(jSSubstitution3);
      jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution4);
      jSSubstitution6.add((Object) jSSubstitution5);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      unaryOperator0.apply(jSSubstitution10);
      jSTerm2.replaceAll(unaryOperator0);
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm2.forEach(consumer0);
      jSTerm2.cloneT();
      boolean boolean0 = jSTerm0.equals(jSTerm2);
      assertEquals(2, jSSubstitution4.size());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.695564491139813
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isEmpty();
      jSTerm0.addElement(": ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSSubstitution0.removeElements(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.addElements(jSSubstitution5);
      jSTerm0.matches(jSTerm1, jSSubstitution3);
      StringReader stringReader0 = new StringReader(">");
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("lglix D[.DFi+R5c");
      jSTerm3.cloneT();
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm3.isVariable());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "%%%";
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6328137802152098
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate4.negate();
      predicate4.test("t");
      predicate5.negate();
      predicate1.test(predicate2);
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<String> predicate8 = predicate7.or(predicate1);
      predicate8.negate();
      predicate7.test("` ");
      Predicate<Object> predicate9 = predicate4.or(predicate1);
      Predicate<String> predicate10 = predicate7.or(predicate1);
      predicate1.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate11 = predicate10.negate();
      predicate11.test((String) null);
      Predicate<String> predicate12 = Predicate.isEqual((Object) predicate6);
      predicate9.and(predicate1);
      Predicate<String> predicate13 = predicate12.negate();
      predicate6.or(predicate3);
      Predicate<Integer> predicate14 = Predicate.isEqual((Object) "t");
      predicate14.negate();
      Predicate.isEqual((Object) predicate13);
      StringReader stringReader0 = new StringReader("%z");
      System.setCurrentTimeMillis(56L);
      JSTerm jSTerm1 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      String string0 = ": ";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.trimToSize();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElements(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.7886016608039883
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(": ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.addAll((Collection) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution0.containsAll(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.removeElements(jSSubstitution2);
      jSSubstitution2.containsAll(jSSubstitution1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution2.trimToSize();
      jSSubstitution4.add((Object) jSSubstitution3);
      JSJshopVars.lessT = 11;
      jSSubstitution1.addElement(jSSubstitution2);
      jSSubstitution3.addElements(jSSubstitution2);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      StringReader stringReader0 = new StringReader("phw~S3r(KO[8");
      jSSubstitution3.addElement(": ");
      jSTerm1.standardizerTerm();
      assertTrue(jSTerm1.isVariable());
      
      jSTerm0.applySubstitutionT(jSSubstitution4);
      jSSubstitution3.add((Object) "qF={");
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertFalse(jSTerm2.isVariable());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.2296747293240762
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(NT.9uf?+.*k('P7p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.quoteChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.quoteChar(36);
      streamTokenizer2.pushBack();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer1.slashSlashComments(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.lowerCaseMode(true);
      streamTokenizer4.commentChar((-4));
      streamTokenizer1.ttype = (-4);
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer3.resetSyntax();
      streamTokenizer4.wordChars((-4), (-4));
      streamTokenizer4.quoteChar((-4));
      streamTokenizer2.quoteChar((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer3.slashStarComments(false);
      streamTokenizer3.slashStarComments(true);
      streamTokenizer4.slashStarComments(true);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6301770496027435
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "(");
      Predicate<Object> predicate2 = Predicate.isEqual((Object) "(");
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      predicate2.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate3);
      Predicate<String> predicate6 = predicate0.and(predicate2);
      Predicate<String> predicate7 = predicate6.or(predicate0);
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate8.negate();
      Predicate<String> predicate10 = predicate9.negate();
      predicate4.or(predicate2);
      predicate8.or(predicate4);
      predicate9.negate();
      predicate1.test(predicate5);
      Predicate<Object> predicate11 = predicate5.and(predicate4);
      Predicate<String> predicate12 = predicate7.or(predicate11);
      Predicate<String> predicate13 = predicate0.or(predicate9);
      Predicate<String> predicate14 = predicate0.and(predicate12);
      Predicate<Object> predicate15 = Predicate.isEqual((Object) "dtj4BY|YC |M");
      predicate6.or(predicate15);
      predicate9.test("(");
      Predicate.isEqual((Object) predicate7);
      Predicate<String> predicate16 = predicate10.or(predicate8);
      Predicate<Object> predicate17 = predicate1.negate();
      predicate17.or(predicate4);
      predicate13.or(predicate14);
      predicate16.negate();
      predicate9.and(predicate16);
      StringReader stringReader0 = new StringReader("error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.cloneT();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("1.~9t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.pushBack();
      streamTokenizer0.ordinaryChars(695, 695);
      streamTokenizer0.commentChar(695);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.sval = "1.~9t";
      char[] charArray0 = new char[19];
      stringReader0.skip((-4));
      streamTokenizer0.ttype = (int) '\u0080';
      streamTokenizer0.ordinaryChar(128);
      streamTokenizer0.nval = (-40.101);
      streamTokenizer0.ttype = (int) '\u0080';
      streamTokenizer0.quoteChar('\u0080');
      stringReader0.read(charArray0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-91), '1');
      streamTokenizer0.slashSlashComments(true);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.7854262937945053
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isEmpty();
      jSTerm0.addElement(": ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSSubstitution0.removeElements(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.spliterator();
      jSTerm0.toStr();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(": ");
      StringReader stringReader1 = new StringReader(": ");
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.matches((JSPredicateForm) jSTerm0);
      stringReader1.ready();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader1.reset();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.1506719848487332
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.290804340273652
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      jSTerm0.addElement("SZ @I2u}z\"^T#(K@U");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.containsAll(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.removeElements(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("SZ @I2u}z\"^T#(K@U");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.spliterator();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution5.forEach(consumer0);
      jSTerm2.matches(jSTerm1, jSSubstitution1);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.855572434978436
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1T$.9u$?+.*)('P7p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.standardizerTerm();
      jSTerm2.equals(jSTerm1);
      JSTerm jSTerm3 = new JSTerm();
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm2.isGround();
      // Undeclared exception!
      try { 
        jSTerm2.remove((-3));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      jSTerm0.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate4.and(predicate2);
      Predicate<String> predicate9 = predicate7.or(predicate8);
      Predicate<String> predicate10 = predicate9.negate();
      Predicate<String> predicate11 = predicate9.negate();
      Predicate<Object> predicate12 = predicate8.or(predicate4);
      Predicate<Object> predicate13 = predicate1.or(predicate3);
      predicate9.or(predicate13);
      predicate10.negate();
      predicate3.test(predicate8);
      Predicate<String> predicate14 = predicate9.or(predicate11);
      predicate5.or(predicate8);
      predicate14.and(predicate2);
      predicate10.test("spP'WN-i77 >");
      StringReader stringReader0 = new StringReader("spP'WN-i77 >");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate15 = predicate3.and(predicate12);
      Predicate<Object> predicate16 = predicate4.or(predicate12);
      predicate16.negate();
      predicate12.or(predicate15);
      Predicate<String> predicate17 = Predicate.isEqual((Object) "spP'WN-i77 >");
      predicate17.or(predicate13);
      jSTerm1.isGround();
      StringReader stringReader1 = new StringReader("%");
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.0446324302033596
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate4.negate();
      predicate4.test("t");
      Predicate<String> predicate7 = predicate5.negate();
      predicate1.test(predicate2);
      Predicate<String> predicate8 = predicate5.negate();
      Predicate<String> predicate9 = predicate8.or(predicate1);
      predicate9.negate();
      predicate7.test("` ");
      predicate4.or(predicate1);
      predicate8.or(predicate1);
      predicate1.negate();
      Predicate.isEqual((Object) predicate1);
      predicate5.or(predicate5);
      Predicate.isEqual((Object) predicate6);
      StringReader stringReader0 = new StringReader("nil");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(238, 60);
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      assertTrue(jSSubstitution0.fail());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader(") ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(2848);
      streamTokenizer0.lowerCaseMode(true);
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5488235345316892
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("1.~9t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.ordinaryChars(695, 695);
      streamTokenizer0.commentChar(695);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.sval = "1.~9t";
      char[] charArray0 = new char[1];
      stringReader0.skip((-4));
      streamTokenizer0.ttype = (int) '\u0080';
      streamTokenizer0.ordinaryChar(128);
      streamTokenizer0.nval = (-40.101);
      streamTokenizer0.ttype = (int) '\u0080';
      streamTokenizer0.quoteChar('\u0080');
      streamTokenizer0.commentChar(695);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-91), '\u0000');
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate7.negate();
      predicate7.and(predicate1);
      Predicate<Object> predicate10 = predicate4.or(predicate1);
      Predicate<String> predicate11 = predicate7.or(predicate5);
      Predicate<String> predicate12 = predicate0.negate();
      Predicate.isEqual((Object) predicate6);
      predicate1.test(predicate7);
      Predicate<Object> predicate13 = predicate2.negate();
      predicate12.or(predicate11);
      Predicate<String> predicate14 = predicate8.negate();
      Predicate<Object> predicate15 = predicate13.and(predicate3);
      Predicate<Object> predicate16 = predicate13.negate();
      predicate13.and(predicate15);
      Predicate<String> predicate17 = predicate9.or(predicate5);
      Predicate<Object> predicate18 = Predicate.isEqual((Object) null);
      predicate17.or(predicate18);
      Predicate<String> predicate19 = predicate0.negate();
      predicate19.and(predicate10);
      predicate17.negate();
      Predicate<String> predicate20 = predicate19.and(predicate14);
      predicate16.test(predicate20);
      predicate9.negate();
      StringReader stringReader0 = new StringReader("!$#O!56fylKsyx^SM");
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.3423901693012241
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("1.~9t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.pushBack();
      streamTokenizer0.ordinaryChars(695, 695);
      streamTokenizer0.commentChar(695);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.sval = "1.~9t";
      char[] charArray0 = new char[1];
      stringReader0.skip((-4));
      streamTokenizer0.ttype = (int) '\u0080';
      streamTokenizer0.ordinaryChar(128);
      streamTokenizer0.nval = (-40.101);
      streamTokenizer0.ttype = (int) '\u0080';
      streamTokenizer0.quoteChar('\u0080');
      streamTokenizer0.commentChar(695);
      stringReader0.read(charArray0);
      int int0 = (-91);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-91), '1');
      streamTokenizer0.slashSlashComments(true);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.411894651572553
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<String> predicate4 = predicate0.negate();
      predicate0.negate();
      Predicate<String> predicate5 = predicate4.negate();
      predicate0.test(": 0");
      Predicate<Object> predicate6 = predicate2.and(predicate1);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) "call ");
      Predicate<Object> predicate8 = predicate6.or(predicate7);
      Predicate<String> predicate9 = predicate0.or(predicate5);
      Predicate<Object> predicate10 = predicate3.negate();
      Predicate<Object> predicate11 = predicate6.or(predicate3);
      Predicate<String> predicate12 = predicate5.or(predicate8);
      Predicate<String> predicate13 = predicate0.or(predicate10);
      predicate10.or(predicate11);
      Predicate<String> predicate14 = predicate4.negate();
      predicate13.and(predicate0);
      predicate5.test("call ");
      predicate9.or(predicate0);
      predicate0.or(predicate6);
      predicate4.or(predicate14);
      predicate12.negate();
      jSTerm0.call();
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B dWC.4q'jvMz");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.8515037185653487
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Term expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(NT.9uf?+.*k('P7p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.commentChar(1094);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.quoteChar((-3));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.pushBack();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.slashSlashComments(true);
      StringReader stringReader1 = new StringReader(": 0");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      streamTokenizer4.lowerCaseMode(true);
      streamTokenizer4.resetSyntax();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.sval = null;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer5);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.307102025739417
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate.isEqual((Object) jSTerm0);
      Predicate.isEqual((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = jSTerm0.clone();
      jSSubstitution1.add(object0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.containsAll(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.removeElements(jSSubstitution0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution0.addElement(jSSubstitution4);
      jSSubstitution5.addElements(jSSubstitution6);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate0.or(predicate4);
      predicate4.negate();
      jSTerm0.isFunction();
      predicate4.negate();
      Predicate<String> predicate5 = predicate0.negate();
      Predicate<String> predicate6 = predicate5.negate();
      predicate5.negate();
      predicate3.or(predicate4);
      predicate6.or(predicate3);
      StringReader stringReader0 = new StringReader("9M!0ErvaP> g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSJshopVars.plus = 2110;
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add(0, (Object) jSSubstitution1);
      jSSubstitution0.ensureCapacity(2);
      assertFalse(jSSubstitution0.fail());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate.isEqual((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution0);
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("QwD]2u!MSlu4Zj=1I$");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1411461439556105
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      jSTerm0.makeEval(false);
      JSJshopVars.greaterT = 46;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightPar = 39;
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = jSTerm0.call();
      int int0 = (-39);
      jSTerm1.ensureCapacity((-39));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.128183350293198
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(T$.9uf?+.*k('P7p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(40, 28);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.call();
      streamTokenizer1.slashStarComments(true);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.2772569862978458
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate4.negate();
      predicate4.test("t");
      predicate5.negate();
      predicate1.test(predicate2);
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<String> predicate8 = predicate7.or(predicate1);
      predicate8.negate();
      predicate7.test("` ");
      Predicate<Object> predicate9 = predicate4.or(predicate1);
      Predicate<String> predicate10 = predicate7.negate();
      predicate1.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate11 = predicate10.negate();
      predicate11.test((String) null);
      Predicate.isEqual((Object) predicate6);
      predicate9.and(predicate1);
      Predicate<String> predicate12 = predicate11.negate();
      predicate9.or(predicate3);
      Predicate<Integer> predicate13 = Predicate.isEqual((Object) "t");
      predicate13.negate();
      Predicate.isEqual((Object) predicate12);
      predicate1.test(predicate7);
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertFalse(jSTerm1.isEval());
      assertEquals("%%% ", stringBuffer0.toString());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("Yzl-63llUdO*!l.");
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringReader0;
      Object object0 = new Object();
      stringReader0.ready();
      objectArray0[1] = object0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      objectArray0[4] = (Object) "Yzl-63llUdO*!l.";
      Object[] objectArray1 = new Object[4];
      objectArray1[1] = object0;
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(NT.9uf?+.*k('P7p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.commentChar(1094);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.quoteChar((-3));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer2.pushBack();
      stringReader0.close();
      streamTokenizer2.slashStarComments(true);
      streamTokenizer1.slashSlashComments(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.resetSyntax();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5488235345316892
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("1.~9t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.pushBack();
      streamTokenizer0.ordinaryChars(695, 695);
      streamTokenizer0.commentChar(695);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.sval = "1.~9t";
      char[] charArray0 = new char[1];
      stringReader0.skip((-4));
      streamTokenizer0.ttype = (int) '\u0080';
      streamTokenizer0.ordinaryChar(128);
      streamTokenizer0.nval = (-40.101);
      streamTokenizer0.ttype = (int) '\u0080';
      streamTokenizer0.quoteChar('\u0080');
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChars((-91), '\u0000');
      streamTokenizer0.slashSlashComments(true);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate4.or(predicate1);
      Predicate<String> predicate11 = predicate7.or(predicate5);
      Predicate<String> predicate12 = predicate7.negate();
      predicate1.test(predicate7);
      Predicate<Object> predicate13 = predicate2.negate();
      predicate5.test((String) null);
      Predicate<String> predicate14 = predicate8.negate();
      Predicate<String> predicate15 = predicate9.or(predicate5);
      Predicate<String> predicate16 = predicate0.negate();
      predicate16.and(predicate10);
      predicate15.negate();
      predicate14.negate();
      predicate9.negate();
      predicate11.or(predicate10);
      Predicate<String> predicate17 = predicate7.and(predicate14);
      predicate17.test(" ) ");
      predicate5.and(predicate2);
      predicate11.or(predicate15);
      predicate12.or(predicate3);
      Predicate.isEqual((Object) "/A_;z");
      predicate13.negate();
      jSTerm0.print();
      assertFalse(jSTerm0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<String> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate6.negate();
      Predicate<String> predicate11 = predicate0.or(predicate4);
      Predicate<String> predicate12 = predicate8.or(predicate11);
      predicate7.negate();
      predicate1.test(predicate7);
      Predicate<Object> predicate13 = predicate4.negate();
      Predicate<Object> predicate14 = predicate4.or(predicate1);
      Predicate<String> predicate15 = predicate8.negate();
      predicate13.negate();
      predicate9.or(predicate5);
      Predicate<String> predicate16 = predicate0.negate();
      Predicate<String> predicate17 = predicate0.and(predicate10);
      Predicate<String> predicate18 = predicate7.negate();
      predicate16.negate();
      Predicate<String> predicate19 = predicate12.and(predicate18);
      predicate4.negate();
      predicate17.negate();
      Predicate<Object> predicate20 = predicate14.negate();
      predicate3.negate();
      Predicate<String> predicate21 = predicate9.negate();
      predicate15.negate();
      predicate21.negate();
      Predicate<String> predicate22 = predicate17.negate();
      predicate19.negate();
      predicate22.negate();
      Predicate<Object> predicate23 = predicate20.negate();
      predicate23.negate();
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      predicate2.negate();
      Predicate<String> predicate6 = predicate0.negate();
      Predicate<String> predicate7 = predicate6.negate();
      Predicate<String> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate4.or(predicate1);
      Predicate<String> predicate10 = predicate6.or(predicate5);
      Predicate<String> predicate11 = predicate6.negate();
      predicate1.test(predicate6);
      Predicate<Object> predicate12 = predicate2.negate();
      predicate5.test((String) null);
      Predicate<String> predicate13 = predicate7.negate();
      predicate2.negate();
      Predicate<String> predicate14 = predicate8.or(predicate5);
      Predicate<String> predicate15 = predicate0.negate();
      Predicate<String> predicate16 = predicate15.and(predicate9);
      predicate14.negate();
      predicate10.and(predicate16);
      predicate12.negate();
      Predicate<String> predicate17 = predicate13.negate();
      predicate2.negate();
      predicate9.negate();
      predicate8.negate();
      predicate17.negate();
      Predicate<String> predicate18 = predicate6.and(predicate13);
      predicate18.or(predicate11);
      predicate0.negate();
      predicate5.and(predicate2);
      predicate18.negate();
      StringReader stringReader0 = new StringReader(" Term expected");
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(T$.9uf?+.*k('P7p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      boolean boolean0 = false;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      boolean boolean1 = true;
      streamTokenizer1.slashStarComments(true);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(NT.9uf?+.*k('P7p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.quoteChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.pushBack();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer1.slashSlashComments(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.slashSlashComments(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.commentChar((-4));
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer4.lowerCaseMode(true);
      streamTokenizer3.resetSyntax();
      streamTokenizer4.wordChars((-4), (-4));
      streamTokenizer4.quoteChar((-4));
      streamTokenizer2.pushBack();
      streamTokenizer2.slashStarComments(true);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer3.slashStarComments(true);
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
