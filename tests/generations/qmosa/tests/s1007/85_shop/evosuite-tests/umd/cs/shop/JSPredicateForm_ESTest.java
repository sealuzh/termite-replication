/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 22:37:31 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.ListIterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) jSTerm1);
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) jSTerm0;
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      JSTerm jSTerm2 = (JSTerm)function0.apply(jSTerm1);
      jSTerm1.replaceAll(unaryOperator0);
      jSTerm1.toArray(objectArray0);
      jSTerm1.isGround();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.spliterator();
      jSTerm0.removeAll(jSTerm1);
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.forEach(consumer1);
      jSTerm1.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm2.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UskvuxFDp3wlm:");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.add((Object) jSTerm1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSTerm0;
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      unaryOperator0.apply((Integer) (-1));
      unaryOperator0.andThen((Function<? super Integer, ?>) function0);
      jSTerm1.replaceAll(unaryOperator0);
      objectArray0[0] = (Object) jSTerm0;
      jSTerm1.toArray(objectArray0);
      jSTerm0.ensureCapacity(4);
      jSTerm1.add((Object) stringReader0);
      jSTerm1.isGround();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.spliterator();
      Integer integer0 = new Integer(40);
      jSTerm0.add((Object) integer0);
      jSTerm0.removeAll(jSTerm1);
      jSTerm0.add((Object) "UskvuxFDp3wlm:");
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.forEach(consumer0);
      jSTerm1.makeConstant();
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.clear();
      jSTerm0.removeAll(jSTerm0);
      jSTerm0.clone();
      jSTerm0.trimToSize();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(!=");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9297061990576545
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(!T");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9342089211275528
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("POU token[zer i+SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "POU token[zer i+SPACE!");
      jSSubstitution0.add((Object) "POU token[zer i+SPACE!");
      Object object0 = new Object();
      jSSubstitution0.ensureCapacity(63);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      jSSubstitution0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Integer integer0 = new Integer((-1612416909));
      jSSubstitution1.add((Object) integer0);
      jSSubstitution1.listIterator();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution1.setSize(0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = (JSSubstitution)jSSubstitution1.clone();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      Integer integer1 = new Integer((-1612416909));
      jSSubstitution2.add((Object) integer1);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      stringReader0.mark(0);
      jSSubstitution4.add((Object) "POU token[zer i+SPACE!");
      jSSubstitution2.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution4);
      jSTerm0.applySubstitutionPF(jSSubstitution3);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      JSPredicateForm jSPredicateForm2 = jSTerm0.standarizerPredicateForm();
      assertTrue(jSPredicateForm2.equals((Object)jSPredicateForm0));
      
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      boolean boolean0 = jSPredicateForm1.equals((JSPredicateForm) jSTerm0);
      assertTrue(boolean0);
      assertEquals("[POU, [token[zer]]", jSPredicateForm1.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7784161335868314
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      stringReader0.skip(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("4[<N K5Ni");
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.containsAll(jSTerm0);
      jSTerm0.equals(jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      UnaryOperator<JSTerm> unaryOperator1 = UnaryOperator.identity();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) unaryOperator1);
      jSTerm0.print();
      jSTerm0.removeAll(jSSubstitution0);
      jSTerm0.trimToSize();
      jSTerm0.ensureCapacity(32);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.print();
      assertEquals("[all, [all], [all]]", jSPredicateForm0.toString());
      
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      System.setCurrentTimeMillis((-1L));
      jSPredicateForm1.print();
      jSTerm0.print();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
      assertEquals("[all, [all], [all]]", jSPredicateForm2.toString());
      assertNotSame(jSPredicateForm2, jSPredicateForm1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "()Q(PE`";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("()Q(PE`");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.8545607627328535
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UskvuxFDp3wlm:");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.add((Object) jSTerm2);
      Object[] objectArray0 = new Object[7];
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      function0.apply(jSTerm2);
      unaryOperator0.andThen((Function<? super Integer, ?>) function0);
      jSTerm2.replaceAll(unaryOperator0);
      objectArray0[0] = (Object) jSTerm0;
      jSTerm2.toArray(objectArray0);
      jSTerm0.ensureCapacity(7);
      jSTerm2.isGround();
      jSTerm1.spliterator();
      Integer integer0 = new Integer(7);
      jSTerm2.add((Object) integer0);
      jSTerm1.removeAll(jSTerm2);
      jSTerm1.add((Object) "UskvuxFDp3wlm:");
      jSTerm2.add((Object) jSTerm1);
      jSTerm0.makeConstant();
      jSTerm2.add((Object) jSTerm1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm2.clear();
      jSTerm1.removeAll(jSTerm1);
      jSTerm0.clone();
      jSTerm0.trimToSize();
      jSTerm0.add((Object) jSTerm2);
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.688573864475436
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(u|[ 839X-1mF.AvPven");
      stringReader0.skip(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm1.containsAll(jSTerm0);
      jSTerm2.equals(jSTerm1);
      stringReader0.reset();
      jSTerm1.add((Object) jSTerm2);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      System.setCurrentTimeMillis(1625L);
      jSPredicateForm0.toStr();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(u|[ 839X-1mF.AvPven");
      stringReader0.skip(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSTerm jSTerm1 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm1.containsAll(jSTerm0);
      jSTerm0.equals(jSTerm1);
      stringReader0.reset();
      jSTerm1.add((Object) jSTerm1);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer(32);
      jSSubstitution0.add((Object) integer0);
      Integer integer1 = new Integer(32);
      System.setCurrentTimeMillis(1L);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1649L);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      stringReader0.skip(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("4[<N K5Ni");
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.containsAll(jSTerm0);
      jSTerm0.equals(jSTerm0);
      stringReader0.reset();
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) function1;
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) stringReader0;
      jSSubstitution0.toArray(objectArray0);
      jSSubstitution0.add((Object) function1);
      jSSubstitution0.add((Object) null);
      Integer integer0 = new Integer(32);
      jSSubstitution0.add((Object) integer0);
      jSTerm0.add((Object) null);
      Integer integer1 = new Integer(32);
      jSTerm0.add((Object) integer1);
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m13");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(0);
      stringReader0.close();
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(0);
      streamTokenizer0.ordinaryChars(0, 0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.521586834652811
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(802);
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.setSize(2089);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.add((Object) " O+");
      jSTerm2.standarizerPredicateForm();
      System.setCurrentTimeMillis((-1L));
      jSTerm1.removeElementAt(802);
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.applySubstitutionPF(jSSubstitution0);
      System.setCurrentTimeMillis(2089);
      System.setCurrentTimeMillis((-1241L));
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.207998337268606
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0wm?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      jSPredicateForm1.isEmpty();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm((String) null);
      jSPredicateForm3.clone();
      jSSubstitution0.add((Object) jSPredicateForm3);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm5 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm1.isEmpty();
      jSPredicateForm4.standarizerPredicateForm();
      jSPredicateForm2.clonePF();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm1.clonePF();
      jSPredicateForm5.clone();
      JSJshopVars.leftBrac = (-2);
      jSPredicateForm6.addAll((Collection) jSPredicateForm5);
      JSJshopVars.whiteSpace = 79;
      JSPredicateForm jSPredicateForm7 = new JSPredicateForm();
      System.setCurrentTimeMillis((-2));
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        jSPredicateForm6.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer((-3));
      jSTerm0.addElement(integer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.iterator();
      jSTerm0.forEach(consumer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.matches(jSTerm0);
      Object object0 = jSTerm0.clone();
      jSTerm1.add(object0);
      jSTerm0.addAll((Collection) jSTerm1);
      jSTerm1.add((Object) "oIEv95*I5z%$>b");
      jSTerm1.stream();
      jSTerm0.spliterator();
      jSTerm0.add((Object) jSTerm1);
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.iterator();
      jSTerm0.forEach(consumer1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "(eGIo[";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(eGIo[");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "(^a>GQu[";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(^a>GQu[");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "(GQu[";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(GQu[");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.8882017287045929
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(u|[ 839X-1mF.AvPven");
      char[] charArray0 = new char[5];
      stringReader0.skip('T');
      charArray0[0] = 'T';
      stringReader0.read(charArray0);
      stringReader0.skip((-1));
      stringReader0.ready();
      stringReader0.reset();
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("(u|[ 839X-1mF.AvPven");
      stringReader0.read(charArray0);
      stringReader1.ready();
      stringReader0.reset();
      stringReader0.reset();
      StringReader stringReader2 = new StringReader("(u|[ 839X-1mF.AvPven");
      stringReader1.reset();
      StringReader stringReader3 = new StringReader("");
      StringReader stringReader4 = new StringReader("(u|[ 839X-1mF.AvPven");
      stringReader2.read(charArray0);
      stringReader4.markSupported();
      StringReader stringReader5 = new StringReader("UnexFected ) while reading Preicate");
      stringReader3.read();
      stringReader5.read(charArray0);
      stringReader5.reset();
      stringReader3.reset();
      stringReader5.mark(5);
      stringReader1.markSupported();
      StringReader stringReader6 = new StringReader("UHU^2.V%PlY.");
      stringReader2.read(charArray0);
      StringReader stringReader7 = new StringReader("c F{83j?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tOe joken[zer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) (-4);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.sval = streamTokenizer1.sval;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer2.ordinaryChars((-1841125505), 2275);
      streamTokenizer0.whitespaceChars((-4), 2275);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      streamTokenizer0.quoteChar(32);
      streamTokenizer2.wordChars(32, 32);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer0.ordinaryChars(32, 32);
      streamTokenizer1.eolIsSignificant(true);
      stringReader0.markSupported();
      streamTokenizer1.sval = null;
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChars(32, (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.sval = null;
      streamTokenizer2.parseNumbers();
      System.setCurrentTimeMillis(32);
      System.setCurrentTimeMillis(32);
      System.setCurrentTimeMillis((-4));
      jSTerm1.add((Object) "4hZ{@ywd%P");
      System.setCurrentTimeMillis(32);
      System.setCurrentTimeMillis((-4));
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "(Q5PN(`y";
      int int0 = (-614);
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer((-303));
      jSTerm0.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tOe token[zer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = null;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      jSTerm0.add((Object) null);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.nextToken();
      streamTokenizer1.wordChars(124, (-1));
      streamTokenizer0.whitespaceChars((-3), 2291);
      int int0 = (-1849346396);
      streamTokenizer2.ordinaryChar((-3));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-701));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      stringReader0.markSupported();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0290018112854749
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Operator name expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clonePF();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      jSTerm1.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.remove((Object) jSTerm1);
      streamTokenizer1.pushBack();
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.parseNumbers();
      streamTokenizer2.wordChars((-568), 32);
      jSTerm1.setSize(142);
      jSTerm1.contains(streamTokenizer1);
      jSTerm0.add((Object) null);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChar(32);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer3);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "(4GQu[";
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "?w0wm?");
      char[] charArray0 = new char[4];
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.forEach(consumer0);
      charArray0[2] = '\u0000';
      jSPredicateForm0.add((Object) "?w0wm?");
      jSPredicateForm0.ensureCapacity((-231));
      charArray0[3] = 'p';
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tOe tok[zer i[ OPCE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.markSupported();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.retainAll(jSSubstitution0);
      jSSubstitution1.addElements(jSSubstitution0);
      UnaryOperator.identity();
      jSSubstitution1.parallelStream();
      Function.identity();
      Function.identity();
      jSSubstitution0.trimToSize();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution5.add((Object) listIterator0);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      Integer integer0 = new Integer((-3));
      jSSubstitution5.remove((Object) integer0);
      streamTokenizer0.sval = "Predicateform.print(): 0 elements";
      jSTerm0.add((Object) jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0168805991642629
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Operator name expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.remove((Object) jSTerm2);
      jSSubstitution0.add((Object) jSTerm0);
      streamTokenizer1.pushBack();
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.wordChars((-568), (-4));
      jSTerm2.setSize(142);
      jSTerm2.contains(streamTokenizer1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("POe token[zer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Integer integer0 = new Integer((-1612416909));
      jSSubstitution1.add((Object) integer0);
      jSSubstitution1.add((Object) jSTerm0);
      jSSubstitution1.listIterator();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) integer0;
      jSTerm0.add((Object) "POe token[zer is SPACE!");
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) "POe token[zer is SPACE!";
      jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution0);
      jSSubstitution2.setSize(0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution4);
      Integer integer1 = new Integer(32);
      jSSubstitution1.remove((Object) integer1);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      stringReader0.skip((-1612416909));
      Integer integer2 = new Integer(1);
      stringReader0.read();
      jSSubstitution3.add((Object) integer2);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution8);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tOe joken[zer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = streamTokenizer0.nval;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = null;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.whitespaceChars((-4), 2251);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      streamTokenizer1.ordinaryChars(1463, (-3));
      streamTokenizer0.quoteChar((-3));
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer2.ordinaryChars((-3), (-3));
      streamTokenizer1.eolIsSignificant(false);
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      streamTokenizer0.ordinaryChar(2251);
      streamTokenizer1.sval = null;
      streamTokenizer0.nval = (double) (-3);
      streamTokenizer0.ordinaryChars((-3), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.sval = "joken";
      Integer integer0 = new Integer(32);
      streamTokenizer2.parseNumbers();
      System.setCurrentTimeMillis(32);
      System.setCurrentTimeMillis(32);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis((-3));
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("POe token[zer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChar((-1078413069));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-4));
      jSTerm0.add((Object) streamTokenizer0);
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.commentChar((-4));
      streamTokenizer1.ordinaryChars((-4), 3753);
      streamTokenizer1.quoteChar(32);
      streamTokenizer1.ordinaryChars((-4), 32);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer2.eolIsSignificant(false);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer2.lowerCaseMode(false);
      streamTokenizer0.wordChars(2048, 295);
      streamTokenizer1.parseNumbers();
      streamTokenizer2.whitespaceChars(32, 32);
      streamTokenizer0.ttype = (-4);
      streamTokenizer0.nextToken();
      streamTokenizer0.ttype = (-4);
      System.setCurrentTimeMillis((-4));
      streamTokenizer2.whitespaceChars(2048, (-1));
      streamTokenizer1.quoteChar((-1432813312));
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.iterator();
      jSTerm0.forEach(consumer0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.add((Object) jSTerm2);
      jSTerm1.add((Object) "oIEv95*I5z%$>b");
      jSTerm1.stream();
      jSTerm0.spliterator();
      jSTerm1.add((Object) null);
      jSTerm0.add((Object) jSTerm1);
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = jSTerm2.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0o-,8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) (-4);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = null;
      streamTokenizer0.nextToken();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.whitespaceChars((-1110869056), (-3));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.ordinaryChars((-3), 2275);
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer1.commentChar((-3));
      streamTokenizer1.ordinaryChars((-3), (-3));
      streamTokenizer0.sval = streamTokenizer0.sval;
      streamTokenizer0.quoteChar((-3));
      streamTokenizer0.wordChars((-3), (-3));
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer0.ordinaryChars((-3), (-3));
      streamTokenizer1.eolIsSignificant(false);
      stringReader0.markSupported();
      streamTokenizer0.ttype = (-4);
      streamTokenizer0.ordinaryChars((-3), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.parseNumbers();
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis((-4));
      streamTokenizer0.ttype = (-4);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis((-4));
      jSTerm0.matches((JSPredicateForm) jSTerm1);
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0o-,8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) (-4);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.sval = streamTokenizer1.sval;
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer2.ordinaryChars((-1841125505), 2275);
      streamTokenizer0.whitespaceChars((-4), 2275);
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer1.ordinaryChars((-3), (-3));
      streamTokenizer0.quoteChar((-3));
      streamTokenizer0.ordinaryChars((-3), (-3));
      streamTokenizer1.eolIsSignificant(true);
      stringReader0.markSupported();
      streamTokenizer1.sval = "o-";
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChars((-3), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.sval = "o-";
      streamTokenizer2.parseNumbers();
      System.setCurrentTimeMillis((-3));
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis((-3));
      streamTokenizer1.whitespaceChars(3028, (-3));
      System.setCurrentTimeMillis((-4));
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tOe joken[zer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = streamTokenizer0.nval;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.sval = streamTokenizer1.sval;
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.whitespaceChars((-4), 2251);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      streamTokenizer1.ordinaryChars((-3), (-3));
      streamTokenizer0.quoteChar((-3));
      streamTokenizer2.wordChars((-48699165), (-3));
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer2.ordinaryChars((-3), (-3));
      streamTokenizer1.eolIsSignificant(true);
      stringReader0.markSupported();
      streamTokenizer1.sval = "joken";
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChars((-3), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.sval = "joken";
      streamTokenizer2.parseNumbers();
      System.setCurrentTimeMillis(32);
      System.setCurrentTimeMillis(32);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis((-3));
      System.setCurrentTimeMillis((-4));
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.8646617728338635
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UskvuxFDp3wlm:");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm1.add((Object) jSTerm2);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) jSTerm0;
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      unaryOperator0.andThen((Function<? super Integer, ?>) function0);
      jSTerm2.replaceAll(unaryOperator0);
      objectArray0[0] = (Object) jSTerm0;
      jSTerm2.toArray(objectArray0);
      jSTerm0.ensureCapacity(4);
      jSTerm2.isGround();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.spliterator();
      JSTerm jSTerm3 = new JSTerm();
      Integer integer0 = new Integer(40);
      jSTerm3.add((Object) integer0);
      jSTerm3.removeAll(jSTerm2);
      jSTerm1.add((Object) "UskvuxFDp3wlm:");
      jSTerm2.add((Object) jSTerm3);
      jSTerm2.forEach(consumer0);
      jSTerm0.makeConstant();
      jSTerm2.add((Object) jSTerm3);
      jSTerm2.add((Object) jSTerm1);
      jSTerm2.clear();
      jSTerm1.removeAll(jSTerm1);
      jSTerm0.clone();
      jSTerm0.trimToSize();
      jSTerm2.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm2);
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0o-,8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) (-4);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.sval = streamTokenizer1.sval;
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer2.whitespaceChars((-1110869056), (-3));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer2.ordinaryChars((-4), 2275);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      streamTokenizer0.commentChar(2275);
      streamTokenizer1.ordinaryChars((-3), (-3));
      streamTokenizer0.sval = "w";
      streamTokenizer0.quoteChar((-3));
      streamTokenizer2.wordChars((-3), (-3));
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer0.ordinaryChars((-3), (-3));
      streamTokenizer1.eolIsSignificant(true);
      stringReader0.markSupported();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ordinaryChars((-3), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer2.parseNumbers();
      System.setCurrentTimeMillis((-2));
      System.setCurrentTimeMillis((-2));
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis((-3));
      System.setCurrentTimeMillis((-4));
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.iterator();
      jSTerm0.forEach(consumer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "oIEv95*I5z%$>b");
      jSTerm1.stream();
      jSTerm0.spliterator();
      jSTerm0.add((Object) jSTerm1);
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm1);
      assertFalse(jSSubstitution0.fail());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "0wm?";
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "0wm?");
      jSPredicateForm0.toStr();
      String string1 = "<=";
      StringReader stringReader0 = new StringReader("<=");
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        stringReader0.read((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "?w0wm?");
      char[] charArray0 = new char[4];
      charArray0[2] = '\u0000';
      jSPredicateForm0.ensureCapacity((-231));
      charArray0[3] = 'p';
      jSPredicateForm0.print();
      jSPredicateForm0.print();
      assertEquals(1, jSPredicateForm0.size());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "(";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightBrac = 6;
      JSJshopVars.leftPar = 6;
      JSJshopVars.percent = 6;
      JSJshopVars.lessT = 6;
      JSJshopVars.equalT = 6;
      JSJshopVars.lessT = 6;
      JSJshopVars.apostrophe = 6;
      JSJshopVars.percent = 6;
      JSJshopVars.colon = 6;
      JSJshopVars.whiteSpace = 6;
      JSJshopVars.slash = 6;
      JSJshopVars.greaterT = 6;
      JSJshopVars.percent = 6;
      JSJshopVars.leftBrac = 6;
      JSJshopVars.astherisk = 6;
      JSJshopVars.apostrophe = 6;
      JSJshopVars.leftBrac = 6;
      JSJshopVars.lessT = 6;
      JSJshopVars.leftBrac = 6;
      JSJshopVars.slash = 6;
      JSJshopVars.exclamation = 6;
      JSJshopVars.rightPar = 6;
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "(Q5PN(`qy";
      int int0 = (-656);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UskvuxFDp3wlm:");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm0.makeConstant();
      jSTerm1.add((Object) jSTerm2);
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) jSTerm1;
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      function0.apply(jSTerm2);
      unaryOperator0.andThen((Function<? super Integer, ?>) function0);
      jSTerm2.replaceAll(unaryOperator0);
      objectArray0[0] = (Object) jSTerm0;
      jSTerm2.toArray(objectArray0);
      jSTerm0.ensureCapacity(7);
      jSTerm2.isGround();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.spliterator();
      Integer integer0 = new Integer(7);
      jSTerm2.add((Object) integer0);
      jSTerm1.removeAll(jSTerm2);
      jSTerm1.add((Object) "UskvuxFDp3wlm:");
      jSTerm2.add((Object) jSTerm1);
      jSTerm2.forEach(consumer1);
      jSTerm0.makeConstant();
      jSTerm2.add((Object) jSTerm1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm2.clear();
      jSTerm1.removeAll(jSTerm1);
      jSTerm0.clone();
      jSTerm0.trimToSize();
      jSTerm0.add((Object) jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(zP 83dX-#mF.AoPie%");
      char[] charArray0 = new char[7];
      stringReader0.read(charArray0);
      stringReader0.ready();
      stringReader0.skip(7);
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("(zP 83dX-#mF.AoPie%");
      stringReader0.read(charArray0);
      stringReader1.ready();
      stringReader1.reset();
      stringReader0.reset();
      StringReader stringReader2 = new StringReader("(zP 83dX-#mF.AoPie%");
      stringReader1.reset();
      stringReader1.read();
      StringReader stringReader3 = new StringReader("(zP 83dX-#mF.AoPie%");
      StringReader stringReader4 = new StringReader("(zP 83dX-#mF.AoPie%");
      stringReader4.reset();
      stringReader2.reset();
      stringReader2.read(charArray0);
      stringReader4.markSupported();
      stringReader2.reset();
      stringReader2.read(charArray0);
      StringReader stringReader5 = new StringReader("(zP 83dX-#mF.AoPie%");
      stringReader5.read();
      stringReader5.read(charArray0);
      stringReader1.reset();
      stringReader2.reset();
      stringReader5.reset();
      stringReader5.reset();
      StringReader stringReader6 = new StringReader("3n\"%cU6so4o3)`x");
      stringReader2.read(charArray0);
      StringReader stringReader7 = new StringReader(" pcYt,ed(");
      stringReader1.reset();
      StringReader stringReader8 = new StringReader("(zP 83dX-#mF.AoPie%");
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSJshopVars.rightBrac = 6;
      JSJshopVars.leftPar = 6;
      JSJshopVars.percent = 6;
      JSJshopVars.lessT = 6;
      JSJshopVars.equalT = 6;
      JSJshopVars.lessT = 6;
      JSJshopVars.apostrophe = 6;
      JSJshopVars.percent = 6;
      JSJshopVars.colon = 6;
      JSJshopVars.whiteSpace = 6;
      JSJshopVars.slash = 6;
      JSJshopVars.percent = 6;
      JSJshopVars.leftBrac = 6;
      JSJshopVars.astherisk = 6;
      JSJshopVars.apostrophe = 6;
      JSJshopVars.leftBrac = 6;
      JSJshopVars.lessT = 6;
      JSJshopVars.leftBrac = 6;
      JSJshopVars.slash = 6;
      JSJshopVars.exclamation = 6;
      JSJshopVars.rightPar = 6;
      JSJshopVars.astherisk = 6;
      JSJshopVars.backquote = 6;
      JSJshopVars.astherisk = JSJshopVars.astherisk;
      JSJshopVars.whiteSpace = 6;
      JSJshopVars.verticalL = 6;
      JSJshopVars.leftBrac = 6;
      JSJshopVars.equalT = 6;
      JSJshopVars.astherisk = 6;
      JSJshopVars.verticalL = 6;
      JSJshopVars.slash = 6;
      JSJshopVars.whiteSpace = 6;
      JSJshopVars.exclamation = 62;
      JSJshopVars.dot = 62;
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSUtil");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.coma = 298;
      JSJshopVars.rightBrac = 6;
      JSJshopVars.leftPar = 6;
      JSJshopVars.lessT = 6;
      JSJshopVars.equalT = 6;
      JSJshopVars.apostrophe = 6;
      JSJshopVars.percent = 6;
      JSJshopVars.colon = 6;
      JSJshopVars.whiteSpace = (-1078413042);
      JSJshopVars.slash = 6;
      JSJshopVars.greaterT = 6;
      JSJshopVars.percent = 6;
      JSJshopVars.leftBrac = 6;
      JSJshopVars.astherisk = 6;
      JSJshopVars.apostrophe = 6;
      JSJshopVars.leftBrac = 6;
      JSJshopVars.leftBrac = 6;
      JSJshopVars.slash = 6;
      JSJshopVars.exclamation = 6;
      JSJshopVars.rightPar = 6;
      JSJshopVars.astherisk = 6;
      JSJshopVars.backquote = 6;
      JSJshopVars.astherisk = JSJshopVars.astherisk;
      JSJshopVars.whiteSpace = 6;
      JSJshopVars.verticalL = 6;
      JSJshopVars.leftBrac = 6;
      JSJshopVars.greaterT = 6;
      JSJshopVars.equalT = 6;
      JSJshopVars.astherisk = 6;
      JSJshopVars.verticalL = 6;
      JSJshopVars.slash = 6;
      JSJshopVars.whiteSpace = 6;
      JSJshopVars.exclamation = 6;
      JSJshopVars.dot = 6;
      JSJshopVars.greaterT = 6;
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<String> predicate1 = predicate0.and(predicate0);
      Predicate<String> predicate2 = predicate1.or(predicate0);
      Predicate<String> predicate3 = predicate2.negate();
      jSPredicateForm0.toStr();
      jSPredicateForm0.removeIf(predicate3);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("", stringBuffer0.toString());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.rightBrac = 6;
      JSJshopVars.leftPar = 6;
      JSJshopVars.lessT = 6;
      JSJshopVars.equalT = 6;
      JSJshopVars.lessT = 6;
      JSJshopVars.apostrophe = 6;
      JSJshopVars.percent = 6;
      JSJshopVars.colon = 6;
      JSJshopVars.whiteSpace = (-1078413042);
      JSJshopVars.slash = 6;
      JSJshopVars.greaterT = 6;
      JSJshopVars.percent = 6;
      JSJshopVars.leftBrac = 6;
      JSJshopVars.astherisk = 6;
      JSJshopVars.apostrophe = 6;
      JSJshopVars.lessT = 6;
      JSJshopVars.slash = 6;
      JSJshopVars.exclamation = 6;
      JSJshopVars.rightPar = 6;
      JSJshopVars.astherisk = 6;
      JSJshopVars.backquote = 6;
      JSJshopVars.astherisk = JSJshopVars.astherisk;
      JSJshopVars.whiteSpace = 6;
      JSJshopVars.verticalL = 6;
      JSJshopVars.greaterT = 6;
      JSJshopVars.equalT = 6;
      JSJshopVars.astherisk = 6;
      JSJshopVars.verticalL = 6;
      JSJshopVars.slash = 6;
      JSJshopVars.whiteSpace = 6;
      JSJshopVars.exclamation = 6;
      JSJshopVars.dot = 6;
      JSJshopVars.greaterT = 6;
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(u|[ 839X-1mF.AvPven");
      char[] charArray0 = new char[5];
      stringReader0.reset();
      stringReader0.ready();
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("(u|[ 839X-1mF.AvPven");
      stringReader0.read(charArray0);
      stringReader1.ready();
      stringReader0.reset();
      stringReader0.reset();
      StringReader stringReader2 = new StringReader("(u|[ 839X-1mF.AvPven");
      stringReader1.reset();
      StringReader stringReader3 = new StringReader("(u|[ 839X-1mF.AvPven");
      StringReader stringReader4 = new StringReader("(u|[ 839X-1mF.AvPven");
      stringReader2.read(charArray0);
      stringReader4.markSupported();
      stringReader2.reset();
      stringReader2.read(charArray0);
      StringReader stringReader5 = new StringReader("dneFected ) whie reading Preicale");
      stringReader5.read();
      stringReader5.ready();
      stringReader3.read();
      stringReader5.read(charArray0);
      stringReader1.reset();
      stringReader5.reset();
      stringReader3.reset();
      stringReader1.markSupported();
      StringReader stringReader6 = new StringReader("UHU^2.V%PlY.");
      stringReader2.read(charArray0);
      StringReader stringReader7 = new StringReader(" Expct,ed(");
      stringReader1.reset();
      StringReader stringReader8 = new StringReader("(u|[ 839X-1mF.AvPven");
      stringReader8.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader8);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.rightBrac = 28;
      JSJshopVars.leftPar = (-886);
      JSJshopVars.equalT = 28;
      JSJshopVars.percent = 28;
      JSJshopVars.colon = (-886);
      JSJshopVars.slash = (-1089515011);
      JSJshopVars.greaterT = 28;
      JSJshopVars.percent = (-886);
      JSJshopVars.leftBrac = (-886);
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "kgqu";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("kgqu");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("('53HPA[(`Ry");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.rightBrac = 6;
      JSJshopVars.leftPar = 6;
      JSJshopVars.lessT = 6;
      JSJshopVars.equalT = 6;
      JSJshopVars.lessT = 6;
      JSJshopVars.apostrophe = (-886);
      JSJshopVars.percent = 6;
      JSJshopVars.colon = 6;
      JSJshopVars.slash = 6;
      JSJshopVars.greaterT = 6;
      JSJshopVars.percent = 6;
      JSJshopVars.leftBrac = 6;
      JSJshopVars.astherisk = 6;
      JSJshopVars.apostrophe = 6;
      JSJshopVars.leftBrac = 6;
      JSJshopVars.lessT = 6;
      JSJshopVars.leftBrac = 6;
      JSJshopVars.exclamation = 6;
      JSJshopVars.rightPar = 6;
      jSPredicateForm0.print();
      JSJshopVars.astherisk = 6;
      JSJshopVars.backquote = 6;
      JSJshopVars.astherisk = JSJshopVars.astherisk;
      JSJshopVars.whiteSpace = 6;
      JSJshopVars.verticalL = 6;
      JSJshopVars.leftBrac = 6;
      JSJshopVars.greaterT = 6;
      JSJshopVars.equalT = 6;
      JSJshopVars.astherisk = 6;
      jSPredicateForm0.setSize(60);
      JSJshopVars.verticalL = 6;
      JSJshopVars.whiteSpace = 6;
      JSJshopVars.exclamation = 6;
      JSJshopVars.dot = 6;
      JSJshopVars.greaterT = 6;
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("POU token[zer i+SPACE!");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "POU token[zer i+SPACE!");
      jSSubstitution0.add((Object) null);
      Object object0 = new Object();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.setSize(0);
      Integer integer0 = new Integer((-1612416896));
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) integer0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) "POU token[zer i+SPACE!");
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) null);
      Object[] objectArray0 = new Object[11];
      objectArray0[0] = (Object) "POU token[zer i+SPACE!";
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[10] = (Object) listIterator0;
      objectArray0[4] = (Object) 0;
      System.setCurrentTimeMillis(121L);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
