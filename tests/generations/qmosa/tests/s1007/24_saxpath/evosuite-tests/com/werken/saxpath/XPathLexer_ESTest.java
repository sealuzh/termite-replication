/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 13:19:34 GMT 2020
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.481322115624153
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      assertEquals("z", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token1 = xPathLexer0.notEquals();
      assertEquals("j7", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("4m");
      XPathLexer xPathLexer3 = new XPathLexer("4m");
      xPathLexer3.mod();
      Token token2 = xPathLexer0.leftParen();
      assertEquals("p", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      xPathLexer3.relationalOperator();
      Token token3 = xPathLexer3.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer3.relationalOperator();
      xPathLexer0.endPosition();
      xPathLexer3.doubleColon();
      xPathLexer1.pipe();
      Token token4 = xPathLexer3.slashes();
      assertEquals(11, token4.getTokenType());
      
      xPathLexer2.currentPosition();
      xPathLexer2.doubleColon();
      xPathLexer3.not();
      Token token5 = xPathLexer2.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals("Vn", token6.getTokenText());
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer2.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      xPathLexer2.and();
      Token token8 = xPathLexer3.dollar();
      assertEquals(26, token8.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      assertEquals("]", token9.getTokenText());
      
      Token token10 = xPathLexer3.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("4m");
      XPathLexer xPathLexer5 = new XPathLexer("#cy");
      Token token11 = xPathLexer5.nextToken();
      assertEquals("#cy", token11.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token12 = xPathLexer6.star();
      assertEquals(20, token12.getTokenType());
      
      Token token13 = xPathLexer0.colon();
      assertEquals("i", token13.getTokenText());
      
      Token token14 = xPathLexer2.pipe();
      assertEquals(17, token14.getTokenType());
      
      Token token15 = xPathLexer5.rightParen();
      assertEquals("#", token15.getTokenText());
      assertEquals(2, token15.getTokenType());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.8822117420464162
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bs.g}ibDE1");
      xPathLexer0.comma();
      xPathLexer0.setXPath("bs.g}ibDE1");
      XPathLexer xPathLexer1 = new XPathLexer("59V8");
      Token token0 = xPathLexer1.dots();
      Token token1 = xPathLexer0.nextToken();
      token0.toString();
      token1.toString();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3280230484038449
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?5g9V8");
      xPathLexer0.doubleColon();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.currentPosition();
      xPathLexer0.doubleColon();
      xPathLexer0.not();
      xPathLexer0.number();
      xPathLexer0.doubleColon();
      xPathLexer0.isIdentifierChar('M');
      xPathLexer0.consume(101);
      Token token0 = xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer("sXfB)(FPDW");
      xPathLexer2.nextToken();
      xPathLexer1.at();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.equals();
      xPathLexer2.star();
      xPathLexer1.doubleColon();
      Token token1 = xPathLexer1.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1178055291729363
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.pipe();
      xPathLexer0.star();
      xPathLexer0.plus();
      Token token1 = xPathLexer0.equals();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.endPosition();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.pipe();
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      xPathLexer0.star();
      xPathLexer0.star();
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      xPathLexer0.star();
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      
      xPathLexer0.endPosition();
      xPathLexer0.relationalOperator();
      Token token11 = xPathLexer0.star();
      assertEquals(20, token11.getTokenType());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.4119459597685553
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("< :Ds=@1xa7rbDEdE^o");
      Token token2 = xPathLexer1.notEquals();
      assertEquals("< ", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.mod();
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer1.dots();
      assertEquals(":", token3.getTokenText());
      
      xPathLexer2.relationalOperator();
      xPathLexer2.endPosition();
      xPathLexer1.doubleColon();
      Token token4 = xPathLexer2.pipe();
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer2.rightParen();
      assertEquals(2, token5.getTokenType());
      
      xPathLexer0.endPosition();
      Token token6 = xPathLexer1.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals("=@", token6.getTokenText());
      
      Token token7 = xPathLexer1.notEquals();
      assertEquals(22, token7.getTokenType());
      
      xPathLexer1.operatorName();
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      
      xPathLexer2.setPreviousToken(token1);
      assertEquals(13, token1.getTokenType());
      
      xPathLexer2.nextToken();
      Token token10 = xPathLexer2.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer1.plus();
      assertEquals(5, token11.getTokenType());
      assertEquals("a", token11.getTokenText());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3816224748792685
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.sxpath.XathLexer");
      xPathLexer0.and();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.and();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.colon();
      assertEquals("m", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token2);
      assertEquals(23, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals("co", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("werken.sxpath.XathLexer", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3767547157670914
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.number();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("8'y");
      Token token1 = xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("pnfr");
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer2.notEquals();
      String string0 = token0.toString();
      assertEquals("[ (30) ()", string0);
      
      xPathLexer2.mod();
      Token token2 = xPathLexer0.pipe();
      String string1 = token2.toString();
      assertEquals("[ (17) (m)", string1);
      
      xPathLexer0.colon();
      Token token3 = xPathLexer2.plus();
      assertEquals("f", token3.getTokenText());
      assertEquals(5, token3.getTokenType());
      
      xPathLexer1.pipe();
      Token token4 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer2.equals();
      assertEquals("r", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.div();
      xPathLexer3.setPreviousToken((Token) null);
      Token token6 = xPathLexer4.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals("w", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer3.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer4.setPreviousToken(token1);
      assertEquals(22, token1.getTokenType());
      assertEquals("co", token1.getTokenText());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals("", token9.getTokenText());
      assertEquals((-1), token9.getTokenType());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.829185932609468
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("H^ElZuy<#>9");
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.endPosition();
      xPathLexer1.notEquals();
      xPathLexer1.star();
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer0.setXPath("H^ElZuy<#>9");
      XPathLexer xPathLexer3 = new XPathLexer("1Rc|je_5<");
      Token token0 = xPathLexer3.identifierOrOperatorName();
      token0.toString();
      token0.toString();
      xPathLexer2.consume(0);
      xPathLexer0.equals();
      xPathLexer1.and();
      xPathLexer2.setPreviousToken((Token) null);
      XPathLexer xPathLexer4 = new XPathLexer("1Rc|je_5<");
      xPathLexer4.nextToken();
      xPathLexer2.pipe();
      xPathLexer1.colon();
      xPathLexer3.not();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer4.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.consume();
      Token token1 = xPathLexer6.literal();
      assertNull(token1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6819814949359735
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.dots();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      xPathLexer1.dots();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.rightParen();
      xPathLexer2.endPosition();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer3.notEquals();
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.number();
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer3.and();
      xPathLexer5.relationalOperator();
      xPathLexer4.plus();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.leftBracket();
      XPathLexer xPathLexer7 = new XPathLexer("XRqj<@@ITo8`fB6y");
      xPathLexer5.and();
      xPathLexer7.nextToken();
      xPathLexer5.colon();
      xPathLexer2.pipe();
      xPathLexer3.rightParen();
      xPathLexer4.not();
      Token token1 = xPathLexer6.identifierOrOperatorName();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.472003786654235
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.sxpath.XathLexer");
      xPathLexer0.and();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("co", token0.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.colon();
      assertEquals("m", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      Token token3 = xPathLexer0.slashes();
      assertEquals("w", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.setPreviousToken(token2);
      assertEquals(".", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals("e", token5.getTokenText());
      
      Token token6 = xPathLexer0.identifier();
      assertEquals("rken.sxpath.XathLexer", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6532243859399272
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L`SxPt7a&B|lWo.A^");
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.comma();
      Token token1 = xPathLexer0.rightParen();
      Token token2 = xPathLexer0.number();
      xPathLexer0.LA(1);
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.mod();
      token0.toString();
      xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.notEquals();
      xPathLexer0.equals();
      xPathLexer0.mod();
      token2.toString();
      token2.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.currentPosition();
      xPathLexer0.doubleColon();
      xPathLexer1.not();
      xPathLexer1.number();
      xPathLexer0.doubleColon();
      xPathLexer1.nextToken();
      xPathLexer1.and();
      xPathLexer1.dollar();
      xPathLexer0.relationalOperator();
      xPathLexer0.plus();
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer("-vjCX7&;pcXK22");
      xPathLexer2.nextToken();
      xPathLexer0.colon();
      xPathLexer2.pipe();
      Token token3 = xPathLexer1.rightParen();
      assertFalse(token3.equals((Object)token0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.119246703514392
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",Q/\u0001PRkI#Qj");
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setXPath("$N@*r");
      Token token1 = xPathLexer0.identifier();
      Token token2 = xPathLexer0.nextToken();
      token0.toString();
      token2.toString();
      xPathLexer0.mod();
      String string0 = token0.toString();
      assertEquals("[ (32) (,)", string0);
      
      token1.toString();
      String string1 = token2.toString();
      assertEquals("[ (26) ($)", string1);
      
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer1 = new XPathLexer("$N@*r");
      xPathLexer1.getPreviousToken();
      xPathLexer1.or();
      Token token3 = xPathLexer0.minus();
      assertEquals("N", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.setXPath("zj7pVn]iAJLEZ)UM");
      xPathLexer2.and();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("zj7pVn", token4.getTokenText());
      
      xPathLexer2.and();
      xPathLexer2.relationalOperator();
      xPathLexer1.nextToken();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer3.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      xPathLexer3.relationalOperator();
      Token token6 = xPathLexer3.leftParen();
      assertEquals(1, token6.getTokenType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5419013486645199
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.sxpath.XathLexer");
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("m.", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("6fK23X\tCF'?#kB<0k(");
      Token token1 = xPathLexer1.leftParen();
      xPathLexer0.consume();
      xPathLexer1.operatorName();
      Token token2 = xPathLexer0.number();
      Token token3 = xPathLexer1.notEquals();
      String string0 = token1.toString();
      assertEquals("[ (1) (6)", string0);
      
      String string1 = token3.toString();
      assertEquals("[ (22) (fK)", string1);
      
      xPathLexer1.identifierOrOperatorName();
      String string2 = token2.toString();
      assertEquals("[ (30) ()", string2);
      
      xPathLexer1.consume(1588);
      Token token4 = xPathLexer0.plus();
      assertEquals("e", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      xPathLexer0.setPreviousToken((Token) null);
      Token token5 = xPathLexer0.dots();
      assertEquals("r", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("ken.sxpath.XathLexer", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer1.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer0.or();
      Token token9 = xPathLexer1.equals();
      assertEquals(21, token9.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.501542618912724
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("z", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("j7", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("pV", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals("n", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.leftBracket();
      xPathLexer1.identifier();
      xPathLexer2.doubleColon();
      xPathLexer1.pipe();
      xPathLexer2.slashes();
      xPathLexer1.currentPosition();
      xPathLexer2.doubleColon();
      xPathLexer0.not();
      Token token5 = xPathLexer0.number();
      assertEquals("", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer2.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer1.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer2.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("/x=|)zB0Q0");
      xPathLexer0.and();
      Token token9 = xPathLexer4.nextToken();
      assertEquals("/", token9.getTokenText());
      
      xPathLexer3.colon();
      Token token10 = xPathLexer0.pipe();
      assertEquals("A", token10.getTokenText());
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer3.rightParen();
      assertEquals(2, token11.getTokenType());
      
      Token token12 = xPathLexer4.not();
      assertEquals(23, token12.getTokenType());
      assertEquals("x", token12.getTokenText());
      
      Token token13 = xPathLexer3.identifier();
      assertEquals(15, token13.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token14 = xPathLexer5.colon();
      assertEquals(18, token14.getTokenType());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.457649190714646
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      Token token1 = xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      Token token2 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token1);
      Token token3 = xPathLexer0.notEquals();
      token0.toString();
      token2.toString();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token3.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4762660788711652
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("szn #=+/&");
      Token token0 = xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.plus();
      assertEquals("z", token1.getTokenText());
      
      xPathLexer0.whitespace();
      char char0 = xPathLexer0.LA(2446);
      assertEquals('\uFFFF', char0);
      
      String string0 = token0.toString();
      assertEquals("[ (3) (s)", string0);
      
      xPathLexer0.operatorName();
      xPathLexer0.dots();
      Token token2 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      Token token3 = xPathLexer0.notEquals();
      assertEquals("+/", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      xPathLexer0.mod();
      String string1 = token2.toString();
      assertEquals("[ (21) (=)", string1);
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("&", token4.getTokenText());
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals("", token5.getTokenText());
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.equals();
      Token token8 = xPathLexer0.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("D6>`=7C|pz@c");
      xPathLexer0.setPreviousToken((Token) null);
      Token token10 = xPathLexer1.dots();
      assertEquals(13, token10.getTokenType());
      assertEquals("D", token10.getTokenText());
      
      Token token11 = xPathLexer1.at();
      assertEquals(16, token11.getTokenType());
      assertEquals("6", token11.getTokenText());
      
      xPathLexer0.leftBracket();
      Token token12 = xPathLexer0.equals();
      assertEquals(21, token12.getTokenType());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.355909923726491
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      Token token0 = xPathLexer0.equals();
      String string0 = token0.toString();
      assertEquals("[ (21) (r)", string0);
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("#", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("8", token2.getTokenText());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer(":1I-T/8G`3{7M");
      xPathLexer0.getPreviousToken();
      xPathLexer1.or();
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.setXPath("");
      xPathLexer1.nextToken();
      xPathLexer0.and();
      Token token6 = xPathLexer2.colon();
      assertEquals(18, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("H2w*)bnn@cdP`");
      Token token7 = xPathLexer3.nextToken();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer2.equals();
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5992089543630852
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.setXPath("< :Ds=@1xa7rbDEdE^o");
      Token token0 = xPathLexer0.number();
      xPathLexer0.div();
      xPathLexer0.operatorName();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("< :Ds=@1xa7rbDEdE^o");
      XPathLexer xPathLexer2 = new XPathLexer("@B>J'92bX");
      xPathLexer2.mod();
      xPathLexer1.leftParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.relationalOperator();
      xPathLexer0.dots();
      xPathLexer3.leftBracket();
      xPathLexer1.endPosition();
      xPathLexer3.doubleColon();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.dots();
      xPathLexer3.currentPosition();
      xPathLexer3.doubleColon();
      XPathLexer xPathLexer5 = new XPathLexer("< :Ds=@1xa7rbDEdE^o");
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer6.number();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.slashes();
      xPathLexer3.setPreviousToken(token0);
      xPathLexer1.dots();
      XPathLexer xPathLexer8 = new XPathLexer(">PF?'#p\tssQ");
      xPathLexer5.doubleColon();
      xPathLexer5.at();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer4.literal();
      assertNull(token1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3925443377904507
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("szn #=+/&");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("s", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.endPosition();
      xPathLexer0.comma();
      Token token4 = xPathLexer0.at();
      assertEquals("=", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals("+/", token6.getTokenText());
      assertEquals(12, token6.getTokenType());
      
      Token token7 = xPathLexer0.comma();
      assertEquals("&", token7.getTokenText());
      assertEquals(32, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3555146769609858
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L`SxPt7a&B|lWo.A^");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.LA(1);
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      token0.toString();
      xPathLexer0.dots();
      token0.toString();
      xPathLexer0.consume(1);
      xPathLexer0.plus();
      xPathLexer0.slashes();
      xPathLexer0.consume((-2455));
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer(",$}3lDRdy$=dSr");
      xPathLexer1.identifier();
      xPathLexer1.rightBracket();
      xPathLexer1.mod();
      xPathLexer1.and();
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4534355945022865
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.sxpath.XathLexer");
      xPathLexer0.and();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("co", token0.getTokenText());
      
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("6fK23X\tCF'?#kB<0k(");
      Token token1 = xPathLexer1.leftParen();
      assertEquals("6", token1.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer1.operatorName();
      Token token2 = xPathLexer0.number();
      assertEquals(".", token2.getTokenText());
      assertEquals(31, token2.getTokenType());
      
      xPathLexer1.notEquals();
      xPathLexer1.mod();
      xPathLexer1.operatorName();
      xPathLexer0.setPreviousToken((Token) null);
      Token token3 = xPathLexer1.notEquals();
      assertEquals("23", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer1.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("X", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals("w", token6.getTokenText());
      
      Token token7 = xPathLexer1.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals("CF", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer1.leftBracket();
      assertEquals("'", token9.getTokenText());
      assertEquals(3, token9.getTokenType());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.326341541407764
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals("c", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("o", token2.getTokenText());
      
      Token token3 = xPathLexer0.minus();
      assertEquals("m", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.at();
      assertEquals("w", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals("er", token5.getTokenText());
      
      xPathLexer0.and();
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals("k", token6.getTokenText());
      
      Token token7 = xPathLexer0.star();
      assertEquals("e", token7.getTokenText());
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals("n.", token8.getTokenText());
      assertEquals(14, token8.getTokenType());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.730307269692867
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("szn #=+/&");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("s", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("z", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.dollar();
      assertEquals("#", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      int int0 = xPathLexer0.endPosition();
      assertEquals(9, int0);
      
      xPathLexer0.comma();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("+", token5.getTokenText());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      assertEquals("/", token7.getTokenText());
      
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      assertEquals("&", token8.getTokenText());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer0.leftParen();
      assertEquals(1, token11.getTokenType());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3434601757023534
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.number();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      xPathLexer1.identifier();
      xPathLexer0.doubleColon();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.currentPosition();
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.pipe();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer4 = new XPathLexer("Uqsc08l'U3@N}V");
      xPathLexer0.consume((-232));
      xPathLexer2.plus();
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5046229863664642
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("*", token0.getTokenText());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("F", token1.getTokenText());
      
      xPathLexer0.number();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      Token token2 = xPathLexer1.identifier();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.pipe();
      Token token3 = xPathLexer0.slashes();
      assertEquals("=", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.doubleColon();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer1.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals("&z", token6.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.and();
      Token token7 = xPathLexer1.dollar();
      assertEquals("=", token7.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token8 = xPathLexer1.plus();
      assertEquals("*", token8.getTokenText());
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer1.leftBracket();
      assertEquals(3, token9.getTokenType());
      assertEquals("|", token9.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      Token token10 = xPathLexer0.nextToken();
      assertEquals("", token10.getTokenText());
      
      Token token11 = xPathLexer1.star();
      assertEquals("F", token11.getTokenText());
      assertEquals(20, token11.getTokenType());
      
      Token token12 = xPathLexer2.colon();
      assertEquals("A", token12.getTokenText());
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer2.pipe();
      assertEquals(17, token13.getTokenType());
      
      Token token14 = xPathLexer1.rightParen();
      assertEquals("+", token14.getTokenText());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4367155999844916
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      xPathLexer0.whitespace();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("'Konr");
      xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("Dt");
      xPathLexer2.mod();
      xPathLexer0.colon();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.relationalOperator();
      xPathLexer1.dots();
      xPathLexer0.leftBracket();
      xPathLexer2.endPosition();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer1.currentPosition();
      xPathLexer3.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.number();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.slashes();
      xPathLexer0.dots();
      XPathLexer xPathLexer6 = new XPathLexer(">PF?'#p\tssQ");
      xPathLexer3.doubleColon();
      xPathLexer5.at();
      xPathLexer6.nextToken();
      Token token0 = xPathLexer2.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6546837196168505
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      Token token3 = xPathLexer0.leftParen();
      assertEquals("*", token3.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals("g", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      token2.toString();
      token2.toString();
      xPathLexer0.identifierOrOperatorName();
      String string0 = token2.toString();
      assertEquals("[ (17) (=)", string0);
      
      xPathLexer0.consume((-1));
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      assertEquals("G", token6.getTokenText());
      
      xPathLexer0.setPreviousToken(token5);
      assertEquals("+G", token5.getTokenText());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      assertEquals("G", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("T", token8.getTokenText());
      
      xPathLexer0.pipe();
      Token token9 = xPathLexer0.colon();
      assertEquals("^", token9.getTokenText());
      assertEquals(18, token9.getTokenType());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.627420238246176
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.sxpath.XathLexer");
      xPathLexer0.and();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("6fK23X\tCF'?#kB<0k(");
      xPathLexer1.leftParen();
      xPathLexer0.consume();
      xPathLexer1.operatorName();
      Token token1 = xPathLexer0.number();
      assertEquals(31, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      Token token2 = xPathLexer1.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("fK", token2.getTokenText());
      
      xPathLexer1.mod();
      token0.toString();
      Token token3 = xPathLexer0.equals();
      assertEquals("w", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (19) (co)", string0);
      
      xPathLexer1.consume(2394);
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer1.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer1.doubleColon();
      Token token6 = xPathLexer1.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      xPathLexer0.and();
      Token token7 = xPathLexer1.dollar();
      assertEquals(26, token7.getTokenType());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.plus();
      assertEquals(5, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (19) (co)");
      Token token9 = xPathLexer3.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("=;A;@_R88Nc");
      Token token10 = xPathLexer0.nextToken();
      assertEquals("erken.sxpath.XathLexer", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer0.pipe();
      assertEquals(17, token11.getTokenType());
      
      Token token12 = xPathLexer1.rightParen();
      assertEquals(2, token12.getTokenType());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.410815300733651
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      xPathLexer0.plus();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.number();
      Token token3 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token3);
      token2.toString();
      Token token4 = xPathLexer0.notEquals();
      token2.toString();
      token1.toString();
      xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token4.toString();
      xPathLexer0.consume((-1352));
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.plus();
      xPathLexer1.setPreviousToken(token5);
      // Undeclared exception!
      try { 
        xPathLexer0.dots();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.2883095501384008
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.number();
      xPathLexer0.colon();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("< :Ds=@1xa7rbDEdE^o");
      Token token0 = xPathLexer1.notEquals();
      assertEquals("< ", token0.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.mod();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer1.dots();
      assertEquals(":", token2.getTokenText());
      
      xPathLexer2.relationalOperator();
      xPathLexer2.endPosition();
      xPathLexer1.doubleColon();
      Token token3 = xPathLexer2.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer2.rightParen();
      assertEquals(2, token4.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      Token token5 = xPathLexer1.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer1.notEquals();
      assertEquals(22, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token7 = xPathLexer3.number();
      assertEquals(30, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token8 = xPathLexer2.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      xPathLexer1.and();
      xPathLexer1.relationalOperator();
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer3.colon();
      assertEquals("c", token10.getTokenText());
      assertEquals(18, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer(")");
      Token token11 = xPathLexer5.equals();
      assertEquals(")", token11.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token12 = xPathLexer6.equals();
      assertEquals(21, token12.getTokenType());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8792331610400344
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L`SxPt7a&B|lWo.A^");
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      xPathLexer0.rightParen();
      xPathLexer0.number();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.leftBracket();
      xPathLexer2.identifier();
      xPathLexer2.doubleColon();
      xPathLexer1.pipe();
      xPathLexer1.slashes();
      xPathLexer0.currentPosition();
      xPathLexer0.doubleColon();
      xPathLexer1.not();
      xPathLexer2.number();
      xPathLexer1.doubleColon();
      xPathLexer0.isIdentifierChar('M');
      xPathLexer1.consume((-1919));
      xPathLexer1.at();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      // Undeclared exception!
      try { 
        xPathLexer1.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7174151839964176
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.comma();
      assertEquals("j", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("pVn", token3.getTokenText());
      
      xPathLexer0.number();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token2);
      assertEquals(6, token2.getTokenType());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      assertEquals("iA", token7.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (26) (z)", string0);
      
      String string1 = token6.toString();
      assertEquals("[ (-1) (iAJLEZ)UM)", string1);
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (26) (z)");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer1.at();
      assertEquals("[", token8.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.dollar();
      Token token9 = xPathLexer2.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      xPathLexer3.and();
      xPathLexer2.relationalOperator();
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
      assertEquals("J", token10.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("=?81E^^");
      Token token11 = xPathLexer4.dots();
      assertEquals("=", token11.getTokenText());
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer0.doubleColon();
      assertEquals(19, token12.getTokenType());
      assertEquals("LE", token12.getTokenText());
      
      Token token13 = xPathLexer2.at();
      assertEquals(16, token13.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("=?81E^^");
      xPathLexer5.nextToken();
      Token token14 = xPathLexer4.equals();
      assertEquals(21, token14.getTokenType());
      assertEquals("?", token14.getTokenText());
      
      Token token15 = xPathLexer3.star();
      assertEquals(20, token15.getTokenType());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6802184802025266
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VO");
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setXPath("VO");
      Token token1 = xPathLexer0.dots();
      Token token2 = xPathLexer0.nextToken();
      token1.toString();
      token2.toString();
      XPathLexer xPathLexer1 = new XPathLexer("[ (13) (V)");
      xPathLexer1.mod();
      String string0 = token1.toString();
      assertEquals("[ (13) (V)", string0);
      
      token2.toString();
      token2.toString();
      Token token3 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token3);
      assertEquals(5, token3.getTokenType());
      
      String string1 = token0.toString();
      assertEquals("[ (32) (V)", string1);
      
      Token token4 = xPathLexer1.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("[", token4.getTokenText());
      
      Token token5 = xPathLexer1.dollar();
      xPathLexer1.setPreviousToken(token0);
      char char0 = xPathLexer1.LA(3202);
      assertEquals('\uFFFF', char0);
      
      Token token6 = xPathLexer1.doubleColon();
      assertEquals("(1", token6.getTokenText());
      assertEquals(19, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.not();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.setPreviousToken(token7);
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer1.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer3.and();
      xPathLexer1.setPreviousToken(token5);
      assertEquals(" ", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      xPathLexer0.dots();
      XPathLexer xPathLexer4 = new XPathLexer("DuxeOT#R5w9;");
      XPathLexer xPathLexer5 = new XPathLexer("[ (13) (V)");
      Token token9 = xPathLexer5.at();
      assertEquals(16, token9.getTokenType());
      assertEquals("[", token9.getTokenText());
      
      Token token10 = xPathLexer5.nextToken();
      assertEquals("(", token10.getTokenText());
      
      Token token11 = xPathLexer1.literal();
      assertEquals(" (V", token11.getTokenText());
      assertEquals(27, token11.getTokenType());
      assertNotNull(token11);
      
      Token token12 = xPathLexer5.minus();
      assertEquals(6, token12.getTokenType());
      assertEquals("1", token12.getTokenText());
      
      xPathLexer2.relationalOperator();
      Token token13 = xPathLexer1.leftParen();
      assertEquals(1, token13.getTokenType());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5905709171168385
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("H^ElZuy<#>9");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("H", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("^E", token1.getTokenText());
      
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals("u", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.relationalOperator();
      assertEquals(7, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      int int0 = xPathLexer1.endPosition();
      assertEquals(0, int0);
      
      Token token5 = xPathLexer1.notEquals();
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer1.star();
      assertEquals(20, token6.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer0.rightParen();
      assertEquals("#", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("1Rc|je_5<");
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.number();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer3.nextToken();
      assertEquals(30, token8.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("H^ElZuy<#>9");
      xPathLexer6.and();
      xPathLexer1.relationalOperator();
      Token token9 = xPathLexer2.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer6.leftBracket();
      assertEquals("H", token10.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token11 = xPathLexer2.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer3.pipe();
      assertEquals("R", token12.getTokenText());
      assertEquals(17, token12.getTokenType());
      
      Token token13 = xPathLexer6.rightParen();
      assertEquals(2, token13.getTokenType());
      
      Token token14 = xPathLexer4.not();
      assertEquals(23, token14.getTokenType());
      
      Token token15 = xPathLexer5.identifierOrOperatorName();
      assertEquals(15, token15.getTokenType());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0032719597952724
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("r", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals(" w", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals("R", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer1.rightParen();
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals("M", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals("#", token6.getTokenText());
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      assertEquals("8", token7.getTokenText());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7325350672156516
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("=", token2.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      Token token3 = xPathLexer0.leftParen();
      assertEquals("*", token3.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      xPathLexer0.setPreviousToken(token1);
      Token token4 = xPathLexer0.notEquals();
      assertEquals("+G", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.dots();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.leftParen();
      xPathLexer1.setPreviousToken(token6);
      assertEquals(1, token6.getTokenType());
      
      Token token7 = xPathLexer2.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer2.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token9 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token9);
      assertEquals(")", token9.getTokenText());
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("DuxeOT#R5w9;");
      Token token11 = xPathLexer2.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("DuxeOT#R5w9;");
      Token token12 = xPathLexer3.at();
      assertEquals(16, token12.getTokenType());
      assertEquals("D", token12.getTokenText());
      
      Token token13 = xPathLexer0.nextToken();
      assertEquals("z", token13.getTokenText());
      
      xPathLexer0.literal();
      Token token14 = xPathLexer3.nextToken();
      assertEquals(15, token14.getTokenType());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8230197501772585
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("j", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token2);
      assertEquals("7", token2.getTokenText());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals("iA", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (26) (z)", string0);
      
      String string1 = token4.toString();
      assertEquals("[ (-1) (iAJLEZ)UM)", string1);
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (26) (z)");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer1.at();
      assertEquals("[", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.dollar();
      Token token7 = xPathLexer1.nextToken();
      assertEquals("(", token7.getTokenText());
      
      xPathLexer1.and();
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      assertEquals("J", token8.getTokenText());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token10 = xPathLexer0.nextToken();
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer3.not();
      assertEquals(23, token11.getTokenType());
      
      xPathLexer2.identifier();
      Token token12 = xPathLexer0.colon();
      assertEquals(18, token12.getTokenType());
      assertEquals(")", token12.getTokenText());
      
      xPathLexer3.operatorName();
      Token token13 = xPathLexer0.slashes();
      assertEquals(11, token13.getTokenType());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.4274363918961026
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.number();
      xPathLexer0.setPreviousToken(token1);
      token0.toString();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.119226988569718
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.equals();
      xPathLexer0.slashes();
      xPathLexer0.colon();
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      xPathLexer0.identifier();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      xPathLexer0.at();
      xPathLexer0.rightParen();
      xPathLexer0.endPosition();
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.and();
      xPathLexer0.leftBracket();
      xPathLexer0.rightBracket();
      xPathLexer0.not();
      xPathLexer0.slashes();
      xPathLexer0.rightParen();
      xPathLexer0.leftBracket();
      xPathLexer0.dots();
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.7486157063094812
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("59V8");
      Token token0 = xPathLexer0.colon();
      assertEquals("", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      xPathLexer0.setPreviousToken(token1);
      assertEquals("5", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("9", token2.getTokenText());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6141259424912477
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      xPathLexer0.minus();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.dots();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token3 = xPathLexer1.dots();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer1.setPreviousToken(token3);
      XPathLexer xPathLexer3 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      char char0 = xPathLexer3.LA(26);
      assertEquals('\uFFFF', char0);
      
      Token token6 = xPathLexer3.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("z", token6.getTokenText());
      
      Token token7 = xPathLexer3.comma();
      assertEquals("j", token7.getTokenText());
      assertEquals(32, token7.getTokenType());
      
      xPathLexer3.setXPath("zj7pVn]iAJLEZ)UM");
      Token token8 = xPathLexer1.nextToken();
      assertEquals("j7pVn]iAJLEZ)UM", token8.getTokenText());
      
      xPathLexer1.and();
      xPathLexer0.setPreviousToken(token0);
      Token token9 = xPathLexer1.dots();
      assertEquals("j", token9.getTokenText());
      assertEquals(13, token9.getTokenType());
      
      Token token10 = xPathLexer1.nextToken();
      assertEquals(30, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.setXPath(";y~]@(c]Bu=b(~6+-");
      Token token11 = xPathLexer3.star();
      assertEquals(20, token11.getTokenType());
      assertEquals("z", token11.getTokenText());
      
      Token token12 = xPathLexer0.notEquals();
      assertEquals(22, token12.getTokenType());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7289592288880056
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer("NUL");
      Token token1 = xPathLexer1.comma();
      xPathLexer0.or();
      xPathLexer1.number();
      xPathLexer0.LA(1);
      xPathLexer1.operatorName();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals("N", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      token3.toString();
      xPathLexer0.mod();
      String string0 = token3.toString();
      assertEquals("[ (22) (pV)", string0);
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("]", token5.getTokenText());
      
      Token token6 = xPathLexer1.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals("U", token6.getTokenText());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals("iAJLEZ", token7.getTokenText());
      
      Token token8 = xPathLexer0.equals();
      assertEquals(")", token8.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer1.setPreviousToken(token0);
      assertEquals(26, token0.getTokenType());
      assertEquals("j", token0.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token9 = xPathLexer3.dots();
      assertEquals(13, token9.getTokenType());
      
      Token token10 = xPathLexer0.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer3.at();
      assertEquals(16, token11.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("KSd;xmhxIeQoLQ~m`~");
      Token token12 = xPathLexer4.nextToken();
      assertEquals(15, token12.getTokenType());
      
      Token token13 = xPathLexer3.equals();
      assertEquals(21, token13.getTokenType());
      
      Token token14 = xPathLexer2.star();
      assertEquals(20, token14.getTokenType());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5357521252700184
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      Token token2 = xPathLexer0.identifier();
      assertEquals("9d", token2.getTokenText());
      
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals("*", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("|", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals("g", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.mod();
      Token token6 = xPathLexer0.dots();
      token6.toString();
      token6.toString();
      String string0 = token6.toString();
      assertEquals("[ (13) (F)", string0);
      
      Token token7 = xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer1.setPreviousToken(token7);
      assertEquals("+", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      xPathLexer0.dots();
      Token token8 = xPathLexer0.doubleColon();
      assertEquals("GT", token8.getTokenText());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      assertEquals("=", token9.getTokenText());
      
      xPathLexer0.nextToken();
      Token token10 = xPathLexer1.pipe();
      assertEquals(17, token10.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token11 = xPathLexer0.comma();
      assertEquals("^", token11.getTokenText());
      assertEquals(32, token11.getTokenType());
      
      Token token12 = xPathLexer1.doubleColon();
      assertEquals(19, token12.getTokenType());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5786715816075922
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.identifier();
      assertEquals("g9d", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      Token token3 = xPathLexer0.leftParen();
      assertEquals("*", token3.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals((-2), token0.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (17) (=)", string0);
      
      xPathLexer0.consume((-1));
      xPathLexer0.setPreviousToken(token5);
      assertEquals("+G", token5.getTokenText());
      
      Token token6 = xPathLexer0.dots();
      assertEquals("G", token6.getTokenText());
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.pipe();
      Token token8 = xPathLexer0.colon();
      assertEquals("^", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.not();
      assertEquals("w", token9.getTokenText());
      
      Token token10 = xPathLexer0.doubleColon();
      assertEquals(19, token10.getTokenType());
      assertEquals(")&", token10.getTokenText());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.292270640371133
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.setXPath("< :Ds=@1xa7rbDEdE^o");
      xPathLexer0.number();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("< :Ds=@1xa7rbDEdE^o");
      xPathLexer1.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.mod();
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer1.dots();
      xPathLexer2.relationalOperator();
      xPathLexer2.endPosition();
      xPathLexer1.doubleColon();
      xPathLexer2.pipe();
      xPathLexer1.currentPosition();
      xPathLexer1.doubleColon();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer3.number();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.setPreviousToken(token0);
      xPathLexer0.dots();
      XPathLexer xPathLexer5 = new XPathLexer("jb!Lk");
      xPathLexer5.doubleColon();
      xPathLexer1.at();
      xPathLexer5.nextToken();
      Token token1 = xPathLexer3.literal();
      assertNull(token1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.483409598029714
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("z", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token1 = xPathLexer0.notEquals();
      assertEquals("j7", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.mod();
      Token token2 = xPathLexer0.leftParen();
      assertEquals("p", token2.getTokenText());
      
      xPathLexer3.relationalOperator();
      Token token3 = xPathLexer3.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer3.relationalOperator();
      xPathLexer0.endPosition();
      xPathLexer3.doubleColon();
      xPathLexer1.pipe();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer4.leftParen();
      assertEquals(1, token4.getTokenType());
      
      xPathLexer4.currentPosition();
      Token token5 = xPathLexer2.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer3.notEquals();
      assertEquals(22, token6.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("!8SWj,'m$#UF|wi}L");
      Token token7 = xPathLexer1.number();
      assertEquals(30, token7.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token8 = xPathLexer5.nextToken();
      assertEquals("!", token8.getTokenText());
      
      xPathLexer3.and();
      xPathLexer5.relationalOperator();
      xPathLexer3.plus();
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      assertEquals("V", token9.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
      assertEquals("n", token10.getTokenText());
      
      Token token11 = xPathLexer6.pipe();
      assertEquals(17, token11.getTokenType());
      
      xPathLexer3.rightParen();
      Token token12 = xPathLexer2.not();
      assertEquals(23, token12.getTokenType());
      
      Token token13 = xPathLexer7.identifierOrOperatorName();
      assertEquals(15, token13.getTokenType());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6069971249311745
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.number();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("8'y");
      xPathLexer0.leftBracket();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("pnfr");
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer2.leftParen();
      xPathLexer1.relationalOperator();
      xPathLexer3.dots();
      xPathLexer2.relationalOperator();
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.currentPosition();
      xPathLexer4.doubleColon();
      xPathLexer4.at();
      Token token0 = xPathLexer0.at();
      xPathLexer3.currentPosition();
      xPathLexer3.not();
      xPathLexer3.div();
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer1.slashes();
      xPathLexer4.plus();
      xPathLexer2.operatorName();
      Token token1 = xPathLexer2.minus();
      xPathLexer4.setPreviousToken(token1);
      xPathLexer5.dots();
      xPathLexer2.nextToken();
      Token token2 = xPathLexer2.leftParen();
      assertFalse(token2.equals((Object)token0));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.7120507410496844
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.number();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("8'y");
      xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("pnfr");
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.mod();
      xPathLexer2.leftParen();
      xPathLexer1.relationalOperator();
      xPathLexer3.dots();
      xPathLexer2.slashes();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.consume((-2455));
      xPathLexer1.rightParen();
      xPathLexer3.rightBracket();
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer5.plus();
      xPathLexer2.consume(1);
      xPathLexer0.slashes();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.leftParen();
      // Undeclared exception!
      try { 
        xPathLexer4.identifierOrOperatorName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.6469402088579517
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L`SxPt7a&B|lWo.A^");
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      xPathLexer0.leftParen();
      xPathLexer0.number();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.mod();
      xPathLexer0.leftParen();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.dots();
      xPathLexer0.relationalOperator();
      xPathLexer2.endPosition();
      xPathLexer2.doubleColon();
      xPathLexer1.pipe();
      xPathLexer0.currentPosition();
      xPathLexer1.doubleColon();
      xPathLexer2.not();
      XPathLexer xPathLexer3 = new XPathLexer("`Ja}l");
      xPathLexer2.number();
      xPathLexer1.relationalOperator();
      xPathLexer0.doubleColon();
      xPathLexer0.isIdentifierChar('M');
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.plus();
      xPathLexer4.consume((-3698));
      // Undeclared exception!
      try { 
        xPathLexer4.relationalOperator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6696578333341057
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("g", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      xPathLexer0.identifier();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("=", token3.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.LA((-1));
      Token token5 = xPathLexer0.plus();
      assertEquals("+", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      xPathLexer0.setPreviousToken(token2);
      assertEquals("9", token2.getTokenText());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals("GG", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
      
      xPathLexer0.mod();
      Token token7 = xPathLexer0.dots();
      token7.toString();
      String string0 = token7.toString();
      assertEquals("[ (13) (T)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume((-1));
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken((Token) null);
      xPathLexer0.dots();
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals("^", token9.getTokenText());
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals("w", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer2.leftBracket();
      assertEquals(3, token11.getTokenType());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.7247506550906948
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer1.identifier();
      xPathLexer2.doubleColon();
      xPathLexer0.pipe();
      xPathLexer2.slashes();
      xPathLexer2.currentPosition();
      xPathLexer1.doubleColon();
      xPathLexer2.not();
      xPathLexer2.number();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.plus();
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer2.at();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer2.nextToken();
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token1 = xPathLexer5.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6087241385472817
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("p*r.gLo|f4DdlJW<#Y");
      Token token0 = xPathLexer0.plus();
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.identifier();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      Token token2 = xPathLexer0.nextToken();
      xPathLexer0.number();
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.not();
      token3.toString();
      xPathLexer0.notEquals();
      token1.toString();
      token1.toString();
      xPathLexer0.identifierOrOperatorName();
      token1.toString();
      xPathLexer0.consume((-1));
      xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftBracket();
      xPathLexer0.notEquals();
      xPathLexer0.pipe();
      xPathLexer0.colon();
      Token token4 = xPathLexer0.or();
      assertNull(token4);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.771179936630452
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("n pZH");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer1.operatorName();
      Token token1 = xPathLexer1.comma();
      assertEquals("n", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.literal();
      Token token3 = xPathLexer1.identifierOrOperatorName();
      xPathLexer1.number();
      XPathLexer xPathLexer2 = new XPathLexer("n pZH");
      Token token4 = xPathLexer2.nextToken();
      assertEquals("n", token4.getTokenText());
      
      Token token5 = xPathLexer1.number();
      Token token6 = xPathLexer0.nextToken();
      xPathLexer1.setPreviousToken(token6);
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      String string0 = token3.toString();
      assertEquals("[ (15) ()", string0);
      
      String string1 = token5.toString();
      assertEquals("[ (30) ()", string1);
      
      xPathLexer1.identifierOrOperatorName();
      Token token8 = xPathLexer2.whitespace();
      token8.toString();
      xPathLexer0.consume(107);
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      
      xPathLexer2.setPreviousToken(token3);
      xPathLexer1.nextToken();
      Token token10 = xPathLexer2.pipe();
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer0.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer2.not();
      assertEquals("Z", token12.getTokenText());
      assertEquals(23, token12.getTokenType());
      
      Token token13 = xPathLexer0.doubleColon();
      assertEquals(19, token13.getTokenType());
      
      Token token14 = xPathLexer1.slashes();
      assertEquals("p", token14.getTokenText());
      assertEquals(11, token14.getTokenType());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5936939435428428
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      Token token0 = xPathLexer0.equals();
      token0.toString();
      char char0 = xPathLexer0.LA(114);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("r", token1.getTokenText());
      
      Token token2 = xPathLexer1.notEquals();
      assertEquals(" w", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer1.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("R", token3.getTokenText());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer("[ (21) (r)");
      Token token4 = xPathLexer1.at();
      assertEquals("M", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer2.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (21) (r)", string0);
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      assertEquals("Z", token6.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token7 = xPathLexer0.plus();
      assertEquals("b", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token8 = xPathLexer1.nextToken();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.colon();
      assertEquals("E", token9.getTokenText());
      
      Token token10 = xPathLexer2.pipe();
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer0.rightParen();
      assertEquals(":", token11.getTokenText());
      assertEquals(2, token11.getTokenType());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5693547492232374
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.and();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.dots();
      token0.toString();
      xPathLexer0.dollar();
      token0.toString();
      xPathLexer0.number();
      xPathLexer0.LA(2921);
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.star();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.at();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.nextToken();
      xPathLexer1.plus();
      xPathLexer2.pipe();
      xPathLexer2.consume((-540));
      // Undeclared exception!
      try { 
        xPathLexer2.slashes();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5196606916689623
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.comma();
      xPathLexer0.minus();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.number();
      xPathLexer1.nextToken();
      xPathLexer1.setPreviousToken(token1);
      xPathLexer1.notEquals();
      token0.toString();
      token2.toString();
      XPathLexer xPathLexer2 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.at();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.plus();
      XPathLexer xPathLexer6 = new XPathLexer("[ (");
      xPathLexer6.leftBracket();
      XPathLexer xPathLexer7 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      XPathLexer xPathLexer8 = new XPathLexer("[ (15) (d)");
      xPathLexer8.nextToken();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer9.not();
      xPathLexer6.identifier();
      xPathLexer3.colon();
      Token token3 = xPathLexer0.operatorName();
      assertNull(token3);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.512658529529802
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.dots();
      xPathLexer0.equals();
      xPathLexer0.consume((-77));
      xPathLexer0.consume();
      xPathLexer0.rightParen();
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3146504205641663
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("p*r.gLo|f4DdlJW<#Y");
      Token token0 = xPathLexer0.plus();
      assertEquals("p", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("*", token1.getTokenText());
      
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("|", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.doubleColon();
      xPathLexer0.and();
      xPathLexer1.operatorName();
      Token token3 = xPathLexer0.colon();
      assertEquals("f", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer1.slashes();
      assertEquals(11, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("+#:Z");
      Token token6 = xPathLexer0.doubleColon();
      xPathLexer2.setPreviousToken(token6);
      assertEquals(19, token6.getTokenType());
      assertEquals("4D", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("dlJW", token7.getTokenText());
      
      xPathLexer0.equals();
      Token token8 = xPathLexer1.identifier();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer0.equals();
      assertEquals("#", token9.getTokenText());
      assertEquals(21, token9.getTokenType());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.439715992220183
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L`SxPt7a&B|lWo.A^");
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.or();
      Token token1 = xPathLexer0.number();
      xPathLexer0.LA(1);
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      token0.toString();
      xPathLexer0.dots();
      token0.toString();
      xPathLexer0.consume(1);
      xPathLexer0.consume(1);
      xPathLexer0.plus();
      xPathLexer0.slashes();
      xPathLexer0.consume((-2455));
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer(",$}3lDRdy$=dSr");
      xPathLexer1.identifier();
      xPathLexer1.rightBracket();
      xPathLexer1.div();
      xPathLexer1.mod();
      Token token2 = xPathLexer1.and();
      assertNull(token2);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.8750778787459113
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.colon();
      xPathLexer0.comma();
      xPathLexer0.or();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.number();
      xPathLexer1.leftBracket();
      xPathLexer1.colon();
      xPathLexer0.whitespace();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.equals();
      xPathLexer1.consume((-1989));
      xPathLexer0.rightParen();
      xPathLexer0.at();
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.plus();
      xPathLexer2.consume((-1989));
      // Undeclared exception!
      try { 
        xPathLexer1.slashes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.2194993432940238
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.sxpath.XathLexer");
      xPathLexer0.and();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("6fK23X\tCF'?#kB<0k(");
      Token token1 = xPathLexer1.leftParen();
      assertEquals("6", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(13, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer1.notEquals();
      assertEquals("fK", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      xPathLexer1.mod();
      token0.toString();
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      assertEquals("w", token5.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (19) (co)", string0);
      
      xPathLexer1.consume(2921);
      Token token6 = xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.pipe();
      assertEquals(17, token7.getTokenType());
      
      xPathLexer1.setPreviousToken(token6);
      XPathLexer xPathLexer3 = new XPathLexer("Uqsc08l'U3@N}V");
      xPathLexer3.consume(2921);
      Token token8 = xPathLexer3.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer0.literal();
      assertNotNull(token9);
      assertEquals("rk", token9.getTokenText());
      assertEquals(27, token9.getTokenType());
      
      xPathLexer2.dots();
      Token token10 = xPathLexer2.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer0.leftBracket();
      assertEquals("n", token11.getTokenText());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6403149155998498
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.endPosition();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.doubleColon();
      Token token0 = xPathLexer1.pipe();
      xPathLexer2.slashes();
      xPathLexer1.currentPosition();
      xPathLexer2.doubleColon();
      xPathLexer2.setPreviousToken(token0);
      xPathLexer0.not();
      xPathLexer0.number();
      xPathLexer2.doubleColon();
      xPathLexer1.isIdentifierChar('M');
      xPathLexer0.consume((-2400));
      xPathLexer0.at();
      XPathLexer xPathLexer3 = new XPathLexer("B\"9wyG)GSmm");
      xPathLexer3.nextToken();
      xPathLexer1.rightParen();
      xPathLexer3.isIdentifierChar('!');
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6819814949359737
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("z", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("j7", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("pV", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals("n", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals("]", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer1.identifier();
      xPathLexer2.doubleColon();
      Token token6 = xPathLexer1.pipe();
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer2.slashes();
      assertEquals(11, token7.getTokenType());
      
      xPathLexer1.currentPosition();
      xPathLexer2.doubleColon();
      Token token8 = xPathLexer0.not();
      assertEquals("i", token8.getTokenText());
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
      assertEquals("", token9.getTokenText());
      
      xPathLexer2.doubleColon();
      xPathLexer0.consume((-2400));
      xPathLexer0.at();
      XPathLexer xPathLexer3 = new XPathLexer("B\"9wyG)GSmm");
      Token token10 = xPathLexer3.nextToken();
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer1.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer2.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      Token token13 = xPathLexer3.equals();
      assertEquals("\"", token13.getTokenText());
      assertEquals(21, token13.getTokenType());
      
      Token token14 = xPathLexer0.star();
      assertEquals(20, token14.getTokenType());
      
      Token token15 = xPathLexer3.doubleColon();
      assertEquals(19, token15.getTokenType());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.6130091048242927
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.pipe();
      assertEquals("=", token2.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals("*", token3.getTokenText());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals("", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals(2, token1.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      xPathLexer0.mod();
      Token token7 = xPathLexer0.dots();
      token7.toString();
      token7.toString();
      String string0 = token7.toString();
      assertEquals("[ (13) (G)", string0);
      
      Token token8 = xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer1.setPreviousToken(token8);
      assertEquals("T", token8.getTokenText());
      assertEquals(5, token8.getTokenType());
      
      xPathLexer0.dots();
      Token token9 = xPathLexer0.doubleColon();
      assertEquals("^w", token9.getTokenText());
      
      Token token10 = xPathLexer0.at();
      assertEquals(")", token10.getTokenText());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals("&z\"", token11.getTokenText());
      
      Token token12 = xPathLexer1.pipe();
      assertEquals(17, token12.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token13 = xPathLexer0.comma();
      assertEquals(32, token13.getTokenType());
      assertEquals("&", token13.getTokenText());
      
      Token token14 = xPathLexer1.doubleColon();
      assertEquals(19, token14.getTokenType());
      
      Token token15 = xPathLexer1.slashes();
      assertEquals(11, token15.getTokenType());
      
      Token token16 = xPathLexer1.at();
      assertEquals(16, token16.getTokenType());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.8757229154171502
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.identifier();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.leftBracket();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      Token token1 = xPathLexer0.dots();
      token1.toString();
      token1.toString();
      token1.toString();
      Token token2 = xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer1.setPreviousToken(token2);
      xPathLexer0.dots();
      xPathLexer0.doubleColon();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer1.pipe();
      xPathLexer0.relationalOperator();
      xPathLexer0.comma();
      xPathLexer1.doubleColon();
      xPathLexer1.slashes();
      xPathLexer1.at();
      Token token3 = xPathLexer1.plus();
      assertEquals(5, token3.getTokenType());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.6611059788050977
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      Token token1 = xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token2 = xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token3 = xPathLexer2.identifierOrOperatorName();
      xPathLexer2.and();
      xPathLexer1.leftParen();
      xPathLexer2.consume();
      xPathLexer2.nextToken();
      xPathLexer2.number();
      xPathLexer0.setPreviousToken(token2);
      token0.toString();
      xPathLexer0.notEquals();
      xPathLexer1.mod();
      token3.toString();
      token1.toString();
      token0.toString();
      xPathLexer2.plus();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer3.dots();
      xPathLexer2.doubleColon();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer2.pipe();
      Token token4 = xPathLexer2.relationalOperator();
      assertNull(token4);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.5606070768256015
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.setXPath("< :Ds=@1xa7rbDEdE^o");
      xPathLexer0.number();
      xPathLexer0.div();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      xPathLexer0.endPosition();
      xPathLexer0.doubleColon();
      xPathLexer0.rightBracket();
      xPathLexer0.consume((-1032));
      XPathLexer xPathLexer1 = new XPathLexer("qy#Up*^{}iQ*f:(R!Or");
      xPathLexer1.rightParen();
      xPathLexer1.rightBracket();
      xPathLexer1.plus();
      // Undeclared exception!
      try { 
        xPathLexer0.identifier();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.7015250688227308
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      Token token1 = xPathLexer0.comma();
      Token token2 = xPathLexer0.number();
      token1.toString();
      String string0 = token2.toString();
      assertEquals("[ (30) (7)", string0);
      
      xPathLexer0.LA(1);
      token1.toString();
      xPathLexer0.operatorName();
      xPathLexer0.dots();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.setPreviousToken(token2);
      Token token4 = xPathLexer0.notEquals();
      assertEquals("]i", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      xPathLexer0.mod();
      String string1 = token1.toString();
      assertEquals("[ (32) (j)", string1);
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("A", token5.getTokenText());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals("L", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token8 = xPathLexer0.equals();
      assertEquals(21, token8.getTokenType());
      assertEquals("E", token8.getTokenText());
      
      xPathLexer0.nextToken();
      Token token9 = xPathLexer0.plus();
      assertEquals("Z", token9.getTokenText());
      assertEquals(5, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (32) (j)");
      xPathLexer0.setPreviousToken(token0);
      assertEquals("z", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token10 = xPathLexer1.dots();
      assertEquals("[", token10.getTokenText());
      
      Token token11 = xPathLexer1.at();
      assertEquals(" ", token11.getTokenText());
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer1.leftBracket();
      assertEquals("(", token12.getTokenText());
      assertEquals(3, token12.getTokenType());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.4766504382357233
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      Token token1 = xPathLexer0.minus();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      Token token2 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.notEquals();
      token0.toString();
      token2.toString();
      XPathLexer xPathLexer1 = new XPathLexer("[ (26) (z)");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.at();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.dollar();
      xPathLexer2.nextToken();
      xPathLexer3.and();
      xPathLexer2.relationalOperator();
      xPathLexer0.plus();
      XPathLexer xPathLexer4 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      xPathLexer4.nextToken();
      xPathLexer0.not();
      xPathLexer0.identifier();
      xPathLexer2.colon();
      Token token3 = xPathLexer3.operatorName();
      assertNull(token3);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.719970363182706
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      Token token1 = xPathLexer0.comma();
      token1.toString();
      token1.toString();
      xPathLexer0.LA(1);
      token1.toString();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      token1.toString();
      xPathLexer0.colon();
      xPathLexer0.whitespace();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("[![|?4/x7B");
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer1.literal();
      xPathLexer1.nextToken();
      xPathLexer1.relationalOperator();
      Token token3 = xPathLexer0.leftParen();
      assertFalse(token3.equals((Object)token2));
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.9378489290688878
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L`SxPt7a&B|lWo.A^");
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.number();
      // Undeclared exception!
      try { 
        xPathLexer1.LA((-136));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.4590886443258562
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L`SxPt7a&B|lWo.A^");
      Token token0 = xPathLexer0.dollar();
      Token token1 = xPathLexer0.number();
      xPathLexer0.LA(1);
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      token0.toString();
      xPathLexer0.dots();
      token0.toString();
      xPathLexer0.consume(1);
      xPathLexer0.plus();
      xPathLexer0.slashes();
      xPathLexer0.consume((-2455));
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer(",$}3lDRdy$=dSr");
      xPathLexer1.identifier();
      xPathLexer1.rightBracket();
      xPathLexer1.mod();
      xPathLexer1.and();
      xPathLexer1.div();
      xPathLexer0.leftBracket();
      // Undeclared exception!
      try { 
        xPathLexer0.whitespace();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.2101676771053294
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.not();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.dots();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.consume(1355);
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.plus();
      xPathLexer0.minus();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.pipe();
      boolean boolean0 = xPathLexer0.isIdentifierChar('`');
      assertFalse(boolean0);
      
      xPathLexer0.dots();
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.isIdentifierChar('%');
      xPathLexer0.plus();
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer0.rightBracket();
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.763205948830428
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.pipe();
      assertEquals("=", token2.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      Token token3 = xPathLexer0.leftParen();
      assertEquals("*", token3.getTokenText());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("F", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals("g", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals("+G", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
      
      xPathLexer0.mod();
      Token token7 = xPathLexer0.dots();
      token7.toString();
      token7.toString();
      String string0 = token7.toString();
      assertEquals("[ (13) (G)", string0);
      
      Token token8 = xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer1.setPreviousToken(token8);
      assertEquals(5, token8.getTokenType());
      
      xPathLexer0.dots();
      Token token9 = xPathLexer0.doubleColon();
      assertEquals("^w", token9.getTokenText());
      
      Token token10 = xPathLexer0.at();
      assertEquals(")", token10.getTokenText());
      assertEquals(16, token10.getTokenType());
      
      xPathLexer0.nextToken();
      Token token11 = xPathLexer1.pipe();
      assertEquals(17, token11.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token12 = xPathLexer0.comma();
      assertEquals("&", token12.getTokenText());
      assertEquals(32, token12.getTokenType());
      
      Token token13 = xPathLexer1.doubleColon();
      assertEquals(19, token13.getTokenType());
      
      Token token14 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token14.getTokenType());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.8124388920590073
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("szn #=+/&");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("s", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token3.getTokenText());
      assertNotNull(token3);
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.dollar();
      assertEquals("#", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      int int0 = xPathLexer0.endPosition();
      assertEquals(9, int0);
      
      Token token5 = xPathLexer0.comma();
      assertEquals("=", token5.getTokenText());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("/", token7.getTokenText());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      assertEquals("", token8.getTokenText());
      
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      assertEquals("&", token9.getTokenText());
      
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      
      Token token11 = xPathLexer0.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      
      xPathLexer0.leftParen();
      Token token13 = xPathLexer0.pipe();
      assertEquals(17, token13.getTokenType());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.3327972237304555
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("NUL");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("N", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("U", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("L", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer1.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer1.at();
      assertEquals(16, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("1");
      Token token7 = xPathLexer2.nextToken();
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer1.equals();
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer2.star();
      assertEquals(20, token9.getTokenType());
      assertEquals(" ", token9.getTokenText());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.319637988682031
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("j7", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("pV", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.leftParen();
      assertEquals("n", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.dots();
      assertEquals("]", token4.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer1.identifier();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer2.relationalOperator();
      Token token7 = xPathLexer1.dots();
      xPathLexer2.relationalOperator();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.currentPosition();
      Token token8 = xPathLexer2.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      xPathLexer1.at();
      Token token9 = xPathLexer3.at();
      assertEquals(16, token9.getTokenType());
      
      xPathLexer3.currentPosition();
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token11 = xPathLexer3.slashes();
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer0.plus();
      assertEquals("A", token12.getTokenText());
      assertEquals(5, token12.getTokenType());
      
      Token token13 = xPathLexer0.minus();
      assertEquals(6, token13.getTokenType());
      assertEquals("J", token13.getTokenText());
      
      xPathLexer1.setPreviousToken(token7);
      Token token14 = xPathLexer4.dots();
      assertEquals(13, token14.getTokenType());
      
      Token token15 = xPathLexer4.nextToken();
      assertEquals((-1), token15.getTokenType());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.797132025585096
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.doubleColon();
      xPathLexer1.pipe();
      xPathLexer2.slashes();
      xPathLexer1.currentPosition();
      xPathLexer2.doubleColon();
      xPathLexer2.minus();
      xPathLexer0.not();
      xPathLexer0.number();
      xPathLexer2.doubleColon();
      xPathLexer1.isIdentifierChar('M');
      xPathLexer0.consume((-2400));
      xPathLexer0.at();
      xPathLexer1.number();
      xPathLexer1.doubleColon();
      xPathLexer1.isIdentifierChar('M');
      // Undeclared exception!
      try { 
        xPathLexer0.relationalOperator();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0876341351288135
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VO");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("V", token0.getTokenText());
      
      xPathLexer0.setXPath("VO");
      Token token1 = xPathLexer0.dots();
      Token token2 = xPathLexer0.nextToken();
      token1.toString();
      token2.toString();
      XPathLexer xPathLexer1 = new XPathLexer("[ (13) (V)");
      xPathLexer1.mod();
      String string0 = token1.toString();
      assertEquals("[ (13) (V)", string0);
      
      token2.toString();
      String string1 = token2.toString();
      assertEquals("[ (15) (O)", string1);
      
      Token token3 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token3);
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer1.slashes();
      assertEquals("[", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer1.dollar();
      assertEquals(" ", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer1.setPreviousToken(token2);
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6819814949359735
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.dots();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer1.identifier();
      xPathLexer2.doubleColon();
      xPathLexer0.pipe();
      xPathLexer2.slashes();
      xPathLexer1.currentPosition();
      xPathLexer2.doubleColon();
      xPathLexer0.not();
      xPathLexer1.number();
      xPathLexer2.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.plus();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer5 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      xPathLexer5.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer2.colon();
      xPathLexer0.pipe();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.rightParen();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.4246541166560018
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C)Xe,8:+T>9");
      Token token0 = xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.equals();
      assertEquals("X", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (19) (C))", string0);
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("e", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(",", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.minus();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.isIdentifierStartChar('j');
      xPathLexer0.or();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.doubleColon();
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      xPathLexer0.or();
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      xPathLexer0.colon();
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
      
      Token token9 = xPathLexer0.leftParen();
      assertEquals(1, token9.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.pipe();
      xPathLexer0.or();
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer0.pipe();
      assertEquals(17, token11.getTokenType());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.4812367538809406
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      xPathLexer0.dollar();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.identifierOrOperatorName();
      xPathLexer0.dots();
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.leftBracket();
      xPathLexer1.identifier();
      xPathLexer3.doubleColon();
      xPathLexer3.pipe();
      xPathLexer2.slashes();
      xPathLexer4.doubleColon();
      xPathLexer0.not();
      xPathLexer1.number();
      xPathLexer3.doubleColon();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.isIdentifierChar('U');
      xPathLexer0.consume((-1043));
      xPathLexer4.at();
      XPathLexer xPathLexer6 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer6.nextToken();
      xPathLexer6.at();
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5535376295904764
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.whitespace();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("");
      token0.toString();
      xPathLexer1.plus();
      xPathLexer1.leftParen();
      xPathLexer0.identifier();
      xPathLexer1.pipe();
      xPathLexer1.identifierOrOperatorName();
      Token token1 = xPathLexer0.number();
      xPathLexer1.rightBracket();
      xPathLexer1.colon();
      token0.toString();
      token1.toString();
      xPathLexer0.consume((-1));
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.equals();
      xPathLexer1.nextToken();
      xPathLexer1.getXPath();
      xPathLexer1.consume(25);
      xPathLexer1.leftBracket();
      xPathLexer1.minus();
      xPathLexer1.minus();
      xPathLexer1.star();
      xPathLexer1.dots();
      xPathLexer1.identifier();
      Token token2 = xPathLexer1.div();
      assertNull(token2);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.2678266223080543
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token2);
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.identifier();
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.consume();
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer0.consume();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('_');
      assertTrue(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.638603721405711
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "zj7pVn]iAJLEZ)UM";
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      xPathLexer0.dollar();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      xPathLexer0.comma();
      xPathLexer1.or();
      xPathLexer0.number();
      // Undeclared exception!
      try { 
        xPathLexer1.LA((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.698955237242955
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("J$g}qu");
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("$", token2.getTokenText());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.star();
      assertEquals("g", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("}", token4.getTokenText());
      
      Token token5 = xPathLexer0.plus();
      assertEquals("q", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.setXPath("uO#q6J{?'|t");
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.equals();
      Token token7 = xPathLexer0.not();
      assertEquals("#", token7.getTokenText());
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer0.equals();
      assertEquals(21, token8.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.endPosition();
      xPathLexer0.operatorName();
      xPathLexer0.consume((-2227));
      Token token9 = xPathLexer0.rightBracket();
      assertEquals(4, token9.getTokenType());
      
      xPathLexer0.currentPosition();
      int int0 = xPathLexer0.currentPosition();
      assertEquals((-2222), int0);
      
      xPathLexer0.doubleColon();
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.8234169983973927
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.literal();
      xPathLexer0.notEquals();
      xPathLexer0.dots();
      xPathLexer0.consume((-3891));
      xPathLexer0.consume(0);
      xPathLexer0.rightParen();
      xPathLexer0.at();
      xPathLexer0.isIdentifierChar('g');
      xPathLexer0.minus();
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.7066999982675375
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L`SxPt7a&B|lWo.A^");
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.LA(1);
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.star();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.at();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer1.relationalOperator();
      xPathLexer0.plus();
      xPathLexer2.leftBracket();
      XPathLexer xPathLexer4 = new XPathLexer("L`SxPt7a&B|lWo.A^");
      xPathLexer2.nextToken();
      xPathLexer3.not();
      xPathLexer0.identifier();
      Token token1 = xPathLexer3.colon();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.100151977271312
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("om", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(".", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals("werken.saxpath.XPathLexer", token3.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.rightParen();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.or();
      xPathLexer0.div();
      xPathLexer0.div();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer0.rightBracket();
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.identifier();
      Token token11 = xPathLexer0.leftBracket();
      assertEquals(3, token11.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.getPreviousToken();
      Token token12 = xPathLexer0.identifier();
      assertEquals(15, token12.getTokenType());
      
      Token token13 = xPathLexer0.equals();
      assertEquals(21, token13.getTokenType());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.7046157852877093
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      Token token1 = xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      Token token2 = xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer1.number();
      Token token3 = xPathLexer0.nextToken();
      xPathLexer1.setPreviousToken(token3);
      xPathLexer0.notEquals();
      token2.toString();
      token0.toString();
      xPathLexer0.identifierOrOperatorName();
      token1.toString();
      xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer1.dots();
      xPathLexer1.notEquals();
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.7429203016752717
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      Token token1 = xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      Token token2 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.notEquals();
      token0.toString();
      token2.toString();
      XPathLexer xPathLexer1 = new XPathLexer("[ (26) (z)");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.at();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.dollar();
      xPathLexer1.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer3.and();
      xPathLexer2.dollar();
      xPathLexer2.relationalOperator();
      xPathLexer0.plus();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer4.nextToken();
      xPathLexer4.colon();
      xPathLexer2.not();
      Token token3 = xPathLexer4.identifierOrOperatorName();
      assertNull(token3);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.6519700737711007
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("j", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      Token token3 = xPathLexer0.not();
      assertEquals("p", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(4, token5.getTokenType());
      assertEquals("]", token5.getTokenText());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token2);
      assertEquals("7", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token8 = xPathLexer0.notEquals();
      String string0 = token0.toString();
      assertEquals("[ (26) (z)", string0);
      
      token7.toString();
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      
      String string1 = token8.toString();
      assertEquals("[ (22) (iA)", string1);
      
      xPathLexer0.consume(62);
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
      
      xPathLexer0.setPreviousToken(token4);
      assertEquals("Vn", token4.getTokenText());
      
      xPathLexer0.nextToken();
      Token token11 = xPathLexer0.pipe();
      assertEquals(17, token11.getTokenType());
      
      Token token12 = xPathLexer0.colon();
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer0.not();
      assertEquals(23, token13.getTokenType());
      
      Token token14 = xPathLexer0.doubleColon();
      assertEquals(19, token14.getTokenType());
      
      Token token15 = xPathLexer0.slashes();
      assertEquals(11, token15.getTokenType());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.6619042663180617
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.and();
      Token token0 = xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.dots();
      assertEquals("m.", token1.getTokenText());
      assertEquals(14, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (19) (co)", string0);
      
      xPathLexer0.number();
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("erken.saxpath.XPathLexer", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer1.rightParen();
      assertEquals(2, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.at();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer2.and();
      xPathLexer1.relationalOperator();
      Token token7 = xPathLexer1.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer3.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer4.nextToken();
      Token token9 = xPathLexer3.not();
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer4.identifier();
      assertEquals("", token10.getTokenText());
      
      Token token11 = xPathLexer1.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer1.slashes();
      assertEquals(11, token12.getTokenType());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.3986362522036133
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L`SxPt7a&B|lWo.A^");
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      xPathLexer0.or();
      Token token0 = xPathLexer0.number();
      xPathLexer0.LA(19);
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.plus();
      xPathLexer0.slashes();
      xPathLexer0.hasMoreChars();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      xPathLexer0.slashes();
      xPathLexer0.colon();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer2.LA(1);
      xPathLexer3.leftParen();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.or();
      xPathLexer2.colon();
      xPathLexer1.pipe();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.0277424026234665
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("g", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("*", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer("/");
      Token token5 = xPathLexer2.slashes();
      assertEquals("/", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.minus();
      assertEquals("|", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      xPathLexer2.plus();
      xPathLexer0.relationalOperator();
      xPathLexer1.relationalOperator();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("F", token7.getTokenText());
      
      Token token8 = xPathLexer1.notEquals();
      assertEquals(22, token8.getTokenType());
      
      xPathLexer0.and();
      Token token9 = xPathLexer0.plus();
      assertEquals("+", token9.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("/");
      Token token10 = xPathLexer3.star();
      assertEquals(20, token10.getTokenType());
      assertEquals("/", token10.getTokenText());
      
      Token token11 = xPathLexer3.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer1.leftBracket();
      assertEquals(3, token12.getTokenType());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.4906930246963175
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      assertEquals("z", token0.getTokenText());
      
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token1 = xPathLexer1.pipe();
      assertEquals("z", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token2 = xPathLexer2.identifierOrOperatorName();
      assertEquals("com.werken.saxpath.XPathLexer", token2.getTokenText());
      
      xPathLexer2.number();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("7", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.identifier();
      Token token4 = xPathLexer1.doubleColon();
      assertEquals("j7", token4.getTokenText());
      
      xPathLexer1.pipe();
      Token token5 = xPathLexer2.slashes();
      assertEquals(11, token5.getTokenType());
      
      xPathLexer3.currentPosition();
      xPathLexer1.doubleColon();
      Token token6 = xPathLexer2.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      assertEquals("", token7.getTokenText());
      
      Token token8 = xPathLexer2.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer3.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      xPathLexer0.and();
      Token token10 = xPathLexer2.dollar();
      assertEquals(26, token10.getTokenType());
      
      xPathLexer2.relationalOperator();
      Token token11 = xPathLexer2.plus();
      assertEquals(5, token11.getTokenType());
      
      Token token12 = xPathLexer3.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("FfDGJ-7;d`2");
      Token token13 = xPathLexer4.nextToken();
      assertEquals(15, token13.getTokenType());
      
      Token token14 = xPathLexer0.colon();
      assertEquals("p", token14.getTokenText());
      assertEquals(18, token14.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token15 = xPathLexer5.pipe();
      assertEquals(17, token15.getTokenType());
      
      Token token16 = xPathLexer1.rightParen();
      assertEquals("]", token16.getTokenText());
      assertEquals(2, token16.getTokenType());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.or();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.7523414224044818
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token2);
      assertEquals("7", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals("iA", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (26) (z)", string0);
      
      token4.toString();
      XPathLexer xPathLexer1 = new XPathLexer("[ (26) (z)");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer1.at();
      assertEquals("[", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.dollar();
      Token token7 = xPathLexer1.doubleColon();
      assertEquals(" (", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("JLEZ", token8.getTokenText());
      
      xPathLexer3.and();
      xPathLexer2.dollar();
      xPathLexer2.relationalOperator();
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      assertEquals(")", token9.getTokenText());
      
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token11 = xPathLexer4.nextToken();
      assertEquals(15, token11.getTokenType());
      assertEquals("com.werken.saxpath.XPathLexer", token11.getTokenText());
      
      Token token12 = xPathLexer4.colon();
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer1.dots();
      assertEquals(13, token13.getTokenType());
      assertEquals("2", token13.getTokenText());
      
      Token token14 = xPathLexer0.nextToken();
      assertEquals("M", token14.getTokenText());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.466577143604936
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h@q/G%U^z");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("h", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("@q", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("/", token3.getTokenText());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("G", token4.getTokenText());
      
      Token token5 = xPathLexer0.star();
      assertEquals("%", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals("U", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.9713765399690213
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.at();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.div();
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      
      char char0 = xPathLexer0.LA(1485);
      assertEquals('\uFFFF', char0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.6812006546529485
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("z", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      Token token1 = xPathLexer0.notEquals();
      assertEquals("j7", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.leftParen();
      assertEquals("p", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.dots();
      assertEquals("V", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.number();
      assertEquals("", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer1.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      xPathLexer1.identifierOrOperatorName();
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      xPathLexer1.equals();
      Token token9 = xPathLexer1.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      xPathLexer1.getXPath();
      xPathLexer0.consume(11);
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.9284679587203788
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer0.literal();
      assertNull(token8);
      
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.4120026046453598
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.rightBracket();
      xPathLexer0.pipe();
      xPathLexer0.number();
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.doubleColon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume(0);
      xPathLexer0.star();
      xPathLexer0.consume((-1));
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.plus();
      xPathLexer0.consume((-1));
      xPathLexer0.leftParen();
      xPathLexer0.identifier();
      xPathLexer0.slashes();
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.isIdentifierStartChar('#');
      xPathLexer0.leftParen();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.and();
      xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.4937248420627822
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.and();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.dots();
      assertEquals(14, token1.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (19) (co)", string0);
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.LA(2921);
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("werken.saxpath.XPathLexer", token3.getTokenText());
      
      xPathLexer0.slashes();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.doubleColon();
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.number();
      xPathLexer0.LA(94);
      xPathLexer0.leftParen();
      xPathLexer0.or();
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.631905225127158
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      assertEquals("z", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("j7", token1.getTokenText());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.leftParen();
      assertEquals("p", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      Token token7 = xPathLexer0.equals();
      assertEquals(")", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("UM", token8.getTokenText());
      
      xPathLexer0.getXPath();
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      
      xPathLexer0.nextToken();
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer0.number();
      assertEquals(30, token11.getTokenType());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.4978343256023647
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightBracket();
      xPathLexer0.pipe();
      xPathLexer0.number();
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.doubleColon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume(0);
      xPathLexer0.star();
      int int0 = (-1);
      xPathLexer0.consume((-2));
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("j3d5<Qmm");
      xPathLexer1.identifier();
      xPathLexer0.slashes();
      xPathLexer0.consume();
      xPathLexer1.mod();
      xPathLexer0.isIdentifierStartChar('T');
      xPathLexer1.leftParen();
      xPathLexer1.minus();
      XPathLexer xPathLexer2 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer2.LA((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.47912630415561397
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?5g9V8");
      Token token0 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("?5g9V8", token1.getTokenText());
      assertEquals((-1), token1.getTokenType());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.9713765399690213
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.div();
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.5241676616734616
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("724|([uSs>y)O\"<");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("7", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      assertEquals("24", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("|", token2.getTokenText());
      
      Token token3 = xPathLexer0.equals();
      assertEquals("(", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals("[", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.5037058054104229
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      Token token0 = xPathLexer0.equals();
      String string0 = token0.toString();
      assertEquals("[ (21) (r)", string0);
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("8", token2.getTokenText());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(":1I-T/8G`3{7M");
      Token token6 = xPathLexer0.getPreviousToken();
      assertEquals("wRM", token6.getTokenText());
      
      xPathLexer1.or();
      xPathLexer1.relationalOperator();
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.setXPath("");
      xPathLexer1.nextToken();
      xPathLexer0.and();
      Token token8 = xPathLexer1.colon();
      assertEquals("1", token8.getTokenText());
      
      Token token9 = xPathLexer2.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      xPathLexer2.colon();
      Token token10 = xPathLexer1.pipe();
      assertEquals("I", token10.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token11 = xPathLexer3.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      Token token12 = xPathLexer2.star();
      assertEquals(20, token12.getTokenType());
      
      Token token13 = xPathLexer2.colon();
      assertEquals(18, token13.getTokenType());
      
      Token token14 = xPathLexer0.pipe();
      assertEquals(17, token14.getTokenType());
      
      Token token15 = xPathLexer1.rightParen();
      assertEquals(2, token15.getTokenType());
      assertEquals("-", token15.getTokenText());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.5009440380050632
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("H^ElZuy<#>9");
      Token token0 = xPathLexer0.dollar();
      assertEquals("H", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("^E", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("lZ", token2.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      Token token3 = xPathLexer0.dots();
      assertEquals("y", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.relationalOperator();
      assertEquals(7, token4.getTokenType());
      assertEquals("<", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.endPosition();
      xPathLexer1.notEquals();
      Token token5 = xPathLexer1.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("1Rc|je_5<");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer4.at();
      assertEquals(16, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.nextToken();
      xPathLexer4.and();
      xPathLexer4.relationalOperator();
      xPathLexer2.plus();
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      assertEquals("", token8.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("H^ElZuy<#>9");
      Token token9 = xPathLexer1.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals(">", token10.getTokenText());
      assertEquals(23, token10.getTokenType());
      
      xPathLexer3.identifier();
      Token token11 = xPathLexer3.colon();
      assertEquals("|", token11.getTokenText());
      assertEquals(18, token11.getTokenType());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.4482778500446643
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      assertEquals("z", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("NUL");
      Token token2 = xPathLexer1.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("N", token2.getTokenText());
      
      xPathLexer0.or();
      xPathLexer1.number();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer("NUL");
      Token token3 = xPathLexer2.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("N", token3.getTokenText());
      
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer2.leftBracket();
      assertEquals("U", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      
      xPathLexer4.doubleColon();
      xPathLexer3.pipe();
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("U", token6.getTokenText());
      
      xPathLexer2.currentPosition();
      xPathLexer4.doubleColon();
      XPathLexer xPathLexer5 = new XPathLexer("NUL");
      Token token7 = xPathLexer5.not();
      assertEquals("N", token7.getTokenText());
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      assertEquals("", token8.getTokenText());
      
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      assertEquals("]i", token9.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token10 = xPathLexer6.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token11 = xPathLexer7.plus();
      assertEquals(5, token11.getTokenType());
      
      Token token12 = xPathLexer7.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("Ajfsj4pY-/:");
      xPathLexer6.nextToken();
      Token token13 = xPathLexer2.colon();
      assertEquals(18, token13.getTokenType());
      assertEquals("L", token13.getTokenText());
      
      Token token14 = xPathLexer7.pipe();
      assertEquals(17, token14.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token15 = xPathLexer4.rightParen();
      assertEquals(2, token15.getTokenType());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.4856772982219209
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.notEquals();
      xPathLexer0.or();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.div();
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.operatorName();
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      
      Token token8 = xPathLexer0.literal();
      assertNull(token8);
      
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertNull(token9);
      
      Token token10 = xPathLexer0.identifier();
      assertEquals(15, token10.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.div();
      xPathLexer0.isIdentifierChar('a');
      xPathLexer0.isIdentifierChar('O');
      Token token11 = xPathLexer0.slashes();
      assertEquals(11, token11.getTokenType());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.2507958779932509
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("H^ElZuy<#>9");
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      xPathLexer0.endPosition();
      xPathLexer0.notEquals();
      xPathLexer0.star();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer("1Rc|je_5<");
      xPathLexer1.at();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.and();
      xPathLexer3.relationalOperator();
      xPathLexer0.plus();
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q@Cj[!5!>;opK5");
      Token token0 = xPathLexer0.slashes();
      assertEquals("q", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("@", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("C", token2.getTokenText());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.7517760112164744
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L`SxPt7a&B|lWo.A^");
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.comma();
      Token token1 = xPathLexer0.rightParen();
      Token token2 = xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.mod();
      token0.toString();
      xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.notEquals();
      token2.toString();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.equals();
      xPathLexer1.div();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken(token2);
      XPathLexer xPathLexer3 = new XPathLexer("[ (32) (`)");
      xPathLexer1.dots();
      xPathLexer1.doubleColon();
      xPathLexer3.at();
      XPathLexer xPathLexer4 = new XPathLexer("L`SxPt7a&B|lWo.A^");
      xPathLexer0.nextToken();
      xPathLexer1.equals();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token3 = xPathLexer5.and();
      assertNull(token3);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.492965263164365
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("pV", token1.getTokenText());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.leftParen();
      assertEquals("n", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("]", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.leftBracket();
      Token token4 = xPathLexer2.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer3.doubleColon();
      xPathLexer2.pipe();
      XPathLexer xPathLexer5 = new XPathLexer("7");
      Token token5 = xPathLexer5.comma();
      assertEquals("7", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer5.slashes();
      assertEquals(11, token6.getTokenType());
      
      xPathLexer2.currentPosition();
      xPathLexer1.doubleColon();
      Token token7 = xPathLexer2.not();
      assertEquals(23, token7.getTokenType());
      
      xPathLexer4.number();
      Token token8 = xPathLexer2.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token9 = xPathLexer6.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer0.leftBracket();
      assertEquals("i", token10.getTokenText());
      assertEquals(3, token10.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("7");
      Token token11 = xPathLexer8.nextToken();
      assertEquals(30, token11.getTokenType());
      
      Token token12 = xPathLexer8.colon();
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer1.pipe();
      assertEquals(17, token13.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token14 = xPathLexer4.rightParen();
      assertEquals(2, token14.getTokenType());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.379003733943202
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zj7pVn]iAJLEZ)UM");
      Token token0 = xPathLexer0.dollar();
      assertEquals("z", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("j7", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("pV", token2.getTokenText());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals("n", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("]", token4.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.leftBracket();
      xPathLexer1.identifier();
      Token token5 = xPathLexer2.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer1.pipe();
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer2.slashes();
      assertEquals(11, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token8 = xPathLexer3.at();
      assertEquals(16, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.nextToken();
      xPathLexer3.and();
      xPathLexer1.relationalOperator();
      Token token9 = xPathLexer3.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer1.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token11 = xPathLexer4.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      Token token12 = xPathLexer5.not();
      assertEquals(23, token12.getTokenType());
      
      Token token13 = xPathLexer2.identifier();
      assertEquals(15, token13.getTokenType());
      
      Token token14 = xPathLexer4.colon();
      assertEquals(18, token14.getTokenType());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.2658632247066326
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?5g9V8");
      Token token0 = xPathLexer0.colon();
      assertEquals("", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.setPreviousToken((Token) null);
      Token token1 = xPathLexer0.colon();
      String string0 = token1.toString();
      assertEquals("[ (18) (?)", string0);
      
      Token token2 = xPathLexer0.not();
      assertEquals("5", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("g9V8", token3.getTokenText());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.5747436805219097
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ag9d=*|F+GGT=^w)&z\"");
      Token token0 = xPathLexer0.plus();
      xPathLexer0.leftParen();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.number();
      Token token3 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token3);
      token2.toString();
      token1.toString();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.dots();
      token0.toString();
      token3.toString();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      token4.toString();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer0.identifier();
      xPathLexer2.setPreviousToken(token5);
      xPathLexer2.dots();
      xPathLexer0.doubleColon();
      xPathLexer1.at();
      xPathLexer2.nextToken();
      xPathLexer2.pipe();
      Token token6 = xPathLexer0.relationalOperator();
      assertNull(token6);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.6499487930019865
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token0 = xPathLexer1.pipe();
      assertEquals(17, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("r wRM#8ZbE:-`9?{jP4");
      Token token1 = xPathLexer1.plus();
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer2.literal();
      assertNull(token2);
      
      Token token3 = xPathLexer2.dots();
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer1.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer1.dollar();
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.7583989331519824
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("59V8");
      Token token0 = xPathLexer0.colon();
      String string0 = token0.toString();
      assertEquals("[ (18) ()", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("59", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("V", token2.getTokenText());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.7837466543394238
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
  }
}
