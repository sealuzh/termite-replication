/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 15:07:11 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8966005467543823
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Float float0 = new Float(2898.96F);
      Float.sum(1449.5952F, 2898.96F);
      Float.max(1449.5952F, (-307.663F));
      JSONObject.testValidity(float0);
      Object object0 = JSONObject.NULL;
      int int0 = 2;
      JSONObject.valueToString(object0, 2, 93);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] not found.";
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("null", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject0.put("] not found.", (long) 93);
      jSONObject1.getInt("] not found.");
      try { 
        jSONObject2.getBoolean("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2968607823081797
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has(".");
      JSONObject jSONObject1 = jSONObject0.put(".", 0L);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONArray0.optDouble((-1), 0.0);
      jSONArray0.put(11, 0L);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject2 = jSONObject1.put("ih)!J{on.1%31", (Collection) linkedList0);
      JSONObject.valueToString(" d%jc@*o");
      jSONObject2.optInt("\"java.lang.String@0000000008\"");
      Double double0 = new Double(0);
      Double.isFinite(0);
      JSONObject.valueToString(double0);
      jSONObject0.optInt("`E", 11);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.lang.Double@0000000010";
      stringArray0[1] = "ih)!J{on.1%31";
      JSONObject jSONObject3 = new JSONObject("java.lang.Double@0000000010", stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('L');
      jSONObject1.write(stringWriter1);
      JSONTokener jSONTokener0 = new JSONTokener("\"java.lang.String@0000000008\"");
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"java.lang.String@0000000008\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5792331346113393
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer integer0 = new Integer(24);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "issum";
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      HashMap<Long, JSONObject> hashMap3 = new HashMap<Long, JSONObject>();
      HashMap<Long, JSONObject> hashMap4 = new HashMap<Long, JSONObject>(hashMap3);
      Float float0 = new Float((float) 24);
      JSONObject jSONObject1 = jSONObject0.put(":_FOl", true);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Double double0 = new Double((-451.463215873164));
      String[] stringArray0 = new String[3];
      String string0 = "is";
      stringArray0[0] = "is";
      String string1 = "getmax";
      Double double1 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6715952780212544
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalXor(true, false);
      Boolean.logicalAnd(true, true);
      Boolean.logicalAnd(true, true);
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertNotNull(stringArray0);
      
      Float float0 = new Float((-3.4454F));
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.put("wai", 0L);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2249103455198487
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Short short0 = new Short((short)46);
      String string0 = JSONObject.valueToString(hashMap0, (short)46, (-844));
      assertEquals("{}", string0);
      
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONObject jSONObject1 = jSONObject0.put("{}", (-844));
      double double0 = jSONObject1.getDouble("{}");
      assertEquals((-844.0), double0, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1202082239406694
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has("");
      JSONObject jSONObject1 = jSONObject0.put("", (double) 0L);
      jSONObject1.getString("");
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Double double0 = new Double(1677.5766);
      Short short0 = new Short((short)40);
      String string0 = JSONObject.valueToString(linkedList0, (-844), 123);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.46563989890319
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has(".");
      JSONObject jSONObject1 = jSONObject0.put(".", 0L);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONArray0.optDouble((-1), 0.0);
      JSONArray jSONArray1 = jSONArray0.put(11, 0L);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject2 = jSONObject1.put("ih)!J{on.1%31", (Collection) linkedList0);
      JSONObject.valueToString(" d%jc@*o");
      jSONObject2.optInt("\"java.lang.String@0000000008\"");
      Double double0 = new Double(0);
      JSONObject.valueToString(jSONArray1, (-1), (-1));
      jSONObject0.optInt("`E", 11);
      jSONObject1.toString((-3663), (-3663));
      JSONObject.quote("\"java.lang.String@0000000008\"");
      long long0 = new Integer(0);
      jSONObject1.put("[\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\nnull,\njava.lang.Long@000000001\n]", (-2071));
      jSONObject0.put("ih)!J{on.1%31", (long) 11);
      Float float0 = new Float(1.0F);
      jSONObject2.putOpt("\"java.lang.String@0000000008\"", float0);
      assertEquals(4, jSONObject2.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9763949798536018
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Short short0 = new Short((short)46);
      JSONObject.valueToString(hashMap0, (short)46, (-844));
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONObject jSONObject1 = jSONObject0.put("`bm>Ifm tTcY", true);
      try { 
        jSONObject1.getString("RYb=`jW}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"RYb=`jW}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6277829194514752
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "E*x+~= RSn{v";
      jSONObject0.optInt("E*x+~= RSn{v");
      String string1 = ",";
      jSONObject0.has(",");
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONArray jSONArray1 = jSONArray0.put(0, (long) 0);
      jSONObject0.toJSONArray(jSONArray1);
      try { 
        Byte.valueOf("E*x+~= RSn{v");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"E*x+~= RSn{v\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1975077743600884
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Double double0 = new Double(1677.5766);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      HashMap<Long, JSONObject> hashMap3 = new HashMap<Long, JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject2 = jSONObject0.put("Unterminated string", (Object) jSONObject1);
      String string0 = JSONObject.valueToString(jSONObject2);
      jSONObject0.optDouble("<z^]a0%fDYZA;");
      jSONObject1.opt("wheel.json.JSONObject@0000000001");
      jSONObject1.optDouble("Lq>tJS)znz55DU");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('E');
      Writer writer0 = jSONObject1.write(stringWriter1);
      jSONObject0.write(writer0);
      jSONArray0.toJSONObject(jSONArray0);
      jSONObject2.putOpt("gettoString", stringWriter0);
      Long long0 = new Long(0L);
      String string1 = JSONObject.valueToString(long0, 61, 61);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4880590184383586
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.accumulate("", hashMap0);
      hashMap0.put(",\n", ",\n");
      hashMap0.put("ic@CLR2xuRs", "]ZQt[(*oJN");
      hashMap0.put("^!,3psy*[yFWj/", "");
      jSONObject1.optInt("000");
      JSONObject.valueToString("]ZQt[(*oJN");
      JSONObject.valueToString(hashMap0, 0, 0);
      jSONObject1.optInt("ic@CLR2xuRs", 0);
      jSONObject1.opt("wheel.json.JSONObject");
      jSONObject1.opt((String) null);
      jSONObject0.optDouble(",\n");
      jSONObject2.toString(546, 0);
      try { 
        jSONObject2.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.337266011803846
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("ROdK9RZ", 887L);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optInt("ROdK9RZ");
      String string0 = jSONObject0.toString(1520, 1520);
      jSONObject1.optInt("`E", 1520);
      JSONObject.valueToString(string0, 1520, 1520);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 887, 1520);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4280648236309732
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Null key.";
      jSONObject0.accumulate("Null key.", "Null key.");
      try { 
        jSONObject0.getDouble("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null key.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4298983731002695
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = new Boolean(true);
      Boolean boolean2 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = "J-WW= knje>{xwe#'/F";
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.132749236521753
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("E*x+~= RSn{v");
      Integer integer0 = new Integer(0);
      jSONObject0.optDouble("x0$o2v=hC5");
      Object object0 = new Object();
      jSONObject0.accumulate("li", object0);
      jSONObject0.optString("x0$o2v=hC5", "__xDv2&2BpJD");
      Float float0 = new Float((double) 0);
      jSONObject0.optJSONArray("ismin");
      JSONObject jSONObject1 = new JSONObject((Object) "__xDv2&2BpJD");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(0);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.toJSONArray((JSONArray) null);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6920198079084638
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate(".", ".");
      jSONObject0.putOpt(".", jSONObject1);
      jSONObject1.has(".");
      Byte byte0 = new Byte((byte)99);
      Double double0 = Double.valueOf(4197.3);
      Double.min((byte)99, 0.0);
      jSONObject1.accumulate(".", double0);
      JSONObject jSONObject2 = jSONObject0.accumulate(".", byte0);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.187795928847474
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)44);
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected a ':' after a key", byte0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(",X'd4Y%Dn@K(*0{^y", "Expected a ':' after a key");
      String string0 = "true";
      hashMap0.put((String) null, "true");
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("true", jSONObject2);
      Float float0 = new Float((float) (byte)44);
      jSONObject0.putOpt("Expected a ':' after a key", float0);
      int int0 = 34;
      Float.min(1388.4448F, 0.0F);
      // Undeclared exception!
      try { 
        jSONObject1.toString(34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9385895254975198
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalXor(true, true);
      Boolean.logicalAnd(true, true);
      Byte byte0 = new Byte((byte) (-8));
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.accumulate("A JSONArray text must start with '['", (Object) null);
      jSONObject1.append("A JSONArray text must start with '['", boolean0);
      jSONObject1.isNull("A JSONArray text must start with '['");
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      HashMap<Long, JSONObject> hashMap3 = new HashMap<Long, JSONObject>();
      HashMap<Long, JSONObject> hashMap4 = new HashMap<Long, JSONObject>(hashMap3);
      Float float0 = new Float(1013.27F);
      assertEquals(1013.27F, (float)float0, 0.01F);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.294545165844896
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ".";
      jSONObject0.has(".");
      jSONObject0.put(".", 0L);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      try { 
        jSONArray0.put(1100, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Float float0 = new Float(141.8284283);
      Float float1 = new Float(349.71F);
      Integer.sum((-38489319), (-38489319));
      Integer integer0 = new Integer((-489));
      Integer.compare((-1579), (-6233));
      Integer integer1 = Integer.getInteger("com", integer0);
      Integer integer2 = new Integer((-834));
      Integer.sum(88, 785);
      Float float2 = new Float((-15.51756864272));
      Integer integer3 = new Integer(1192);
      Integer.toUnsignedString(2070);
      Integer.max((-6233), 18);
      JSONObject jSONObject0 = new JSONObject(integer1);
      jSONObject0.optJSONObject("gethashCode");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3898258589693575
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "java.lang.Long@00000000030";
      jSONObject0.has("java.lang.Long@00000000030");
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@00000000030", 3L);
      jSONObject1.getLong("java.lang.Long@00000000030");
      jSONObject0.toString();
      String string1 = "%/n@&9O&HJAq*-\\$";
      jSONObject0.optDouble("%/n@&9O&HJAq*-$");
      jSONObject0.remove((String) null);
      jSONObject0.optLong("java.lang.Long@00000000030");
      try { 
        jSONObject0.getJSONObject("java.lang.Long@00000000030");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Long@00000000030\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.3066687254045313
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 1060;
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject1.put("", (-1L));
      try { 
        jSONObject1.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.009056400598704
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{3AKS,!BYPN");
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("K{r('''rK[:Pe7hDG", (Map) hashMap0);
      jSONObject0.put("-1688..", (Object) jSONObject1);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject0.accumulate("-1688..", jSONArray0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      String string0 = "0";
      hashMap1.put("0", "0");
      int int0 = 123;
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList1);
      long long0 = 0L;
      // Undeclared exception!
      jSONObject2.toString(123);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = new JSONObject();
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = ",\n";
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Double double0 = new Double(1677.5766);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      HashMap<Long, JSONObject> hashMap3 = new HashMap<Long, JSONObject>();
      HashMap<Long, JSONObject> hashMap4 = new HashMap<Long, JSONObject>(hashMap3);
      String string1 = null;
      try { 
        jSONObject0.put((String) null, (-1027L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9736489231972635
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Float float0 = new Float(141.8284283);
      Float.sum(335.25433F, 335.25433F);
      Float.min(670.50867F, 670.50867F);
      Float.max(2187.7312F, 670.50867F);
      Float.max(3501.7007F, 335.25433F);
      Float.min((-1591.2626F), 0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-30733247));
      Integer.sum((-90983867), 913);
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      linkedList2.iterator();
      Float float1 = new Float((-4899.912050438078));
      Float float2 = new Float((-1591.2626F));
      Float.min(2187.7312F, 335.25433F);
      linkedList2.add(float0);
      Float.sum(2187.7312F, 913);
      Float float3 = new Float((double) 3501.7007F);
      linkedList0.add(float1);
      Float float4 = new Float(335.25433F);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.2055983590263937
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 1060;
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject1.getJSONArray("");
      Float float0 = new Float((float) 1060);
      float float1 = (-780.94F);
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      hashMap0.putAll(hashMap1);
      hashMap0.put("0", float0);
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.201641604420814
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has(".");
      JSONObject jSONObject1 = jSONObject0.put(".", 0L);
      jSONObject1.getLong(".");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject1.put("0.0", (Collection) linkedList0);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONObject jSONObject2 = jSONObject1.accumulate("isequals", jSONArray0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, "' and instead saw '");
      hashMap0.put("wheel.json.JSONObject$1", ",\n");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(".", biFunction0);
      hashMap0.put("true", "^!,3psy*[yFWj/");
      jSONObject2.optInt("true");
      JSONObject.valueToString(".");
      jSONObject0.optString("isequals", "\"java.lang.String@0000000002\"");
      jSONObject0.opt("EI2djE");
      try { 
        jSONObject1.getDouble("Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unclosed comment\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.2923460171345718
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalXor(true, true);
      Boolean.logicalAnd(true, true);
      Byte byte0 = new Byte((byte) (-8));
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.accumulate("A JSONArray text must start with '['", (Object) null);
      JSONObject jSONObject2 = jSONObject1.append("A JSONArray text must start with '['", boolean0);
      jSONObject1.isNull("A JSONArray text must start with '['");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "uayj_<&{lA^hjW";
      Byte byte1 = new Byte((byte) (-8));
      JSONObject jSONObject3 = jSONObject0.putOpt("uayj_<&{lA^hjW", byte1);
      stringArray0[1] = "A JSONArray text must start with '['";
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Double double0 = new Double((byte) (-8));
      jSONObject2.optString("A JSONArray text must start with '['");
      Double double1 = new Double(0.0);
      jSONObject2.optString("1MDv:G5a^g5]]k2z");
      jSONObject3.opt("(e");
      double double2 = jSONObject1.optDouble(" H'^\u0006[Dt\b=]wKC8");
      assertEquals(3, jSONObject1.length());
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6283356526043842
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{3AKS,!BYPN");
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("K{r('''rK[:Pe7hDG", (Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("-1688..", jSONArray0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("0", "0");
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList1);
      long long0 = 0L;
      jSONArray0.put(123, 0L);
      try { 
        jSONObject1.getDouble("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9675446070142595
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Short short0 = new Short((short)46);
      JSONObject.valueToString(hashMap0, (short)46, (-844));
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONObject jSONObject1 = jSONObject0.put("gettoHexString", (Map) hashMap0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.3820191855172994
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ".";
      jSONObject0.has(".");
      JSONObject jSONObject1 = jSONObject0.put(".", 0L);
      jSONObject1.getLong(".");
      String string1 = "";
      String string2 = "3~";
      jSONObject0.put("3~", true);
      JSONObject.quote("");
      jSONObject0.toString();
      String string3 = "%/n@&9O&HJAq*-\\$";
      jSONObject0.optDouble("%/n@&9O&HJAq*-$");
      jSONObject0.remove((String) null);
      Long long0 = new Long(0L);
      Double double0 = new Double(0L);
      JSONObject.valueToString(double0);
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000002\":java.lang.Long@0000000003}");
      jSONObject0.optDouble("", (double) long0);
      try { 
        jSONObject1.get("1WiwuKMv$dpaU5A^(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1WiwuKMv$dpaU5A^(\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Collection<Byte> collection0 = null;
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      String string0 = "-1688..";
      JSONTokener jSONTokener0 = new JSONTokener("{3AKSd!xYPN");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 11 of {3AKSd!xYPN
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.2222669235381562
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Float float0 = new Float(141.8284283);
      Float.min(349.71F, 349.71F);
      JSONObject.numberToString(float0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Float float1 = new Float(349.71F);
      jSONArray0.put(141.8284283);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("!?,>H Wn8]!#:%|(", "java.lang.Float@0000000001");
      String string0 = "sZQD[^*oJN";
      hashMap0.put("}PUhWrv4,#W\":K-p(]Y", (String) null);
      hashMap0.put("lp%9o}:f&", "%2'_q^:#T~i\"g?Uj");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}PUhWrv4,#W\":K-p(]Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }PUhWrv4,#W\":K-p(]Y
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.4563524215645907
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.accumulate("", hashMap0);
      hashMap0.put(",\n", ",\n");
      hashMap0.put("ic@CLR2xuRs", "sZQD[^*oJN");
      hashMap0.put("^!,3psy*[yFWj/", "");
      jSONObject1.optInt("000");
      String string0 = JSONObject.valueToString("sZQD[^*oJN");
      jSONObject1.optString("^!,3psy*[yFWj/", "");
      jSONObject1.optInt("ic@CLR2xuRs", 0);
      jSONObject1.opt("wheel.json.JSONObject");
      jSONObject1.opt((String) null);
      jSONObject0.optDouble(",\n");
      String string1 = jSONObject2.toString(556, 0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.3433572083196017
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has(".");
      JSONObject jSONObject1 = jSONObject0.put(".", 0L);
      jSONObject1.getLong(".");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject2 = jSONObject1.put("0.0", (Collection) linkedList0);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONObject jSONObject3 = jSONObject1.accumulate("isequals", jSONArray0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, "' and instead saw '");
      hashMap0.put("wheel.json.JSONObject$1", ",\n");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(".", biFunction0);
      hashMap0.put("true", "^!,3psy*[yFWj/");
      jSONObject3.optInt("true");
      JSONObject.valueToString(".");
      jSONObject0.optString("isequals", "\"java.lang.String@0000000002\"");
      jSONObject0.opt("EI2djE");
      jSONObject0.optInt((String) null, 9);
      jSONObject3.optInt("#8/yIt", 0);
      JSONObject.valueToString("sZQD[^*oJN", 0, 12);
      jSONObject0.putOpt("867.9691.", "\"java.lang.String@0000000002\"");
      boolean boolean0 = jSONObject2.isNull("\"java.lang.String@0000000002\"");
      assertEquals(4, jSONObject1.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{3AKr2,%BYPN");
      jSONTokener0.nextTo('{');
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {3AKr2,%BYPN
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3113319996707051
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Float float0 = new Float((-990.251210064757));
      Float.sum(0.0F, 3076.0F);
      Float float1 = new Float(3076.0F);
      Float.sum(0.0F, 0.0F);
      Float.sum(335.70322F, 3076.0F);
      Float.min(3076.0F, 3411.7031F);
      Float.isFinite((-1519.515F));
      Float.max(173.56653F, 173.56653F);
      Float.min(3143.9307F, 335.70322F);
      Float.min(335.70322F, 0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>(linkedList1);
      linkedList0.removeAll(linkedList2);
      linkedList0.add(float0);
      linkedList0.add(float0);
      linkedList0.iterator();
      Float float2 = new Float(874.75);
      linkedList0.add(float2);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.3046193848206715
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-6L));
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      Boolean.logicalAnd(true, true);
      Boolean.logicalAnd(false, false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.put("ziiAf'G+{PVD81", (Object) long0);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.optString("1<2\"?");
      jSONObject0.optDouble("ziiAf'G+{PVD81");
      jSONObject0.opt("Expected a ',' or ']'");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONObject1, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{3AKr2/%XbBYPN");
      Float.max((byte)15, 0.0F);
      Float.min(0.0F, (byte)15);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float.max(740.578F, 0.0F);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer.sum(1193, 2630);
      Integer.getInteger("");
      Integer integer0 = Integer.getInteger("getrotateLeft", 1193);
      Integer.getInteger("", (Integer) null);
      Integer.getInteger((String) null, 3823);
      Integer integer1 = new Integer(1193);
      linkedList1.add(integer0);
      Integer integer2 = new Integer(2630);
      linkedList1.add(integer2);
      linkedList0.removeAll(linkedList1);
      linkedList0.pollFirst();
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      HashMap<String, Short> hashMap2 = new HashMap<String, Short>();
      HashMap<String, Float> hashMap3 = new HashMap<String, Float>();
      HashMap<String, Object> hashMap4 = new HashMap<String, Object>();
      HashMap<Long, JSONObject> hashMap5 = new HashMap<Long, JSONObject>();
      HashMap<Long, JSONObject> hashMap6 = new HashMap<Long, JSONObject>();
      assertTrue(hashMap6.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "{AK2!%XbBYPN";
      JSONTokener jSONTokener0 = new JSONTokener("{AK2!%XbBYPN");
      String string1 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = " of ";
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (double) 1253);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5691529462031188
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Double double0 = new Double(721.4395630670451);
      String[] stringArray0 = new String[2];
      String string0 = ",";
      Double.sum(721.4395630670451, 0.0);
      Double.sum((-1452.37), 721.4395630670451);
      stringArray0[0] = ",";
      Double.min((-1.0), (-1.0));
      stringArray0[1] = "wheel.json.JSONObject$1";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.keys();
      String string1 = null;
      Float float0 = new Float(Double.NaN);
      Double.sum((-691.28F), 831.07629);
      Float.max((-334.39465F), (-691.28F));
      Double.min(721.4395630670451, Double.NaN);
      try { 
        JSONObject.valueToString(float0, 1478, 1478);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.317688301004166
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Float float0 = new Float((-990.009077037106));
      Float.min(0.0F, (-41.49F));
      Float.sum(0.0F, (-41.49F));
      Float.sum((-41.49F), (-41.49F));
      Float.min(1450.3F, (-82.98F));
      Float.max((-41.49F), (-41.49F));
      Float.max(1450.3F, 80.33158F);
      Float.min((-1591.2626F), (-470.1903F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float.max((-41.49F), 80.33158F);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer.sum(1193, 2630);
      Integer.getInteger("qIcRW");
      Integer.getInteger("qIcRW", 3979);
      Integer.getInteger("qIcRW", (Integer) null);
      Float float1 = new Float((double) (-470.1903F));
      linkedList0.add(float1);
      linkedList0.add(float1);
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      linkedList2.iterator();
      Float float2 = new Float((double) 80.33158F);
      linkedList0.add(float0);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Float float3 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt("Wiz5ZWs", float3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.2876747368745467
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.accumulate("", hashMap0);
      hashMap0.put(",\n", ",\n");
      hashMap0.put("ic@CLR2xuRs", "sZQD[^*oJN");
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      Float float0 = new Float(0.0);
      HashMap<String, Float> hashMap2 = new HashMap<String, Float>();
      hashMap2.put((String) null, float0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      Integer integer0 = new Integer(128);
      Boolean boolean0 = new Boolean("0");
      Float float1 = new Float((double) 128);
      JSONObject jSONObject3 = jSONObject2.put("Vnv)g_S6;<bO)L", (Object) float1);
      jSONObject3.putOpt("istoString", "");
      jSONObject0.optString((String) null);
      jSONObject3.optDouble(",gq");
      jSONObject0.optString("0", (String) null);
      Integer.getInteger((String) null);
      long long0 = jSONObject1.optLong("istoString");
      assertEquals(3, jSONObject1.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put(jSONObject0, boolean0);
      jSONObject0.opt("qfivw\"3O$&!TiaV");
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.52827682114115
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[1];
      stringArray0[0] = " of ";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      Byte byte0 = new Byte((byte) (-67));
      String string0 = "'CmpEK`t6D23idZsg?";
      jSONObject1.optDouble("'CmpEK`t6D23idZsg?", (-450.0));
      JSONObject jSONObject2 = jSONObject1.putOpt("7\"Va!y(Aw]j#iGG", "'CmpEK`t6D23idZsg?");
      jSONObject0.optLong((String) null, (long) (byte) (-67));
      Boolean boolean0 = Boolean.FALSE;
      Double double0 = new Double((-450.0));
      JSONObject.getNames((Object) double0);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>(2693, 1.0F);
      jSONObject2.put("7\"Va!y(Aw]j#iGG", (Map) hashMap0);
      jSONObject1.optDouble(" of ", 13.901541359);
      jSONObject1.optInt("v5MI");
      jSONObject2.optString(" of ", " of ");
      jSONObject2.opt("");
      jSONObject2.optDouble(" of ");
      jSONObject0.put("Go*", (Object) null);
      jSONObject2.optLong("v5MI");
      try { 
        jSONObject1.getDouble("eq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"eq\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1839637727244874
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Float float0 = new Float((-990.009077037106));
      Float.min(0.0F, (-41.49F));
      Float.sum(0.0F, (-41.49F));
      Float.sum(335.70322F, (-41.49F));
      Float.min(1450.3F, 294.21323F);
      Float.max(173.56653F, 173.56653F);
      Float.min(3143.9307F, 335.70322F);
      Float.max(0.0F, 173.56653F);
      Float.min(1450.3F, (-41.49F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      linkedList0.iterator();
      Float float1 = new Float(874.75);
      Float.sum((-41.49F), (-41.49F));
      linkedList0.add(float1);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("DT", 0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.20619205063323187
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Double double0 = new Double(1677.5766);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      HashMap<Long, JSONObject> hashMap3 = new HashMap<Long, JSONObject>();
      HashMap<Long, JSONObject> hashMap4 = new HashMap<Long, JSONObject>(hashMap3);
      Float float0 = new Float(1677.5766);
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Float float0 = new Float(1.0);
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Short short0 = new Short((short)46);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put((String) null, (String) null);
      hashMap1.put("\f", "\r");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.computeIfPresent("\r", biFunction0);
      hashMap1.put("~", "true");
      JSONObject.valueToString((Object) null);
      Float float0 = new Float(967.4974F);
      assertEquals(967.4974F, (float)float0, 0.01F);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.3321915935065816
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "java.lang.Long@00000000030";
      jSONObject0.has("java.lang.Long@00000000030");
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@00000000030", (-1424L));
      jSONObject1.getLong("java.lang.Long@00000000030");
      JSONObject.valueToString("java.lang.Long@00000000030");
      jSONObject0.toString();
      jSONObject0.optDouble("%/n@&9O&HJAq*-$");
      jSONObject0.remove((String) null);
      jSONObject0.optLong("java.lang.Long@00000000030");
      try { 
        jSONObject0.getJSONObject("java.lang.Long@00000000030");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Long@00000000030\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Float.min(1450.3F, 1450.3F);
      Float.max(0.0F, 1450.3F);
      Float.min(1450.3F, 476.2395F);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.computeIfPresent("wheel.json.JSONObject", biFunction0);
      hashMap0.put("wheel.json.JSONObject", ",");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      Float float0 = new Float((-1288.0F));
      assertEquals((-1288.0F), (float)float0, 0.01F);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.3034884952192693
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has(".");
      JSONObject jSONObject1 = jSONObject0.put(".", 0L);
      String string0 = "";
      jSONObject1.append("", "");
      float float0 = (-1586.0F);
      Float float1 = new Float((-1586.0F));
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.4088131112702584
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Float float0 = new Float((-990.251210064757));
      Float.sum(0.0F, 3076.0F);
      Float float1 = new Float(3076.0F);
      Float.sum((-41.49F), (-41.49F));
      Float.sum(335.70322F, (-41.49F));
      Float.min((-41.49F), 294.21323F);
      Float.isFinite((-1519.515F));
      Float.max(173.56653F, 173.56653F);
      Float.min(3143.9307F, 335.70322F);
      Float.max(0.0F, 173.56653F);
      Float.min(335.70322F, (-41.49F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>(linkedList1);
      linkedList0.removeAll(linkedList2);
      linkedList0.add(float0);
      linkedList0.add(float0);
      linkedList0.iterator();
      Float float2 = new Float(874.75);
      linkedList0.add(float2);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(4, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{3AKr2/%BYPN");
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<Long, JSONObject> hashMap2 = new HashMap<Long, JSONObject>();
      HashMap<Long, JSONObject> hashMap3 = new HashMap<Long, JSONObject>(hashMap2);
      Float float0 = new Float(1519.239301793);
      String string0 = JSONObject.quote("RqhvfQc");
      assertEquals("\"RqhvfQc\"", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.098271368325381
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject.doubleToString(1508.081056);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0F);
      hashMap0.put("1508.081056", float0);
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject0.has("1508.081056");
      Float float1 = new Float((float) 1060);
      jSONObject0.optInt("0");
      Object object0 = JSONObject.NULL;
      Float float2 = new Float(1802.0);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) float2);
      jSONObject2.put("5gw|", (Map) hashMap0);
      hashMap0.put("", float1);
      jSONObject2.optDouble("1508.081056");
      double double0 = jSONObject1.optDouble("");
      assertEquals(2, jSONObject1.length());
      assertEquals(1802.0, double0, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.5631375748928056
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      String string0 = "toS";
      jSONObject0.optDouble("toS", 555.2);
      int int0 = 4267;
      JSONObject jSONObject1 = jSONObject0.put("getmin", 4267);
      Long.compare(0L, 4267);
      jSONObject0.getLong("getmin");
      jSONObject1.put("getmin", 765.87374711);
      Long.remainderUnsigned((-1L), (-1L));
      jSONObject0.optLong("getmin");
      jSONObject0.length();
      jSONObject0.optJSONArray("toS");
      jSONObject0.toString(2);
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.optJSONArray("getmin");
      JSONObject.doubleToString(555.2);
      try { 
        jSONObject0.getString("555.2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"555.2\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.768823925260512
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONObject0.optLong("Vn9ibH", 3778L);
      jSONArray0.join("");
      jSONArray0.optDouble((-1), 0.0);
      jSONArray0.put(11, 0L);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject.valueToString(" d%jc@*o");
      jSONObject0.optInt("`E", 11);
      JSONObject.valueToString(" d%jc@*o");
      jSONObject0.put("ih)!J{on.1%31", (long) 11);
      Float float0 = new Float(1.0F);
      Float float1 = new Float((float) (-3663));
      assertEquals((-3663.0F), (float)float1, 0.01F);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Float float0 = new Float((-1828.47F));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Q-|RE{i3yfL%>L0}qM";
      stringArray0[1] = "Q-|RE{i3yfL%>L0}qM";
      stringArray0[3] = "nn";
      JSONObject jSONObject0 = new JSONObject("Q-|RE{i3yfL%>L0}qM", stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt(stringArray0[2], "Q-|RE{i3yfL%>L0}qM");
      try { 
        jSONObject1.getJSONObject("Q-|RE{i3yfL%>L0}qM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Q-|RE{i3yfL%>L0}qM\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Float.max(1477.7966F, 0.0F);
      Float.max(1253, 1253);
      String[] stringArray0 = new String[4];
      stringArray0[1] = "[pPr#";
      stringArray0[2] = "[pPr#";
      stringArray0[3] = " of ";
      Integer integer0 = new Integer(1253);
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      boolean boolean0 = jSONObject0.isNull("l|&PAilQ`");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.9068339489698736
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      int int0 = (-3627);
      jSONObject0.toString((-3627), (-3627));
      String string0 = "8J9=:A";
      try { 
        jSONObject0.getBoolean("8J9=:A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8J9=:A\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.8618949342161422
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Byte byte0 = new Byte((byte)65);
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1131.29643469488);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.putOpt("0.00", (Object) null);
      Short short0 = new Short((short)1085);
      JSONObject jSONObject2 = jSONObject1.accumulate("", "");
      Double double1 = new Double((byte)65);
      JSONObject jSONObject3 = jSONObject1.append("7Ar_@FE)d,k4(8Qh", double1);
      jSONObject3.isNull("#BNdJ3a>1#)V");
      try { 
        jSONObject2.getDouble("+h~ (:q(r~R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+h~ (:q(r~R\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.8937882323911377
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{3AKr2/%BYPN");
      Byte byte0 = new Byte((byte)15);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{3AKr2/%BYPN";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.1839637727244874
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Float float0 = new Float((-990.009077037106));
      Float.sum(0.0F, 3076.0F);
      Float.min(3076.0F, (-41.49F));
      Float.sum((-41.49F), (-41.49F));
      Float.sum(335.70322F, (-41.49F));
      Float.isFinite((-1519.515F));
      Float.max(173.56653F, 173.56653F);
      Float.min(3143.9307F, 335.70322F);
      Float.max(0.0F, 173.56653F);
      Float.min(335.70322F, (-41.49F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.offer("|W=g@o8wL)UEqf[sI");
      LinkedList<String> linkedList2 = new LinkedList<String>(linkedList1);
      linkedList0.removeAll(linkedList2);
      linkedList0.add(float0);
      linkedList0.add(float0);
      linkedList0.iterator();
      Float float1 = new Float(874.75);
      linkedList0.add(float1);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(4, jSONObject1.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.8884699676219987
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Float.min(0.0F, (-41.49F));
      Float.sum(0.0F, (-41.49F));
      Float.sum((-41.49F), (-41.49F));
      Float.min(1450.3F, (-82.98F));
      Float.max(173.56653F, 173.56653F);
      JSONObject.quote("Q-|RE{i3yfL%>L0}qM");
      JSONObject jSONObject0 = new JSONObject((Object) "Q-|RE{i3yfL%>L0}qM");
      // Undeclared exception!
      jSONObject0.toString(836, 836);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.9998016181945404
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Boolean.logicalAnd(false, true);
      Byte byte0 = new Byte((byte)123);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("A JSONArray text must start with '['", (Object) null);
      String string0 = "iscompare";
      Double double0 = new Double((byte)123);
      JSONObject jSONObject2 = jSONObject0.append("iscompare", double0);
      String string1 = "getgetClass";
      jSONObject2.isNull("getgetClass");
      Byte byte1 = new Byte((byte) (-1));
      String string2 = " -,";
      JSONObject jSONObject3 = jSONObject1.putOpt(" -,", double0);
      Byte.compare((byte)123, (byte) (-1));
      try { 
        jSONObject3.put((String) null, (Object) "uayj_<&{lA^hjW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.1428074196753928
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Float.min((-141.0F), 0.0F);
      Short.toUnsignedLong((short)111);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.9117375332373359
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("E*x+~= RSn{v");
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(0);
      boolean boolean0 = jSONObject0.optBoolean("E*x+~= RSn{v", true);
      assertTrue(boolean0);
      
      double double0 = jSONObject0.optDouble("x0$o2v=hC5");
      assertEquals(Double.NaN, double0, 0.01);
      
      Float.sum(0.0F, (-452.99503F));
      Float.min(0, 0.0F);
      Float.max(335.70322F, 173.56653F);
      Float.min(202.051F, 0.0F);
      Float.max(157.55043F, (-452.99503F));
      Float.min(960.0F, 0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add((Float) null);
      linkedList0.iterator();
      Float float0 = new Float((double) (-452.99503F));
      Float.sum(3143.9307F, 202.051F);
      linkedList0.addLast(float0);
      Float float1 = new Float((-449.247249));
      linkedList0.add(float1);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.298395784155945
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "x0$o2v=hC5";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("E*x+~= RSn{v");
      Integer integer0 = new Integer(0);
      jSONObject0.optBoolean("E*x+~= RSn{v", false);
      jSONObject0.optDouble("x0$o2v=hC5");
      jSONObject0.names();
      jSONObject0.optString("x0$o2v=hC5", "__xDv2&2BpJD");
      Float float0 = new Float((double) 0);
      String string1 = ")Ja7q$$";
      jSONObject0.optJSONArray("ismin");
      jSONObject0.put("Bad value from toJSONString: ", false);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.539029479702722
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\rQ^*Tu:b-", false);
      jSONObject0.optInt("i%~!hZ");
      String string0 = ";/t\"wciERpD)F9M";
      try { 
        jSONObject0.getDouble(";/t\"wciERpD)F9M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";/t\\\"wciERpD)F9M\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1839637727244874
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Float float0 = new Float((-990.251210064757));
      Float.sum(0.0F, 3076.0F);
      Float float1 = new Float(3076.0F);
      Float.sum((-41.49F), (-41.49F));
      Float.sum(335.70322F, (-41.49F));
      Float.min((-41.49F), 294.21323F);
      Float.isFinite((-1519.515F));
      Float.max(173.56653F, 173.56653F);
      Float.min(3143.9307F, 335.70322F);
      Float.max(0.0F, 173.56653F);
      Float.min(335.70322F, (-41.49F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>(linkedList1);
      linkedList0.removeAll(linkedList2);
      linkedList0.add(float0);
      linkedList0.add(float0);
      linkedList0.iterator();
      Float float2 = new Float(874.75);
      linkedList0.add(float2);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("du:T*11%?z0~agp;", true);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.751915969031122
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.accumulate("", hashMap0);
      jSONObject2.optInt("", (-2180));
      String string0 = ",\n";
      hashMap0.put(",\n", ",\n");
      String string1 = "getnotify";
      Long.valueOf(3025L);
      Object object0 = JSONObject.NULL;
      jSONObject2.putOpt("false", object0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      HashMap<String, Float> hashMap2 = new HashMap<String, Float>();
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5507721843811002
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Byte byte0 = new Byte((byte)65);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("#H3ya$,A*vV#Q&", (int) (byte)65);
      Double double0 = new Double(1131.29643469488);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Double double1 = new Double(1.0);
      Double.min((-1562.0), 0.0);
      jSONObject0.putOpt("7Ar_@FE)d,k4(8Qh", double1);
      Short short0 = new Short((byte)65);
      HashMap<Long, JSONObject> hashMap1 = new HashMap<Long, JSONObject>();
      HashMap<Long, JSONObject> hashMap2 = new HashMap<Long, JSONObject>();
      HashMap<Long, JSONObject> hashMap3 = new HashMap<Long, JSONObject>(hashMap2);
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)294);
      String string0 = JSONObject.valueToString(jSONObject0, 21, 21);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5518880935662318
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("E*x+~= RSn{v");
      Integer integer0 = new Integer(0);
      jSONObject0.optDouble("x0$o2v=hC5");
      jSONObject0.optString("x0$o2v=hC5", "__xDv2&2BpJD");
      Float float0 = new Float((double) 0);
      Float.sum(0.0F, 0);
      Float.min(1295.0F, 0);
      Float.max(0.0F, 0.0F);
      Float.min(1295.0F, 0.0F);
      Float.max(0.0F, 0);
      Float.min(3143.9307F, 0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      linkedList0.add(float0);
      linkedList0.iterator();
      Float float1 = new Float((double) 0.0F);
      Float.sum((-2113.0942F), 173.56653F);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      linkedList1.add(float1);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.2079986139997008
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.accumulate("", hashMap0);
      hashMap0.put(",\n", ",\n");
      hashMap0.put("ic@CLR2xuRs", "\f");
      hashMap0.put("^!,3psy*[yFWj/", "");
      jSONObject0.optInt("000");
      JSONObject.valueToString("\f");
      jSONObject0.optDouble("\"java.lang.String@0000000007\"", (-1767.542834037));
      jSONObject0.optInt("000");
      jSONObject0.optString((String) null, "");
      jSONObject0.opt("");
      jSONObject1.optDouble("X(O");
      try { 
        jSONObject1.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Float float0 = new Float((-990.009077037106));
      Float.min(0.0F, (-41.49F));
      Float.sum(0.0F, (-41.49F));
      Float.sum((-41.49F), (-41.49F));
      Float.min(1450.3F, (-82.98F));
      Float.max(173.56653F, 173.56653F);
      Float.max(1450.3F, 80.33158F);
      Float.min((-1591.2626F), (-470.1903F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(80);
      Integer.sum(6, 80);
      linkedList0.iterator();
      Float float1 = new Float((-1037.293375299097));
      Float.sum((-1968.2211F), (-82.98F));
      Float float2 = new Float((double) 1450.3F);
      linkedList0.add(float2);
      Float float3 = new Float((-82.98F));
      JSONObject jSONObject0 = new JSONObject(float3);
      String string0 = jSONObject0.optString("o4");
      assertEquals(3, jSONObject0.length());
      assertEquals("", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.9615830579596794
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalOr(true, true);
      Boolean.logicalAnd(false, true);
      Boolean.logicalXor(true, true);
      Boolean.logicalAnd(true, true);
      Byte byte0 = new Byte((byte) (-8));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("A JSONArray text must start with '['", boolean0);
      jSONObject0.isNull("A JSONArray text must start with '['");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "uayj_<&{lA^hjW";
      Byte byte1 = new Byte((byte) (-8));
      JSONObject jSONObject1 = jSONObject0.putOpt("uayj_<&{lA^hjW", byte1);
      jSONObject1.optDouble("uayj_<&{lA^hjW", (-1135.3593102175487));
      jSONObject1.put("getlogicalXor", (Object) "uayj_<&{lA^hjW");
      stringArray0[1] = "A JSONArray text must start with '['";
      stringArray0[2] = "A JSONArray text must start with '['";
      stringArray0[3] = "uayj_<&{lA^hjW";
      stringArray0[4] = "uayj_<&{lA^hjW";
      stringArray0[5] = "uayj_<&{lA^hjW";
      stringArray0[6] = "A JSONArray text must start with '['";
      stringArray0[7] = "A JSONArray text must start with '['";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject2.getJSONObject("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text must start with '['\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Float float0 = new Float((-990.009077037106));
      Float.min(0.0F, (-41.49F));
      Float.sum(0.0F, (-41.49F));
      Float.sum((-41.49F), (-41.49F));
      Float.min(1450.3F, (-82.98F));
      Float.max(173.56653F, 173.56653F);
      Float.max(1450.3F, 80.33158F);
      Float.min((-1591.2626F), (-470.1903F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(80);
      Integer.sum(6, 80);
      linkedList0.iterator();
      Float float1 = new Float((-1037.293375299097));
      Float float2 = new Float((-1591.2626F));
      linkedList0.add(float2);
      Float.sum((-1968.2211F), (-82.98F));
      Float float3 = new Float((double) 1450.3F);
      linkedList0.add(float3);
      Float float4 = new Float((-82.98F));
      JSONObject jSONObject0 = new JSONObject(float4);
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.valueToString((Object) null, 86, 6);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Float float0 = new Float(141.8284283);
      Float.isFinite(0.0F);
      Float float1 = new Float((-1.0F));
      Float.isFinite((-1.0F));
      Float.max((-1.0F), (-1.0F));
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      linkedList0.pollLast();
      LinkedList<JSONArray> linkedList2 = new LinkedList<JSONArray>();
      linkedList1.containsAll(linkedList0);
      Float float0 = new Float((-1493.29F));
      UnaryOperator<JSONArray> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<JSONArray> unaryOperator1 = UnaryOperator.identity();
      linkedList2.replaceAll(unaryOperator1);
      Float float1 = new Float((-2357.392F));
      linkedList1.add(float1);
      Float.sum((-1493.29F), (-1696.1167F));
      Float float2 = new Float(0.0);
      Float float3 = new Float((-1075.6025F));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "islogicalXor";
      stringArray0[1] = "has";
      stringArray0[2] = "Null key.";
      JSONObject jSONObject0 = new JSONObject(unaryOperator0, stringArray0);
      try { 
        jSONObject0.getJSONArray("iscompareTo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iscompareTo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.3955086699999906
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalOr(true, true);
      Boolean.logicalAnd(false, true);
      Boolean.logicalXor(true, true);
      Boolean.logicalAnd(true, true);
      Byte byte0 = new Byte((byte) (-8));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("A JSONArray text must start with '['", (Object) null);
      jSONObject1.append("A JSONArray text must start with '['", boolean0);
      jSONObject1.isNull("A JSONArray text must start with '['");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "uayj_<&{lA^hjW";
      Byte byte1 = new Byte((byte) (-8));
      JSONObject jSONObject2 = jSONObject0.putOpt("uayj_<&{lA^hjW", byte1);
      Byte.compare((byte)61, (byte) (-8));
      jSONObject2.put("getlogicalXor", (Object) "uayj_<&{lA^hjW");
      stringArray0[1] = "A JSONArray text must start with '['";
      stringArray0[2] = "A JSONArray text must start with '['";
      stringArray0[3] = "uayj_<&{lA^hjW";
      stringArray0[4] = "uayj_<&{lA^hjW";
      stringArray0[5] = "uayj_<&{lA^hjW";
      stringArray0[6] = "A JSONArray text must start with '['";
      stringArray0[7] = "A JSONArray text must start with '['";
      jSONObject0.toString(88, (int) (byte) (-8));
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      try { 
        jSONObject3.getJSONObject("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text must start with '['\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Float float0 = new Float((-989.3223265682343));
      Float.min(3076.0F, (-41.49F));
      float float1 = new Float((-41.49F));
      Float.sum(335.70322F, (-41.49F));
      Float.min((-41.49F), 294.21323F);
      Float.isFinite((-1519.515F));
      Float.max(173.56653F, 173.56653F);
      Float.min(3143.9307F, 335.70322F);
      Float.max(0.0F, 173.56653F);
      Float.min(335.70322F, (-41.49F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("getisNaN");
      LinkedList<String> linkedList2 = new LinkedList<String>(linkedList1);
      linkedList0.removeAll(linkedList2);
      linkedList0.add(float0);
      linkedList0.add(float0);
      linkedList0.iterator();
      Float float2 = new Float((-1.0));
      linkedList0.add(float0);
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("getisNaN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getisNaN\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Double double0 = new Double(1677.5766);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      HashMap<Long, JSONObject> hashMap3 = new HashMap<Long, JSONObject>();
      HashMap<Long, JSONObject> hashMap4 = new HashMap<Long, JSONObject>(hashMap3);
      Float float0 = new Float(1677.5766);
      String string0 = JSONObject.quote("{3AKr2/%BYPN");
      assertEquals("\"{3AKr2/%BYPN\"", string0);
      
      String string1 = jSONObject0.toString(46, (-10384350));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.4209375106292708
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("ROdK9RZ", 887L);
      int int0 = 1520;
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optInt("ROdK9RZ");
      jSONObject0.toString(1520, 1520);
      jSONObject1.optInt("`E", 1520);
      int int1 = (-3663);
      jSONObject0.toString((-3663), (-3663));
      JSONObject.valueToString(object0);
      try { 
        jSONObject0.getLong("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.2222669235381565
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("m{", (Object) null);
      hashMap0.put((String) null, (Object) null);
      Short short0 = new Short((short)46);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (short)46, (-844));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject.quote(" mR/k3PN/");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      linkedList1.containsAll(linkedList0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      LinkedList<JSONArray> linkedList2 = new LinkedList<JSONArray>();
      Float.min((-2608.455F), (-1.0F));
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      Float float0 = new Float((-2608.455F));
      linkedList1.add(float0);
      linkedList1.iterator();
      Float float1 = new Float((-1.0));
      float float2 = Float.sum((-1.0F), 653.0F);
      Float float3 = new Float((double) (-1.0F));
      Float float4 = new Float(561.379F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.7214023220140038
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-122));
      JSONObject jSONObject1 = jSONObject0.accumulate(" mR/k3PN/", byte0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("iqwait", " mR/k3PN/");
      JSONObject.valueToString(jSONObject1);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      HashMap<String, Float> hashMap2 = new HashMap<String, Float>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap1);
      HashMap<String, Float> hashMap3 = new HashMap<String, Float>();
      HashMap<String, Object> hashMap4 = new HashMap<String, Object>();
      HashMap<Long, JSONObject> hashMap5 = new HashMap<Long, JSONObject>();
      HashMap<Long, JSONObject> hashMap6 = new HashMap<Long, JSONObject>(hashMap5);
      Float float0 = new Float(0.0F);
      Float float1 = new Float((float) (byte) (-122));
      assertNotEquals((float)float1, (float)float0, 0.01F);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.114725965600204
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has("");
      JSONObject jSONObject1 = jSONObject0.put("", (double) 0L);
      jSONObject0.getDouble("");
      jSONObject1.getInt("");
      jSONObject0.optDouble("");
      JSONObject jSONObject2 = jSONObject0.putOpt((String) null, "");
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      HashMap<Double, Integer> hashMap2 = new HashMap<Double, Integer>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap1);
      jSONObject3.optInt("0");
      try { 
        jSONObject2.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.784617558418788
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Float.min((-141.0038F), (-1.55878F));
      Short.toUnsignedLong((short)111);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      linkedList1.offerLast((JSONObject) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      Float float0 = new Float((-1.55878F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject.valueToString(jSONObject0, (short)111, 34);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.6824993675743036
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Float float0 = new Float((-990.009077037106));
      Float.sum(0.0F, 3076.0F);
      Float.min(0.0F, (-41.49F));
      Float.sum(0.0F, (-41.49F));
      Float.sum(335.70322F, (-41.49F));
      Float.min((-41.49F), 294.21323F);
      Float.isFinite((-1519.515F));
      Float.max(173.56653F, 173.56653F);
      Float.min(3143.9307F, 335.70322F);
      Float.max(0.0F, 173.56653F);
      Float.min(335.70322F, (-41.49F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      linkedList0.add(float0);
      linkedList0.add((Float) null);
      linkedList0.iterator();
      Float float1 = new Float(874.75);
      Float.isFinite((-4611.2417F));
      Float.sum((-41.49F), (-318.5F));
      linkedList0.add(float1);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      int int0 = jSONObject0.optInt("ha");
      assertEquals(4, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Integer integer0 = new Integer(47);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ss";
      Integer.min(47, 47);
      Integer.toUnsignedString(47);
      stringArray0[1] = "t.q:Lp'hsnx/BN{g$I";
      stringArray0[2] = "}_YP#H[M)FUVXO";
      String string0 = "\\u";
      stringArray0[3] = string0;
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      try { 
        jSONObject0.getInt("DP n6oGnJ;>a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"DP n6oGnJ;>a\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject.quote("Q-|RE{i3yfL%>L0}qM");
      String string0 = JSONObject.quote("\"Q-|RE{i3yfL%>L0}qM\"");
      assertEquals("\"\\\"Q-|RE{i3yfL%>L0}qM\\\"\"", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Float float0 = new Float((-990.009077037106));
      Float.min(0.0F, (-41.49F));
      Float.sum(0.0F, (-41.49F));
      Float.sum(335.70322F, (-41.49F));
      Float.min(1450.3F, 294.21323F);
      Float.max(173.56653F, 173.56653F);
      Float.min(3143.9307F, 335.70322F);
      Float.max(0.0F, 173.56653F);
      Float.min(1450.3F, (-41.49F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      linkedList0.iterator();
      Float float1 = new Float(874.75);
      Float.sum((-41.49F), (-318.5F));
      linkedList0.add(float1);
      JSONObject jSONObject0 = new JSONObject(float1);
      Object object0 = new Object();
      jSONObject0.put("it", object0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte byte0 = (byte)102;
      Byte byte1 = new Byte((byte)102);
      String string0 = "";
      jSONObject0.put("", (Object) byte1);
      String string1 = "";
      jSONObject0.remove("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(byte1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.033108223397588
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Float float0 = new Float((-990.009077037106));
      Float.min(0.0F, (-41.49F));
      Float.sum(0.0F, (-41.49F));
      Float.sum((-41.49F), (-41.49F));
      Integer.compare(160, (-1832));
      Float.isFinite(0.0F);
      Float.sum(1, 0.0F);
      Float.min(1.0F, (-41.49F));
      StringWriter stringWriter0 = new StringWriter(4);
      Float float1 = new Float((-2423.8F));
      JSONObject jSONObject0 = new JSONObject(float1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "n $|hf;";
      stringArray0[1] = "n $|hf;";
      stringArray0[2] = "n $|hf;";
      stringArray0[3] = "n $|hf;";
      stringArray0[4] = "n $|hf;";
      stringArray0[5] = "n $|hf;";
      stringArray0[6] = "n $|hf;";
      stringArray0[7] = "n $|hf;";
      stringArray0[8] = "n $|hf;";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      jSONObject0.write(stringWriter0);
      jSONObject1.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.8008293981022103
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Boolean boolean0 = new Boolean("x0$o2v=hC5");
      JSONObject jSONObject0 = new JSONObject((Object) "Bad value from toJSONString: ");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("ROdK9RZ", 887L);
      assertEquals(2, jSONObject0.length());
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      Float float0 = new Float((-1653.7617F));
      linkedList2.add(float0);
      linkedList2.iterator();
      Float.sum((-1653.7617F), 0.0F);
      Float float1 = new Float((-742.60934));
      Byte byte0 = new Byte((byte)123);
      JSONObject jSONObject1 = new JSONObject(byte0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.682661330575521
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = new Boolean(true);
      Boolean boolean2 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = "J-WW= knje>{xwe#'/F";
      JSONObject jSONObject1 = jSONObject0.accumulate("J-WW= knje>{xwe#'/F", "J-WW= knje>{xwe#'/F");
      jSONObject1.remove((String) null);
      try { 
        jSONObject1.getInt("^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.8891591637540217
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalOr(true, true);
      Boolean.logicalAnd(false, true);
      Boolean.logicalXor(true, true);
      Byte byte0 = new Byte((byte) (-8));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("A JSONArray text must start with '['", (Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("Or3idD+Tg$^Rm[4");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Or3idD+Tg$^Rm[4
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.1752045970807579
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      Boolean boolean1 = new Boolean(true);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.containsAll(linkedList1);
      Comparator<Float> comparator0 = (Comparator<Float>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      LinkedList<JSONArray> linkedList2 = new LinkedList<JSONArray>();
      float float0 = new Float((-1.0F));
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      Float float1 = new Float((-2608.455F));
      linkedList0.add(float1);
      linkedList3.iterator();
      Float float2 = new Float((double) (-1.0F));
      Float.sum((-1.0F), (-1674.766F));
      Float float3 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(boolean1);
      jSONObject0.put("pa", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Float.min((-141.0F), 0.0F);
      Short.toUnsignedLong((short)111);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      jSONObject0.put("Bad value fkom t)JSONSNrin: ", (Collection) linkedList2);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Short short0 = new Short((short)40);
      HashMap<Long, JSONObject> hashMap1 = new HashMap<Long, JSONObject>();
      HashMap<Long, JSONObject> hashMap2 = new HashMap<Long, JSONObject>(hashMap1);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.optBoolean("gdP83");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Float float0 = new Float((-990.009077037106));
      Float.min(0.60292375F, (-41.49F));
      Float.sum(0.60292375F, (-41.49F));
      Float.sum((-40.887077F), (-41.49F));
      Float.min(1450.3F, (-82.377075F));
      Float.max(173.56653F, 173.56653F);
      Float.max(1450.3F, 80.33158F);
      Float.min((-1591.2626F), (-470.1903F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(80);
      Integer.sum(6, 80);
      linkedList0.iterator();
      Float float1 = new Float((-1037.293375299097));
      Float float2 = new Float((-1591.2626F));
      Float.min(1450.3F, (-1.0F));
      linkedList0.add(float2);
      Float.sum(1450.3F, (-82.377075F));
      Float float3 = new Float((double) 1450.3F);
      linkedList0.add(float3);
      Float float4 = new Float((-82.377075F));
      JSONObject jSONObject0 = new JSONObject(float4);
      Byte byte0 = new Byte((byte)81);
      jSONObject0.append("qn3yZi!=@d5]]llH]KE", byte0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.5149029225891493
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalAnd(true, true);
      Boolean boolean1 = new Boolean(true);
      Boolean boolean2 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Boolean.logicalXor(false, true);
      Boolean.logicalAnd(true, true);
      String string0 = "J-WW= knje>{xwe#'/F";
      jSONObject0.accumulate("J-WW= knje>{xwe#'/F", "J-WW= knje>{xwe#'/F");
      try { 
        jSONObject0.append("J-WW= knje>{xwe#'/F", boolean2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[J-WW= knje>{xwe#'/F] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Float float0 = new Float((-990.009077037106));
      Float.min(0.0F, (-41.49F));
      Float.sum(335.70322F, (-41.49F));
      Float.min(1450.3F, 294.21323F);
      Float.max(173.56653F, 173.56653F);
      Float.min(3143.9307F, 335.70322F);
      Integer integer0 = new Integer((-1247));
      Integer integer1 = new Integer(1870);
      Integer.getInteger("is(?~j/C+l", integer1);
      Integer integer2 = Integer.getInteger("is(?~j/C+l", (-1080));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer2);
      linkedList0.add(integer1);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      linkedList2.containsAll(linkedList0);
      linkedList1.removeAll(linkedList2);
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      linkedList1.iterator();
      Float float1 = new Float(0.0F);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.3116229085515019
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject.quote("J`x/IR63z{;;xZB");
      long long0 = (-680L);
      Long long1 = new Long((-680L));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[2] = "\"J`x/IR63z{;;xZB\"";
      stringArray0[2] = "\"J`x/IR63z{;;xZB\"";
      stringArray0[3] = "\"J`x/IR63z{;;xZB\"";
      JSONObject jSONObject0 = new JSONObject(long1, stringArray0);
      Boolean boolean0 = new Boolean(true);
      int int0 = (-1688);
      jSONObject0.optDouble("\"J`x/IR63z{;;xZB\"", 4264.46032209);
      String string0 = "CO]KH/.z&n";
      jSONObject0.optInt((String) null);
      String string1 = ";{YZx`dd'5|D20H6;F1";
      JSONTokener jSONTokener0 = new JSONTokener("\"J`x/IR63z{;;xZB\"");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"J`x/IR63z{;;xZB\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.8866967846580784
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{3AKr2/%XbBYPN");
      Byte byte0 = new Byte((byte)15);
      String[] stringArray0 = new String[1];
      Byte.compare((byte)2, (byte)2);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(91);
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      HashMap<String, Short> hashMap2 = new HashMap<String, Short>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap2);
      HashMap<String, Float> hashMap3 = new HashMap<String, Float>();
      HashMap<String, Object> hashMap4 = new HashMap<String, Object>();
      HashMap<Long, JSONObject> hashMap5 = new HashMap<Long, JSONObject>();
      HashMap<Long, JSONObject> hashMap6 = new HashMap<Long, JSONObject>(hashMap5);
      assertTrue(hashMap6.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.6094379124341
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      jSONObject0.append(",\n", (Object) null);
      Float float0 = new Float((-1595.348F));
      float float1 = Float.sum(1457.5719F, 1.0F);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      jSONObject0.optJSONArray("k#ZSXY~");
      HashMap<String, Float> hashMap2 = new HashMap<String, Float>();
      HashMap<String, Float> hashMap3 = new HashMap<String, Float>();
      HashMap<String, Float> hashMap4 = new HashMap<String, Float>();
      hashMap4.put((String) null, float0);
      HashMap<Long, JSONObject> hashMap5 = new HashMap<Long, JSONObject>();
      Float float2 = new Float(1.0F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.5294599036351055
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Long long0 = new Long((-1L));
      Float.min((-1804.0F), 0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float.min((-1137.3319F), (-1L));
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      Float float0 = new Float(0.0F);
      linkedList1.add(float0);
      linkedList1.stream();
      Function<Integer, Integer> function0 = Function.identity();
      LinkedList<JSONArray> linkedList2 = new LinkedList<JSONArray>();
      UnaryOperator<JSONArray> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      linkedList2.replaceAll(unaryOperator0);
      Float.sum((-1L), 1.0F);
      Float float1 = new Float((double) (-1804.0F));
      linkedList0.add(float0);
      Float float2 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject(function0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Float float0 = new Float(1.0);
      Float float1 = new Float((-570.3F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      Float float2 = new Float(1.0);
      linkedList0.add(float2);
      linkedList0.containsAll(linkedList1);
      linkedList0.add(float1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      linkedList0.sort(comparator0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "opt";
      stringArray0[1] = "\t";
      stringArray0[2] = "x9]j<h[TIj";
      stringArray0[3] = "ap";
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      try { 
        jSONObject0.getJSONObject("x9]j<h[TIj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"x9]j<h[TIj\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.3721361080536072
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Float float0 = new Float((-990.251210064757));
      Float.sum(0.0F, 3076.0F);
      Float float1 = new Float(3076.0F);
      Float.sum((-41.49F), (-41.49F));
      Float.sum(335.70322F, (-41.49F));
      Float.min((-41.49F), 294.21323F);
      Float.isFinite((-1519.515F));
      Float.max(173.56653F, 173.56653F);
      Float.min(3143.9307F, 335.70322F);
      Float.max(0.0F, 173.56653F);
      Float.min(335.70322F, (-41.49F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>(linkedList1);
      linkedList0.removeAll(linkedList2);
      linkedList0.add(float0);
      linkedList0.add(float0);
      Iterator<Float> iterator0 = linkedList0.iterator();
      Float float2 = new Float(874.75);
      linkedList0.add(float2);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.accumulate("#^1.-[l/SiMg", iterator0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      HashMap<String, Short> hashMap2 = new HashMap<String, Short>();
      HashMap<String, Float> hashMap3 = new HashMap<String, Float>();
      HashMap<Long, JSONObject> hashMap4 = new HashMap<Long, JSONObject>();
      assertTrue(hashMap4.isEmpty());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Float float0 = new Float((-990.009077037106));
      Float.max((-41.49F), (-359.28052F));
      Float.min(1395.0F, (-1.0F));
      Float.min(0.0F, (-41.49F));
      Float.sum(0.0F, (-41.49F));
      Float.sum(335.70322F, (-41.49F));
      Float.min(1450.3F, 294.21323F);
      Float.max(173.56653F, 173.56653F);
      Float.min(3143.9307F, 335.70322F);
      Float.min((-41.49F), 1450.3F);
      Float.max(0.0F, 173.56653F);
      Float.min(1450.3F, (-41.49F));
      Float float1 = new Float(2546.5F);
      Float.isFinite((-1.0F));
      Float float2 = new Float(173.56653F);
      Float.sum((-41.49F), (-318.5F));
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.8018185525433373
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Float float0 = new Float(141.8284283);
      Float float1 = new Float(349.71F);
      JSONObject.doubleToString(349.71F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      linkedList0.containsAll(linkedList1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      linkedList1.add(jSONArray0);
      Float float2 = new Float(349.71F);
      UnaryOperator<JSONArray> unaryOperator0 = UnaryOperator.identity();
      linkedList1.replaceAll(unaryOperator0);
      linkedList0.add(float2);
      Comparator<Float> comparator0 = (Comparator<Float>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Float> comparator1 = (Comparator<Float>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator1);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      Float float3 = new Float(141.8284283);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "349.7099914550781";
      stringArray0[1] = "349.7099914550781";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optDouble("", (-1490.0));
      try { 
        jSONObject0.getDouble("B?eD{Rt,g;_>`tHW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"B?eD{Rt,g;_>`tHW\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.2110688711446103
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      jSONObject0.accumulate("{", hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("{", "{");
      jSONObject0.optLong((String) null, (-2129L));
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      int int0 = 160;
      jSONArray0.put(160, (-1373L));
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.357002632598951
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("E*x+~= RSn{v");
      Integer integer0 = new Integer(0);
      jSONObject0.optLong("E*x+~= RSn{v", (long) 0);
      jSONObject0.optBoolean("E*x+~= RSn{v", true);
      jSONObject0.optDouble("x0$o2v=hC5");
      jSONObject0.names();
      jSONObject0.optString("x0$o2v=hC5", "__xDv2&2BpJD");
      Float float0 = new Float((double) 0);
      jSONObject0.optJSONArray("ismin");
      jSONObject0.put("Bad value from toJSONString: ", false);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.6283356526043842
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ".";
      jSONObject0.has(".");
      JSONObject jSONObject1 = jSONObject0.put(".", 0L);
      jSONObject1.getLong(".");
      jSONObject0.optDouble(".", (double) 0L);
      Double.min(0.0, 0L);
      String string1 = "get";
      try { 
        jSONObject1.getLong("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.0851886129676505
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Float float0 = new Float((-990.009077037106));
      Float.min(0.0F, (-41.49F));
      Float.sum(335.70322F, (-41.49F));
      Float.min(1450.3F, 294.21323F);
      Float.max(173.56653F, 173.56653F);
      Float.min(3143.9307F, 335.70322F);
      Float.min(0.0F, 0.0F);
      Float.max(0.0F, 80.33158F);
      String string0 = JSONObject.valueToString(float0, 43, 43);
      assertNotNull(string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.0900596587107838
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Double double0 = new Double(0L);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Float float0 = new Float((-990.009077037106));
      Float.min(0.0F, (-41.49F));
      Float.sum(0.0F, (-41.49F));
      Float.sum((-41.49F), (-41.49F));
      Float.min(1484.3691F, (-82.98F));
      Float.max((-41.49F), (-41.49F));
      Float.max(1484.3691F, 80.33158F);
      Float.min((-1591.2626F), (-470.1903F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float.max((-41.49F), 80.33158F);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer.sum(1193, 2630);
      Integer.getInteger("qIcRW");
      linkedList1.add((Integer) null);
      linkedList1.offer((Integer) null);
      Integer.getInteger("qIcRW", 3979);
      Integer.getInteger("qIcRW", (Integer) null);
      Integer integer0 = new Integer(1193);
      Integer integer1 = new Integer(3823);
      linkedList1.add(integer1);
      linkedList1.add((Integer) null);
      String string0 = JSONObject.quote("Expected '");
      assertEquals("\"Expected '\"", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.991509361356614
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      jSONObject0.put("}LTb+TZTfb", (Map) hashMap0);
      stringArray0[0] = "Jp)HM*pk&)AzfS:#HY$";
      stringArray0[1] = "wheel.json.JSONObject";
      stringArray0[2] = "Jp)HM*pk&)AzfS:#HY$";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = "?/B1aj";
      HashMap<JSONArray, Object> hashMap1 = new HashMap<JSONArray, Object>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "wheel.json.JSONObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.7835547417063715
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      jSONObject1.accumulate("", hashMap0);
      hashMap0.put(",\n", ",\n");
      int int0 = 123;
      try { 
        jSONObject0.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.6824993675743036
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Float float0 = new Float((-990.009077037106));
      Float.min(0.0F, (-41.49F));
      Float.sum(0.0F, (-41.49F));
      Float.sum(335.70322F, (-41.49F));
      Float.min(1450.3F, 294.21323F);
      Float.max(173.56653F, 173.56653F);
      Float.min(3143.9307F, 335.70322F);
      Float.max(0.0F, 173.56653F);
      Float.min(1450.3F, (-41.49F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add(float0);
      linkedList0.iterator();
      Float float1 = new Float(874.75);
      Float.min(0.0F, 2848.0F);
      Float.sum((-41.49F), (-318.5F));
      linkedList0.add(float1);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.optDouble("bo");
      try { 
        jSONObject0.getInt("bo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"bo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Float.sum(3153.9167F, 4110.1284F);
      Integer.getInteger("");
      Integer integer0 = Integer.getInteger("", 3979);
      Integer.getInteger("sp", integer0);
      Integer integer1 = Integer.getInteger("J'>?>dCBFMPQY'", 1802);
      Integer integer2 = new Integer(929);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Integer integer3 = new Integer(3979);
      linkedList0.add(integer3);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = null;
      integerArray0[1] = integer1;
      integerArray0[2] = null;
      integerArray0[3] = integer2;
      integerArray0[4] = integer2;
      integerArray0[5] = integer2;
      linkedList1.toArray(integerArray0);
      linkedList1.removeAll(linkedList0);
      linkedList1.pollFirst();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{3AKr2,%BYPN");
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong("{3AKr2,%BYPN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{3AKr2,%BYPN\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Float.sum(3153.9167F, 4110.1284F);
      Integer.getInteger("");
      Integer integer0 = Integer.getInteger("", 3979);
      Integer.getInteger("sp", integer0);
      Integer integer1 = Integer.getInteger("J'>?>dCBFMPQY'", 1802);
      Integer integer2 = new Integer(929);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Integer integer3 = new Integer(3979);
      linkedList0.add(integer3);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = null;
      integerArray0[1] = integer1;
      Float.sum(0.0F, 1802);
      Float float0 = new Float((double) 929);
      linkedList1.add(float0);
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.2171062112294098
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Boolean boolean0 = Boolean.TRUE;
      Boolean.compare(false, true);
      hashMap0.putIfAbsent("g+n~?4*}UE", boolean0);
      Short short0 = new Short((short)46);
      String string0 = JSONObject.valueToString(hashMap0, (short)46, (-844));
      assertNotNull(string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.2963611597910563
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Double double0 = new Double(1677.5766);
      Float.max((-612.294F), (-612.294F));
      Float.min(3057.0F, 80.33158F);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer0 = new Integer(80);
      Integer.sum(61, (-1518));
      String string0 = "\\u";
      Integer integer1 = new Integer((-1247));
      Integer.getInteger(string0, integer1);
      Integer.getInteger("no", 102);
      linkedList2.add(integer1);
      linkedList2.add((Integer) null);
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      linkedList3.removeAll(linkedList0);
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      linkedList4.iterator();
      Float float0 = new Float((float) (-1457));
      JSONObject.numberToString(float0);
      LinkedList<Float> linkedList5 = new LinkedList<Float>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \\u
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.2446725381717776
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalXor(true, true);
      Boolean.logicalAnd(true, true);
      Byte byte0 = new Byte((byte) (-8));
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Integer.sum(2843, (byte) (-8));
      String string0 = "\\u";
      Integer integer0 = new Integer((-1247));
      Integer.getInteger(string0, integer0);
      Integer.getInteger("false", 8192);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer1 = new Integer(2650);
      linkedList1.add(integer1);
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      linkedList2.removeAll(linkedList1);
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      linkedList3.iterator();
      Float float0 = new Float((float) 8192);
      JSONObject.numberToString(integer1);
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      assertTrue(linkedList4.equals((Object)linkedList2));
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float((float) 1060);
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      HashMap<String, Float> hashMap2 = new HashMap<String, Float>();
      hashMap1.put("'/&|MHOh[j;oqs", (Float) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "'/&|MHOh[j;oqs";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
