/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 22:38:01 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1979585089289455
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      Integer integer1 = new Integer((-2857));
      Integer integer2 = new Integer(117);
      Integer integer3 = new Integer((-2857));
      Integer.toUnsignedString(105);
      Integer.toUnsignedString(42);
      Integer integer4 = new Integer((-1320));
      Integer.toUnsignedLong((-1918));
      Integer.divideUnsigned(2, 2);
      Integer.remainderUnsigned((-431), 32);
      Integer.getInteger("par", integer4);
      Integer integer5 = new Integer((-431));
      Integer.compare((-1349), 1);
      Integer.compare(42, (-2857));
      Integer.getInteger("42", integer5);
      Integer.compareUnsigned((-2857), (-1386));
      Integer integer6 = new Integer(17);
      Integer.divideUnsigned(32, 21);
      Integer.toUnsignedString((-1));
      Float float0 = new Float((float) 117);
      String[] stringArray0 = JSONObject.getNames((Object) integer1);
      Long long0 = new Long((-1320));
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5118264390899372
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject.doubleToString(3439.651);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "{+";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 2 of {+
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.568848538333529
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("", false);
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      jSONObject0.put("", (Map) hashMap0);
      hashMap0.put("", "");
      hashMap0.put((String) null, (String) null);
      Byte byte0 = new Byte((byte)91);
      Byte byte1 = new Byte((byte)91);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList1);
      LinkedList<Object> linkedList2 = new LinkedList<Object>(linkedList1);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer1);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = new JSONObject();
      jSONObject1.accumulate("", "Bc|*4");
      jSONObject1.optJSONArray("pa");
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      try { 
        jSONObject1.getBoolean("pa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pa\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0391711041159764
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.accumulate("", "");
      Short short0 = new Short((short)43);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      LinkedList<JSONObject> linkedList2 = new LinkedList<JSONObject>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList2.forEach(consumer0);
      JSONObject jSONObject3 = jSONObject2.put("", (Collection) linkedList1);
      LinkedList<Object> linkedList3 = new LinkedList<Object>(linkedList2);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      linkedList3.replaceAll(unaryOperator0);
      linkedList2.clone();
      Object object0 = new Object();
      linkedList3.add((Object) "");
      jSONObject3.optInt("");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.add("");
      JSONObject jSONObject4 = jSONObject2.put("wheel.json.JSONException", (Collection) linkedList4);
      linkedList4.spliterator();
      LinkedList<Short> linkedList5 = new LinkedList<Short>();
      jSONObject4.put("wheel.json.JSONException", (Collection) linkedList5);
      jSONObject3.toString((-72));
      jSONObject2.optString("wheel.json.JSONException", "ZKqIq:>*Ka");
      jSONObject3.opt("{\n\"java.lang.String@0000000004\": [],\n\"java.lang.String@0000000009\": []\n}");
      jSONObject0.toString(0, (int) (short)43);
      jSONObject0.getJSONArray("");
      try { 
        jSONObject0.getDouble("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1026517497018062
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Float float0 = new Float(13.60033182561727);
      Float.sum(1857.1261F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("h;=)gie6n%", 0L);
      Double.max(1857.1261F, 0.0F);
      Double.isFinite(Double.NaN);
      Double.min(0.0F, (-751.6387364));
      Double.sum((-4941.437223161586), 3055.475761621863);
      JSONObject.numberToString(float0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      jSONObject0.optJSONArray("isfloatToIntBits");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0298260458782016
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-998.5329233));
      linkedList0.add(double0);
      linkedList0.add((Double) null);
      linkedList0.clear();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.clear();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject("{}");
      jSONObject1.optJSONObject("{}");
      String string0 = "I4D7R";
      try { 
        jSONObject0.getLong("I4D7R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"I4D7R\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.540713166226931
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Integer integer0 = new Integer((-2857));
      Integer.toUnsignedString(105);
      JSONObject.quote("105");
      String string0 = "$qtR";
      Integer integer1 = Integer.getInteger("$qtR", 1);
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(105);
      Integer.compare((-431), 1);
      Integer.min((-431), 1);
      Integer integer4 = new Integer((-431));
      Integer integer5 = new Integer((-1));
      Integer.compare((-431), 4217);
      Integer.compare((-2857), (-2857));
      Integer.getInteger("\"105\"", integer4);
      Integer.compareUnsigned((-2857), 35);
      StringWriter stringWriter0 = new StringWriter(125);
      JSONObject jSONObject0 = new JSONObject(integer1, stringArray0);
      jSONObject0.optBoolean("fF~BlG\".3[Fk8G`");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.putOpt("105", "\"105\"");
      jSONObject1.optBoolean("105");
      jSONObject1.put("105", (double) (-431));
      jSONObject0.optDouble("getjoin");
      try { 
        jSONObject1.getBoolean("getjoin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getjoin\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5905326006666862
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-998.5329233));
      linkedList0.add(double0);
      linkedList0.add(double0);
      linkedList0.clear();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.clear();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000004\":\"java.lang.Class@0000000005\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      jSONObject1.optJSONObject("{\"java.lang.String@0000000004\":\"java.lang.Class@0000000005\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      String string0 = "I4D7R";
      try { 
        jSONObject0.getLong("I4D7R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"I4D7R\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5539991790400016
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Float float0 = new Float(13.60033182561727);
      Float.sum(1857.1261F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject1 = jSONObject0.put("isreverseBytes", (Collection) linkedList0);
      jSONObject1.toString((-72));
      jSONObject0.optString("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000009\": [],\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}", "isreverseBytes");
      jSONObject0.opt("isreverseBytes");
      try { 
        jSONObject0.getLong("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000009\": [],\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"java.lang.String@0000000002\\\": java.lang.Boolean@0000000003,\\n\\\"java.lang.String@0000000009\\\": [],\\n\\\"java.lang.String@0000000004\\\": java.lang.Boolean@0000000005,\\n\\\"java.lang.String@0000000006\\\": \\\"java.lang.Class@0000000007\\\"\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.133022110040161
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(")t?V=R.f8/l|'s", (-630));
      jSONObject1.getLong(")t?V=R.f8/l|'s");
      String string0 = "getclear";
      jSONObject1.optDouble("getclear");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add(jSONObject0);
      String string1 = "\\u";
      try { 
        jSONObject0.getString(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2917384890113013
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      Integer integer1 = Integer.getInteger("par", integer0);
      Integer.compareUnsigned((-2857), (-1349));
      Integer.sum((-2857), 92);
      Integer.getInteger("par", integer1);
      Integer.compare((-2857), 92);
      JSONObject jSONObject0 = new JSONObject((Object) "par");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.quote("par");
      assertEquals("\"par\"", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      Integer integer1 = Integer.getInteger("par", integer0);
      Integer.max(92, (-2857));
      Integer.divideUnsigned(936, 936);
      Integer.sum((-2857), 92);
      Integer.getInteger("par", integer1);
      Integer.max(1, (-2857));
      Integer.sum(1, (-2857));
      Integer.divideUnsigned((-197), (-204));
      Integer.divideUnsigned(5032, 8448);
      Integer.toUnsignedString((-782));
      Integer.getInteger("ad", integer0);
      JSONObject jSONObject0 = new JSONObject();
      Integer.sum(60, 1);
      Long long0 = new Long(60);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      jSONObject0.put("4294966514", (Object) null);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8885995049191862
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      int int0 = new Byte((byte)0);
      Double double0 = new Double((byte)0);
      linkedList0.offer(double0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "gethashCode";
      stringArray0[2] = "ZmMWvUGOy";
      stringArray0[3] = "getnotifyAll";
      stringArray0[4] = "x7m37 0tj;";
      stringArray0[5] = "get";
      stringArray0[6] = "gethashCode";
      stringArray0[7] = "ZmMWvUGOy";
      stringArray0[8] = "\r";
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.07599943428536
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.accumulate("", "");
      Short short0 = new Short((short)43);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      LinkedList<JSONObject> linkedList2 = new LinkedList<JSONObject>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList2.forEach(consumer0);
      JSONObject jSONObject3 = jSONObject2.put("", (Collection) linkedList1);
      LinkedList<Object> linkedList3 = new LinkedList<Object>(linkedList2);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      linkedList3.replaceAll(unaryOperator0);
      Object object0 = new Object();
      linkedList3.add((Object) "");
      jSONObject3.optInt("");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      boolean boolean0 = new Boolean("");
      JSONObject jSONObject4 = jSONObject2.put("wheel.json.JSONException", (Collection) linkedList4);
      LinkedList<Short> linkedList5 = new LinkedList<Short>();
      jSONObject4.put("wheel.json.JSONException", (Collection) linkedList5);
      JSONObject.valueToString(linkedList4);
      jSONObject3.toString((-72));
      jSONObject2.optString("wheel.json.JSONException", "ZKqIq:>*Ka");
      jSONObject3.opt("{\n\"java.lang.String@0000000004\": [],\n\"java.lang.String@0000000009\": []\n}");
      try { 
        jSONObject2.getLong("2jhcm.FD8aVrRY6cdc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2jhcm.FD8aVrRY6cdc\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0569882659438345
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.accumulate("", "");
      Short short0 = new Short((short)43);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      LinkedList<JSONObject> linkedList2 = new LinkedList<JSONObject>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList2.forEach(consumer0);
      JSONObject jSONObject3 = jSONObject2.put("", (Collection) linkedList1);
      LinkedList<Object> linkedList3 = new LinkedList<Object>(linkedList2);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      linkedList3.replaceAll(unaryOperator0);
      Object object0 = new Object();
      linkedList3.add((Object) "");
      jSONObject3.optInt("");
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList4.add("");
      JSONObject jSONObject4 = jSONObject2.put("wheel.json.JSONException", (Collection) linkedList4);
      LinkedList<Short> linkedList5 = new LinkedList<Short>();
      jSONObject4.put("wheel.json.JSONException", (Collection) linkedList5);
      JSONObject.valueToString(linkedList4);
      jSONObject3.toString((-72));
      jSONObject2.optString("wheel.json.JSONException", "ZKqIq:>*Ka");
      jSONObject3.opt("{\n\"java.lang.String@0000000004\": [],\n\"java.lang.String@0000000009\": []\n}");
      try { 
        jSONObject2.getLong("2jhcm.FD8aVrRY6cdc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2jhcm.FD8aVrRY6cdc\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2269981908102556
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("G1/Ji`^4D}7");
      Boolean boolean0 = new Boolean("G1/Ji`^4D}7");
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.put("G1/Ji`^4D}7", (-1099L));
      long long0 = jSONObject0.optLong("G1/Ji`^4D}7");
      assertEquals(5, jSONObject0.length());
      assertEquals((-1099L), long0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0172417697303415
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Byte.toUnsignedInt((byte)0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "gethashCode";
      stringArray0[2] = "ZmMWvUGOy";
      stringArray0[3] = "getnotifyAll";
      stringArray0[4] = "x7m37 0tj;";
      stringArray0[5] = "`m.t";
      stringArray0[6] = "islear";
      stringArray0[7] = "ZmMWvUGOy";
      JSONObject.getNames((Object) "`m.t");
      JSONObject.valueToString(linkedList0, 0, (byte)0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((Object) linkedList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Float.sum(2833.69F, 2833.69F);
      Float.sum(2494.92F, 5667.38F);
      Float.min(2833.69F, 0.0F);
      Float.min(0.0F, 2494.92F);
      Float.min((-3187.387F), 0.0F);
      Float.max(1754.5F, (-2508.61F));
      Float.max(0.0F, (-730.88947F));
      JSONTokener jSONTokener0 = new JSONTokener("drMW7?I0t9x}aZpp0_");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of drMW7?I0t9x}aZpp0_
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6916196607650438
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("ROdK9RZ", 883L);
      jSONObject0.optInt("ROdK9RZ");
      jSONObject1.optInt("ROdK9RZ", 34);
      String string0 = jSONObject0.toString(1520, 1520);
      jSONObject0.toString((-3663), (-3663));
      String string1 = JSONObject.quote(string0);
      // Undeclared exception!
      jSONObject0.get(string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.693827491834265
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      hashMap0.put("", "");
      Object object0 = JSONObject.NULL;
      jSONObject1.accumulate("]iH,3'", object0);
      hashMap0.put("ic@CLR2xuRs", "sZQD[^*oJN");
      hashMap0.put((String) null, "");
      int int0 = (-1335);
      try { 
        jSONObject1.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("");
      Double double0 = new Double((-1.0));
      linkedList0.push(double0);
      linkedList1.add("");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) double0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.negate();
      predicate1.test(linkedList1);
      predicate1.and(predicate0);
      linkedList0.removeIf(predicate1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "gethasCod";
      stringArray0[2] = "ZmMWvUGOy";
      stringArray0[3] = "getnotifyAll";
      stringArray0[4] = "x7m37 0tj;";
      stringArray0[5] = "get";
      stringArray0[6] = "gethasCod";
      stringArray0[7] = "ZmMWvUGOy";
      stringArray0[8] = "\r";
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      Long long0 = new Long((-1L));
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      String[] stringArray0 = new String[1];
      Integer integer1 = Integer.getInteger("par", integer0);
      Integer.divideUnsigned(936, 936);
      Integer.sum((-2857), 92);
      Integer.getInteger("par", integer1);
      Integer.compare((-2857), 92);
      Integer.sum(2, 2);
      Integer.sum((-1), 2966);
      Integer.divideUnsigned(42, 2966);
      Integer.toUnsignedString(1);
      Integer.min(42, (-2857));
      JSONObject jSONObject0 = new JSONObject(integer1, stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7132430701942214
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("ROdK9RZ", 908L);
      jSONObject0.optInt("ROdK9RZ");
      jSONObject1.optInt("ROdK9RZ", 34);
      jSONObject0.toString(1520, 1520);
      // Undeclared exception!
      jSONObject0.toString(1520, 1520);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.644732778501627
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Double double0 = new Double((-1.0));
      Double.sum((-1796.8545272388687), 0.0);
      linkedList0.push(double0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "gethasCod";
      stringArray0[2] = "ZmMWvUGOy";
      stringArray0[3] = "getnotifyAll";
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      JSONObject jSONObject0 = new JSONObject((Object) "gethasCod");
      JSONObject jSONObject1 = jSONObject0.put("getnotifyAll", (Collection) linkedList1);
      jSONObject1.toString((-65));
      jSONObject0.optString("\nYPYkbx3", "equ");
      String string0 = "to";
      jSONObject0.opt("to");
      try { 
        jSONObject0.getLong("HTy:5w7Nx8uIqtTe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"HTy:5w7Nx8uIqtTe\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.687228062822814
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Boolean boolean0 = Boolean.valueOf("=wBrFo6N*N\"EG%(ry&");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.optInt("=wBrFo6N*N\"EG%(ry&");
      jSONObject0.optLong("ms/XM'*S_:nf9(p");
      double double0 = new Integer(0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optBoolean(">/,$X?d93H>A1");
      jSONObject0.optString("__xDv2&2BpJD", "~j'g|ZhlZ8u/BZ +y.");
      JSONObject jSONObject1 = jSONObject0.put("", true);
      jSONObject0.optInt("~j'g|ZhlZ8u/BZ +y.");
      jSONObject0.optString("d,/),6?9", "ishashCode");
      jSONObject1.optBoolean("\f", false);
      jSONObject1.optString("<2Q", "0");
      jSONObject1.put("0", (long) 0);
      jSONObject0.getString("");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.70357239707256
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("");
      Double double0 = new Double((-1.0));
      linkedList0.push(double0);
      linkedList1.add("");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) double0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.negate();
      predicate1.test(linkedList1);
      predicate1.and(predicate0);
      linkedList0.removeIf(predicate1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("", jSONArray0);
      JSONObject.valueToString(hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("isfloatToIntBits", "par");
      int int0 = 114;
      jSONObject0.toString((-1335), 114);
      try { 
        jSONObject0.getJSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.9960767805448776
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("x0$o2v=hC5");
      long long0 = jSONObject0.optLong("x0$o2v=hC5");
      assertEquals(0L, long0);
      
      double double0 = jSONObject0.optDouble("x0$o2v=hC5");
      assertEquals(Double.NaN, double0, 0.01);
      
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONObject0.optBoolean(">/,$X?d93H>A1");
      jSONObject0.optString("", "__xDv2&2BpJD");
      JSONObject jSONObject1 = jSONObject0.put("ma", false);
      int int0 = jSONObject0.optInt("ma");
      assertEquals(0, int0);
      
      jSONObject1.keys();
      jSONObject1.optString("ishashCode", "x0$o2v=hC5");
      String string0 = jSONObject1.optString("w7Q^e!.M&&363D@Q0", "sho");
      assertEquals("sho", string0);
      
      JSONObject jSONObject2 = jSONObject0.put(">/,$X?d93H>A1", 1L);
      jSONObject2.keys();
      boolean boolean1 = jSONObject0.isNull("ma");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.918338768442381
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("ROdK9RZ", 908L);
      jSONObject0.optInt("ROdK9RZ");
      jSONObject0.optDouble("ROdK9RZ", (double) 908L);
      jSONObject1.optInt("ROdK9RZ", 34);
      jSONObject0.toString(1520, 1520);
      jSONObject0.toString((-3663), (-3663));
      jSONObject0.toString();
      try { 
        jSONObject0.get("M~oH/1w<Qp@`jv.;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"M~oH/1w<Qp@`jv.;\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.377608120095988
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      Float float0 = new Float(0.0);
      hashMap1.put("QP8?&pXZ6q!g czm;", float0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Short short0 = new Short((short) (-930));
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      Consumer<JSONObject> consumer0 = (Consumer<JSONObject>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.put("Bc|*4", (Collection) linkedList1);
      jSONObject1.optDouble("QP8?&pXZ6q!g czm;");
      LinkedList<Object> linkedList2 = new LinkedList<Object>(linkedList0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer1);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = new JSONObject();
      Long long0 = Long.getLong("Bc|*4", 0L);
      JSONObject jSONObject4 = jSONObject0.accumulate("get", long0);
      jSONObject3.optJSONArray("get");
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      try { 
        jSONObject4.getBoolean("getcompare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getcompare\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.1654237101400384
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("x0$o2v=hC5");
      jSONObject0.optDouble("x0$o2v=hC5");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optString("", "__xDv2&2BpJD");
      JSONObject jSONObject1 = jSONObject0.put("ma", false);
      jSONObject0.toString((-893));
      jSONObject0.optInt("ma");
      JSONObject.quote("ma");
      String string0 = "\\u";
      jSONObject1.optBoolean(string0, false);
      jSONObject1.optString("w7Q^e!.M&&363D@Q0", "sho");
      jSONObject1.optDouble("\"ma\"", (-96.67452443));
      jSONObject0.put(">/,$X?d93H>A1", 0L);
      jSONObject1.getDouble(">/,$X?d93H>A1");
      jSONObject0.optBoolean("ma");
      JSONObject jSONObject2 = jSONObject0.put("sho", 0L);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8143698651855233
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("x0$o2v=hC5");
      long long0 = jSONObject0.optLong("x0$o2v=hC5");
      assertEquals(0L, long0);
      
      double double0 = jSONObject0.optDouble("x0$o2v=hC5");
      assertEquals(Double.NaN, double0, 0.01);
      
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONObject0.optBoolean(">/,$X?d93H>A1");
      assertFalse(boolean0);
      
      String string0 = jSONObject0.optString("", "__xDv2&2BpJD");
      assertEquals("__xDv2&2BpJD", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("ma", false);
      int int0 = jSONObject0.optInt("ma");
      assertEquals(0, int0);
      
      jSONObject0.optBoolean("JSONArray initial value should be a string or collection or array.", false);
      double double1 = jSONObject1.optDouble(".", (-4483.47));
      assertEquals((-4483.47), double1, 0.01);
      
      Short.compare((short) (-1531), (short)0);
      jSONObject1.append("JSONArray initial value should be a string or collection or array.", jSONArray0);
      int int1 = jSONObject1.optInt("__xDv2&2BpJD", 0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.322021587962285
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[2];
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("G1/JO`^AD}N");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      Byte.compare((byte) (-42), (byte) (-42));
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("to", false);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject1.getBoolean("to");
      try { 
        jSONObject0.getString("Substring bounds error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Substring bounds error\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Double double0 = new Double((-1.0));
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.push((Double) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList2);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.negate();
      Byte byte0 = new Byte((byte)105);
      predicate1.test(byte0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) double0);
      predicate2.and(predicate0);
      linkedList0.removeIf(predicate0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList2);
      Integer integer0 = new Integer((-934));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\r";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList1);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8725351299448683
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("x0$o2v=hC5");
      assertEquals(0L, long0);
      
      double double0 = jSONObject0.optDouble("x0$o2v=hC5");
      assertEquals(Double.NaN, double0, 0.01);
      
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optString("", "__xDv2&2BpJD");
      JSONObject jSONObject1 = jSONObject0.put("ma", false);
      int int0 = jSONObject0.optInt("ma");
      assertEquals(0, int0);
      
      jSONObject1.optString("ishashCode", "x0$o2v=hC5");
      String string0 = "\\u";
      boolean boolean0 = jSONObject1.optBoolean(string0, false);
      String string1 = jSONObject1.optString("w7Q^e!.M&&363D@Q0", "sho");
      assertEquals("sho", string1);
      
      double double1 = jSONObject1.optDouble("x0$o2v=hC5", (-96.67452443));
      assertEquals((-96.67452443), double1, 0.01);
      
      jSONObject0.put(">/,$X?d93H>A1", 1L);
      double double2 = jSONObject1.getDouble(">/,$X?d93H>A1");
      assertEquals(1.0, double2, 0.01);
      
      boolean boolean1 = jSONObject0.optBoolean("ma");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put("'", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.194750536841039
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("", false);
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      hashMap0.put("", "");
      jSONObject0.keys();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.accumulate("]iH,3'", object0);
      hashMap0.put("ic@CLR2xuRs", "sZQD[^*oJN");
      hashMap0.put("^!,3psy*[yFWj/", "");
      jSONObject1.optInt("000");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject3 = jSONObject2.put("", (Collection) linkedList0);
      jSONObject1.toString(0);
      jSONObject3.optString("JSONObject[", "");
      Short.compare((short)93, (short)123);
      jSONObject2.append("", "000");
      int int0 = jSONObject3.optInt("", (-3999));
      assertEquals(2, jSONObject1.length());
      assertEquals((-3999), int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9594090592280062
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Function<Object, Float> function0 = (Function<Object, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Short short0 = new Short((short) (-2683));
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.stream();
      linkedList0.forEach(consumer0);
      jSONObject0.put("Bc|*4", (Collection) linkedList1);
      LinkedList<Object> linkedList2 = new LinkedList<Object>(linkedList0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer1);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.optJSONArray("Bc|*4");
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      try { 
        jSONObject1.getBoolean("in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"in\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.046627219095971
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.isFinite((-2555.059F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Short.toUnsignedInt((short)44);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      linkedList0.poll();
      LinkedList<JSONObject> linkedList2 = new LinkedList<JSONObject>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList2.forEach(consumer0);
      JSONObject jSONObject1 = jSONObject0.put("Bc|*4", (Collection) linkedList2);
      LinkedList<Object> linkedList3 = new LinkedList<Object>(linkedList0);
      Object object0 = new Object();
      linkedList3.add((Object) linkedList1);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList2.forEach(consumer1);
      JSONObject jSONObject2 = jSONObject1.put("Bc|*4", (Collection) linkedList3);
      JSONObject jSONObject3 = new JSONObject();
      linkedList2.add(jSONObject1);
      jSONObject2.optJSONArray("Bc|*4");
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      try { 
        jSONObject0.getBoolean("V;Xk$g'K}'+{?Sz/2>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"V;Xk$g'K}'+{?Sz/2>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7843707658942787
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(1395);
      JSONObject jSONObject1 = new JSONObject(integer0);
      try { 
        jSONObject0.append((String) null, jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7472347390318053
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Long long0 = new Long((-10L));
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double.max(265.8538348407855, (-10L));
      Double.sum((-1489.65014689186), (-10L));
      Double.sum(1.0, (-1389.95323347946));
      Double.isFinite(Double.NaN);
      jSONObject0.optDouble("6ORwz3EPZ=mj$K", (-1388.95323347946));
      JSONObject jSONObject1 = jSONObject0.put("3bc'+`uDmT=F", (-10L));
      jSONObject1.optBoolean("", false);
      jSONObject0.optDouble("' and instead saw '", (-4.365066366737));
      Short.compare((short)93, (short) (-10));
      try { 
        jSONObject1.append("3bc'+`uDmT=F", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[3bc'+`uDmT=F] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("PQ&\"7`kQ1$^", (Object) null);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Float float0 = new Float(13.60033182561727);
      Float.sum(1857.1261F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Short short0 = new Short((short)44);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.poll();
      linkedList0.toArray();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      linkedList1.removeLastOccurrence((Object) null);
      linkedList0.add((Double) null);
      linkedList0.poll();
      linkedList1.containsAll(linkedList0);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\n";
      stringArray0[1] = "n";
      stringArray0[2] = "fl";
      stringArray0[3] = "sbcqCyn?w";
      stringArray0[4] = "Sd_j!";
      stringArray0[5] = "c=i";
      stringArray0[6] = "e]&a}<:a7'g^dE;p[tu";
      stringArray0[7] = "Unclosed comment";
      stringArray0[8] = "F{,bH5HlHEg";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2240804150634346
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Integer integer0 = new Integer(2756);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject.valueToString(integer0);
      jSONObject0.toString();
      JSONObject.valueToString(jSONObject0, 2756, 2756);
      Integer.getInteger(".'vpZbJ5jf4-3|");
      JSONObject jSONObject1 = jSONObject0.putOpt("isintBitsToFloat", integer0);
      Integer.toUnsignedLong(9);
      Integer.compare(9, 9);
      jSONObject0.optJSONArray("gettoHexString");
      jSONObject1.names();
      JSONObject jSONObject2 = jSONObject1.put("gettoHexString", (long) 2756);
      jSONObject2.optBoolean("Expected a ',' or '}'", false);
      jSONObject2.toString(2756, 12);
      jSONObject2.optString("gettoHexString");
      jSONObject2.toString(12, 12);
      JSONObject jSONObject3 = jSONObject1.accumulate("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}", "{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      jSONObject1.isNull("java.lang.Integer@0000000004");
      Short short0 = new Short((short)64);
      jSONObject1.put("0", (Object) short0);
      jSONObject3.toString(0);
      try { 
        jSONObject2.getJSONObject("fOai(`OJG1C-o&|4e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fOai(`OJG1C-o&|4e\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0890092384766588
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite((-1198.4432F));
      Float.min((-221.99F), (-1198.4432F));
      Float.max((-1198.4432F), 0.0F);
      Short short0 = new Short((short)962);
      Double double0 = new Double(1935.294);
      Double.max((-221.99F), (short)962);
      Double.isFinite(1.0F);
      Double.isFinite(0.0);
      Double.max((-1406.1135723), (-221.99F));
      Double.max(Double.NaN, 0.0F);
      Double.max(1044.5231, (-221.99F));
      Float.max(0.0F, 0.0F);
      Double.isFinite(1044.5231);
      Double.min((-1842.45), 0.0F);
      Float.sum(0.0F, 0.0F);
      Double.sum(0.0, (-1198.4432F));
      JSONObject.numberToString(float0);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.9709466624996907
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("", false);
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      hashMap0.put((String) null, (String) null);
      Byte byte0 = new Byte((byte)91);
      Byte byte1 = new Byte((byte)91);
      hashMap0.put("?6xe4#0z1jG]n wZF9", "qJLsVWB].0OX");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.accumulate("m]iH,3", object0);
      jSONObject2.optInt("t2edPy7'9zOnN", (-62164681));
      hashMap0.put("", "sZQD[^*oJN");
      jSONObject1.optDouble("{}", 3443.0);
      hashMap0.put("^!,3pxy*[yFWU/", "");
      hashMap0.replace("{}", "=JmhEGFo?'6?2aXWPm9", "sZQD[^*oJN");
      jSONObject2.optBoolean("m]iH,3", false);
      Double double0 = new Double((byte)91);
      Short short0 = new Short((byte)91);
      jSONObject0.put("iU6spsh", (Map) hashMap0);
      try { 
        jSONObject0.getLong("Kau");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Kau\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.4254552846451265
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      hashMap0.put("", "");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.accumulate("]iH,3'", object0);
      JSONObject.valueToString("ic@CLR2xuRs");
      hashMap0.put("\"java.lang.String@0000000005\"", "");
      int int0 = (-1335);
      JSONObject.valueToString(hashMap0);
      try { 
        jSONObject2.getJSONArray(">$V`g\"y]o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">$V`g\\\"y]o\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.3409079259276617
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      hashMap0.put("", "");
      hashMap0.put("M/hE1", "");
      Object object0 = JSONObject.NULL;
      hashMap0.put(",:]}/\"[{;=#", "M/hE1");
      jSONObject1.accumulate("]iH,3'", object0);
      jSONObject1.get("");
      JSONObject.valueToString("ic@CLR2xuRs");
      hashMap0.put("\"java.lang.String@0000000005\"", "");
      Byte byte0 = new Byte((byte) (-96));
      Float float0 = new Float(0.0);
      Object object1 = new Object();
      JSONObject jSONObject2 = new JSONObject(object1);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      assertFalse(stringWriter2.equals((Object)stringWriter0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject.doubleToString(Double.NaN);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      assertFalse(stringWriter1.equals((Object)stringWriter0));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1314185322936217
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has(".");
      JSONObject jSONObject1 = jSONObject0.put(".", 15L);
      Byte byte0 = new Byte((byte)10);
      jSONObject1.putOpt("v/&R%Y~Q&dj", byte0);
      jSONObject0.toString();
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      jSONObject1.put(".", (Map) hashMap0);
      jSONObject0.optDouble("%/n@&9O&HJAq*-$");
      jSONObject0.remove((String) null);
      jSONObject0.optLong(".");
      Double double0 = new Double(15L);
      JSONObject.valueToString(double0);
      jSONObject0.getJSONObject(".");
      jSONObject0.optDouble("", (double) 0L);
      try { 
        jSONObject0.getInt(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.347550955082936
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Float.min(0.0F, (-3055.613F));
      Float.sum((-3055.613F), (-1340.4497F));
      Float.sum((-4396.0625F), (-3055.613F));
      Float.min(766.75F, 0.0F);
      Float.min(0.0F, (-3055.613F));
      Float.min(0.0F, 5.9235454F);
      Float.max((-3055.613F), (-3055.613F));
      Float.max(5.497355F, 5.9235454F);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "drMW7?I0t9x}aZpp0_";
      stringArray0[1] = "drMW7?I0t9x}aZpp0_";
      stringArray0[2] = "PBp|*";
      stringArray0[3] = "drMW7?I0t9x}aZpp0_";
      stringArray0[4] = "drMW7?I0t9x}aZpp0_";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("PBp|*", (Object) "PBp|*");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.7643068574078287
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "ROdK9RZ";
      jSONObject0.put("ROdK9RZ", (-185L));
      JSONObject.valueToString("ROdK9RZ", 1520, 1520);
      jSONObject0.optInt("ROdK9RZ");
      jSONObject0.toString(1520, 1520);
      int int0 = (-3663);
      jSONObject0.toString((-3663), (-3663));
      jSONObject0.toString();
      try { 
        jSONObject0.get("M~oH/1w<Qp@`jv.;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"M~oH/1w<Qp@`jv.;\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.998915772642333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has(".");
      JSONObject jSONObject1 = jSONObject0.put(".", 15L);
      String string0 = "";
      Byte byte0 = new Byte((byte)10);
      jSONObject1.putOpt("v/&R%Y~Q&dj", byte0);
      jSONObject0.toString();
      jSONObject0.optDouble("%/n@&9O&HJAq*-$");
      jSONObject0.remove((String) null);
      jSONObject0.optLong(".");
      Double double0 = new Double(15L);
      jSONObject0.getString(".");
      JSONObject.valueToString(double0);
      try { 
        jSONObject0.getJSONObject(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[2];
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("G1/JO`^AD}N");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      String string0 = "to";
      short short0 = (short)2262;
      Short.toUnsignedInt((short)2262);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      LinkedList<Object> linkedList3 = new LinkedList<Object>(linkedList2);
      LinkedList<JSONObject> linkedList4 = new LinkedList<JSONObject>();
      LinkedList<JSONObject> linkedList5 = new LinkedList<JSONObject>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList5.forEach(consumer0);
      try { 
        jSONObject0.put((String) null, (Collection) linkedList3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.855822103188824
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Float float0 = new Float(1464.7761F);
      Integer integer0 = new Integer(1253);
      JSONObject.valueToString(float0, 1253, 1253);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.1139119848578636
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      jSONObject0.optLong("PQ&\"7`kQ1$^");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("PQ&\"7`kQ1$^", (Collection) linkedList0);
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      HashMap<JSONObject, Object> hashMap2 = new HashMap<JSONObject, Object>(2027, 602.0694F);
      HashMap<Object, Integer> hashMap3 = new HashMap<Object, Integer>();
      jSONObject0.put("", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "z`x/IR63f``z{;;xZB";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Float float0 = new Float(13.60033182561727);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Short short0 = new Short((short)3302);
      Short.compare((short)1750, (short)1750);
      JSONObject.testValidity(short0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.642738199897191
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      jSONObject0.optDouble((String) null);
      jSONObject0.optBoolean("Wq:*Cs_/_0-iQE'>/.");
      JSONObject jSONObject1 = new JSONObject((Map) null);
      jSONObject1.optString("Wq:*Cs_/_0-iQE'>/.", (String) null);
      jSONObject0.optInt("");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.optString((String) null, "se");
      jSONObject2.put("getsubList", (-2408L));
      try { 
        jSONObject0.getString("j-`j3hZ<;Sy1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"j-`j3hZ<;Sy1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.7778963150781832
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".", 1344.260337163868);
      jSONObject0.optInt("x0$o2v=hC5");
      jSONObject0.optLong("x0$o2v=hC5");
      jSONObject0.optDouble("x0$o2v=hC5");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.optBoolean(">/,$X?d93H>A1");
      jSONObject0.optString("", "__xDv2&2BpJD");
      JSONObject jSONObject2 = jSONObject0.put("ma", false);
      jSONObject0.optInt("ma");
      jSONObject2.optString("ishashCode", "x0$o2v=hC5");
      String string0 = "\\u";
      jSONObject2.optBoolean(string0, false);
      jSONObject2.optString(".", "sho");
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.112322947481639
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "o-n";
      stringArray0[1] = "rot";
      stringArray0[2] = "to";
      stringArray0[3] = "o(?wQD[nUQg|t2{&&";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.append("A JSONObject text must begin with '{'", (Object) null);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.9235109353529967
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Float float0 = new Float(13.60033182561727);
      StringWriter stringWriter0 = new StringWriter();
      Float.max(1147.5F, 1147.5F);
      Float.max(1147.5F, 0.0F);
      Short short0 = new Short((short)962);
      Double double0 = new Double(578.0113F);
      Double.max(578.0113F, 1147.5F);
      Double.isFinite(13.60033182561727);
      Double.isFinite(1147.5F);
      Double.max((short)962, 578.0113F);
      Double.max((-2973.3266614513), 439.1);
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONObject("] not found");
      JSONObject jSONObject1 = jSONObject0.accumulate("] not found", (Object) null);
      try { 
        jSONObject1.get("J;#-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"J;#-\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.5255111163580506
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("", false);
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      hashMap0.put("", "");
      hashMap0.put((String) null, (String) null);
      Byte byte0 = new Byte((byte)10);
      Byte byte1 = new Byte((byte)10);
      JSONObject jSONObject2 = jSONObject1.accumulate("m]iH,3", (Object) null);
      hashMap0.put("", "sZQD[^*oJN");
      hashMap0.put("^!,3pxy*[yFWj/", "");
      hashMap0.replace((String) null, "=JmhpGFo?'6?DaXWPm9", "sZQD[^*oJN");
      jSONObject2.optBoolean("m]iH,3", false);
      Double double0 = new Double((byte)10);
      Short short0 = new Short((byte)10);
      jSONObject0.put("iU6spush", (Map) hashMap0);
      try { 
        jSONObject0.getLong("Kau");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Kau\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.693638108733528
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      hashMap0.put("", "");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.accumulate("]iH,3'", object0);
      String string0 = "ic@CLR2xuRs";
      hashMap0.put("ic@CLR2xuRs", "sZQD[^*oJN");
      hashMap0.put((String) null, "");
      jSONObject2.toString((-1335), (-1335));
      StringWriter stringWriter0 = new StringWriter(92);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      jSONObject2.write(stringWriter1);
      StringWriter stringWriter2 = null;
      try {
        stringWriter2 = new StringWriter((-1335));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.9688875372132655
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("ROdK9RZ", 908L);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optInt("ROdK9RZ");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("ROdK9RZ", "ROdK9RZ");
      jSONObject1.keys();
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.accumulate("]iH,3'", "]iH,3'");
      hashMap0.put("sZQD[^*oJN", "]iH,3'");
      HashMap<String, String> hashMap1 = new HashMap<String, String>(1520, 908);
      String string0 = null;
      hashMap1.put((String) null, (String) null);
      jSONObject2.optInt((String) null);
      // Undeclared exception!
      jSONObject0.toString(8192);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("uZc");
      jSONTokener0.back();
      JSONObject.quote(":R?FUN$fNlx");
      char char0 = '$';
      try { 
        jSONTokener0.nextString('U');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 3 of uZc
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.7974683794638056
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      hashMap0.put("", "");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.accumulate("", object0);
      String string0 = "ic@CLR2xuRs";
      hashMap0.put("ic@CLR2xuRs", "sZQD[^*oJN");
      jSONObject2.toString((-1335), (-1335));
      jSONObject1.getJSONArray("");
      StringWriter stringWriter0 = new StringWriter(92);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      jSONObject2.write(stringWriter1);
      StringWriter stringWriter2 = null;
      try {
        stringWriter2 = new StringWriter((-1335));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Float float0 = new Float(13.60033182561727);
      StringWriter stringWriter0 = new StringWriter();
      Float.max(1147.5F, 1147.5F);
      Float.max(1147.5F, (-3310.2827F));
      Float.isFinite(0.0F);
      Float.min(0.0F, 1147.5F);
      Float.isFinite((-1483.0112F));
      Float.isFinite(578.0113F);
      Float.isFinite(1147.5F);
      Float.isFinite((-290.81F));
      Float.min((-1483.0112F), 1147.5F);
      Float.isFinite(1147.5F);
      Float.max((-567.3405F), 0.0F);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 123, (-515));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.247401716135374
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject.doubleToString(1508.081056);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("1508.081056", "1508.081056");
      jSONObject0.has("1508.081056");
      Float float0 = new Float((float) 1060);
      Float.sum(1060, 1060);
      Double.min(1060, 2120.0F);
      try { 
        jSONObject1.getBoolean("1508.081056");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1508.081056\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.0150095799142607
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Function<String, Float> function0 = (Function<String, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Float> function1 = (Function<Object, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Short short0 = new Short((short) (-2683));
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      String string0 = "Bc|*4";
      jSONObject0.put("Bc|*4", (Collection) linkedList1);
      LinkedList<Object> linkedList2 = new LinkedList<Object>(linkedList0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer1);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject();
      String string1 = "[7~s";
      JSONObject jSONObject3 = jSONObject1.accumulate("] is not a number.", "Bc|*4");
      try { 
        jSONObject3.getDouble("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.0378420258250944
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer integer0 = new Integer((-4108));
      Integer integer1 = Integer.getInteger("par", integer0);
      Integer.divideUnsigned((-4108), 936);
      Integer.sum(4588635, 2333);
      Integer.getInteger("\r", integer1);
      Integer.compare(2, 4590968);
      Integer.sum(1081, 2333);
      Integer.sum((-3575), 2333);
      Integer.divideUnsigned((-20664796), 22);
      Integer.toUnsignedString(2);
      Integer.min(62, (-1242));
      Integer.getInteger("par", integer0);
      Integer.getInteger("iscompare", integer1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "&[`.yJI42t";
      stringArray0[1] = "T0Xo2v=]C5";
      stringArray0[2] = "iscompare";
      JSONObject jSONObject0 = new JSONObject("iscompare", stringArray0);
      Integer.max(1081, (-5464));
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.177444380850009
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject.doubleToString(2346.352182);
      JSONTokener jSONTokener0 = new JSONTokener("2346.352182");
      jSONTokener0.nextTo("2346.352182");
      jSONTokener0.next();
      String string0 = ">/,$X?d93H>A1";
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("Z'tgR##qi");
      jSONObject0.optString(">/,$X?d93H>A1", "p^4itq%=|3(Lx");
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-998.5329233));
      linkedList0.add(double0);
      linkedList0.add(double0);
      linkedList0.clear();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      predicate1.test(predicate2);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate5 = predicate3.or(predicate4);
      predicate2.and(predicate1);
      linkedList0.removeIf(predicate5);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "getnotifyAll";
      stringArray0[1] = "\r";
      stringArray0[2] = "getnotifyAll";
      stringArray0[3] = "get";
      stringArray0[4] = "gethasCod";
      stringArray0[5] = "\r";
      JSONObject jSONObject0 = new JSONObject(predicate2, stringArray0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertNull(jSONArray2);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      Integer integer1 = Integer.getInteger("par", integer0);
      Integer.sum((-2857), 92);
      Integer.getInteger("par", integer1);
      Integer.compare((-2857), 92);
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-2857), 1519);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      String[] stringArray0 = new String[1];
      Integer integer1 = Integer.getInteger("par", integer0);
      Integer.divideUnsigned(936, 936);
      Integer.sum((-2857), 92);
      Integer integer2 = Integer.getInteger("par", integer1);
      Integer.compare((-2857), 92);
      Integer.sum(2, 2);
      Integer.sum((-1), 2966);
      Integer.divideUnsigned(42, 61);
      Integer.toUnsignedString(61);
      Integer.min(42, (-2857));
      Integer.getInteger("&[`.yJI42t", integer1);
      Integer.getInteger("iscompare", integer2);
      JSONObject jSONObject0 = new JSONObject(integer1, stringArray0);
      Integer.max(4, 2);
      JSONObject jSONObject1 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("isremainderUnsigned");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.052121127091506
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      String[] stringArray0 = new String[1];
      Integer integer1 = Integer.getInteger("par", integer0);
      Integer.divideUnsigned(936, 936);
      Integer.sum((-2857), 92);
      Integer.getInteger("par", integer1);
      Integer.compare((-2857), 92);
      Integer.sum(936, 9);
      Integer.divideUnsigned(2, (-3818));
      Integer.toUnsignedString(47);
      Integer.min((-112), 2);
      Integer.getInteger("&[`.yJI42t", integer0);
      Integer.getInteger("par", integer0);
      JSONObject jSONObject0 = new JSONObject("47", stringArray0);
      Long long0 = new Long(1184L);
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.680421054462574
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float float0 = new Float(13.60033182561727);
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = jSONObject0.optBoolean("] is not a JSONArray.", true);
      assertTrue(boolean0);
      
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      double double0 = jSONObject0.optDouble("9cC{J7MJ=X1'sii");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.948720592834763
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "x0$o2v=hC5";
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float(1.0F);
      Float float1 = new Float(1.0F);
      hashMap0.put("true", float1);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Short.toUnsignedInt((short) (-2683));
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      jSONObject0.put("Bc|*4", (Collection) linkedList1);
      JSONObject.valueToString((Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("x0$o2v=hC5");
      jSONTokener0.nextTo('x');
      jSONTokener0.next();
      jSONTokener0.next();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.036736578414717
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt(";");
      jSONObject0.toString(0, 0);
      jSONObject0.toString(59, 0);
      jSONObject0.toString();
      try { 
        jSONObject0.get("%%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%%\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.2022307326215067
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Function<String, Float> function0 = (Function<String, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(anyString());
      hashMap0.computeIfAbsent("000", function0);
      Function<Object, Float> function1 = (Function<Object, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      hashMap0.computeIfAbsent("000", function1);
      hashMap0.put("true", (Float) null);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float(1.0F);
      hashMap0.put("true", float0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Short.toUnsignedInt((short) (-2683));
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      JSONObject jSONObject1 = jSONObject0.put("Bc|*4", (Collection) linkedList1);
      Object object0 = new Object();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer1);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = new JSONObject();
      jSONObject2.accumulate("] is not a number.", "Bc|*4");
      jSONObject3.optJSONArray("000");
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      try { 
        jSONObject1.getBoolean("Bc|*4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Bc|*4\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.8253263037305936
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("", false);
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      hashMap0.put("", "");
      String string0 = null;
      hashMap0.put((String) null, (String) null);
      Byte byte0 = new Byte((byte)91);
      Byte byte1 = new Byte((byte)91);
      hashMap0.put("?6xe4#0z1jG]n wZF9", "qJLsVWB].0OX");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.accumulate("m]iH,3", object0);
      jSONObject2.optInt("t2edPy7'9zOnN", (-62164681));
      hashMap0.put("", "sZQD[^*oJN");
      jSONObject1.optDouble((String) null, 3443.0);
      hashMap0.put("^!,3pxy*[yFWU/", "");
      hashMap0.replace((String) null, "=JmhEGFo?'6?2aXWPm9", "sZQD[^*oJN");
      jSONObject2.optBoolean("m]iH,3", false);
      Double double0 = new Double((byte)91);
      Short short0 = new Short((byte)91);
      jSONObject0.put("iU6spsh", (Map) hashMap0);
      try { 
        jSONObject0.getLong("Kau");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Kau\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.977500522076773
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      String[] stringArray0 = new String[1];
      Integer.getInteger("p#+ar", integer0);
      Integer integer1 = new Integer(92);
      Integer integer2 = new Integer((-2857));
      Integer.toUnsignedString(105);
      Integer.toUnsignedString(42);
      Integer.getInteger("$qT1", 1);
      Integer integer3 = new Integer((-1320));
      Integer.remainderUnsigned((-431), 32);
      Integer.getInteger("p#+ar", integer3);
      Integer integer4 = new Integer((-431));
      Integer.compare(42, (-2857));
      Integer.getInteger("42", integer4);
      Integer.compareUnsigned((-2857), (-1386));
      Integer.sum(2057, 2570);
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>(linkedList0);
      linkedList1.containsAll(linkedList0);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      jSONObject0.put("105", 6);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.1392921128169875
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      String[] stringArray0 = new String[1];
      Integer.getInteger("p#+ar", integer0);
      Integer integer1 = new Integer(92);
      Integer integer2 = new Integer((-2857));
      Integer.toUnsignedString(105);
      Integer.toUnsignedString(42);
      String string0 = "$qT1";
      Integer.getInteger("$qT1", 1);
      Integer integer3 = new Integer((-1320));
      Integer.remainderUnsigned((-431), 32);
      Integer.getInteger("p#+ar", integer3);
      Integer integer4 = new Integer((-431));
      Integer.sum(25, 46);
      Integer.compare(42, (-2857));
      Integer integer5 = new Integer(32);
      Integer.compareUnsigned((-2857), (-1386));
      Integer.sum(2057, 2570);
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(125);
      JSONObject jSONObject1 = jSONObject0.put("$qT1", true);
      try { 
        jSONObject1.put((String) null, 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)102);
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", (Object) byte0);
      String string1 = "";
      jSONObject1.getInt("");
      jSONObject0.remove("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.8369099728340688
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("", false);
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      hashMap0.put("", "");
      hashMap0.put((String) null, (String) null);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.accumulate("m]iH,3", object0);
      jSONObject2.optInt("t2edPy7'9zOnN", (-62164681));
      hashMap0.put("", "sZQD[^*oJN");
      jSONObject1.optDouble((String) null, 3443.0);
      hashMap0.put("^!,3pxy*[yFWU/", "");
      hashMap0.replace((String) null, "=JmhEGFo?'6?2aXWPm9", "sZQD[^*oJN");
      jSONObject2.optBoolean("m]iH,3", false);
      String string0 = "Kau";
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.568504221183533
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@8.Y^5L$w($HCQ5mD";
      String string0 = " zdlqQ@7ff\\_9K1";
      stringArray0[1] = " zdlqQ@7ff_9K1";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = new Object();
      jSONObject0.accumulate(" zdlqQ@7ff_9K1", object0);
      jSONObject1.put("{", 2364L);
      jSONObject1.putOpt((String) null, " zdlqQ@7ff_9K1");
      jSONObject0.optBoolean(" zdlqQ@7ff_9K1");
      try { 
        jSONObject0.getJSONArray("+3Z|E]@UjiVgymL 5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+3Z|E]@UjiVgymL 5\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.365349639944498
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      String[] stringArray0 = new String[1];
      Integer.getInteger("p#+ar", integer0);
      Integer integer1 = new Integer(92);
      Integer integer2 = new Integer((-2857));
      Integer.toUnsignedString(105);
      Integer.toUnsignedString(42);
      Integer integer3 = Integer.getInteger("$qT1", 1);
      Integer integer4 = new Integer((-1320));
      Integer.remainderUnsigned((-431), 32);
      Integer.getInteger("p#+ar", integer4);
      Integer integer5 = new Integer((-431));
      Integer.sum(25, 46);
      Integer.compare(42, (-2857));
      Integer.getInteger("42", integer5);
      Integer.compareUnsigned((-2857), (-1386));
      Integer.sum(2057, 2570);
      JSONObject jSONObject0 = new JSONObject(integer3, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(125);
      jSONObject0.write(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals("{}{}", stringWriter0.toString());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.6799873441352777
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("", false);
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      hashMap0.put("", "");
      String string0 = "m]iH,3";
      hashMap0.put("m]iH,3", (String) null);
      byte byte0 = (byte)91;
      Byte byte1 = new Byte((byte)91);
      Byte byte2 = new Byte((byte)91);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.accumulate("m]iH,3", object0);
      String string1 = "sZQD[^*oJN";
      jSONObject2.optInt("t2edPy7'9zOnN", (-62164681));
      hashMap0.put("", "sZQD[^*oJN");
      jSONObject1.optDouble((String) null, 3443.0);
      hashMap0.put("^!,3pxy*[yFWj/", "");
      try { 
        jSONObject2.put((String) null, (Object) "m]iH,3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.8796281119286729
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Float float0 = new Float(13.60033182561727);
      Float.isFinite(174.47F);
      Float.sum(1857.1261F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.043043260157456
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      jSONObject1.accumulate("", "");
      short short0 = (short)43;
      Short.toUnsignedInt((short)43);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      LinkedList<JSONObject> linkedList2 = new LinkedList<JSONObject>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "*78;]GPSxQM&\"";
      JSONTokener jSONTokener0 = new JSONTokener("*78;]GPSxQM&\"");
      jSONTokener0.back();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("ha");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ha\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.46769983754709
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      String[] stringArray0 = new String[1];
      Integer integer1 = Integer.getInteger("par", integer0);
      Integer.sum((-2857), 92);
      Integer integer2 = Integer.getInteger("par", integer1);
      Integer.compare((-2857), 92);
      Integer.sum(2, 2);
      Integer.sum((-1), 2966);
      Integer.divideUnsigned((-2857), 61);
      Integer.toUnsignedString(61);
      Integer.min(936, (-2857));
      Integer.getInteger("&[`.yJI42t", integer1);
      Integer.getInteger("61", integer2);
      JSONObject jSONObject0 = new JSONObject(integer1, stringArray0);
      Integer.max(4, 2);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject0.put("par", false);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.20422554999279
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[2];
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Byte.compare((byte)44, (byte)44);
      linkedList1.clear();
      linkedList1.add("G1/0JO^AD}N");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(linkedList1);
      jSONObject1.optInt("G1/0JO^AD}N", 81);
      try { 
        jSONObject1.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.7895928692359226
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Boolean boolean0 = new Boolean("G1/Ji`^4D}7");
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      Double double0 = new Double((byte)0);
      jSONObject0.append("G1/Ji`^4D}7", double0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.6401934578801076
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = null;
      Double double1 = new Double(2691.8031132465317);
      hashMap0.put((Double) null, double1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "r*m=2hW0#6G47WD";
      int int0 = (-819);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (-819), 2448);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.4061400489578277
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      hashMap0.put("", "");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.accumulate("]iH,[%3'", hashMap0);
      hashMap0.put("ic@CLR2xuRs", "s^QD[^*Jq");
      hashMap0.put((String) null, "");
      // Undeclared exception!
      try { 
        jSONObject2.toString((-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.411709405579255
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      hashMap0.put("", "");
      Object object0 = JSONObject.NULL;
      jSONObject1.accumulate("]iH,3'", object0);
      hashMap0.put("ic@CLR2xuRs", "sZQD[^*oJN");
      hashMap0.put((String) null, "");
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (-1335), (-1335));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.946420803321904
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("", false);
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      hashMap0.put("", "");
      Byte.toUnsignedInt((byte)10);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.accumulate("]iH,3", object0);
      JSONObject.valueToString(jSONObject1, (byte)10, 10);
      jSONObject1.optDouble((String) null, (double) 10);
      hashMap0.put("^!,3pxy*[yFWj/", "");
      jSONObject2.optBoolean("]iH,3", false);
      jSONObject2.optDouble("000", 1453.361662184874);
      Short.compare((short) (-1556), (short)91);
      jSONObject0.put("ispush", (Map) hashMap0);
      try { 
        jSONObject0.getLong("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.isFinite((-2555.059F));
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/C{-vw-(";
      JSONObject jSONObject0 = new JSONObject("__xDv2&2BpJD", stringArray0);
      jSONObject0.optString("", "Expected a ',' or ']'");
      String string0 = jSONObject0.optString("/C{-vw-(", ">/,$X?d93H>A1");
      assertEquals(">/,$X?d93H>A1", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.5952629603288848
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.clear();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList2.forEach(consumer0);
      linkedList2.add("G1/JO`^AD}N");
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.keys();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.980180446096391
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("P");
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.optLong(".");
      jSONObject1.optDouble("P");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.optBoolean("");
      jSONObject1.optString("P", "*=");
      JSONObject jSONObject2 = jSONObject1.put("lr:p@$&$R+V }", false);
      jSONObject2.optInt("lr:p@$&$R+V }");
      jSONObject0.optString("ma", "");
      String string0 = "\\u";
      jSONObject0.optBoolean("*=", false);
      jSONObject1.optString(string0, "ma");
      jSONObject1.put("*=", 0L);
      try { 
        jSONObject1.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[2];
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.clear();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONArray0.toJSONObject(jSONArray0);
      JSONObject jSONObject1 = new JSONObject();
      Object object0 = jSONObject0.opt("HMQ*Yu5AR?8");
      assertNull(object0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-523));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.840827283190615
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Float float0 = new Float(13.60033182561727);
      Float.sum(1857.1261F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      String string0 = jSONObject0.optString("isspliterator");
      assertEquals(3, jSONObject0.length());
      assertEquals("", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Float.min((-1198.4432F), (-2052.9F));
      Float.min((-1317.4F), 1433.1992F);
      Float.isFinite((-51.83497F));
      Float.min(0.0F, 0.0F);
      Float.isFinite((-1.0F));
      Float.max(0.0F, (-1317.4F));
      String string0 = JSONObject.valueToString((Object) null, (-765), (-1));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.60855738610497
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      String[] stringArray0 = new String[1];
      Integer integer1 = Integer.getInteger("pLar", integer0);
      Integer integer2 = new Integer(92);
      Integer.divideUnsigned(75, 42);
      Integer.toUnsignedString((int) integer2);
      Integer.getInteger("r!-DTK@27", integer1);
      Integer.getInteger("", integer1);
      Integer.compareUnsigned((int) integer2, 125);
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(75);
      Integer.compareUnsigned(42, 2453);
      jSONObject0.put("toS", true);
      Integer.min((-815), 125);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringArray0[0]);
      stringWriter0.write("+RlE4{8?");
      stringWriter1.write("qQbR@]vG4");
      jSONObject0.optLong("toS", (-2769L));
      StringWriter stringWriter2 = new StringWriter(1);
      stringWriter2.flush();
      jSONObject0.write(stringWriter2);
      Integer integer3 = Integer.getInteger("", integer1);
      Integer.getInteger("cle", integer3);
      try { 
        jSONObject0.get("N=0nlsvKeE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"N=0nlsvKeE\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.replace("-1.<", "-1.<");
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      Integer.getInteger("p#+ar", integer0);
      Integer integer1 = new Integer((-2857));
      Integer.toUnsignedString(105);
      Integer.toUnsignedString(42);
      Integer integer2 = Integer.getInteger("$qT1", 1);
      Integer integer3 = new Integer((-1320));
      Float.min((-2857), (-3992.0F));
      Float.min((-3992.0F), (-546.92F));
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "p#+ar";
      stringArray0[1] = "$qT1";
      stringArray0[2] = "p#+ar";
      stringArray0[3] = "$qT1";
      stringArray0[4] = "105";
      stringArray0[5] = "105";
      stringArray0[6] = "42";
      stringArray0[7] = "42";
      stringArray0[8] = "105";
      JSONObject jSONObject0 = new JSONObject(integer2, stringArray0);
      try { 
        jSONObject0.getJSONArray("105");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"105\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.3206053247947638
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      Integer.max((-2857), (-2857));
      String[] stringArray0 = new String[1];
      Integer.compareUnsigned((-2857), (-2857));
      Integer integer1 = Integer.getInteger("par", integer0);
      Integer.divideUnsigned((-2857), (-2857));
      Integer.sum((-2857), 92);
      Integer.getInteger("par", integer1);
      Integer.compare((-2857), 92);
      Integer.sum(2, 2);
      Integer.compareUnsigned(2, 0);
      Integer.compareUnsigned(1, 3864);
      Integer.compareUnsigned(0, 59);
      JSONObject jSONObject0 = new JSONObject("x7m37 0tj;", stringArray0);
      Long long0 = new Long((-1853L));
      try { 
        jSONObject0.get("~rPS[2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~rPS[2\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.2744542170093043
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Float float0 = new Float(13.60033182561727);
      StringWriter stringWriter0 = new StringWriter();
      Float float1 = new Float(1147.5F);
      Double double0 = new Double(1147.5F);
      Double double1 = new Double(1147.5F);
      Float.sum(0.0F, 1880.62F);
      Byte byte0 = new Byte((byte)10);
      Float float2 = new Float((double) 0.0F);
      JSONObject jSONObject0 = new JSONObject(float2);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      jSONObject0.toString(44, (-1555));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Float.min(0.0F, (-3055.613F));
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      String string0 = JSONObject.quote("oG/POQSkZf#Ydo|t\"");
      assertEquals("\"oG/POQSkZf#Ydo|t\\\"\"", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.3092060298045314
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ROdK9RZ", 908L);
      jSONObject0.optInt("ROdK9RZ");
      jSONObject1.optInt("ROdK9RZ", 34);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Short.toUnsignedInt((short) (-2207));
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>(linkedList1);
      Consumer<JSONObject> consumer0 = (Consumer<JSONObject>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      String string0 = "istoUnsignedInt";
      linkedList0.spliterator();
      jSONObject0.put("istoUnsignedInt", (Collection) linkedList1);
      LinkedList<Object> linkedList3 = new LinkedList<Object>(linkedList2);
      Object object1 = new Object();
      Object object2 = new Object();
      linkedList2.add(object2);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer1);
      JSONObject jSONObject2 = jSONObject0.put("z", (Collection) linkedList2);
      JSONObject jSONObject3 = new JSONObject();
      linkedList0.add(jSONObject1);
      jSONObject3.optJSONArray("ROdK9RZ");
      jSONObject3.put("T>\"", (Collection) linkedList3);
      try { 
        jSONObject2.getBoolean("N4Y7\":9x*=@JR}i#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"N4Y7\\\":9x*=@JR}i#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.271797045598275
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Float float0 = new Float(13.60033182561727);
      Float.sum(1857.1261F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject.valueToString(jSONObject0, 201, 92);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      assertFalse(stringWriter2.equals((Object)stringWriter1));
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      String string0 = JSONObject.quote(")t?V=R.f8/l|'s");
      assertEquals("\")t?V=R.f8/l|'s\"", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Double, Byte> hashMap1 = new HashMap<Double, Byte>();
      String string0 = JSONObject.quote("&>9@mx\"8N");
      assertEquals("\"&>9@mx\\\"8N\"", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      String[] stringArray0 = new String[1];
      Integer integer1 = Integer.getInteger("par", integer0);
      Integer.sum((-2857), (-2857));
      Integer integer2 = Integer.getInteger((String) null, integer1);
      Integer.compare((-2857), 92);
      int int0 = (-1880);
      Integer.sum((-1880), 13);
      Integer.sum(92, 9);
      int int1 = 42;
      Integer.divideUnsigned(9, (-12473307));
      Integer.toUnsignedString((-1867));
      Integer integer3 = Integer.getInteger((String) null, integer1);
      Integer.getInteger("par", 0);
      Integer.compare(1080, 5259);
      Integer.getInteger((String) null);
      Integer.getInteger("r!-DTK@27", integer3);
      Integer.getInteger((String) null, integer2);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.5910751567265864
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Short short0 = new Short((short)42);
      JSONObject jSONObject0 = new JSONObject(short0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float((float) (short)42);
      Float.max((short)42, (short)42);
      hashMap0.put("false", float0);
      Short.toUnsignedInt((short)42);
      Consumer<JSONObject> consumer0 = (Consumer<JSONObject>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONObject0.put("false", 0L);
      boolean boolean0 = new Boolean(false);
      Short short1 = new Short((short)42);
      Short.compare((short)42, (short)826);
      JSONObject jSONObject1 = jSONObject0.append("ar", short0);
      jSONObject0.optDouble("Expected a ',' or '}'");
      jSONObject1.optLong("false", (long) (short)826);
      jSONObject1.optInt("$?N>wNzck`v", (-1137));
      try { 
        jSONObject0.getString("jwu[V$noFy3JEb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jwu[V$noFy3JEb\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.7923830111188166
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      jSONObject1.accumulate("", "");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      LinkedList<JSONObject> linkedList2 = new LinkedList<JSONObject>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList2.forEach(consumer0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      linkedList1.replaceAll(unaryOperator0);
      Object object0 = new Object();
      linkedList1.add((Object) "");
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter();
      hashMap0.put("", "");
      StringWriter stringWriter1 = new StringWriter();
      char char0 = '~';
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.2947981229962817
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      short short0 = (short)42;
      Short short1 = new Short((short)42);
      JSONObject jSONObject0 = new JSONObject(short1);
      String string0 = "false";
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float((float) (short)42);
      hashMap0.put("false", float0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Short.toUnsignedInt((short)42);
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      Consumer<JSONObject> consumer0 = (Consumer<JSONObject>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      JSONObject jSONObject1 = jSONObject0.put("false", (Collection) linkedList0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "false";
      stringArray0[1] = "false";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      try { 
        jSONObject0.getJSONObject("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.905388973015959
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("x<20$o2v=hC5");
      jSONObject0.optLong("x<20$o2v=hC5");
      jSONObject0.optDouble("x<20$o2v=hC5");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optBoolean("isdecode");
      jSONObject0.optString("isdecode", "__xDv2&2BpJD");
      JSONObject jSONObject1 = jSONObject0.put("ma", false);
      jSONObject0.optInt("ma");
      jSONObject1.optString("ishashCode", "x<20$o2v=hC5");
      String string0 = "\\u";
      jSONObject1.optBoolean(string0, false);
      jSONObject1.optString("w7Q^e!.M&&363D@Q0", "sho");
      jSONObject0.put("__xDv2&2BpJD", 1L);
      try { 
        jSONObject0.getString("w7Q^e!.M&&363D@Q0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"w7Q^e!.M&&363D@Q0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.1140306282134036
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.isFinite((-2555.059F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Short.toUnsignedInt((short)44);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(44);
      linkedList0.add(double0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      linkedList0.poll();
      LinkedList<JSONObject> linkedList2 = new LinkedList<JSONObject>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList2.forEach(consumer0);
      linkedList2.containsAll(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or '}'", (Collection) linkedList1);
      LinkedList<Object> linkedList3 = new LinkedList<Object>(linkedList2);
      Object object0 = new Object();
      linkedList1.add((Object) linkedList2);
      jSONObject1.remove("Expected a ',' or '}'");
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      try { 
        jSONObject1.getLong("Expected a ',' or '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.2010005908492167
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Float float0 = new Float((double) (-2857));
      StringWriter stringWriter0 = new StringWriter();
      Float.max(1147.5F, 1644.35F);
      Float.sum(1880.62F, 0.0F);
      Byte byte0 = new Byte((byte) (-96));
      Float float1 = new Float((double) 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      jSONObject0.write(stringWriter3);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.3288274798399655
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      String[] stringArray0 = new String[1];
      Integer.getInteger("par", integer0);
      Integer integer1 = new Integer(92);
      Integer.divideUnsigned(75, 42);
      String string0 = Integer.toUnsignedString(105);
      Integer.toUnsignedString(42);
      Integer.getInteger("$qT1", 1);
      Integer integer2 = new Integer((-1320));
      Integer.min((-2857), 3533);
      Integer.getInteger("par", integer2);
      Integer integer3 = new Integer((-431));
      Integer.getInteger("42", integer3);
      Integer.compareUnsigned((-2857), (-1386));
      Integer.sum(2057, 2570);
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(125);
      StringWriter stringWriter1 = new StringWriter();
      Boolean boolean0 = Boolean.TRUE;
      String string1 = JSONObject.valueToString(boolean0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.979252847575598
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      String[] stringArray0 = new String[1];
      Integer.compareUnsigned((-2857), (-2857));
      Integer integer1 = Integer.getInteger("par", integer0);
      Integer.sum(0, (-2857));
      Integer.divideUnsigned((-2857), (-2857));
      Integer.sum((-2857), 123);
      Integer integer2 = Integer.getInteger("par", integer1);
      Integer.compare((-2857), 123);
      Integer.sum(2, 2);
      Integer.compareUnsigned(2, 0);
      Integer.compareUnsigned(1, (-2734));
      Integer.compareUnsigned(0, 59);
      Integer.sum((-1), 2966);
      Integer integer3 = new Integer(18);
      Integer.getInteger("QS@&c6ZiSRrHdtpA", integer3);
      Integer integer4 = new Integer(4);
      Integer.divideUnsigned(42, 61);
      Integer.getInteger("QS@&c6ZiSRrHdtpA");
      String string0 = Integer.toUnsignedString(61);
      Integer.min(42, (-2857));
      Integer integer5 = Integer.getInteger("&[`.yJI42t", integer1);
      Integer.getInteger("iscompare", integer2);
      JSONObject jSONObject0 = new JSONObject(integer1, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      String string1 = JSONObject.valueToString(integer5);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Object object0 = JSONObject.NULL;
      hashMap0.put("W%n)+6)", "get");
      hashMap0.put("ic@CLR2xuRs", "sZQD[^*oJN");
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.6980077865033694
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "A JSONObject text must end with '}'";
      stringArray0[1] = "isvalueOf";
      stringArray0[2] = "IG#OMv5gwC2";
      stringArray0[3] = "|";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getBoolean("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.977500522076773
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Double double0 = new Double((-1.0));
      Short.toUnsignedInt((short) (-1372));
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      LinkedList<Object> linkedList3 = new LinkedList<Object>(linkedList1);
      linkedList2.poll();
      LinkedList<JSONObject> linkedList4 = new LinkedList<JSONObject>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList4.forEach(consumer0);
      linkedList4.containsAll(linkedList0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Expected a ',' or '}'";
      linkedList3.poll();
      linkedList1.add("\r");
      stringArray0[1] = "\r";
      stringArray0[2] = "Expected a ',' or '}'";
      stringArray0[3] = "Expected a ',' or '}'";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.put("Expected a ',' or '}'", (Collection) linkedList4);
      LinkedList<JSONObject> linkedList5 = new LinkedList<JSONObject>();
      LinkedList<Double> linkedList6 = new LinkedList<Double>();
      linkedList6.poll();
      linkedList4.containsAll(linkedList5);
      LinkedList<Object> linkedList7 = new LinkedList<Object>();
      assertFalse(linkedList7.contains("\r"));
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.7727665642859995
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("false");
      linkedList1.clear();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList2.add((String) null);
      linkedList2.forEach(consumer0);
      linkedList2.add("G1/JO`^AD}N");
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.append("eairnjXR+m124u", (Object) null);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Float.max(1.0F, 1.0F);
      Float.max(0.0F, 0.0F);
      Short short0 = new Short((short)962);
      Double double0 = new Double(0.0);
      Double.max(521.8817292150527, 0.0);
      Double.isFinite(3439.651);
      Double.isFinite(1.0F);
      Double.max(0.0, (-4216.37058038));
      Double.sum(0.0, 3439.651);
      Double.max(1395.452900624736, (-1.0));
      Double.max((-4216.37058038), 521.8817292150527);
      Double.isFinite(1.0F);
      Double.max(0.0, 0.0);
      Double.min(0.0F, 0.0);
      Double.isFinite((-1.0));
      Double.sum(2927.2872423, (-1271.45));
      JSONObject.numberToString(double0);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      Integer.getInteger("fl");
      Float.max(0.0F, 72);
      Short short0 = new Short((short)1);
      Double double0 = new Double((-2857));
      Double.max(0.0F, 0.0);
      Double.isFinite(0.0);
      Double.isFinite(521.8817292150527);
      Double.max(72.0F, (-2857));
      Double.max(0.0, 0.0);
      Double.max(303.0, (short)1);
      Double.isFinite(0.0);
      Double.min(0.0F, 2525.0699);
      Double.sum(72.0F, 0.0);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.52944617385632
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("for", "");
      hashMap0.put("", "");
      hashMap0.put((String) null, (String) null);
      Byte byte0 = new Byte((byte)10);
      Byte byte1 = new Byte((byte)10);
      JSONObject jSONObject1 = jSONObject0.accumulate("m]iH,3", hashMap0);
      jSONObject1.optInt("t2edPy7'9zOnN", (-62164681));
      hashMap0.put("", "sZQD[^*oJN");
      jSONObject0.optDouble((String) null, 3443.0);
      hashMap0.put("^!,3pxy*[yFWj/", "");
      hashMap0.replace((String) null, "=JmhpGFo?'6?DaXWPm9", "sZQD[^*oJN");
      Double double0 = new Double((byte)10);
      Short short0 = new Short((byte)10);
      jSONObject0.put("iU6spush", (Map) hashMap0);
      try { 
        jSONObject0.getLong("Kau");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Kau\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.6510752254850587
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ROdK9RZ", 908L);
      jSONObject0.optInt("ROdK9RZ");
      jSONObject1.optInt("ROdK9RZ", 34);
      jSONObject0.toString(1520, 1520);
      int int0 = (-3663);
      jSONObject0.toString((-3663), (-3663));
      JSONObject.valueToString(object0, 908, 908);
      String string0 = "M~oH/1w<Qp@`jv.;";
      try { 
        jSONObject0.get("M~oH/1w<Qp@`jv.;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"M~oH/1w<Qp@`jv.;\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.4537511280084985
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Function<String, Float> function0 = (Function<String, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Float> function1 = (Function<Object, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Short short0 = new Short((short) (-2683));
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      JSONObject jSONObject1 = jSONObject0.put("Bc|*4", (Collection) linkedList1);
      LinkedList<Object> linkedList2 = new LinkedList<Object>(linkedList0);
      JSONObject jSONObject2 = jSONObject1.put("Bc|*4", (Collection) linkedList1);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      linkedList3.spliterator();
      LinkedList<Short> linkedList4 = new LinkedList<Short>();
      LinkedList<Double> linkedList5 = new LinkedList<Double>();
      JSONObject jSONObject3 = jSONObject1.put("Bc|*4", (Collection) linkedList5);
      jSONObject2.toString(3319);
      String string0 = "ZKqIq:>*Ka";
      jSONObject3.optString("Bc|*4", "Bc|*4");
      linkedList5.retainAll(linkedList0);
      jSONObject3.opt("?gp\"qy\"O@CbM");
      try { 
        jSONObject0.getLong("?gp\"qy\"O@CbM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"?gp\\\"qy\\\"O@CbM\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.5174714039166524
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Float.min(0.0F, (-3055.613F));
      Float.sum((-3055.613F), (-1340.4497F));
      Float.min((-635.8447F), 0.0F);
      Float.min((-3055.613F), 1.0F);
      Float.isFinite(0.0F);
      Float.min((-1.0F), 0.0F);
      Float.isFinite(0.0F);
      Float.max((-1257.8562F), (-816.82935F));
      Byte byte0 = new Byte((byte) (-16));
      String string0 = JSONObject.valueToString(byte0, 3, 47);
      assertNotNull(string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.0044947764125554
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = 1344.260337163868;
      jSONObject0.optInt("x0$o2v=hC5");
      jSONObject0.optLong("x0$o2v=hC5");
      jSONObject0.optDouble("x0$o2v=hC5");
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "__xDv2&2BpJD";
      jSONObject0.optBoolean(">/,$X?d93H>A1");
      jSONObject0.optString("", "__xDv2&2BpJD");
      String string1 = "ma";
      JSONObject jSONObject1 = jSONObject0.put("ma", false);
      jSONObject0.toString(0);
      jSONObject1.optString("__xDv2&2BpJD", "getsum");
      try { 
        jSONObject1.getLong("__xDv2&2BpJD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"__xDv2&2BpJD\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.3328462280962987
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.clear();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.toString(12);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("");
      linkedList1.add("@MG.1fdn@h-P#HK7~^<");
      Double double0 = new Double((-402.853265833043));
      linkedList0.push(double0);
      linkedList1.add("");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) double0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.or(predicate0);
      linkedList0.removeLast();
      linkedList0.add(double0);
      predicate1.negate();
      predicate1.and(predicate0);
      predicate1.or(predicate0);
      predicate1.test(linkedList1);
      predicate1.and(predicate0);
      linkedList0.removeIf(predicate1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "gethasCod";
      stringArray0[2] = "ZmMWvUGOy";
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      String[] stringArray0 = new String[1];
      Integer.compareUnsigned((-2857), (-2857));
      Integer integer1 = Integer.getInteger("par", integer0);
      Integer.divideUnsigned((-2857), (-2857));
      Integer.sum((-2857), 92);
      Integer integer2 = Integer.getInteger("par", integer1);
      Integer.compare((-2857), 92);
      Integer.sum(2, 2);
      Integer.compareUnsigned(2, 0);
      Integer.compareUnsigned(1, (-2765));
      Integer.compareUnsigned(0, 59);
      Integer.sum((-1), 2966);
      Integer integer3 = new Integer(18);
      Integer.getInteger("QS@&c6ZiSRrHdtpA", integer3);
      Integer integer4 = new Integer(4);
      Integer.divideUnsigned(42, 61);
      Integer.toUnsignedString(61);
      Integer.min(42, (-2857));
      Integer.getInteger("&[`.yJI42t", integer1);
      Integer.getInteger("iscompare", integer2);
      JSONObject jSONObject0 = new JSONObject(integer1, stringArray0);
      Long long0 = new Long(213L);
      Integer.getInteger("&[`.yJI42t", integer0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.934551794074474
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Float float0 = new Float(13.60033182561727);
      Float.isFinite(1857.1261F);
      Float.sum(1857.1261F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject.getNames(jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      assertFalse(stringWriter2.equals((Object)stringWriter0));
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.9105042840850266
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.clear();
      linkedList1.stream();
      linkedList1.add("G1/JO`^AD}N");
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      try { 
        jSONObject0.getJSONObject("G1/JO`^AD}N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"G1/JO`^AD}N\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.6237180760658338
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("z`x/IR63f``z{;;xZB");
      jSONTokener0.back();
      JSONObject.quote("] is not a JSONArray.");
      char char0 = 'H';
      JSONTokener jSONTokener1 = new JSONTokener("Null pointer");
      try { 
        jSONTokener1.next('H');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected 'H' and instead saw 'N' at character 1 of Null pointer
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.replace("B+!", "B+!");
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      Integer.compareUnsigned((-2857), (-2857));
      Integer integer1 = Integer.getInteger("par", integer0);
      Integer.divideUnsigned((-2857), (-2857));
      Integer.sum((-2857), 92);
      Integer.getInteger("par", integer1);
      Integer.compare((-2857), 92);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.replace("par", "getsum");
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONArray0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.680421054462574
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      Integer integer1 = new Integer((-2857));
      Integer integer2 = new Integer(92);
      Integer integer3 = new Integer((-2857));
      Integer.toUnsignedString(105);
      Integer.toUnsignedString(42);
      Integer.getInteger("$qT1", 1);
      Integer integer4 = new Integer((-1320));
      Integer.getInteger("$qT1", 8192);
      Integer.toUnsignedLong((-1918));
      Integer.divideUnsigned(2, 2);
      Integer.remainderUnsigned((-431), 32);
      Integer.getInteger("par", integer4);
      Integer integer5 = new Integer((-431));
      Integer.compare((-1349), 1);
      Integer.compare(42, (-2857));
      Integer.getInteger("42", integer5);
      Integer.compareUnsigned((-2857), (-1386));
      Integer integer6 = new Integer(17);
      Integer.divideUnsigned(32, 21);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      boolean boolean0 = jSONObject1.optBoolean("lis");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      String[] stringArray0 = new String[1];
      Integer.getInteger("p#+ar", integer0);
      Integer integer1 = new Integer(92);
      Integer integer2 = new Integer((-2857));
      Integer.toUnsignedString(105);
      Integer.toUnsignedString(42);
      Integer integer3 = new Integer((-1320));
      Integer.remainderUnsigned((-431), 32);
      Integer.getInteger("p#+ar", integer3);
      Integer integer4 = new Integer((-431));
      Integer.sum(25, 46);
      Integer.compare(42, (-2857));
      Integer integer5 = new Integer(32);
      Integer.compareUnsigned((-2857), 92);
      Integer.sum(2057, 2570);
      StringWriter stringWriter0 = new StringWriter(125);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      Integer integer1 = Integer.getInteger("par", integer0);
      Integer.sum((-2857), 92);
      Integer integer2 = Integer.getInteger("par", integer1);
      Integer.sum(3992, (-2765));
      Integer.sum(2, 2);
      Integer.divideUnsigned(42, 61);
      Integer.toUnsignedString(61);
      Integer.getInteger("r!-DTK@27", integer1);
      Integer.getInteger("iscompare", integer2);
      JSONTokener jSONTokener0 = new JSONTokener("");
      jSONTokener0.nextTo("r!-DTK@27");
      jSONTokener0.next();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.291107146863929
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      String[] stringArray0 = new String[1];
      Integer integer1 = Integer.getInteger("par", integer0);
      Integer integer2 = new Integer(92);
      Integer.divideUnsigned(75, 42);
      Integer.toUnsignedString((-431));
      Integer.toUnsignedString((int) integer2);
      Integer.getInteger("92", 1452);
      Integer.getInteger("r!-DTK@27", integer1);
      Integer.getInteger("a&.8OmI-ix+ygfmLn#", integer1);
      Integer.compareUnsigned((int) integer2, 125);
      Integer.sum((-1), (-2270));
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(75);
      JSONObject jSONObject1 = jSONObject0.put("toS", true);
      JSONObject jSONObject2 = new JSONObject(integer1);
      JSONObject jSONObject3 = jSONObject1.put("\r", (double) 92);
      jSONObject3.optLong(": ", (long) 42);
      try { 
        jSONObject3.getLong("#A`:lJ$/t37!>F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#A`:lJ$/t37!>F\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.replace("-1..", "-1..");
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.6758405916075994
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("E*x8~V RSn{v");
      jSONObject0.optLong("x0$o2v=hC5");
      jSONObject0.optDouble("x0$o2v=hC5");
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "__xDv2&2BpJD";
      jSONObject0.optString("", "__xDv2&2BpJD");
      JSONObject jSONObject1 = jSONObject0.put("ma", false);
      jSONObject0.optInt("ma");
      jSONObject0.optLong("__xDv2&2BpJD", 0L);
      jSONObject1.opt("rev");
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.4880268466332423
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      hashMap0.put("", "");
      JSONObject.valueToString("m]iH,3");
      Byte byte0 = new Byte((byte)10);
      Byte byte1 = new Byte((byte)10);
      Object object0 = JSONObject.NULL;
      jSONObject1.accumulate("m]iH,3", object0);
      hashMap0.put("", "sZQD[^*oJN");
      jSONObject1.optDouble((String) null, (double) 0L);
      hashMap0.put("^!,3pxy*[yFWj/", "");
      hashMap0.replace((String) null, (String) null, "sZQD[^*oJN");
      Short.compare((short) (-1556), (short)91);
      jSONObject0.put("ispush", (Map) hashMap0);
      try { 
        jSONObject0.getLong("Kau");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Kau\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.1770631548958486
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      String[] stringArray0 = new String[1];
      Integer.getInteger("par", integer0);
      Integer integer1 = new Integer(92);
      Integer integer2 = new Integer((-2857));
      Integer.toUnsignedString(105);
      Integer.toUnsignedString(42);
      Integer.getInteger("$qT1", 1);
      Integer integer3 = new Integer((-1320));
      Integer.remainderUnsigned((-431), 32);
      Integer.getInteger("par", integer3);
      Integer integer4 = new Integer((-431));
      Integer.compare(42, (-2857));
      Integer.getInteger("42", integer4);
      Integer.compareUnsigned((-2857), (-1386));
      Integer.sum(2057, 2570);
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(125);
      JSONObject jSONObject1 = jSONObject0.put("$qT1", true);
      JSONObject jSONObject2 = new JSONObject(integer0);
      jSONObject1.put("$qT1", (double) (-1));
      Integer integer5 = new Integer((-1386));
      jSONObject0.put("is", (Object) integer5);
      jSONObject1.put("$qT1", (Map) null);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      String[] stringArray0 = new String[1];
      Integer.getInteger("par", integer0);
      Integer integer1 = new Integer(92);
      Integer.divideUnsigned(75, 42);
      Integer.toUnsignedString(105);
      Integer.toUnsignedString(42);
      Integer.getInteger("$qT1", 1);
      Integer integer2 = new Integer((-1320));
      Integer.getInteger("par", integer2);
      Integer integer3 = new Integer((-431));
      Integer.compare(42, (-2857));
      Integer.getInteger("42", integer3);
      Integer.compareUnsigned((-2857), (-1386));
      Integer.sum(2057, 2570);
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(125);
      try { 
        jSONObject0.getString("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      String[] stringArray0 = new String[1];
      Integer.compareUnsigned((-2857), (-2857));
      Integer integer1 = Integer.getInteger("par", integer0);
      Integer.divideUnsigned((-2857), (-2857));
      Integer integer2 = Integer.getInteger("par", integer1);
      Integer.compare((-2857), 92);
      Integer.sum(2, 2);
      Integer.compareUnsigned(2, 0);
      Integer.compareUnsigned(1, 1);
      Integer.compareUnsigned(0, 59);
      Integer.sum((-1), 2966);
      Integer integer3 = new Integer(18);
      Integer.divideUnsigned((-1068), 59);
      Integer.getInteger("QS@&c6ZiSRrHdtpA", integer3);
      Integer.divideUnsigned((-674), 35);
      Integer integer4 = new Integer(4);
      Integer.divideUnsigned(42, 61);
      Integer.toUnsignedString(61);
      Integer.min(42, (-2857));
      Integer.getInteger("&[`.yJI42t", integer1);
      Integer.getInteger("iscompare", integer2);
      JSONObject jSONObject0 = new JSONObject(integer1, stringArray0);
      Long long0 = new Long(213L);
      Integer.getInteger("&[`.yJI42t", integer0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "z`x/IR63z{;;xZB";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("z`x/IR63z{;;xZB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of z`x/IR63z{;;xZB
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Float.min(0.0F, (-3055.613F));
      Float.sum((-3055.613F), (-1340.4497F));
      Float.sum((-4396.0625F), (-3055.613F));
      Float.sum(0.0F, 0.0F);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.6415101036970383
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Integer integer0 = new Integer((-2857));
      Integer.getInteger("fl");
      Integer.toUnsignedLong(72);
      Integer.compare(72, (-2857));
      Integer.getInteger("p#+auvr", integer0);
      Integer integer1 = new Integer(92);
      Integer integer2 = new Integer((-2857));
      Integer.toUnsignedString(133);
      Integer.toUnsignedString(42);
      Integer.getInteger("~q-KQM,", 1);
      Integer integer3 = new Integer((-1320));
      Integer.toUnsignedLong((-3786));
      Integer.divideUnsigned(42, 42);
      Integer integer4 = new Integer((-458));
      Integer.toUnsignedLong(42);
      Integer.divideUnsigned(422, 42);
      Integer.remainderUnsigned((-458), 32);
      Integer integer5 = Integer.getInteger("p#+auvr", integer3);
      Integer integer6 = new Integer((-458));
      Long long0 = new Long(42);
      Integer integer7 = new Integer(1);
      Long long1 = new Long((-458));
      JSONObject.quote("j1 03~fx*sSBQ");
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject(integer5);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "z`x/IR63z{;xZB";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("z`x/IR63z{;xZB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of z`x/IR63z{;xZB
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
