/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 00:25:21 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.datatransfer.DataFlavor;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Random;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.ASEvaluation;
import weka.attributeSelection.InfoGainAttributeEval;
import weka.attributeSelection.ReliefFAttributeEval;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.IntervalEstimator;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.evaluation.output.prediction.HTML;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.pmml.consumer.GeneralRegression;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.PART;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.M5P;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.HierarchicalClusterer;
import weka.clusterers.MakeDensityBasedClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ManhattanDistance;
import weka.core.SparseInstance;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.tokenizers.WordTokenizer;
import weka.estimators.PoissonEstimator;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9562750754972638
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (-1694.623682693);
      doubleArray0[3] = (-1694.623682693);
      doubleArray0[4] = (-1694.623682693);
      SparseInstance sparseInstance0 = new SparseInstance((-1694.623682693), doubleArray0);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2614342352291943
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.SFMeanEntropyGain();
      evaluation0.addNumericTrainClass(1314.732688334, 1.7976931348623157E308);
      try { 
        evaluation0.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      evaluation0.KBRelativeInformation();
      int[] intArray0 = new int[9];
      intArray0[4] = (-284810110);
      intArray0[1] = 21;
      intArray0[2] = (-284810110);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(0);
      CostMatrix costMatrix2 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix3 = new CostMatrix(costMatrix2);
      SparseInstance sparseInstance0 = new SparseInstance(2394);
      try { 
        costMatrix0.expectedCosts((double[]) null, (Instance) sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.5747520671878643
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      testInstances1.getOptions();
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation1.m_SumPriorSqrErr;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      testInstances1.setNumInstancesRelational(2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      testInstances1.setNumInstancesRelational(117);
      instances0.deleteStringAttributes();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      OneR oneR0 = new OneR();
      evaluation1.weightedFalseNegativeRate();
      evaluation1.numTruePositives(1);
      evaluation0.toClassDetailsString("@relation");
      evaluation0.matthewsCorrelationCoefficient((-1));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0825499218803545
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setOptions((String[]) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalString((-1510));
      evaluation0.weightedMatthewsCorrelation();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedAreaUnderPRC();
      evaluation1.numTrueNegatives(0);
      Evaluation evaluation2 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation1.equals(evaluation2);
      evaluation0.weightedFalseNegativeRate();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 3;
      intArray0[4] = 1;
      intArray0[5] = 3;
      intArray0[6] = (-542);
      intArray0[7] = (-1639);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, intArray0, (-1510));
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-2314));
      evaluation2.meanPriorAbsoluteError();
      evaluation3.SFEntropyGain();
      evaluation3.unweightedMacroFmeasure();
      evaluation0.numFalsePositives((-542));
      evaluation0.trueNegativeRate((-1314));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7221489918454203
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@relation";
      stringArray0[4] = "@data";
      stringArray0[5] = "@data";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      stringArray0[6] = ".bsi";
      stringArray0[7] = ".arff";
      textDirectoryLoader0.setOptions(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-70);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("+$f#Z#D7LJ;~JhC", arrayList0, 3483);
      try { 
        evaluation1.crossValidateModel((Classifier) costSensitiveClassifier0, instances1, (-1028), (Random) mockRandom0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.927443505539352
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities1 = infoGainAttributeEval0.getCapabilities();
      capabilities1.enableAllClassDependencies();
      ReliefFAttributeEval reliefFAttributeEval1 = new ReliefFAttributeEval();
      reliefFAttributeEval1.setWeightByDistance(true);
      String[] stringArray0 = new String[0];
      reliefFAttributeEval1.setOptions(stringArray0);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumInstancesRelational(13);
      Evaluation evaluation0 = new Evaluation(instances0);
      ReliefFAttributeEval reliefFAttributeEval2 = new ReliefFAttributeEval();
      ReliefFAttributeEval reliefFAttributeEval3 = new ReliefFAttributeEval();
      reliefFAttributeEval3.setOptions(testInstances1.DEFAULT_WORDS);
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.668803800330735
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(19);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile.createTempFile("`AW#", "setNumFolds");
      Instances instances1 = textDirectoryLoader2.getStructure();
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation1.m_SumSqrPredicted;
      evaluation1.fMeasure(125);
      evaluation0.unweightedMicroFmeasure();
      evaluation1.areaUnderPRC((-2));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0698094918813856
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOptions((String[]) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation0.m_SumSchemeEntropy;
      evaluation0.kappa();
      HTML hTML0 = new HTML();
      hTML0.setHeader(instances0);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8572425591712434
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOptions((String[]) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation0.m_SumSchemeEntropy;
      evaluation0.kappa();
      HTML hTML0 = new HTML();
      hTML0.setHeader(instances0);
      MockFile mockFile0 = new MockFile(".bsi");
      mockFile0.mkdir();
      hTML0.getOutputFile();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      testInstances0.setClassType(1423);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, ".arff");
      testInstances0.setSeed(522);
      evaluation0.numFalsePositives(496);
      evaluation0.precision(18);
      evaluation1.falsePositiveRate((-2));
      evaluation1.pctIncorrect();
      evaluation1.toMatrixString();
      evaluation1.weightedTrueNegativeRate();
      evaluation0.numFalseNegatives((-1));
      evaluation0.falseNegativeRate(77);
      evaluation1.weightedTrueNegativeRate();
      // Undeclared exception!
      try { 
        evaluation1.fMeasure(602);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 602
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.479212031279018
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      ReliefFAttributeEval reliefFAttributeEval1 = new ReliefFAttributeEval();
      testInstances0.setNumRelational(14);
      reliefFAttributeEval1.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances0.setNumInstancesRelational(27);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "r)D~HL]=`%Q)z+Ckk#");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-1));
      Evaluation evaluation1 = new Evaluation(instances0);
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      evaluation0.equals(evaluation1);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.trueNegativeRate(10);
      evaluation1.areaUnderROC(10);
      evaluation0.numFalsePositives(27);
      ReliefFAttributeEval reliefFAttributeEval2 = new ReliefFAttributeEval();
      evaluation0.numFalseNegatives(14);
      evaluation0.falseNegativeRate(14);
      evaluation1.weightedTrueNegativeRate();
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6203895206310386
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      int[] intArray0 = new int[9];
      intArray0[4] = (-284810110);
      intArray0[1] = 21;
      intArray0[2] = (-284810110);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix0 = new CostMatrix(0);
      CostMatrix costMatrix1 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix2 = new CostMatrix(costMatrix1);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.KBMeanInformation();
      evaluation0.numFalsePositives((-284810110));
      evaluation0.rootMeanPriorSquaredError();
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation1.precision((-1308));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6702528565784673
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      REPTree rEPTree0 = new REPTree();
      Capabilities capabilities0 = rEPTree0.getCapabilities();
      capabilities0.setMinimumNumberInstances(13);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumInstancesRelational(13);
      testInstances0.setNumInstancesRelational((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.m_SumPriorSqrErr;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      File file0 = MockFile.createTempFile("&I#+#$\"['3\r<M+", "missingModeTipText");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-221));
      evaluation0.makeDistribution(0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.582160402760742
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/setNumFolds0.tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".arff";
      File file0 = MockFile.createTempFile("setNumFolds", (String) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numFalsePositives(0);
      evaluation0.precision(2);
      evaluation0.falseNegativeRate(0);
      evaluation0.precision((-520));
      evaluation1.rootMeanPriorSquaredError();
      evaluation0.SFMeanPriorEntropy();
      evaluation1.meanPriorAbsoluteError();
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.069809491881386
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOptions((String[]) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation0.m_SumSchemeEntropy;
      evaluation0.kappa();
      HTML hTML0 = new HTML();
      hTML0.setHeader(instances0);
      MockFile mockFile0 = new MockFile("@relation", ".bsi");
      mockFile0.mkdir();
      hTML0.getOutputFile();
      int int0 = 1423;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      try { 
        evaluation1.evaluateModelOnce((-1482.9), (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1482
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7896656513804965
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities1 = infoGainAttributeEval0.getCapabilities();
      capabilities1.enableAllClassDependencies();
      ReliefFAttributeEval reliefFAttributeEval1 = new ReliefFAttributeEval();
      String[] stringArray0 = new String[0];
      reliefFAttributeEval1.setOptions(stringArray0);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumInstancesRelational(13);
      Evaluation evaluation0 = new Evaluation(instances0);
      ReliefFAttributeEval reliefFAttributeEval2 = new ReliefFAttributeEval();
      ReliefFAttributeEval reliefFAttributeEval3 = new ReliefFAttributeEval();
      reliefFAttributeEval3.setOptions(testInstances1.DEFAULT_WORDS);
      int int0 = 2513;
      try { 
        evaluation0.toMatrixString("threshold-file");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setOptions(testInstances0.DEFAULT_WORDS);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedMatthewsCorrelation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4563519911901963
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      ReliefFAttributeEval reliefFAttributeEval1 = new ReliefFAttributeEval();
      testInstances0.setNumRelational(14);
      reliefFAttributeEval1.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances0.setNumInstancesRelational(27);
      capabilities0.clone();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-1));
      Evaluation evaluation1 = new Evaluation(instances0);
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      evaluation0.equals(evaluation1);
      MockRandom mockRandom0 = new MockRandom();
      evaluation1.KBRelativeInformation();
      evaluation0.trueNegativeRate(10);
      evaluation1.areaUnderROC(10);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      evaluation0.numFalsePositives(27);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForIntervalEstimator((IntervalEstimator) null, (Instance) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7094458197175146
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      int int0 = 19;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumClasses = 19;
      // Undeclared exception!
      try { 
        evaluation0.numTrueNegatives(19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      C45Loader c45Loader0 = new C45Loader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\tUses the specified class for generating the classification output.\n";
      stringArray0[1] = "@data";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@data";
      stringArray0[4] = "@relation";
      stringArray0[5] = "@relation";
      reliefFAttributeEval0.setOptions(stringArray0);
      testInstances0.setNumInstancesRelational(18);
      TestInstances testInstances1 = new TestInstances();
      int int0 = 0;
      testInstances0.setNumInstancesRelational(15);
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.setWordSeparators("$_xm=1QQc1`-4@");
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 0;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 77.3796353244);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8913741235084864
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 25;
      intArray0[2] = (-1154);
      intArray0[3] = (-1);
      intArray0[4] = (-2);
      intArray0[5] = (-2);
      intArray0[6] = (-2);
      intArray0[7] = (-9);
      reliefFAttributeEval0.postProcess(intArray0);
      reliefFAttributeEval0.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances0.setNumInstancesRelational(108);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(40);
      CostMatrix costMatrix2 = new CostMatrix(costMatrix0);
      costSensitiveClassifier0.setMinimizeExpectedCost(true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Stacking stacking0 = new Stacking();
      DecisionStump decisionStump0 = new DecisionStump();
      AbstractClassifier.makeCopy(decisionStump0);
      textDirectoryLoader0.setOutputFilename(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 22.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".arff";
      stringArray0[1] = "\tThe class label to determine the threshold data for\n\t(default is the first label)\n";
      int[] intArray0 = new int[0];
      Instance instance0 = BallNode.calcCentroidPivot(0, (-924), intArray0, instances0);
      try { 
        evaluation0.updatePriors(instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6013501489235202
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumInstancesRelational(2);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      OneR oneR0 = new OneR();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.numTruePositives(2);
      evaluation0.toSummaryString(true);
      evaluation0.weightedAreaUnderROC();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) 2;
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.922476324058603
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      Version.VERSION = null;
      evaluation1.weightedMatthewsCorrelation();
      double double0 = evaluation0.m_SumPriorSqrErr;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      testInstances0.setNumInstancesRelational(0);
      testInstances0.setNumInstancesRelational(694);
      Evaluation evaluation2 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.falseNegativeRate(1);
      evaluation0.precision(1);
      Evaluation evaluation4 = new Evaluation(instances0);
      Evaluation evaluation5 = new Evaluation(instances0, (CostMatrix) null);
      evaluation5.trueNegativeRate(1185);
      evaluation1.setPriors(instances0);
      // Undeclared exception!
      try { 
        evaluation5.truePositiveRate(99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7896656513804965
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      C45Loader c45Loader0 = new C45Loader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      capabilities0.enableAllClassDependencies();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      int[] intArray0 = new int[5];
      intArray0[0] = 29;
      intArray0[1] = (-2);
      intArray0[2] = 29;
      intArray0[3] = (-2);
      intArray0[4] = 29;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4390.0, intArray0, 29);
      binarySparseInstance0.setMissing(45);
      ArrayList<BinarySparseInstance> arrayList0 = new ArrayList<BinarySparseInstance>();
      arrayList0.add(binarySparseInstance0);
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7085549222046321
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      C45Loader c45Loader0 = new C45Loader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      capabilities0.enableAllClassDependencies();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      reliefFAttributeEval0.setOptions(testInstances0.DEFAULT_WORDS);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumInstancesRelational((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      ReliefFAttributeEval reliefFAttributeEval1 = new ReliefFAttributeEval();
      reliefFAttributeEval1.setOptions(testInstances0.DEFAULT_WORDS);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      findWithCapabilities1.getMatches();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(pipedInputStream0);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(pipedInputStream0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3215850110353817
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1176);
      instances0.add((Instance) binarySparseInstance0);
      String[] stringArray0 = new String[7];
      evaluation0.KBRelativeInformation();
      stringArray0[0] = ".arff";
      stringArray0[1] = "\tThe class label to determine the threshold data for\n\t(defaul{ is the firs' label)\n";
      XML xML0 = new XML();
      evaluation0.addNumericTrainClass(2301.4014737272, Double.NaN);
      evaluation0.priorEntropy();
      try { 
        evaluation0.setPriors(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.518018980164001
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumInstancesRelational(44);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.relativeAbsoluteError();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      capabilities0.disableDependency(capabilities_Capability0);
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.getClassPriors();
      instances0.deleteStringAttributes();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      findWithCapabilities0.getMatches();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(pipedInputStream0);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(pipedInputStream0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation1.priorEntropy();
      assertEquals(1.0, double1, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.getHeader();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7896656513804965
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      C45Loader c45Loader0 = new C45Loader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      capabilities0.enableAllClassDependencies();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      reliefFAttributeEval0.setOptions(testInstances0.DEFAULT_WORDS);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumInstancesRelational((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      ReliefFAttributeEval reliefFAttributeEval1 = new ReliefFAttributeEval();
      reliefFAttributeEval1.setOptions(testInstances0.DEFAULT_WORDS);
      int[] intArray0 = new int[3];
      intArray0[0] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), intArray0, 25);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) simpleLinearRegression0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.1348613431306016
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      C45Loader c45Loader0 = new C45Loader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      reliefFAttributeEval0.setOptions(testInstances0.DEFAULT_WORDS);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumInstancesRelational((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      ReliefFAttributeEval reliefFAttributeEval1 = new ReliefFAttributeEval();
      reliefFAttributeEval1.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances0.setNumInstancesRelational((-1018));
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation1 = new Evaluation(instances0);
      TextDirectoryLoader.main(testInstances1.DEFAULT_WORDS);
      double double0 = evaluation1.m_SumClass;
      // Undeclared exception!
      try { 
        evaluation0.weightedFalseNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5941455466789765
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      reliefFAttributeEval0.setOptions(testInstances1.DEFAULT_WORDS);
      testInstances0.setNumInstancesRelational((-2));
      testInstances1.setNumInstancesRelational(12);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      OneR oneR0 = new OneR();
      RandomSubSpace randomSubSpace1 = new RandomSubSpace();
      evaluation0.equals(randomSubSpace1);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      wrapperSubsetEval0.getClassifier();
      MockRandom mockRandom0 = new MockRandom();
      testInstances1.setNumDate(6);
      double double0 = evaluation0.weightedFalsePositiveRate();
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.truePositiveRate(1);
      double double2 = evaluation1.errorRate();
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = evaluation1.weightedRecall();
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.1049561813316413
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/setNumFolds0.tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".arff";
      stringArray0[1] = "\tThe class label to determine the threshold data for\n\t(default is the first label)\n";
      File file0 = MockFile.createTempFile("setNumFolds", (String) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      mockFileInputStream0.read();
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      evaluation0.numFalsePositives(0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      wrapperSubsetEval0.setClassifier(naiveBayesMultinomialUpdateable0);
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      intArray0[1] = 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = 0.0;
      evaluation0.updateMargins(doubleArray0, 6, 6);
      double double0 = evaluation0.avgCost();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".arff";
      stringArray0[1] = "\tThe class label to determine the threshold data for\n\t(default is the first label)\n";
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 506);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 506;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) 506;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1750
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.298336844925839
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTrueNegatives(19);
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4570.2578878);
      doubleArray0[1] = (-4570.2578878);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 19;
      FileSystemHandling.shouldAllThrowIOExceptions();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      evaluation1.truePositiveRate(1);
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation1.recall(3);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.0215116483972424
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      MockRandom mockRandom0 = new MockRandom((-1788L));
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.kappa();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      File file0 = MockFile.createTempFile("lnFactorial", "qGY#/moP6U");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(mockFileInputStream0);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(mockFileInputStream0);
      converterUtils_DataSource1.nextElement(instances0);
      MockRandom mockRandom1 = new MockRandom();
      Instances instances1 = instances0.resample(mockRandom0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "costMatrixTipText");
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.confusionMatrix();
      evaluation0.numFalsePositives(1);
      evaluation1.precision(1);
      evaluation0.fMeasure((-1));
      try { 
        evaluation0.evaluateModelOnce((Classifier) regressionByDiscretization0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.2392975734197402
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      ReliefFAttributeEval reliefFAttributeEval1 = new ReliefFAttributeEval();
      testInstances0.setNumRelational(14);
      reliefFAttributeEval1.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances0.setNumInstancesRelational(27);
      capabilities0.clone();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-1));
      Evaluation evaluation1 = new Evaluation(instances0);
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      evaluation0.equals(evaluation1);
      MockRandom mockRandom0 = new MockRandom();
      evaluation1.useNoPriors();
      evaluation0.trueNegativeRate(10);
      evaluation1.areaUnderROC(10);
      testInstances0.getOptions();
      evaluation0.falseNegativeRate((-1160134845));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<!-- globalinfo-end -->");
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Attribute attribute0 = new Attribute("@data", vector0, 11);
      // Undeclared exception!
      try { 
        evaluation1.truePositiveRate(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.8614841921301504
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      int[] intArray0 = new int[9];
      intArray0[0] = (-284810110);
      intArray0[1] = 21;
      intArray0[2] = (-284810110);
      intArray0[3] = (-284810110);
      intArray0[4] = (-284810110);
      intArray0[5] = (-284810110);
      intArray0[6] = (-284810110);
      intArray0[7] = (-3732);
      intArray0[8] = (-3732);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4390.0, intArray0, 29);
      binarySparseInstance0.setMissing((-3732));
      ArrayList<BinarySparseInstance> arrayList0 = new ArrayList<BinarySparseInstance>();
      arrayList0.add(binarySparseInstance0);
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.KBMeanInformation();
      evaluation0.numFalsePositives(29);
      evaluation0.rootMeanPriorSquaredError();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) (-3732);
      doubleArray0[2] = 2.0;
      doubleArray0[3] = (double) 21;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.7223505511918153
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      ArrayList<BinarySparseInstance> arrayList0 = new ArrayList<BinarySparseInstance>();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.setNumericPriorsFromBuffer();
      double double0 = evaluation0.weightedFMeasure();
      double double1 = evaluation1.SFPriorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      LWL lWL0 = new LWL();
      double double2 = evaluation0.weightedAreaUnderROC();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6057674083963365
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".arff";
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      Evaluation evaluation3 = new Evaluation(instances0);
      ManhattanDistance manhattanDistance0 = new ManhattanDistance(instances0);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      evaluation3.equals(votedPerceptron0);
      evaluation1.getRevision();
      evaluation3.KBInformation();
      evaluation2.weightedFalseNegativeRate();
      evaluation0.weightedFalsePositiveRate();
      double double0 = evaluation3.m_TotalCost;
      try { 
        evaluation3.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.767222861007734
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(19);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      File file0 = MockFile.createTempFile("W#", "setNumFolds");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.numFalsePositives(19);
      evaluation1.precision(19);
      DenseInstance denseInstance0 = new DenseInstance(1111);
      double double1 = evaluation1.trueNegativeRate((-820));
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation1.matthewsCorrelationCoefficient(1111);
      double double3 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.3672091045708012
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ck}<pDT";
      stringArray0[1] = "ck}<pDT";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      Evaluation.getGlobalInfo(jRip0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix0 = new CostMatrix(1);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      costSensitiveClassifier0.setMinimizeExpectedCost(true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      AbstractClassifier.makeCopy(jRip0);
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setOutputFilename(true);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.4737694320169776
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.m_WithClass = 0.0;
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double1, 0.01);
      
      String string0 = evaluation0.toSummaryString(".arff", true);
      assertEquals(".arff\nTotal Number of Instances                0     \n", string0);
      
      double double2 = evaluation0.SFEntropyGain();
      double double3 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      evaluation0.rootMeanSquaredError();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-531.58);
      doubleArray0[1] = (-1.7976931348623157E308);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.6405011087214914
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("qbo");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = new Integer((-2));
      evaluation0.kappa();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      testInstances0.setNumInstancesRelational(13);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumInstancesRelational(66);
      Evaluation evaluation2 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      OneR oneR0 = new OneR();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      evaluation1.equals((Object) null);
      double double1 = evaluation2.m_SumClass;
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.weightedFalseNegativeRate();
      double double2 = evaluation2.m_TotalCost;
      evaluation3.m_ConfusionMatrix = null;
      evaluation3.toSummaryString(true);
      // Undeclared exception!
      try { 
        evaluation3.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.130089501857903
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray1);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumInstancesRelational((-773));
      testInstances0.setNumInstancesRelational((-773));
      MockRandom mockRandom0 = new MockRandom();
      Instances instances0 = testInstances0.generate("weka/gui/GenericPropertiesCreator.excludes");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-3571));
      PoissonEstimator poissonEstimator0 = new PoissonEstimator();
      Capabilities capabilities0 = poissonEstimator0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.getOptions();
      evaluation0.falseNegativeRate((-773));
      // Undeclared exception!
      try { 
        evaluation0.precision(3518);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3518
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.461934648705106
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=== Summary ===\n");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.precision(14);
      double double1 = evaluation0.sizeOfPredictedRegions();
      double double2 = evaluation0.falseNegativeRate(14);
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(double3, double1, 0.01);
      
      evaluation0.setDiscardPredictions(false);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertFalse(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.619085894695714
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      C45Loader c45Loader0 = new C45Loader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      Locale.getISOCountries();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getStructure();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.precision(19);
      double double2 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double2, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 19;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 789;
      intArray0[4] = 4;
      intArray0[5] = 22;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3719.136, intArray0, 4);
      double double3 = evaluation1.trueNegativeRate(22);
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double1, 0.01);
      
      double double4 = evaluation1.weightedFMeasure();
      assertEquals(double4, double0, 0.01);
      
      double double5 = evaluation0.avgCost();
      assertEquals(double5, double4, 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumInstancesRelational(27);
      testInstances0.setNumInstancesRelational(27);
      instances0.deleteStringAttributes();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getMatches();
      Attribute attribute0 = new Attribute("setOptions", (List<String>) null, 2183);
      instances0.setClass(attribute0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2183, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.561569578955495
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      reliefFAttributeEval0.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances0.setNumInstancesRelational(27);
      testInstances0.setNumInstancesRelational(27);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(0.0, (-1482.9));
      evaluation0.toClassDetailsString();
      evaluation0.m_ComplexityStatisticsAvailable = false;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.equals(evaluation0);
      double double0 = evaluation0.m_SumClass;
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.listOptions();
      evaluation1.m_WithClass = (-1554.2991668094974);
      wrapperSubsetEval0.getClassifier();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Evaluation.getGlobalInfo(simpleLinearRegression0);
      evaluation1.pctUnclassified();
      evaluation1.weightedMatthewsCorrelation();
      Instances instances1 = null;
      try {
        instances1 = new Instances(instances0, 6, 27);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameters first and/or toCopy out of range
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.5114184053114665
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      OneR oneR0 = new OneR();
      RandomSubSpace randomSubSpace1 = new RandomSubSpace();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      evaluation0.equals(randomSubSpace1);
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      double double1 = evaluation0.weightedFalseNegativeRate();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "@relation");
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WrapperSubsetEval wrapperSubsetEval1 = new WrapperSubsetEval();
      WrapperSubsetEval wrapperSubsetEval2 = new WrapperSubsetEval();
      wrapperSubsetEval2.globalInfo();
      WrapperSubsetEval wrapperSubsetEval3 = new WrapperSubsetEval();
      wrapperSubsetEval3.setThreshold(5);
      wrapperSubsetEval0.getClassifier();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.weightedFalsePositiveRate();
      MockRandom mockRandom1 = new MockRandom();
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.SFPriorEntropy();
      assertNotEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.9574227041064718
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.64887241017483
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      reliefFAttributeEval0.setOptions(testInstances0.DEFAULT_WORDS);
      int int0 = 27;
      testInstances0.setNumInstancesRelational(27);
      testInstances0.setNumInstancesRelational(27);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString();
      ArrayList<BinarySparseInstance> arrayList0 = new ArrayList<BinarySparseInstance>();
      try { 
        evaluation0.evaluateModelOnce(1.0E-12, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.047838753550796
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      testInstances1.getOptions();
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation1.m_SumPriorSqrErr;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      testInstances1.setNumInstancesRelational(2);
      testInstances1.setNumInstancesRelational(117);
      instances0.deleteStringAttributes();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      OneR oneR0 = new OneR();
      double double2 = evaluation1.weightedFalseNegativeRate();
      assertEquals(double2, double0, 0.01);
      
      evaluation1.numTruePositives(1);
      String string0 = evaluation1.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOptions((String[]) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".arff";
      stringArray0[1] = "\tThe class label to determine the threshold data for\n\t(default is the first label)\n";
      Evaluation evaluation0 = new Evaluation(instances0);
      ArrayList<BinarySparseInstance> arrayList0 = new ArrayList<BinarySparseInstance>();
      int[] intArray0 = new int[4];
      int int0 = (-197112209);
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = 'H';
      charArray0[2] = '#';
      charArray0[3] = '$';
      charArray0[4] = ']';
      charArray0[5] = '~';
      charArray0[6] = 'S';
      charArray0[7] = '\\';
      charArray0[8] = '-';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1499), charArray0, 984);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8857926102845326
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = (-801);
      evaluation0.numFalseNegatives((-801));
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumInstancesRelational(901);
      Instances instances1 = testInstances0.generate();
      ArrayList<BinarySparseInstance> arrayList0 = new ArrayList<BinarySparseInstance>();
      Evaluation evaluation1 = new Evaluation(instances1);
      testInstances0.setNumNumeric(489);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.equals(evaluation1);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        CostMatrix.parseMatlab("@data");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.9841150531920158
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
      
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.getOptions();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setSource(file0);
      XML xML0 = new XML();
      xML0.setNumDecimals(19);
      double double1 = evaluation0.recall(479);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertEquals(0, doubleArray0.length);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation.handleCostOption((String) null, 3663);
      textDirectoryLoader0.setOutputFilename(false);
      double double2 = evaluation0.falseNegativeRate(1940);
      assertEquals(0.0, double2, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.precision(15);
      double double3 = evaluation1.errorRate();
      assertEquals(double3, double0, 0.01);
      
      evaluation1.setDiscardPredictions(true);
      assertEquals(Double.NaN, evaluation1.errorRate(), 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.4922963932744846
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      evaluation0.m_TotalCost = (-70.0);
      Object[][] objectArray0 = new Object[9][8];
      objectArray0[0] = (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE;
      objectArray0[1] = (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE;
      objectArray0[2] = (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE;
      objectArray0[3] = (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE;
      objectArray0[4] = (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE;
      objectArray0[5] = (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE;
      objectArray0[6] = (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE;
      objectArray0[7] = (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      MockRandom mockRandom0 = new MockRandom();
      evaluation1.weightedFalsePositiveRate();
      int[] intArray0 = new int[4];
      intArray0[0] = 4;
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-966.0), intArray0, 5);
      try { 
        evaluation0.evaluateModelOnce((Classifier) costSensitiveClassifier0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PART pART0 = new PART();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      J48 j48_0 = new J48();
      int[] intArray0 = new int[4];
      intArray0[0] = 18;
      intArray0[1] = (-1756);
      intArray0[2] = (-1756);
      intArray0[3] = (-1844888273);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.5, intArray0, (-1756));
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) j48_0, (Instance) binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.697583729572745
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".arff";
      stringArray0[1] = "\tThe class label to determine the threshold data for\n\t(default is the first label)\n";
      Evaluation evaluation0 = new Evaluation(instances0);
      ArrayList<BinarySparseInstance> arrayList0 = new ArrayList<BinarySparseInstance>();
      int[] intArray0 = new int[4];
      evaluation0.areaUnderPRC((-197112209));
      intArray0[0] = 1703;
      intArray0[1] = 20;
      intArray0[2] = (-1157);
      intArray0[3] = (-559);
      Evaluation evaluation1 = new Evaluation(instances0);
      assertTrue(evaluation1.equals((Object)evaluation0));
      
      boolean boolean0 = evaluation0.equals(arrayList0);
      assertFalse(boolean0);
      
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.trueNegativeRate(1703);
      assertEquals(0.0, double0, 0.01);
      
      evaluation1.areaUnderROC(20);
      double double1 = evaluation0.precision((-197112209));
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-559);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-559);
      doubleArray0[3] = (double) 20;
      double double2 = evaluation0.falseNegativeRate(43);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation1.numInstances();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.47282789489247
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/setNumFolds0.tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".arff";
      File file0 = MockFile.createTempFile("setNumFolds", (String) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numFalsePositives(0);
      evaluation0.precision(2);
      evaluation0.falseNegativeRate(0);
      evaluation0.precision((-520));
      evaluation1.rootMeanPriorSquaredError();
      evaluation1.KBMeanInformation();
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.1343143726811404
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      REPTree rEPTree0 = new REPTree();
      Capabilities capabilities0 = rEPTree0.getCapabilities();
      capabilities0.setMinimumNumberInstances(13);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumInstancesRelational(13);
      testInstances0.setNumInstancesRelational((-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      instances0.deleteStringAttributes();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      evaluation0.toMatrixString("weka/core/Capabilities.props");
      DenseInstance denseInstance0 = new DenseInstance(13);
      evaluation0.priorEntropy();
      evaluation0.setPriors(instances0);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(4, doubleArray0.length);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.9263548464292743
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=== Summary ===\n");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_DiscardPredictions = true;
      evaluation0.m_MinTarget = 0.0;
      evaluation0.numTrueNegatives((-1456561308));
      Evaluation.main((String[]) null);
      LWL lWL0 = new LWL();
      Classifier classifier0 = lWL0.getClassifier();
      try { 
        evaluation0.evaluateModel(classifier0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PART pART0 = new PART();
      Capabilities capabilities0 = new Capabilities(pART0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      int[] intArray0 = new int[8];
      intArray0[0] = (-2);
      intArray0[1] = (-1);
      intArray0[2] = (-2);
      intArray0[3] = (-2);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-2);
      reliefFAttributeEval0.postProcess(intArray0);
      reliefFAttributeEval0.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances0.setNumInstancesRelational((-1339));
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNoClass(false);
      TestInstances testInstances2 = new TestInstances();
      testInstances2.setNumInstancesRelational((-341));
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      TestInstances testInstances3 = new TestInstances();
      testInstances0.assign(testInstances3);
      testInstances1.setWordSeparators("geKRevisio5");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1339);
      doubleArray0[3] = 4390.0;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = (double) (-341);
      doubleArray0[8] = 0.02500000037252903;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1.0));
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.5806789212792607
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".N)eaecr`%L%{ec-");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTrueNegatives(19);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile1);
      File file0 = MockFile.createTempFile("W#", "setNumFolds");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.numFalsePositives(19);
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation1.precision(19);
      textDirectoryLoader2.listOptions();
      DenseInstance denseInstance0 = new DenseInstance(1111);
      double double3 = evaluation0.numTruePositives((-1320));
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation1.truePositiveRate(76);
      assertEquals(double4, double2, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.4438656505524006
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      MultiScheme multiScheme0 = new MultiScheme();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "<!-- globalinfo-start -->";
      stringArray0[2] = "<!-- globalinfo-start -->";
      stringArray0[3] = "globalInfo";
      AbstractClassifier.runClassifier(multiScheme0, stringArray0);
      evaluation0.equals(multiScheme0);
      evaluation0.trueNegativeRate(1);
      evaluation0.numFalsePositives(60);
      evaluation0.numTrueNegatives(10);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, (Instance) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.9140273284145395
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getModelFile();
      evaluation0.toCumulativeMarginDistributionString();
      LinkedHashSet<String> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<String>((-1642));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1642
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.4347240733919024
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      BayesNet bayesNet0 = new BayesNet();
      Capabilities capabilities0 = bayesNet0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumInstancesRelational(22);
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.relativeAbsoluteError();
      evaluation0.SFMeanEntropyGain();
      evaluation0.getClassPriors();
      instances0.deleteStringAttributes();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      findWithCapabilities0.getMatches();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(pipedInputStream0);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(pipedInputStream0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.priorEntropy();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.148815922340797
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTrueNegatives(19);
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4570.2578878);
      doubleArray0[1] = (-4570.2578878);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 19;
      FileSystemHandling.shouldAllThrowIOExceptions();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      evaluation1.truePositiveRate(1);
      double double1 = evaluation1.truePositiveRate(19);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.totalCost();
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.130089501857903
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances1.getOptions();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      testInstances1.setNumInstancesRelational(2);
      testInstances1.setNumInstancesRelational(117);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.trueNegativeRate(2);
      TestInstances.forCapabilities(capabilities0);
      testInstances0.getOptions();
      evaluation0.falseNegativeRate((-2));
      // Undeclared exception!
      try { 
        evaluation0.precision((-1607));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1607
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.456028899949064
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_SumKBInfo;
      evaluation0.kappa();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      File file0 = MockFile.createTempFile("weka/core/Capabilities.props", "?");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      evaluation0.weightedFalseNegativeRate();
      evaluation1.m_Correct = (-6.78214234);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WrapperSubsetEval wrapperSubsetEval1 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      MockRandom mockRandom0 = new MockRandom();
      evaluation1.weightedFalsePositiveRate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedReader pipedReader0 = new PipedReader();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.3127191813662296
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@relation";
      stringArray0[4] = "@data";
      stringArray0[5] = "@data";
      stringArray0[6] = ".bsi";
      stringArray0[7] = ".arff";
      textDirectoryLoader0.setOptions(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[7];
      evaluation0.toMatrixString(".bsi");
      Class<RandomSubSpace> class0 = RandomSubSpace.class;
      DataFlavor dataFlavor0 = new DataFlavor(class0, "@data");
      DataFlavor dataFlavor1 = new DataFlavor(class0, ".arff");
      dataFlavor0.equals(dataFlavor1);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      dataFlavor1.isMimeTypeSerializedObject();
      double double1 = evaluation0.falseNegativeRate(26);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.7055793529108447
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      C45Loader c45Loader0 = new C45Loader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      MockRandom mockRandom0 = new MockRandom(0L);
      evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation0.kappa();
      assertEquals(1.0, double1, 0.01);
      
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      File file0 = MockFile.createTempFile("]f'pm[", "lnFactorial");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(mockFileInputStream0);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(mockFileInputStream0);
      converterUtils_DataSource1.nextElement(instances0);
      MockRandom mockRandom1 = new MockRandom();
      instances0.resample(mockRandom0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.confusionMatrix();
      double double2 = evaluation1.numFalsePositives(1);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation1.weightedFalsePositiveRate();
      assertEquals(double3, double0, 0.01);
      
      double double4 = evaluation1.trueNegativeRate(2);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.8048041227593314
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      C45Loader c45Loader0 = new C45Loader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      double double1 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.kappa();
      assertEquals(1.0, double2, 0.01);
      
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      File file0 = MockFile.createTempFile("]f'pm[", (String) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      double double3 = evaluation0.recall(2);
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertEquals(0, doubleArray0.length);
      
      evaluation0.falseNegativeRate(2284);
      double double4 = evaluation0.precision((-1456206972));
      assertEquals(double4, double3, 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.4741050341006434
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTrueNegatives(19);
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_SumClass = Double.NaN;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4570.2578878);
      doubleArray0[1] = (-4570.2578878);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 19;
      FileSystemHandling.shouldAllThrowIOExceptions();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      TestInstances testInstances0 = new TestInstances();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      Capabilities capabilities0 = simpleLogistic0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      testInstances0.getOptions();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation2.falseNegativeRate(2150);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation2.precision(2363);
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.trueNegativeRate(46);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      evaluation2.getHeader();
      assertEquals(0.0, evaluation2.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.6818026569191593
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      File file0 = MockFile.createTempFile("weka/core/Capabilities.props", "//\n");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation2.numTrueNegatives(1);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.001144140593967
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      RandomTree randomTree0 = new RandomTree();
      Capabilities capabilities0 = randomTree0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getOptions();
      double double0 = evaluation0.falseNegativeRate((-60));
      assertEquals(0.0, double0, 0.01);
      
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMatches();
      Vector<String> vector0 = new Vector<String>();
      Attribute attribute0 = new Attribute(" ", vector0, (-2));
      double double1 = evaluation0.truePositiveRate((-1));
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[7];
      LWL lWL0 = new LWL();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(lWL0);
      lWL0.setClassifier(additiveRegression0);
      // Undeclared exception!
      Evaluation.makeOptionString(lWL0, true);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.1539826627260195
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      C45Loader c45Loader0 = new C45Loader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      textDirectoryLoader0.getRevision();
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      SparseInstance sparseInstance0 = new SparseInstance(19);
      instances0.add((Instance) sparseInstance0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation.main(stringArray0);
      evaluation0.m_Unclassified = (double) (byte)105;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toClassDetailsString(".xml");
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      evaluation0.equals(naiveBayesUpdateable0);
      evaluation1.weightedTruePositiveRate();
      evaluation1.SFMeanSchemeEntropy();
      try { 
        CostMatrix.parseMatlab("@data");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.2731036383097503
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      ReliefFAttributeEval reliefFAttributeEval1 = new ReliefFAttributeEval();
      reliefFAttributeEval1.globalInfo();
      testInstances0.setNumRelational(14);
      reliefFAttributeEval1.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances0.setNumInstancesRelational(27);
      capabilities0.clone();
      Evaluation evaluation0 = new Evaluation(instances0);
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.KBRelativeInformation();
      double double0 = new Double(27);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(2429, (char[]) null, 646);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.799006658827555
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOptions((String[]) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.weightedMatthewsCorrelation();
      evaluation0.kappa();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      File file0 = MockFile.createTempFile("Bi]z+EM|DT", "seedTipText");
      HTML hTML0 = new HTML();
      hTML0.setHeader(instances0);
      MockFile mockFile0 = new MockFile(".bsi");
      mockFile0.mkdir();
      hTML0.getOutputFile();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      testInstances0.setClassType(1423);
      int int0 = 522;
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.confusionMatrix();
      evaluation1.numFalsePositives(1);
      // Undeclared exception!
      try { 
        evaluation1.precision(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.089437326976029
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      capabilities0.getOtherCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = (-25);
      evaluation0.numFalseNegatives((-25));
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.recall((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.4282342922064575
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PART pART0 = new PART();
      Capabilities capabilities0 = pART0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      int[] intArray0 = new int[8];
      intArray0[0] = (-2);
      intArray0[1] = (-1);
      intArray0[2] = (-2);
      intArray0[3] = (-2);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-2);
      reliefFAttributeEval0.postProcess(intArray0);
      reliefFAttributeEval0.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances0.setNumInstancesRelational((-1339));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(93);
      CostMatrix costMatrix2 = new CostMatrix(costMatrix0);
      costSensitiveClassifier0.setMinimizeExpectedCost(false);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Stacking stacking0 = new Stacking();
      AbstractClassifier.makeCopy(stacking0);
      textDirectoryLoader0.setOutputFilename(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      double double0 = evaluation0.weightedTrueNegativeRate();
      double double1 = evaluation0.weightedTruePositiveRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.873427600986954
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      C45Loader c45Loader0 = new C45Loader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      MockRandom mockRandom0 = new MockRandom(0L);
      double double1 = evaluation0.weightedMatthewsCorrelation();
      double double2 = evaluation0.kappa();
      assertEquals(1.0, double2, 0.01);
      
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      File file0 = MockFile.createTempFile("]f'pm[", (String) null);
      evaluation0.m_CostMatrix = null;
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(mockFileInputStream0);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(mockFileInputStream0);
      converterUtils_DataSource1.nextElement(instances0);
      MockRandom mockRandom1 = new MockRandom();
      Instances instances1 = instances0.resample(mockRandom1);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.confusionMatrix();
      double double3 = evaluation0.numFalsePositives(0);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation1.precision(0);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = evaluation0.errorRate();
      assertEquals(double5, double1, 0.01);
      
      double double6 = evaluation0.unclassified();
      assertEquals(0.0, double6, 0.01);
      
      boolean boolean0 = evaluation1.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.327380097055158
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.areaUnderPRC(3519);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation2.numFalsePositives(435);
      assertEquals(0.0, double0, 0.01);
      
      evaluation1.precision((-1249));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1249);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-2764.0);
      doubleArray0[4] = (double) (byte) (-70);
      doubleArray0[6] = Double.NaN;
      double double1 = evaluation1.falseNegativeRate(3519);
      double double2 = evaluation0.precision((byte) (-70));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.178235655793613
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/setNumFolds0.tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedFalseNegativeRate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockRandom mockRandom0 = new MockRandom();
      double double1 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double1, double0, 0.01);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      M5P m5P0 = new M5P();
      double double2 = evaluation1.correct();
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.563642239149902
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      evaluation0.toMatrixString("@data");
      textDirectoryLoader0.getRevision();
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      Evaluation.main(stringArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-70);
      intArray0[1] = (int) (byte) (-70);
      intArray0[2] = (int) (byte) (-70);
      intArray0[3] = (int) (byte) (-70);
      intArray0[4] = (int) (byte) (-70);
      intArray0[5] = (int) (byte) (-70);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1218.9289367870988), intArray0, (byte) (-70));
      binarySparseInstance0.setMissing((-2681));
      ArrayList<BinarySparseInstance> arrayList0 = new ArrayList<BinarySparseInstance>();
      arrayList0.add(binarySparseInstance0);
      arrayList0.add(binarySparseInstance0);
      instances0.addAll((Collection<? extends Instance>) arrayList0);
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.KBMeanInformation();
      evaluation0.numFalsePositives((-70));
      evaluation0.rootMeanPriorSquaredError();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.4428852875371887
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      C45Loader c45Loader0 = new C45Loader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      Capabilities capabilities0 = simpleKMeans0.getCapabilities();
      capabilities0.enableAllClassDependencies();
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer(simpleKMeans0);
      capabilities0.assign(capabilities0);
      makeDensityBasedClusterer0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("1034-1040");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((-1));
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumInstancesRelational((-658));
      TestInstances testInstances2 = new TestInstances();
      testInstances2.setNumNumeric((-1));
      testInstances2.toString();
      testInstances2.setNumNumeric((-658));
      MockRandom mockRandom0 = new MockRandom();
      testInstances1.setNumNominalValues((-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.trueNegativeRate((-2));
      double double0 = evaluation1.m_MaxTarget;
      TestInstances testInstances3 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getOptions();
      testInstances3.setNumRelational(105);
      evaluation0.falseNegativeRate((-1947));
      evaluation1.falsePositiveRate(5);
      // Undeclared exception!
      try { 
        evaluation1.precision((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.5841256688169025
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      C45Loader c45Loader0 = new C45Loader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".arff";
      C45Loader.main(stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      textDirectoryLoader0.getRevision();
      String[] stringArray1 = textDirectoryLoader0.getOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".names");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation.main(stringArray1);
      evaluation0.m_Unclassified = (double) (byte)105;
      evaluation0.toClassDetailsString(".xml");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      evaluation0.equals(naiveBayesUpdateable0);
      evaluation0.weightedTruePositiveRate();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.weightedRecall();
      evaluation0.numTruePositives(1287);
      evaluation0.toSummaryString(true);
      double double0 = evaluation0.matthewsCorrelationCoefficient((byte)105);
      assertEquals(-0.0, evaluation0.SFMeanSchemeEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.19955920440903
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      MultiScheme multiScheme0 = new MultiScheme();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@relation";
      stringArray0[1] = "<!-- globalinfo-start -->";
      stringArray0[2] = "<!-- globalinfo-start -->";
      stringArray0[3] = "globalInfo";
      AbstractClassifier.runClassifier(multiScheme0, stringArray0);
      evaluation0.equals(multiScheme0);
      MockRandom mockRandom0 = new MockRandom();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.assign(testInstances1);
      testInstances1.setWordSeparators("LFm@& O|]gH_i'");
      evaluation0.updateNumericScores((double[]) null, (double[]) null, (-1));
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.6981642957264618
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTrueNegatives(19);
      assertEquals(0.0, double0, 0.01);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      File file0 = MockFile.createTempFile("W#", "setNumFolds");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalsePositives(19);
      double double1 = evaluation1.precision(19);
      assertEquals(0.0, double1, 0.01);
      
      evaluation1.numTruePositives(19);
      evaluation1.toSummaryString(true);
      double double2 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.320811952555979
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+wAR*ij");
      evaluation0.numTrueNegatives(19);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.meanAbsoluteError();
      int int0 = 61;
      evaluation0.precision(19);
      CoverTree coverTree0 = new CoverTree();
      // Undeclared exception!
      try { 
        evaluation1.makeDistribution((-4570.2578878));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4570
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.03260301521019
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      MockRandom mockRandom0 = new MockRandom(0L);
      double double1 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.kappa();
      assertEquals(1.0, double2, 0.01);
      
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      File file0 = MockFile.createTempFile("]f'pm[", (String) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(mockFileInputStream0);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(mockFileInputStream0);
      converterUtils_DataSource1.nextElement(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      evaluation1.numFalsePositives((-128));
      double double3 = evaluation1.precision(122);
      evaluation0.fMeasure(2);
      double double4 = evaluation0.pctUnclassified();
      assertEquals(double4, double0, 0.01);
      
      double double5 = evaluation0.falseNegativeRate(2);
      assertEquals(double5, double3, 0.01);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.3228823459307204
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      C45Loader c45Loader0 = new C45Loader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      textDirectoryLoader0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      String[] stringArray1 = new String[4];
      stringArray1[0] = ".=JV}1N7qF9,OVtE";
      stringArray1[1] = "\tUses the specified class for generating the classification output.\n";
      stringArray1[2] = "\tUses the specified class for generating the classification output.\n";
      Evaluation.main(stringArray1);
      Evaluation evaluation1 = new Evaluation(instances0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation1.crossValidateModel((Classifier) classificationViaRegression0, (Instances) null, (-2058), (Random) mockRandom0, (Object[]) stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.9999683577390484
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      String[] stringArray0 = new String[7];
      stringArray0[6] = ".arff";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) classificationViaRegression0, instances0, 14, (Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.7805006998594135
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@relation";
      stringArray0[4] = "@data";
      stringArray0[5] = "@data";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      stringArray0[6] = ".bsi";
      stringArray0[7] = ".arff";
      textDirectoryLoader0.setOptions(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-70);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation1.crossValidateModel((Classifier) costSensitiveClassifier0, instances0, 348, (Random) mockRandom0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int[] intArray0 = new int[4];
      intArray0[1] = 506;
      intArray0[2] = 506;
      intArray0[3] = 506;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 506;
      doubleArray0[3] = (double) 506;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) gaussianProcesses0, instances0, 1, (Random) mockRandom0, (Object[]) gaussianProcesses0.TAGS_FILTER);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.106929919173357
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      C45Loader c45Loader0 = new C45Loader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      capabilities0.enableAllClassDependencies();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      reliefFAttributeEval0.setOptions(testInstances0.DEFAULT_WORDS);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumInstancesRelational((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      ReliefFAttributeEval reliefFAttributeEval1 = new ReliefFAttributeEval();
      reliefFAttributeEval1.setOptions(testInstances0.DEFAULT_WORDS);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1442762233);
      intArray0[1] = 2513;
      intArray0[2] = (-1442762233);
      evaluation0.numFalsePositives(16);
      // Undeclared exception!
      try { 
        evaluation0.precision(2513);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.955872664774548
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities1 = adaBoostM1_0.getCapabilities();
      capabilities0.assign(capabilities1);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      reliefFAttributeEval0.setOptions(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Attribute attribute0 = new Attribute(".arff", vector0, (-2));
      instances0.setClass(attribute0);
      evaluation0.falseNegativeRate((-1882899090));
      evaluation0.precision(1);
      org.evosuite.runtime.Random.setNextRandom((-1696));
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.687759484020588
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      reliefFAttributeEval0.globalInfo();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.relativeAbsoluteError();
      double double0 = evaluation0.SFMeanEntropyGain();
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "getRevision");
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WrapperSubsetEval wrapperSubsetEval1 = new WrapperSubsetEval();
      WrapperSubsetEval wrapperSubsetEval2 = new WrapperSubsetEval();
      wrapperSubsetEval0.globalInfo();
      WrapperSubsetEval wrapperSubsetEval3 = new WrapperSubsetEval();
      wrapperSubsetEval2.setThreshold(0.17499999701976776);
      wrapperSubsetEval0.getClassifier();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.weightedFalsePositiveRate();
      MockRandom mockRandom1 = new MockRandom();
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.SFPriorEntropy();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.9851618115346552
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, " ");
      Instances instances0 = testInstances0.generate();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities1 = infoGainAttributeEval0.getCapabilities();
      capabilities1.enableAllClassDependencies();
      SGD sGD0 = new SGD();
      AbstractClassifier.makeCopy(sGD0);
      ReliefFAttributeEval reliefFAttributeEval1 = new ReliefFAttributeEval();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.correlationCoefficient();
      double double0 = evaluation0.m_ClassPriorsSum;
      evaluation0.meanAbsoluteError();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      MockURL.getFtpExample();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.685676133883035
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      C45Loader c45Loader0 = new C45Loader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      Evaluation evaluation1 = new Evaluation(instances0);
      HashSet<GeneralRegression> hashSet0 = new HashSet<GeneralRegression>();
      PriorityQueue<TechnicalInformationHandlerJavadoc> priorityQueue0 = new PriorityQueue<TechnicalInformationHandlerJavadoc>();
      instances0.removeAll(priorityQueue0);
      evaluation0.weightedTruePositiveRate();
      evaluation1.SFMeanSchemeEntropy();
      evaluation0.rootRelativeSquaredError();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      instances0.deleteWithMissing(195225786);
      SparseInstance sparseInstance0 = new SparseInstance(4);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream(wordTokenizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.tokenizers.WordTokenizer", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      int[] intArray0 = new int[4];
      intArray0[0] = 506;
      intArray0[1] = 506;
      intArray0[2] = 506;
      intArray0[3] = 506;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, intArray0, 473);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 506, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.3668667507097454
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(19);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      File file0 = MockFile.createTempFile("W#", "seNumFolds");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.numFalsePositives(19);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation1.precision(19);
      DenseInstance denseInstance0 = new DenseInstance(1111);
      double double2 = evaluation1.trueNegativeRate((-820));
      assertEquals(0.0, double2, 0.01);
      
      String string0 = evaluation0.toClassDetailsString("useLaplaceTipText");
      assertEquals("useLaplaceTipText\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double3 = evaluation1.matthewsCorrelationCoefficient(1111);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.682309130516031
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTrueNegatives(19);
      assertEquals(0.0, double0, 0.01);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      File file0 = MockFile.createTempFile("(W#", "setNumFolds");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.m_TotalCost;
      double double2 = evaluation0.truePositiveRate(19);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double3 = evaluation1.numFalsePositives((-357913946));
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation1.errorRate();
      double double5 = evaluation0.weightedRecall();
      assertEquals(double5, double4, 0.01);
      
      double double6 = evaluation0.numFalseNegatives(1456);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(0.0, double6, 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.719808989932354
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      String[] stringArray0 = Locale.getISOCountries();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray1 = new String[0];
      Evaluation.main(stringArray1);
      TextDirectoryLoader.main(stringArray0);
      evaluation0.equals(instances0);
      double double1 = evaluation0.m_SumClass;
      double double2 = evaluation0.weightedFalseNegativeRate();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      textDirectoryLoader0.setCharSet("'E%C6e+f#Ybv");
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      evaluation0.evaluateModel(classifier0, instances0, (Object[]) stringArray1);
      double double3 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double3, double0, 0.01);
      
      double double4 = evaluation0.weightedTruePositiveRate();
      assertEquals(double4, double2, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.154261892451708
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.SFMeanEntropyGain();
      evaluation0.getClassPriors();
      JSONLoader jSONLoader0 = new JSONLoader();
      try { 
        jSONLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.4189364700457425
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ck}<pDT";
      stringArray0[1] = "ck}<pDT";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      reliefFAttributeEval0.setOptions(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      int int0 = 13;
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Capabilities capabilities0 = votedPerceptron0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setNumInstancesRelational(13);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int1 = 2171;
      Instances instances0 = new Instances("ck}<pDT", arrayList0, 2171);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.3655934560029954
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "debugTipText");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision(54);
      evaluation0.sizeOfPredictedRegions();
      int[] intArray0 = new int[7];
      intArray0[0] = 4;
      intArray0[1] = 54;
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[4] = 4;
      intArray0[5] = 54;
      intArray0[6] = 54;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2764.0), intArray0, 3);
      evaluation0.trueNegativeRate(829);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(54, charArray0, 68);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) instances0;
      objectArray0[1] = (Object) evoSuiteFile0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) evoSuiteFile0;
      objectArray0[6] = (Object) instances0;
      objectArray0[7] = (Object) textDirectoryLoader0;
      objectArray0[8] = (Object) textDirectoryLoader0;
      try { 
        evaluation0.evaluateModel((Classifier) null, instances0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Instances cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.9280478396261032
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=== Summary ===\n");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MinTarget = 0.0;
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = '{';
      charArray0[3] = '{';
      charArray0[4] = '{';
      evaluation0.num2ShortID(2147483645, charArray0, 14);
      String[] stringArray0 = new String[0];
      MockRandom mockRandom0 = new MockRandom(2147483645);
      mockRandom0.longs();
      try { 
        evaluation0.crossValidateModel("{{{{{{{{{{{{{{", instances0, 2059, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: {{{{{{{{{{{{{{
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.290664210654739
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".N)eaecr`%L%{ec-");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(19);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile1);
      File file0 = MockFile.createTempFile("W#", "setNumFolds");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      evaluation0.numFalsePositives(19);
      evaluation0.precision(19);
      textDirectoryLoader0.listOptions();
      DenseInstance denseInstance0 = new DenseInstance(1111);
      evaluation0.numTruePositives((-1320));
      try { 
        evaluation0.updateStatsForPredictor((-2.0), denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.1710751005584235
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(19);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      File file0 = MockFile.createTempFile("W#", "seNumFolds");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numFalsePositives((-1995138716));
      double double0 = evaluation0.precision(19);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.falsePositiveRate((-1614));
      double double1 = evaluation0.pctIncorrect();
      evaluation0.toMatrixString();
      evaluation0.weightedTrueNegativeRate();
      double double2 = evaluation0.numFalseNegatives(18);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.falseNegativeRate(19);
      double double4 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double4, double1, 0.01);
      
      double double5 = evaluation1.fMeasure((-1456206972));
      assertEquals(double5, double3, 0.01);
      
      evaluation0.getDiscardPredictions();
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.50804676777597
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTrueNegatives(19);
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4570.2578878);
      doubleArray0[1] = (-4570.2578878);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 19;
      FileSystemHandling.shouldAllThrowIOExceptions();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      evaluation1.truePositiveRate(1);
      double double1 = evaluation1.falsePositiveRate(3);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double2, 0.01);
      
      evaluation0.toMatrixString();
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.9489486659250665
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      C45Loader c45Loader0 = new C45Loader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      textDirectoryLoader0.getOptions();
      char[] charArray0 = new char[8];
      charArray0[1] = '#';
      charArray0[2] = '#';
      charArray0[3] = '#';
      charArray0[4] = '#';
      charArray0[5] = 'w';
      charArray0[6] = '#';
      charArray0[7] = 'w';
      evaluation0.num2ShortID(22, charArray0, 12);
      MockRandom mockRandom0 = new MockRandom();
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.5174714039166524
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "===Summary ===\n");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      textDirectoryLoader0.setOutputFilename(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      double double0 = evaluation0.m_Unclassified;
      evaluation0.addNumericTrainClass((-2764.0), (-1.7976931348623157E308));
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.3683130730379967
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      C45Loader c45Loader0 = new C45Loader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      MockRandom mockRandom0 = new MockRandom(0L);
      double double1 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.kappa();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      File file0 = MockFile.createTempFile("]f'pm[", "lnFactorial");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(mockFileInputStream0);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(mockFileInputStream0);
      converterUtils_DataSource1.nextElement(instances0);
      MockRandom mockRandom1 = new MockRandom();
      Instances instances1 = instances0.resample(mockRandom0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ConverterUtils.DataSource converterUtils_DataSource2 = new ConverterUtils.DataSource(pipedInputStream0);
      ConverterUtils.DataSource converterUtils_DataSource3 = new ConverterUtils.DataSource(pipedInputStream0);
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      double double2 = evaluation1.priorEntropy();
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.913737189449991
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      Capabilities capabilities1 = infoGainAttributeEval0.getCapabilities();
      capabilities1.enableAllClassDependencies();
      ReliefFAttributeEval reliefFAttributeEval1 = new ReliefFAttributeEval();
      String[] stringArray0 = new String[0];
      reliefFAttributeEval1.setOptions(stringArray0);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumInstancesRelational(13);
      Evaluation evaluation0 = new Evaluation(instances0);
      ReliefFAttributeEval reliefFAttributeEval2 = new ReliefFAttributeEval();
      ReliefFAttributeEval reliefFAttributeEval3 = new ReliefFAttributeEval();
      reliefFAttributeEval3.setOptions(testInstances1.DEFAULT_WORDS);
      int[] intArray0 = new int[2];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2513, intArray0, 15);
      // Undeclared exception!
      try { 
        evaluation0.trueNegativeRate(312);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.8669932428978546
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray1);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDirectory();
      evaluation0.toSummaryString(".arff", true);
      String string0 = evaluation0.toSummaryString("C&rvd", false);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals("C&rvd\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "INSERT INTO ";
      Evaluation.makeOptionString((Classifier) null, true);
      MockRandom mockRandom0 = new MockRandom();
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.8632431035049843
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      Classifier classifier0 = lWL0.getClassifier();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@relation";
      stringArray0[1] = "i";
      stringArray0[2] = "i";
      stringArray0[3] = ".arff";
      stringArray0[4] = "i";
      stringArray0[5] = "i";
      AbstractClassifier.runClassifier(classifier0, stringArray0);
      REPTree rEPTree0 = new REPTree();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = 'w';
      String string0 = evaluation0.toClassDetailsString("i");
      assertEquals("i\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.8109710120534392
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=== Summary ===\n");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "=== Summary ===\n";
      stringArray0[2] = "-hl'+4Q9FN(?X1%e";
      stringArray0[3] = "@data";
      try { 
        Evaluation.evaluateModel(classifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=== Summary ===\n");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1994981129), charArray0, (-4666));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.3423901693012241
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      MockFile.createTempFile("Incorrectly Classified Instances   ", "Percentage split ('-percentage-split') is missing.");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.8635403727609594
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(0L);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.toSummaryString();
      evaluation0.KBInformation();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedFalsePositiveRate();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.0171346761497504
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      ReliefFAttributeEval reliefFAttributeEval1 = new ReliefFAttributeEval();
      reliefFAttributeEval1.setOptions(testInstances0.DEFAULT_WORDS);
      testInstances0.setNumInstancesRelational(27);
      capabilities0.clone();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-1));
      Evaluation evaluation1 = new Evaluation(instances0);
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      evaluation0.equals(evaluation1);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.trueNegativeRate(10);
      evaluation1.areaUnderROC(10);
      // Undeclared exception!
      try { 
        evaluation1.precision(472);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 472
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("(FA!Fod9", arrayList0, 1597);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=== Summary ===\n");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, ".arff");
      assertNotNull(string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.101457975184474
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      Classifier classifier0 = lWL0.getClassifier();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@relation";
      stringArray0[1] = "i";
      stringArray0[2] = "i";
      stringArray0[3] = ".arff";
      stringArray0[4] = "i";
      stringArray0[5] = "i";
      AbstractClassifier.runClassifier(classifier0, stringArray0);
      REPTree rEPTree0 = new REPTree();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockRandom mockRandom0 = new MockRandom(0L);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      Evaluation evaluation1 = new Evaluation(instances0);
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = 'w';
      charArray0[2] = '6';
      charArray0[3] = 'T';
      charArray0[4] = 'q';
      charArray0[5] = '{';
      evaluation1.num2ShortID(5, charArray0, 0);
      try { 
        evaluation1.crossValidateModel(".bsi", (Instances) null, (-223), stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .bsi
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.6203780253659454
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      MockRandom mockRandom0 = new MockRandom(0L);
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      OneR oneR0 = new OneR();
      Logistic logistic0 = new Logistic();
      evaluation1.equals(logistic0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation2.m_SumClass;
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double0, 0.01);
      
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      FileSystemHandling.shouldAllThrowIOExceptions();
      wrapperSubsetEval0.getClassifier();
      double double3 = evaluation0.truePositiveRate(2);
      assertEquals(0.0, double3, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = 'I';
      charArray0[2] = 'k';
      charArray0[3] = ' ';
      charArray0[4] = '4';
      charArray0[5] = 'B';
      charArray0[6] = '?';
      charArray0[7] = '\\';
      String string0 = evaluation2.num2ShortID(4, charArray0, 3);
      assertEquals("  4", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[7];
      LWL lWL0 = new LWL();
      Evaluation.makeOptionString(lWL0, true);
      MockRandom mockRandom0 = new MockRandom();
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.582160402760742
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTrueNegatives(19);
      assertEquals(0.0, double0, 0.01);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      File file0 = MockFile.createTempFile("(W#", "setNumFolds");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalsePositives(19);
      double double1 = evaluation0.truePositiveRate(19);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double2 = evaluation1.numFalsePositives((-357913946));
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation1.errorRate();
      double double4 = evaluation1.incorrect();
      assertEquals(double4, double1, 0.01);
      
      double double5 = evaluation0.weightedFalsePositiveRate();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.4775431275048834
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      MockRandom mockRandom0 = new MockRandom(0L);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.kappa();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      File file0 = MockFile.createTempFile("]f'pm[", (String) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(mockFileInputStream0);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(mockFileInputStream0);
      converterUtils_DataSource1.nextElement(instances0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, (Instance) null, 1864.997848321);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      C45Loader c45Loader0 = new C45Loader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      SMO sMO0 = new SMO();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      capabilities0.enableAllClassDependencies();
      ReliefFAttributeEval reliefFAttributeEval1 = new ReliefFAttributeEval();
      String[] stringArray0 = new String[0];
      reliefFAttributeEval1.setOptions(stringArray0);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumInstancesRelational(13);
      Evaluation evaluation0 = new Evaluation(instances0);
      ReliefFAttributeEval reliefFAttributeEval2 = new ReliefFAttributeEval();
      ReliefFAttributeEval reliefFAttributeEval3 = new ReliefFAttributeEval();
      reliefFAttributeEval3.setOptions(testInstances1.DEFAULT_WORDS);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.setThreshold((-1));
      wrapperSubsetEval0.getClassifier();
      // Undeclared exception!
      try { 
        evaluation0.weightedFalsePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.2756627214444514
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = new Capabilities(reliefFAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      Version.VERSION = null;
      ArrayList<BinarySparseInstance> arrayList0 = new ArrayList<BinarySparseInstance>();
      evaluation1.areaUnderPRC(1003);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.equals((Object) null);
      MockRandom mockRandom0 = new MockRandom();
      evaluation2.trueNegativeRate(372);
      evaluation1.areaUnderROC((-197112209));
      // Undeclared exception!
      try { 
        evaluation0.precision((-1012));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1012
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[7];
      XML xML0 = new XML();
      xML0.setOutputDistribution(true);
      xML0.listOptions();
      try { 
        Evaluation.evaluateModel("|", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name |.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".N)eaecr`%L%{ec-");
      int int0 = 19;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(19);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile1);
      File file0 = MockFile.createTempFile("W#", "setNumFolds");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      DecisionStump decisionStump0 = new DecisionStump();
      try { 
        Evaluation.wekaStaticWrapper(decisionStump0, "@data");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Evaluation.handleCostOption("", (-2697));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.166089906805759
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/setNumFolds0.tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.SFMeanEntropyGain();
      evaluation0.getClassPriors();
      JSONLoader jSONLoader0 = new JSONLoader();
      try { 
        jSONLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      AbstractClassifier.runClassifier(filteredClassifier0, (String[]) null);
      Evaluation.getGlobalInfo(filteredClassifier0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(1);
      CostMatrix costMatrix2 = new CostMatrix(costMatrix0);
      costSensitiveClassifier0.setMinimizeExpectedCost(false);
      SparseInstance sparseInstance0 = new SparseInstance(2);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 109;
      doubleArray0[2] = (double) 109;
      doubleArray0[4] = (double) 6;
      try { 
        costMatrix1.expectedCosts(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Length of probability estimates don't match cost matrix
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.0160821640552578
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      J48 j48_0 = new J48();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@data";
      AbstractClassifier.runClassifier(j48_0, stringArray0);
      Evaluation.getGlobalInfo(j48_0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(1);
      CostMatrix costMatrix2 = new CostMatrix(costMatrix0);
      costSensitiveClassifier0.setMinimizeExpectedCost(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      AbstractClassifier.makeCopy(naiveBayesUpdateable0);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.setOutputFilename(false);
      assertFalse(textDirectoryLoader2.getOutputFilename());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      InfoGainAttributeEval infoGainAttributeEval0 = new InfoGainAttributeEval();
      ReliefFAttributeEval reliefFAttributeEval1 = new ReliefFAttributeEval();
      String[] stringArray0 = new String[0];
      reliefFAttributeEval1.setOptions(stringArray0);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setNumInstancesRelational(13);
      Evaluation evaluation0 = new Evaluation(instances0);
      ReliefFAttributeEval reliefFAttributeEval2 = new ReliefFAttributeEval();
      ReliefFAttributeEval reliefFAttributeEval3 = new ReliefFAttributeEval();
      reliefFAttributeEval3.setOptions(testInstances1.DEFAULT_WORDS);
      int[] intArray0 = new int[2];
      intArray0[1] = 2513;
      MockRandom mockRandom0 = new MockRandom((-1));
      try { 
        evaluation0.crossValidateModel((String) null, instances0, 6, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: null
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[2];
      TestInstances testInstances0 = new TestInstances();
      HashSet<GeneralRegression> hashSet0 = new HashSet<GeneralRegression>();
      PriorityQueue<TechnicalInformationHandlerJavadoc> priorityQueue0 = new PriorityQueue<TechnicalInformationHandlerJavadoc>();
      try { 
        Evaluation.handleCostOption("EO9!P_", 280106558);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      REPTree rEPTree0 = new REPTree();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, "fy");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      costMatrix0.toString();
      CostMatrix costMatrix1 = new CostMatrix(1);
      CostMatrix costMatrix2 = new CostMatrix(costMatrix0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      WrapperSubsetEval wrapperSubsetEval1 = new WrapperSubsetEval();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".cost";
      stringArray0[1] = ".cost";
      stringArray0[2] = ".cost";
      stringArray0[3] = ".cost";
      stringArray0[4] = ".cost";
      stringArray0[5] = " 0\n";
      ASEvaluation.runEvaluator(wrapperSubsetEval0, stringArray0);
      wrapperSubsetEval1.getClassifier();
      Object[] objectArray0 = new Object[0];
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 7;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 5;
      iBk0.pruneToK((Instances) null, doubleArray0, 6);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
